/**
 *
 */
import OpenApi;
import OpenApi.OpenApiUtil;

extends OpenApi;


init(config: OpenApiUtil.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('xtee', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!$isNull(endpoint)) {
    return endpoint;
  }
  
  if (!$isNull(endpointMap) && !$isNull(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return OpenApiUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddSampleDataByCsvRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  ossFileName?: string(name='ossFileName', description='Uploaded OSS address.', example='saf/path/test.csv'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  sampleBatchUuid?: string(name='sampleBatchUuid', description='Sample UUID.', example='1806507582222226_saf_sample_split_coupon_abuse_saf_sample_split_mobile_saf_sample_split_pass'),
}

model AddSampleDataByCsvResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
}

model AddSampleDataByCsvResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddSampleDataByCsvResponseBody(name='body'),
}

/**
 * @summary Add Sample Data via CSV
 *
 * @param request AddSampleDataByCsvRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddSampleDataByCsvResponse
 */
@context("addSampleDataByCsvWithContext")
async function addSampleDataByCsvWithOptions(request: AddSampleDataByCsvRequest, runtime: $RuntimeOptions): AddSampleDataByCsvResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.ossFileName)) {
    query['ossFileName'] = request.ossFileName;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.sampleBatchUuid)) {
    query['sampleBatchUuid'] = request.sampleBatchUuid;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'AddSampleDataByCsv',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Add Sample Data via CSV
 *
 * @param request AddSampleDataByCsvRequest
 * @return AddSampleDataByCsvResponse
 */
async function addSampleDataByCsv(request: AddSampleDataByCsvRequest): AddSampleDataByCsvResponse {
  var runtime = new $RuntimeOptions{};
  return addSampleDataByCsvWithOptions(request, runtime);
}

model AddSampleDataByTextRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  dataValue?: string(name='dataValue', description='List data.', example='testA \\\\n testB'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  sampleBatchUuid?: string(name='sampleBatchUuid', description='Sample UUID.', example='1806507582222226
_saf_sample_split_coupon_abuse_saf_sample_split_mobile_saf_sample_split_pass'),
}

model AddSampleDataByTextResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
}

model AddSampleDataByTextResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddSampleDataByTextResponseBody(name='body'),
}

/**
 * @summary Add list data through a text box for samples
 *
 * @param request AddSampleDataByTextRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddSampleDataByTextResponse
 */
@context("addSampleDataByTextWithContext")
async function addSampleDataByTextWithOptions(request: AddSampleDataByTextRequest, runtime: $RuntimeOptions): AddSampleDataByTextResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.dataValue)) {
    query['dataValue'] = request.dataValue;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.sampleBatchUuid)) {
    query['sampleBatchUuid'] = request.sampleBatchUuid;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'AddSampleDataByText',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Add list data through a text box for samples
 *
 * @param request AddSampleDataByTextRequest
 * @return AddSampleDataByTextResponse
 */
async function addSampleDataByText(request: AddSampleDataByTextRequest): AddSampleDataByTextResponse {
  var runtime = new $RuntimeOptions{};
  return addSampleDataByTextWithOptions(request, runtime);
}

model BatchDeleteSampleDataRequest {
  lang?: string(name='Lang', description='Language of the error message returned by the interface. Values: zh: Chinese; en: English. Default is en.', example='zh'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  uuids?: string(name='uuids', description='UUID.', example='89cd3e44cd2f4a529fb020f3bab3ee1c'),
}

model BatchDeleteSampleDataResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
}

model BatchDeleteSampleDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchDeleteSampleDataResponseBody(name='body'),
}

/**
 * @summary Batch Delete Sample List Data
 *
 * @param request BatchDeleteSampleDataRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return BatchDeleteSampleDataResponse
 */
@context("batchDeleteSampleDataWithContext")
async function batchDeleteSampleDataWithOptions(request: BatchDeleteSampleDataRequest, runtime: $RuntimeOptions): BatchDeleteSampleDataResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.uuids)) {
    query['uuids'] = request.uuids;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'BatchDeleteSampleData',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Batch Delete Sample List Data
 *
 * @param request BatchDeleteSampleDataRequest
 * @return BatchDeleteSampleDataResponse
 */
async function batchDeleteSampleData(request: BatchDeleteSampleDataRequest): BatchDeleteSampleDataResponse {
  var runtime = new $RuntimeOptions{};
  return batchDeleteSampleDataWithOptions(request, runtime);
}

model BindVariableRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  apiRegionId?: string(name='apiRegionId', description='API region ID', example='cn-hangzhou'),
  apiType?: string(name='apiType', description='API type', example='SELF'),
  createType?: string(name='createType', description='Creation type', example='NORMAL'),
  defineId?: string(name='defineId', description='Associated variable definition primary key ID', example='2438'),
  defineIds?: string(name='defineIds', description='Variable definition IDs, can be multiple. If binding multiple IDs, separate them with commas', example='1546, 1547'),
  description?: string(name='description', description='Description information.', example='变量描述'),
  eventCode?: string(name='eventCode', description='Event code

This parameter is required.', example='de_agbzfi5134'),
  exceptionValue?: string(name='exceptionValue', description='Exception value', example='SYS_ERROR'),
  id?: long(name='id', description='Variable primary key ID', example='106875'),
  outputField?: string(name='outputField', description='Output field path', example='BOOLEAN'),
  outputType?: string(name='outputType', description='Output type', example='STRING'),
  params?: string(name='params', description='Binding input parameter information', example='{"accountId":"accountId","mobile":""}'),
  paramsList?: string(name='paramsList', description='Event parameter mapping 2.0, either params or paramsList must not be empty. List, JSON structure', example='[{"eventFieldName":"accountId","required":false}]'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  sourceType?: string(name='sourceType', description='Variable source', example='SAF'),
  title?: string(name='title', description='Title

This parameter is required.', example='变量title'),
}

model BindVariableResponseBody = {
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model BindVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BindVariableResponseBody(name='body'),
}

/**
 * @summary Variable binding operation
 *
 * @param request BindVariableRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return BindVariableResponse
 */
@context("bindVariableWithContext")
async function bindVariableWithOptions(request: BindVariableRequest, runtime: $RuntimeOptions): BindVariableResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.apiRegionId)) {
    query['apiRegionId'] = request.apiRegionId;
  }
  if (!$isNull(request.apiType)) {
    query['apiType'] = request.apiType;
  }
  if (!$isNull(request.createType)) {
    query['createType'] = request.createType;
  }
  if (!$isNull(request.defineId)) {
    query['defineId'] = request.defineId;
  }
  if (!$isNull(request.defineIds)) {
    query['defineIds'] = request.defineIds;
  }
  if (!$isNull(request.description)) {
    query['description'] = request.description;
  }
  if (!$isNull(request.eventCode)) {
    query['eventCode'] = request.eventCode;
  }
  if (!$isNull(request.exceptionValue)) {
    query['exceptionValue'] = request.exceptionValue;
  }
  if (!$isNull(request.id)) {
    query['id'] = request.id;
  }
  if (!$isNull(request.outputField)) {
    query['outputField'] = request.outputField;
  }
  if (!$isNull(request.outputType)) {
    query['outputType'] = request.outputType;
  }
  if (!$isNull(request.params)) {
    query['params'] = request.params;
  }
  if (!$isNull(request.paramsList)) {
    query['paramsList'] = request.paramsList;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.sourceType)) {
    query['sourceType'] = request.sourceType;
  }
  if (!$isNull(request.title)) {
    query['title'] = request.title;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'BindVariable',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Variable binding operation
 *
 * @param request BindVariableRequest
 * @return BindVariableResponse
 */
async function bindVariable(request: BindVariableRequest): BindVariableResponse {
  var runtime = new $RuntimeOptions{};
  return bindVariableWithOptions(request, runtime);
}

model CheckCopyRuleVariableRequest {
  createType?: string(name='CreateType', description='Creation type', example='NORMAL'),
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='RegId', description='Region code', example='cn-hangzhou'),
  sourceRuleId?: string(name='SourceRuleId', description='Source policy ID', example='102125'),
  sourceRuleIds?: string(name='SourceRuleIds', description='Source policy IDs', example='02125,102129'),
  targetEventCode?: string(name='TargetEventCode', description='Target event', example='de_ajtshf1581'),
}

model CheckCopyRuleVariableResponseBody = {
  requestId?: string(name='RequestId', description='ID of the request', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    message?: [ 
      {
        id?: long(name='Id', description='Primary key ID of the variable', example='213'),
        name?: string(name='Name', description='Name of the variable', example='age'),
        title?: string(name='Title', description='Title of the variable', example='年龄'),
        type?: string(name='Type', description='Type of the variable', example='NATIVE'),
      }
    ](name='Message', description='Information.'),
  }(name='ResultObject', description='Returned result information'),
}

model CheckCopyRuleVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckCopyRuleVariableResponseBody(name='body'),
}

/**
 * @summary Policy Replication Lineage Check
 *
 * @param request CheckCopyRuleVariableRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CheckCopyRuleVariableResponse
 */
@context("checkCopyRuleVariableWithContext")
async function checkCopyRuleVariableWithOptions(request: CheckCopyRuleVariableRequest, runtime: $RuntimeOptions): CheckCopyRuleVariableResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.createType)) {
    query['CreateType'] = request.createType;
  }
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['RegId'] = request.regId;
  }
  if (!$isNull(request.sourceRuleId)) {
    query['SourceRuleId'] = request.sourceRuleId;
  }
  if (!$isNull(request.sourceRuleIds)) {
    query['SourceRuleIds'] = request.sourceRuleIds;
  }
  if (!$isNull(request.targetEventCode)) {
    query['TargetEventCode'] = request.targetEventCode;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CheckCopyRuleVariable',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Policy Replication Lineage Check
 *
 * @param request CheckCopyRuleVariableRequest
 * @return CheckCopyRuleVariableResponse
 */
async function checkCopyRuleVariable(request: CheckCopyRuleVariableRequest): CheckCopyRuleVariableResponse {
  var runtime = new $RuntimeOptions{};
  return checkCopyRuleVariableWithOptions(request, runtime);
}

model CheckCustVariableLimitRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  createType?: string(name='createType', description='Creation type', example='NORMAL'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model CheckCustVariableLimitResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model CheckCustVariableLimitResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckCustVariableLimitResponseBody(name='body'),
}

/**
 * @summary Check if the cumulative number of variables exceeds the limit
 *
 * @param request CheckCustVariableLimitRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CheckCustVariableLimitResponse
 */
@context("checkCustVariableLimitWithContext")
async function checkCustVariableLimitWithOptions(request: CheckCustVariableLimitRequest, runtime: $RuntimeOptions): CheckCustVariableLimitResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.createType)) {
    query['createType'] = request.createType;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CheckCustVariableLimit',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Check if the cumulative number of variables exceeds the limit
 *
 * @param request CheckCustVariableLimitRequest
 * @return CheckCustVariableLimitResponse
 */
async function checkCustVariableLimit(request: CheckCustVariableLimitRequest): CheckCustVariableLimitResponse {
  var runtime = new $RuntimeOptions{};
  return checkCustVariableLimitWithOptions(request, runtime);
}

model CheckExpressionVariableLimitRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou'),
}

model CheckExpressionVariableLimitResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model CheckExpressionVariableLimitResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckExpressionVariableLimitResponseBody(name='body'),
}

/**
 * @summary Check if Creating Variables Exceeds the Limit
 *
 * @param request CheckExpressionVariableLimitRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CheckExpressionVariableLimitResponse
 */
@context("checkExpressionVariableLimitWithContext")
async function checkExpressionVariableLimitWithOptions(request: CheckExpressionVariableLimitRequest, runtime: $RuntimeOptions): CheckExpressionVariableLimitResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CheckExpressionVariableLimit',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Check if Creating Variables Exceeds the Limit
 *
 * @param request CheckExpressionVariableLimitRequest
 * @return CheckExpressionVariableLimitResponse
 */
async function checkExpressionVariableLimit(request: CheckExpressionVariableLimitRequest): CheckExpressionVariableLimitResponse {
  var runtime = new $RuntimeOptions{};
  return checkExpressionVariableLimitWithOptions(request, runtime);
}

model CheckFieldLimitRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  source?: string(name='source', description='Source of the field', example='DEFINE'),
}

model CheckFieldLimitResponseBody = {
  requestId?: string(name='requestId', description='Request ID', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: boolean(name='resultObject', description='Whether the condition is met: -**true**: meets the condition-**false**: does not meet the condition', example='true'),
}

model CheckFieldLimitResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckFieldLimitResponseBody(name='body'),
}

/**
 * @summary Check if the number of fields exceeds the limit
 *
 * @param request CheckFieldLimitRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CheckFieldLimitResponse
 */
@context("checkFieldLimitWithContext")
async function checkFieldLimitWithOptions(request: CheckFieldLimitRequest, runtime: $RuntimeOptions): CheckFieldLimitResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.source)) {
    query['source'] = request.source;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CheckFieldLimit',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Check if the number of fields exceeds the limit
 *
 * @param request CheckFieldLimitRequest
 * @return CheckFieldLimitResponse
 */
async function checkFieldLimit(request: CheckFieldLimitRequest): CheckFieldLimitResponse {
  var runtime = new $RuntimeOptions{};
  return checkFieldLimitWithOptions(request, runtime);
}

model CheckUsageVariableRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  id?: long(name='id', description='Primary Key ID

This parameter is required.', example='1'),
  regId?: string(name='regId', description='Region ID

This parameter is required.', example='cn-hangzhou'),
}

model CheckUsageVariableResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Whether it was successful', example='true'),
}

model CheckUsageVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckUsageVariableResponseBody(name='body'),
}

/**
 * @summary Validate Variable Reference
 *
 * @param request CheckUsageVariableRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CheckUsageVariableResponse
 */
@context("checkUsageVariableWithContext")
async function checkUsageVariableWithOptions(request: CheckUsageVariableRequest, runtime: $RuntimeOptions): CheckUsageVariableResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.id)) {
    query['id'] = request.id;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CheckUsageVariable',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Validate Variable Reference
 *
 * @param request CheckUsageVariableRequest
 * @return CheckUsageVariableResponse
 */
async function checkUsageVariable(request: CheckUsageVariableRequest): CheckUsageVariableResponse {
  var runtime = new $RuntimeOptions{};
  return checkUsageVariableWithOptions(request, runtime);
}

model CompareCopyRuleVariableRequest {
  createType?: string(name='CreateType', description='Creation type', example='NORMAL'),
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='RegId', description='Region code.', example='cn-hangzhou'),
  sourceRuleId?: string(name='SourceRuleId', description='Original policy ruleId.', example='102125'),
  sourceRuleIds?: string(name='SourceRuleIds', description='Original policy ruleIds.', example='102125,102129'),
  targetEventCode?: string(name='TargetEventCode', description='Target event eventCode.', example='de_ajtshf1581'),
}

model CompareCopyRuleVariableResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    custVariableList?: [ 
      {
        description?: string(name='Description', description='Description', example='描述'),
        id?: long(name='Id', description='Variable ID', example='1483'),
        name?: string(name='Name', description='Variable name', example='dxkkLw8fe18'),
        outType?: string(name='OutType', description='Variable type', example='SELF_VELOCITY'),
        title?: string(name='Title', description='Title', example='近1天账户登录设备数_bk4'),
      }
    ](name='CustVariableList', description='Cumulative variable list'),
    eventVariableList?: [ 
      {
        description?: string(name='Description', description='Description', example='描述'),
        id?: long(name='Id', description='Variable id', example='375'),
        name?: string(name='Name', description='Variable name', example='age'),
        outType?: string(name='OutType', description='Variable type', example='NATIVE'),
        title?: string(name='Title', description='Title', example='年龄'),
      }
    ](name='EventVariableList', description='Event field variables'),
    expressionVariableList?: [ 
      {
        description?: string(name='Description', description='Description', example='描述'),
        id?: long(name='Id', description='Variable ID', example='2540'),
        name?: string(name='Name', description='Variable name', example='ex_XheC9A382fe7'),
        outType?: string(name='OutType', description='Variable Type', example='EXPRESSION'),
        title?: string(name='Title', description='Title', example='手机号前7位'),
      }
    ](name='ExpressionVariableList', description='Custom variable list'),
    nameListVariableList?: [ 
      {
        description?: string(name='Description', description='Description', example='描述'),
        id?: long(name='Id', description='Variable id', example='1987'),
        name?: string(name='Name', description='Variable name', example='nl_UN8otElLb490'),
        outType?: string(name='OutType', description='Variable type', example='NAME_LIST'),
        title?: string(name='Title', description='Title', example='白名单'),
      }
    ](name='NameListVariableList', description='Name list variables'),
    queryExpressionVariableList?: [ 
      {
        description?: string(name='Description', description='Description', example='描述'),
        id?: long(name='Id', description='Variable ID', example='217'),
        name?: string(name='Name', description='Variable Name', example='ex_vcaoii1697'),
        outType?: string(name='OutType', description='Variable Type', example='QUERY_EXPRESSION'),
        title?: string(name='Title', description='Title', example='获取年龄'),
      }
    ](name='QueryExpressionVariableList', description='Custom Query Variable List'),
    systemVariableList?: [ 
      {
        description?: string(name='Description', description='Description', example='描述'),
        id?: long(name='Id', description='Variable ID', example='1003'),
        name?: string(name='Name', description='Variable name', example='sl_S02sHLFT7818'),
        outType?: string(name='OutType', description='Variable type', example='SELF_BIND'),
        title?: string(name='Title', description='Title', example='根据ip地址得到评分'),
      }
    ](name='SystemVariableList', description='System variable list'),
  }(name='ResultObject', description='Result object.'),
}

model CompareCopyRuleVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CompareCopyRuleVariableResponseBody(name='body'),
}

/**
 * @summary Policy Comparison
 *
 * @param request CompareCopyRuleVariableRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CompareCopyRuleVariableResponse
 */
@context("compareCopyRuleVariableWithContext")
async function compareCopyRuleVariableWithOptions(request: CompareCopyRuleVariableRequest, runtime: $RuntimeOptions): CompareCopyRuleVariableResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.createType)) {
    query['CreateType'] = request.createType;
  }
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['RegId'] = request.regId;
  }
  if (!$isNull(request.sourceRuleId)) {
    query['SourceRuleId'] = request.sourceRuleId;
  }
  if (!$isNull(request.sourceRuleIds)) {
    query['SourceRuleIds'] = request.sourceRuleIds;
  }
  if (!$isNull(request.targetEventCode)) {
    query['TargetEventCode'] = request.targetEventCode;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CompareCopyRuleVariable',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Policy Comparison
 *
 * @param request CompareCopyRuleVariableRequest
 * @return CompareCopyRuleVariableResponse
 */
async function compareCopyRuleVariable(request: CompareCopyRuleVariableRequest): CompareCopyRuleVariableResponse {
  var runtime = new $RuntimeOptions{};
  return compareCopyRuleVariableWithOptions(request, runtime);
}

model CreateAnalysisConditionFavoriteRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  condition?: string(name='condition', description='Condition value.

This parameter is required.', example='{"relationship":"and","list":[{"deepCount":1,"left":{"hasRightVariable":true,"fieldType":"INT","functionName":"","leftVariableType":"NATIVE","name":"DEtest222","operatorCode":"equals"},"right":{"rightVariableType":"constant","name":"11","functionName":""},"operatorCode":"equals"}]}'),
  eventBeginTime?: long(name='eventBeginTime', description='Start time, accurate to milliseconds (ms).

This parameter is required.', example='1751299200000'),
  eventCodes?: string(name='eventCodes', description='Event codes, separated by commas

This parameter is required.', example='["de_ahqhsw7665","de_agbzfi5134"]'),
  eventEndTime?: long(name='eventEndTime', description='End time, accurate to milliseconds (ms).

This parameter is required.', example='1753372799000'),
  fieldName?: string(name='fieldName', description='Field name', example='age'),
  fieldValue?: string(name='fieldValue', description='Field value', example='10'),
  name?: string(name='name', description='Condition favorite name

This parameter is required.', example='条件一'),
  regId?: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou'),
  type?: string(name='type', description='Query type

This parameter is required.', example='BASIC'),
}

model CreateAnalysisConditionFavoriteResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model CreateAnalysisConditionFavoriteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAnalysisConditionFavoriteResponseBody(name='body'),
}

/**
 * @summary Add Query Conditions
 *
 * @param request CreateAnalysisConditionFavoriteRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateAnalysisConditionFavoriteResponse
 */
@context("createAnalysisConditionFavoriteWithContext")
async function createAnalysisConditionFavoriteWithOptions(request: CreateAnalysisConditionFavoriteRequest, runtime: $RuntimeOptions): CreateAnalysisConditionFavoriteResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.condition)) {
    query['condition'] = request.condition;
  }
  if (!$isNull(request.eventBeginTime)) {
    query['eventBeginTime'] = request.eventBeginTime;
  }
  if (!$isNull(request.eventCodes)) {
    query['eventCodes'] = request.eventCodes;
  }
  if (!$isNull(request.eventEndTime)) {
    query['eventEndTime'] = request.eventEndTime;
  }
  if (!$isNull(request.fieldName)) {
    query['fieldName'] = request.fieldName;
  }
  if (!$isNull(request.fieldValue)) {
    query['fieldValue'] = request.fieldValue;
  }
  if (!$isNull(request.name)) {
    query['name'] = request.name;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.type)) {
    query['type'] = request.type;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateAnalysisConditionFavorite',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Add Query Conditions
 *
 * @param request CreateAnalysisConditionFavoriteRequest
 * @return CreateAnalysisConditionFavoriteResponse
 */
async function createAnalysisConditionFavorite(request: CreateAnalysisConditionFavoriteRequest): CreateAnalysisConditionFavoriteResponse {
  var runtime = new $RuntimeOptions{};
  return createAnalysisConditionFavoriteWithOptions(request, runtime);
}

model CreateAnalysisExportTaskRequest {
  lang?: string(name='Lang', description='Sets the language type for the request and response messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  columns?: string(name='columns', description='Custom columns', example='[
                {
                    "fieldName": "requestId",
                    "fieldTitle": "RequestId"
                },
                {
                    "fieldName": "eventTime",
                    "fieldTitle": "事件时间"
                },
                {
                    "fieldName": "accountId",
                    "fieldTitle": "账号"
                },
                {
                    "fieldName": "deviceId",
                    "fieldTitle": "设备ID"
                },
                {
                    "fieldName": "eventCode",
                    "fieldTitle": "事件编码"
                },
                {
                    "fieldName": "ip",
                    "fieldTitle": "IP"
                },
                {
                    "fieldName": "score",
                    "fieldTitle": "分值"
                },
                {
                    "fieldName": "tags",
                    "fieldTitle": "标签"
                },
                {
                    "fieldName": "DEtest222",
                    "fieldTitle": "测试222"
                }
            ]'),
  conditions?: string(name='conditions', description='Query expression', example='{
     "fieldName": null, 
      "fieldValue": null 
      }'),
  eventBeginTime?: long(name='eventBeginTime', description='Start time, accurate to milliseconds (ms).

This parameter is required.', example='1752076800000'),
  eventCodes?: string(name='eventCodes', description='Event code.

This parameter is required.', example='de_afghcf6411'),
  eventEndTime?: long(name='eventEndTime', description='End time, accurate to milliseconds (ms).

This parameter is required.', example='1753891199000'),
  fieldName?: string(name='fieldName', description='Field name', example='age'),
  fieldValue?: string(name='fieldValue', description='Field value', example='20'),
  fileFormat?: string(name='fileFormat', description='File format, Excel, CSV

This parameter is required.', example='CSV'),
  regId?: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou'),
  scope?: string(name='scope', description='Export scope: ALL: All, SELECT: Selected rows

This parameter is required.', example='ALL'),
  type?: string(name='type', description='Type, BASIC: Basic query, ADVANCE: Advanced query, BATCH: Batch query

This parameter is required.', example='BASIC'),
}

model CreateAnalysisExportTaskResponseBody = {
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    columns?: string(name='columns', description='Export list.', example='[
                {
                    "fieldName": "requestId",
                    "fieldTitle": "RequestId"
                },
                {
                    "fieldName": "eventTime",
                    "fieldTitle": "事件时间"
                },
                {
                    "fieldName": "accountId",
                    "fieldTitle": "账号"
                },
                {
                    "fieldName": "deviceId",
                    "fieldTitle": "设备ID"
                },
                {
                    "fieldName": "eventCode",
                    "fieldTitle": "事件编码"
                },
                {
                    "fieldName": "ip",
                    "fieldTitle": "IP"
                },
                {
                    "fieldName": "score",
                    "fieldTitle": "分值"
                },
                {
                    "fieldName": "tags",
                    "fieldTitle": "标签"
                },
                {
                    "fieldName": "DEtest222",
                    "fieldTitle": "测试222"
                }
            ]'),
    conditions?: string(name='conditions', description='Export task conditions.', example='{
     "fieldName": null, 
      "fieldValue": null 
      }'),
    eventBeginTime?: long(name='eventBeginTime', description='Event start time.', example='1752076800000'),
    eventCodes?: string(name='eventCodes', description='Event code.', example='de_ahespg8137'),
    eventEndTime?: long(name='eventEndTime', description='End time.', example='1753891199000'),
    fileFormat?: string(name='fileFormat', description='File format.', example='CSV'),
    ossKey?: string(name='ossKey', description='OSS-generated key.', example='xxxxx'),
    scope?: string(name='scope', description='Export task scope.', example='ALL'),
    status?: string(name='status', description='Task status.', example='RUNNING'),
    type?: string(name='type', description='Export task type.', example='BASIC'),
    userId?: long(name='userId', description='User UID', example='1519714049632764'),
  }(name='resultObject', description='Returned object'),
}

model CreateAnalysisExportTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAnalysisExportTaskResponseBody(name='body'),
}

/**
 * @summary Create Export Task
 *
 * @param request CreateAnalysisExportTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateAnalysisExportTaskResponse
 */
@context("createAnalysisExportTaskWithContext")
async function createAnalysisExportTaskWithOptions(request: CreateAnalysisExportTaskRequest, runtime: $RuntimeOptions): CreateAnalysisExportTaskResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.columns)) {
    query['columns'] = request.columns;
  }
  if (!$isNull(request.conditions)) {
    query['conditions'] = request.conditions;
  }
  if (!$isNull(request.eventBeginTime)) {
    query['eventBeginTime'] = request.eventBeginTime;
  }
  if (!$isNull(request.eventCodes)) {
    query['eventCodes'] = request.eventCodes;
  }
  if (!$isNull(request.eventEndTime)) {
    query['eventEndTime'] = request.eventEndTime;
  }
  if (!$isNull(request.fieldName)) {
    query['fieldName'] = request.fieldName;
  }
  if (!$isNull(request.fieldValue)) {
    query['fieldValue'] = request.fieldValue;
  }
  if (!$isNull(request.fileFormat)) {
    query['fileFormat'] = request.fileFormat;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.scope)) {
    query['scope'] = request.scope;
  }
  if (!$isNull(request.type)) {
    query['type'] = request.type;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateAnalysisExportTask',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Create Export Task
 *
 * @param request CreateAnalysisExportTaskRequest
 * @return CreateAnalysisExportTaskResponse
 */
async function createAnalysisExportTask(request: CreateAnalysisExportTaskRequest): CreateAnalysisExportTaskResponse {
  var runtime = new $RuntimeOptions{};
  return createAnalysisExportTaskWithOptions(request, runtime);
}

model CreateAppKeyRequest {
  lang?: string(name='Lang', description='Set the language type for requests and responses, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model CreateAppKeyResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  data?: boolean(name='data', description='Data object', example='true'),
}

model CreateAppKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAppKeyResponseBody(name='body'),
}

/**
 * @summary Create AppKey
 *
 * @param request CreateAppKeyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateAppKeyResponse
 */
@context("createAppKeyWithContext")
async function createAppKeyWithOptions(request: CreateAppKeyRequest, runtime: $RuntimeOptions): CreateAppKeyResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateAppKey',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Create AppKey
 *
 * @param request CreateAppKeyRequest
 * @return CreateAppKeyResponse
 */
async function createAppKey(request: CreateAppKeyRequest): CreateAppKeyResponse {
  var runtime = new $RuntimeOptions{};
  return createAppKeyWithOptions(request, runtime);
}

model CreateCustVariableRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  condition?: string(name='condition', description='Condition value.', example='{"relationship":"and","list":[{"deepCount":1,"left":{"hasRightVariable":true,"fieldType":"INT","functionName":"","leftVariableType":"NATIVE","name":"DEtest222","operatorCode":"equals"},"right":{"rightVariableType":"constant","name":"11","functionName":""},"operatorCode":"equals"}]}'),
  createType?: string(name='createType', description='Creation type', example='NORMAL'),
  description?: string(name='description', description='Description information.', example='ip调用次数累计描述'),
  eventCodes?: string(name='eventCodes', description='Event code

This parameter is required.', example='de_ahqhsw7665,de_agbzfi5134'),
  historyValueType?: string(name='historyValueType', description='Value type', example='EARLIEST'),
  object?: string(name='object', description='Accumulative object', example='age'),
  outputs?: string(name='outputs', description='Variable return type', example='STRING'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  subject?: string(name='subject', description='Primary object

This parameter is required.', example='name'),
  timeType?: string(name='timeType', description='Time slice type

This parameter is required.', example='CURRENT'),
  title?: string(name='title', description='Title.

This parameter is required.', example='ip调用次数累计'),
  twCount?: int32(name='twCount', description='Number of time units', example='1'),
  velocityFC?: string(name='velocityFC', description='Variable type

This parameter is required.', example='DISTINCT'),
  velocityTW?: string(name='velocityTW', description='Time slice unit

This parameter is required.', example='DAY_1'),
}

model CreateCustVariableResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model CreateCustVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCustVariableResponseBody(name='body'),
}

/**
 * @summary Create Accumulative Variable
 *
 * @param request CreateCustVariableRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateCustVariableResponse
 */
@context("createCustVariableWithContext")
async function createCustVariableWithOptions(request: CreateCustVariableRequest, runtime: $RuntimeOptions): CreateCustVariableResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.condition)) {
    query['condition'] = request.condition;
  }
  if (!$isNull(request.createType)) {
    query['createType'] = request.createType;
  }
  if (!$isNull(request.description)) {
    query['description'] = request.description;
  }
  if (!$isNull(request.eventCodes)) {
    query['eventCodes'] = request.eventCodes;
  }
  if (!$isNull(request.historyValueType)) {
    query['historyValueType'] = request.historyValueType;
  }
  if (!$isNull(request.object)) {
    query['object'] = request.object;
  }
  if (!$isNull(request.outputs)) {
    query['outputs'] = request.outputs;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.subject)) {
    query['subject'] = request.subject;
  }
  if (!$isNull(request.timeType)) {
    query['timeType'] = request.timeType;
  }
  if (!$isNull(request.title)) {
    query['title'] = request.title;
  }
  if (!$isNull(request.twCount)) {
    query['twCount'] = request.twCount;
  }
  if (!$isNull(request.velocityFC)) {
    query['velocityFC'] = request.velocityFC;
  }
  if (!$isNull(request.velocityTW)) {
    query['velocityTW'] = request.velocityTW;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateCustVariable',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Create Accumulative Variable
 *
 * @param request CreateCustVariableRequest
 * @return CreateCustVariableResponse
 */
async function createCustVariable(request: CreateCustVariableRequest): CreateCustVariableResponse {
  var runtime = new $RuntimeOptions{};
  return createCustVariableWithOptions(request, runtime);
}

model CreateDataSourceRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  description?: string(name='description', description='Data source description.', example='数据源描述'),
  name?: string(name='name', description='Data source name.

This parameter is required.', example='testDispatch'),
  ossKey?: string(name='ossKey', description='OSS file key.

This parameter is required.', example='oss上传key'),
  regId?: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou'),
  type?: string(name='type', description='Data source type

This parameter is required.', example='FILE'),
}

model CreateDataSourceResponseBody = {
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model CreateDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataSourceResponseBody(name='body'),
}

/**
 * @summary Add Data Source
 *
 * @param request CreateDataSourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDataSourceResponse
 */
@context("createDataSourceWithContext")
async function createDataSourceWithOptions(request: CreateDataSourceRequest, runtime: $RuntimeOptions): CreateDataSourceResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.description)) {
    query['description'] = request.description;
  }
  if (!$isNull(request.name)) {
    query['name'] = request.name;
  }
  if (!$isNull(request.ossKey)) {
    query['ossKey'] = request.ossKey;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.type)) {
    query['type'] = request.type;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateDataSource',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Add Data Source
 *
 * @param request CreateDataSourceRequest
 * @return CreateDataSourceResponse
 */
async function createDataSource(request: CreateDataSourceRequest): CreateDataSourceResponse {
  var runtime = new $RuntimeOptions{};
  return createDataSourceWithOptions(request, runtime);
}

model CreateEventRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  createType?: string(name='createType', description='Creation type', example='NORMAL'),
  eventName?: string(name='eventName', description='Event name.', example='登录事件'),
  inputFieldsStr?: string(name='inputFieldsStr', description='Input parameters, JSON string.', example='[{"fieldCode":"accountId","description":"用户的账户ID，唯一标识一个账户的id","fieldRank":1,"title":"账户ID","fieldType":"STRING","fieldSource":"DEFAULT"},{"fieldCode":"hitRules","fieldRank":2,"title":"命中策略","fieldType":"STRING","fieldSource":"DEFAULT"},{"fieldCode":"age","description":"","fieldRank":3,"title":"年龄","fieldType":"INT","fieldSource":"DEFAULT"},{"fieldCode":"ip","description":"IP地址","fieldRank":4,"title":"IP地址","fieldType":"STRING","fieldSource":"DEFAULT"},{"fieldCode":"tags","fieldRank":5,"title":"风险标签","fieldType":"STRING","fieldSource":"DEFAULT"},{"fieldCode":"score","fieldRank":6,"title":"风险分值","fieldType":"DOUBLE","fieldSource":"DEFAULT"},{"fieldCode":"hitList","fieldRank":7}]'),
  memo?: string(name='memo', description='Memo information', example='登录事件描述'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  templateCode?: string(name='templateCode', description='Input field template type', example='register'),
  templateName?: string(name='templateName', description='Published template name.', example='注册事件模版'),
  templateType?: string(name='templateType', description='Template type.', example='TASK'),
}

model CreateEventResponseBody = {
  data?: boolean(name='data', description='Return result.', example='true'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
}

model CreateEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateEventResponseBody(name='body'),
}

/**
 * @summary Create Event
 *
 * @param request CreateEventRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateEventResponse
 */
@context("createEventWithContext")
async function createEventWithOptions(request: CreateEventRequest, runtime: $RuntimeOptions): CreateEventResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.createType)) {
    query['createType'] = request.createType;
  }
  if (!$isNull(request.eventName)) {
    query['eventName'] = request.eventName;
  }
  if (!$isNull(request.inputFieldsStr)) {
    query['inputFieldsStr'] = request.inputFieldsStr;
  }
  if (!$isNull(request.memo)) {
    query['memo'] = request.memo;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.templateCode)) {
    query['templateCode'] = request.templateCode;
  }
  if (!$isNull(request.templateName)) {
    query['templateName'] = request.templateName;
  }
  if (!$isNull(request.templateType)) {
    query['templateType'] = request.templateType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateEvent',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Create Event
 *
 * @param request CreateEventRequest
 * @return CreateEventResponse
 */
async function createEvent(request: CreateEventRequest): CreateEventResponse {
  var runtime = new $RuntimeOptions{};
  return createEventWithOptions(request, runtime);
}

model CreateExpressionVariableRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  description?: string(name='description', description='Description.', example='获取入参的手机号前7位'),
  eventCode?: string(name='eventCode', description='Event code

This parameter is required.', example='de_ahpayh4121'),
  expression?: string(name='expression', description='Calculation expression

This parameter is required.', example='@ex_GX9rrlTq4b67 + 1001'),
  expressionTitle?: string(name='expressionTitle', description='Display value of calculation expression

This parameter is required.', example='@selfvariable_02 + 1001'),
  expressionVariable?: string(name='expressionVariable', description='Calculation expression variable', example='[{"name":"ex_GX9rrlTq4b67","code":"deInvokeSelfVariable(44659)","fieldType":"INT"}]'),
  outlier?: string(name='outlier', description='Outlier

This parameter is required.', example='-1'),
  outputs?: string(name='outputs', description='Variable return type

This parameter is required.', example='STRING'),
  regId?: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou'),
  title?: string(name='title', description='Title.

This parameter is required.', example='获取手机号前7位'),
}

model CreateExpressionVariableResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model CreateExpressionVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateExpressionVariableResponseBody(name='body'),
}

/**
 * @summary Create Custom Variable
 *
 * @param request CreateExpressionVariableRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateExpressionVariableResponse
 */
@context("createExpressionVariableWithContext")
async function createExpressionVariableWithOptions(request: CreateExpressionVariableRequest, runtime: $RuntimeOptions): CreateExpressionVariableResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.description)) {
    query['description'] = request.description;
  }
  if (!$isNull(request.eventCode)) {
    query['eventCode'] = request.eventCode;
  }
  if (!$isNull(request.expression)) {
    query['expression'] = request.expression;
  }
  if (!$isNull(request.expressionTitle)) {
    query['expressionTitle'] = request.expressionTitle;
  }
  if (!$isNull(request.expressionVariable)) {
    query['expressionVariable'] = request.expressionVariable;
  }
  if (!$isNull(request.outlier)) {
    query['outlier'] = request.outlier;
  }
  if (!$isNull(request.outputs)) {
    query['outputs'] = request.outputs;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.title)) {
    query['title'] = request.title;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateExpressionVariable',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Create Custom Variable
 *
 * @param request CreateExpressionVariableRequest
 * @return CreateExpressionVariableResponse
 */
async function createExpressionVariable(request: CreateExpressionVariableRequest): CreateExpressionVariableResponse {
  var runtime = new $RuntimeOptions{};
  return createExpressionVariableWithOptions(request, runtime);
}

model CreateFieldRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  classify?: string(name='classify', description='Field classification.', example='REQUEST_PARAM'),
  description?: string(name='description', description='Description information.', example='字段描述信息'),
  enumData?: string(name='enumData', description='Enum data.', example='enum'),
  name?: string(name='name', description='Field name.', example='age'),
  regId?: string(name='regId', description='Region code.

This parameter is required.', example='cn-hangzhou'),
  source?: string(name='source', description='Business source.', example='DEFINE'),
  title?: string(name='title', description='Title.', example='年龄'),
  type?: string(name='type', description='Field type.', example='STRING'),
}

model CreateFieldResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object.', example='true'),
}

model CreateFieldResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFieldResponseBody(name='body'),
}

/**
 * @summary Add New Field
 *
 * @param request CreateFieldRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateFieldResponse
 */
@context("createFieldWithContext")
async function createFieldWithOptions(request: CreateFieldRequest, runtime: $RuntimeOptions): CreateFieldResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.classify)) {
    query['classify'] = request.classify;
  }
  if (!$isNull(request.description)) {
    query['description'] = request.description;
  }
  if (!$isNull(request.enumData)) {
    query['enumData'] = request.enumData;
  }
  if (!$isNull(request.name)) {
    query['name'] = request.name;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.source)) {
    query['source'] = request.source;
  }
  if (!$isNull(request.title)) {
    query['title'] = request.title;
  }
  if (!$isNull(request.type)) {
    query['type'] = request.type;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateField',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Add New Field
 *
 * @param request CreateFieldRequest
 * @return CreateFieldResponse
 */
async function createField(request: CreateFieldRequest): CreateFieldResponse {
  var runtime = new $RuntimeOptions{};
  return createFieldWithOptions(request, runtime);
}

model CreateModelRequest {
  bucId?: string(name='BucId', description='Submitter ID.

This parameter is required.', example='WB01160353'),
  counts?: string(name='Counts', description='Number of file rows.

This parameter is required.', example='1000'),
  fileMD5?: string(name='FileMD5', description='File MD5 value.

This parameter is required.', example='VC6Sj3u138yfWHLxLl7dtA=='),
  filePath?: string(name='FilePath', description='File path.

This parameter is required.', example='tempCache/ef2387dfb357ffe87925fd51d2b5305b/1665717035328/mockData.csv'),
  modelName?: string(name='ModelName', description='Model name.

This parameter is required.', example='qwen-max'),
  modelScene?: string(name='ModelScene', description='Model scenario.

This parameter is required.', example='saf_ai_account_abuse'),
  parameterNum?: string(name='ParameterNum', description='Number of file columns.

This parameter is required.', example='10'),
  regId?: string(name='RegId', description='Region code', example='cn-hangzhou'),
  userLocalFileName?: string(name='UserLocalFileName', description='Uploaded file name.

This parameter is required.', example='fileTest'),
}

model CreateModelResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='ResultObject', description='Result object.', example='True'),
}

model CreateModelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateModelResponseBody(name='body'),
}

/**
 * @summary Submit Task
 *
 * @param request CreateModelRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateModelResponse
 */
@context("createModelWithContext")
async function createModelWithOptions(request: CreateModelRequest, runtime: $RuntimeOptions): CreateModelResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bucId)) {
    query['BucId'] = request.bucId;
  }
  if (!$isNull(request.counts)) {
    query['Counts'] = request.counts;
  }
  if (!$isNull(request.fileMD5)) {
    query['FileMD5'] = request.fileMD5;
  }
  if (!$isNull(request.filePath)) {
    query['FilePath'] = request.filePath;
  }
  if (!$isNull(request.modelName)) {
    query['ModelName'] = request.modelName;
  }
  if (!$isNull(request.modelScene)) {
    query['ModelScene'] = request.modelScene;
  }
  if (!$isNull(request.parameterNum)) {
    query['ParameterNum'] = request.parameterNum;
  }
  if (!$isNull(request.regId)) {
    query['RegId'] = request.regId;
  }
  if (!$isNull(request.userLocalFileName)) {
    query['UserLocalFileName'] = request.userLocalFileName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateModel',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Submit Task
 *
 * @param request CreateModelRequest
 * @return CreateModelResponse
 */
async function createModel(request: CreateModelRequest): CreateModelResponse {
  var runtime = new $RuntimeOptions{};
  return createModelWithOptions(request, runtime);
}

model CreatePocEvRequest {
  dateFormat?: string(name='DateFormat', description='Date format type', example='yyyyMMdd'),
  fileName?: string(name='FileName', description='File name.
> The file name must end with txt or sql. For example, test.txt, test.sql.', example='test.csv'),
  fileType?: string(name='FileType', description='File type', example='CSV'),
  fileUrl?: string(name='FileUrl', description='File URL.', example='saf/cpoc/953c883cde33b2e21d722eb661d26375/测试文件模板-通用.csv'),
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='RegId', description='Region code', example='cn-hangzhou'),
  serviceCode?: string(name='ServiceCode', description='Service code.', example='anti_fraud_v2'),
  serviceName?: string(name='ServiceName', description='Service name.', example='注册风险'),
  tab?: string(name='Tab', description='Scenario.', example='INTERNET'),
  taskName?: string(name='TaskName', description='Task name.', example='er-log-s3'),
  type?: string(name='Type', description='Access type.', example='SAF_CONSOLE'),
}

model CreatePocEvResponseBody = {
  code?: string(name='Code', description='Response code.', example='200'),
  httpStatusCode?: string(name='HttpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='Message', description='Return message.', example='successful'),
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: string(name='ResultObject', description='Return result', example='True'),
}

model CreatePocEvResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePocEvResponseBody(name='body'),
}

/**
 * @summary Create POC
 *
 * @param request CreatePocEvRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreatePocEvResponse
 */
@context("createPocEvWithContext")
async function createPocEvWithOptions(request: CreatePocEvRequest, runtime: $RuntimeOptions): CreatePocEvResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.dateFormat)) {
    query['DateFormat'] = request.dateFormat;
  }
  if (!$isNull(request.fileName)) {
    query['FileName'] = request.fileName;
  }
  if (!$isNull(request.fileType)) {
    query['FileType'] = request.fileType;
  }
  if (!$isNull(request.fileUrl)) {
    query['FileUrl'] = request.fileUrl;
  }
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['RegId'] = request.regId;
  }
  if (!$isNull(request.serviceCode)) {
    query['ServiceCode'] = request.serviceCode;
  }
  if (!$isNull(request.serviceName)) {
    query['ServiceName'] = request.serviceName;
  }
  if (!$isNull(request.tab)) {
    query['Tab'] = request.tab;
  }
  if (!$isNull(request.taskName)) {
    query['TaskName'] = request.taskName;
  }
  if (!$isNull(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreatePocEv',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Create POC
 *
 * @param request CreatePocEvRequest
 * @return CreatePocEvResponse
 */
async function createPocEv(request: CreatePocEvRequest): CreatePocEvResponse {
  var runtime = new $RuntimeOptions{};
  return createPocEvWithOptions(request, runtime);
}

model CreateQueryVariableRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  dataSourceCode?: string(name='dataSourceCode', description='Data source ID.

This parameter is required.', example='3527'),
  description?: string(name='description', description='Description.', example='查询变量描述信息'),
  eventCode?: string(name='eventCode', description='Event code

This parameter is required.', example='de_arqbuy7206'),
  expression?: string(name='expression', description='Calculation expression

This parameter is required.', example='SELECT  AVG( $source )
FROM testCase
WHERE  $age > 0'),
  expressionTitle?: string(name='expressionTitle', description='Display value of calculation expression

This parameter is required.', example='SELECT  AVG( $source )
FROM testCase
WHERE  $age > 0'),
  expressionVariable?: string(name='expressionVariable', description='Calculation expression variable

This parameter is required.', example='age'),
  outlier?: string(name='outlier', description='Outlier

This parameter is required.', example='-1'),
  outputs?: string(name='outputs', description='Variable return type

This parameter is required.', example='STRING'),
  regId?: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou'),
  title?: string(name='title', description='Title.

This parameter is required.', example='获取手机号前7位'),
}

model CreateQueryVariableResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model CreateQueryVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateQueryVariableResponseBody(name='body'),
}

/**
 * @summary Add New Custom Query Variable
 *
 * @param request CreateQueryVariableRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateQueryVariableResponse
 */
@context("createQueryVariableWithContext")
async function createQueryVariableWithOptions(request: CreateQueryVariableRequest, runtime: $RuntimeOptions): CreateQueryVariableResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.dataSourceCode)) {
    query['dataSourceCode'] = request.dataSourceCode;
  }
  if (!$isNull(request.description)) {
    query['description'] = request.description;
  }
  if (!$isNull(request.eventCode)) {
    query['eventCode'] = request.eventCode;
  }
  if (!$isNull(request.expression)) {
    query['expression'] = request.expression;
  }
  if (!$isNull(request.expressionTitle)) {
    query['expressionTitle'] = request.expressionTitle;
  }
  if (!$isNull(request.expressionVariable)) {
    query['expressionVariable'] = request.expressionVariable;
  }
  if (!$isNull(request.outlier)) {
    query['outlier'] = request.outlier;
  }
  if (!$isNull(request.outputs)) {
    query['outputs'] = request.outputs;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.title)) {
    query['title'] = request.title;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateQueryVariable',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Add New Custom Query Variable
 *
 * @param request CreateQueryVariableRequest
 * @return CreateQueryVariableResponse
 */
async function createQueryVariable(request: CreateQueryVariableRequest): CreateQueryVariableResponse {
  var runtime = new $RuntimeOptions{};
  return createQueryVariableWithOptions(request, runtime);
}

model CreateRecommendEventRuleRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  eventCode?: string(name='eventCode', description='Event code.', example='de_ahqido8038'),
  eventName?: string(name='eventName', description='Event name.', example='用户昵称文本审核检测结果'),
  recommendRuleIdsStr?: string(name='recommendRuleIdsStr', description='Strategy ID.', example='[\\\\"100234\\\\",\\\\"100235\\\\"]'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou'),
  taskId?: long(name='taskId', description='Task ID.', example='6770764'),
}

model CreateRecommendEventRuleResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object.', example='true'),
}

model CreateRecommendEventRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRecommendEventRuleResponseBody(name='body'),
}

/**
 * @summary Create Recommended Event Strategy
 *
 * @param request CreateRecommendEventRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateRecommendEventRuleResponse
 */
@context("createRecommendEventRuleWithContext")
async function createRecommendEventRuleWithOptions(request: CreateRecommendEventRuleRequest, runtime: $RuntimeOptions): CreateRecommendEventRuleResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.eventCode)) {
    query['eventCode'] = request.eventCode;
  }
  if (!$isNull(request.eventName)) {
    query['eventName'] = request.eventName;
  }
  if (!$isNull(request.recommendRuleIdsStr)) {
    query['recommendRuleIdsStr'] = request.recommendRuleIdsStr;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.taskId)) {
    query['taskId'] = request.taskId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateRecommendEventRule',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Create Recommended Event Strategy
 *
 * @param request CreateRecommendEventRuleRequest
 * @return CreateRecommendEventRuleResponse
 */
async function createRecommendEventRule(request: CreateRecommendEventRuleRequest): CreateRecommendEventRuleResponse {
  var runtime = new $RuntimeOptions{};
  return createRecommendEventRuleWithOptions(request, runtime);
}

model CreateRecommendTaskRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  name?: string(name='name', description='Name

This parameter is required.', example='注册样本'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  sampleId?: long(name='sampleId', description='Task ID.

This parameter is required.', example='5467'),
  variablesStr?: string(name='variablesStr', description='Variables to be calculated, variables

This parameter is required.', example='[\\\\"1112\\\\",\\\\"1113\\\\"]'),
  velocitiesStr?: string(name='velocitiesStr', description='Indicator effect

This parameter is required.', example='[\\\\"dxkkLw8fe18\\\\",\\\\"dxUxSCM26d7\\\\"]'),
}

model CreateRecommendTaskResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model CreateRecommendTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRecommendTaskResponseBody(name='body'),
}

/**
 * @summary Create Recommendation Task
 *
 * @param request CreateRecommendTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateRecommendTaskResponse
 */
@context("createRecommendTaskWithContext")
async function createRecommendTaskWithOptions(request: CreateRecommendTaskRequest, runtime: $RuntimeOptions): CreateRecommendTaskResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.name)) {
    query['name'] = request.name;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.sampleId)) {
    query['sampleId'] = request.sampleId;
  }
  if (!$isNull(request.variablesStr)) {
    query['variablesStr'] = request.variablesStr;
  }
  if (!$isNull(request.velocitiesStr)) {
    query['velocitiesStr'] = request.velocitiesStr;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateRecommendTask',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Create Recommendation Task
 *
 * @param request CreateRecommendTaskRequest
 * @return CreateRecommendTaskResponse
 */
async function createRecommendTask(request: CreateRecommendTaskRequest): CreateRecommendTaskResponse {
  var runtime = new $RuntimeOptions{};
  return createRecommendTaskWithOptions(request, runtime);
}

model CreateRuleRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  consoleRuleId?: long(name='consoleRuleId', description='Rule ID.', example='5178'),
  createType?: string(name='createType', description='Creation type', example='NORMAL'),
  eventCode?: string(name='eventCode', description='Event code', example='de_acytyt7036'),
  eventName?: string(name='eventName', description='Event name.', example='登录事件'),
  logicExpression?: string(name='logicExpression', description='Policy expression execution logic', example='1&2'),
  memo?: string(name='memo', description='Memo', example='描述信息'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  ruleActions?: string(name='ruleActions', description='Policy execution output action', example='[{"inputs":["123"],"name":"__addDeTags__","actionType":"TAG","outputType":"const"},{"inputs":["123"],"name":"__addDeScore__","actionType":"SCORE","outputType":"const","inputTitle":"123"},{"actionType":"MIDDLE_VARIABLE","fieldValue":"123","inputs":["mid1"]},{"actionType":"VARIABLE","inputs":["gg"],"name":"mid1"}]'),
  ruleBody?: string(name='ruleBody', description='DSL policy execution logic', example='{"elseIfStatement":[],"elseStatement":{},"ifStatement":{"condition":{"currentId":0,"deepCount":1,"list":[{"currentId":0,"deepCount":1,"left":{"code":"deFunctionProcess(ip,\\\\"isIp\\\\")","description":"判断是否符合IPv4标准","displayType":"SYSTEM_BIND","fieldType":"BOOLEAN","functionCode":"","functionName":"","hasRightVariable":false,"name":"__isIpAddressV4__","outputThreshold":{},"sourceType":"SAF","title":"IP是否符合IPV4格式","type":"SYSTEM_BIND"},"operatorCode":"boolIsFalse","operatorName":"为false","parentId":0,"sequence":1}],"parentId":0,"relationship":"and"},"then":[{"inputs":["123"],"name":"__addDeTags__","actionType":"TAG","outputType":"const"}]}}'),
  ruleExpressions?: string(name='ruleExpressions', description='Policy expression', example='[{"expressionName":"cc","itemId":1,"left":{"name":"__ipLocationCityCode__"},"operatorCode":"equals","operatorName":"等于","right":{"fieldValue":"a"}}]'),
  ruleName?: string(name='ruleName', description='Policy name', example='注册手机号是11位数字'),
  ruleStatus?: string(name='ruleStatus', description='Policy status', example='DRAFT'),
  ruleType?: string(name='ruleType', description='Policy type', example='DRAFT'),
}

model CreateRuleResponseBody = {
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: boolean(name='resultObject', description='Return result.', example='true'),
}

model CreateRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRuleResponseBody(name='body'),
}

/**
 * @summary Create Policy & Version
 *
 * @param request CreateRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateRuleResponse
 */
@context("createRuleWithContext")
async function createRuleWithOptions(request: CreateRuleRequest, runtime: $RuntimeOptions): CreateRuleResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.consoleRuleId)) {
    query['consoleRuleId'] = request.consoleRuleId;
  }
  if (!$isNull(request.createType)) {
    query['createType'] = request.createType;
  }
  if (!$isNull(request.eventCode)) {
    query['eventCode'] = request.eventCode;
  }
  if (!$isNull(request.eventName)) {
    query['eventName'] = request.eventName;
  }
  if (!$isNull(request.logicExpression)) {
    query['logicExpression'] = request.logicExpression;
  }
  if (!$isNull(request.memo)) {
    query['memo'] = request.memo;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.ruleActions)) {
    query['ruleActions'] = request.ruleActions;
  }
  if (!$isNull(request.ruleBody)) {
    query['ruleBody'] = request.ruleBody;
  }
  if (!$isNull(request.ruleExpressions)) {
    query['ruleExpressions'] = request.ruleExpressions;
  }
  if (!$isNull(request.ruleName)) {
    query['ruleName'] = request.ruleName;
  }
  if (!$isNull(request.ruleStatus)) {
    query['ruleStatus'] = request.ruleStatus;
  }
  if (!$isNull(request.ruleType)) {
    query['ruleType'] = request.ruleType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateRule',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Create Policy & Version
 *
 * @param request CreateRuleRequest
 * @return CreateRuleResponse
 */
async function createRule(request: CreateRuleRequest): CreateRuleResponse {
  var runtime = new $RuntimeOptions{};
  return createRuleWithOptions(request, runtime);
}

model CreateSampleRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  clientFileName?: string(name='clientFileName', description='OSS client uploaded file name', example='样本文件.csv'),
  clientPath?: string(name='clientPath', description='OSS client address', example='sample/path'),
  fileType?: string(name='fileType', description='File type', example='CSV'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  sampleTag?: string(name='sampleTag', description='Sample tag', example='rm0102'),
  sampleType?: string(name='sampleType', description='Sample type', example='PHONE'),
  sampleValues?: string(name='sampleValues', description='Sample values', example='1777000000,1777000001'),
  uploadType?: string(name='uploadType', description='Upload type', example='ANNEX'),
}

model CreateSampleResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    communityCount?: int32(name='communityCount', description='Number of colored groups', example='10'),
    failCount?: int32(name='failCount', description='Number of failed samples', example='1'),
    recallProbability?: string(name='recallProbability', description='Recall probability', example='2.5%'),
    riskDensity?: string(name='riskDensity', description='Risk density', example='1.5%'),
    sampleCount?: int32(name='sampleCount', description='Number of samples', example='100'),
    successCount?: int32(name='successCount', description='Number of successful samples', example='99'),
  }(name='resultObject', description='Return object'),
}

model CreateSampleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSampleResponseBody(name='body'),
}

/**
 * @summary Add Sample
 *
 * @param request CreateSampleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateSampleResponse
 */
@context("createSampleWithContext")
async function createSampleWithOptions(request: CreateSampleRequest, runtime: $RuntimeOptions): CreateSampleResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.clientFileName)) {
    query['clientFileName'] = request.clientFileName;
  }
  if (!$isNull(request.clientPath)) {
    query['clientPath'] = request.clientPath;
  }
  if (!$isNull(request.fileType)) {
    query['fileType'] = request.fileType;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.sampleTag)) {
    query['sampleTag'] = request.sampleTag;
  }
  if (!$isNull(request.sampleType)) {
    query['sampleType'] = request.sampleType;
  }
  if (!$isNull(request.sampleValues)) {
    query['sampleValues'] = request.sampleValues;
  }
  if (!$isNull(request.uploadType)) {
    query['uploadType'] = request.uploadType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateSample',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Add Sample
 *
 * @param request CreateSampleRequest
 * @return CreateSampleResponse
 */
async function createSample(request: CreateSampleRequest): CreateSampleResponse {
  var runtime = new $RuntimeOptions{};
  return createSampleWithOptions(request, runtime);
}

model CreateSampleApiRequest {
  dataType?: string(name='DataType', description='Same as input parameter', example='ip/accountID'),
  dataValue?: string(name='DataValue', description='Specific data value', example='同参数'),
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='RegId', description='regionId', example='cn-shanghai'),
  sampleBatchType?: string(name='SampleBatchType', description='Sample batch type', example='白名单/黑名单/混合'),
  serviceList?: string(name='ServiceList', description='Service list.', example='同参数'),
}

model CreateSampleApiResponseBody = {
  code?: int32(name='Code', description='Status code.', example='200'),
  message?: string(name='Message', description='Error message.', example='ConsolePocQueryServiceImpl.queryServiceCodeName.arg0.tab tab Type error'),
  requestId?: string(name='RequestId', description='ID of the request', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
}

model CreateSampleApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSampleApiResponseBody(name='body'),
}

/**
 * @summary User-level Single API to Create Sample Batches
 *
 * @param request CreateSampleApiRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateSampleApiResponse
 */
@context("createSampleApiWithContext")
async function createSampleApiWithOptions(request: CreateSampleApiRequest, runtime: $RuntimeOptions): CreateSampleApiResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.dataType)) {
    query['DataType'] = request.dataType;
  }
  if (!$isNull(request.dataValue)) {
    query['DataValue'] = request.dataValue;
  }
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['RegId'] = request.regId;
  }
  if (!$isNull(request.sampleBatchType)) {
    query['SampleBatchType'] = request.sampleBatchType;
  }
  if (!$isNull(request.serviceList)) {
    query['ServiceList'] = request.serviceList;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateSampleApi',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary User-level Single API to Create Sample Batches
 *
 * @param request CreateSampleApiRequest
 * @return CreateSampleApiResponse
 */
async function createSampleApi(request: CreateSampleApiRequest): CreateSampleApiResponse {
  var runtime = new $RuntimeOptions{};
  return createSampleApiWithOptions(request, runtime);
}

model CreateSampleBatchRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  batchName?: string(name='batchName', description='Sample batch name', example='白样本'),
  dataType?: string(name='dataType', description='Data type', example='mobile'),
  dataValue?: string(name='dataValue', description='Content of the list entered in the text box', example='1770000000,1770000001'),
  description?: string(name='description', description='Description information.', example='描述'),
  ossFileName?: string(name='ossFileName', description='Uploaded OSS address.', example='sample/94b4193d321c44b44ee92b19984000a0/样本测试01/0d8dbc6809834d51b1d88a42295c803e/1753865835166.csv'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  sampleBatchType?: string(name='sampleBatchType', description='Specific type of sample list', example='白名单'),
  serviceList?: string(name='serviceList', description='Service list', example='account_takeover'),
}

model CreateSampleBatchResponseBody = {
  requestId?: string(name='RequestId', description='ID of the request', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
}

model CreateSampleBatchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSampleBatchResponseBody(name='body'),
}

/**
 * @summary Create Sample Batch
 *
 * @param request CreateSampleBatchRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateSampleBatchResponse
 */
@context("createSampleBatchWithContext")
async function createSampleBatchWithOptions(request: CreateSampleBatchRequest, runtime: $RuntimeOptions): CreateSampleBatchResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.batchName)) {
    query['batchName'] = request.batchName;
  }
  if (!$isNull(request.dataType)) {
    query['dataType'] = request.dataType;
  }
  if (!$isNull(request.dataValue)) {
    query['dataValue'] = request.dataValue;
  }
  if (!$isNull(request.description)) {
    query['description'] = request.description;
  }
  if (!$isNull(request.ossFileName)) {
    query['ossFileName'] = request.ossFileName;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.sampleBatchType)) {
    query['sampleBatchType'] = request.sampleBatchType;
  }
  if (!$isNull(request.serviceList)) {
    query['serviceList'] = request.serviceList;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateSampleBatch',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Create Sample Batch
 *
 * @param request CreateSampleBatchRequest
 * @return CreateSampleBatchResponse
 */
async function createSampleBatch(request: CreateSampleBatchRequest): CreateSampleBatchResponse {
  var runtime = new $RuntimeOptions{};
  return createSampleBatchWithOptions(request, runtime);
}

model CreateSampleDataRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  description?: string(name='description', description='Description.', example='描述'),
  encryptType?: string(name='encryptType', description='Encryption type', example='LABEL'),
  name?: string(name='name', description='Name', example='注册样本'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  riskValue?: string(name='riskValue', description='Specified risk value', example='black'),
  scene?: string(name='scene', description='Scene', example='PHONE'),
  storePath?: string(name='storePath', description='Storage path', example='saf/de/sample/3dc2spspHKq4G3YI9d08'),
  storeType?: string(name='storeType', description='Storage type', example='OSS'),
}

model CreateSampleDataResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model CreateSampleDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSampleDataResponseBody(name='body'),
}

/**
 * @summary Create Sample Data
 *
 * @param request CreateSampleDataRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateSampleDataResponse
 */
@context("createSampleDataWithContext")
async function createSampleDataWithOptions(request: CreateSampleDataRequest, runtime: $RuntimeOptions): CreateSampleDataResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.description)) {
    query['description'] = request.description;
  }
  if (!$isNull(request.encryptType)) {
    query['encryptType'] = request.encryptType;
  }
  if (!$isNull(request.name)) {
    query['name'] = request.name;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.riskValue)) {
    query['riskValue'] = request.riskValue;
  }
  if (!$isNull(request.scene)) {
    query['scene'] = request.scene;
  }
  if (!$isNull(request.storePath)) {
    query['storePath'] = request.storePath;
  }
  if (!$isNull(request.storeType)) {
    query['storeType'] = request.storeType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateSampleData',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Create Sample Data
 *
 * @param request CreateSampleDataRequest
 * @return CreateSampleDataResponse
 */
async function createSampleData(request: CreateSampleDataRequest): CreateSampleDataResponse {
  var runtime = new $RuntimeOptions{};
  return createSampleDataWithOptions(request, runtime);
}

model CreateSimulationTaskRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  dataSourceConfig?: string(name='dataSourceConfig', description='Data source configuration', example='{}'),
  dataSourceType?: string(name='dataSourceType', description='Data source type', example='SLS'),
  endTime?: long(name='endTime', description='End time, accurate to milliseconds (ms).

This parameter is required.', example='1735541040000'),
  eventCode?: string(name='eventCode', description='Event code

This parameter is required.', example='de_anbwns2231'),
  filtersStr?: string(name='filtersStr', description='Filters', example='{"left":"score","operate":"bw","right":"222,333"}'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  rulesStr?: string(name='rulesStr', description='Rules list

This parameter is required.', example='[\\\\"100234\\\\"]'),
  runTask?: boolean(name='runTask', description='Whether to run the task directly

This parameter is required.', example='false'),
  startTime?: long(name='startTime', description='Start time, accurate to milliseconds (ms).

This parameter is required.', example='1730448000000'),
  taskName?: string(name='taskName', description='Task name

This parameter is required.', example='仿真任务'),
}

model CreateSimulationTaskResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model CreateSimulationTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSimulationTaskResponseBody(name='body'),
}

/**
 * @summary Create Task
 *
 * @param request CreateSimulationTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateSimulationTaskResponse
 */
@context("createSimulationTaskWithContext")
async function createSimulationTaskWithOptions(request: CreateSimulationTaskRequest, runtime: $RuntimeOptions): CreateSimulationTaskResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.dataSourceConfig)) {
    query['dataSourceConfig'] = request.dataSourceConfig;
  }
  if (!$isNull(request.dataSourceType)) {
    query['dataSourceType'] = request.dataSourceType;
  }
  if (!$isNull(request.endTime)) {
    query['endTime'] = request.endTime;
  }
  if (!$isNull(request.eventCode)) {
    query['eventCode'] = request.eventCode;
  }
  if (!$isNull(request.filtersStr)) {
    query['filtersStr'] = request.filtersStr;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.rulesStr)) {
    query['rulesStr'] = request.rulesStr;
  }
  if (!$isNull(request.runTask)) {
    query['runTask'] = request.runTask;
  }
  if (!$isNull(request.startTime)) {
    query['startTime'] = request.startTime;
  }
  if (!$isNull(request.taskName)) {
    query['taskName'] = request.taskName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateSimulationTask',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Create Task
 *
 * @param request CreateSimulationTaskRequest
 * @return CreateSimulationTaskResponse
 */
async function createSimulationTask(request: CreateSimulationTaskRequest): CreateSimulationTaskResponse {
  var runtime = new $RuntimeOptions{};
  return createSimulationTaskWithOptions(request, runtime);
}

model DeepCopyRuleRequest {
  createType?: string(name='CreateType', description='Creation type', example='NORMAL'),
  custInsertInfo?: string(name='CustInsertInfo', description='Newly added cumulative variable', example='[{"id":"1288","title":"新标题"}]'),
  custWriteInfo?: string(name='CustWriteInfo', description='Read cumulative variable', example='[1234，2345]'),
  expressionVariableInfo?: string(name='ExpressionVariableInfo', description='Custom variables to be added', example='[{"id":"ex_2wxZPcxg3a03","title":"新标题"}]'),
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  queryExpressionVariableInfo?: string(name='QueryExpressionVariableInfo', description='Custom query variables to be added', example='[{"id":"ex_2wxZPcxg3a03","title":"新标题"}]'),
  regId?: string(name='RegId', description='Region code', example='cn-hangzhou'),
  sourceRuleId?: string(name='SourceRuleId', description='Source policy ID', example='102125'),
  sourceRuleIds?: string(name='SourceRuleIds', description='Target policy ID', example='102125,102129'),
  targetEventCode?: string(name='TargetEventCode', description='Target event', example='de_ajtshf1581'),
  targetEventName?: string(name='TargetEventName', description='Target event name', example='目标事件名称'),
}

model DeepCopyRuleResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    batchCopyFlag?: boolean(name='BatchCopyFlag', description='Whether to redirect to details', example='true'),
    consoleRuleId?: long(name='ConsoleRuleId', description='Primary key of the policy', example='2346'),
    ruleId?: string(name='RuleId', description='Policy ID', example='104556'),
    ruleVersionId?: long(name='RuleVersionId', description='Primary key of the policy version', example='1135'),
  }(name='ResultObject', description='Returned result information'),
}

model DeepCopyRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeepCopyRuleResponseBody(name='body'),
}

/**
 * @summary Policy Replication
 *
 * @param request DeepCopyRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeepCopyRuleResponse
 */
@context("deepCopyRuleWithContext")
async function deepCopyRuleWithOptions(request: DeepCopyRuleRequest, runtime: $RuntimeOptions): DeepCopyRuleResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.createType)) {
    query['CreateType'] = request.createType;
  }
  if (!$isNull(request.custInsertInfo)) {
    query['CustInsertInfo'] = request.custInsertInfo;
  }
  if (!$isNull(request.custWriteInfo)) {
    query['CustWriteInfo'] = request.custWriteInfo;
  }
  if (!$isNull(request.expressionVariableInfo)) {
    query['ExpressionVariableInfo'] = request.expressionVariableInfo;
  }
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.queryExpressionVariableInfo)) {
    query['QueryExpressionVariableInfo'] = request.queryExpressionVariableInfo;
  }
  if (!$isNull(request.regId)) {
    query['RegId'] = request.regId;
  }
  if (!$isNull(request.sourceRuleId)) {
    query['SourceRuleId'] = request.sourceRuleId;
  }
  if (!$isNull(request.sourceRuleIds)) {
    query['SourceRuleIds'] = request.sourceRuleIds;
  }
  if (!$isNull(request.targetEventCode)) {
    query['TargetEventCode'] = request.targetEventCode;
  }
  if (!$isNull(request.targetEventName)) {
    query['TargetEventName'] = request.targetEventName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeepCopyRule',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Policy Replication
 *
 * @param request DeepCopyRuleRequest
 * @return DeepCopyRuleResponse
 */
async function deepCopyRule(request: DeepCopyRuleRequest): DeepCopyRuleResponse {
  var runtime = new $RuntimeOptions{};
  return deepCopyRuleWithOptions(request, runtime);
}

model DeleteAnalysisConditionFavoriteRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  id?: long(name='id', description='Primary key ID

This parameter is required.', example='30'),
  regId?: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou'),
}

model DeleteAnalysisConditionFavoriteResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Returned object', example='true'),
}

model DeleteAnalysisConditionFavoriteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAnalysisConditionFavoriteResponseBody(name='body'),
}

/**
 * @summary Delete Query Condition
 *
 * @param request DeleteAnalysisConditionFavoriteRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteAnalysisConditionFavoriteResponse
 */
@context("deleteAnalysisConditionFavoriteWithContext")
async function deleteAnalysisConditionFavoriteWithOptions(request: DeleteAnalysisConditionFavoriteRequest, runtime: $RuntimeOptions): DeleteAnalysisConditionFavoriteResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.id)) {
    query['id'] = request.id;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteAnalysisConditionFavorite',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Delete Query Condition
 *
 * @param request DeleteAnalysisConditionFavoriteRequest
 * @return DeleteAnalysisConditionFavoriteResponse
 */
async function deleteAnalysisConditionFavorite(request: DeleteAnalysisConditionFavoriteRequest): DeleteAnalysisConditionFavoriteResponse {
  var runtime = new $RuntimeOptions{};
  return deleteAnalysisConditionFavoriteWithOptions(request, runtime);
}

model DeleteByPassShuntEventRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  eventId?: long(name='eventId', description='Event ID.', example='25'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DeleteByPassShuntEventResponseBody = {
  code?: string(name='code', description='Status code', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error message.', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
  success?: boolean(name='success', description='Whether it was successful.', example='true'),
}

model DeleteByPassShuntEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteByPassShuntEventResponseBody(name='body'),
}

/**
 * @summary Delete Bypass Event
 *
 * @param request DeleteByPassShuntEventRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteByPassShuntEventResponse
 */
@context("deleteByPassShuntEventWithContext")
async function deleteByPassShuntEventWithOptions(request: DeleteByPassShuntEventRequest, runtime: $RuntimeOptions): DeleteByPassShuntEventResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.eventId)) {
    query['eventId'] = request.eventId;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteByPassShuntEvent',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Delete Bypass Event
 *
 * @param request DeleteByPassShuntEventRequest
 * @return DeleteByPassShuntEventResponse
 */
async function deleteByPassShuntEvent(request: DeleteByPassShuntEventRequest): DeleteByPassShuntEventResponse {
  var runtime = new $RuntimeOptions{};
  return deleteByPassShuntEventWithOptions(request, runtime);
}

model DeleteCustVariableRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  createType?: string(name='createType', description='Creation type', example='NORMAL'),
  dataVersion?: long(name='dataVersion', description='Data version.', example='1'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  variableId?: string(name='variableId', description='Variable ID', example='235'),
}

model DeleteCustVariableResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DeleteCustVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCustVariableResponseBody(name='body'),
}

/**
 * @summary Delete Accumulated Variable
 *
 * @param request DeleteCustVariableRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteCustVariableResponse
 */
@context("deleteCustVariableWithContext")
async function deleteCustVariableWithOptions(request: DeleteCustVariableRequest, runtime: $RuntimeOptions): DeleteCustVariableResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.createType)) {
    query['createType'] = request.createType;
  }
  if (!$isNull(request.dataVersion)) {
    query['dataVersion'] = request.dataVersion;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.variableId)) {
    query['variableId'] = request.variableId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteCustVariable',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Delete Accumulated Variable
 *
 * @param request DeleteCustVariableRequest
 * @return DeleteCustVariableResponse
 */
async function deleteCustVariable(request: DeleteCustVariableRequest): DeleteCustVariableResponse {
  var runtime = new $RuntimeOptions{};
  return deleteCustVariableWithOptions(request, runtime);
}

model DeleteDataSourceRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  id?: long(name='id', description='Primary key ID

This parameter is required.', example='30'),
  regId?: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou'),
}

model DeleteDataSourceResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DeleteDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDataSourceResponseBody(name='body'),
}

/**
 * @summary Delete Data Source
 *
 * @param request DeleteDataSourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDataSourceResponse
 */
@context("deleteDataSourceWithContext")
async function deleteDataSourceWithOptions(request: DeleteDataSourceRequest, runtime: $RuntimeOptions): DeleteDataSourceResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.id)) {
    query['id'] = request.id;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteDataSource',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Delete Data Source
 *
 * @param request DeleteDataSourceRequest
 * @return DeleteDataSourceResponse
 */
async function deleteDataSource(request: DeleteDataSourceRequest): DeleteDataSourceResponse {
  var runtime = new $RuntimeOptions{};
  return deleteDataSourceWithOptions(request, runtime);
}

model DeleteEventFieldRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  eventCode?: string(name='eventCode', description='Event code', example='de_awukck7117'),
  fieldName?: string(name='fieldName', description='Field name', example='age'),
  regId?: string(name='regId', description='Region ID', example='cn-hangzhou'),
}

model DeleteEventFieldResponseBody = {
  requestId?: string(name='RequestId', description='ID of the request', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resuleObject?: boolean(name='resuleObject', description='Result object', example='true'),
}

model DeleteEventFieldResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEventFieldResponseBody(name='body'),
}

/**
 * @summary Delete Event Field
 *
 * @param request DeleteEventFieldRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteEventFieldResponse
 */
@context("deleteEventFieldWithContext")
async function deleteEventFieldWithOptions(request: DeleteEventFieldRequest, runtime: $RuntimeOptions): DeleteEventFieldResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.eventCode)) {
    query['eventCode'] = request.eventCode;
  }
  if (!$isNull(request.fieldName)) {
    query['fieldName'] = request.fieldName;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteEventField',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Delete Event Field
 *
 * @param request DeleteEventFieldRequest
 * @return DeleteEventFieldResponse
 */
async function deleteEventField(request: DeleteEventFieldRequest): DeleteEventFieldResponse {
  var runtime = new $RuntimeOptions{};
  return deleteEventFieldWithOptions(request, runtime);
}

model DeleteExpressionVariableRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  dataVersion?: long(name='dataVersion', description='Data version.

This parameter is required.', example='1'),
  id?: long(name='id', description='Variable ID

This parameter is required.', example='2556'),
  regId?: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou'),
}

model DeleteExpressionVariableResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DeleteExpressionVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteExpressionVariableResponseBody(name='body'),
}

/**
 * @summary Delete Custom Variable
 *
 * @param request DeleteExpressionVariableRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteExpressionVariableResponse
 */
@context("deleteExpressionVariableWithContext")
async function deleteExpressionVariableWithOptions(request: DeleteExpressionVariableRequest, runtime: $RuntimeOptions): DeleteExpressionVariableResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.dataVersion)) {
    query['dataVersion'] = request.dataVersion;
  }
  if (!$isNull(request.id)) {
    query['id'] = request.id;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteExpressionVariable',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Delete Custom Variable
 *
 * @param request DeleteExpressionVariableRequest
 * @return DeleteExpressionVariableResponse
 */
async function deleteExpressionVariable(request: DeleteExpressionVariableRequest): DeleteExpressionVariableResponse {
  var runtime = new $RuntimeOptions{};
  return deleteExpressionVariableWithOptions(request, runtime);
}

model DeleteFieldRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  id?: long(name='id', description='Primary key ID of the field', example='2556'),
  name?: string(name='name', description='Name of the field.', example='age'),
  regId?: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou'),
}

model DeleteFieldResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Returned object', example='true'),
}

model DeleteFieldResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFieldResponseBody(name='body'),
}

/**
 * @summary 删除字段
 *
 * @param request DeleteFieldRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteFieldResponse
 */
@context("deleteFieldWithContext")
async function deleteFieldWithOptions(request: DeleteFieldRequest, runtime: $RuntimeOptions): DeleteFieldResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.id)) {
    query['id'] = request.id;
  }
  if (!$isNull(request.name)) {
    query['name'] = request.name;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteField',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除字段
 *
 * @param request DeleteFieldRequest
 * @return DeleteFieldResponse
 */
async function deleteField(request: DeleteFieldRequest): DeleteFieldResponse {
  var runtime = new $RuntimeOptions{};
  return deleteFieldWithOptions(request, runtime);
}

model DeleteNameListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  ids?: string(name='ids', description='Name list ID, multiple IDs should be separated by commas', example='23,24,25'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DeleteNameListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DeleteNameListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNameListResponseBody(name='body'),
}

/**
 * @summary Delete Name List
 *
 * @param request DeleteNameListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteNameListResponse
 */
@context("deleteNameListWithContext")
async function deleteNameListWithOptions(request: DeleteNameListRequest, runtime: $RuntimeOptions): DeleteNameListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.ids)) {
    query['ids'] = request.ids;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteNameList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Delete Name List
 *
 * @param request DeleteNameListRequest
 * @return DeleteNameListResponse
 */
async function deleteNameList(request: DeleteNameListRequest): DeleteNameListResponse {
  var runtime = new $RuntimeOptions{};
  return deleteNameListWithOptions(request, runtime);
}

model DeleteNameListDataRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  variableId?: string(name='variableId', description='Variable ID', example='239'),
}

model DeleteNameListDataResponseBody = {
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DeleteNameListDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNameListDataResponseBody(name='body'),
}

/**
 * @summary Delete (pseudo) name list variable data
 *
 * @param request DeleteNameListDataRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteNameListDataResponse
 */
@context("deleteNameListDataWithContext")
async function deleteNameListDataWithOptions(request: DeleteNameListDataRequest, runtime: $RuntimeOptions): DeleteNameListDataResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.variableId)) {
    query['variableId'] = request.variableId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteNameListData',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Delete (pseudo) name list variable data
 *
 * @param request DeleteNameListDataRequest
 * @return DeleteNameListDataResponse
 */
async function deleteNameListData(request: DeleteNameListDataRequest): DeleteNameListDataResponse {
  var runtime = new $RuntimeOptions{};
  return deleteNameListDataWithOptions(request, runtime);
}

model DeleteQueryVariableRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  id?: long(name='id', description='Variable ID.

This parameter is required.', example='3144'),
  regId?: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou'),
}

model DeleteQueryVariableResponseBody = {
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DeleteQueryVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteQueryVariableResponseBody(name='body'),
}

/**
 * @summary Delete Query Variable
 *
 * @param request DeleteQueryVariableRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteQueryVariableResponse
 */
@context("deleteQueryVariableWithContext")
async function deleteQueryVariableWithOptions(request: DeleteQueryVariableRequest, runtime: $RuntimeOptions): DeleteQueryVariableResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.id)) {
    query['id'] = request.id;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteQueryVariable',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Delete Query Variable
 *
 * @param request DeleteQueryVariableRequest
 * @return DeleteQueryVariableResponse
 */
async function deleteQueryVariable(request: DeleteQueryVariableRequest): DeleteQueryVariableResponse {
  var runtime = new $RuntimeOptions{};
  return deleteQueryVariableWithOptions(request, runtime);
}

model DeleteRuleRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  consoleRuleId?: long(name='consoleRuleId', description='Policy primary key ID', example='7035'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  ruleId?: string(name='ruleId', description='Policy ID', example='102059'),
  ruleVersionId?: long(name='ruleVersionId', description='Policy version primary key ID', example='10203'),
}

model DeleteRuleResponseBody = {
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DeleteRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRuleResponseBody(name='body'),
}

/**
 * @summary Delete Policy Version
 *
 * @param request DeleteRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteRuleResponse
 */
@context("deleteRuleWithContext")
async function deleteRuleWithOptions(request: DeleteRuleRequest, runtime: $RuntimeOptions): DeleteRuleResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.consoleRuleId)) {
    query['consoleRuleId'] = request.consoleRuleId;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.ruleId)) {
    query['ruleId'] = request.ruleId;
  }
  if (!$isNull(request.ruleVersionId)) {
    query['ruleVersionId'] = request.ruleVersionId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteRule',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Delete Policy Version
 *
 * @param request DeleteRuleRequest
 * @return DeleteRuleResponse
 */
async function deleteRule(request: DeleteRuleRequest): DeleteRuleResponse {
  var runtime = new $RuntimeOptions{};
  return deleteRuleWithOptions(request, runtime);
}

model DeleteSampleBatchRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  ids?: string(name='ids', description='IDs for batch deletion operations.', example='324,343'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou'),
  versions?: string(name='versions', description='List of versions.

This parameter is required.', example='1,1'),
}

model DeleteSampleBatchResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  data?: boolean(name='data', description='Returned data object.', example='true'),
}

model DeleteSampleBatchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSampleBatchResponseBody(name='body'),
}

/**
 * @summary Batch Delete Samples
 *
 * @param request DeleteSampleBatchRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteSampleBatchResponse
 */
@context("deleteSampleBatchWithContext")
async function deleteSampleBatchWithOptions(request: DeleteSampleBatchRequest, runtime: $RuntimeOptions): DeleteSampleBatchResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.ids)) {
    query['ids'] = request.ids;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.versions)) {
    query['versions'] = request.versions;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteSampleBatch',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Batch Delete Samples
 *
 * @param request DeleteSampleBatchRequest
 * @return DeleteSampleBatchResponse
 */
async function deleteSampleBatch(request: DeleteSampleBatchRequest): DeleteSampleBatchResponse {
  var runtime = new $RuntimeOptions{};
  return deleteSampleBatchWithOptions(request, runtime);
}

model DeleteSampleBatchMetaRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  batchUuid?: string(name='batchUuid', description='UUID.', example='jigaklba83ka'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou'),
}

model DeleteSampleBatchMetaResponseBody = {
  requestId?: string(name='RequestId', description='ID of the request', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
}

model DeleteSampleBatchMetaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSampleBatchMetaResponseBody(name='body'),
}

/**
 * @summary Sample Deletion
 *
 * @param request DeleteSampleBatchMetaRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteSampleBatchMetaResponse
 */
@context("deleteSampleBatchMetaWithContext")
async function deleteSampleBatchMetaWithOptions(request: DeleteSampleBatchMetaRequest, runtime: $RuntimeOptions): DeleteSampleBatchMetaResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.batchUuid)) {
    query['batchUuid'] = request.batchUuid;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteSampleBatchMeta',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Sample Deletion
 *
 * @param request DeleteSampleBatchMetaRequest
 * @return DeleteSampleBatchMetaResponse
 */
async function deleteSampleBatchMeta(request: DeleteSampleBatchMetaRequest): DeleteSampleBatchMetaResponse {
  var runtime = new $RuntimeOptions{};
  return deleteSampleBatchMetaWithOptions(request, runtime);
}

model DeleteSampleDataRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  id?: string(name='id', description='Primary key ID', example='3144'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DeleteSampleDataResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DeleteSampleDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSampleDataResponseBody(name='body'),
}

/**
 * @summary Delete Sample Data
 *
 * @param request DeleteSampleDataRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteSampleDataResponse
 */
@context("deleteSampleDataWithContext")
async function deleteSampleDataWithOptions(request: DeleteSampleDataRequest, runtime: $RuntimeOptions): DeleteSampleDataResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.id)) {
    query['id'] = request.id;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteSampleData',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Delete Sample Data
 *
 * @param request DeleteSampleDataRequest
 * @return DeleteSampleDataResponse
 */
async function deleteSampleData(request: DeleteSampleDataRequest): DeleteSampleDataResponse {
  var runtime = new $RuntimeOptions{};
  return deleteSampleDataWithOptions(request, runtime);
}

model DeleteSelfBindVariableRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  id?: long(name='id', description='Variable ID', example='3144'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DeleteSelfBindVariableResponseBody = {
  requestId?: string(name='RequestId', description='ID of the request', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Returned object', example='true'),
}

model DeleteSelfBindVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSelfBindVariableResponseBody(name='body'),
}

/**
 * @summary Delete Custom System Variable
 *
 * @param request DeleteSelfBindVariableRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteSelfBindVariableResponse
 */
@context("deleteSelfBindVariableWithContext")
async function deleteSelfBindVariableWithOptions(request: DeleteSelfBindVariableRequest, runtime: $RuntimeOptions): DeleteSelfBindVariableResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.id)) {
    query['id'] = request.id;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteSelfBindVariable',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Delete Custom System Variable
 *
 * @param request DeleteSelfBindVariableRequest
 * @return DeleteSelfBindVariableResponse
 */
async function deleteSelfBindVariable(request: DeleteSelfBindVariableRequest): DeleteSelfBindVariableResponse {
  var runtime = new $RuntimeOptions{};
  return deleteSelfBindVariableWithOptions(request, runtime);
}

model DescribeAdvanceSearchLeftVariableListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  eventCodes?: string(name='eventCodes', description='Event code.

This parameter is required.', example='de_ahqhsw7665,de_agbzfi5134'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  scene?: string(name='scene', description='Scene

This parameter is required.', example='VELOCITY'),
}

model DescribeAdvanceSearchLeftVariableListResponseBody = {
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: [ 
    {
      code?: string(name='code', description='Variable code', example='age'),
      description?: string(name='description', description='Description.', example='年龄描述'),
      displayType?: string(name='displayType', description='Display type and grouping label', example='NATIVE'),
      fieldRank?: long(name='fieldRank', description='Variable return value type', example='STRING'),
      fieldType?: string(name='fieldType', description='Field table sorting', example='1'),
      id?: long(name='id', description='Primary key ID', example='2453'),
      name?: string(name='name', description='Variable name', example='age'),
      parentName?: string(name='parentName', description='Parent node', example='name'),
      sourceType?: string(name='sourceType', description='Data source', example='SAF'),
      title?: string(name='title', description='Title.', example='年龄'),
      type?: string(name='type', description='Variable type', example='NATIVE'),
    }
  ](name='resultObject', description='Return object'),
}

model DescribeAdvanceSearchLeftVariableListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAdvanceSearchLeftVariableListResponseBody(name='body'),
}

/**
 * @summary 高级查询获取左变量接口
 *
 * @param request DescribeAdvanceSearchLeftVariableListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAdvanceSearchLeftVariableListResponse
 */
@context("describeAdvanceSearchLeftVariableListWithContext")
async function describeAdvanceSearchLeftVariableListWithOptions(request: DescribeAdvanceSearchLeftVariableListRequest, runtime: $RuntimeOptions): DescribeAdvanceSearchLeftVariableListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.eventCodes)) {
    query['eventCodes'] = request.eventCodes;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.scene)) {
    query['scene'] = request.scene;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeAdvanceSearchLeftVariableList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 高级查询获取左变量接口
 *
 * @param request DescribeAdvanceSearchLeftVariableListRequest
 * @return DescribeAdvanceSearchLeftVariableListResponse
 */
async function describeAdvanceSearchLeftVariableList(request: DescribeAdvanceSearchLeftVariableListRequest): DescribeAdvanceSearchLeftVariableListResponse {
  var runtime = new $RuntimeOptions{};
  return describeAdvanceSearchLeftVariableListWithOptions(request, runtime);
}

model DescribeAdvanceSearchPageListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  condition?: string(name='condition', description='Condition value.', example='{
    "relationship": "and",
    "list": [
        {
            "deepCount": 1,
            "left": {
                "hasRightVariable": true,
                "fieldType": "STRING",
                "functionName": "",
                "leftVariableType": "NATIVE",
                "name": "accountId",
                "operatorCode": "equals"
            },
            "right": {
                "rightVariableType": "constant",
                "name": "10000",
                "functionName": ""
            },
            "operatorCode": "equals"
        }
    ]
}'),
  currentPage?: long(name='currentPage', description='Current page number.

This parameter is required.', example='1'),
  eventBeginTime?: long(name='eventBeginTime', description='Query start time, accurate to milliseconds (ms).

This parameter is required.', example='1753372800000'),
  eventCodes?: string(name='eventCodes', description='Event code.

This parameter is required.', example='["de_ahqhsw7665"]'),
  eventEndTime?: long(name='eventEndTime', description='End time, accurate to milliseconds (ms).

This parameter is required.', example='1753459199059'),
  fieldName?: string(name='fieldName', description='Field name', example='age'),
  fieldValue?: string(name='fieldValue', description='Field value', example='20'),
  pageSize?: long(name='pageSize', description='Page size, default value is 10

This parameter is required.', example='10'),
  regId?: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou'),
}

model DescribeAdvanceSearchPageListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    currentPage?: long(name='currentPage', description='Current page number.', example='1'),
    data?: [  map[string]any ](name='data', description='Returned data object'),
    header?: [ 
      {
        fieldName?: string(name='fieldName', description='Field name', example='age'),
        fieldTitle?: string(name='fieldTitle', description='Field title.', example='年龄'),
        isDefault?: boolean(name='isDefault', description='Whether it is a default display field (displayed in the response, not used as a parameter)
- true: Yes
- false: No', example='true'),
      }
    ](name='header', description='Table header'),
    pageSize?: long(name='pageSize', description='Number of items per page. Default value: 20, minimum value: 1, maximum value: 50.', example='10'),
    totalItem?: long(name='totalItem', description='Total number of items', example='37'),
    totalPage?: long(name='totalPage', description='Total number of pages', example='4'),
  }(name='resultObject', description='Return object'),
}

model DescribeAdvanceSearchPageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAdvanceSearchPageListResponseBody(name='body'),
}

/**
 * @summary Advanced Query
 *
 * @param request DescribeAdvanceSearchPageListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAdvanceSearchPageListResponse
 */
@context("describeAdvanceSearchPageListWithContext")
async function describeAdvanceSearchPageListWithOptions(request: DescribeAdvanceSearchPageListRequest, runtime: $RuntimeOptions): DescribeAdvanceSearchPageListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.condition)) {
    query['condition'] = request.condition;
  }
  if (!$isNull(request.currentPage)) {
    query['currentPage'] = request.currentPage;
  }
  if (!$isNull(request.eventBeginTime)) {
    query['eventBeginTime'] = request.eventBeginTime;
  }
  if (!$isNull(request.eventCodes)) {
    query['eventCodes'] = request.eventCodes;
  }
  if (!$isNull(request.eventEndTime)) {
    query['eventEndTime'] = request.eventEndTime;
  }
  if (!$isNull(request.fieldName)) {
    query['fieldName'] = request.fieldName;
  }
  if (!$isNull(request.fieldValue)) {
    query['fieldValue'] = request.fieldValue;
  }
  if (!$isNull(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeAdvanceSearchPageList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Advanced Query
 *
 * @param request DescribeAdvanceSearchPageListRequest
 * @return DescribeAdvanceSearchPageListResponse
 */
async function describeAdvanceSearchPageList(request: DescribeAdvanceSearchPageListRequest): DescribeAdvanceSearchPageListResponse {
  var runtime = new $RuntimeOptions{};
  return describeAdvanceSearchPageListWithOptions(request, runtime);
}

model DescribeAllDataSourceRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou'),
}

model DescribeAllDataSourceResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: [ 
    {
      eventCode?: string(name='eventCode', description='Event code', example='de_aszbjb7236'),
      eventName?: string(name='eventName', description='Event name.', example='注册风险'),
      id?: long(name='id', description='Policy primary key ID', example='497'),
    }
  ](name='resultObject', description='Return object'),
}

model DescribeAllDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAllDataSourceResponseBody(name='body'),
}

/**
 * @summary 数据源列表
 *
 * @param request DescribeAllDataSourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAllDataSourceResponse
 */
@context("describeAllDataSourceWithContext")
async function describeAllDataSourceWithOptions(request: DescribeAllDataSourceRequest, runtime: $RuntimeOptions): DescribeAllDataSourceResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeAllDataSource',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 数据源列表
 *
 * @param request DescribeAllDataSourceRequest
 * @return DescribeAllDataSourceResponse
 */
async function describeAllDataSource(request: DescribeAllDataSourceRequest): DescribeAllDataSourceResponse {
  var runtime = new $RuntimeOptions{};
  return describeAllDataSourceWithOptions(request, runtime);
}

model DescribeAllEventNameAndCodeRequest {
  lang?: string(name='Lang', description='Sets the language type for the request and response messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  createType?: string(name='createType', description='Creation type', example='NORMAL'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeAllEventNameAndCodeResponseBody = {
  code?: string(name='code', description='Status code.', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error message.', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: [ 
    {
      children?: [ 
        {
          createType?: string(name='createType', description='Creation type', example='NORMAL'),
          eventCode?: string(name='eventCode', description='Event code', example='de_aamexg3015'),
          eventName?: string(name='eventName', description='Event name.', example='注册风险旁路'),
          eventType?: string(name='eventType', description='Event type', example='BYPASS'),
        }
      ](name='children', description='List of child fields.'),
      createType?: string(name='createType', description='Creation type', example='MORMAL'),
      eventCode?: string(name='eventCode', description='Event code', example='de_aszbjb7236'),
      eventName?: string(name='eventName', description='Event name.', example='注册风险'),
      eventType?: string(name='eventType', description='Event type', example='MAIN'),
    }
  ](name='resultObject', description='Returned object'),
  success?: boolean(name='success', description='Whether the operation was successful.', example='true'),
}

model DescribeAllEventNameAndCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAllEventNameAndCodeResponseBody(name='body'),
}

/**
 * @summary Event List Query
 *
 * @param request DescribeAllEventNameAndCodeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAllEventNameAndCodeResponse
 */
@context("describeAllEventNameAndCodeWithContext")
async function describeAllEventNameAndCodeWithOptions(request: DescribeAllEventNameAndCodeRequest, runtime: $RuntimeOptions): DescribeAllEventNameAndCodeResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.createType)) {
    query['createType'] = request.createType;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeAllEventNameAndCode',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Event List Query
 *
 * @param request DescribeAllEventNameAndCodeRequest
 * @return DescribeAllEventNameAndCodeResponse
 */
async function describeAllEventNameAndCode(request: DescribeAllEventNameAndCodeRequest): DescribeAllEventNameAndCodeResponse {
  var runtime = new $RuntimeOptions{};
  return describeAllEventNameAndCodeWithOptions(request, runtime);
}

model DescribeAllRootVariableRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  sourceIp?: string(name='SourceIp', description='Request source IP. No need to fill in, the system will automatically obtain it.', example='61.169.104.202'),
  deviceVariableIds?: string(name='deviceVariableIds', description='Device variable list', example='[180]'),
  eventCode?: string(name='eventCode', description='Event code', example='de_arqbuy7206'),
  expressionVariableIds?: string(name='expressionVariableIds', description='Custom variable list', example='[6780]'),
  id?: long(name='id', description='Variable ID.', example='2557'),
  nativeVariableIds?: string(name='nativeVariableIds', description='Event field list', example='[106780]'),
  queryVariableIds?: string(name='queryVariableIds', description='Custom query variable', example='[2678]'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  velocityVariableIds?: string(name='velocityVariableIds', description='Custom cumulative variable', example='[780]'),
}

model DescribeAllRootVariableResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: [ 
    {
      code?: string(name='code', description='Variable code', example='age'),
      description?: string(name='description', description='Variable description.', example='年龄'),
      displayType?: string(name='displayType', description='Display type and group label', example='NATIVE'),
      favoriteFlag?: boolean(name='favoriteFlag', description='Favorite flag', example='true'),
      fieldRank?: long(name='fieldRank', description='Field ranking', example='1'),
      fieldType?: string(name='fieldType', description='Field type.', example='STRING'),
      id?: long(name='id', description='Variable ID.', example='497'),
      inputFieldType?: string(name='inputFieldType', description='Input field type.', example='STRING'),
      inputs?: string(name='inputs', description='Variable input.', example='age'),
      name?: string(name='name', description='Variable name.', example='age'),
      outputThreshold?: {
        maxValue?: double(name='maxValue', description='Maximum value', example='1000'),
        minValue?: double(name='minValue', description='Minimum value.', example='10'),
      }(name='outputThreshold', description='Maximum cross-sectional area of the checkbox.'),
      sourceType?: string(name='sourceType', description='Data source', example='SAF'),
      title?: string(name='title', description='Title.', example='年龄'),
      type?: string(name='type', description='Variable type.', example='NATIVE'),
    }
  ](name='resultObject', description='Return object'),
}

model DescribeAllRootVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAllRootVariableResponseBody(name='body'),
}

/**
 * @summary Display all root variables when testing custom expressions
 *
 * @param request DescribeAllRootVariableRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAllRootVariableResponse
 */
@context("describeAllRootVariableWithContext")
async function describeAllRootVariableWithOptions(request: DescribeAllRootVariableRequest, runtime: $RuntimeOptions): DescribeAllRootVariableResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!$isNull(request.deviceVariableIds)) {
    query['deviceVariableIds'] = request.deviceVariableIds;
  }
  if (!$isNull(request.eventCode)) {
    query['eventCode'] = request.eventCode;
  }
  if (!$isNull(request.expressionVariableIds)) {
    query['expressionVariableIds'] = request.expressionVariableIds;
  }
  if (!$isNull(request.id)) {
    query['id'] = request.id;
  }
  if (!$isNull(request.nativeVariableIds)) {
    query['nativeVariableIds'] = request.nativeVariableIds;
  }
  if (!$isNull(request.queryVariableIds)) {
    query['queryVariableIds'] = request.queryVariableIds;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.velocityVariableIds)) {
    query['velocityVariableIds'] = request.velocityVariableIds;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeAllRootVariable',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Display all root variables when testing custom expressions
 *
 * @param request DescribeAllRootVariableRequest
 * @return DescribeAllRootVariableResponse
 */
async function describeAllRootVariable(request: DescribeAllRootVariableRequest): DescribeAllRootVariableResponse {
  var runtime = new $RuntimeOptions{};
  return describeAllRootVariableWithOptions(request, runtime);
}

model DescribeAnalysisColumnFieldListRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou'),
}

model DescribeAnalysisColumnFieldListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Returned object', example='true'),
}

model DescribeAnalysisColumnFieldListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAnalysisColumnFieldListResponseBody(name='body'),
}

/**
 * @summary Display All Fields
 *
 * @param request DescribeAnalysisColumnFieldListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAnalysisColumnFieldListResponse
 */
@context("describeAnalysisColumnFieldListWithContext")
async function describeAnalysisColumnFieldListWithOptions(request: DescribeAnalysisColumnFieldListRequest, runtime: $RuntimeOptions): DescribeAnalysisColumnFieldListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeAnalysisColumnFieldList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Display All Fields
 *
 * @param request DescribeAnalysisColumnFieldListRequest
 * @return DescribeAnalysisColumnFieldListResponse
 */
async function describeAnalysisColumnFieldList(request: DescribeAnalysisColumnFieldListRequest): DescribeAnalysisColumnFieldListResponse {
  var runtime = new $RuntimeOptions{};
  return describeAnalysisColumnFieldListWithOptions(request, runtime);
}

model DescribeAnalysisColumnListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou'),
}

model DescribeAnalysisColumnListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: [ 
    {
      eventCode?: string(name='eventCode', description='Event code', example='de_aszbjb7236'),
      eventName?: string(name='eventName', description='Event name.', example='注册风险'),
      isDefault?: boolean(name='isDefault', description='Whether it is a default column.', example='true'),
      variableName?: string(name='variableName', description='Variable name.', example='age'),
      variableTitle?: string(name='variableTitle', description='Variable title.', example='年龄'),
      variableType?: string(name='variableType', description='Variable type.', example='NATIVE'),
    }
  ](name='resultObject', description='Returned object'),
}

model DescribeAnalysisColumnListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAnalysisColumnListResponseBody(name='body'),
}

/**
 * @summary Query Custom Columns
 *
 * @param request DescribeAnalysisColumnListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAnalysisColumnListResponse
 */
@context("describeAnalysisColumnListWithContext")
async function describeAnalysisColumnListWithOptions(request: DescribeAnalysisColumnListRequest, runtime: $RuntimeOptions): DescribeAnalysisColumnListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeAnalysisColumnList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Custom Columns
 *
 * @param request DescribeAnalysisColumnListRequest
 * @return DescribeAnalysisColumnListResponse
 */
async function describeAnalysisColumnList(request: DescribeAnalysisColumnListRequest): DescribeAnalysisColumnListResponse {
  var runtime = new $RuntimeOptions{};
  return describeAnalysisColumnListWithOptions(request, runtime);
}

model DescribeAnalysisConditionFavoriteListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou'),
}

model DescribeAnalysisConditionFavoriteListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: [ 
    {
      condition?: string(name='condition', description='Condition value.', example='{"currentId":1,"deepCount":0,"list":[{"currentId":2,"deepCount":1,"left":{"code":"accountId","fieldType":"STRING","functionName":"","hasRightVariable":false,"name":"accountId"},"operatorCode":"isNotEmptyWrapper","parentId":1,"right":{"code":"\\\\"A\\\\nB\\\\nC\\\\"","functionName":"","name":"","rightVariableType":"constant"}}],"parentId":0,"relationship":"and"}'),
      eventBeginTime?: long(name='eventBeginTime', description='Event start timestamp.', example='1752076800000'),
      eventCodes?: string(name='eventCodes', description='Event codes.', example='de_ahespg8137'),
      eventEndTime?: long(name='eventEndTime', description='Event end time.', example='1753891199000'),
      fieldName?: string(name='fieldName', description='Field name.', example='age'),
      fieldValue?: string(name='fieldValue', description='Field value.', example='20'),
      id?: long(name='id', description='Primary key ID', example='497'),
      name?: string(name='name', description='Condition name', example='查询条件1'),
      type?: string(name='type', description='Type, BASIC: Basic query, ADVANCE: Advanced query, BATCH: Batch query', example='BASIC'),
    }
  ](name='resultObject', description='Returned object'),
}

model DescribeAnalysisConditionFavoriteListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAnalysisConditionFavoriteListResponseBody(name='body'),
}

/**
 * @summary Query Condition List
 *
 * @param request DescribeAnalysisConditionFavoriteListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAnalysisConditionFavoriteListResponse
 */
@context("describeAnalysisConditionFavoriteListWithContext")
async function describeAnalysisConditionFavoriteListWithOptions(request: DescribeAnalysisConditionFavoriteListRequest, runtime: $RuntimeOptions): DescribeAnalysisConditionFavoriteListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeAnalysisConditionFavoriteList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Condition List
 *
 * @param request DescribeAnalysisConditionFavoriteListRequest
 * @return DescribeAnalysisConditionFavoriteListResponse
 */
async function describeAnalysisConditionFavoriteList(request: DescribeAnalysisConditionFavoriteListRequest): DescribeAnalysisConditionFavoriteListResponse {
  var runtime = new $RuntimeOptions{};
  return describeAnalysisConditionFavoriteListWithOptions(request, runtime);
}

model DescribeAnalysisExportTaskDownloadUrlRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou'),
}

model DescribeAnalysisExportTaskDownloadUrlResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    downloadFileUrl?: string(name='downloadFileUrl', description='Download URL.', example='https://xxxxx-oss-xxxxx.xxxxxx.aliyuncs.com/xx/xx/xxx/xxxxxx.csv?Expires=1753433384&OSSAccessKeyId=xxxxxxxxx&Signature=%2F%xxxxxxxxxxxx%3D'),
    executeTime?: long(name='executeTime', description='Download execution time', example='1753891199000'),
    status?: string(name='status', description='Task status.', example='SUCCESS'),
  }(name='resultObject', description='Returned object'),
}

model DescribeAnalysisExportTaskDownloadUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAnalysisExportTaskDownloadUrlResponseBody(name='body'),
}

/**
 * @summary Download Query Results
 *
 * @param request DescribeAnalysisExportTaskDownloadUrlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAnalysisExportTaskDownloadUrlResponse
 */
@context("describeAnalysisExportTaskDownloadUrlWithContext")
async function describeAnalysisExportTaskDownloadUrlWithOptions(request: DescribeAnalysisExportTaskDownloadUrlRequest, runtime: $RuntimeOptions): DescribeAnalysisExportTaskDownloadUrlResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeAnalysisExportTaskDownloadUrl',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Download Query Results
 *
 * @param request DescribeAnalysisExportTaskDownloadUrlRequest
 * @return DescribeAnalysisExportTaskDownloadUrlResponse
 */
async function describeAnalysisExportTaskDownloadUrl(request: DescribeAnalysisExportTaskDownloadUrlRequest): DescribeAnalysisExportTaskDownloadUrlResponse {
  var runtime = new $RuntimeOptions{};
  return describeAnalysisExportTaskDownloadUrlWithOptions(request, runtime);
}

model DescribeApiRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  apiId?: string(name='apiId', description='API unique ID.

This parameter is required.', example='33'),
  apiRegionId?: string(name='apiRegionId', description='Region ID.

This parameter is required.', example='cn-hangzhou、cn-shanghai'),
  apiType?: string(name='apiType', description='API type

This parameter is required.', example='SELF'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeApiResponseBody = {
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DescribeApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApiResponseBody(name='body'),
}

/**
 * @summary Get API Details
 *
 * @param request DescribeApiRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeApiResponse
 */
@context("describeApiWithContext")
async function describeApiWithOptions(request: DescribeApiRequest, runtime: $RuntimeOptions): DescribeApiResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.apiId)) {
    query['apiId'] = request.apiId;
  }
  if (!$isNull(request.apiRegionId)) {
    query['apiRegionId'] = request.apiRegionId;
  }
  if (!$isNull(request.apiType)) {
    query['apiType'] = request.apiType;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeApi',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Get API Details
 *
 * @param request DescribeApiRequest
 * @return DescribeApiResponse
 */
async function describeApi(request: DescribeApiRequest): DescribeApiResponse {
  var runtime = new $RuntimeOptions{};
  return describeApiWithOptions(request, runtime);
}

model DescribeApiGroupsRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  apiRegionId?: string(name='apiRegionId', description='Region ID.

This parameter is required.', example='cn-hangzhou'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeApiGroupsResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DescribeApiGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApiGroupsResponseBody(name='body'),
}

/**
 * @summary Get API groups including those purchased by the user and custom ones
 *
 * @param request DescribeApiGroupsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeApiGroupsResponse
 */
@context("describeApiGroupsWithContext")
async function describeApiGroupsWithOptions(request: DescribeApiGroupsRequest, runtime: $RuntimeOptions): DescribeApiGroupsResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.apiRegionId)) {
    query['apiRegionId'] = request.apiRegionId;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeApiGroups',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Get API groups including those purchased by the user and custom ones
 *
 * @param request DescribeApiGroupsRequest
 * @return DescribeApiGroupsResponse
 */
async function describeApiGroups(request: DescribeApiGroupsRequest): DescribeApiGroupsResponse {
  var runtime = new $RuntimeOptions{};
  return describeApiGroupsWithOptions(request, runtime);
}

model DescribeApiLimitRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeApiLimitResponseBody = {
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: {
    limit?: boolean(name='limit', description='Whether the maximum number has been exceeded', example='true'),
    maxTotalItem?: long(name='maxTotalItem', description='Maximum number of items that can be created', example='150'),
    totalItem?: long(name='totalItem', description='Total number of items', example='31'),
  }(name='resultObject', description='Returned object'),
}

model DescribeApiLimitResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApiLimitResponseBody(name='body'),
}

/**
 * @summary Query the limit information for creating API tasks
 *
 * @param request DescribeApiLimitRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeApiLimitResponse
 */
@context("describeApiLimitWithContext")
async function describeApiLimitWithOptions(request: DescribeApiLimitRequest, runtime: $RuntimeOptions): DescribeApiLimitResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeApiLimit',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query the limit information for creating API tasks
 *
 * @param request DescribeApiLimitRequest
 * @return DescribeApiLimitResponse
 */
async function describeApiLimit(request: DescribeApiLimitRequest): DescribeApiLimitResponse {
  var runtime = new $RuntimeOptions{};
  return describeApiLimitWithOptions(request, runtime);
}

model DescribeApiNameListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and responses, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeApiNameListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: [ 
    {
      apiId?: string(name='apiId', description='API ID.', example='33'),
      apiName?: string(name='apiName', description='API name.', example='ListAuditLog'),
    }
  ](name='resultObject', description='Return object'),
}

model DescribeApiNameListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApiNameListResponseBody(name='body'),
}

/**
 * @summary Get API Service Name
 *
 * @param request DescribeApiNameListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeApiNameListResponse
 */
@context("describeApiNameListWithContext")
async function describeApiNameListWithOptions(request: DescribeApiNameListRequest, runtime: $RuntimeOptions): DescribeApiNameListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeApiNameList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Get API Service Name
 *
 * @param request DescribeApiNameListRequest
 * @return DescribeApiNameListResponse
 */
async function describeApiNameList(request: DescribeApiNameListRequest): DescribeApiNameListResponse {
  var runtime = new $RuntimeOptions{};
  return describeApiNameListWithOptions(request, runtime);
}

model DescribeApiVariableRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  id?: string(name='id', description='Variable ID

This parameter is required.', example='3144'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeApiVariableResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DescribeApiVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApiVariableResponseBody(name='body'),
}

/**
 * @summary Query Variable Details
 *
 * @param request DescribeApiVariableRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeApiVariableResponse
 */
@context("describeApiVariableWithContext")
async function describeApiVariableWithOptions(request: DescribeApiVariableRequest, runtime: $RuntimeOptions): DescribeApiVariableResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.id)) {
    query['id'] = request.id;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeApiVariable',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Variable Details
 *
 * @param request DescribeApiVariableRequest
 * @return DescribeApiVariableResponse
 */
async function describeApiVariable(request: DescribeApiVariableRequest): DescribeApiVariableResponse {
  var runtime = new $RuntimeOptions{};
  return describeApiVariableWithOptions(request, runtime);
}

model DescribeApisRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  apiGroupId?: string(name='apiGroupId', description='API group ID.

This parameter is required.', example='3309b0f4b1e243cd8bd9dd029f9c5f0a'),
  apiRegionId?: string(name='apiRegionId', description='Region ID.

This parameter is required.', example='cn-hangzhou、cn-shanghai'),
  apiType?: string(name='apiType', description='API type.

This parameter is required.', example='SELF'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou'),
}

model DescribeApisResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object.', example='true'),
}

model DescribeApisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApisResponseBody(name='body'),
}

/**
 * @summary Get API list including purchased and customized APIs
 *
 * @param request DescribeApisRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeApisResponse
 */
@context("describeApisWithContext")
async function describeApisWithOptions(request: DescribeApisRequest, runtime: $RuntimeOptions): DescribeApisResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.apiGroupId)) {
    query['apiGroupId'] = request.apiGroupId;
  }
  if (!$isNull(request.apiRegionId)) {
    query['apiRegionId'] = request.apiRegionId;
  }
  if (!$isNull(request.apiType)) {
    query['apiType'] = request.apiType;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeApis',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Get API list including purchased and customized APIs
 *
 * @param request DescribeApisRequest
 * @return DescribeApisResponse
 */
async function describeApis(request: DescribeApisRequest): DescribeApisResponse {
  var runtime = new $RuntimeOptions{};
  return describeApisWithOptions(request, runtime);
}

model DescribeAppKeyPageRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  currentPage?: string(name='currentPage', description='Current page number.', example='1'),
  pageSize?: string(name='pageSize', description='Number of items per page, default value is 10.', example='10'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou'),
}

model DescribeAppKeyPageResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='E01E1B4A-6747-5329-9046-B6D6B2D91349'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Number of items per page, default value is 10.', example='10'),
  resultObject?: [ 
    {
      androidSdkUrl?: string(name='androidSdkUrl', description='Android SDK download URL.', example='https://xxxxx-oss-xxxxx.xxxxxx.aliyuncs.com/xx/xx/xxx/xxxxxx.csv?Expires=1753433384&OSSAccessKeyId=xxxxxxxxx&Signature=%2F%xxxxxxxxxxxx%3D'),
      androidSdkVersion?: string(name='androidSdkVersion', description='Android SDK version number.', example='1'),
      appKey?: string(name='appKey', description='Application appkey.', example='sh9a71f07fhs556bd767586307e82795'),
      gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1621578648000'),
      iosSdkUrl?: string(name='iosSdkUrl', description='iOS SDK download URL.', example='https://xxxxx-oss-xxxxx.xxxxxx.aliyuncs.com/xx/xx/xxx/xxxxxx.csv?Expires=1753433384&OSSAccessKeyId=xxxxxxxxx&Signature=%2F%xxxxxxxxxxxx%3D'),
      iosSdkVersion?: string(name='iosSdkVersion', description='iOS SDK version number.', example='1'),
      memo?: string(name='memo', description='Memo.', example='备注'),
      sdkItems?: string(name='sdkItems', description='Deprecated.', example='已作废'),
      used?: string(name='used', description='Whether this appKey is integrated.', example='false'),
    }
  ](name='resultObject', description='Returned object.'),
  totalItem?: int32(name='totalItem', description='Total number of items.', example='3'),
  totalPage?: int32(name='totalPage', description='Total number of pages.', example='1'),
}

model DescribeAppKeyPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAppKeyPageResponseBody(name='body'),
}

/**
 * @summary Query appKey List
 *
 * @param request DescribeAppKeyPageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAppKeyPageResponse
 */
@context("describeAppKeyPageWithContext")
async function describeAppKeyPageWithOptions(request: DescribeAppKeyPageRequest, runtime: $RuntimeOptions): DescribeAppKeyPageResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.currentPage)) {
    query['currentPage'] = request.currentPage;
  }
  if (!$isNull(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeAppKeyPage',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query appKey List
 *
 * @param request DescribeAppKeyPageRequest
 * @return DescribeAppKeyPageResponse
 */
async function describeAppKeyPage(request: DescribeAppKeyPageRequest): DescribeAppKeyPageResponse {
  var runtime = new $RuntimeOptions{};
  return describeAppKeyPageWithOptions(request, runtime);
}

model DescribeAuditConfigRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  auditRelationType?: string(name='auditRelationType', description='Audit type', example='RULE'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeAuditConfigResponseBody = {
  code?: string(name='code', description='Status code.', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error message', example='The input parameter data is not valid. order_storage_company_num component not found'),
  resultObject?: boolean(name='resultObject', description='Returned object', example='true'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model DescribeAuditConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAuditConfigResponseBody(name='body'),
}

/**
 * @summary Approval Switch
 *
 * @param request DescribeAuditConfigRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAuditConfigResponse
 */
@context("describeAuditConfigWithContext")
async function describeAuditConfigWithOptions(request: DescribeAuditConfigRequest, runtime: $RuntimeOptions): DescribeAuditConfigResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.auditRelationType)) {
    query['auditRelationType'] = request.auditRelationType;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeAuditConfig',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Approval Switch
 *
 * @param request DescribeAuditConfigRequest
 * @return DescribeAuditConfigResponse
 */
async function describeAuditConfig(request: DescribeAuditConfigRequest): DescribeAuditConfigResponse {
  var runtime = new $RuntimeOptions{};
  return describeAuditConfigWithOptions(request, runtime);
}

model DescribeAuditDetailsRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  id?: long(name='id', description='Primary key ID

This parameter is required.', example='2557'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeAuditDetailsResponseBody = {
  code?: string(name='code', description='Status code.', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error message.', example='The input parameter data is not valid. order_storage_company_num component not found'),
  resultObject?: boolean(name='resultObject', description='Returned object', example='true'),
  success?: boolean(name='success', description='Whether the call was successful', example='true'),
}

model DescribeAuditDetailsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAuditDetailsResponseBody(name='body'),
}

/**
 * @summary Approval Details
 *
 * @param request DescribeAuditDetailsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAuditDetailsResponse
 */
@context("describeAuditDetailsWithContext")
async function describeAuditDetailsWithOptions(request: DescribeAuditDetailsRequest, runtime: $RuntimeOptions): DescribeAuditDetailsResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.id)) {
    query['id'] = request.id;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeAuditDetails',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Approval Details
 *
 * @param request DescribeAuditDetailsRequest
 * @return DescribeAuditDetailsResponse
 */
async function describeAuditDetails(request: DescribeAuditDetailsRequest): DescribeAuditDetailsResponse {
  var runtime = new $RuntimeOptions{};
  return describeAuditDetailsWithOptions(request, runtime);
}

model DescribeAuditPageListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  auditStatus?: string(name='auditStatus', description='Audit status', example='SUCCESS'),
  currentPage?: string(name='currentPage', description='Current page number.', example='1'),
  eventCode?: string(name='eventCode', description='Event code', example='de_awukck7117'),
  pageSize?: string(name='pageSize', description='Page size, default value is 10', example='10'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  ruleName?: string(name='ruleName', description='Policy name', example='手机号MD5命中人脸测试名单'),
}

model DescribeAuditPageListResponseBody = {
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Number of records per page, default value: 10.', example='10'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
  totalItem?: int32(name='totalItem', description='Total items', example='6'),
  totalPage?: long(name='totalPage', description='Total pages', example='4'),
}

model DescribeAuditPageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAuditPageListResponseBody(name='body'),
}

/**
 * @summary Display and Query of Audit List
 *
 * @param request DescribeAuditPageListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAuditPageListResponse
 */
@context("describeAuditPageListWithContext")
async function describeAuditPageListWithOptions(request: DescribeAuditPageListRequest, runtime: $RuntimeOptions): DescribeAuditPageListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.auditStatus)) {
    query['auditStatus'] = request.auditStatus;
  }
  if (!$isNull(request.currentPage)) {
    query['currentPage'] = request.currentPage;
  }
  if (!$isNull(request.eventCode)) {
    query['eventCode'] = request.eventCode;
  }
  if (!$isNull(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.ruleName)) {
    query['ruleName'] = request.ruleName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeAuditPageList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Display and Query of Audit List
 *
 * @param request DescribeAuditPageListRequest
 * @return DescribeAuditPageListResponse
 */
async function describeAuditPageList(request: DescribeAuditPageListRequest): DescribeAuditPageListResponse {
  var runtime = new $RuntimeOptions{};
  return describeAuditPageListWithOptions(request, runtime);
}

model DescribeAuthEventNameListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeAuthEventNameListResponseBody = {
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DescribeAuthEventNameListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAuthEventNameListResponseBody(name='body'),
}

/**
 * @summary Query the list of event names for the current user
 *
 * @param request DescribeAuthEventNameListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAuthEventNameListResponse
 */
@context("describeAuthEventNameListWithContext")
async function describeAuthEventNameListWithOptions(request: DescribeAuthEventNameListRequest, runtime: $RuntimeOptions): DescribeAuthEventNameListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeAuthEventNameList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query the list of event names for the current user
 *
 * @param request DescribeAuthEventNameListRequest
 * @return DescribeAuthEventNameListResponse
 */
async function describeAuthEventNameList(request: DescribeAuthEventNameListRequest): DescribeAuthEventNameListResponse {
  var runtime = new $RuntimeOptions{};
  return describeAuthEventNameListWithOptions(request, runtime);
}

model DescribeAuthRulePageListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  eventCode?: string(name='eventCode', description='Event code', example='de_arcehq4370'),
  regId?: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou'),
  ruleName?: string(name='ruleName', description='Policy name', example='分析中心事件测试_策略01'),
  status?: string(name='status', description='Status.', example='RUNNING'),
}

model DescribeAuthRulePageListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: long(name='currentPage', description='Current page number.', example='1'),
  pageSize?: long(name='pageSize', description='Page size, default value is 10', example='10'),
  resultObject?: [ 
    {
      consoleRuleId?: long(name='consoleRuleId', description='Console rule ID.', example='6715'),
      createType?: string(name='createType', description='Creation type', example='MORMAL'),
      gmtModified?: long(name='gmtModified', description='Modification time', example='1565701886000'),
      id?: long(name='id', description='Policy primary key ID', example='497'),
      memo?: string(name='memo', description='Memo', example='分析中心事件测试_策略01'),
      ruleId?: string(name='ruleId', description='Policy ID', example='102059'),
      ruleName?: string(name='ruleName', description='Policy name', example='营销风险识别'),
      ruleVersionId?: long(name='ruleVersionId', description='Policy version primary key ID', example='3823'),
      status?: string(name='status', description='Status.', example='RUNNING'),
      version?: long(name='version', description='Version number', example='8'),
    }
  ](name='resultObject', description='Returned object'),
  totalItem?: long(name='totalItem', description='Total items', example='6'),
  totalPage?: long(name='totalPage', description='Total pages', example='9'),
}

model DescribeAuthRulePageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAuthRulePageListResponseBody(name='body'),
}

/**
 * @summary 策略列表
 *
 * @param request DescribeAuthRulePageListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAuthRulePageListResponse
 */
@context("describeAuthRulePageListWithContext")
async function describeAuthRulePageListWithOptions(request: DescribeAuthRulePageListRequest, runtime: $RuntimeOptions): DescribeAuthRulePageListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.eventCode)) {
    query['eventCode'] = request.eventCode;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.ruleName)) {
    query['ruleName'] = request.ruleName;
  }
  if (!$isNull(request.status)) {
    query['status'] = request.status;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeAuthRulePageList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 策略列表
 *
 * @param request DescribeAuthRulePageListRequest
 * @return DescribeAuthRulePageListResponse
 */
async function describeAuthRulePageList(request: DescribeAuthRulePageListRequest): DescribeAuthRulePageListResponse {
  var runtime = new $RuntimeOptions{};
  return describeAuthRulePageListWithOptions(request, runtime);
}

model DescribeAuthSceneListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou'),
}

model DescribeAuthSceneListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: [ 
    {
      serviceCode?: string(name='serviceCode', description='Service code', example='account_abuse'),
    }
  ](name='resultObject', description='Returned object'),
}

model DescribeAuthSceneListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAuthSceneListResponseBody(name='body'),
}

/**
 * @summary 场景列表
 *
 * @param request DescribeAuthSceneListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAuthSceneListResponse
 */
@context("describeAuthSceneListWithContext")
async function describeAuthSceneListWithOptions(request: DescribeAuthSceneListRequest, runtime: $RuntimeOptions): DescribeAuthSceneListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeAuthSceneList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 场景列表
 *
 * @param request DescribeAuthSceneListRequest
 * @return DescribeAuthSceneListResponse
 */
async function describeAuthSceneList(request: DescribeAuthSceneListRequest): DescribeAuthSceneListResponse {
  var runtime = new $RuntimeOptions{};
  return describeAuthSceneListWithOptions(request, runtime);
}

model DescribeAuthScenePageListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou'),
  sceneName?: string(name='sceneName', description='Scene name.', example='account_abuse'),
}

model DescribeAuthScenePageListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: long(name='currentPage', description='Current page number.', example='1'),
  pageSize?: long(name='pageSize', description='Page size, default value is 10', example='10'),
  resultObject?: [ 
    {
      commonRuleCount?: long(name='commonRuleCount', description='Number of common rules', example='10'),
      customRuleCount?: long(name='customRuleCount', description='Number of custom rules', example='10'),
      eventCode?: string(name='eventCode', description='Event code', example='de_avypfd8253'),
      sceneName?: string(name='sceneName', description='Scene name.', example='注册风险识别服务'),
      serverName?: string(name='serverName', description='Service name.', example='account_abuse'),
    }
  ](name='resultObject', description='Returned object'),
  totalItem?: long(name='totalItem', description='Total number of items', example='6'),
  totalPage?: long(name='totalPage', description='Total number of pages.', example='9'),
}

model DescribeAuthScenePageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAuthScenePageListResponseBody(name='body'),
}

/**
 * @summary Scene List
 *
 * @param request DescribeAuthScenePageListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAuthScenePageListResponse
 */
@context("describeAuthScenePageListWithContext")
async function describeAuthScenePageListWithOptions(request: DescribeAuthScenePageListRequest, runtime: $RuntimeOptions): DescribeAuthScenePageListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.sceneName)) {
    query['sceneName'] = request.sceneName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeAuthScenePageList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Scene List
 *
 * @param request DescribeAuthScenePageListRequest
 * @return DescribeAuthScenePageListResponse
 */
async function describeAuthScenePageList(request: DescribeAuthScenePageListRequest): DescribeAuthScenePageListResponse {
  var runtime = new $RuntimeOptions{};
  return describeAuthScenePageListWithOptions(request, runtime);
}

model DescribeAuthStatusRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and responses, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeAuthStatusResponseBody = {
  requestId?: string(name='requestId', description='Request ID', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DescribeAuthStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAuthStatusResponseBody(name='body'),
}

/**
 * @summary Check Authorization
 *
 * @param request DescribeAuthStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAuthStatusResponse
 */
@context("describeAuthStatusWithContext")
async function describeAuthStatusWithOptions(request: DescribeAuthStatusRequest, runtime: $RuntimeOptions): DescribeAuthStatusResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeAuthStatus',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Check Authorization
 *
 * @param request DescribeAuthStatusRequest
 * @return DescribeAuthStatusResponse
 */
async function describeAuthStatus(request: DescribeAuthStatusRequest): DescribeAuthStatusResponse {
  var runtime = new $RuntimeOptions{};
  return describeAuthStatusWithOptions(request, runtime);
}

model DescribeAvgExecuteCostReportRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeAvgExecuteCostReportResponseBody = {
  code?: string(name='code', description='Status code.', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error message.', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: [ 
    {
      ratio?: string(name='ratio', description='Comparison with yesterday\\\\"s average execution time', example='0.2'),
      value?: string(name='value', description='Today\\\\"s average execution time', example='0.1 毫秒'),
    }
  ](name='resultObject', description='Return object'),
  success?: boolean(name='success', description='Whether the call was successful', example='true'),
}

model DescribeAvgExecuteCostReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAvgExecuteCostReportResponseBody(name='body'),
}

/**
 * @summary Average Execution Time
 *
 * @param request DescribeAvgExecuteCostReportRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAvgExecuteCostReportResponse
 */
@context("describeAvgExecuteCostReportWithContext")
async function describeAvgExecuteCostReportWithOptions(request: DescribeAvgExecuteCostReportRequest, runtime: $RuntimeOptions): DescribeAvgExecuteCostReportResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeAvgExecuteCostReport',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Average Execution Time
 *
 * @param request DescribeAvgExecuteCostReportRequest
 * @return DescribeAvgExecuteCostReportResponse
 */
async function describeAvgExecuteCostReport(request: DescribeAvgExecuteCostReportRequest): DescribeAvgExecuteCostReportResponse {
  var runtime = new $RuntimeOptions{};
  return describeAvgExecuteCostReportWithOptions(request, runtime);
}

model DescribeBasicSearchPageListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  currentPage?: long(name='currentPage', description='Current page number.

This parameter is required.', example='1'),
  eventBeginTime?: long(name='eventBeginTime', description='Query start time, accurate to milliseconds (ms).

This parameter is required.', example='1753372800000'),
  eventCodes?: string(name='eventCodes', description='Event code.

This parameter is required.', example='["de_ahqhsw7665"]'),
  eventEndTime?: long(name='eventEndTime', description='End time, accurate to milliseconds (ms).

This parameter is required.', example='1753459199059'),
  fieldName?: string(name='fieldName', description='Field name', example='age'),
  fieldValue?: string(name='fieldValue', description='Field value', example='20'),
  pageSize?: long(name='pageSize', description='Page size, with a default value of 10

This parameter is required.', example='10'),
  regId?: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou'),
}

model DescribeBasicSearchPageListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    currentPage?: long(name='currentPage', description='Current page number in pagination queries.', example='1'),
    data?: [  map[string]any ](name='data', description='Returned data object'),
    header?: [ 
      {
        fieldName?: string(name='fieldName', description='Field name', example='age'),
        fieldTitle?: string(name='fieldTitle', description='Field title.', example='年龄'),
        isDefault?: boolean(name='isDefault', description='Whether it is a default display field (displayed in the response, not used as a parameter)
- true: Yes
- false: No', example='true'),
      }
    ](name='header', description='Table header'),
    pageSize?: long(name='pageSize', description='Page size, with a default value of 10', example='10'),
    totalItem?: long(name='totalItem', description='Total number of items', example='6'),
    totalPage?: long(name='totalPage', description='Total number of pages', example='1'),
  }(name='resultObject', description='Return object'),
}

model DescribeBasicSearchPageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeBasicSearchPageListResponseBody(name='body'),
}

/**
 * @summary Basic Query
 *
 * @param request DescribeBasicSearchPageListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeBasicSearchPageListResponse
 */
@context("describeBasicSearchPageListWithContext")
async function describeBasicSearchPageListWithOptions(request: DescribeBasicSearchPageListRequest, runtime: $RuntimeOptions): DescribeBasicSearchPageListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.currentPage)) {
    query['currentPage'] = request.currentPage;
  }
  if (!$isNull(request.eventBeginTime)) {
    query['eventBeginTime'] = request.eventBeginTime;
  }
  if (!$isNull(request.eventCodes)) {
    query['eventCodes'] = request.eventCodes;
  }
  if (!$isNull(request.eventEndTime)) {
    query['eventEndTime'] = request.eventEndTime;
  }
  if (!$isNull(request.fieldName)) {
    query['fieldName'] = request.fieldName;
  }
  if (!$isNull(request.fieldValue)) {
    query['fieldValue'] = request.fieldValue;
  }
  if (!$isNull(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeBasicSearchPageList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Basic Query
 *
 * @param request DescribeBasicSearchPageListRequest
 * @return DescribeBasicSearchPageListResponse
 */
async function describeBasicSearchPageList(request: DescribeBasicSearchPageListRequest): DescribeBasicSearchPageListResponse {
  var runtime = new $RuntimeOptions{};
  return describeBasicSearchPageListWithOptions(request, runtime);
}

model DescribeBasicStartRequest {
  appKey?: string(name='appKey', description='Application appkey.', example='***'),
  endDs?: string(name='endDs', description='End time, accurate to milliseconds (ms).', example='20250320'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  service?: string(name='service', description='Service to call', example='service_tender_cee'),
  startDs?: string(name='startDs', description='Start time, accurate to milliseconds (ms).', example='20250310'),
}

model DescribeBasicStartResponseBody = {
  code?: string(name='code', description='Status code.', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Return message', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: boolean(name='resultObject', description='Returned object', example='true'),
  success?: boolean(name='success', description='Whether the request was successful.', example='true'),
}

model DescribeBasicStartResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeBasicStartResponseBody(name='body'),
}

/**
 * @summary 基础统计
 *
 * @param request DescribeBasicStartRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeBasicStartResponse
 */
@context("describeBasicStartWithContext")
async function describeBasicStartWithOptions(request: DescribeBasicStartRequest, runtime: $RuntimeOptions): DescribeBasicStartResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.appKey)) {
    query['appKey'] = request.appKey;
  }
  if (!$isNull(request.endDs)) {
    query['endDs'] = request.endDs;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.service)) {
    query['service'] = request.service;
  }
  if (!$isNull(request.startDs)) {
    query['startDs'] = request.startDs;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeBasicStart',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 基础统计
 *
 * @param request DescribeBasicStartRequest
 * @return DescribeBasicStartResponse
 */
async function describeBasicStart(request: DescribeBasicStartRequest): DescribeBasicStartResponse {
  var runtime = new $RuntimeOptions{};
  return describeBasicStartWithOptions(request, runtime);
}

model DescribeByPassShuntEventRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  eventId?: long(name='eventId', description='Event ID.', example='25'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeByPassShuntEventResponseBody = {
  code?: string(name='code', description='Error code.', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error details', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: {
    eventName?: string(name='eventName', description='Event name.', example='营销风险识别_增强版'),
  }(name='resultObject', description='Returned object'),
  success?: boolean(name='success', description='Whether it was successful.', example='true'),
}

model DescribeByPassShuntEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeByPassShuntEventResponseBody(name='body'),
}

/**
 * @summary View Bypass Event
 *
 * @param request DescribeByPassShuntEventRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeByPassShuntEventResponse
 */
@context("describeByPassShuntEventWithContext")
async function describeByPassShuntEventWithOptions(request: DescribeByPassShuntEventRequest, runtime: $RuntimeOptions): DescribeByPassShuntEventResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.eventId)) {
    query['eventId'] = request.eventId;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeByPassShuntEvent',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary View Bypass Event
 *
 * @param request DescribeByPassShuntEventRequest
 * @return DescribeByPassShuntEventResponse
 */
async function describeByPassShuntEvent(request: DescribeByPassShuntEventRequest): DescribeByPassShuntEventResponse {
  var runtime = new $RuntimeOptions{};
  return describeByPassShuntEventWithOptions(request, runtime);
}

model DescribeCustVariableConfigListRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  bizType?: string(name='bizType', description='Configuration type

This parameter is required.', example='TIME_TYPE'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  timeType?: string(name='timeType', description='Time type', example='CURRENT'),
}

model DescribeCustVariableConfigListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: [ 
    {
      configKey?: string(name='configKey', description='Configuration key', example='COUNT'),
      configValue?: string(name='configValue', description='Configuration value', example='累计'),
    }
  ](name='resultObject', description='Return object'),
}

model DescribeCustVariableConfigListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCustVariableConfigListResponseBody(name='body'),
}

/**
 * @summary Query the type configuration of custom accumulated variables
 *
 * @param request DescribeCustVariableConfigListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeCustVariableConfigListResponse
 */
@context("describeCustVariableConfigListWithContext")
async function describeCustVariableConfigListWithOptions(request: DescribeCustVariableConfigListRequest, runtime: $RuntimeOptions): DescribeCustVariableConfigListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.bizType)) {
    query['bizType'] = request.bizType;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.timeType)) {
    query['timeType'] = request.timeType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeCustVariableConfigList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query the type configuration of custom accumulated variables
 *
 * @param request DescribeCustVariableConfigListRequest
 * @return DescribeCustVariableConfigListResponse
 */
async function describeCustVariableConfigList(request: DescribeCustVariableConfigListRequest): DescribeCustVariableConfigListResponse {
  var runtime = new $RuntimeOptions{};
  return describeCustVariableConfigListWithOptions(request, runtime);
}

model DescribeCustVariableDetailRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  id?: long(name='id', description='Primary key ID of the cumulative variable

This parameter is required.', example='2793'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeCustVariableDetailResponseBody = {
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: [ 
    {
      condition?: string(name='condition', description='Condition value.', example='{"currentId":1,"deepCount":0,"list":[{"currentId":2,"deepCount":1,"left":{"code":"accountId","fieldType":"STRING","functionName":"","hasRightVariable":false,"name":"accountId"},"operatorCode":"isNotEmptyWrapper","parentId":1,"right":{"code":"\\\\"A\\\\nB\\\\nC\\\\"","functionName":"","name":"","rightVariableType":"constant"}}],"parentId":0,"relationship":"and"}'),
      dataVersion?: long(name='dataVersion', description='Data version.', example='1'),
      description?: string(name='description', description='Description information.', example='变量描述'),
      eventCodes?: string(name='eventCodes', description='Event code.', example='de_ahespg8137'),
      historyValueType?: string(name='historyValueType', description='Value type', example='EARLIEST'),
      id?: long(name='id', description='Primary key ID of the cumulative variable', example='2793'),
      object?: string(name='object', description='Cumulative object', example='DEpage'),
      outputs?: string(name='outputs', description='Variable return type', example='DOUBLE'),
      subject?: string(name='subject', description='Main object', example='DEpname'),
      timeType?: string(name='timeType', description='Time slice type', example='NEAR'),
      title?: string(name='title', description='Title.', example='累计变量求平均值'),
      twCount?: string(name='twCount', description='Time count', example='1'),
      velocityFC?: string(name='velocityFC', description='Variable type', example='DISTINCT'),
      velocityTW?: string(name='velocityTW', description='Time slice unit', example='HOUR_1'),
    }
  ](name='resultObject', description='Return object'),
}

model DescribeCustVariableDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCustVariableDetailResponseBody(name='body'),
}

/**
 * @summary Cumulative Variable Details
 *
 * @param request DescribeCustVariableDetailRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeCustVariableDetailResponse
 */
@context("describeCustVariableDetailWithContext")
async function describeCustVariableDetailWithOptions(request: DescribeCustVariableDetailRequest, runtime: $RuntimeOptions): DescribeCustVariableDetailResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.id)) {
    query['id'] = request.id;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeCustVariableDetail',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Cumulative Variable Details
 *
 * @param request DescribeCustVariableDetailRequest
 * @return DescribeCustVariableDetailResponse
 */
async function describeCustVariableDetail(request: DescribeCustVariableDetailRequest): DescribeCustVariableDetailResponse {
  var runtime = new $RuntimeOptions{};
  return describeCustVariableDetailWithOptions(request, runtime);
}

model DescribeCustVariablePageRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  createType?: string(name='createType', description='Creation type.', example='NORMAL'),
  currentPage?: int32(name='currentPage', description='Pagination parameter, current page number.', example='1'),
  description?: string(name='description', description='Description.', example='累计变量描述'),
  eventCode?: string(name='eventCode', description='Event code.', example='de_aheldm3876'),
  pageSize?: int32(name='pageSize', description='Number of records per page, default value: 10.', example='10'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou'),
  status?: string(name='status', description='status.', example='ENABLE'),
}

model DescribeCustVariablePageResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10.', example='10'),
  resultObject?: [ 
    {
      dataVersion?: long(name='dataVersion', description='Data version.', example='1'),
      description?: string(name='description', description='Description information.', example='累计变量描述'),
      eventName?: string(name='eventName', description='event name.', example='注册事件'),
      gmtModified?: long(name='gmtModified', description='Modification time.', example='1565701886000'),
      id?: long(name='id', description='Primary key ID of accumulated variable.', example='497'),
      name?: string(name='name', description='Accumulated variable name: generated by backend.', example='xLMfE9K161d'),
      ruleList?: [ string ](name='ruleList', description='Associated Strategies.'),
      status?: string(name='status', description='Status.', example='ENABLE'),
      title?: string(name='title', description='Title.', example='累计变量名称'),
    }
  ](name='resultObject', description='Returned object.'),
  totalItem?: int32(name='totalItem', description='Total number of items.', example='6'),
  totalPage?: int32(name='totalPage', description='Total number of pages.', example='1'),
}

model DescribeCustVariablePageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCustVariablePageResponseBody(name='body'),
}

/**
 * @summary Query Custom Accumulated Variable List
 *
 * @description List Query of Accumulated Variables
 *
 * @param request DescribeCustVariablePageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeCustVariablePageResponse
 */
@context("describeCustVariablePageWithContext")
async function describeCustVariablePageWithOptions(request: DescribeCustVariablePageRequest, runtime: $RuntimeOptions): DescribeCustVariablePageResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.createType)) {
    query['createType'] = request.createType;
  }
  if (!$isNull(request.currentPage)) {
    query['currentPage'] = request.currentPage;
  }
  if (!$isNull(request.description)) {
    query['description'] = request.description;
  }
  if (!$isNull(request.eventCode)) {
    query['eventCode'] = request.eventCode;
  }
  if (!$isNull(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.status)) {
    query['status'] = request.status;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeCustVariablePage',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Custom Accumulated Variable List
 *
 * @description List Query of Accumulated Variables
 *
 * @param request DescribeCustVariablePageRequest
 * @return DescribeCustVariablePageResponse
 */
async function describeCustVariablePage(request: DescribeCustVariablePageRequest): DescribeCustVariablePageResponse {
  var runtime = new $RuntimeOptions{};
  return describeCustVariablePageWithOptions(request, runtime);
}

model DescribeDataSourceDataDownloadUrlRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  dataSourceId?: long(name='dataSourceId', description='Data source ID.

This parameter is required.', example='69'),
  regId?: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou'),
}

model DescribeDataSourceDataDownloadUrlResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    downloadFileUrl?: string(name='downloadFileUrl', description='Download URL.', example='https:/xxxxx.oss-cn-xxxxxx.aliyuncs.com/xxxx/xxx/xxxxxx/xxx/xxxxxxxxxx?Expires=1753421064&OSSAccessKeyId=xxxxxxx&Signature=xxxxxxx%3D'),
  }(name='resultObject', description='Return object'),
}

model DescribeDataSourceDataDownloadUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDataSourceDataDownloadUrlResponseBody(name='body'),
}

/**
 * @summary Get Data Source Data Download Link
 *
 * @param request DescribeDataSourceDataDownloadUrlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeDataSourceDataDownloadUrlResponse
 */
@context("describeDataSourceDataDownloadUrlWithContext")
async function describeDataSourceDataDownloadUrlWithOptions(request: DescribeDataSourceDataDownloadUrlRequest, runtime: $RuntimeOptions): DescribeDataSourceDataDownloadUrlResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.dataSourceId)) {
    query['dataSourceId'] = request.dataSourceId;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeDataSourceDataDownloadUrl',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Get Data Source Data Download Link
 *
 * @param request DescribeDataSourceDataDownloadUrlRequest
 * @return DescribeDataSourceDataDownloadUrlResponse
 */
async function describeDataSourceDataDownloadUrl(request: DescribeDataSourceDataDownloadUrlRequest): DescribeDataSourceDataDownloadUrlResponse {
  var runtime = new $RuntimeOptions{};
  return describeDataSourceDataDownloadUrlWithOptions(request, runtime);
}

model DescribeDataSourceFieldsRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  dataSourceCode?: string(name='dataSourceCode', description='Data source code

This parameter is required.', example='date_source'),
  regId?: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou'),
}

model DescribeDataSourceFieldsResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DescribeDataSourceFieldsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDataSourceFieldsResponseBody(name='body'),
}

/**
 * @summary Retrieve all fields of a data source
 *
 * @param request DescribeDataSourceFieldsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeDataSourceFieldsResponse
 */
@context("describeDataSourceFieldsWithContext")
async function describeDataSourceFieldsWithOptions(request: DescribeDataSourceFieldsRequest, runtime: $RuntimeOptions): DescribeDataSourceFieldsResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.dataSourceCode)) {
    query['dataSourceCode'] = request.dataSourceCode;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeDataSourceFields',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Retrieve all fields of a data source
 *
 * @param request DescribeDataSourceFieldsRequest
 * @return DescribeDataSourceFieldsResponse
 */
async function describeDataSourceFields(request: DescribeDataSourceFieldsRequest): DescribeDataSourceFieldsResponse {
  var runtime = new $RuntimeOptions{};
  return describeDataSourceFieldsWithOptions(request, runtime);
}

model DescribeDataSourcePageListRequest {
  lang?: string(name='Lang', description='Set the language type for request and response, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  sourceIp?: string(name='SourceIp', description='Request source IP.', example='220.250.21.83'),
  currentPage?: long(name='currentPage', description='Current page number.', example='1'),
  name?: string(name='name', description='Variable name', example='data_source'),
  pageSize?: long(name='pageSize', description='Page size, default value is 10', example='10'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  type?: string(name='type', description='Type', example='FILE'),
}

model DescribeDataSourcePageListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10', example='10'),
  resultObject?: [ 
    {
      creator?: string(name='creator', description='Creator of the data source.', example='xxxx'),
      description?: string(name='description', description='Data source description.', example='描述'),
      gmtCreate?: string(name='gmtCreate', description='Time when the data source was created.', example='1621578648000'),
      gmtModified?: string(name='gmtModified', description='Time when the data source was last modified.', example='1565701886000'),
      id?: long(name='id', description='Data source ID.', example='497'),
      modifier?: string(name='modifier', description='Last modifier.', example='xxxxx'),
      name?: string(name='name', description='Data source name.', example='data_source'),
      total?: long(name='total', description='Total pages.', example='4'),
      type?: string(name='type', description='Data source type.', example='FILE'),
    }
  ](name='resultObject', description='Return object'),
  totalItem?: int32(name='totalItem', description='Total items', example='3'),
  totalPage?: int32(name='totalPage', description='Total pages', example='9'),
}

model DescribeDataSourcePageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDataSourcePageListResponseBody(name='body'),
}

/**
 * @summary Data Source List Interface
 *
 * @param request DescribeDataSourcePageListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeDataSourcePageListResponse
 */
@context("describeDataSourcePageListWithContext")
async function describeDataSourcePageListWithOptions(request: DescribeDataSourcePageListRequest, runtime: $RuntimeOptions): DescribeDataSourcePageListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!$isNull(request.currentPage)) {
    query['currentPage'] = request.currentPage;
  }
  if (!$isNull(request.name)) {
    query['name'] = request.name;
  }
  if (!$isNull(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.type)) {
    query['type'] = request.type;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeDataSourcePageList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Data Source List Interface
 *
 * @param request DescribeDataSourcePageListRequest
 * @return DescribeDataSourcePageListResponse
 */
async function describeDataSourcePageList(request: DescribeDataSourcePageListRequest): DescribeDataSourcePageListResponse {
  var runtime = new $RuntimeOptions{};
  return describeDataSourcePageListWithOptions(request, runtime);
}

model DescribeDecisionResultFluctuationRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  eventCodes?: string(name='eventCodes', description='Event code.', example='de_ahqhsw7665,de_ahqhsw7622'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeDecisionResultFluctuationResponseBody = {
  code?: string(name='code', description='Status code.', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error details', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: [ 
    {
      status?: string(name='status', description='Execution status.', example='PASS'),
      todayNum?: long(name='todayNum', description='Today\\\\"s count', example='100'),
      withinSevenDayNum?: string(name='withinSevenDayNum', description='Count within the last seven days', example='600'),
      withinThirtyDayNum?: string(name='withinThirtyDayNum', description='Count within the last thirty days', example='1200'),
      withinThreeDayNum?: string(name='withinThreeDayNum', description='Count within the last three days', example='300'),
      yesterdayNum?: long(name='yesterdayNum', description='Yesterday\\\\"s count', example='200'),
    }
  ](name='resultObject', description='Return object'),
  success?: boolean(name='success', description='Indicates whether the operation was successful.', example='true'),
}

model DescribeDecisionResultFluctuationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDecisionResultFluctuationResponseBody(name='body'),
}

/**
 * @summary Decision Result Fluctuation Detection
 *
 * @param request DescribeDecisionResultFluctuationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeDecisionResultFluctuationResponse
 */
@context("describeDecisionResultFluctuationWithContext")
async function describeDecisionResultFluctuationWithOptions(request: DescribeDecisionResultFluctuationRequest, runtime: $RuntimeOptions): DescribeDecisionResultFluctuationResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.eventCodes)) {
    query['eventCodes'] = request.eventCodes;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeDecisionResultFluctuation',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Decision Result Fluctuation Detection
 *
 * @param request DescribeDecisionResultFluctuationRequest
 * @return DescribeDecisionResultFluctuationResponse
 */
async function describeDecisionResultFluctuation(request: DescribeDecisionResultFluctuationRequest): DescribeDecisionResultFluctuationResponse {
  var runtime = new $RuntimeOptions{};
  return describeDecisionResultFluctuationWithOptions(request, runtime);
}

model DescribeDecisionResultTrendRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  beginTime?: long(name='beginTime', description='Start timestamp, in milliseconds.', example='1737101348000'),
  endTime?: long(name='endTime', description='End time, accurate to milliseconds (ms).', example='1747101348000'),
  eventCodes?: string(name='eventCodes', description='Event code.', example='de_ahqhsw7665,de_agbzfi5134'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeDecisionResultTrendResponseBody = {
  code?: string(name='code', description='Status code', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error details', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: {
    series?: [ 
      {
        data?: [ 
          {
            num?: long(name='num', description='Number', example='10'),
            scale?: string(name='scale', description='ratio', example='5.56%'),
          }
        ](name='data', description='Returned data object'),
        name?: string(name='name', description='Name.', example='IpTag_FFF'),
      }
    ](name='series', description='Chart data'),
    xaxis?: {
      data?: [ string ](name='data', description='X-axis data structure.'),
    }(name='xaxis', description='X-axis data'),
  }(name='resultObject', description='Returned object'),
  success?: boolean(name='success', description='Whether the request was successful.', example='true'),
}

model DescribeDecisionResultTrendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDecisionResultTrendResponseBody(name='body'),
}

/**
 * @summary Decision Result Fluctuation Trend
 *
 * @param request DescribeDecisionResultTrendRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeDecisionResultTrendResponse
 */
@context("describeDecisionResultTrendWithContext")
async function describeDecisionResultTrendWithOptions(request: DescribeDecisionResultTrendRequest, runtime: $RuntimeOptions): DescribeDecisionResultTrendResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.beginTime)) {
    query['beginTime'] = request.beginTime;
  }
  if (!$isNull(request.endTime)) {
    query['endTime'] = request.endTime;
  }
  if (!$isNull(request.eventCodes)) {
    query['eventCodes'] = request.eventCodes;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeDecisionResultTrend',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Decision Result Fluctuation Trend
 *
 * @param request DescribeDecisionResultTrendRequest
 * @return DescribeDecisionResultTrendResponse
 */
async function describeDecisionResultTrend(request: DescribeDecisionResultTrendRequest): DescribeDecisionResultTrendResponse {
  var runtime = new $RuntimeOptions{};
  return describeDecisionResultTrendWithOptions(request, runtime);
}

model DescribeDetailStartRequest {
  appKey?: string(name='appKey', description='Application appkey.', example='***'),
  endDs?: string(name='endDs', description='End time
     
Format yyyymmdd', example='20250320'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  service?: string(name='service', description='Called service', example='service_tender_cee'),
  startDs?: string(name='startDs', description='Start time
     
 Format yyyymmdd', example='20250310'),
}

model DescribeDetailStartResponseBody = {
  code?: string(name='code', description='Status code.', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error details', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: boolean(name='resultObject', description='Returned object', example='true'),
  success?: boolean(name='success', description='Indicates whether the operation was successful, with true representing success.', example='true'),
}

model DescribeDetailStartResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDetailStartResponseBody(name='body'),
}

/**
 * @summary Detailed Statistics
 *
 * @param request DescribeDetailStartRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeDetailStartResponse
 */
@context("describeDetailStartWithContext")
async function describeDetailStartWithOptions(request: DescribeDetailStartRequest, runtime: $RuntimeOptions): DescribeDetailStartResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.appKey)) {
    query['appKey'] = request.appKey;
  }
  if (!$isNull(request.endDs)) {
    query['endDs'] = request.endDs;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.service)) {
    query['service'] = request.service;
  }
  if (!$isNull(request.startDs)) {
    query['startDs'] = request.startDs;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeDetailStart',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Detailed Statistics
 *
 * @param request DescribeDetailStartRequest
 * @return DescribeDetailStartResponse
 */
async function describeDetailStart(request: DescribeDetailStartRequest): DescribeDetailStartResponse {
  var runtime = new $RuntimeOptions{};
  return describeDetailStartWithOptions(request, runtime);
}

model DescribeDownloadUrlRequest {
  fileType?: string(name='FileType', description='File type', example='CSV'),
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='RegId', description='Region code', example='cn-hangzhou'),
  taskId?: long(name='TaskId', description='Task ID.', example='18191'),
  type?: string(name='Type', description='Download type', example='FILE'),
}

model DescribeDownloadUrlResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: string(name='resultObject', description='Returned object', example='true'),
}

model DescribeDownloadUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDownloadUrlResponseBody(name='body'),
}

/**
 * @summary Download
 *
 * @param request DescribeDownloadUrlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeDownloadUrlResponse
 */
@context("describeDownloadUrlWithContext")
async function describeDownloadUrlWithOptions(request: DescribeDownloadUrlRequest, runtime: $RuntimeOptions): DescribeDownloadUrlResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.fileType)) {
    query['FileType'] = request.fileType;
  }
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['RegId'] = request.regId;
  }
  if (!$isNull(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  if (!$isNull(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeDownloadUrl',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Download
 *
 * @param request DescribeDownloadUrlRequest
 * @return DescribeDownloadUrlResponse
 */
async function describeDownloadUrl(request: DescribeDownloadUrlRequest): DescribeDownloadUrlResponse {
  var runtime = new $RuntimeOptions{};
  return describeDownloadUrlWithOptions(request, runtime);
}

model DescribeEventBaseInfoByEventCodeRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  createType?: string(name='createType', description='Creation type', example='NORMAL'),
  eventCode?: string(name='eventCode', description='Event code', example='de_arcehq4370'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeEventBaseInfoByEventCodeResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    bizVersion?: int32(name='bizVersion', description='Business version number', example='1'),
    eventCode?: string(name='eventCode', description='Event code', example='de_aszbjb7236'),
    eventName?: string(name='eventName', description='Event name.', example='注册风险'),
    eventStauts?: string(name='eventStauts', description='Event status.', example='ONLINE'),
    inputFields?: [ 
      {
        description?: string(name='description', description='Field description.', example='描述'),
        fieldCode?: string(name='fieldCode', description='Field code', example='age'),
        fieldRank?: string(name='fieldRank', description='Field ranking', example='1'),
        fieldSource?: string(name='fieldSource', description='Field source.', example='DEFAULT'),
        fieldType?: string(name='fieldType', description='Field type.', example='STRING'),
        title?: string(name='title', description='Field name.', example='年龄'),
      }
    ](name='inputFields', description='Field list.'),
    memo?: string(name='memo', description='Memo.', example='备注'),
    ruleDetails?: [ 
      {
        logicExpression?: string(name='logicExpression', description='Policy Execution Logic', example='3&((1&2&4)'),
        memo?: string(name='memo', description='Memo', example='描述'),
        ruleActions?: string(name='ruleActions', description='Rule Actions', example='[{\\\\"inputs\\\\":[\\\\"auto_accselist\\\\"],\\\\"name\\\\":\\\\"__addDeTags__\\\\",\\\\"actionType\\\\":\\\\"TAG\\\\",\\\\"outputType\\\\":\\\\"const\\\\"}]'),
        ruleAuthType?: string(name='ruleAuthType', description='Policy Type', example='DEFAULT'),
        ruleExpressions?: string(name='ruleExpressions', description='Event Expressions.', example='[{\\\\"expressionName\\\\":\\\\"同一设备同一IP上的注册用户数\\\\",\\\\"itemId\\\\":1,\\\\"left\\\\":{\\\\"name\\\\":\\\\"dK7EXHr490f\\\\"},\\\\"operatorCode\\\\":\\\\"gte\\\\",\\\\"operatorName\\\\":\\\\"大于等于\\\\",\\\\"right\\\\":{\\\\"fieldValue\\\\":\\\\"2\\\\"}}]'),
        ruleId?: string(name='ruleId', description='Policy ID', example='101544'),
        ruleName?: string(name='ruleName', description='Policy Name', example='手机号MD5命中人脸测试名单'),
        ruleStatus?: string(name='ruleStatus', description='Policy Status', example='DRAFT'),
      }
    ](name='ruleDetails', description='Policy Information'),
    templateCode?: string(name='templateCode', description='Operation template code', example='register'),
    templateName?: string(name='templateName', description='Template name', example='注册事件模板'),
    templateType?: string(name='templateType', description='Template type.', example='TEMPLATE'),
  }(name='resultObject', description='Return object'),
}

model DescribeEventBaseInfoByEventCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEventBaseInfoByEventCodeResponseBody(name='body'),
}

/**
 * @summary Query Event Details
 *
 * @param request DescribeEventBaseInfoByEventCodeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeEventBaseInfoByEventCodeResponse
 */
@context("describeEventBaseInfoByEventCodeWithContext")
async function describeEventBaseInfoByEventCodeWithOptions(request: DescribeEventBaseInfoByEventCodeRequest, runtime: $RuntimeOptions): DescribeEventBaseInfoByEventCodeResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.createType)) {
    query['createType'] = request.createType;
  }
  if (!$isNull(request.eventCode)) {
    query['eventCode'] = request.eventCode;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeEventBaseInfoByEventCode',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Event Details
 *
 * @param request DescribeEventBaseInfoByEventCodeRequest
 * @return DescribeEventBaseInfoByEventCodeResponse
 */
async function describeEventBaseInfoByEventCode(request: DescribeEventBaseInfoByEventCodeRequest): DescribeEventBaseInfoByEventCodeResponse {
  var runtime = new $RuntimeOptions{};
  return describeEventBaseInfoByEventCodeWithOptions(request, runtime);
}

model DescribeEventCountRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  createType?: string(name='createType', description='Creation type', example='NORMAL'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeEventCountResponseBody = {
  code?: string(name='code', description='Status code', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error details', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: {
    limit?: boolean(name='limit', description='Whether it exceeds the maximum number', example='true'),
    maxTotalItem?: int32(name='maxTotalItem', description='Maximum creation count', example='100'),
    totalItem?: int32(name='totalItem', description='Total count', example='101'),
  }(name='resultObject', description='Returned object'),
  success?: boolean(name='success', description='Whether the request was successful.', example='true'),
}

model DescribeEventCountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEventCountResponseBody(name='body'),
}

/**
 * @summary Query Total Event Count
 *
 * @param request DescribeEventCountRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeEventCountResponse
 */
@context("describeEventCountWithContext")
async function describeEventCountWithOptions(request: DescribeEventCountRequest, runtime: $RuntimeOptions): DescribeEventCountResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.createType)) {
    query['createType'] = request.createType;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeEventCount',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Total Event Count
 *
 * @param request DescribeEventCountRequest
 * @return DescribeEventCountResponse
 */
async function describeEventCount(request: DescribeEventCountRequest): DescribeEventCountResponse {
  var runtime = new $RuntimeOptions{};
  return describeEventCountWithOptions(request, runtime);
}

model DescribeEventDetailByRequestIdRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  eventCode?: string(name='eventCode', description='Event code', example='de_azywkh7523'),
  eventTime?: long(name='eventTime', description='Event execution time', example='1752571330000'),
  regId?: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou'),
  sRequestId?: string(name='sRequestId', description='Request ID.

This parameter is required.', example='BD6B08EC-1B44-5378-8838-C76A36415C55'),
}

model DescribeEventDetailByRequestIdResponseBody = {
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DescribeEventDetailByRequestIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEventDetailByRequestIdResponseBody(name='body'),
}

/**
 * @summary Query event details based on the request ID
 *
 * @param request DescribeEventDetailByRequestIdRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeEventDetailByRequestIdResponse
 */
@context("describeEventDetailByRequestIdWithContext")
async function describeEventDetailByRequestIdWithOptions(request: DescribeEventDetailByRequestIdRequest, runtime: $RuntimeOptions): DescribeEventDetailByRequestIdResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.eventCode)) {
    query['eventCode'] = request.eventCode;
  }
  if (!$isNull(request.eventTime)) {
    query['eventTime'] = request.eventTime;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.sRequestId)) {
    query['sRequestId'] = request.sRequestId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeEventDetailByRequestId',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query event details based on the request ID
 *
 * @param request DescribeEventDetailByRequestIdRequest
 * @return DescribeEventDetailByRequestIdResponse
 */
async function describeEventDetailByRequestId(request: DescribeEventDetailByRequestIdRequest): DescribeEventDetailByRequestIdResponse {
  var runtime = new $RuntimeOptions{};
  return describeEventDetailByRequestIdWithOptions(request, runtime);
}

model DescribeEventLogDetailRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  reqIdByLog?: string(name='reqIdByLog', description='Log details.

This parameter is required.', example='BD6B08EC-1B44-5378-8838-C76A36415C55'),
}

model DescribeEventLogDetailResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DescribeEventLogDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEventLogDetailResponseBody(name='body'),
}

/**
 * @summary Query Event History Details
 *
 * @param request DescribeEventLogDetailRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeEventLogDetailResponse
 */
@context("describeEventLogDetailWithContext")
async function describeEventLogDetailWithOptions(request: DescribeEventLogDetailRequest, runtime: $RuntimeOptions): DescribeEventLogDetailResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.reqIdByLog)) {
    query['reqIdByLog'] = request.reqIdByLog;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeEventLogDetail',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Event History Details
 *
 * @param request DescribeEventLogDetailRequest
 * @return DescribeEventLogDetailResponse
 */
async function describeEventLogDetail(request: DescribeEventLogDetailRequest): DescribeEventLogDetailResponse {
  var runtime = new $RuntimeOptions{};
  return describeEventLogDetailWithOptions(request, runtime);
}

model DescribeEventLogPageRequest {
  lang?: string(name='Lang', description='Set the language type for request and response messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  accountIdPRP?: string(name='accountIdPRP', description='Account ID (request_param.accountId), up to 50 characters, supports “*” and “?” wildcards.', example='180650758xxxxxxx'),
  beginTime?: long(name='beginTime', description='Start timestamp of the log. Unit: milliseconds.', example='1737101348000'),
  condition1AL?: string(name='condition1AL', description='Full-text match 1, cannot exceed 30 characters.', example='rm0102'),
  condition2AL?: string(name='condition2AL', description='Full-text match 2, cannot exceed 30 characters.', example='rm0102'),
  condition3AL?: string(name='condition3AL', description='Full-text match 3, cannot exceed 30 characters.', example='rm0102'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  deviceTypeLRP?: string(name='deviceTypeLRP', description='Device type (request_param.deviceType), examples: 1. PC, 2. MOBILE.', example='PC'),
  emailPRP?: string(name='emailPRP', description='Email (request_param.email), up to 100 characters, supports “*” and “?” wildcards.', example='xxxx@123.com'),
  endTime?: long(name='endTime', description='End time, accurate to milliseconds (ms).', example='1746669075000'),
  failReasonLRP?: string(name='failReasonLRP', description='Login failure reason (-request_param.failReason).', example='wrongPassword'),
  ipPRP?: string(name='ipPRP', description='IP (request_param.ip), up to 20 characters, supports “*” and “?” wildcards.', example='168.168.168.168'),
  loginResultARP?: string(name='loginResultARP', description='Login success indicator (request_param.loginResult).', example='SUCCESS'),
  loginTypeLRP?: string(name='loginTypeLRP', description='Login verification method (-request_param.loginType).', example='PASSWORD'),
  macPRP?: string(name='macPRP', description='Device MAC address (-request_param.mac), up to 30 characters, supports “*” and “?” wildcards.', example='00-1C-F0-1D-A7-81'),
  mobilePRP?: string(name='mobilePRP', description='Phone number (supports MD5 request_param.mobile/request_param.mobileMd5), up to 30 characters, supports “*” and “?” wildcards, searchable by mobile and mobileMd5 fields.', example='17600000000'),
  nickNamePRP?: string(name='nickNamePRP', description='Account nickname (request_param.nickName), up to 50 characters, supports “*” and “?” wildcards.', example='测试xx'),
  operateSourceLRP?: string(name='operateSourceLRP', description='Operation source (request_param.operateSource), examples: 1. PC, 2. H5, 3. App.', example='PC'),
  pageSize?: int32(name='pageSize', description='Number of items per page, default value is 10.', example='10'),
  referPRP?: string(name='referPRP', description='Referer (-request_param.refer), up to 50 characters, supports “*” and “?” wildcards.', example='refer'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou'),
  registerIpPRP?: string(name='registerIpPRP', description='Account registration IP (request_param.registerIp), up to 20 characters, supports “*” and “?” wildcards.', example='168.168.168.168'),
  reqIdPBS?: string(name='reqIdPBS', description='Request ID.', example='BD6B08EC-1B44-5378-8838-C76A36415C55'),
  scoreEBS?: int32(name='scoreEBS', description='End value of the score range (score), only non-negative integers are allowed, and the right interval must be greater than the left interval, with both intervals being closed.', example='2'),
  scoreSBS?: int32(name='scoreSBS', description='Starting value of the score range (score), only non-negative integers are allowed, the right interval must be greater than the left interval, both intervals are inclusive.', example='1'),
  serviceABS?: string(name='serviceABS', description='Event name (instance_id).', example='de_afghcf6411'),
  tagsLBS?: string(name='tagsLBS', description='Risk tags (tags), data source DescribeTagsList.', example='rg0001'),
  umidPDI?: string(name='umidPDI', description='Device ID (device_info.umid).', example='设备ID'),
  userAgentPRP?: string(name='userAgentPRP', description='User agent (-request_param.userAgent), up to 50 characters, supports “*” and “?” wildcards.', example='00-1C-F0-1D-A7-81'),
  userNameTypeLRP?: string(name='userNameTypeLRP', description='Username type, login scenario (-request_param.userNameType).', example='type'),
}

model DescribeEventLogPageResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10.', example='10'),
  resultObject?: [ 
    {
      accountId?: string(name='accountId', description='Account ID.', example='1631801314885832'),
      email?: string(name='email', description='Email.', example='xxxx@123.com'),
      ip?: string(name='ip', description='IP address.', example='10.200.5.100'),
      mobile?: string(name='mobile', description='Mobile phone number.', example='13817606333'),
      nickName?: string(name='nickName', description='Nickname.', example='昵称'),
      requestId?: string(name='requestId', description='Request ID.', example='546F8063-0104-5271-9EB7-56FB3F375BAD'),
      score?: string(name='score', description='Score.', example='10.0'),
      service?: string(name='service', description='Event name.', example='注册事件'),
      tags?: string(name='tags', description='Tags.', example='rm0102'),
      timestamp?: string(name='timestamp', description='Transaction time.', example='1737101348000'),
      umid?: string(name='umid', description='Device ID.', example='4239'),
    }
  ](name='resultObject', description='Returned object.'),
  totalItem?: int32(name='totalItem', description='Total number of items.', example='6'),
  totalPage?: int32(name='totalPage', description='Total number of pages.', example='9'),
}

model DescribeEventLogPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEventLogPageResponseBody(name='body'),
}

/**
 * @summary Query Event History List
 *
 * @param request DescribeEventLogPageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeEventLogPageResponse
 */
@context("describeEventLogPageWithContext")
async function describeEventLogPageWithOptions(request: DescribeEventLogPageRequest, runtime: $RuntimeOptions): DescribeEventLogPageResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.accountIdPRP)) {
    query['accountIdPRP'] = request.accountIdPRP;
  }
  if (!$isNull(request.beginTime)) {
    query['beginTime'] = request.beginTime;
  }
  if (!$isNull(request.condition1AL)) {
    query['condition1AL'] = request.condition1AL;
  }
  if (!$isNull(request.condition2AL)) {
    query['condition2AL'] = request.condition2AL;
  }
  if (!$isNull(request.condition3AL)) {
    query['condition3AL'] = request.condition3AL;
  }
  if (!$isNull(request.currentPage)) {
    query['currentPage'] = request.currentPage;
  }
  if (!$isNull(request.deviceTypeLRP)) {
    query['deviceTypeLRP'] = request.deviceTypeLRP;
  }
  if (!$isNull(request.emailPRP)) {
    query['emailPRP'] = request.emailPRP;
  }
  if (!$isNull(request.endTime)) {
    query['endTime'] = request.endTime;
  }
  if (!$isNull(request.failReasonLRP)) {
    query['failReasonLRP'] = request.failReasonLRP;
  }
  if (!$isNull(request.ipPRP)) {
    query['ipPRP'] = request.ipPRP;
  }
  if (!$isNull(request.loginResultARP)) {
    query['loginResultARP'] = request.loginResultARP;
  }
  if (!$isNull(request.loginTypeLRP)) {
    query['loginTypeLRP'] = request.loginTypeLRP;
  }
  if (!$isNull(request.macPRP)) {
    query['macPRP'] = request.macPRP;
  }
  if (!$isNull(request.mobilePRP)) {
    query['mobilePRP'] = request.mobilePRP;
  }
  if (!$isNull(request.nickNamePRP)) {
    query['nickNamePRP'] = request.nickNamePRP;
  }
  if (!$isNull(request.operateSourceLRP)) {
    query['operateSourceLRP'] = request.operateSourceLRP;
  }
  if (!$isNull(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!$isNull(request.referPRP)) {
    query['referPRP'] = request.referPRP;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.registerIpPRP)) {
    query['registerIpPRP'] = request.registerIpPRP;
  }
  if (!$isNull(request.reqIdPBS)) {
    query['reqIdPBS'] = request.reqIdPBS;
  }
  if (!$isNull(request.scoreEBS)) {
    query['scoreEBS'] = request.scoreEBS;
  }
  if (!$isNull(request.scoreSBS)) {
    query['scoreSBS'] = request.scoreSBS;
  }
  if (!$isNull(request.serviceABS)) {
    query['serviceABS'] = request.serviceABS;
  }
  if (!$isNull(request.tagsLBS)) {
    query['tagsLBS'] = request.tagsLBS;
  }
  if (!$isNull(request.umidPDI)) {
    query['umidPDI'] = request.umidPDI;
  }
  if (!$isNull(request.userAgentPRP)) {
    query['userAgentPRP'] = request.userAgentPRP;
  }
  if (!$isNull(request.userNameTypeLRP)) {
    query['userNameTypeLRP'] = request.userNameTypeLRP;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeEventLogPage',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Event History List
 *
 * @param request DescribeEventLogPageRequest
 * @return DescribeEventLogPageResponse
 */
async function describeEventLogPage(request: DescribeEventLogPageRequest): DescribeEventLogPageResponse {
  var runtime = new $RuntimeOptions{};
  return describeEventLogPageWithOptions(request, runtime);
}

model DescribeEventPageListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  createType?: string(name='createType', description='Creation type', example='NORMAL'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  eventCode?: string(name='eventCode', description='Event code', example='de_aikqxy3122'),
  eventName?: string(name='eventName', description='Event name.', example='注册风险旁路'),
  eventStatus?: string(name='eventStatus', description='Event status.', example='ONLINE'),
  pageSize?: int32(name='pageSize', description='Page size, with a default value of 10', example='10'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeEventPageListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, with a default value of 10', example='10'),
  resultObject?: [ 
    {
      children?: [ 
        {
          eventCode?: string(name='eventCode', description='Event code.', example='de_aamexg3015'),
          eventName?: string(name='eventName', description='Event name.', example='测试'),
          eventStatus?: string(name='eventStatus', description='Event status.', example='ONLINE'),
          eventType?: string(name='eventType', description='Event type.', example='BYPASS'),
          gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1621578648000'),
          gmtModified?: long(name='gmtModified', description='Modification time', example='1621578648000'),
          id?: long(name='id', description='Primary key ID', example='334'),
          ruleCount?: long(name='ruleCount', description='Total number of rules.', example='10'),
        }
      ](name='children', description='Object'),
      eventCode?: string(name='eventCode', description='Event code', example='de_aszbjb7236'),
      eventName?: string(name='eventName', description='Event name.', example='注册风险'),
      eventStatus?: string(name='eventStatus', description='Event status.', example='ONLINE'),
      eventType?: string(name='eventType', description='Event type.', example='MAIN'),
      gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1621578648000'),
      gmtModified?: long(name='gmtModified', description='Modification time', example='1565701886000'),
      id?: long(name='id', description='Database ID.', example='497'),
      ruleCount?: int32(name='ruleCount', description='Total number of rules.', example='10'),
      templateCode?: string(name='templateCode', description='Template code', example='register'),
      templateName?: string(name='templateName', description='Template name.', example='注册模版'),
      templateType?: string(name='templateType', description='Template type', example='UNIVERSAL'),
      userCount?: int32(name='userCount', description='Number of customer authorizations', example='1'),
    }
  ](name='resultObject', description='Returned object'),
  totalItem?: int32(name='totalItem', description='Total number of items', example='3'),
  totalPage?: int32(name='totalPage', description='Total number of pages.', example='9'),
}

model DescribeEventPageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEventPageListResponseBody(name='body'),
}

/**
 * @summary Paged Query for Events
 *
 * @param request DescribeEventPageListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeEventPageListResponse
 */
@context("describeEventPageListWithContext")
async function describeEventPageListWithOptions(request: DescribeEventPageListRequest, runtime: $RuntimeOptions): DescribeEventPageListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.createType)) {
    query['createType'] = request.createType;
  }
  if (!$isNull(request.currentPage)) {
    query['currentPage'] = request.currentPage;
  }
  if (!$isNull(request.eventCode)) {
    query['eventCode'] = request.eventCode;
  }
  if (!$isNull(request.eventName)) {
    query['eventName'] = request.eventName;
  }
  if (!$isNull(request.eventStatus)) {
    query['eventStatus'] = request.eventStatus;
  }
  if (!$isNull(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeEventPageList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Paged Query for Events
 *
 * @param request DescribeEventPageListRequest
 * @return DescribeEventPageListResponse
 */
async function describeEventPageList(request: DescribeEventPageListRequest): DescribeEventPageListResponse {
  var runtime = new $RuntimeOptions{};
  return describeEventPageListWithOptions(request, runtime);
}

model DescribeEventResultBarChartRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  beginTime?: long(name='beginTime', description='Start time, accurate to milliseconds (ms).

This parameter is required.', example='1737101348000'),
  endTime?: long(name='endTime', description='End time, accurate to milliseconds (ms).

This parameter is required.', example='1744337383000'),
  eventCodes?: string(name='eventCodes', description='Event code.', example='de_ahqhsw7665,de_ahqhsw7622'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeEventResultBarChartResponseBody = {
  code?: string(name='code', description='Status code.', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error message.', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: {
    series?: [ 
      {
        data?: [ 
          {
            num?: long(name='num', description='Number.', example='100'),
            scale?: string(name='scale', description='Scale', example='50.00%'),
          }
        ](name='data', description='Returned data object'),
        name?: string(name='name', description='Series name.', example='通过'),
        stack?: string(name='stack', description='Label key', example='通过'),
      }
    ](name='series', description='Chart data'),
    xaxis?: {
      data?: [ string ](name='data', description='Returned data object'),
    }(name='xaxis', description='xaxis interface configuration.'),
  }(name='resultObject', description='Returned object'),
  success?: boolean(name='success', description='Whether the request was successful.', example='true'),
}

model DescribeEventResultBarChartResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEventResultBarChartResponseBody(name='body'),
}

/**
 * @summary Risk Dashboard
 *
 * @param request DescribeEventResultBarChartRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeEventResultBarChartResponse
 */
@context("describeEventResultBarChartWithContext")
async function describeEventResultBarChartWithOptions(request: DescribeEventResultBarChartRequest, runtime: $RuntimeOptions): DescribeEventResultBarChartResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.beginTime)) {
    query['beginTime'] = request.beginTime;
  }
  if (!$isNull(request.endTime)) {
    query['endTime'] = request.endTime;
  }
  if (!$isNull(request.eventCodes)) {
    query['eventCodes'] = request.eventCodes;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeEventResultBarChart',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Risk Dashboard
 *
 * @param request DescribeEventResultBarChartRequest
 * @return DescribeEventResultBarChartResponse
 */
async function describeEventResultBarChart(request: DescribeEventResultBarChartRequest): DescribeEventResultBarChartResponse {
  var runtime = new $RuntimeOptions{};
  return describeEventResultBarChartWithOptions(request, runtime);
}

model DescribeEventResultListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  beginTime?: long(name='beginTime', description='Start time, accurate to milliseconds (ms).

This parameter is required.', example='1737101348000'),
  currentPage?: long(name='currentPage', description='Current page number.', example='1'),
  endTime?: long(name='endTime', description='End time, accurate to milliseconds (ms).

This parameter is required.', example='1683616457000'),
  pageSize?: long(name='pageSize', description='Page size, default value is 10', example='10'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeEventResultListResponseBody = {
  code?: string(name='code', description='Status code.', example='200'),
  currentPage?: long(name='currentPage', description='Current page number.', example='1'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error details', example='The input parameter data is not valid. order_storage_company_num component not found'),
  pageSize?: long(name='pageSize', description='Page size, default value is 10', example='10'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: [ 
    {
      eventCode?: string(name='eventCode', description='Event code', example='de_aszbjb7236'),
      eventName?: string(name='eventName', description='Event name.', example='注册风险'),
      passNum?: long(name='passNum', description='Number of passed checks.', example='90'),
      pendingNum?: long(name='pendingNum', description='Number of pending items.', example='5'),
      rejectNum?: long(name='rejectNum', description='Number of rejected approvals.', example='5'),
      totalNum?: long(name='totalNum', description='Total number of items.', example='100'),
    }
  ](name='resultObject', description='Returned object'),
  success?: boolean(name='success', description='Whether the query was successful.', example='true'),
  totalItem?: long(name='totalItem', description='Total number of items.', example='31'),
  totalPage?: long(name='totalPage', description='Total number of pages', example='9'),
}

model DescribeEventResultListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEventResultListResponseBody(name='body'),
}

/**
 * @summary Event Overview List
 *
 * @param request DescribeEventResultListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeEventResultListResponse
 */
@context("describeEventResultListWithContext")
async function describeEventResultListWithOptions(request: DescribeEventResultListRequest, runtime: $RuntimeOptions): DescribeEventResultListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.beginTime)) {
    query['beginTime'] = request.beginTime;
  }
  if (!$isNull(request.currentPage)) {
    query['currentPage'] = request.currentPage;
  }
  if (!$isNull(request.endTime)) {
    query['endTime'] = request.endTime;
  }
  if (!$isNull(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeEventResultList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Event Overview List
 *
 * @param request DescribeEventResultListRequest
 * @return DescribeEventResultListResponse
 */
async function describeEventResultList(request: DescribeEventResultListRequest): DescribeEventResultListResponse {
  var runtime = new $RuntimeOptions{};
  return describeEventResultListWithOptions(request, runtime);
}

model DescribeEventTaskHistoryRequest {
  lang?: string(name='Lang', description='Set the language type for request and response messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeEventTaskHistoryResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: [ 
    {
      taskCode?: string(name='taskCode', description='Task code.', example='de_aoxcdy9473'),
      taskName?: string(name='taskName', description='Task name', example='仿真任务'),
      taskStatus?: string(name='taskStatus', description='Task status.', example='SUCCESSFUL'),
      url?: string(name='url', description='OSS download URL', example='https://xxxxx-oss-xxxxx.xxxxxx.aliyuncs.com/xx/xx/xxx/xxxxxx.csv?Expires=1753433384&OSSAccessKeyId=xxxxxxxxx&Signature=%2F%xxxxxxxxxxxx%3D'),
    }
  ](name='resultObject', description='Return object'),
}

model DescribeEventTaskHistoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEventTaskHistoryResponseBody(name='body'),
}

/**
 * @summary Query Policy Download List
 *
 * @param request DescribeEventTaskHistoryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeEventTaskHistoryResponse
 */
@context("describeEventTaskHistoryWithContext")
async function describeEventTaskHistoryWithOptions(request: DescribeEventTaskHistoryRequest, runtime: $RuntimeOptions): DescribeEventTaskHistoryResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeEventTaskHistory',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Policy Download List
 *
 * @param request DescribeEventTaskHistoryRequest
 * @return DescribeEventTaskHistoryResponse
 */
async function describeEventTaskHistory(request: DescribeEventTaskHistoryRequest): DescribeEventTaskHistoryResponse {
  var runtime = new $RuntimeOptions{};
  return describeEventTaskHistoryWithOptions(request, runtime);
}

model DescribeEventTotalCountReportRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeEventTotalCountReportResponseBody = {
  code?: string(name='code', description='Status code', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error message.', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: {
    ratio?: string(name='ratio', description='Comparison with yesterday\\\\"s event invocation count', example='101'),
    value?: string(name='value', description='Today\\\\"s event invocation count', example='100'),
  }(name='resultObject', description='Returned object'),
  success?: boolean(name='success', description='Indicates whether this operation was successful, `true` means success.', example='true'),
}

model DescribeEventTotalCountReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEventTotalCountReportResponseBody(name='body'),
}

/**
 * @summary Event Invocation Count
 *
 * @param request DescribeEventTotalCountReportRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeEventTotalCountReportResponse
 */
@context("describeEventTotalCountReportWithContext")
async function describeEventTotalCountReportWithOptions(request: DescribeEventTotalCountReportRequest, runtime: $RuntimeOptions): DescribeEventTotalCountReportResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeEventTotalCountReport',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Event Invocation Count
 *
 * @param request DescribeEventTotalCountReportRequest
 * @return DescribeEventTotalCountReportResponse
 */
async function describeEventTotalCountReport(request: DescribeEventTotalCountReportRequest): DescribeEventTotalCountReportResponse {
  var runtime = new $RuntimeOptions{};
  return describeEventTotalCountReportWithOptions(request, runtime);
}

model DescribeEventUploadPolicyRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeEventUploadPolicyResponseBody = {
  accessId?: string(name='AccessId', description='ID for accessing OSS', example='LTAxxxxxxxxxxxx'),
  host?: string(name='Host', description='OSS host.', example='172.16.0.44'),
  key?: string(name='Key', description='The Key required for file upload.', example='saf/de/namelist/e924/ufzgsedX9bd3a7'),
  policy?: string(name='Policy', description='OSS security policy', example='eyJleHBpcmF0aW9uIjoiMjAyNS0wNy0zMFQwNjowNTo0OS45NTRaIiwiY29uZGl0aW9ucyI6W1siY29udGVudC1sZW5ndGgtcmFuZ2UiLDAsMTA0ODU3NjAwMF0sWyJlcSIsIiRrZXkiLCJzYWZcL2RlXC9uYW1lbGlzdFwvZTkyNFwvdWZ6Z3NlZFg5Ymxxxxxxxxxxx'),
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  signature?: string(name='Signature', description='Signature data.', example='7aXmkd2Z3oksCXOS9uvKlJuOKaY='),
  stsToken?: string(name='StsToken', description='Temporary identity credential.', example='tT44bMQxxxxxxxxxxxxxxx'),
}

model DescribeEventUploadPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEventUploadPolicyResponseBody(name='body'),
}

/**
 * @summary Batch Import Policy
 *
 * @param request DescribeEventUploadPolicyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeEventUploadPolicyResponse
 */
@context("describeEventUploadPolicyWithContext")
async function describeEventUploadPolicyWithOptions(request: DescribeEventUploadPolicyRequest, runtime: $RuntimeOptions): DescribeEventUploadPolicyResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeEventUploadPolicy',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Batch Import Policy
 *
 * @param request DescribeEventUploadPolicyRequest
 * @return DescribeEventUploadPolicyResponse
 */
async function describeEventUploadPolicy(request: DescribeEventUploadPolicyRequest): DescribeEventUploadPolicyResponse {
  var runtime = new $RuntimeOptions{};
  return describeEventUploadPolicyWithOptions(request, runtime);
}

model DescribeEventVariableListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. The values are: - **zh**: Chinese - **en**: English', example='zh'),
  createType?: string(name='createType', description='Create Type.', example='NORMAL'),
  filterDTO?: string(name='filterDTO', description='Filter object.', example='{
    "type": "EXPRESSION",
    "name": "ex_NgR6nDVD821c"
}'),
  refObjId?: string(name='refObjId', description='Associated event eventCode.

This parameter is required.', example='de_awkhwh0314'),
  refObjType?: string(name='refObjType', description='Association Type.

This parameter is required.', example='EVENT'),
  regId?: string(name='regId', description='Region Code.', example='cn-hangzhou'),
  type?: string(name='type', description='type.', example='NATIVE'),
}

model DescribeEventVariableListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    actions?: [ 
      {
        code?: string(name='code', description='Variable code.', example='deAddResult'),
        dataDisplay?: string(name='dataDisplay', description='Data distribution display in JSON format. This field is not returned for this type of variable.', example='This type does not have this field'),
        defineId?: string(name='defineId', description='Variable definition ID. This type of variable does not return this field.', example='This type does not have this field'),
        description?: string(name='description', description='Description information.', example='决策结果'),
        displayType?: string(name='displayType', description='Display type and group label.', example='ACTION'),
        expressionTitle?: string(name='expressionTitle', description='Expression display. This type of variable does not return this field.', example='This type does not have this field'),
        favoriteFlag?: boolean(name='favoriteFlag', description='Favorite identifier.', example='false'),
        fieldDetail?: string(name='fieldDetail', description='Details of the field pool. This type of variable does not return this field.', example='This type does not have this field'),
        fieldRank?: int32(name='fieldRank', description='Field sorting.', example='0'),
        fieldSource?: string(name='fieldSource', description='Source of the field. This type of variable does not return this field.', example='This type does not have this field'),
        fieldType?: string(name='fieldType', description='Field type. This field is not returned for this type of variable.', example='This type does not have this field'),
        id?: long(name='id', description='Primary key ID.', example='3144'),
        inputFieldType?: string(name='inputFieldType', description='Input type of the parameter.', example='STRING'),
        inputRequired?: string(name='inputRequired', description='Required parameter. This type of variable does not return this field.', example='This type does not have this field'),
        inputs?: string(name='inputs', description='Input parameters. This field is not returned for this type of variable.', example='This type does not have this field'),
        name?: string(name='name', description='Variable name.', example='__addDeResult__'),
        outlier?: string(name='outlier', description='Anomaly value. This field is not returned for this type of variable.', example='This type does not have this field'),
        outputThreshold?: {
          maxValue?: double(name='maxValue', description='Maximum value.', example='10'),
          minValue?: double(name='minValue', description='Minimum value.', example='1'),
        }(name='outputThreshold', description='Output value threshold.'),
        parentName?: string(name='parentName', description='Parent node. This field is not returned for this type of variable.', example='This type does not have this field'),
        sourceType?: string(name='sourceType', description='Source type.', example='SAF'),
        title?: string(name='title', description='Title.', example='决策结果'),
        type?: string(name='type', description='Variable type.', example='ACTION'),
        variableVelocity?: {
          iv?: string(name='iv', description='iv value. This type of variable does not return this field.', example='This type does not have this field'),
        }(name='variableVelocity', description='Variable metric information. This field is not returned for this type of variable.'),
        xLabel?: string(name='xLabel', description='x label. This type of variable does not return this field.', example='This type does not have this field'),
        yLabel?: string(name='yLabel', description='y label. This type of variable does not return this field.', example='This type does not have this field'),
      }
    ](name='actions', description='Action variable.'),
    deviceVariables?: [ 
      {
        code?: string(name='code', description='Variable code.', example='queryPhoneSimulatorInfo(deviceToken)?.deviceName'),
        dataDisplay?: string(name='dataDisplay', description='Data distribution display in JSON format. This field is not returned for this type of variable.', example='This type does not have this field'),
        defineId?: string(name='defineId', description='Variable definition ID. This type of variable does not return this field.', example='This type does not have this field'),
        description?: string(name='description', description='Description information.', example='设备信息-设备名称'),
        displayType?: string(name='displayType', description='The display type and grouping label.', example='DEVICE'),
        expressionTitle?: string(name='expressionTitle', description='The display value of the calculation expression. This field is not returned for this type of variable.', example='This type does not have this field'),
        favoriteFlag?: boolean(name='favoriteFlag', description='The favorite flag.', example='false'),
        fieldDetail?: string(name='fieldDetail', description='The detailed information of the field in the field pool. This field is not returned for this type of variable.', example='This type does not have this field'),
        fieldRank?: int32(name='fieldRank', description='The field rank.', example='0'),
        fieldSource?: string(name='fieldSource', description='The source of the field. This field is not returned for this type of variable.', example='This type does not have this field'),
        fieldType?: string(name='fieldType', description='Field type.', example='STRING'),
        id?: long(name='id', description='Primary key ID.', example='41'),
        inputFieldType?: string(name='inputFieldType', description='The input type of the parameter. This field is not returned for this type of variable.', example='This type does not have this field'),
        inputRequired?: string(name='inputRequired', description='The required parameter. This field is not returned for this type of variable.', example='This type does not have this field'),
        inputs?: string(name='inputs', description='Input for the variable. This field is not returned for this type of variable.', example='This type does not have this field'),
        name?: string(name='name', description='Variable name.', example='__device_name__'),
        outlier?: string(name='outlier', description='The outlier value. This field is not returned for this type of variable.', example='This type does not have this field'),
        outputThreshold?: {
          maxValue?: double(name='maxValue', description='The minimum value.', example='10'),
          minValue?: double(name='minValue', description='The minimum value.', example='1'),
        }(name='outputThreshold', description='The output value threshold.'),
        parentName?: string(name='parentName', description='Parent node. This field is not returned for this type of variable.', example='This type does not have this field'),
        sourceType?: string(name='sourceType', description='The source type.', example='SAF'),
        title?: string(name='title', description='Title.', example='设备信息-设备名称-deviceName'),
        type?: string(name='type', description='Variable type.', example='DEVICE'),
        variableVelocity?: {
          iv?: string(name='iv', description='The IV value. This field is not returned for this type of variable.', example='This type does not have this field'),
        }(name='variableVelocity', description='The variable metric information. This field is not returned for this type of variable.'),
        xLabel?: string(name='xLabel', description='The X label. This field is not returned for this type of variable.', example='This type does not have this field'),
        yLabel?: string(name='yLabel', description='The Y label. This field is not returned for this type of variable.', example='This type does not have this field'),
      }
    ](name='deviceVariables', description='Device variable.'),
    expressionVariables?: [ 
      {
        code?: string(name='code', description='The code of the variable.', example='deInvokeSelfVariable(390397)'),
        dataDisplay?: string(name='dataDisplay', description='Data distribution display, in JSON format. This field is not returned for this type of variable.', example='This type does not have this field'),
        defineId?: string(name='defineId', description='The definition ID of the variable. This field is not returned for this type of variable.', example='This type does not have this field'),
        description?: string(name='description', description='The description of the variable.', example='获取手机号前7位'),
        displayType?: string(name='displayType', description='The display type and grouping label.', example='EXPRESSION'),
        expressionTitle?: string(name='expressionTitle', description='The display value of the calculation expression.', example='@testaaa +1'),
        favoriteFlag?: boolean(name='favoriteFlag', description='The favorite flag.', example='false'),
        fieldDetail?: string(name='fieldDetail', description='The detailed information of the field in the field pool. This field is not returned for this type of variable.', example='This type does not have this field'),
        fieldRank?: int32(name='fieldRank', description='The field rank.', example='0'),
        fieldSource?: string(name='fieldSource', description='The source of the field. This field is not returned for this type of variable.', example='This type does not have this field'),
        fieldType?: string(name='fieldType', description='The input type of the variable.', example='STRING'),
        id?: long(name='id', description='Primary key ID.', example='3148'),
        inputFieldType?: string(name='inputFieldType', description='The input type of the parameter. This field is not returned for this type of variable.', example='This type does not have this field'),
        inputRequired?: string(name='inputRequired', description='The required parameter. This field is not returned for this type of variable.', example='This type does not have this field'),
        inputs?: string(name='inputs', description='Multiple input parameters separated by commas. This field is not returned for this type of variable.', example='This type does not have this field'),
        name?: string(name='name', description='The name of the variable.', example='ex_w2yIClHCc150'),
        outlier?: string(name='outlier', description='The outlier value.', example='-1'),
        outputThreshold?: {
          maxValue?: double(name='maxValue', description='The maximum value.', example='10'),
          minValue?: double(name='minValue', description='The minimum value.', example='1'),
        }(name='outputThreshold', description='The output value threshold.'),
        parentName?: string(name='parentName', description='The parent node. This field is not returned for this type of variable.', example='This type does not have this field'),
        sourceType?: string(name='sourceType', description='The source type.', example='SAF'),
        title?: string(name='title', description='Title.', example='获取手机号前7位'),
        type?: string(name='type', description='The type of the variable.', example='EXPRESSION'),
        variableVelocity?: {
          iv?: string(name='iv', description='The IV value. This field is not returned for this type of variable.', example='This type does not have this field'),
        }(name='variableVelocity', description='The variable metric information. This field is not returned for this type of variable.'),
        xLabel?: string(name='xLabel', description='The X label. This field is not returned for this type of variable.', example='This type does not have this field'),
        yLabel?: string(name='yLabel', description='The Y label. This field is not returned for this type of variable.', example='This type does not have this field'),
      }
    ](name='expressionVariables', description='Custom variable.'),
    favoriteVariables?: [ 
      {
        code?: string(name='code', description='Variable code.', example='deFunctionProcess(ip,\\\\"isIp\\\\")'),
        dataDisplay?: string(name='dataDisplay', description='Data distribution display in JSON format. This field is not returned for this type of variable.', example='This type does not have this field'),
        defineId?: string(name='defineId', description='Variable definition ID.', example='16'),
        description?: string(name='description', description='Description of the variable.', example='判断是否符合IPv4标准'),
        displayType?: string(name='displayType', description='Display type and group label.', example='SYSTEM_BIND'),
        expressionTitle?: string(name='expressionTitle', description='Expression display value. This type of variable does not return this field.', example='This type does not have this field'),
        favoriteFlag?: boolean(name='favoriteFlag', description='Favorite identifier.', example='false'),
        fieldDetail?: string(name='fieldDetail', description='Details of the field pool. This type of variable does not return this field.', example='This type does not have this field'),
        fieldRank?: int32(name='fieldRank', description='Field sorting.', example='0'),
        fieldSource?: string(name='fieldSource', description='Source of the field. This type of variable does not return this field.', example='This type does not have this field'),
        fieldType?: string(name='fieldType', description='Field type.', example='BOOLEAN'),
        id?: long(name='id', description='Primary key ID.', example='34'),
        inputFieldType?: string(name='inputFieldType', description='Input type of the parameter. This field is not returned for this type of variable.', example='This type does not have this field'),
        inputRequired?: string(name='inputRequired', description='Required parameter. This field is not returned for this type of variable.', example='This type does not have this field'),
        inputs?: string(name='inputs', description='Input parameters should be separated by commas. Some variables may not have this field.', example='ip'),
        name?: string(name='name', description='Variable name.', example='__isIpAddressV4__'),
        outlier?: string(name='outlier', description='Anomaly value. This field is not returned for this type of variable.', example='This type does not have this field'),
        outputThreshold?: {
          maxValue?: double(name='maxValue', description='Maximum value.', example='10'),
          minValue?: double(name='minValue', description='Minimum value.', example='1'),
        }(name='outputThreshold', description='Output value threshold.'),
        parentName?: string(name='parentName', description='Parent node. This field is not returned for this type of variable.', example='This type does not have this field'),
        sourceType?: string(name='sourceType', description='Source type.', example='SAF'),
        title?: string(name='title', description='Title.', example='IP是否符合IPV4格式'),
        type?: string(name='type', description='Variable type.', example='SYSTEM_BIND'),
        variableVelocity?: {
          iv?: string(name='iv', description='iv value. This type of variable does not return this field.', example='This type does not have this field'),
        }(name='variableVelocity', description='Variable metric information. This field is not returned for this type of variable.'),
        xLabel?: string(name='xLabel', description='x label. This type of variable does not return this field.', example='This type does not have this field'),
        yLabel?: string(name='yLabel', description='y label. This type of variable does not return this field.', example='This type does not have this field'),
      }
    ](name='favoriteVariables', description='Favorite variables.'),
    middleVariables?: [ 
      {
        code?: string(name='code', description='Variable code.', example='mid'),
        dataDisplay?: string(name='dataDisplay', description='Data distribution display in JSON format. This field is not returned for this type of variable.', example='This type does not have this field'),
        defineId?: string(name='defineId', description='Variable definition ID.', example='register'),
        description?: string(name='description', description='Variable description.', example='description'),
        displayType?: string(name='displayType', description='Display type and group label.', example='MIDDLE'),
        expressionTitle?: string(name='expressionTitle', description='Calculate the display value of the expression. This type of variable does not return this field.', example='This type does not have this field'),
        favoriteFlag?: boolean(name='favoriteFlag', description='Favorite identifier.', example='false'),
        fieldDetail?: string(name='fieldDetail', description='Details of the field pool. This type of variable does not return this field.', example='This type does not have this field'),
        fieldRank?: int32(name='fieldRank', description='Field sorting.', example='0'),
        fieldSource?: string(name='fieldSource', description='Variable source.', example='DEFAULT'),
        fieldType?: string(name='fieldType', description='Field type.', example='STRING'),
        id?: long(name='id', description='Primary key ID.', example='49'),
        inputFieldType?: string(name='inputFieldType', description='Input field type, indicating the type of input parameters, mainly used for function classification. This type of variable does not return this field.', example='This type does not have this field'),
        inputRequired?: string(name='inputRequired', description='Required parameter. This field is not returned for this type of variable.', example='This type does not have this field'),
        inputs?: string(name='inputs', description='Input of the variable.', example='This type does not have this field'),
        name?: string(name='name', description='Variable name.', example='mid'),
        outlier?: string(name='outlier', description='Outlier value. This field is not returned for this type of variable.', example='This type does not have this field'),
        outputThreshold?: {
          maxValue?: double(name='maxValue', description='Maximum value.', example='10'),
          minValue?: double(name='minValue', description='Minimum value.', example='0'),
        }(name='outputThreshold', description='Output value threshold.'),
        parentName?: string(name='parentName', description='Parent node. This field is not returned for this type of variable.', example='This type does not have this field'),
        sourceType?: string(name='sourceType', description='Source type.', example='SAF'),
        title?: string(name='title', description='Title.', example='midVaribale'),
        type?: string(name='type', description='Variable type.', example='MIDDLE'),
        variableVelocity?: {
          iv?: string(name='iv', description='id value. This type of variable does not return this field.', example='This type does not have this field'),
        }(name='variableVelocity', description='Variable metric information. This type of variable does not return this field.'),
        xLabel?: string(name='xLabel', description='x label. This type of variable does not return this field.', example='This type does not have this field'),
        yLabel?: string(name='yLabel', description='y label. This type of variable does not return this field.', example='This type does not have this field'),
      }
    ](name='middleVariables', description='Intermediate variable return object.'),
    modelVariables?: [ 
      {
        code?: string(name='code', description='The code of the model variable.', example='getAIData(model)'),
        dataDisplay?: string(name='dataDisplay', description='Data distribution display, in JSON format. This field is not returned for this type of variable.', example='This type does not have this field'),
        defineId?: string(name='defineId', description='The definition ID of the model variable. This field is not returned for this type of variable.', example='This type does not have this field'),
        description?: string(name='description', description='The description of the model variable.', example='BL_t_show'),
        displayType?: string(name='displayType', description='The display type and grouping label.', example='MODEL'),
        expressionTitle?: string(name='expressionTitle', description='The display value of the calculation expression. This field is not returned for this type of variable.', example='This type does not have this field'),
        favoriteFlag?: boolean(name='favoriteFlag', description='The favorite flag.', example='false'),
        fieldDetail?: string(name='fieldDetail', description='The detailed information of the field in the field pool. This field is not returned for this type of variable.', example='This type does not have this field'),
        fieldRank?: int32(name='fieldRank', description='The field rank.', example='0'),
        fieldSource?: string(name='fieldSource', description='The source of the field. This field is not returned for this type of variable.', example='This type does not have this field'),
        fieldType?: string(name='fieldType', description='The type of the field.', example='DOUBLE'),
        id?: long(name='id', description='The primary key ID of the model variable.', example='43'),
        inputFieldType?: string(name='inputFieldType', description='The input type of the parameter. This field is not returned for this type of variable.', example='This type does not have this field'),
        inputRequired?: string(name='inputRequired', description='The required parameter. This field is not returned for this type of variable.', example='This type does not have this field'),
        inputs?: string(name='inputs', description='Multiple input parameters separated by commas. This field is not returned for this type of variable.', example='This type does not have this field'),
        name?: string(name='name', description='The name of the model variable.', example='mo_qbbyf33o66f2'),
        outlier?: string(name='outlier', description='The outlier value. This field is not returned for this type of variable.', example='This type does not have this field'),
        outputThreshold?: {
          maxValue?: double(name='maxValue', description='The maximum value.', example='10'),
          minValue?: double(name='minValue', description='The minimum value.', example='1'),
        }(name='outputThreshold', description='The output value threshold.'),
        parentName?: string(name='parentName', description='The parent node. This field is not returned for this type of variable.', example='This type does not have this field'),
        sourceType?: string(name='sourceType', description='The source type.', example='SAF'),
        title?: string(name='title', description='The title of the model variable.', example='BL_t_show'),
        type?: string(name='type', description='The type of the model variable.', example='MODEL'),
        variableVelocity?: {
          iv?: string(name='iv', description='The IV value. This field is not returned for this type of variable.', example='This type does not have this field'),
        }(name='variableVelocity', description='The variable metric information. This field is not returned for this type of variable.'),
        xLabel?: string(name='xLabel', description='The X label. This field is not returned for this type of variable.', example='This type does not have this field'),
        yLabel?: string(name='yLabel', description='The Y label. This field is not returned for this type of variable.', example='This type does not have this field'),
      }
    ](name='modelVariables', description='An array of model variables.'),
    nameList?: [ 
      {
        code?: string(name='code', description='Variable code.', example='nl_UN8otElLb490'),
        dataDisplay?: string(name='dataDisplay', description='Data distribution display in JSON format. This field is not currently returned.', example='This type does not have this field'),
        defineId?: string(name='defineId', description='Variable definition ID. This type of variable does not return this field.', example='This type does not have this field'),
        description?: string(name='description', description='Description information.', example='描述'),
        displayType?: string(name='displayType', description='Display type and group label.', example='NAME_LIST'),
        expressionTitle?: string(name='expressionTitle', description='Calculate the expression display value. This type of variable does not return this field.', example='This type does not have this field'),
        favoriteFlag?: boolean(name='favoriteFlag', description='Favorite identifier.', example='false'),
        fieldDetail?: string(name='fieldDetail', description='Details of the field pool. This type of variable does not return this field.', example='This type does not have this field'),
        fieldRank?: int32(name='fieldRank', description='Field sorting.', example='0'),
        fieldSource?: string(name='fieldSource', description='Source of the field. This type of variable does not return this field.', example='This type does not have this field'),
        fieldType?: string(name='fieldType', description='Field type. This field is not returned for this type of variable.', example='This type does not have this field'),
        id?: long(name='id', description='Primary key ID.', example='34'),
        inputFieldType?: string(name='inputFieldType', description='Input type of the parameter. This field is not returned for this type of variable.', example='This type does not have this field'),
        inputRequired?: string(name='inputRequired', description='Required parameter. This field is not returned for this type of variable.', example='This type does not have this field'),
        inputs?: string(name='inputs', description='Input parameters. This field is not returned for this type of variable.', example='This type does not have this field'),
        name?: string(name='name', description='Variable name.', example='nl_UN8otElLb490'),
        outlier?: string(name='outlier', description='Outlier value. This field is not returned for this type of variable.', example='This type does not have this field'),
        outputThreshold?: {
          maxValue?: double(name='maxValue', description='Maximum value.', example='10'),
          minValue?: double(name='minValue', description='Minimum value.', example='1'),
        }(name='outputThreshold', description='Output value threshold.'),
        parentName?: string(name='parentName', description='Parent node. This field is not returned currently.', example='This type does not have this field'),
        sourceType?: string(name='sourceType', description='Source type.', example='SAF'),
        title?: string(name='title', description='Title.', example='白名单'),
        type?: string(name='type', description='Variable type.', example='NAME_LIST'),
        variableVelocity?: {
          iv?: string(name='iv', description='iv value. This type of variable does not return this field.', example='This type does not have this field'),
        }(name='variableVelocity', description='Variable metric information. This field is not returned for this type of variable.'),
        xLabel?: string(name='xLabel', description='x label. This type of variable does not return this field.', example='This type does not have this field'),
        yLabel?: string(name='yLabel', description='y label. This type of variable does not return this field.', example='This type does not have this field'),
      }
    ](name='nameList', description='List of name variables.'),
    nativeVariableFunctions?: [ 
      {
        code?: string(name='code', description='Variable code.', example='getHourOfTimestamp({data})'),
        dataDisplay?: string(name='dataDisplay', description='Data distribution display in JSON format. This field is not returned for this type of variable.', example='This type does not have this field'),
        defineId?: string(name='defineId', description='Variable definition ID. This type of variable does not return this field.', example='This type does not have this field'),
        description?: string(name='description', description='Description information.', example='时间戳，可以是秒或者毫秒'),
        displayType?: string(name='displayType', description='Display type and group label.', example='FUNC'),
        expressionTitle?: string(name='expressionTitle', description='Calculate the expression display value. This field is not returned for this type of variable.', example='This type does not have this field'),
        favoriteFlag?: boolean(name='favoriteFlag', description='Favorite identifier.', example='false'),
        fieldDetail?: string(name='fieldDetail', description='Details of the field pool. This type of variable does not return this field.', example='This type does not have this field'),
        fieldRank?: int32(name='fieldRank', description='Field sorting.', example='0'),
        fieldSource?: string(name='fieldSource', description='Source of the field. This type of variable does not return this field.', example='This type does not have this field'),
        fieldType?: string(name='fieldType', description='Variable return type.', example='LONG'),
        id?: long(name='id', description='Primary key ID.', example='93'),
        inputFieldType?: string(name='inputFieldType', description='The input type of the parameter.', example='DATE'),
        inputRequired?: string(name='inputRequired', description='Required parameter. This field is not returned for this type of variable.', example='This type does not have this field'),
        inputs?: string(name='inputs', description='Input field. This type of variable does not return this field.', example='This type does not have this field'),
        name?: string(name='name', description='Variable name.', example='__getHourOfTimestamp__'),
        outlier?: string(name='outlier', description='Exception value. This type of variable does not return this field.', example='This type does not have this field'),
        outputThreshold?: {
          maxValue?: double(name='maxValue', description='Maximum value.', example='10'),
          minValue?: double(name='minValue', description='Minimum value.', example='0'),
        }(name='outputThreshold', description='Output value threshold.'),
        parentName?: string(name='parentName', description='Parent node. This field is not returned for this type of variable.', example='This type does not have this field'),
        sourceType?: string(name='sourceType', description='Source type.', example='SAF'),
        title?: string(name='title', description='Variable title.', example='根据时间戳获取小时'),
        type?: string(name='type', description='Variable type.', example='FUNC'),
        variableVelocity?: {
          iv?: string(name='iv', description='iv value. This type of variable does not return this field.', example='This type does not have this field'),
        }(name='variableVelocity', description='Variable metric information. This type of variable does not return this field.'),
        xLabel?: string(name='xLabel', description='x label. This type of variable does not return this field.', example='This type does not have this field'),
        yLabel?: string(name='yLabel', description='y label. This type of variable does not return this field.', example='This type does not have this field'),
      }
    ](name='nativeVariableFunctions', description='List of available functions for the original variable.'),
    nativeVariables?: [ 
      {
        code?: string(name='code', description='variable code.', example='age'),
        dataDisplay?: string(name='dataDisplay', description='Data distribution display, in JSON format.', example='{}'),
        defineId?: string(name='defineId', description='Associated variable definition ID.', example='register'),
        description?: string(name='description', description='Variable description.', example='描述'),
        displayType?: string(name='displayType', description='Display type and group label.', example='NATIVE'),
        expressionTitle?: string(name='expressionTitle', description='Calculate expression display value.', example='无'),
        favoriteFlag?: boolean(name='favoriteFlag', description='Favorite Identifier.', example='true'),
        fieldDetail?: string(name='fieldDetail', description='Field pool field details.', example='无'),
        fieldRank?: int32(name='fieldRank', description='Field Sorting.', example='1'),
        fieldSource?: string(name='fieldSource', description='Variable source.', example='DEFINE'),
        fieldType?: string(name='fieldType', description='Field type.', example='STRING'),
        id?: long(name='id', description='Variable ID.', example='223'),
        inputFieldType?: string(name='inputFieldType', description='Input field type, indicating the type of input parameters, mainly used for function categorization.', example='STRING'),
        inputRequired?: string(name='inputRequired', description='Required parameters.', example='无'),
        inputs?: string(name='inputs', description='Input of the variable. Event field is not present.', example='无'),
        name?: string(name='name', description='variable name.', example='age'),
        outlier?: string(name='outlier', description='outlier.', example='无'),
        outputThreshold?: {
          maxValue?: double(name='maxValue', description='Maximum value.', example='10'),
          minValue?: double(name='minValue', description='Minimum value.', example='1'),
        }(name='outputThreshold', description='Output score threshold.'),
        parentName?: string(name='parentName', description='Parent name.', example='parentName'),
        sourceType?: string(name='sourceType', description='Variable source type.', example='SAF'),
        title?: string(name='title', description='Variable name.', example='年龄'),
        type?: string(name='type', description='Variable type.', example='NATIVE'),
        variableVelocity?: {
          iv?: string(name='iv', description='iv value.', example='无'),
        }(name='variableVelocity', description='Variable indicator information.'),
        xLabel?: string(name='xLabel', description='x label.', example='x'),
        yLabel?: string(name='yLabel', description='y label.', example='y'),
      }
    ](name='nativeVariables', description='List of event fields.'),
    queryVariables?: [ 
      {
        code?: string(name='code', description='The code of the query variable.', example='deInvokeQueryVariable(376773)'),
        dataDisplay?: string(name='dataDisplay', description='Data distribution display, in JSON format. This field is not returned for this type of variable.', example='This type does not have this field'),
        defineId?: string(name='defineId', description='The definition ID of the query variable. This field is not returned for this type of variable.', example='This type does not have this field'),
        description?: string(name='description', description='The description of the query variable.', example='年龄计算'),
        displayType?: string(name='displayType', description='The display type and grouping label.', example='QUERY_EXPRESSION'),
        expressionTitle?: string(name='expressionTitle', description='The display value of the calculation expression. This field is not returned for this type of variable.', example='SELECT  AVG( $source )\\\\nFROM testCase\\\\nWHERE  $age > 0'),
        favoriteFlag?: boolean(name='favoriteFlag', description='The favorite flag.', example='false'),
        fieldDetail?: string(name='fieldDetail', description='The detailed information of the field in the field pool. This field is not returned for this type of variable.', example='This type does not have this field'),
        fieldRank?: int32(name='fieldRank', description='The field rank.', example='0'),
        fieldSource?: string(name='fieldSource', description='The source of the field. This field is not returned for this type of variable.', example='This type does not have this field'),
        fieldType?: string(name='fieldType', description='The type of the field.', example='STRING'),
        id?: long(name='id', description='The primary key ID of the query variable.', example='3148'),
        inputFieldType?: string(name='inputFieldType', description='The input type of the parameter. This field is not returned for this type of variable.', example='This type does not have this field'),
        inputRequired?: string(name='inputRequired', description='The required parameter. This field is not returned for this type of variable.', example='This type does not have this field'),
        inputs?: string(name='inputs', description='Multiple input parameters separated by commas. This field is not returned for this type of variable.', example='This type does not have this field'),
        name?: string(name='name', description='The name of the query variable.', example='ex_qWtKgCox350f'),
        outlier?: string(name='outlier', description='The outlier value.', example='SYS_ERROR'),
        outputThreshold?: {
          maxValue?: double(name='maxValue', description='The maximum value.', example='10'),
          minValue?: double(name='minValue', description='The minimum value.', example='1'),
        }(name='outputThreshold', description='The output value threshold.'),
        parentName?: string(name='parentName', description='The parent node. This field is not returned for this type of variable.', example='This type does not have this field'),
        sourceType?: string(name='sourceType', description='The source type.', example='DATA_SOURCE'),
        title?: string(name='title', description='The title of the query variable. The title of the query variable.', example='年龄计算'),
        type?: string(name='type', description='The type of the query variable.', example='QUERY_EXPRESSION'),
        variableVelocity?: {
          iv?: string(name='iv', description='The IV value. This field is not returned for this type of variable.', example='This type does not have this field'),
        }(name='variableVelocity', description='The variable metric information. This field is not returned for this type of variable.'),
        xLabel?: string(name='xLabel', description='The X label. This field is not returned for this type of variable.', example='This type does not have this field'),
        yLabel?: string(name='yLabel', description='The Y label. This field is not returned for this type of variable.', example='This type does not have this field'),
      }
    ](name='queryVariables', description='An array of custom query variables.'),
    selfVariables?: [ 
      {
        code?: string(name='code', description='Variable code.', example='deReadVelocity(hitRules,\\\\"dUd5ioJ8014\\\\",1,\\\\"MO\\\\",0,true,\\\\"SUM\\\\")'),
        dataDisplay?: string(name='dataDisplay', description='Data distribution display, in JSON format. This field is not returned for this type of variable.', example='This type does not have this field'),
        defineId?: string(name='defineId', description='Variable definition ID. Only returned for custom system variables.', example='49'),
        description?: string(name='description', description='Description of the variable.', example='变量的描述信息'),
        displayType?: string(name='displayType', description='Display type and group label.', example='SELF_BIND'),
        expressionTitle?: string(name='expressionTitle', description='Expression name.', example='@IP地址'),
        favoriteFlag?: boolean(name='favoriteFlag', description='Favorite identifier.', example='false'),
        fieldDetail?: string(name='fieldDetail', description='Details of the field pool. This type of variable does not return this field.', example='This type does not have this field'),
        fieldRank?: int32(name='fieldRank', description='Field sorting.', example='0'),
        fieldSource?: string(name='fieldSource', description='Source of the field. This type of variable does not return this field.', example='This type does not have this field'),
        fieldType?: string(name='fieldType', description='Field type.', example='STRING'),
        id?: long(name='id', description='Variable ID.', example='3174'),
        inputFieldType?: string(name='inputFieldType', description='The input type of the parameter. This field is not returned for this type of variable.', example='This type does not have this field'),
        inputRequired?: string(name='inputRequired', description='Required parameter. This field is not returned for this type of variable.', example='This type does not have this field'),
        inputs?: string(name='inputs', description='Input parameters. Only returned when custom system variables are defined.', example='ip'),
        name?: string(name='name', description='Variable name.', example='ex_isvspbF2c7ac'),
        outlier?: string(name='outlier', description='Anomaly value. Returned when the variable is a custom variable (type= EXPRESSION).', example='-1'),
        outputThreshold?: {
          maxValue?: double(name='maxValue', description='Maximum value.', example='10'),
          minValue?: double(name='minValue', description='Minimum value.', example='1'),
        }(name='outputThreshold', description='Output value threshold.'),
        parentName?: string(name='parentName', description='Parent node. This field is not returned currently.', example='This type does not have this field'),
        sourceType?: string(name='sourceType', description='Source type.', example='SAF'),
        title?: string(name='title', description='Title.', example='获取手机号前七位'),
        type?: string(name='type', description='Variable type.', example='EXPRESSION'),
        variableVelocity?: {
          iv?: string(name='iv', description='iv value. This type of variable does not return this field.', example='This type does not have this field'),
        }(name='variableVelocity', description='Variable metric information. This field is not returned for this type of variable.'),
        xLabel?: string(name='xLabel', description='x label. This type of variable does not return this field.', example='This type does not have this field'),
        yLabel?: string(name='yLabel', description='y label. This type of variable does not return this field.', example='This type does not have this field'),
      }
    ](name='selfVariables', description='Custom variables (custom variables, cumulative variables, custom system variables).'),
    sysVariables?: [ 
      {
        code?: string(name='code', description='Variable code.', example='parseIpV2(ip)?.cityId'),
        dataDisplay?: string(name='dataDisplay', description='Data distribution display, in JSON format. This field is not returned for this type of variable.', example='This type does not have this field'),
        defineId?: string(name='defineId', description='ID of the bound variable definition.', example='2488'),
        description?: string(name='description', description='Description of the variable.', example='通过IP地址库解析IP所在的城市Code，例如，输入“42.120.74.211”，经过该变量运算，输出“330100”。'),
        displayType?: string(name='displayType', description='Display type and group label.', example='SYSTEM_BIND'),
        expressionTitle?: string(name='expressionTitle', description='Calculate the expression display value. This type of variable does not return this field.', example='This type does not have this field'),
        favoriteFlag?: boolean(name='favoriteFlag', description='Favorite identifier.', example='false'),
        fieldDetail?: string(name='fieldDetail', description='Details of the field pool. This type of variable does not return this field.', example='This type does not have this field'),
        fieldRank?: int32(name='fieldRank', description='Field sorting.', example='0'),
        fieldSource?: string(name='fieldSource', description='Source of the field. This type of variable does not return this field.', example='This type does not have this field'),
        fieldType?: string(name='fieldType', description='Field type.', example='STRING'),
        id?: long(name='id', description='Variable ID.', example='3151'),
        inputFieldType?: string(name='inputFieldType', description='Input type of the parameter. This field is not returned for this type of variable.', example='This type does not have this field'),
        inputRequired?: string(name='inputRequired', description='Required parameter. This field is not returned for this type of variable.', example='This type does not have this field'),
        inputs?: string(name='inputs', description='Variable value input.', example='ip'),
        name?: string(name='name', description='Variable name.', example='__ipLocationCityCode__'),
        outlier?: string(name='outlier', description='Outlier value. This field is not returned for this type of variable.', example='This type does not have this field'),
        outputThreshold?: {
          maxValue?: double(name='maxValue', description='Maximum value.', example='10'),
          minValue?: double(name='minValue', description='Minimum value.', example='1'),
        }(name='outputThreshold', description='Output value threshold.'),
        parentName?: string(name='parentName', description='Parent name.', example='无'),
        sourceType?: string(name='sourceType', description='Source type.', example='SAF'),
        title?: string(name='title', description='Title.', example='IP所在地_城市Code'),
        type?: string(name='type', description='Variable type.', example='SYSTEM_BIND'),
        variableVelocity?: {
          iv?: string(name='iv', description='iv value. This type of variable does not return this field.', example='This type does not have this field'),
        }(name='variableVelocity', description='Variable metric information. This field is not returned for this type of variable.'),
        xLabel?: string(name='xLabel', description='x label. This type of variable does not return this field.', example='This type does not have this field'),
        yLabel?: string(name='yLabel', description='y label. This type of variable does not return this field.', example='This type does not have this field'),
      }
    ](name='sysVariables', description='System variables.'),
    thirdVariables?: map[string]any(name='thirdVariables', description='Other related variables.', example='{}'),
    velocityVariables?: [ 
      {
        code?: string(name='code', description='The code of the variable.', example='deReadVelocity(userId,\\\\"hFsEFUEe88a\\\\",1,\\\\"H\\\\",0,true,\\\\"COUNT\\\\")'),
        dataDisplay?: string(name='dataDisplay', description='Data distribution display, in JSON format. This field is not returned for this type of variable.', example='This type does not have this field'),
        defineId?: string(name='defineId', description='The definition ID of the variable. This field is not returned for this type of variable.', example='This type does not have this field'),
        description?: string(name='description', description='The description of the variable.', example='累计用户省份次数。'),
        displayType?: string(name='displayType', description='The display type and grouping label.', example='SELF_VELOCITY'),
        expressionTitle?: string(name='expressionTitle', description='The display value of the calculation expression. This field is not returned for this type of variable.', example='This type does not have this field'),
        favoriteFlag?: boolean(name='favoriteFlag', description='The favorite flag.', example='false'),
        fieldDetail?: string(name='fieldDetail', description='The detailed information of the field in the field pool. This field is not returned for this type of variable.', example='This type does not have this field'),
        fieldRank?: int32(name='fieldRank', description='The field rank.', example='0'),
        fieldSource?: string(name='fieldSource', description='The source of the field. This field is not returned for this type of variable.', example='This type does not have this field'),
        fieldType?: string(name='fieldType', description='The type of the field.', example='DOUBLE'),
        id?: long(name='id', description='The primary key ID.', example='3148'),
        inputFieldType?: string(name='inputFieldType', description='The input type of the parameter. This field is not returned for this type of variable.', example='This type does not have this field'),
        inputRequired?: string(name='inputRequired', description='The required parameter. This field is not returned for this type of variable.', example='This type does not have this field'),
        inputs?: string(name='inputs', description='Multiple input parameters separated by commas. This field is not returned for this type of variable.', example='This type does not have this field'),
        name?: string(name='name', description='The name of the variable.', example='hFsEFUEe88a'),
        outlier?: string(name='outlier', description='The outlier value. This field is not returned for this type of variable.', example='This type does not have this field'),
        outputThreshold?: {
          maxValue?: double(name='maxValue', description='The maximum value.', example='10'),
          minValue?: double(name='minValue', description='The minimum value.', example='1'),
        }(name='outputThreshold', description='The output value threshold.'),
        parentName?: string(name='parentName', description='The parent node. This field is not returned for this type of variable.', example='This type does not have this field'),
        sourceType?: string(name='sourceType', description='The source type.', example='SAF_SELF'),
        title?: string(name='title', description='The title of the variable.', example='累计用户省份次数'),
        type?: string(name='type', description='The type of the variable.', example='SELF_VELOCITY'),
        variableVelocity?: {
          iv?: string(name='iv', description='The IV value. This field is not returned for this type of variable.', example='This type does not have this field'),
        }(name='variableVelocity', description='The variable metric information. This field is not returned for this type of variable.'),
        xLabel?: string(name='xLabel', description='The X label. This field is not returned for this type of variable.', example='This type does not have this field'),
        yLabel?: string(name='yLabel', description='The Y label. This field is not returned for this type of variable.', example='This type does not have this field'),
      }
    ](name='velocityVariables', description='An array of accumulated variables.'),
  }(name='resultObject', description='Return object.'),
}

model DescribeEventVariableListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEventVariableListResponseBody(name='body'),
}

/**
 * @summary Query event variables
 *
 * @description Cumulative Variable List Query
 *
 * @param request DescribeEventVariableListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeEventVariableListResponse
 */
@context("describeEventVariableListWithContext")
async function describeEventVariableListWithOptions(request: DescribeEventVariableListRequest, runtime: $RuntimeOptions): DescribeEventVariableListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.createType)) {
    query['createType'] = request.createType;
  }
  if (!$isNull(request.filterDTO)) {
    query['filterDTO'] = request.filterDTO;
  }
  if (!$isNull(request.refObjId)) {
    query['refObjId'] = request.refObjId;
  }
  if (!$isNull(request.refObjType)) {
    query['refObjType'] = request.refObjType;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.type)) {
    query['type'] = request.type;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeEventVariableList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query event variables
 *
 * @description Cumulative Variable List Query
 *
 * @param request DescribeEventVariableListRequest
 * @return DescribeEventVariableListResponse
 */
async function describeEventVariableList(request: DescribeEventVariableListRequest): DescribeEventVariableListResponse {
  var runtime = new $RuntimeOptions{};
  return describeEventVariableListWithOptions(request, runtime);
}

model DescribeEventVariableTemplateBindRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages. Default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  inputs?: string(name='inputs', description='Input parameters, separated by commas if multiple.

This parameter is required.', example='age,ip'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  templateCode?: string(name='templateCode', description='Template code.', example='register'),
  type?: string(name='type', description='Type

This parameter is required.', example='NATIVE'),
}

model DescribeEventVariableTemplateBindResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    chargeVariables?: [ 
      {
        code?: string(name='code', description='Variable code', example='ip'),
        description?: string(name='description', description='Description of the variable.', example='描述'),
        fieldType?: string(name='fieldType', description='Field type.', example='STRING'),
        id?: long(name='id', description='Primary key ID', example='456'),
        name?: string(name='name', description='Variable name', example='ip'),
        title?: string(name='title', description='Title.', example='ip'),
        type?: string(name='type', description='Variable type.', example='NATIVE'),
      }
    ](name='chargeVariables', description='List of chargeable variables'),
    freeVariables?: [ 
      {
        code?: string(name='code', description='Variable code', example='age'),
        description?: string(name='description', description='Variable description.', example='描述'),
        fieldType?: string(name='fieldType', description='Field type.', example='STRING'),
        id?: long(name='id', description='Primary key ID', example='234'),
        name?: string(name='name', description='Variable name', example='age'),
        title?: string(name='title', description='Title.', example='年龄'),
        type?: string(name='type', description='Variable type.', example='NATIVE'),
      }
    ](name='freeVariables', description='List of free variables'),
    templateCode?: string(name='templateCode', description='Template code', example='register'),
    totalCount?: string(name='totalCount', description='Total count', example='38'),
  }(name='resultObject', description='Return object'),
}

model DescribeEventVariableTemplateBindResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEventVariableTemplateBindResponseBody(name='body'),
}

/**
 * @summary Query Event Template
 *
 * @param request DescribeEventVariableTemplateBindRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeEventVariableTemplateBindResponse
 */
@context("describeEventVariableTemplateBindWithContext")
async function describeEventVariableTemplateBindWithOptions(request: DescribeEventVariableTemplateBindRequest, runtime: $RuntimeOptions): DescribeEventVariableTemplateBindResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.inputs)) {
    query['inputs'] = request.inputs;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.templateCode)) {
    query['templateCode'] = request.templateCode;
  }
  if (!$isNull(request.type)) {
    query['type'] = request.type;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeEventVariableTemplateBind',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Event Template
 *
 * @param request DescribeEventVariableTemplateBindRequest
 * @return DescribeEventVariableTemplateBindResponse
 */
async function describeEventVariableTemplateBind(request: DescribeEventVariableTemplateBindRequest): DescribeEventVariableTemplateBindResponse {
  var runtime = new $RuntimeOptions{};
  return describeEventVariableTemplateBindWithOptions(request, runtime);
}

model DescribeEventVariableTemplateListRequest {
  lang?: string(name='Lang', description='Sets the language type for the request and response messages. The default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  inputs?: string(name='inputs', description='Input parameters, separated by commas.', example='age,ip'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  templateCode?: string(name='templateCode', description='Template code.', example='register'),
  type?: string(name='type', description='Template type.', example='NATIVE'),
}

model DescribeEventVariableTemplateListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: [ 
    {
      templateCode?: string(name='templateCode', description='Template code.', example='register'),
      templateName?: string(name='templateName', description='Template name.', example='注册模版'),
      variables?: [ 
        {
          code?: string(name='code', description='Variable code', example='age'),
          description?: string(name='description', description='Description information.', example='描述'),
          fieldType?: string(name='fieldType', description='Variable input type', example='STRING'),
          id?: long(name='id', description='Primary key ID', example='454'),
          name?: string(name='name', description='Variable name', example='age'),
          title?: string(name='title', description='Title.', example='年龄'),
          type?: string(name='type', description='Variable type.', example='NATIVE'),
        }
      ](name='variables', description='Variable list.'),
    }
  ](name='resultObject', description='Return object'),
}

model DescribeEventVariableTemplateListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEventVariableTemplateListResponseBody(name='body'),
}

/**
 * @summary Query Event Template
 *
 * @param request DescribeEventVariableTemplateListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeEventVariableTemplateListResponse
 */
@context("describeEventVariableTemplateListWithContext")
async function describeEventVariableTemplateListWithOptions(request: DescribeEventVariableTemplateListRequest, runtime: $RuntimeOptions): DescribeEventVariableTemplateListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.inputs)) {
    query['inputs'] = request.inputs;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.templateCode)) {
    query['templateCode'] = request.templateCode;
  }
  if (!$isNull(request.type)) {
    query['type'] = request.type;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeEventVariableTemplateList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Event Template
 *
 * @param request DescribeEventVariableTemplateListRequest
 * @return DescribeEventVariableTemplateListResponse
 */
async function describeEventVariableTemplateList(request: DescribeEventVariableTemplateListRequest): DescribeEventVariableTemplateListResponse {
  var runtime = new $RuntimeOptions{};
  return describeEventVariableTemplateListWithOptions(request, runtime);
}

model DescribeEventsVariableListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  createType?: string(name='createType', description='Creation type', example='NORMAL'),
  eventCodes?: string(name='eventCodes', description='Event code.

This parameter is required.', example='de_afghcf6411'),
  filterDTO?: string(name='filterDTO', description='Filter object', example='{\\\\"type\\\\":\\\\"EXPRESSION\\\\",\\\\"name\\\\":\\\\"ex_NgR6nDVD821c\\\\"}'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  scene?: string(name='scene', description='Applicable scene code

This parameter is required.', example='VELOCITY'),
}

model DescribeEventsVariableListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DescribeEventsVariableListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEventsVariableListResponseBody(name='body'),
}

/**
 * @summary Query Event Variables
 *
 * @param request DescribeEventsVariableListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeEventsVariableListResponse
 */
@context("describeEventsVariableListWithContext")
async function describeEventsVariableListWithOptions(request: DescribeEventsVariableListRequest, runtime: $RuntimeOptions): DescribeEventsVariableListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.createType)) {
    query['createType'] = request.createType;
  }
  if (!$isNull(request.eventCodes)) {
    query['eventCodes'] = request.eventCodes;
  }
  if (!$isNull(request.filterDTO)) {
    query['filterDTO'] = request.filterDTO;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.scene)) {
    query['scene'] = request.scene;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeEventsVariableList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Event Variables
 *
 * @param request DescribeEventsVariableListRequest
 * @return DescribeEventsVariableListResponse
 */
async function describeEventsVariableList(request: DescribeEventsVariableListRequest): DescribeEventsVariableListResponse {
  var runtime = new $RuntimeOptions{};
  return describeEventsVariableListWithOptions(request, runtime);
}

model DescribeExcuteNumRequest {
  code?: string(name='Code', description='Service code.

This parameter is required.', example='saf_all'),
  degree?: string(name='Degree', description='This field is currently unused and has no query significance.', example='暂时不需要传入'),
  endDate?: string(name='EndDate', description='End date, format yyyy-MM-dd, e.g., 2025-03-13.', example='2025-03-15'),
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  sourceIp?: string(name='SourceIp', description='Request source IP address.', example='220.250.21.83'),
  startDate?: string(name='StartDate', description='Start date, format yyyy-MM-dd, e.g., 2025-03-10.', example='2025-03-10'),
}

model DescribeExcuteNumResponseBody = {
  categories?: [ string ](name='Categories', description='Service category names.'),
  data?: [ string ](name='Data', description='Returned data.'),
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
}

model DescribeExcuteNumResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeExcuteNumResponseBody(name='body'),
}

/**
 * @summary Self-service call list.
 *
 * @param request DescribeExcuteNumRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeExcuteNumResponse
 */
@context("describeExcuteNumWithContext")
async function describeExcuteNumWithOptions(request: DescribeExcuteNumRequest, runtime: $RuntimeOptions): DescribeExcuteNumResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.code)) {
    query['Code'] = request.code;
  }
  if (!$isNull(request.degree)) {
    query['Degree'] = request.degree;
  }
  if (!$isNull(request.endDate)) {
    query['EndDate'] = request.endDate;
  }
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!$isNull(request.startDate)) {
    query['StartDate'] = request.startDate;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeExcuteNum',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Self-service call list.
 *
 * @param request DescribeExcuteNumRequest
 * @return DescribeExcuteNumResponse
 */
async function describeExcuteNum(request: DescribeExcuteNumRequest): DescribeExcuteNumResponse {
  var runtime = new $RuntimeOptions{};
  return describeExcuteNumWithOptions(request, runtime);
}

model DescribeExistNameRequest {
  lang?: string(name='Lang', description='Set the language type for request and response messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  name?: string(name='name', description='Variable name', example='age'),
  regId?: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou'),
}

model DescribeExistNameResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DescribeExistNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeExistNameResponseBody(name='body'),
}

/**
 * @summary Validate if the field name is duplicated (based on user\\"s organization)
 *
 * @param request DescribeExistNameRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeExistNameResponse
 */
@context("describeExistNameWithContext")
async function describeExistNameWithOptions(request: DescribeExistNameRequest, runtime: $RuntimeOptions): DescribeExistNameResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.name)) {
    query['name'] = request.name;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeExistName',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Validate if the field name is duplicated (based on user\\"s organization)
 *
 * @param request DescribeExistNameRequest
 * @return DescribeExistNameResponse
 */
async function describeExistName(request: DescribeExistNameRequest): DescribeExistNameResponse {
  var runtime = new $RuntimeOptions{};
  return describeExistNameWithOptions(request, runtime);
}

model DescribeExistSceneRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  sceneName?: string(name='SceneName', description='Scene name.', example='样本调度'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeExistSceneResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  data?: boolean(name='data', description='Data object', example='true'),
}

model DescribeExistSceneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeExistSceneResponseBody(name='body'),
}

/**
 * @summary Check if Scene Exists
 *
 * @param request DescribeExistSceneRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeExistSceneResponse
 */
@context("describeExistSceneWithContext")
async function describeExistSceneWithOptions(request: DescribeExistSceneRequest, runtime: $RuntimeOptions): DescribeExistSceneResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.sceneName)) {
    query['SceneName'] = request.sceneName;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeExistScene',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Check if Scene Exists
 *
 * @param request DescribeExistSceneRequest
 * @return DescribeExistSceneResponse
 */
async function describeExistScene(request: DescribeExistSceneRequest): DescribeExistSceneResponse {
  var runtime = new $RuntimeOptions{};
  return describeExistSceneWithOptions(request, runtime);
}

model DescribeExpressionVariableDetailRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  id?: long(name='id', description='Primary key ID

This parameter is required.', example='334'),
  regId?: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou'),
}

model DescribeExpressionVariableDetailResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: map[string]any(name='resultObject', description='Returned object', example='true'),
}

model DescribeExpressionVariableDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeExpressionVariableDetailResponseBody(name='body'),
}

/**
 * @summary Custom Variable Details
 *
 * @param request DescribeExpressionVariableDetailRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeExpressionVariableDetailResponse
 */
@context("describeExpressionVariableDetailWithContext")
async function describeExpressionVariableDetailWithOptions(request: DescribeExpressionVariableDetailRequest, runtime: $RuntimeOptions): DescribeExpressionVariableDetailResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.id)) {
    query['id'] = request.id;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeExpressionVariableDetail',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Custom Variable Details
 *
 * @param request DescribeExpressionVariableDetailRequest
 * @return DescribeExpressionVariableDetailResponse
 */
async function describeExpressionVariableDetail(request: DescribeExpressionVariableDetailRequest): DescribeExpressionVariableDetailResponse {
  var runtime = new $RuntimeOptions{};
  return describeExpressionVariableDetailWithOptions(request, runtime);
}

model DescribeExpressionVariableFunctionListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou'),
}

model DescribeExpressionVariableFunctionListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='6E8817D5-5354-5953-84B1-D98379F036DC'),
  resultObject?: [ 
    {
      description?: string(name='description', description='Description information.', example='描述'),
      key?: string(name='key', description='Function name', example='concat'),
      maxParamSize?: long(name='maxParamSize', description='Maximum number of parameters', example='4'),
      minParamSize?: long(name='minParamSize', description='Minimum number of parameters', example='2'),
      paramTypes?: string(name='paramTypes', description='Parameter types', example='*STRING'),
      redirect?: boolean(name='redirect', description='Whether it is directly invoked', example='true'),
      returnTypes?: string(name='returnTypes', description='Method return types', example='STRING'),
      value?: string(name='value', description='Function value', example='concat'),
    }
  ](name='resultObject', description='Return object'),
}

model DescribeExpressionVariableFunctionListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeExpressionVariableFunctionListResponseBody(name='body'),
}

/**
 * @summary Function List
 *
 * @param request DescribeExpressionVariableFunctionListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeExpressionVariableFunctionListResponse
 */
@context("describeExpressionVariableFunctionListWithContext")
async function describeExpressionVariableFunctionListWithOptions(request: DescribeExpressionVariableFunctionListRequest, runtime: $RuntimeOptions): DescribeExpressionVariableFunctionListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeExpressionVariableFunctionList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Function List
 *
 * @param request DescribeExpressionVariableFunctionListRequest
 * @return DescribeExpressionVariableFunctionListResponse
 */
async function describeExpressionVariableFunctionList(request: DescribeExpressionVariableFunctionListRequest): DescribeExpressionVariableFunctionListResponse {
  var runtime = new $RuntimeOptions{};
  return describeExpressionVariableFunctionListWithOptions(request, runtime);
}

model DescribeExpressionVariablePageRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  currentPage?: string(name='currentPage', description='Current page number.

This parameter is required.', example='1'),
  eventCode?: string(name='eventCode', description='Event code.', example='de_aamexg3015,de_aamexg3342'),
  outputs?: string(name='outputs', description='Variable return type.', example='STRING'),
  pageSize?: string(name='pageSize', description='Page size, with a default value of 10.

This parameter is required.', example='10'),
  regId?: string(name='regId', description='Region code.

This parameter is required.', example='cn-hangzhou'),
  status?: string(name='status', description='Status.', example='ENABLE'),
  value?: string(name='value', description='Variable name/description.', example='自定义变量'),
}

model DescribeExpressionVariablePageResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, with a default value of 10.', example='10'),
  resultObject?: [ 
    {
      description?: string(name='description', description='Description information.', example='变量描述'),
      eventName?: string(name='eventName', description='Event name.', example='注册风险'),
      gmtModified?: long(name='gmtModified', description='Modification time.', example='1565701886000'),
      id?: long(name='id', description='Primary key of custom variable.', example='2793'),
      name?: string(name='name', description='Query variable name.', example='ex_OERlw0Zqfb23'),
      outputs?: string(name='outputs', description='Variable return type.', example='DOUBLE'),
      ruleList?: [ string ](name='ruleList', description='Associated Strategies.'),
      status?: string(name='status', description='Status.', example='ENABLE'),
      title?: string(name='title', description='Title.', example='获取手机号前7位自定义变量'),
      version?: long(name='version', description='Version information.', example='1'),
    }
  ](name='resultObject', description='Returned object.'),
  totalItem?: int32(name='totalItem', description='Total number of items.', example='31'),
  totalPage?: int32(name='totalPage', description='Total number of pages.', example='9'),
}

model DescribeExpressionVariablePageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeExpressionVariablePageResponseBody(name='body'),
}

/**
 * @summary Paged Query for Custom Variables.
 *
 * @param request DescribeExpressionVariablePageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeExpressionVariablePageResponse
 */
@context("describeExpressionVariablePageWithContext")
async function describeExpressionVariablePageWithOptions(request: DescribeExpressionVariablePageRequest, runtime: $RuntimeOptions): DescribeExpressionVariablePageResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.currentPage)) {
    query['currentPage'] = request.currentPage;
  }
  if (!$isNull(request.eventCode)) {
    query['eventCode'] = request.eventCode;
  }
  if (!$isNull(request.outputs)) {
    query['outputs'] = request.outputs;
  }
  if (!$isNull(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.status)) {
    query['status'] = request.status;
  }
  if (!$isNull(request.value)) {
    query['value'] = request.value;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeExpressionVariablePage',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Paged Query for Custom Variables.
 *
 * @param request DescribeExpressionVariablePageRequest
 * @return DescribeExpressionVariablePageResponse
 */
async function describeExpressionVariablePage(request: DescribeExpressionVariablePageRequest): DescribeExpressionVariablePageResponse {
  var runtime = new $RuntimeOptions{};
  return describeExpressionVariablePageWithOptions(request, runtime);
}

model DescribeFieldByIdRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  id?: long(name='id', description='Primary key ID', example='223'),
  regId?: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou'),
}

model DescribeFieldByIdResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Returned object', example='true'),
}

model DescribeFieldByIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFieldByIdResponseBody(name='body'),
}

/**
 * @summary Get Field Details
 *
 * @param request DescribeFieldByIdRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeFieldByIdResponse
 */
@context("describeFieldByIdWithContext")
async function describeFieldByIdWithOptions(request: DescribeFieldByIdRequest, runtime: $RuntimeOptions): DescribeFieldByIdResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.id)) {
    query['id'] = request.id;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeFieldById',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Get Field Details
 *
 * @param request DescribeFieldByIdRequest
 * @return DescribeFieldByIdResponse
 */
async function describeFieldById(request: DescribeFieldByIdRequest): DescribeFieldByIdResponse {
  var runtime = new $RuntimeOptions{};
  return describeFieldByIdWithOptions(request, runtime);
}

model DescribeFieldListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  condition?: string(name='condition', description='Query input name or title', example='ip'),
  inputs?: string(name='inputs', description='Selected fields', example='sex,ip,id'),
  regId?: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou'),
}

model DescribeFieldListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10', example='10'),
  resultObject?: [ 
    {
      classify?: string(name='classify', description='Field classification', example='REQUEST_PARAM'),
      description?: string(name='description', description='Description information.', example='描述'),
      enumData?: string(name='enumData', description='Enum data', example='STATUS'),
      id?: long(name='id', description='Field ID.', example='497'),
      name?: string(name='name', description='Field name', example='age'),
      source?: string(name='source', description='Field source', example='DEFINE'),
      status?: string(name='status', description='Status.', example='ENABLE'),
      title?: string(name='title', description='Title.', example='年龄'),
      type?: string(name='type', description='Field type', example='STRING'),
    }
  ](name='resultObject', description='Returned object'),
  totalItem?: int32(name='totalItem', description='Total number of items', example='101'),
  totalPage?: int32(name='totalPage', description='Total number of pages', example='9'),
}

model DescribeFieldListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFieldListResponseBody(name='body'),
}

/**
 * @summary Query Field List
 *
 * @param request DescribeFieldListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeFieldListResponse
 */
@context("describeFieldListWithContext")
async function describeFieldListWithOptions(request: DescribeFieldListRequest, runtime: $RuntimeOptions): DescribeFieldListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.condition)) {
    query['condition'] = request.condition;
  }
  if (!$isNull(request.inputs)) {
    query['inputs'] = request.inputs;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeFieldList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Field List
 *
 * @param request DescribeFieldListRequest
 * @return DescribeFieldListResponse
 */
async function describeFieldList(request: DescribeFieldListRequest): DescribeFieldListResponse {
  var runtime = new $RuntimeOptions{};
  return describeFieldListWithOptions(request, runtime);
}

model DescribeFieldPageRequest {
  lang?: string(name='Lang', description='Set the language type for request and response messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  classify?: string(name='classify', description='Field classification', example='REQUEST_PARAM'),
  condition?: string(name='condition', description='Query input parameter name or title', example='age/年龄'),
  currentPage?: string(name='currentPage', description='Current page number', example='1'),
  name?: string(name='name', description='Field name', example='age'),
  pageSize?: string(name='pageSize', description='Number of items per page, default value is 10', example='10'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  source?: string(name='source', description='Field source', example='DEFINE'),
  status?: string(name='status', description='Status.', example='ENABLE'),
  title?: string(name='title', description='Title.', example='年龄'),
  type?: string(name='type', description='Field type', example='STRING'),
}

model DescribeFieldPageResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number', example='1'),
  pageSize?: int32(name='pageSize', description='Number of items per page, default value is 10', example='10'),
  resultObject?: [ 
    {
      classify?: string(name='classify', description='Field classification', example='REQUEST_PARAM'),
      description?: string(name='description', description='Description information.', example='描述'),
      enumData?: string(name='enumData', description='Enum data', example='STATUS'),
      id?: long(name='id', description='Unique table ID.', example='497'),
      name?: string(name='name', description='Field name', example='age'),
      source?: string(name='source', description='File source.', example='DEFINE'),
      status?: string(name='status', description='Status.', example='ENABLE'),
      title?: string(name='title', description='Title.', example='年龄'),
      type?: string(name='type', description='Field type', example='STRING'),
    }
  ](name='resultObject', description='Returned object'),
  totalItem?: int32(name='totalItem', description='Total number of items', example='40'),
  totalPage?: int32(name='totalPage', description='Total number of pages.', example='4'),
}

model DescribeFieldPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFieldPageResponseBody(name='body'),
}

/**
 * @summary Query paged list of fields
 *
 * @param request DescribeFieldPageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeFieldPageResponse
 */
@context("describeFieldPageWithContext")
async function describeFieldPageWithOptions(request: DescribeFieldPageRequest, runtime: $RuntimeOptions): DescribeFieldPageResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.classify)) {
    query['classify'] = request.classify;
  }
  if (!$isNull(request.condition)) {
    query['condition'] = request.condition;
  }
  if (!$isNull(request.currentPage)) {
    query['currentPage'] = request.currentPage;
  }
  if (!$isNull(request.name)) {
    query['name'] = request.name;
  }
  if (!$isNull(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.source)) {
    query['source'] = request.source;
  }
  if (!$isNull(request.status)) {
    query['status'] = request.status;
  }
  if (!$isNull(request.title)) {
    query['title'] = request.title;
  }
  if (!$isNull(request.type)) {
    query['type'] = request.type;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeFieldPage',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query paged list of fields
 *
 * @param request DescribeFieldPageRequest
 * @return DescribeFieldPageResponse
 */
async function describeFieldPage(request: DescribeFieldPageRequest): DescribeFieldPageResponse {
  var runtime = new $RuntimeOptions{};
  return describeFieldPageWithOptions(request, runtime);
}

model DescribeGroupAccountPageRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  communityNo?: string(name='communityNo', description='Community number.', example='129838420210118141502KiJ1SZL2'),
  currentPage?: string(name='currentPage', description='Current page number.', example='1'),
  direction?: string(name='direction', description='Order direction.', example='0'),
  fieldKey?: string(name='fieldKey', description='fieldKey.', example='mobile'),
  fieldVal?: string(name='fieldVal', description='fieldVal.', example='18000000000'),
  isPage?: boolean(name='isPage', description='Whether to paginate.', example='true'),
  order?: string(name='order', description='Sorting condition.', example='asc'),
  pageSize?: string(name='pageSize', description='Page size, default value is 10.', example='10'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou'),
  taskId?: string(name='taskId', description='Task ID.', example='6770764'),
}

model DescribeGroupAccountPageResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  data?: boolean(name='data', description='Returned data object.', example='true'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10.', example='10'),
  totalItem?: int32(name='totalItem', description='Total number of items.', example='6'),
  totalPage?: int32(name='totalPage', description='Total number of pages.', example='1'),
}

model DescribeGroupAccountPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGroupAccountPageResponseBody(name='body'),
}

/**
 * @summary Community Account List
 *
 * @param request DescribeGroupAccountPageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeGroupAccountPageResponse
 */
@context("describeGroupAccountPageWithContext")
async function describeGroupAccountPageWithOptions(request: DescribeGroupAccountPageRequest, runtime: $RuntimeOptions): DescribeGroupAccountPageResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.communityNo)) {
    query['communityNo'] = request.communityNo;
  }
  if (!$isNull(request.currentPage)) {
    query['currentPage'] = request.currentPage;
  }
  if (!$isNull(request.direction)) {
    query['direction'] = request.direction;
  }
  if (!$isNull(request.fieldKey)) {
    query['fieldKey'] = request.fieldKey;
  }
  if (!$isNull(request.fieldVal)) {
    query['fieldVal'] = request.fieldVal;
  }
  if (!$isNull(request.isPage)) {
    query['isPage'] = request.isPage;
  }
  if (!$isNull(request.order)) {
    query['order'] = request.order;
  }
  if (!$isNull(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.taskId)) {
    query['taskId'] = request.taskId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeGroupAccountPage',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Community Account List
 *
 * @param request DescribeGroupAccountPageRequest
 * @return DescribeGroupAccountPageResponse
 */
async function describeGroupAccountPage(request: DescribeGroupAccountPageRequest): DescribeGroupAccountPageResponse {
  var runtime = new $RuntimeOptions{};
  return describeGroupAccountPageWithOptions(request, runtime);
}

model DescribeGroupConditionListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and responses, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeGroupConditionListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: [ 
    {
      fieldKey?: string(name='fieldKey', description='Field key', example='key'),
      fieldValue?: string(name='fieldValue', description='Field value.', example='value'),
    }
  ](name='resultObject', description='Return object'),
}

model DescribeGroupConditionListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGroupConditionListResponseBody(name='body'),
}

/**
 * @summary Community List Query Conditions
 *
 * @param request DescribeGroupConditionListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeGroupConditionListResponse
 */
@context("describeGroupConditionListWithContext")
async function describeGroupConditionListWithOptions(request: DescribeGroupConditionListRequest, runtime: $RuntimeOptions): DescribeGroupConditionListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeGroupConditionList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Community List Query Conditions
 *
 * @param request DescribeGroupConditionListRequest
 * @return DescribeGroupConditionListResponse
 */
async function describeGroupConditionList(request: DescribeGroupConditionListRequest): DescribeGroupConditionListResponse {
  var runtime = new $RuntimeOptions{};
  return describeGroupConditionListWithOptions(request, runtime);
}

model DescribeGroupPageRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and responses, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  currentPage?: string(name='currentPage', description='Current page number.', example='1'),
  direction?: string(name='direction', description='Order.', example='0'),
  order?: string(name='order', description='Sorting condition.', example='asc'),
  pageSize?: string(name='pageSize', description='Page size, with a default value of 10.', example='10'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou'),
  taskId?: string(name='taskId', description='Task ID.', example='6770764'),
  timeType?: string(name='timeType', description='Time type.', example='1'),
}

model DescribeGroupPageResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, with a default value of 10.', example='10'),
  resultObject?: [ 
    {
      communityNo?: string(name='communityNo', description='Community number.', example='129838420210118141502RaMMIgVG'),
      createTime?: long(name='createTime', description='Creation time.', example='1699450018265'),
      groupRisk?: string(name='groupRisk', description='Group risk concentration.', example='80'),
      groupScale?: string(name='groupScale', description='Group scale.', example='2'),
      id?: long(name='id', description='Primary key ID.', example='497'),
      sceneName?: string(name='sceneName', description='Scene name.', example='通用图计算'),
      taskId?: long(name='taskId', description='Task ID.', example='6770764'),
      userId?: string(name='userId', description='User UID.', example='1519714049632764'),
    }
  ](name='resultObject', description='Returned object.'),
  totalItem?: int32(name='totalItem', description='Total number of items.', example='3'),
  totalPage?: int32(name='totalPage', description='Total number of pages.', example='1'),
}

model DescribeGroupPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGroupPageResponseBody(name='body'),
}

/**
 * @summary Community List
 *
 * @param request DescribeGroupPageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeGroupPageResponse
 */
@context("describeGroupPageWithContext")
async function describeGroupPageWithOptions(request: DescribeGroupPageRequest, runtime: $RuntimeOptions): DescribeGroupPageResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.currentPage)) {
    query['currentPage'] = request.currentPage;
  }
  if (!$isNull(request.direction)) {
    query['direction'] = request.direction;
  }
  if (!$isNull(request.order)) {
    query['order'] = request.order;
  }
  if (!$isNull(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.taskId)) {
    query['taskId'] = request.taskId;
  }
  if (!$isNull(request.timeType)) {
    query['timeType'] = request.timeType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeGroupPage',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Community List
 *
 * @param request DescribeGroupPageRequest
 * @return DescribeGroupPageResponse
 */
async function describeGroupPage(request: DescribeGroupPageRequest): DescribeGroupPageResponse {
  var runtime = new $RuntimeOptions{};
  return describeGroupPageWithOptions(request, runtime);
}

model DescribeGroupStatisticsByTodayRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and responses, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeGroupStatisticsByTodayResponseBody = {
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  data?: boolean(name='data', description='Returned data.', example='true'),
}

model DescribeGroupStatisticsByTodayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGroupStatisticsByTodayResponseBody(name='body'),
}

/**
 * @summary Risk Communities Discovered Today
 *
 * @param request DescribeGroupStatisticsByTodayRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeGroupStatisticsByTodayResponse
 */
@context("describeGroupStatisticsByTodayWithContext")
async function describeGroupStatisticsByTodayWithOptions(request: DescribeGroupStatisticsByTodayRequest, runtime: $RuntimeOptions): DescribeGroupStatisticsByTodayResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeGroupStatisticsByToday',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Risk Communities Discovered Today
 *
 * @param request DescribeGroupStatisticsByTodayRequest
 * @return DescribeGroupStatisticsByTodayResponse
 */
async function describeGroupStatisticsByToday(request: DescribeGroupStatisticsByTodayRequest): DescribeGroupStatisticsByTodayResponse {
  var runtime = new $RuntimeOptions{};
  return describeGroupStatisticsByTodayWithOptions(request, runtime);
}

model DescribeGroupTrendRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  day?: string(name='day', description='day', example='1'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeGroupTrendResponseBody = {
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  data?: boolean(name='data', description='Return result.', example='true'),
}

model DescribeGroupTrendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGroupTrendResponseBody(name='body'),
}

/**
 * @summary Recent Trends in Risk Communities
 *
 * @param request DescribeGroupTrendRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeGroupTrendResponse
 */
@context("describeGroupTrendWithContext")
async function describeGroupTrendWithOptions(request: DescribeGroupTrendRequest, runtime: $RuntimeOptions): DescribeGroupTrendResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.day)) {
    query['day'] = request.day;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeGroupTrend',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Recent Trends in Risk Communities
 *
 * @param request DescribeGroupTrendRequest
 * @return DescribeGroupTrendResponse
 */
async function describeGroupTrend(request: DescribeGroupTrendRequest): DescribeGroupTrendResponse {
  var runtime = new $RuntimeOptions{};
  return describeGroupTrendWithOptions(request, runtime);
}

model DescribeHasRuleNameByEventCodeRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  eventCode?: string(name='eventCode', description='Event code', example='de_atvmlf7412'),
  excludeRuleId?: string(name='excludeRuleId', description='Excluded policy ID', example='10621'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  ruleName?: string(name='ruleName', description='Policy name', example='非常见设备'),
}

model DescribeHasRuleNameByEventCodeResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DescribeHasRuleNameByEventCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeHasRuleNameByEventCodeResponseBody(name='body'),
}

/**
 * @summary Check if the policy name under the event name exists
 *
 * @param request DescribeHasRuleNameByEventCodeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeHasRuleNameByEventCodeResponse
 */
@context("describeHasRuleNameByEventCodeWithContext")
async function describeHasRuleNameByEventCodeWithOptions(request: DescribeHasRuleNameByEventCodeRequest, runtime: $RuntimeOptions): DescribeHasRuleNameByEventCodeResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.eventCode)) {
    query['eventCode'] = request.eventCode;
  }
  if (!$isNull(request.excludeRuleId)) {
    query['excludeRuleId'] = request.excludeRuleId;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.ruleName)) {
    query['ruleName'] = request.ruleName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeHasRuleNameByEventCode',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Check if the policy name under the event name exists
 *
 * @param request DescribeHasRuleNameByEventCodeRequest
 * @return DescribeHasRuleNameByEventCodeResponse
 */
async function describeHasRuleNameByEventCode(request: DescribeHasRuleNameByEventCodeRequest): DescribeHasRuleNameByEventCodeResponse {
  var runtime = new $RuntimeOptions{};
  return describeHasRuleNameByEventCodeWithOptions(request, runtime);
}

model DescribeHighRiskPieChartRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages. Default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  beginTime?: long(name='beginTime', description='Start time, accurate to milliseconds (ms).

This parameter is required.', example='1737101348000'),
  endTime?: long(name='endTime', description='End time, accurate to milliseconds (ms).

This parameter is required.', example='1730453400000'),
  eventCodes?: string(name='eventCodes', description='Event code.', example='de_ahqhsw7665,de_agbzfi5134'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeHighRiskPieChartResponseBody = {
  code?: string(name='code', description='Status code', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error details', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: {
    highRiskIPCity?: {
      animation?: boolean(name='animation', description='Chart flag, default true', example='true'),
      grid?: {
        show?: boolean(name='show', description='Chart flag, default false', example='false'),
      }(name='grid', description='Belonging grid.'),
      series?: [ 
        {
          data?: [ 
            {
              name?: string(name='name', description='Field name', example='杭州市'),
              value?: string(name='value', description='Data value', example='100'),
            }
          ](name='data', description='Returned data object'),
          name?: string(name='name', description='Field name', example='杭州市'),
          roseType?: string(name='roseType', description='Chart identifier, default is false', example='false'),
        }
      ](name='series', description='Chart data'),
    }(name='highRiskIPCity', description='High-risk IP city'),
    highRiskIPProvince?: {
      animation?: boolean(name='animation', description='Chart identifier, default is true', example='true'),
      grid?: {
        show?: boolean(name='show', description='Chart identifier, default is false', example='false'),
      }(name='grid', description='Belonging grid.'),
      series?: [ 
        {
          data?: [ 
            {
              name?: string(name='name', description='Variable name', example='浙江省'),
              value?: string(name='value', description='Data value', example='100'),
            }
          ](name='data', description='Returned data object'),
          name?: string(name='name', description='Field name', example='浙江省'),
          roseType?: string(name='roseType', description='Chart identifier, default is false', example='false'),
        }
      ](name='series', description='Chart data'),
    }(name='highRiskIPProvince', description='High-risk IP归属province'),
    highRiskMobileCity?: {
      animation?: boolean(name='animation', description='Chart flag, default is true', example='true'),
      grid?: {
        show?: boolean(name='show', description='Chart flag, default is false', example='false'),
      }(name='grid', description='Belongs to grid.'),
      series?: [ 
        {
          data?: [ 
            {
              name?: string(name='name', description='Field name', example='杭州市'),
              value?: string(name='value', description='Data value', example='100'),
            }
          ](name='data', description='Returned data object'),
          name?: string(name='name', description='Field name', example='杭州市'),
          roseType?: string(name='roseType', description='Chart flag, default is false', example='false'),
        }
      ](name='series', description='Chart data'),
    }(name='highRiskMobileCity', description='High-risk mobile phone归属city'),
    highRiskMobileProvince?: {
      animation?: boolean(name='animation', description='Indicator, default true', example='true'),
      grid?: {
        show?: boolean(name='show', description='Chart flag, default is false', example='false'),
      }(name='grid', description='Belongs to grid.'),
      series?: [ 
        {
          data?: [ 
            {
              name?: string(name='name', description='Field name', example='浙江省'),
              value?: string(name='value', description='Data value', example='100'),
            }
          ](name='data', description='High-risk position data.'),
          name?: string(name='name', description='Display title', example='分值区间占比'),
          roseType?: string(name='roseType', description='Chart identifier, default false', example='false'),
        }
      ](name='series', description='Chart data'),
    }(name='highRiskMobileProvince', description='High-risk mobile phone\\\\"s province of origin'),
  }(name='resultObject', description='Returned object'),
  success?: boolean(name='success', description='Whether the request was successful.', example='true'),
}

model DescribeHighRiskPieChartResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeHighRiskPieChartResponseBody(name='body'),
}

/**
 * @summary Risk Map Overview Chart (Pie Chart)
 *
 * @param request DescribeHighRiskPieChartRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeHighRiskPieChartResponse
 */
@context("describeHighRiskPieChartWithContext")
async function describeHighRiskPieChartWithOptions(request: DescribeHighRiskPieChartRequest, runtime: $RuntimeOptions): DescribeHighRiskPieChartResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.beginTime)) {
    query['beginTime'] = request.beginTime;
  }
  if (!$isNull(request.endTime)) {
    query['endTime'] = request.endTime;
  }
  if (!$isNull(request.eventCodes)) {
    query['eventCodes'] = request.eventCodes;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeHighRiskPieChart',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Risk Map Overview Chart (Pie Chart)
 *
 * @param request DescribeHighRiskPieChartRequest
 * @return DescribeHighRiskPieChartResponse
 */
async function describeHighRiskPieChart(request: DescribeHighRiskPieChartRequest): DescribeHighRiskPieChartResponse {
  var runtime = new $RuntimeOptions{};
  return describeHighRiskPieChartWithOptions(request, runtime);
}

model DescribeHitRuleFluctuationRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  eventCodes?: string(name='eventCodes', description='Event codes, separated by commas (,).', example='de_ahqhsw7665,de_agbzfi5134'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  ruleStatus?: string(name='ruleStatus', description='Policy status', example='DRAFT'),
}

model DescribeHitRuleFluctuationResponseBody = {
  code?: string(name='code', description='Status code.', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error message.', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: [ 
    {
      ruleId?: string(name='ruleId', description='Policy ID', example='115019'),
      ruleName?: string(name='ruleName', description='Policy name', example='营销风险识别'),
      todayNum?: long(name='todayNum', description='Today\\\\"s count', example='100'),
      withinSevenDayNum?: string(name='withinSevenDayNum', description='Count within seven days', example='600'),
      withinThirtyDayNum?: string(name='withinThirtyDayNum', description='Count within thirty days', example='1200'),
      withinThreeDayNum?: string(name='withinThreeDayNum', description='Count within three days', example='300'),
      yesterdayNum?: long(name='yesterdayNum', description='Yesterday\\\\"s count', example='200'),
    }
  ](name='resultObject', description='Return object'),
  success?: boolean(name='success', description='Whether the request was successful.', example='true'),
}

model DescribeHitRuleFluctuationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeHitRuleFluctuationResponseBody(name='body'),
}

/**
 * @summary Policy Hit Fluctuation Detection
 *
 * @param request DescribeHitRuleFluctuationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeHitRuleFluctuationResponse
 */
@context("describeHitRuleFluctuationWithContext")
async function describeHitRuleFluctuationWithOptions(request: DescribeHitRuleFluctuationRequest, runtime: $RuntimeOptions): DescribeHitRuleFluctuationResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.eventCodes)) {
    query['eventCodes'] = request.eventCodes;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.ruleStatus)) {
    query['ruleStatus'] = request.ruleStatus;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeHitRuleFluctuation',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Policy Hit Fluctuation Detection
 *
 * @param request DescribeHitRuleFluctuationRequest
 * @return DescribeHitRuleFluctuationResponse
 */
async function describeHitRuleFluctuation(request: DescribeHitRuleFluctuationRequest): DescribeHitRuleFluctuationResponse {
  var runtime = new $RuntimeOptions{};
  return describeHitRuleFluctuationWithOptions(request, runtime);
}

model DescribeHitRuleListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  beginTime?: long(name='beginTime', description='Start time, accurate to milliseconds (ms).', example='1737101348000'),
  endTime?: long(name='endTime', description='End time, accurate to milliseconds (ms).', example='1752027960000'),
  eventCodes?: string(name='eventCodes', description='Event codes, separated by commas if multiple.', example='de_ahqhsw7665,de_ahqhsw7622'),
  eventType?: string(name='eventType', description='Event type', example='MAIN'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeHitRuleListResponseBody = {
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: [ 
    {
      hitCount?: int32(name='hitCount', description='Number of hits.', example='100'),
      ruleName?: string(name='ruleName', description='Strategy name', example='营销风险识别'),
    }
  ](name='resultObject', description='Response object'),
}

model DescribeHitRuleListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeHitRuleListResponseBody(name='body'),
}

/**
 * @summary Top 20 Hits for Main Events/Bypass/Diversion Strategies
 *
 * @param request DescribeHitRuleListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeHitRuleListResponse
 */
@context("describeHitRuleListWithContext")
async function describeHitRuleListWithOptions(request: DescribeHitRuleListRequest, runtime: $RuntimeOptions): DescribeHitRuleListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.beginTime)) {
    query['beginTime'] = request.beginTime;
  }
  if (!$isNull(request.endTime)) {
    query['endTime'] = request.endTime;
  }
  if (!$isNull(request.eventCodes)) {
    query['eventCodes'] = request.eventCodes;
  }
  if (!$isNull(request.eventType)) {
    query['eventType'] = request.eventType;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeHitRuleList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Top 20 Hits for Main Events/Bypass/Diversion Strategies
 *
 * @param request DescribeHitRuleListRequest
 * @return DescribeHitRuleListResponse
 */
async function describeHitRuleList(request: DescribeHitRuleListRequest): DescribeHitRuleListResponse {
  var runtime = new $RuntimeOptions{};
  return describeHitRuleListWithOptions(request, runtime);
}

model DescribeHitRuleTrendRequest {
  lang?: string(name='Lang', description='Sets the language type for the request and response messages. Default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  beginTime?: long(name='beginTime', description='Start time, accurate to milliseconds (ms).', example='1737101348000'),
  endTime?: long(name='endTime', description='End time, accurate to milliseconds (ms).', example='1746669075000'),
  eventCodes?: string(name='eventCodes', description='Event codes, separated by commas (,).', example='de_ahqhsw7665,de_agbzfi5134'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  ruleStatus?: string(name='ruleStatus', description='Rule status', example='DRAFT'),
}

model DescribeHitRuleTrendResponseBody = {
  code?: string(name='code', description='Status code', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error details', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: {
    series?: [ 
      {
        data?: [ 
          {
            num?: long(name='num', description='Number', example='50'),
            scale?: string(name='scale', description='Scale', example='10.00%'),
          }
        ](name='data', description='Returned data object'),
        name?: string(name='name', description='Display title', example='策略name'),
      }
    ](name='series', description='Chart data'),
    xaxis?: {
      data?: [ string ](name='data', description='Returned data object'),
    }(name='xaxis', description='X-axis data'),
  }(name='resultObject', description='Response object'),
  success?: boolean(name='success', description='Indicates whether the operation was successful, where true means success.', example='true'),
}

model DescribeHitRuleTrendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeHitRuleTrendResponseBody(name='body'),
}

/**
 * @summary Hit Rule Trend
 *
 * @param request DescribeHitRuleTrendRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeHitRuleTrendResponse
 */
@context("describeHitRuleTrendWithContext")
async function describeHitRuleTrendWithOptions(request: DescribeHitRuleTrendRequest, runtime: $RuntimeOptions): DescribeHitRuleTrendResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.beginTime)) {
    query['beginTime'] = request.beginTime;
  }
  if (!$isNull(request.endTime)) {
    query['endTime'] = request.endTime;
  }
  if (!$isNull(request.eventCodes)) {
    query['eventCodes'] = request.eventCodes;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.ruleStatus)) {
    query['ruleStatus'] = request.ruleStatus;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeHitRuleTrend',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Hit Rule Trend
 *
 * @param request DescribeHitRuleTrendRequest
 * @return DescribeHitRuleTrendResponse
 */
async function describeHitRuleTrend(request: DescribeHitRuleTrendRequest): DescribeHitRuleTrendResponse {
  var runtime = new $RuntimeOptions{};
  return describeHitRuleTrendWithOptions(request, runtime);
}

model DescribeInitDigRequest {
  lang?: string(name='Lang', description='Set the language type for request and response messages. Default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='RegId', description='Region code', example='cn-hangzhou'),
  type?: string(name='Type', description='Data source type

This parameter is required.', example='SAF_CONSOLE'),
}

model DescribeInitDigResponseBody = {
  requestId?: string(name='RequestId', description='ID of the request', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    tipInfo?: string(name='TipInfo', description='Prompt information', example='阿里云内部测试'),
  }(name='ResultObject', description='Returned result information'),
}

model DescribeInitDigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInitDigResponseBody(name='body'),
}

/**
 * @summary Initialization Popup Information
 *
 * @description Add prompt information in BOPS, POC new page initialization popup prompts this information
 *
 * @param request DescribeInitDigRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeInitDigResponse
 */
@context("describeInitDigWithContext")
async function describeInitDigWithOptions(request: DescribeInitDigRequest, runtime: $RuntimeOptions): DescribeInitDigResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['RegId'] = request.regId;
  }
  if (!$isNull(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeInitDig',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Initialization Popup Information
 *
 * @description Add prompt information in BOPS, POC new page initialization popup prompts this information
 *
 * @param request DescribeInitDigRequest
 * @return DescribeInitDigResponse
 */
async function describeInitDig(request: DescribeInitDigRequest): DescribeInitDigResponse {
  var runtime = new $RuntimeOptions{};
  return describeInitDigWithOptions(request, runtime);
}

model DescribeInputFeildCountByEventCodeRequest {
  lang?: string(name='Lang', description='Set the language type for request and response, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  createType?: string(name='createType', description='Creation type', example='NORMAL'),
  eventCode?: string(name='eventCode', description='Event code', example='de_ahqido8038'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeInputFeildCountByEventCodeResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    limit?: boolean(name='limit', description='Whether it exceeds the maximum quantity', example='true'),
    maxTotalItem?: int32(name='maxTotalItem', description='Maximum number of created items', example='100'),
    totalItem?: int32(name='totalItem', description='Total number of items', example='8'),
  }(name='resultObject', description='Return object'),
}

model DescribeInputFeildCountByEventCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInputFeildCountByEventCodeResponseBody(name='body'),
}

/**
 * @summary Query Total Number of Events
 *
 * @param request DescribeInputFeildCountByEventCodeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeInputFeildCountByEventCodeResponse
 */
@context("describeInputFeildCountByEventCodeWithContext")
async function describeInputFeildCountByEventCodeWithOptions(request: DescribeInputFeildCountByEventCodeRequest, runtime: $RuntimeOptions): DescribeInputFeildCountByEventCodeResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.createType)) {
    query['createType'] = request.createType;
  }
  if (!$isNull(request.eventCode)) {
    query['eventCode'] = request.eventCode;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeInputFeildCountByEventCode',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Total Number of Events
 *
 * @param request DescribeInputFeildCountByEventCodeRequest
 * @return DescribeInputFeildCountByEventCodeResponse
 */
async function describeInputFeildCountByEventCode(request: DescribeInputFeildCountByEventCodeRequest): DescribeInputFeildCountByEventCodeResponse {
  var runtime = new $RuntimeOptions{};
  return describeInputFeildCountByEventCodeWithOptions(request, runtime);
}

model DescribeListModelRequest {
  currentPage?: long(name='CurrentPage', description='Current page number.', example='1'),
  pageSize?: long(name='PageSize', description='Number of items per page.', example='10'),
  regId?: string(name='RegId', description='Region code.', example='cn-hangzhou'),
}

model DescribeListModelResponseBody = {
  currentPage?: string(name='CurrentPage', description='Current page number.', example='1'),
  pageSize?: string(name='PageSize', description='Number of items per page.', example='30'),
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: [ 
    {
      bucId?: string(name='bucId', description='Uploader ID.', example='011786'),
      createTime?: string(name='createTime', description='Creation time.', example='2025-05-07T02:26:01Z'),
      modelCode?: string(name='modelCode', description='Model code.', example='code'),
      modelId?: string(name='modelId', description='Unique identifier of the model in use.', example='qwen-plus'),
      modelName?: string(name='modelName', description='Model name.', example='custom_model'),
      modelScene?: string(name='modelScene', description='Model scenario.', example='custom_scene'),
      modelStatus?: string(name='modelStatus', description='Model status, values: -**ENABLED**: Enabled-**DISABLED**: Disabled', example='ENABLED'),
      taskId?: string(name='taskId', description='Task ID.', example='0c8a3799-5ac8-434b-b255-e06edb35c05f'),
      updateTime?: string(name='updateTime', description='Last update time of the model.', example='2024-11-18T02:07:00Z'),
      userId?: string(name='userId', description='User ID.', example='1806507582222226'),
      userLocalFileName?: string(name='userLocalFileName', description='File name.', example='saf-ai-1662519103706.csv'),
    }
  ](name='ResultObject', description='Returned data.'),
  totalItem?: string(name='TotalItem', description='Total number of records.', example='1'),
  totalPage?: string(name='TotalPage', description='Total number of pages.', example='1'),
}

model DescribeListModelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeListModelResponseBody(name='body'),
}

/**
 * @summary Display of Model List
 *
 * @param request DescribeListModelRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeListModelResponse
 */
@context("describeListModelWithContext")
async function describeListModelWithOptions(request: DescribeListModelRequest, runtime: $RuntimeOptions): DescribeListModelResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.regId)) {
    query['RegId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeListModel',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Display of Model List
 *
 * @param request DescribeListModelRequest
 * @return DescribeListModelResponse
 */
async function describeListModel(request: DescribeListModelRequest): DescribeListModelResponse {
  var runtime = new $RuntimeOptions{};
  return describeListModelWithOptions(request, runtime);
}

model DescribeListPocRequest {
  currentPage?: long(name='CurrentPage', description='Current page number.', example='1'),
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  pageSize?: long(name='PageSize', description='Page size.', example='30'),
  regId?: string(name='RegId', description='Region code', example='cn-hangzhou'),
  type?: string(name='Type', description='Type', example='SAF_CONSOLE'),
}

model DescribeListPocResponseBody = {
  code?: string(name='Code', description='Status code.', example='200'),
  currentPage?: string(name='CurrentPage', description='Current page.', example='1'),
  httpStatusCode?: string(name='HttpStatusCode', description='HTTP status code.', example='200'),
  message?: string(name='Message', description='Return message.', example='successful'),
  pageSize?: string(name='PageSize', description='Page size.', example='10'),
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='ResultObject', description='Return result.', example='true'),
  totalItem?: string(name='TotalItem', description='Total number of items returned.', example='0'),
  totalPage?: string(name='TotalPage', description='Total number of pages.', example='0'),
}

model DescribeListPocResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeListPocResponseBody(name='body'),
}

/**
 * @summary Task List
 *
 * @param request DescribeListPocRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeListPocResponse
 */
@context("describeListPocWithContext")
async function describeListPocWithOptions(request: DescribeListPocRequest, runtime: $RuntimeOptions): DescribeListPocResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.regId)) {
    query['RegId'] = request.regId;
  }
  if (!$isNull(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeListPoc',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Task List
 *
 * @param request DescribeListPocRequest
 * @return DescribeListPocResponse
 */
async function describeListPoc(request: DescribeListPocRequest): DescribeListPocResponse {
  var runtime = new $RuntimeOptions{};
  return describeListPocWithOptions(request, runtime);
}

model DescribeLoanExecListRequest {
  lang?: string(name='Lang', description='Set the language type for request and response messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  batchNo?: string(name='batchNo', description='Import batch number.', example='1'),
  currentPage?: string(name='currentPage', description='Current page number.', example='1'),
  monitorObj?: string(name='monitorObj', description='Monitoring metric data.', example='de_afghcf6411'),
  monitorStatus?: string(name='monitorStatus', description='Status', example='WAIT'),
  pageSize?: string(name='pageSize', description='Page size, with a default value of 10.', example='10'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeLoanExecListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, with a default value of 10.', example='10'),
  resultObject?: boolean(name='resultObject', description='Return object.', example='true'),
  totalItem?: int32(name='totalItem', description='Total number of items.', example='6'),
  totalPage?: int32(name='totalPage', description='Total number of pages.', example='1'),
}

model DescribeLoanExecListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeLoanExecListResponseBody(name='body'),
}

/**
 * @summary Get Monitoring Object List
 *
 * @param request DescribeLoanExecListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeLoanExecListResponse
 */
@context("describeLoanExecListWithContext")
async function describeLoanExecListWithOptions(request: DescribeLoanExecListRequest, runtime: $RuntimeOptions): DescribeLoanExecListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.batchNo)) {
    query['batchNo'] = request.batchNo;
  }
  if (!$isNull(request.currentPage)) {
    query['currentPage'] = request.currentPage;
  }
  if (!$isNull(request.monitorObj)) {
    query['monitorObj'] = request.monitorObj;
  }
  if (!$isNull(request.monitorStatus)) {
    query['monitorStatus'] = request.monitorStatus;
  }
  if (!$isNull(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeLoanExecList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Get Monitoring Object List
 *
 * @param request DescribeLoanExecListRequest
 * @return DescribeLoanExecListResponse
 */
async function describeLoanExecList(request: DescribeLoanExecListRequest): DescribeLoanExecListResponse {
  var runtime = new $RuntimeOptions{};
  return describeLoanExecListWithOptions(request, runtime);
}

model DescribeLoanTaskListRequest {
  lang?: string(name='Lang', description='Set the language type for request and response messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  batchNo?: string(name='batchNo', description='Import batch number.', example='1'),
  currentPage?: string(name='currentPage', description='Current page number. Default is: 1.', example='1'),
  monitorStatus?: string(name='monitorStatus', description='Task status.', example='WAIT'),
  pageSize?: string(name='pageSize', description='Page size, default value is 10.', example='20'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou'),
}

model DescribeLoanTaskListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10.', example='10'),
  resultObject?: boolean(name='resultObject', description='Return object.', example='true'),
  totalItem?: int32(name='totalItem', description='Total number of items.', example='6'),
  totalPage?: int32(name='totalPage', description='Total number of pages.', example='1'),
}

model DescribeLoanTaskListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeLoanTaskListResponseBody(name='body'),
}

/**
 * @summary Get Loan Monitoring Task List
 *
 * @param request DescribeLoanTaskListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeLoanTaskListResponse
 */
@context("describeLoanTaskListWithContext")
async function describeLoanTaskListWithOptions(request: DescribeLoanTaskListRequest, runtime: $RuntimeOptions): DescribeLoanTaskListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.batchNo)) {
    query['batchNo'] = request.batchNo;
  }
  if (!$isNull(request.currentPage)) {
    query['currentPage'] = request.currentPage;
  }
  if (!$isNull(request.monitorStatus)) {
    query['monitorStatus'] = request.monitorStatus;
  }
  if (!$isNull(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeLoanTaskList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Get Loan Monitoring Task List
 *
 * @param request DescribeLoanTaskListRequest
 * @return DescribeLoanTaskListResponse
 */
async function describeLoanTaskList(request: DescribeLoanTaskListRequest): DescribeLoanTaskListResponse {
  var runtime = new $RuntimeOptions{};
  return describeLoanTaskListWithOptions(request, runtime);
}

model DescribeMarkPageRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  currentPage?: string(name='currentPage', description='Current page number.', example='1'),
  direction?: string(name='direction', description='Order direction.', example='0'),
  isPage?: boolean(name='isPage', description='Whether to paginate.', example='true'),
  order?: string(name='order', description='Sorting condition.', example='asc'),
  pageSize?: string(name='pageSize', description='Page size, default value is 10.', example='10'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou'),
  taskLogId?: string(name='taskLogId', description='Task ID.', example='443'),
}

model DescribeMarkPageResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10.', example='10'),
  resultObject?: [ 
    {
      fieldName?: string(name='fieldName', description='Field name.', example='mobile'),
      fieldValue?: string(name='fieldValue', description='Field value.', example='18000000000'),
      id?: long(name='id', description='Primary key ID.', example='2793'),
      markType?: string(name='markType', description='Mark (0 No / 1 Yes).', example='1'),
    }
  ](name='resultObject', description='Returned object.'),
  totalItem?: int32(name='totalItem', description='Total number of items.', example='6'),
  totalPage?: int32(name='totalPage', description='Total number of pages.', example='1'),
}

model DescribeMarkPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMarkPageResponseBody(name='body'),
}

/**
 * @summary Mark List
 *
 * @param request DescribeMarkPageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeMarkPageResponse
 */
@context("describeMarkPageWithContext")
async function describeMarkPageWithOptions(request: DescribeMarkPageRequest, runtime: $RuntimeOptions): DescribeMarkPageResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.currentPage)) {
    query['currentPage'] = request.currentPage;
  }
  if (!$isNull(request.direction)) {
    query['direction'] = request.direction;
  }
  if (!$isNull(request.isPage)) {
    query['isPage'] = request.isPage;
  }
  if (!$isNull(request.order)) {
    query['order'] = request.order;
  }
  if (!$isNull(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.taskLogId)) {
    query['taskLogId'] = request.taskLogId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeMarkPage',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Mark List
 *
 * @param request DescribeMarkPageRequest
 * @return DescribeMarkPageResponse
 */
async function describeMarkPage(request: DescribeMarkPageRequest): DescribeMarkPageResponse {
  var runtime = new $RuntimeOptions{};
  return describeMarkPageWithOptions(request, runtime);
}

model DescribeMenuPermissionRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and responses, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  permissionType?: string(name='permissionType', description='Permission type', example='MENU'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeMenuPermissionResponseBody = {
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DescribeMenuPermissionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMenuPermissionResponseBody(name='body'),
}

/**
 * @summary Check Permission
 *
 * @param request DescribeMenuPermissionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeMenuPermissionResponse
 */
@context("describeMenuPermissionWithContext")
async function describeMenuPermissionWithOptions(request: DescribeMenuPermissionRequest, runtime: $RuntimeOptions): DescribeMenuPermissionResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.permissionType)) {
    query['permissionType'] = request.permissionType;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeMenuPermission',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Check Permission
 *
 * @param request DescribeMenuPermissionRequest
 * @return DescribeMenuPermissionResponse
 */
async function describeMenuPermission(request: DescribeMenuPermissionRequest): DescribeMenuPermissionResponse {
  var runtime = new $RuntimeOptions{};
  return describeMenuPermissionWithOptions(request, runtime);
}

model DescribeModelDetailsByIdRequest {
  modelId?: string(name='ModelId', description='Model ID.

This parameter is required.', example='20619'),
  regId?: string(name='RegId', description='Region code.', example='cn-hangzhou'),
}

model DescribeModelDetailsByIdResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: [ 
    {
      modelEffectEvaluation?: string(name='modelEffectEvaluation', description='Model prediction result.', example='{\\\\"AUC\\\\":0.9895246624946594,\\\\"Count\\\\":2489,\\\\"DecisionMark\\\\":[0.0,0.0010000000474974513,0.05287817938420348,0.0]}'),
    }
  ](name='ResultObject', description='Returned result information'),
}

model DescribeModelDetailsByIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeModelDetailsByIdResponseBody(name='body'),
}

/**
 * @summary View Result
 *
 * @param request DescribeModelDetailsByIdRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeModelDetailsByIdResponse
 */
@context("describeModelDetailsByIdWithContext")
async function describeModelDetailsByIdWithOptions(request: DescribeModelDetailsByIdRequest, runtime: $RuntimeOptions): DescribeModelDetailsByIdResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.modelId)) {
    query['ModelId'] = request.modelId;
  }
  if (!$isNull(request.regId)) {
    query['RegId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeModelDetailsById',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary View Result
 *
 * @param request DescribeModelDetailsByIdRequest
 * @return DescribeModelDetailsByIdResponse
 */
async function describeModelDetailsById(request: DescribeModelDetailsByIdRequest): DescribeModelDetailsByIdResponse {
  var runtime = new $RuntimeOptions{};
  return describeModelDetailsByIdWithOptions(request, runtime);
}

model DescribeModelOssPolicyRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou'),
}

model DescribeModelOssPolicyResponseBody = {
  accessId?: string(name='AccessId', description='Access ID for OSS.', example='LTAxxxxxxxxxxxx'),
  host?: string(name='Host', description='Address.', example='https://xxxxxxxx-xxxxxxx.aliyuncs.com'),
  key?: string(name='Key', description='OSS access key secret.', example='saf/a/uid/ccc'),
  message?: string(name='Message', description='Error message.', example='success'),
  policy?: string(name='Policy', description='The policy for user form upload, which is a base64-encoded string.', example='eyJleHBpxxxxxx'),
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  signature?: string(name='Signature', description='Signature information.', example='tzl1wL4q8rR/xxxxxx'),
  resultObject?: boolean(name='resultObject', description='Return result.', example='true'),
}

model DescribeModelOssPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeModelOssPolicyResponseBody(name='body'),
}

/**
 * @summary Get File Upload Credentials
 *
 * @param request DescribeModelOssPolicyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeModelOssPolicyResponse
 */
@context("describeModelOssPolicyWithContext")
async function describeModelOssPolicyWithOptions(request: DescribeModelOssPolicyRequest, runtime: $RuntimeOptions): DescribeModelOssPolicyResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeModelOssPolicy',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Get File Upload Credentials
 *
 * @param request DescribeModelOssPolicyRequest
 * @return DescribeModelOssPolicyResponse
 */
async function describeModelOssPolicy(request: DescribeModelOssPolicyRequest): DescribeModelOssPolicyResponse {
  var runtime = new $RuntimeOptions{};
  return describeModelOssPolicyWithOptions(request, runtime);
}

model DescribeMonitorTaskLimitRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeMonitorTaskLimitResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    limit?: boolean(name='limit', description='Whether the maximum limit has been reached', example='false'),
    maxTotalItem?: int32(name='maxTotalItem', description='Maximum number of items', example='1000'),
    totalItem?: int32(name='totalItem', description='Total number of items', example='5'),
  }(name='resultObject', description='Returned object'),
}

model DescribeMonitorTaskLimitResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMonitorTaskLimitResponseBody(name='body'),
}

/**
 * @summary Query Task Limit
 *
 * @param request DescribeMonitorTaskLimitRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeMonitorTaskLimitResponse
 */
@context("describeMonitorTaskLimitWithContext")
async function describeMonitorTaskLimitWithOptions(request: DescribeMonitorTaskLimitRequest, runtime: $RuntimeOptions): DescribeMonitorTaskLimitResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeMonitorTaskLimit',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Task Limit
 *
 * @param request DescribeMonitorTaskLimitRequest
 * @return DescribeMonitorTaskLimitResponse
 */
async function describeMonitorTaskLimit(request: DescribeMonitorTaskLimitRequest): DescribeMonitorTaskLimitResponse {
  var runtime = new $RuntimeOptions{};
  return describeMonitorTaskLimitWithOptions(request, runtime);
}

model DescribeNameListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  createType?: string(name='createType', description='Creation type.', example='NORMAL'),
  currentPage?: string(name='currentPage', description='Current page number.', example='1'),
  pageSize?: string(name='pageSize', description='Page size, with a default value of 10.', example='10'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou'),
  value?: string(name='value', description='Search value.', example='白名单'),
  variableId?: string(name='variableId', description='Variable ID.', example='393314'),
}

model DescribeNameListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, with a default value of 10.', example='10'),
  resultObject?: [ 
    {
      gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1621578648000'),
      gmtModified?: long(name='gmtModified', description='Modification time.', example='1565701886000'),
      id?: long(name='id', description='Name list content ID.', example='30'),
      identifier?: string(name='identifier', description='Variable identifier.', example='NAME_LIST'),
      title?: string(name='title', description='Title.', example='变量的title'),
      value?: string(name='value', description='Value.', example='321311193502064288'),
      variableId?: long(name='variableId', description='Variable ID.', example='393314'),
    }
  ](name='resultObject', description='Returned object.'),
  totalItem?: int32(name='totalItem', description='Total number of items.', example='6'),
  totalPage?: int32(name='totalPage', description='Total number of pages.', example='1'),
}

model DescribeNameListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNameListResponseBody(name='body'),
}

/**
 * @summary Query Name List Pagination
 *
 * @param request DescribeNameListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeNameListResponse
 */
@context("describeNameListWithContext")
async function describeNameListWithOptions(request: DescribeNameListRequest, runtime: $RuntimeOptions): DescribeNameListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.createType)) {
    query['createType'] = request.createType;
  }
  if (!$isNull(request.currentPage)) {
    query['currentPage'] = request.currentPage;
  }
  if (!$isNull(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.value)) {
    query['value'] = request.value;
  }
  if (!$isNull(request.variableId)) {
    query['variableId'] = request.variableId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeNameList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Name List Pagination
 *
 * @param request DescribeNameListRequest
 * @return DescribeNameListResponse
 */
async function describeNameList(request: DescribeNameListRequest): DescribeNameListResponse {
  var runtime = new $RuntimeOptions{};
  return describeNameListWithOptions(request, runtime);
}

model DescribeNameListDownloadUrlRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  variableId?: long(name='variableId', description='Variable ID.

This parameter is required.', example='762'),
}

model DescribeNameListDownloadUrlResponseBody = {
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: {
    downloadFileUrl?: string(name='downloadFileUrl', description='Download URL.', example='https://xxxxx-oss-xxxxx.xxxxxx.aliyuncs.com/xx/xx/xxx/xxxxxx.csv?Expires=1753433384&OSSAccessKeyId=xxxxxxxxx&Signature=%2F%xxxxxxxxxxxx%3D'),
  }(name='resultObject', description='Returned object'),
}

model DescribeNameListDownloadUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNameListDownloadUrlResponseBody(name='body'),
}

/**
 * @summary Download Name List
 *
 * @param request DescribeNameListDownloadUrlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeNameListDownloadUrlResponse
 */
@context("describeNameListDownloadUrlWithContext")
async function describeNameListDownloadUrlWithOptions(request: DescribeNameListDownloadUrlRequest, runtime: $RuntimeOptions): DescribeNameListDownloadUrlResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.variableId)) {
    query['variableId'] = request.variableId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeNameListDownloadUrl',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Download Name List
 *
 * @param request DescribeNameListDownloadUrlRequest
 * @return DescribeNameListDownloadUrlResponse
 */
async function describeNameListDownloadUrl(request: DescribeNameListDownloadUrlRequest): DescribeNameListDownloadUrlResponse {
  var runtime = new $RuntimeOptions{};
  return describeNameListDownloadUrlWithOptions(request, runtime);
}

model DescribeNameListLimitRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  createType?: string(name='createType', description='Creation type', example='NORMAL'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeNameListLimitResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    limit?: boolean(name='limit', description='Whether it exceeds the maximum quantity', example='true'),
    maxTotalItem?: long(name='maxTotalItem', description='Maximum number of creatable items', example='100'),
    totalItem?: long(name='totalItem', description='Total number of items', example='101'),
  }(name='resultObject', description='Return object'),
}

model DescribeNameListLimitResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNameListLimitResponseBody(name='body'),
}

/**
 * @summary Query Name List Limit
 *
 * @param request DescribeNameListLimitRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeNameListLimitResponse
 */
@context("describeNameListLimitWithContext")
async function describeNameListLimitWithOptions(request: DescribeNameListLimitRequest, runtime: $RuntimeOptions): DescribeNameListLimitResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.createType)) {
    query['createType'] = request.createType;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeNameListLimit',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Name List Limit
 *
 * @param request DescribeNameListLimitRequest
 * @return DescribeNameListLimitResponse
 */
async function describeNameListLimit(request: DescribeNameListLimitRequest): DescribeNameListLimitResponse {
  var runtime = new $RuntimeOptions{};
  return describeNameListLimitWithOptions(request, runtime);
}

model DescribeNameListPageListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='3'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10', example='10'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  updateBeginTime?: long(name='updateBeginTime', description='Update start time.', example='1753372800000'),
  updateEndTime?: long(name='updateEndTime', description='Update end time.', example='1753459199059'),
  value?: string(name='value', description='Variable name/description', example='白名单'),
  variableId?: long(name='variableId', description='Variable ID

This parameter is required.', example='762'),
}

model DescribeNameListPageListResponseBody = {
  currentPage?: string(name='currentPage', description='Current page number.', example='1'),
  pageSize?: string(name='pageSize', description='Page size, default value is 10', example='10'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: [ 
    {
      gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1621578648000'),
      gmtModified?: long(name='gmtModified', description='Modification time.', example='1565701886000'),
      id?: long(name='id', description='ID of the list variable content data', example='497'),
      memo?: string(name='memo', description='NameList Content memo', example='名单内容描述'),
      name?: string(name='name', description='Variable name', example='nl_UN8otElLb490'),
      nameListType?: string(name='nameListType', description='Variable type', example='accountId'),
      title?: string(name='title', description='Title.', example='白名单'),
      userId?: string(name='userId', description='User UID', example='130433202307074287'),
      value?: string(name='value', description='Variable value', example='130433202307074287'),
      variableId?: long(name='variableId', description='Variable ID.', example='762'),
    }
  ](name='resultObject', description='Returned object'),
  totalItem?: string(name='totalItem', description='Total number of items', example='101'),
  totalPage?: string(name='totalPage', description='Total number of pages', example='9'),
}

model DescribeNameListPageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNameListPageListResponseBody(name='body'),
}

/**
 * @summary Query the content of the list
 *
 * @param request DescribeNameListPageListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeNameListPageListResponse
 */
@context("describeNameListPageListWithContext")
async function describeNameListPageListWithOptions(request: DescribeNameListPageListRequest, runtime: $RuntimeOptions): DescribeNameListPageListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.currentPage)) {
    query['currentPage'] = request.currentPage;
  }
  if (!$isNull(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.updateBeginTime)) {
    query['updateBeginTime'] = request.updateBeginTime;
  }
  if (!$isNull(request.updateEndTime)) {
    query['updateEndTime'] = request.updateEndTime;
  }
  if (!$isNull(request.value)) {
    query['value'] = request.value;
  }
  if (!$isNull(request.variableId)) {
    query['variableId'] = request.variableId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeNameListPageList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query the content of the list
 *
 * @param request DescribeNameListPageListRequest
 * @return DescribeNameListPageListResponse
 */
async function describeNameListPageList(request: DescribeNameListPageListRequest): DescribeNameListPageListResponse {
  var runtime = new $RuntimeOptions{};
  return describeNameListPageListWithOptions(request, runtime);
}

model DescribeNameListTypeListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeNameListTypeListResponseBody = {
  requestId?: string(name='requestId', description='Request ID', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: [ 
    {
      key?: string(name='key', description='Match Key.', example='accountId'),
      value?: string(name='value', description='Variable value', example='账号ID'),
    }
  ](name='resultObject', description='Returned object'),
}

model DescribeNameListTypeListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNameListTypeListResponseBody(name='body'),
}

/**
 * @summary List of Name Types
 *
 * @param request DescribeNameListTypeListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeNameListTypeListResponse
 */
@context("describeNameListTypeListWithContext")
async function describeNameListTypeListWithOptions(request: DescribeNameListTypeListRequest, runtime: $RuntimeOptions): DescribeNameListTypeListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeNameListTypeList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary List of Name Types
 *
 * @param request DescribeNameListTypeListRequest
 * @return DescribeNameListTypeListResponse
 */
async function describeNameListTypeList(request: DescribeNameListTypeListRequest): DescribeNameListTypeListResponse {
  var runtime = new $RuntimeOptions{};
  return describeNameListTypeListWithOptions(request, runtime);
}

model DescribeNameListVariablePageListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  name?: string(name='name', description='Variable name', example='age'),
  nameListType?: string(name='nameListType', description='Variable type', example='accountId'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10', example='10'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  value?: string(name='value', description='Name list value', example='valuexxx'),
}

model DescribeNameListVariablePageListResponseBody = {
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10', example='10'),
  requestId?: string(name='requestId', description='Request ID', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: [ 
    {
      capacity?: long(name='capacity', description='Used capacity', example='3'),
      description?: string(name='description', description='Description information.', example='变量描述'),
      gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1621578648000'),
      gmtModified?: long(name='gmtModified', description='Modification time', example='1565701886000'),
      id?: long(name='id', description='Name list ID', example='497'),
      leftCapacity?: long(name='leftCapacity', description='Remaining capacity', example='99997'),
      name?: string(name='name', description='Parameter name.', example='nl_UN8otElLb490'),
      nameListType?: string(name='nameListType', description='Name list type', example='手机号'),
      refObjId?: string(name='refObjId', description='Associated event eventCode', example='-1'),
      refObjType?: long(name='refObjType', description='Association type', example='EVENT'),
      sourceType?: string(name='sourceType', description='Data source', example='SAF'),
      title?: string(name='title', description='Title.', example='白名单'),
      type?: string(name='type', description='Variable type', example='NAME_LIST'),
      userId?: long(name='userId', description='User UID', example='180650758xxxxxxx'),
    }
  ](name='resultObject', description='Return object'),
  totalItem?: int32(name='totalItem', description='Total number of items', example='101'),
  totalPage?: int32(name='totalPage', description='Total number of pages', example='1'),
}

model DescribeNameListVariablePageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNameListVariablePageListResponseBody(name='body'),
}

/**
 * @summary Name List
 *
 * @param request DescribeNameListVariablePageListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeNameListVariablePageListResponse
 */
@context("describeNameListVariablePageListWithContext")
async function describeNameListVariablePageListWithOptions(request: DescribeNameListVariablePageListRequest, runtime: $RuntimeOptions): DescribeNameListVariablePageListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.currentPage)) {
    query['currentPage'] = request.currentPage;
  }
  if (!$isNull(request.name)) {
    query['name'] = request.name;
  }
  if (!$isNull(request.nameListType)) {
    query['nameListType'] = request.nameListType;
  }
  if (!$isNull(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.value)) {
    query['value'] = request.value;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeNameListVariablePageList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Name List
 *
 * @param request DescribeNameListVariablePageListRequest
 * @return DescribeNameListVariablePageListResponse
 */
async function describeNameListVariablePageList(request: DescribeNameListVariablePageListRequest): DescribeNameListVariablePageListResponse {
  var runtime = new $RuntimeOptions{};
  return describeNameListVariablePageListWithOptions(request, runtime);
}

model DescribeOperationLogMonitoringRequest {
  lang?: string(name='Lang', description='Language type of the returned message. Values:

- **zh** (default): Chinese
- **en**: English', example='zh'),
  endDate?: string(name='endDate', description='End date (in yyyy-MM-dd format, and the interval from the start date cannot exceed 90 days)', example='2025-07-30'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou'),
  startDate?: string(name='startDate', description='Start date (in yyyy-MM-dd format, and the interval from the current date cannot exceed 90 days)', example='2025-07-19'),
  userNameSearch?: string(name='userNameSearch', description='Operator.', example='root'),
}

model DescribeOperationLogMonitoringResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: [ 
    {
      dateGrouped?: string(name='dateGrouped', description='Time axis slice.', example='2025-07-19'),
      totalCount?: string(name='totalCount', description='Total count.', example='2'),
    }
  ](name='resultObject', description='Returned object.'),
}

model DescribeOperationLogMonitoringResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOperationLogMonitoringResponseBody(name='body'),
}

/**
 * @summary Query Operation Log Monitoring Statistics
 *
 * @param request DescribeOperationLogMonitoringRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeOperationLogMonitoringResponse
 */
@context("describeOperationLogMonitoringWithContext")
async function describeOperationLogMonitoringWithOptions(request: DescribeOperationLogMonitoringRequest, runtime: $RuntimeOptions): DescribeOperationLogMonitoringResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.endDate)) {
    query['endDate'] = request.endDate;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.startDate)) {
    query['startDate'] = request.startDate;
  }
  if (!$isNull(request.userNameSearch)) {
    query['userNameSearch'] = request.userNameSearch;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeOperationLogMonitoring',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Operation Log Monitoring Statistics
 *
 * @param request DescribeOperationLogMonitoringRequest
 * @return DescribeOperationLogMonitoringResponse
 */
async function describeOperationLogMonitoring(request: DescribeOperationLogMonitoringRequest): DescribeOperationLogMonitoringResponse {
  var runtime = new $RuntimeOptions{};
  return describeOperationLogMonitoringWithOptions(request, runtime);
}

model DescribeOperationLogPageListRequest {
  lang?: string(name='Lang', description='Set the language type for request and response messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  endDate?: long(name='endDate', description='End time.', example='1733364850919'),
  operationSummary?: string(name='operationSummary', description='Operation Summary.', example='Update'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10', example='10'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou'),
  startDate?: long(name='startDate', description='Start time.', example='1733364850919'),
  userNameSearch?: string(name='userNameSearch', description='User Name Search.', example='root'),
}

model DescribeOperationLogPageListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10', example='10'),
  resultObject?: [ 
    {
      clientIp?: string(name='clientIp', description='Client IP.', example='100.68.***.166'),
      gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1621578648000'),
      newContent?: string(name='newContent', description='Content after operation', example='@selfvariable_02'),
      oldContent?: string(name='oldContent', description='Content before operation', example='@selfvariable_02 + 1001'),
      operationSummary?: string(name='operationSummary', description='Operation summary', example='更新事件:决策引擎可观测性持续建设_事件A(de_afghcf6411)'),
      operationType?: string(name='operationType', description='Operation type.', example='CREATE_EVENT'),
      userName?: string(name='userName', description='Operator', example='root'),
    }
  ](name='resultObject', description='Returned object'),
  totalItem?: int32(name='totalItem', description='Total number of items', example='3'),
  totalPage?: int32(name='totalPage', description='Total number of pages', example='3'),
}

model DescribeOperationLogPageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOperationLogPageListResponseBody(name='body'),
}

/**
 * @summary Query event list by event name
 *
 * @param request DescribeOperationLogPageListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeOperationLogPageListResponse
 */
@context("describeOperationLogPageListWithContext")
async function describeOperationLogPageListWithOptions(request: DescribeOperationLogPageListRequest, runtime: $RuntimeOptions): DescribeOperationLogPageListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.currentPage)) {
    query['currentPage'] = request.currentPage;
  }
  if (!$isNull(request.endDate)) {
    query['endDate'] = request.endDate;
  }
  if (!$isNull(request.operationSummary)) {
    query['operationSummary'] = request.operationSummary;
  }
  if (!$isNull(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.startDate)) {
    query['startDate'] = request.startDate;
  }
  if (!$isNull(request.userNameSearch)) {
    query['userNameSearch'] = request.userNameSearch;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeOperationLogPageList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query event list by event name
 *
 * @param request DescribeOperationLogPageListRequest
 * @return DescribeOperationLogPageListResponse
 */
async function describeOperationLogPageList(request: DescribeOperationLogPageListRequest): DescribeOperationLogPageListResponse {
  var runtime = new $RuntimeOptions{};
  return describeOperationLogPageListWithOptions(request, runtime);
}

model DescribeOperatorListRequest {
  lang?: string(name='Lang', description='Set the language type for request and response messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou'),
}

model DescribeOperatorListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: [ 
    {
      fieldType?: string(name='fieldType', description='Return value type', example='STRING'),
      operators?: [ 
        {
          code?: string(name='code', description='Operator code', example='equals'),
          hasRightVariable?: boolean(name='hasRightVariable', description='Whether it contains a right variable', example='true'),
          memo?: string(name='memo', description='Description', example='等于'),
          name?: string(name='name', description='Operator name', example='等于'),
          rightVariables?: [ 
            {
              fieldName?: string(name='fieldName', description='Field name.', example='年龄'),
              fieldType?: string(name='fieldType', description='Field type.', example='INT'),
              fieldValue?: string(name='fieldValue', description='Field value.', example='20'),
            }
          ](name='rightVariables', description='Right variable object'),
        }
      ](name='operators', description='Operator list'),
    }
  ](name='resultObject', description='Return object'),
}

model DescribeOperatorListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOperatorListResponseBody(name='body'),
}

/**
 * @summary Query the operator mapping list based on customer ID
 *
 * @param request DescribeOperatorListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeOperatorListResponse
 */
@context("describeOperatorListWithContext")
async function describeOperatorListWithOptions(request: DescribeOperatorListRequest, runtime: $RuntimeOptions): DescribeOperatorListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeOperatorList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query the operator mapping list based on customer ID
 *
 * @param request DescribeOperatorListRequest
 * @return DescribeOperatorListResponse
 */
async function describeOperatorList(request: DescribeOperatorListRequest): DescribeOperatorListResponse {
  var runtime = new $RuntimeOptions{};
  return describeOperatorListWithOptions(request, runtime);
}

model DescribeOperatorListBySceneRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  scene?: string(name='scene', description='Scene type.', example='VELOCITY'),
}

model DescribeOperatorListBySceneResponseBody = {
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: [ 
    {
      fieldType?: string(name='fieldType', description='Return value type', example='STRING'),
      operators?: [ 
        {
          code?: string(name='code', description='Operator code', example='equals'),
          hasRightVariable?: boolean(name='hasRightVariable', description='Whether it contains a right variable', example='true'),
          memo?: string(name='memo', description='Description', example='等于'),
          name?: string(name='name', description='Operator name', example='等于'),
          rightVariables?: [ 
            {
              fieldName?: string(name='fieldName', description='Field name.', example='年龄'),
              fieldType?: string(name='fieldType', description='Field type.', example='INT'),
              fieldValue?: string(name='fieldValue', description='Field value.', example='20'),
            }
          ](name='rightVariables', description='Right variable object'),
        }
      ](name='operators', description='Operator list'),
    }
  ](name='resultObject', description='Return object'),
}

model DescribeOperatorListBySceneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOperatorListBySceneResponseBody(name='body'),
}

/**
 * @summary Query Operator Mapping List
 *
 * @param request DescribeOperatorListBySceneRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeOperatorListBySceneResponse
 */
@context("describeOperatorListBySceneWithContext")
async function describeOperatorListBySceneWithOptions(request: DescribeOperatorListBySceneRequest, runtime: $RuntimeOptions): DescribeOperatorListBySceneResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.scene)) {
    query['scene'] = request.scene;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeOperatorListByScene',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Operator Mapping List
 *
 * @param request DescribeOperatorListBySceneRequest
 * @return DescribeOperatorListBySceneResponse
 */
async function describeOperatorListByScene(request: DescribeOperatorListBySceneRequest): DescribeOperatorListBySceneResponse {
  var runtime = new $RuntimeOptions{};
  return describeOperatorListBySceneWithOptions(request, runtime);
}

model DescribeOperatorListByTypeRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou'),
}

model DescribeOperatorListByTypeResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: [ 
    {
      fieldType?: string(name='fieldType', description='Return value type', example='STRING'),
      operators?: [ 
        {
          code?: string(name='code', description='Operator code', example='equals'),
          hasRightVariable?: boolean(name='hasRightVariable', description='Whether it contains a right variable', example='true'),
          name?: string(name='name', description='Operator name', example='等于'),
        }
      ](name='operators', description='Operator list'),
    }
  ](name='resultObject', description='Return object'),
}

model DescribeOperatorListByTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOperatorListByTypeResponseBody(name='body'),
}

/**
 * @summary Query Operator Mapping List
 *
 * @param request DescribeOperatorListByTypeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeOperatorListByTypeResponse
 */
@context("describeOperatorListByTypeWithContext")
async function describeOperatorListByTypeWithOptions(request: DescribeOperatorListByTypeRequest, runtime: $RuntimeOptions): DescribeOperatorListByTypeResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeOperatorListByType',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Operator Mapping List
 *
 * @param request DescribeOperatorListByTypeRequest
 * @return DescribeOperatorListByTypeResponse
 */
async function describeOperatorListByType(request: DescribeOperatorListByTypeRequest): DescribeOperatorListByTypeResponse {
  var runtime = new $RuntimeOptions{};
  return describeOperatorListByTypeWithOptions(request, runtime);
}

model DescribeOssAuthStatusRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and responses, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeOssAuthStatusResponseBody = {
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: string(name='resultObject', description='Return object', example='true'),
}

model DescribeOssAuthStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOssAuthStatusResponseBody(name='body'),
}

/**
 * @summary Check Oss Authorization
 *
 * @param request DescribeOssAuthStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeOssAuthStatusResponse
 */
@context("describeOssAuthStatusWithContext")
async function describeOssAuthStatusWithOptions(request: DescribeOssAuthStatusRequest, runtime: $RuntimeOptions): DescribeOssAuthStatusResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeOssAuthStatus',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Check Oss Authorization
 *
 * @param request DescribeOssAuthStatusRequest
 * @return DescribeOssAuthStatusResponse
 */
async function describeOssAuthStatus(request: DescribeOssAuthStatusRequest): DescribeOssAuthStatusResponse {
  var runtime = new $RuntimeOptions{};
  return describeOssAuthStatusWithOptions(request, runtime);
}

model DescribeOssPolicyRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou'),
  scene?: string(name='scene', description='Scene

This parameter is required.', example='NAME_LIST'),
}

model DescribeOssPolicyResponseBody = {
  accessId?: string(name='AccessId', description='accessId, a parameter used in OSS SDK uploads, corresponding to OSSAccessKeyId', example='LTAxxxxxxxxxxxx'),
  host?: string(name='Host', description='OSS host ID.', example='testvm.biubiubiuu.com'),
  key?: string(name='Key', description='Key required for file upload.', example='saf/a/uid/ccc'),
  policy?: string(name='Policy', description='OSS security policy', example='eyJleHBpxxxxxx'),
  signature?: string(name='Signature', description='Signature data.', example='tzl1wL4q8rR/xxxxxx'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
}

model DescribeOssPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOssPolicyResponseBody(name='body'),
}

/**
 * @summary Get OSS Policy
 *
 * @param request DescribeOssPolicyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeOssPolicyResponse
 */
@context("describeOssPolicyWithContext")
async function describeOssPolicyWithOptions(request: DescribeOssPolicyRequest, runtime: $RuntimeOptions): DescribeOssPolicyResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.scene)) {
    query['scene'] = request.scene;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeOssPolicy',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Get OSS Policy
 *
 * @param request DescribeOssPolicyRequest
 * @return DescribeOssPolicyResponse
 */
async function describeOssPolicy(request: DescribeOssPolicyRequest): DescribeOssPolicyResponse {
  var runtime = new $RuntimeOptions{};
  return describeOssPolicyWithOptions(request, runtime);
}

model DescribeOssTokenRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  fileName?: string(name='fileName', description='File name.', example='test.csv'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  uploadType?: string(name='uploadType', description='Upload type', example='COMMUNITY_SAMPLE'),
}

model DescribeOssTokenResponseBody = {
  accessId?: string(name='AccessId', description='AccessKeyId for OSS file upload.', example='LTAxxxxxxxxxxxx'),
  host?: string(name='Host', description='Host address.', example='kf.sunwoosoft.com'),
  key?: string(name='Key', description='The Key required for file upload.', example='saf/de/namelist/e924/ufzgsedX9bd3a7'),
  policy?: string(name='Policy', description='Permission policy for ossbucket.', example='eyJleHBpcmF0aW9uIjoiMjAyNS0wNy0zMFQwNjowNTo0OS45NTRaIiwiY29uZGl0aW9ucyI6W1siY29udGVudC1sZW5ndGgtcmFuZ2UiLDAsMTA0ODU3NjAwMF0sWyJlcSIsIiRrZXkiLCJzYWZcL2RlXC9uYW1lbGlzdFwvZTkyNFwvdWZ6Z3NlZFg5Ymxxxxxxxxxxx'),
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  signature?: string(name='Signature', description='OSS signature.', example='n29by5MWBmAjcweVoPEY/OHktog='),
  stsToken?: string(name='StsToken', description='Temporary identity credential.', example='tT44bMQxxxxxxxxxxxxxxx'),
}

model DescribeOssTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOssTokenResponseBody(name='body'),
}

/**
 * @summary Get File Upload Credentials
 *
 * @param request DescribeOssTokenRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeOssTokenResponse
 */
@context("describeOssTokenWithContext")
async function describeOssTokenWithOptions(request: DescribeOssTokenRequest, runtime: $RuntimeOptions): DescribeOssTokenResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.fileName)) {
    query['fileName'] = request.fileName;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.uploadType)) {
    query['uploadType'] = request.uploadType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeOssToken',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Get File Upload Credentials
 *
 * @param request DescribeOssTokenRequest
 * @return DescribeOssTokenResponse
 */
async function describeOssToken(request: DescribeOssTokenRequest): DescribeOssTokenResponse {
  var runtime = new $RuntimeOptions{};
  return describeOssTokenWithOptions(request, runtime);
}

model DescribeParamByEventCodesRequest {
  lang?: string(name='Lang', description='Set the language type for request and response, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  eventCodes?: string(name='eventCodes', description='Event code.

This parameter is required.', example='account_abuse_pro,account_abuse'),
  parma?: string(name='parma', description='Query condition', example='标题/描述'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeParamByEventCodesResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: [ 
    {
      code?: string(name='code', description='Return code.', example='age'),
      name?: string(name='name', description='Name', example='年龄'),
    }
  ](name='resultObject', description='Return object'),
}

model DescribeParamByEventCodesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeParamByEventCodesResponseBody(name='body'),
}

/**
 * @summary Query Event Property List
 *
 * @param request DescribeParamByEventCodesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeParamByEventCodesResponse
 */
@context("describeParamByEventCodesWithContext")
async function describeParamByEventCodesWithOptions(request: DescribeParamByEventCodesRequest, runtime: $RuntimeOptions): DescribeParamByEventCodesResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.eventCodes)) {
    query['eventCodes'] = request.eventCodes;
  }
  if (!$isNull(request.parma)) {
    query['parma'] = request.parma;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeParamByEventCodes',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Event Property List
 *
 * @param request DescribeParamByEventCodesRequest
 * @return DescribeParamByEventCodesResponse
 */
async function describeParamByEventCodes(request: DescribeParamByEventCodesRequest): DescribeParamByEventCodesResponse {
  var runtime = new $RuntimeOptions{};
  return describeParamByEventCodesWithOptions(request, runtime);
}

model DescribePocOssTokenRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribePocOssTokenResponseBody = {
  accessId?: string(name='AccessId', description='AccessKeyId for OSS file upload', example='LTAxxxxxxxxxxxx'),
  host?: string(name='Host', description='Host address.', example='192.168.34.191'),
  key?: string(name='Key', description='The Key required for file upload.', example='saf/de/namelist/e924/ufzgsedX9bd3a7'),
  policy?: string(name='Policy', description='OSS security policy.', example='eyJleHBpcmF0aW9uIjoiMjAyNS0wNy0zMFQwNjowNTo0OS45NTRaIiwiY29uZGl0aW9ucyI6W1siY29udGVudC1sZW5ndGgtcmFuZ2UiLDAsMTA0ODU3NjAwMF0sWyJlcSIsIiRrZXkiLCJzYWZcL2RlXC9uYW1lbGlzdFwvZTkyNFwvdWZ6Z3NlZFg5Ymxxxxxxxxxxx'),
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  signature?: string(name='Signature', description='Upload signature information.', example='0lxQEWM0BqHd476JJE0fNXdS3UA='),
  resultObject?: boolean(name='resultObject', description='Return result.', example='true'),
}

model DescribePocOssTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePocOssTokenResponseBody(name='body'),
}

/**
 * @summary Get File Upload Credentials
 *
 * @param request DescribePocOssTokenRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribePocOssTokenResponse
 */
@context("describePocOssTokenWithContext")
async function describePocOssTokenWithOptions(request: DescribePocOssTokenRequest, runtime: $RuntimeOptions): DescribePocOssTokenResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribePocOssToken',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Get File Upload Credentials
 *
 * @param request DescribePocOssTokenRequest
 * @return DescribePocOssTokenResponse
 */
async function describePocOssToken(request: DescribePocOssTokenRequest): DescribePocOssTokenResponse {
  var runtime = new $RuntimeOptions{};
  return describePocOssTokenWithOptions(request, runtime);
}

model DescribePocTaskListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, with a default value of 10.', example='10'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou'),
  type?: string(name='type', description='Query type.', example='SAF_CONSOLE'),
}

model DescribePocTaskListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, with a default value of 10.', example='10'),
  resultObject?: [ 
    {
      createTime?: string(name='createTime', description='Creation time.', example='1753804800000'),
      downloadUrl?: string(name='downloadUrl', description='Download URL.', example='https://xxxxx-oss-xxxxx.xxxxxx.aliyuncs.com/xx/xx/xxx/xxxxxx.csv?Expires=1753433384&OSSAccessKeyId=xxxxxxxxx&Signature=%2F%xxxxxxxxxxxx%3D'),
      fileType?: string(name='fileType', description='File type.', example='EXCEL'),
      serviceName?: string(name='serviceName', description='Service name.', example='注册风险识别'),
      status?: string(name='status', description='Status.', example='WAIT_CHECK'),
      taskId?: string(name='taskId', description='Task ID.', example='7'),
      taskName?: string(name='taskName', description='Task name.', example='任务'),
      updateTime?: string(name='updateTime', description='Last modified time.', example='1753804800000'),
    }
  ](name='resultObject', description='Returned object.'),
  totalItem?: int32(name='totalItem', description='Total number of items.', example='6'),
  totalPage?: int32(name='totalPage', description='Total number of pages.', example='1'),
}

model DescribePocTaskListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePocTaskListResponseBody(name='body'),
}

/**
 * @summary Get POC Task List
 *
 * @param request DescribePocTaskListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribePocTaskListResponse
 */
@context("describePocTaskListWithContext")
async function describePocTaskListWithOptions(request: DescribePocTaskListRequest, runtime: $RuntimeOptions): DescribePocTaskListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.currentPage)) {
    query['currentPage'] = request.currentPage;
  }
  if (!$isNull(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.type)) {
    query['type'] = request.type;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribePocTaskList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Get POC Task List
 *
 * @param request DescribePocTaskListRequest
 * @return DescribePocTaskListResponse
 */
async function describePocTaskList(request: DescribePocTaskListRequest): DescribePocTaskListResponse {
  var runtime = new $RuntimeOptions{};
  return describePocTaskListWithOptions(request, runtime);
}

model DescribePrivateStackRequest {
  regId?: string(name='regId', description='Region Code', example='cn-hangzhou'),
}

model DescribePrivateStackResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return Object', example='true'),
}

model DescribePrivateStackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePrivateStackResponseBody(name='body'),
}

/**
 * @summary Determine if Stack Private Domain Mode is Enabled
 *
 * @param request DescribePrivateStackRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribePrivateStackResponse
 */
@context("describePrivateStackWithContext")
async function describePrivateStackWithOptions(request: DescribePrivateStackRequest, runtime: $RuntimeOptions): DescribePrivateStackResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribePrivateStack',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Determine if Stack Private Domain Mode is Enabled
 *
 * @param request DescribePrivateStackRequest
 * @return DescribePrivateStackResponse
 */
async function describePrivateStack(request: DescribePrivateStackRequest): DescribePrivateStackResponse {
  var runtime = new $RuntimeOptions{};
  return describePrivateStackWithOptions(request, runtime);
}

model DescribeQueryVariableDetailRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  id?: long(name='id', description='Variable ID

This parameter is required.', example='355'),
  regId?: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou'),
}

model DescribeQueryVariableDetailResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    dataSourceCode?: long(name='dataSourceCode', description='Data source code.', example='ds_vcaoii1697'),
    dataSourceName?: string(name='dataSourceName', description='Data source name', example='名称数据源'),
    description?: string(name='description', description='Description.', example='变量描述'),
    eventCode?: string(name='eventCode', description='Event code', example='de_aszbjb7236'),
    expression?: string(name='expression', description='Expression.', example='SELECT  AVG( $source )\\\\nFROM ds_vcaoii1697 \\\\nWHERE  $age > 0'),
    expressionTitle?: string(name='expressionTitle', description='Expression title.', example='SELECT  AVG( $source )\\\\nFROM testCase\\\\nWHERE  $age > 0'),
    expressionVariable?: string(name='expressionVariable', description='Expression variable.', example='[96426]'),
    id?: long(name='id', description='Variable ID', example='355'),
    outlier?: string(name='outlier', description='Outlier', example='-1'),
    outputs?: string(name='outputs', description='Output results.', example='DOUBLE'),
    title?: string(name='title', description='Title.', example='自定义查询变量标题'),
  }(name='resultObject', description='Returned object'),
}

model DescribeQueryVariableDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeQueryVariableDetailResponseBody(name='body'),
}

/**
 * @summary Query Variable Detail Query
 *
 * @param request DescribeQueryVariableDetailRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeQueryVariableDetailResponse
 */
@context("describeQueryVariableDetailWithContext")
async function describeQueryVariableDetailWithOptions(request: DescribeQueryVariableDetailRequest, runtime: $RuntimeOptions): DescribeQueryVariableDetailResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.id)) {
    query['id'] = request.id;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeQueryVariableDetail',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Variable Detail Query
 *
 * @param request DescribeQueryVariableDetailRequest
 * @return DescribeQueryVariableDetailResponse
 */
async function describeQueryVariableDetail(request: DescribeQueryVariableDetailRequest): DescribeQueryVariableDetailResponse {
  var runtime = new $RuntimeOptions{};
  return describeQueryVariableDetailWithOptions(request, runtime);
}

model DescribeQueryVariablePageListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  currentPage?: long(name='currentPage', description='Current page number.', example='1'),
  dataSourceCode?: string(name='dataSourceCode', description='Data source code', example='ds_vcaoii1697'),
  eventCode?: string(name='eventCode', description='Event code', example='de_ahpayh4121'),
  name?: string(name='name', description='Query variable name', example='名称'),
  pageSize?: long(name='pageSize', description='Page size, default value is 10', example='10'),
  regId?: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou'),
}

model DescribeQueryVariablePageListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: long(name='currentPage', description='Pagination parameter, current page.', example='1'),
  pageSize?: long(name='pageSize', description='Page size, default value is 10', example='10'),
  resultObject?: [ 
    {
      dataSourceCode?: long(name='dataSourceCode', description='Data source code.', example='ds_vcaoii1697'),
      dataSourceName?: string(name='dataSourceName', description='Data source name.', example='姓名数据源'),
      description?: string(name='description', description='Description information.', example='变量描述'),
      eventName?: string(name='eventName', description='Event name.', example='注册风险'),
      fieldType?: string(name='fieldType', description='Return value type', example='STRING'),
      gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1621578648000'),
      gmtModified?: long(name='gmtModified', description='Modification time', example='1565701886000'),
      id?: long(name='id', description='Query variable primary key ID', example='497'),
      name?: string(name='name', description='Query variable name', example='查询变量名称'),
      status?: string(name='status', description='Status.', example='ENABLE'),
      total?: long(name='total', description='Total count', example='24'),
      version?: long(name='version', description='Version number.', example='1'),
    }
  ](name='resultObject', description='Return object'),
  totalItem?: long(name='totalItem', description='Total items', example='6'),
  totalPage?: long(name='totalPage', description='Total pages', example='1'),
}

model DescribeQueryVariablePageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeQueryVariablePageListResponseBody(name='body'),
}

/**
 * @summary 查询变量列表查询
 *
 * @param request DescribeQueryVariablePageListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeQueryVariablePageListResponse
 */
@context("describeQueryVariablePageListWithContext")
async function describeQueryVariablePageListWithOptions(request: DescribeQueryVariablePageListRequest, runtime: $RuntimeOptions): DescribeQueryVariablePageListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.currentPage)) {
    query['currentPage'] = request.currentPage;
  }
  if (!$isNull(request.dataSourceCode)) {
    query['dataSourceCode'] = request.dataSourceCode;
  }
  if (!$isNull(request.eventCode)) {
    query['eventCode'] = request.eventCode;
  }
  if (!$isNull(request.name)) {
    query['name'] = request.name;
  }
  if (!$isNull(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeQueryVariablePageList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询变量列表查询
 *
 * @param request DescribeQueryVariablePageListRequest
 * @return DescribeQueryVariablePageListResponse
 */
async function describeQueryVariablePageList(request: DescribeQueryVariablePageListRequest): DescribeQueryVariablePageListResponse {
  var runtime = new $RuntimeOptions{};
  return describeQueryVariablePageListWithOptions(request, runtime);
}

model DescribeRecommendSceneVariablesRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region Code', example='cn-hangzhou'),
  sampleId?: long(name='sampleId', description='Sample ID

This parameter is required.', example='5467'),
}

model DescribeRecommendSceneVariablesResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return Object', example='true'),
}

model DescribeRecommendSceneVariablesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRecommendSceneVariablesResponseBody(name='body'),
}

/**
 * @summary Query Variable List under Sample & Scenario
 *
 * @param request DescribeRecommendSceneVariablesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeRecommendSceneVariablesResponse
 */
@context("describeRecommendSceneVariablesWithContext")
async function describeRecommendSceneVariablesWithOptions(request: DescribeRecommendSceneVariablesRequest, runtime: $RuntimeOptions): DescribeRecommendSceneVariablesResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.sampleId)) {
    query['sampleId'] = request.sampleId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeRecommendSceneVariables',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Variable List under Sample & Scenario
 *
 * @param request DescribeRecommendSceneVariablesRequest
 * @return DescribeRecommendSceneVariablesResponse
 */
async function describeRecommendSceneVariables(request: DescribeRecommendSceneVariablesRequest): DescribeRecommendSceneVariablesResponse {
  var runtime = new $RuntimeOptions{};
  return describeRecommendSceneVariablesWithOptions(request, runtime);
}

model DescribeRecommendTaskDetailRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and responses, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou'),
  taskId?: long(name='taskId', description='Task ID.', example='887'),
}

model DescribeRecommendTaskDetailResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    eventCode?: string(name='eventCode', description='Event code', example='de_aszbjb7236'),
    eventName?: string(name='eventName', description='Event name.', example='注册风险'),
    expectVelocities?: [ string ](name='expectVelocities', description='Comparison indicators'),
    gmtCreate?: long(name='gmtCreate', description='Creation time', example='1621578648000'),
    normalSize?: long(name='normalSize', description='Number of normal samples', example='100'),
    recommendRuleDTOs?: [ 
      {
        computeExpression?: string(name='computeExpression', description='Calculation path', example='1&2'),
        hitSample?: long(name='hitSample', description='Number of hit samples', example='99'),
        id?: long(name='id', description='Primary key ID of the rule', example='30'),
        notHitSample?: long(name='notHitSample', description='Number of unhit samples', example='1'),
        recommendRules?: [ 
          {
            left?: string(name='left', description='Left variable', example='age'),
            operator?: string(name='operator', description='Operator', example='equals'),
            right?: string(name='right', description='Right variable', example='20'),
          }
        ](name='recommendRules', description='List of candidate rules'),
        ruleId?: string(name='ruleId', description='Strategy ID', example='102224'),
        ruleName?: string(name='ruleName', description='Rule name', example='营销风险识别评分_高风险_拒绝_副本'),
        status?: string(name='status', description='Status', example='NO_RULE'),
        velocities?: string(name='velocities', description='List of indicators in JSON string format', example='[{"key":"dxkkLw8fe18","value":"2"}]'),
      }
    ](name='recommendRuleDTOs', description='Recommended strategy list'),
    recommendVariableDTOs?: [ 
      {
        id?: long(name='id', description='Primary key ID', example='234'),
        title?: string(name='title', description='Title', example='手机号'),
      }
    ](name='recommendVariableDTOs', description='Selected variable list'),
    riskSize?: long(name='riskSize', description='Number of risk samples', example='10'),
    sampleName?: string(name='sampleName', description='Sample name', example='白样本'),
    sampleScene?: string(name='sampleScene', description='Sample scenario', example='account_abuse_detection'),
    sampleSceneName?: string(name='sampleSceneName', description='Sample scenario name', example='防虚假账号'),
    taskId?: long(name='taskId', description='Task ID', example='887'),
    taskName?: string(name='taskName', description='Task name', example='策略推荐任务'),
    taskStatus?: string(name='taskStatus', description='Task status.', example='CREATE'),
  }(name='resultObject', description='Return result'),
}

model DescribeRecommendTaskDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRecommendTaskDetailResponseBody(name='body'),
}

/**
 * @summary Variable Recommendation Details Query Interface
 *
 * @param request DescribeRecommendTaskDetailRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeRecommendTaskDetailResponse
 */
@context("describeRecommendTaskDetailWithContext")
async function describeRecommendTaskDetailWithOptions(request: DescribeRecommendTaskDetailRequest, runtime: $RuntimeOptions): DescribeRecommendTaskDetailResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.taskId)) {
    query['taskId'] = request.taskId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeRecommendTaskDetail',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Variable Recommendation Details Query Interface
 *
 * @param request DescribeRecommendTaskDetailRequest
 * @return DescribeRecommendTaskDetailResponse
 */
async function describeRecommendTaskDetail(request: DescribeRecommendTaskDetailRequest): DescribeRecommendTaskDetailResponse {
  var runtime = new $RuntimeOptions{};
  return describeRecommendTaskDetailWithOptions(request, runtime);
}

model DescribeRecommendTaskPageListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  currentPage?: string(name='currentPage', description='Current page number', example='1'),
  pageSize?: string(name='pageSize', description='Page size, with a default value of 10', example='10'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  taskName?: string(name='taskName', description='Task name', example='策略推荐任务'),
}

model DescribeRecommendTaskPageListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, with a default value of 10', example='10'),
  resultObject?: [ 
    {
      expectVelocities?: [ string ](name='expectVelocities', description='Impact indicators'),
      gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1621578648000'),
      normalCount?: long(name='normalCount', description='Number of samples', example='100'),
      normalSize?: long(name='normalSize', description='Number of normal samples', example='10'),
      riskCount?: long(name='riskCount', description='Number of records displayed on the current page.', example='100'),
      riskSize?: long(name='riskSize', description='Number of risk samples', example='5'),
      sampleName?: string(name='sampleName', description='Sample name', example='白样本'),
      sampleScene?: string(name='sampleScene', description='Sample scenario', example='account_abuse_detection'),
      taskId?: long(name='taskId', description='Task ID.', example='240c93ddffa74e38be3a00375eb3041d'),
      taskName?: string(name='taskName', description='Task name.', example='策略推荐任务'),
      taskStatus?: string(name='taskStatus', description='Task status.', example='CREATE'),
    }
  ](name='resultObject', description='Returned object'),
  totalItem?: int32(name='totalItem', description='Total number of items', example='3'),
  totalPage?: int32(name='totalPage', description='Total number of pages.', example='1'),
}

model DescribeRecommendTaskPageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRecommendTaskPageListResponseBody(name='body'),
}

/**
 * @summary Variable Recommendation List Query Interface
 *
 * @param request DescribeRecommendTaskPageListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeRecommendTaskPageListResponse
 */
@context("describeRecommendTaskPageListWithContext")
async function describeRecommendTaskPageListWithOptions(request: DescribeRecommendTaskPageListRequest, runtime: $RuntimeOptions): DescribeRecommendTaskPageListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.currentPage)) {
    query['currentPage'] = request.currentPage;
  }
  if (!$isNull(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.taskName)) {
    query['taskName'] = request.taskName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeRecommendTaskPageList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Variable Recommendation List Query Interface
 *
 * @param request DescribeRecommendTaskPageListRequest
 * @return DescribeRecommendTaskPageListResponse
 */
async function describeRecommendTaskPageList(request: DescribeRecommendTaskPageListRequest): DescribeRecommendTaskPageListResponse {
  var runtime = new $RuntimeOptions{};
  return describeRecommendTaskPageListWithOptions(request, runtime);
}

model DescribeRecommendVariablesVelocityRequest {
  lang?: string(name='Lang', description='Set the language type for request and response, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region Code', example='cn-hangzhou'),
  taskId?: long(name='taskId', description='Task ID

This parameter is required.', example='6770764'),
  variableIdsStr?: string(name='variableIdsStr', description='Variable IDs', example='[\\\\"232\\\\",\\\\"233\\\\"]'),
}

model DescribeRecommendVariablesVelocityResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return Object', example='true'),
}

model DescribeRecommendVariablesVelocityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRecommendVariablesVelocityResponseBody(name='body'),
}

/**
 * @summary Query Indicators Information under Variables
 *
 * @param request DescribeRecommendVariablesVelocityRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeRecommendVariablesVelocityResponse
 */
@context("describeRecommendVariablesVelocityWithContext")
async function describeRecommendVariablesVelocityWithOptions(request: DescribeRecommendVariablesVelocityRequest, runtime: $RuntimeOptions): DescribeRecommendVariablesVelocityResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.taskId)) {
    query['taskId'] = request.taskId;
  }
  if (!$isNull(request.variableIdsStr)) {
    query['variableIdsStr'] = request.variableIdsStr;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeRecommendVariablesVelocity',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Indicators Information under Variables
 *
 * @param request DescribeRecommendVariablesVelocityRequest
 * @return DescribeRecommendVariablesVelocityResponse
 */
async function describeRecommendVariablesVelocity(request: DescribeRecommendVariablesVelocityRequest): DescribeRecommendVariablesVelocityResponse {
  var runtime = new $RuntimeOptions{};
  return describeRecommendVariablesVelocityWithOptions(request, runtime);
}

model DescribeRecommendVelocitiesRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and responses, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  code?: string(name='code', description='Metric code', example='coupon_abuse_detection'),
  regId?: string(name='regId', description='Region ID', example='cn-hangzhou'),
  type?: string(name='type', description='Metric type', example='recommend_velocity'),
}

model DescribeRecommendVelocitiesResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DescribeRecommendVelocitiesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRecommendVelocitiesResponseBody(name='body'),
}

/**
 * @summary Query Supported Metrics List
 *
 * @param request DescribeRecommendVelocitiesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeRecommendVelocitiesResponse
 */
@context("describeRecommendVelocitiesWithContext")
async function describeRecommendVelocitiesWithOptions(request: DescribeRecommendVelocitiesRequest, runtime: $RuntimeOptions): DescribeRecommendVelocitiesResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.code)) {
    query['code'] = request.code;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.type)) {
    query['type'] = request.type;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeRecommendVelocities',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Supported Metrics List
 *
 * @param request DescribeRecommendVelocitiesRequest
 * @return DescribeRecommendVelocitiesResponse
 */
async function describeRecommendVelocities(request: DescribeRecommendVelocitiesRequest): DescribeRecommendVelocitiesResponse {
  var runtime = new $RuntimeOptions{};
  return describeRecommendVelocitiesWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  lang?: string(name='Lang', description='Set the language type for requests and responses. The default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeRegionsResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DescribeRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRegionsResponseBody(name='body'),
}

/**
 * @summary Query the list of regions supported by ApiGateway
 *
 * @param request DescribeRegionsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeRegionsResponse
 */
@context("describeRegionsWithContext")
async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: $RuntimeOptions): DescribeRegionsResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeRegions',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query the list of regions supported by ApiGateway
 *
 * @param request DescribeRegionsRequest
 * @return DescribeRegionsResponse
 */
async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new $RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeRequestHitRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  sRequestId?: string(name='sRequestId', description='Request ID.

This parameter is required.', example='60C97040-D5D5-4906-9522-B9B413730CAA'),
}

model DescribeRequestHitResponseBody = {
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: {
    eventCode?: string(name='eventCode', description='Event code', example='de_aszbjb7236'),
    eventName?: string(name='eventName', description='Event name.', example='注册风险'),
    inputs?: string(name='inputs', description='Input parameters.', example='{\\\\"eventCode\\\\":\\\\"de_afghcf6411\\\\",\\\\"ip\\\\":\\\\"196.168.0.1\\\\",\\\\"DEtest222\\\\":9007199254740999,\\\\"age\\\\":20}'),
    outputs?: string(name='outputs', description='Output parameters', example='{\\\\"tags\\\\":\\\\"rm0102,test_tag,age\\\\",\\\\"score\\\\":\\\\"30.0\\\\",\\\\"extend\\\\":\\\\"{\\\\\\\\\\\\"OUT_V01\\\\\\\\\\\\":\\\\\\\\\\\\"Maritime\\\\\\\\\\\\",\\\\\\\\\\\\"OUT_V02\\\\\\\\\\\\":\\\\\\\\\\\\"Lome\\\\\\\\\\\\",\\\\\\\\\\\\"OUT_V03\\\\\\\\\\\\":\\\\\\\\\\\\"196.168.0.1_A\\\\\\\\\\\\"}\\\\",\\\\"finalDecision\\\\":\\\\"REJECT\\\\"}'),
    requestTime?: long(name='requestTime', description='Timestamp of the request.', example='1752571330000'),
    ruleHitRecords?: [ 
      {
        cost?: int32(name='cost', description='Duration', example='1'),
        hitSuccessful?: boolean(name='hitSuccessful', description='Whether the rule was hit.', example='true'),
        isShowDetail?: boolean(name='isShowDetail', description='Whether to show details', example='true'),
        order?: int32(name='order', description='Order.', example='1'),
        ruleId?: string(name='ruleId', description='Policy ID', example='101544'),
        ruleName?: string(name='ruleName', description='Policy name', example='注册手机号是11位数字'),
        ruleSnapshotId?: string(name='ruleSnapshotId', description='Rule snapshot ID', example='27'),
        ruleStatus?: string(name='ruleStatus', description='Policy status', example='RUNNING'),
      }
    ](name='ruleHitRecords', description='Details of the executed rules.'),
    sRequestId?: string(name='sRequestId', description='Request ID', example='60C97040-D5D5-4906-9522-B9B413730CAA'),
    totalCost?: long(name='totalCost', description='Total amount of the request', example='4'),
  }(name='resultObject', description='Return object'),
}

model DescribeRequestHitResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRequestHitResponseBody(name='body'),
}

/**
 * @summary Query Request Hit Details
 *
 * @param request DescribeRequestHitRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeRequestHitResponse
 */
@context("describeRequestHitWithContext")
async function describeRequestHitWithOptions(request: DescribeRequestHitRequest, runtime: $RuntimeOptions): DescribeRequestHitResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.sRequestId)) {
    query['sRequestId'] = request.sRequestId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeRequestHit',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Request Hit Details
 *
 * @param request DescribeRequestHitRequest
 * @return DescribeRequestHitResponse
 */
async function describeRequestHit(request: DescribeRequestHitRequest): DescribeRequestHitResponse {
  var runtime = new $RuntimeOptions{};
  return describeRequestHitWithOptions(request, runtime);
}

model DescribeRequestPeakReportRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeRequestPeakReportResponseBody = {
  code?: string(name='code', description='Status code', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code.', example='200'),
  message?: string(name='message', description='Error message.', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: [ 
    {
      ratio?: string(name='ratio', description='Return value', example='1.0'),
      value?: string(name='value', description='Return text', example='1.0 次/秒'),
    }
  ](name='resultObject', description='Return object'),
  success?: boolean(name='success', description='Whether the request was successful', example='true'),
}

model DescribeRequestPeakReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRequestPeakReportResponseBody(name='body'),
}

/**
 * @summary Request Peak
 *
 * @param request DescribeRequestPeakReportRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeRequestPeakReportResponse
 */
@context("describeRequestPeakReportWithContext")
async function describeRequestPeakReportWithOptions(request: DescribeRequestPeakReportRequest, runtime: $RuntimeOptions): DescribeRequestPeakReportResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeRequestPeakReport',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Request Peak
 *
 * @param request DescribeRequestPeakReportRequest
 * @return DescribeRequestPeakReportResponse
 */
async function describeRequestPeakReport(request: DescribeRequestPeakReportRequest): DescribeRequestPeakReportResponse {
  var runtime = new $RuntimeOptions{};
  return describeRequestPeakReportWithOptions(request, runtime);
}

model DescribeResultCountRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  beginTime?: long(name='beginTime', description='Start time, accurate to milliseconds (ms).

This parameter is required.', example='1739841750000'),
  endTime?: long(name='endTime', description='End time, accurate to milliseconds (ms).

This parameter is required.', example='1739843750000'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeResultCountResponseBody = {
  code?: string(name='code', description='Status code.', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error message.', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: [ 
    {
      result?: string(name='result', description='Execution result', example='PASS'),
      total?: string(name='total', description='Quantity', example='200'),
    }
  ](name='resultObject', description='Return object'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model DescribeResultCountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeResultCountResponseBody(name='body'),
}

/**
 * @summary Drill-down Analysis
 *
 * @param request DescribeResultCountRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeResultCountResponse
 */
@context("describeResultCountWithContext")
async function describeResultCountWithOptions(request: DescribeResultCountRequest, runtime: $RuntimeOptions): DescribeResultCountResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.beginTime)) {
    query['beginTime'] = request.beginTime;
  }
  if (!$isNull(request.endTime)) {
    query['endTime'] = request.endTime;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeResultCount',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Drill-down Analysis
 *
 * @param request DescribeResultCountRequest
 * @return DescribeResultCountResponse
 */
async function describeResultCount(request: DescribeResultCountRequest): DescribeResultCountResponse {
  var runtime = new $RuntimeOptions{};
  return describeResultCountWithOptions(request, runtime);
}

model DescribeRiskLineChartRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  beginTime?: long(name='beginTime', description='Query start time, accurate to milliseconds (ms).

This parameter is required.', example='1739841750000'),
  endTime?: long(name='endTime', description='End time, accurate to milliseconds (ms).

This parameter is required.', example='1748491200000'),
  eventCodes?: string(name='eventCodes', description='Event codes, separated by commas (,).', example='de_afghcf6411,de_awkhwh0314'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeRiskLineChartResponseBody = {
  code?: string(name='code', description='Status code.', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error message.', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: {
    series?: [ 
      {
        data?: [ string ](name='data', description='Line chart data'),
        name?: string(name='name', description='Title of the line segment in the line chart', example='rm0102'),
      }
    ](name='series', description='Data list'),
    xaxis?: {
      data?: [ string ](name='data', description='Returns x-axis data points'),
    }(name='xaxis', description='Details of xaxis node.'),
  }(name='resultObject', description='Returned object'),
  success?: boolean(name='success', description='Whether the request was successful.', example='true'),
}

model DescribeRiskLineChartResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRiskLineChartResponseBody(name='body'),
}

/**
 * @summary Risk map overview chart (line chart)
 *
 * @param request DescribeRiskLineChartRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeRiskLineChartResponse
 */
@context("describeRiskLineChartWithContext")
async function describeRiskLineChartWithOptions(request: DescribeRiskLineChartRequest, runtime: $RuntimeOptions): DescribeRiskLineChartResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.beginTime)) {
    query['beginTime'] = request.beginTime;
  }
  if (!$isNull(request.endTime)) {
    query['endTime'] = request.endTime;
  }
  if (!$isNull(request.eventCodes)) {
    query['eventCodes'] = request.eventCodes;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeRiskLineChart',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Risk map overview chart (line chart)
 *
 * @param request DescribeRiskLineChartRequest
 * @return DescribeRiskLineChartResponse
 */
async function describeRiskLineChart(request: DescribeRiskLineChartRequest): DescribeRiskLineChartResponse {
  var runtime = new $RuntimeOptions{};
  return describeRiskLineChartWithOptions(request, runtime);
}

model DescribeRiskTagsLineChartRequest {
  beginTime?: long(name='BeginTime', description='Start time of the query, in milliseconds (ms).

This parameter is required.', example='1729563800605'),
  endTime?: long(name='EndTime', description='End time, accurate to milliseconds (ms).

This parameter is required.', example='1729563800605'),
  eventCodes?: string(name='EventCodes', description='Event code', example='de_afghcf6411'),
  lang?: string(name='Lang', description='Sets the language type for the request and response messages. Default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='RegId', description='Region code', example='cn-hangzhou'),
}

model DescribeRiskTagsLineChartResponseBody = {
  code?: string(name='Code', description='Status code. Note: 200 indicates success.', example='200'),
  httpStatusCode?: string(name='HttpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='Message', description='Error message.', example='success'),
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    percent?: [ float ](name='Percent', description='Call percentage, represented as a decimal'),
    series?: [ 
      {
        data?: float(name='Data', description='Data', example='10'),
        name?: string(name='Name', description='Name', example='rm0102'),
      }
    ](name='Series', description='Chart data'),
    total?: [ long ](name='Total', description='Total number of records.'),
    xaxis?: {
      data?: [ string ](name='Data', description='Data returned by the chart'),
    }(name='Xaxis', description='X-axis data of the chart'),
  }(name='ResultObject', description='Returned result information'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DescribeRiskTagsLineChartResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRiskTagsLineChartResponseBody(name='body'),
}

/**
 * @summary Tag Hit Rate Tag Hit Dimension
 *
 * @param request DescribeRiskTagsLineChartRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeRiskTagsLineChartResponse
 */
@context("describeRiskTagsLineChartWithContext")
async function describeRiskTagsLineChartWithOptions(request: DescribeRiskTagsLineChartRequest, runtime: $RuntimeOptions): DescribeRiskTagsLineChartResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.beginTime)) {
    query['BeginTime'] = request.beginTime;
  }
  if (!$isNull(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!$isNull(request.eventCodes)) {
    query['EventCodes'] = request.eventCodes;
  }
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['RegId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeRiskTagsLineChart',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Tag Hit Rate Tag Hit Dimension
 *
 * @param request DescribeRiskTagsLineChartRequest
 * @return DescribeRiskTagsLineChartResponse
 */
async function describeRiskTagsLineChart(request: DescribeRiskTagsLineChartRequest): DescribeRiskTagsLineChartResponse {
  var runtime = new $RuntimeOptions{};
  return describeRiskTagsLineChartWithOptions(request, runtime);
}

model DescribeRuleBarChartRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  beginTime?: long(name='beginTime', description='Query start time, accurate to milliseconds (ms).

This parameter is required.', example='1739841750000'),
  endTime?: long(name='endTime', description='End time, accurate to milliseconds (ms).

This parameter is required.', example='1750904603000'),
  eventCodes?: string(name='eventCodes', description='Event codes, separated by commas (,).', example='account_abuse_pro,account_abuse'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeRuleBarChartResponseBody = {
  code?: string(name='code', description='Status code.', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code.', example='200'),
  message?: string(name='message', description='Error message.', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: {
    series?: [ 
      {
        data?: [ 
          {
            eventName?: string(name='eventName', description='Event name.', example='营销事件'),
            num?: long(name='num', description='Number.', example='100'),
            ruleName?: string(name='ruleName', description='Policy name', example='营销风险识别评分_高风险_拒绝'),
            status?: string(name='status', description='Status.', example='RUNNING'),
          }
        ](name='data', description='Response data.'),
        type?: string(name='type', description='Bar chart type', example='bar'),
      }
    ](name='series', description='Data list'),
    yaxis?: {
      data?: [ string ](name='data', description='yaxis data items'),
    }(name='yaxis', description='yaxis related results.'),
  }(name='resultObject', description='Returned object'),
  success?: boolean(name='success', description='Whether the request was successful.', example='true'),
}

model DescribeRuleBarChartResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRuleBarChartResponseBody(name='body'),
}

/**
 * @summary Policy Overview List
 *
 * @param request DescribeRuleBarChartRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeRuleBarChartResponse
 */
@context("describeRuleBarChartWithContext")
async function describeRuleBarChartWithOptions(request: DescribeRuleBarChartRequest, runtime: $RuntimeOptions): DescribeRuleBarChartResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.beginTime)) {
    query['beginTime'] = request.beginTime;
  }
  if (!$isNull(request.endTime)) {
    query['endTime'] = request.endTime;
  }
  if (!$isNull(request.eventCodes)) {
    query['eventCodes'] = request.eventCodes;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeRuleBarChart',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Policy Overview List
 *
 * @param request DescribeRuleBarChartRequest
 * @return DescribeRuleBarChartResponse
 */
async function describeRuleBarChart(request: DescribeRuleBarChartRequest): DescribeRuleBarChartResponse {
  var runtime = new $RuntimeOptions{};
  return describeRuleBarChartWithOptions(request, runtime);
}

model DescribeRuleCountByUserIdRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  createType?: string(name='createType', description='Creation type', example='NORMAL'),
  regId?: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou'),
}

model DescribeRuleCountByUserIdResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    limit?: boolean(name='limit', description='Whether the limit condition is reached. Values: -**true**: Yes-**false**: No', example='false'),
    maxTotalItem?: int32(name='maxTotalItem', description='Maximum number of items', example='100'),
    totalItem?: int32(name='totalItem', description='Total number of items', example='27'),
  }(name='resultObject', description='Returned object'),
}

model DescribeRuleCountByUserIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRuleCountByUserIdResponseBody(name='body'),
}

/**
 * @summary Query Policy Count by User ID
 *
 * @param request DescribeRuleCountByUserIdRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeRuleCountByUserIdResponse
 */
@context("describeRuleCountByUserIdWithContext")
async function describeRuleCountByUserIdWithOptions(request: DescribeRuleCountByUserIdRequest, runtime: $RuntimeOptions): DescribeRuleCountByUserIdResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.createType)) {
    query['createType'] = request.createType;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeRuleCountByUserId',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Policy Count by User ID
 *
 * @param request DescribeRuleCountByUserIdRequest
 * @return DescribeRuleCountByUserIdResponse
 */
async function describeRuleCountByUserId(request: DescribeRuleCountByUserIdRequest): DescribeRuleCountByUserIdResponse {
  var runtime = new $RuntimeOptions{};
  return describeRuleCountByUserIdWithOptions(request, runtime);
}

model DescribeRuleDetailByRuleIdRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  consoleRuleId?: long(name='consoleRuleId', description='Primary key ID of the policy.', example='7110'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou'),
  ruleId?: string(name='ruleId', description='Policy ID.', example='102059'),
  ruleVersionId?: long(name='ruleVersionId', description='Primary key ID of the policy version.', example='10203'),
}

model DescribeRuleDetailByRuleIdResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    authType?: string(name='authType', description='Service authorization type.', example='all'),
    bizVersion?: string(name='bizVersion', description='Version.', example='1'),
    consoleRuleId?: long(name='consoleRuleId', description='Primary key ID of the policy.', example='6633'),
    createType?: string(name='createType', description='Creation type.', example='MORMAL'),
    eventCode?: string(name='eventCode', description='Event code.', example='de_asssce8122'),
    eventName?: string(name='eventName', description='Event name.', example='注册风险'),
    gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1621578648000'),
    gmtModified?: long(name='gmtModified', description='Modification time.', example='1565701886000'),
    logicExpression?: string(name='logicExpression', description='Log expression.', example='1&2'),
    mainEventCode?: string(name='mainEventCode', description='Main event code.', example='de_asssce8122'),
    memo?: string(name='memo', description='Memo.', example='备注'),
    ruleActionMap?: map[string]any(name='ruleActionMap', description='Rule action structure.', example='{
                "SCORE": [
                    {
                        "actionType": "SCORE",
                        "displayType": "ACTION",
                        "code": "deAddScore",
                        "sourceType": "SAF",
                        "inputs": [
                            "123"
                        ],
                        "name": "__addDeScore__",
                        "description": "打分",
                        "inputTitle": "123",
                        "outputType": "const",
                        "type": "ACTION",
                        "title": "打分",
                        "fieldType": "DOUBLE"
                    }
                ],
                "VARIABLE": [
                    {
                        "actionType": "VARIABLE",
                        "displayType": "MIDDLE",
                        "code": "mid1",
                        "inputs": [
                            "gg"
                        ],
                        "name": "mid1",
                        "description": "中间变量,mid1",
                        "type": "MIDDLE",
                        "title": "mid1",
                        "fieldType": "STRING"
                    }
                ],
                "TAG": [
                    {
                        "actionType": "TAG",
                        "displayType": "ACTION",
                        "code": "addDeTags",
                        "sourceType": "SAF",
                        "inputs": [
                            "123"
                        ],
                        "name": "__addDeTags__",
                        "description": "打标签",
                        "outputType": "const",
                        "type": "ACTION",
                        "title": "打标签",
                        "fieldType": "STRING"
                    }
                ],
                "MIDDLE_VARIABLE": [
                    {
                        "actionType": "MIDDLE_VARIABLE",
                        "inputs": [
                            "mid1"
                        ],
                        "fieldValue": "123",
                        "fieldType": "STRING"
                    }
                ]
            }'),
    ruleActions?: string(name='ruleActions', description='Rule actions.', example='[{\\\\"actionType\\\\":\\\\"TAG\\\\",\\\\"code\\\\":\\\\"addDeTags\\\\",\\\\"description\\\\":\\\\"打标签\\\\",\\\\"displayType\\\\":\\\\"ACTION\\\\",\\\\"fieldType\\\\":\\\\"STRING\\\\",\\\\"inputs\\\\":[\\\\"123\\\\"],\\\\"name\\\\":\\\\"__addDeTags__\\\\",\\\\"outputType\\\\":\\\\"const\\\\",\\\\"sourceType\\\\":\\\\"SAF\\\\",\\\\"title\\\\":\\\\"打标签\\\\",\\\\"type\\\\":\\\\"ACTION\\\\"},{\\\\"actionType\\\\":\\\\"SCORE\\\\",\\\\"code\\\\":\\\\"deAddScore\\\\",\\\\"description\\\\":\\\\"打分\\\\",\\\\"displayType\\\\":\\\\"ACTION\\\\",\\\\"fieldType\\\\":\\\\"DOUBLE\\\\",\\\\"inputTitle\\\\":\\\\"123\\\\",\\\\"inputs\\\\":[\\\\"123\\\\"],\\\\"name\\\\":\\\\"__addDeScore__\\\\",\\\\"outputType\\\\":\\\\"const\\\\",\\\\"sourceType\\\\":\\\\"SAF\\\\",\\\\"title\\\\":\\\\"打分\\\\",\\\\"type\\\\":\\\\"ACTION\\\\"},{\\\\"actionType\\\\":\\\\"MIDDLE_VARIABLE\\\\",\\\\"fieldType\\\\":\\\\"STRING\\\\",\\\\"fieldValue\\\\":\\\\"123\\\\",\\\\"inputs\\\\":[\\\\"mid1\\\\"]},{\\\\"actionType\\\\":\\\\"VARIABLE\\\\",\\\\"code\\\\":\\\\"mid1\\\\",\\\\"description\\\\":\\\\"中间变量,mid1\\\\",\\\\"displayType\\\\":\\\\"MIDDLE\\\\",\\\\"fieldType\\\\":\\\\"STRING\\\\",\\\\"inputs\\\\":[\\\\"gg\\\\"],\\\\"name\\\\":\\\\"mid1\\\\",\\\\"title\\\\":\\\\"mid1\\\\",\\\\"type\\\\":\\\\"MIDDLE\\\\"}]'),
    ruleAuthType?: string(name='ruleAuthType', description='Rule authorization type.', example='NOMAL'),
    ruleBody?: string(name='ruleBody', description='DSL policy expression.', example='{\\\\"elseIfStatement\\\\":[{\\\\"condition\\\\":{\\\\"currentId\\\\":0,\\\\"deepCount\\\\":1,\\\\"list\\\\":[{\\\\"currentId\\\\":0,\\\\"deepCount\\\\":1,\\\\"left\\\\":{\\\\"code\\\\":\\\\"getLbsRegion(longitude, latitude)?.prov\\\\",\\\\"description\\\\":\\\\"根据经纬度得到省份信息，比如经度：111.878062，纬度：22.585409，则经过运算，输出”广东省“\\\\",\\\\"displayType\\\\":\\\\"SELF_BIND\\\\",\\\\"fieldType\\\\":\\\\"STRING\\\\",\\\\"functionCode\\\\":\\\\"\\\\",\\\\"functionName\\\\":\\\\"\\\\",\\\\"hasRightVariable\\\\":true,\\\\"name\\\\":\\\\"sl_S02sHLFT7818\\\\",\\\\"outputThreshold\\\\":{},\\\\"sourceType\\\\":\\\\"SAF\\\\",\\\\"title\\\\":\\\\"经纬度自定义系统变量\\\\",\\\\"type\\\\":\\\\"SELF_BIND\\\\"},\\\\"operatorCode\\\\":\\\\"equals\\\\",\\\\"operatorName\\\\":\\\\"等于\\\\",\\\\"parentId\\\\":0,\\\\"right\\\\":{\\\\"name\\\\":\\\\"cc\\\\",\\\\"rightVariableType\\\\":\\\\"constant\\\\"},\\\\"sequence\\\\":5}],\\\\"parentId\\\\":0,\\\\"relationship\\\\":\\\\"and\\\\"},\\\\"then\\\\":[{\\\\"actionType\\\\":\\\\"TAG\\\\",\\\\"code\\\\":\\\\"addDeTags\\\\",\\\\"description\\\\":\\\\"打标签\\\\",\\\\"displayType\\\\":\\\\"ACTION\\\\",\\\\"fieldType\\\\":\\\\"STRING\\\\",\\\\"inputs\\\\":[\\\\"332\\\\"],\\\\"name\\\\":\\\\"__addDeTags__\\\\",\\\\"outputType\\\\":\\\\"const\\\\",\\\\"sourceType\\\\":\\\\"SAF\\\\",\\\\"title\\\\":\\\\"打标签\\\\",\\\\"type\\\\":\\\\"ACTION\\\\"}]}],\\\\"elseStatement\\\\":{\\\\"then\\\\":[{\\\\"actionType\\\\":\\\\"TAG\\\\",\\\\"code\\\\":\\\\"addDeTags\\\\",\\\\"description\\\\":\\\\"打标签\\\\",\\\\"displayType\\\\":\\\\"ACTION\\\\",\\\\"fieldType\\\\":\\\\"STRING\\\\",\\\\"inputs\\\\":[\\\\"321\\\\"],\\\\"name\\\\":\\\\"__addDeTags__\\\\",\\\\"outputType\\\\":\\\\"const\\\\",\\\\"sourceType\\\\":\\\\"SAF\\\\",\\\\"title\\\\":\\\\"打标签\\\\",\\\\"type\\\\":\\\\"ACTION\\\\"}]},\\\\"ifStatement\\\\":{\\\\"condition\\\\":{\\\\"currentId\\\\":0,\\\\"deepCount\\\\":1,\\\\"list\\\\":[{\\\\"currentId\\\\":0,\\\\"deepCount\\\\":1,\\\\"left\\\\":{\\\\"code\\\\":\\\\"queryPhoneSimulatorInfo(deviceToken)?.brand\\\\",\\\\"description\\\\":\\\\"设备信息-终端品牌\\\\",\\\\"displayType\\\\":\\\\"DEVICE\\\\",\\\\"fieldType\\\\":\\\\"STRING\\\\",\\\\"functionCode\\\\":\\\\"\\\\",\\\\"functionName\\\\":\\\\"\\\\",\\\\"hasRightVariable\\\\":true,\\\\"name\\\\":\\\\"__device_brand__\\\\",\\\\"sourceType\\\\":\\\\"SAF\\\\",\\\\"title\\\\":\\\\"设备信息-终端品牌-brand\\\\",\\\\"type\\\\":\\\\"DEVICE\\\\"},\\\\"operatorCode\\\\":\\\\"deInNameList\\\\",\\\\"operatorName\\\\":\\\\"在名单中\\\\",\\\\"parentId\\\\":0,\\\\"right\\\\":{\\\\"code\\\\":\\\\"nl_UN8otElLb490\\\\",\\\\"description\\\\":\\\\"描述11\\\\",\\\\"displayType\\\\":\\\\"NAME_LIST\\\\",\\\\"name\\\\":\\\\"nl_UN8otElLb490\\\\",\\\\"rightVariableType\\\\":\\\\"constant\\\\",\\\\"sourceType\\\\":\\\\"SAF\\\\",\\\\"title\\\\":\\\\"wtz_名单新建测试02\\\\",\\\\"type\\\\":\\\\"NAME_LIST\\\\"},\\\\"sequence\\\\":1},{\\\\"currentId\\\\":0,\\\\"deepCount\\\\":1,\\\\"left\\\\":{\\\\"code\\\\":\\\\"deFunctionProcess(ip,\\\\\\\\\\\\"isIp\\\\\\\\\\\\")\\\\",\\\\"description\\\\":\\\\"判断是否符合IPv4标准\\\\",\\\\"displayType\\\\":\\\\"SYSTEM_BIND\\\\",\\\\"fieldType\\\\":\\\\"BOOLEAN\\\\",\\\\"functionCode\\\\":\\\\"\\\\",\\\\"functionName\\\\":\\\\"\\\\",\\\\"hasRightVariable\\\\":false,\\\\"name\\\\":\\\\"__isIpAddressV4__\\\\",\\\\"outputThreshold\\\\":{},\\\\"sourceType\\\\":\\\\"SAF\\\\",\\\\"title\\\\":\\\\"IP是否符合IPV4格式\\\\",\\\\"type\\\\":\\\\"SYSTEM_BIND\\\\"},\\\\"operatorCode\\\\":\\\\"boolIsTrue\\\\",\\\\"operatorName\\\\":\\\\"为true\\\\",\\\\"parentId\\\\":0,\\\\"right\\\\":{\\\\"name\\\\":\\\\"\\\\",\\\\"rightVariableType\\\\":\\\\"constant\\\\"},\\\\"sequence\\\\":2},{\\\\"currentId\\\\":0,\\\\"deepCount\\\\":1,\\\\"list\\\\":[{\\\\"currentId\\\\":0,\\\\"deepCount\\\\":1,\\\\"left\\\\":{\\\\"code\\\\":\\\\"parseIpV2(ip)?.cityId\\\\",\\\\"description\\\\":\\\\"通过IP地址库解析IP所在的城市Code，例如，输入“42.120.74.211”，经过该变量运算，输出“330100”。\\\\",\\\\"displayType\\\\":\\\\"SYSTEM_BIND\\\\",\\\\"fieldType\\\\":\\\\"STRING\\\\",\\\\"functionCode\\\\":\\\\"\\\\",\\\\"functionName\\\\":\\\\"\\\\",\\\\"hasRightVariable\\\\":true,\\\\"name\\\\":\\\\"__ipLocationCityCode__\\\\",\\\\"outputThreshold\\\\":{},\\\\"sourceType\\\\":\\\\"SAF\\\\",\\\\"title\\\\":\\\\"IP所在地_城市Code\\\\",\\\\"type\\\\":\\\\"SYSTEM_BIND\\\\"},\\\\"operatorCode\\\\":\\\\"equals\\\\",\\\\"operatorName\\\\":\\\\"等于\\\\",\\\\"parentId\\\\":0,\\\\"right\\\\":{\\\\"code\\\\":\\\\"deFunctionProcess(ip,\\\\\\\\\\\\"getCountry\\\\\\\\\\\\")\\\\",\\\\"description\\\\":\\\\"通过IP地址库解析IP所在的城市名称，例如，输入“42.120.74.211”，经过该变量运算，输出“CN”。\\\\",\\\\"displayType\\\\":\\\\"SYSTEM_BIND\\\\",\\\\"fieldType\\\\":\\\\"STRING\\\\",\\\\"functionCode\\\\":\\\\"\\\\",\\\\"functionName\\\\":\\\\"\\\\",\\\\"name\\\\":\\\\"__ipLocationCountryId__\\\\",\\\\"outputThreshold\\\\":{},\\\\"rightVariableType\\\\":\\\\"variable\\\\",\\\\"sourceType\\\\":\\\\"SAF\\\\",\\\\"title\\\\":\\\\"IP所在地_国家Code\\\\",\\\\"type\\\\":\\\\"SYSTEM_BIND\\\\"},\\\\"sequence\\\\":3},{\\\\"currentId\\\\":0,\\\\"deepCount\\\\":1,\\\\"list\\\\":[{\\\\"currentId\\\\":0,\\\\"deepCount\\\\":1,\\\\"left\\\\":{\\\\"code\\\\":\\\\"parseIpV2(ip)?.cityId\\\\",\\\\"description\\\\":\\\\"通过IP地址库解析IP所在的城市Code，例如，输入“42.120.74.211”，经过该变量运算，输出“330100”。\\\\",\\\\"displayType\\\\":\\\\"SYSTEM_BIND\\\\",\\\\"fieldType\\\\":\\\\"STRING\\\\",\\\\"functionCode\\\\":\\\\"\\\\",\\\\"functionName\\\\":\\\\"\\\\",\\\\"hasRightVariable\\\\":true,\\\\"name\\\\":\\\\"__ipLocationCityCode__\\\\",\\\\"outputThreshold\\\\":{\\\\"$ref\\\\":\\\\"$.ifStatement.condition.list[2].list[0].left.outputThreshold\\\\"},\\\\"sourceType\\\\":\\\\"SAF\\\\",\\\\"title\\\\":\\\\"IP所在地_城市Code\\\\",\\\\"type\\\\":\\\\"SYSTEM_BIND\\\\"},\\\\"operatorCode\\\\":\\\\"deInNameList\\\\",\\\\"operatorName\\\\":\\\\"在名单中\\\\",\\\\"parentId\\\\":0,\\\\"right\\\\":{\\\\"code\\\\":\\\\"nl_NsVwBD2s11e0\\\\",\\\\"displayType\\\\":\\\\"NAME_LIST\\\\",\\\\"name\\\\":\\\\"nl_NsVwBD2s11e0\\\\",\\\\"rightVariableType\\\\":\\\\"constant\\\\",\\\\"sourceType\\\\":\\\\"SAF\\\\",\\\\"title\\\\":\\\\"device_block_list\\\\",\\\\"type\\\\":\\\\"NAME_LIST\\\\"},\\\\"sequence\\\\":4}],\\\\"parentId\\\\":0,\\\\"relationship\\\\":\\\\"and\\\\"}],\\\\"parentId\\\\":0,\\\\"relationship\\\\":\\\\"and\\\\"}],\\\\"parentId\\\\":0,\\\\"relationship\\\\":\\\\"and\\\\"},\\\\"then\\\\":[{\\\\"actionType\\\\":\\\\"TAG\\\\",\\\\"code\\\\":\\\\"addDeTags\\\\",\\\\"description\\\\":\\\\"打标签\\\\",\\\\"displayType\\\\":\\\\"ACTION\\\\",\\\\"fieldType\\\\":\\\\"STRING\\\\",\\\\"inputs\\\\":[\\\\"123\\\\"],\\\\"name\\\\":\\\\"__addDeTags__\\\\",\\\\"outputType\\\\":\\\\"const\\\\",\\\\"sourceType\\\\":\\\\"SAF\\\\",\\\\"title\\\\":\\\\"打标签\\\\",\\\\"type\\\\":\\\\"ACTION\\\\"}]}}'),
    ruleExpressions?: string(name='ruleExpressions', description='Rule expressions.', example='[{\\\\"expressionName\\\\":\\\\"营销风险识别评分\\\\",\\\\"itemId\\\\":1,\\\\"left\\\\":{\\\\"name\\\\":\\\\"sl_rjtsDXK124a5\\\\"},\\\\"operatorCode\\\\":\\\\"between\\\\",\\\\"operatorName\\\\":\\\\"数字在[a,b]之间\\\\",\\\\"right\\\\":{\\\\"fieldValue\\\\":\\\\"[65,100]\\\\"}}]'),
    ruleId?: string(name='ruleId', description='Policy ID.', example='101544'),
    ruleName?: string(name='ruleName', description='Policy name.', example='营销风险识别'),
    ruleStatus?: string(name='ruleStatus', description='Policy status.', example='RUNNING'),
    ruleType?: string(name='ruleType', description='Rule type.', example='DSL'),
    ruleVersionId?: long(name='ruleVersionId', description='Primary key ID of the policy version.', example='3823'),
  }(name='resultObject', description='Returned object.'),
}

model DescribeRuleDetailByRuleIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRuleDetailByRuleIdResponseBody(name='body'),
}

/**
 * @summary Query policy/version details
 *
 * @param request DescribeRuleDetailByRuleIdRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeRuleDetailByRuleIdResponse
 */
@context("describeRuleDetailByRuleIdWithContext")
async function describeRuleDetailByRuleIdWithOptions(request: DescribeRuleDetailByRuleIdRequest, runtime: $RuntimeOptions): DescribeRuleDetailByRuleIdResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.consoleRuleId)) {
    query['consoleRuleId'] = request.consoleRuleId;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.ruleId)) {
    query['ruleId'] = request.ruleId;
  }
  if (!$isNull(request.ruleVersionId)) {
    query['ruleVersionId'] = request.ruleVersionId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeRuleDetailByRuleId',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query policy/version details
 *
 * @param request DescribeRuleDetailByRuleIdRequest
 * @return DescribeRuleDetailByRuleIdResponse
 */
async function describeRuleDetailByRuleId(request: DescribeRuleDetailByRuleIdRequest): DescribeRuleDetailByRuleIdResponse {
  var runtime = new $RuntimeOptions{};
  return describeRuleDetailByRuleIdWithOptions(request, runtime);
}

model DescribeRuleHitRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  requestTime?: long(name='requestTime', description='Execution time', example='1752571330000'),
  ruleId?: string(name='ruleId', description='Rule ID', example='102059'),
  ruleSnapshotId?: string(name='ruleSnapshotId', description='Snapshot ID.', example='27'),
  sRequestId?: string(name='sRequestId', description='Request ID.', example='60C97040-D5D5-4906-9522-B9B413730CAA'),
}

model DescribeRuleHitResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: map[string]any(name='resultObject', description='Return object', example='true'),
}

model DescribeRuleHitResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRuleHitResponseBody(name='body'),
}

/**
 * @summary Query rule hit details
 *
 * @param request DescribeRuleHitRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeRuleHitResponse
 */
@context("describeRuleHitWithContext")
async function describeRuleHitWithOptions(request: DescribeRuleHitRequest, runtime: $RuntimeOptions): DescribeRuleHitResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.requestTime)) {
    query['requestTime'] = request.requestTime;
  }
  if (!$isNull(request.ruleId)) {
    query['ruleId'] = request.ruleId;
  }
  if (!$isNull(request.ruleSnapshotId)) {
    query['ruleSnapshotId'] = request.ruleSnapshotId;
  }
  if (!$isNull(request.sRequestId)) {
    query['sRequestId'] = request.sRequestId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeRuleHit',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query rule hit details
 *
 * @param request DescribeRuleHitRequest
 * @return DescribeRuleHitResponse
 */
async function describeRuleHit(request: DescribeRuleHitRequest): DescribeRuleHitResponse {
  var runtime = new $RuntimeOptions{};
  return describeRuleHitWithOptions(request, runtime);
}

model DescribeRuleListByEventCodesListRequest {
  lang?: string(name='Lang', description='Set the language type for request and response messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  eventCodes?: string(name='eventCodes', description='Event codes, JSON array string

This parameter is required.', example='["de_asssce8122"]'),
  regId?: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou'),
}

model DescribeRuleListByEventCodesListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: [ 
    {
      ruleId?: string(name='ruleId', description='Policy ID', example='4730'),
      ruleName?: string(name='ruleName', description='Policy name', example='营销风险识别'),
    }
  ](name='resultObject', description='Returned object'),
}

model DescribeRuleListByEventCodesListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRuleListByEventCodesListResponseBody(name='body'),
}

/**
 * @summary Query policy list
 *
 * @param request DescribeRuleListByEventCodesListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeRuleListByEventCodesListResponse
 */
@context("describeRuleListByEventCodesListWithContext")
async function describeRuleListByEventCodesListWithOptions(request: DescribeRuleListByEventCodesListRequest, runtime: $RuntimeOptions): DescribeRuleListByEventCodesListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.eventCodes)) {
    query['eventCodes'] = request.eventCodes;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeRuleListByEventCodesList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query policy list
 *
 * @param request DescribeRuleListByEventCodesListRequest
 * @return DescribeRuleListByEventCodesListResponse
 */
async function describeRuleListByEventCodesList(request: DescribeRuleListByEventCodesListRequest): DescribeRuleListByEventCodesListResponse {
  var runtime = new $RuntimeOptions{};
  return describeRuleListByEventCodesListWithOptions(request, runtime);
}

model DescribeRulePageListRequest {
  lang?: string(name='Lang', description='Set the language type for requests and responses, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  createType?: string(name='createType', description='Creation type.', example='NORMAL'),
  currentPage?: string(name='currentPage', description='Current page number.', example='1'),
  eventCode?: string(name='eventCode', description='Event code.', example='de_asssce8122'),
  pageSize?: string(name='pageSize', description='Page size, default value is 10.', example='10'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou'),
  ruleAuthType?: string(name='ruleAuthType', description='Policy type.', example='NOMAL'),
  ruleName?: string(name='ruleName', description='Policy name.', example='营销风险识别评分'),
  ruleStatus?: string(name='ruleStatus', description='Policy status.', example='RUNNING'),
  sort?: string(name='sort', description='Sorting method, default value is desc.
- desc: descending order
- asc: ascending order', example='asc'),
}

model DescribeRulePageListResponseBody = {
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10.', example='10'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: [ 
    {
      authType?: string(name='authType', description='Service authorization type', example='all'),
      consoleAudit?: {
        applyUserId?: string(name='applyUserId', description='UID of the user who passed the audit', example='用户uid'),
        applyUserName?: string(name='applyUserName', description='Name of the user who passed the audit', example='root'),
        auditMsg?: string(name='auditMsg', description='Approval comments', example='同意'),
        auditRealUserId?: string(name='auditRealUserId', description='UID of the final auditor', example='1728'),
        auditRealUserName?: string(name='auditRealUserName', description='Name of the final auditor', example='root'),
        auditRemark?: string(name='auditRemark', description='Remarks by the approver.', example='备注'),
        auditStatus?: string(name='auditStatus', description='Application audit status', example='AGREE'),
        auditTime?: long(name='auditTime', description='Approval time', example='1545726028000'),
        auditUserId?: string(name='auditUserId', description='UID of the auditor', example='1234xxxx'),
        auditUserName?: string(name='auditUserName', description='Name of the auditor', example='root'),
        gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1545726028000'),
        id?: long(name='id', description='Primary key ID', example='1728'),
        relationExt?: string(name='relationExt', description='Information of other related parties (in JSON format)', example='{}'),
        relationId?: long(name='relationId', description='ID of the related transaction for the approval', example='123'),
        relationName?: string(name='relationName', description='Name of the related transaction for the approval (can be null)', example='策略1'),
        relationType?: string(name='relationType', description='Type of the approval (e.g., `rule` represents the approval of a rule)', example='RULE'),
      }(name='consoleAudit', description='Audit object'),
      eventCode?: string(name='eventCode', description='Event code.', example='de_arcehq4370'),
      eventName?: string(name='eventName', description='Event name.', example='注册风险'),
      eventType?: string(name='eventType', description='Event type', example='MAIN'),
      externalRuleName?: string(name='externalRuleName', description='External name of the rule', example='策略1'),
      gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1621578648000'),
      gmtModified?: long(name='gmtModified', description='Modification time.', example='1565701886000'),
      hasNewVersion?: boolean(name='hasNewVersion', description='Whether there is a new version', example='true'),
      id?: long(name='id', description='Primary key ID of the policy.', example='2793'),
      mainRuleId?: string(name='mainRuleId', description='Main rule ID', example='4399'),
      priority?: long(name='priority', description='Policy priority, the higher the number, the higher the priority.', example='10'),
      ruleAuthType?: string(name='ruleAuthType', description='Rule type', example='NORMAL'),
      ruleId?: string(name='ruleId', description='Policy ID.', example='102059'),
      ruleMemo?: string(name='ruleMemo', description='Policy description.', example='描述信息'),
      ruleName?: string(name='ruleName', description='Policy name.', example='营销风险识别'),
      ruleStatus?: string(name='ruleStatus', description='Policy status.', example='RUNNING'),
      ruleType?: string(name='ruleType', description='Rule type', example='NORMAL'),
      ruleVersionId?: long(name='ruleVersionId', description='Primary key ID of the rule version.', example='11300'),
      templateId?: long(name='templateId', description='Template ID.', example='register'),
      version?: int32(name='version', description='Version number.', example='1'),
    }
  ](name='resultObject', description='Returned object.'),
  totalItem?: int32(name='totalItem', description='Total number of items.', example='28'),
  totalPage?: int32(name='totalPage', description='Total number of pages.', example='3'),
}

model DescribeRulePageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRulePageListResponseBody(name='body'),
}

/**
 * @summary Query the list of policies
 *
 * @param request DescribeRulePageListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeRulePageListResponse
 */
@context("describeRulePageListWithContext")
async function describeRulePageListWithOptions(request: DescribeRulePageListRequest, runtime: $RuntimeOptions): DescribeRulePageListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.createType)) {
    query['createType'] = request.createType;
  }
  if (!$isNull(request.currentPage)) {
    query['currentPage'] = request.currentPage;
  }
  if (!$isNull(request.eventCode)) {
    query['eventCode'] = request.eventCode;
  }
  if (!$isNull(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.ruleAuthType)) {
    query['ruleAuthType'] = request.ruleAuthType;
  }
  if (!$isNull(request.ruleName)) {
    query['ruleName'] = request.ruleName;
  }
  if (!$isNull(request.ruleStatus)) {
    query['ruleStatus'] = request.ruleStatus;
  }
  if (!$isNull(request.sort)) {
    query['sort'] = request.sort;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeRulePageList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query the list of policies
 *
 * @param request DescribeRulePageListRequest
 * @return DescribeRulePageListResponse
 */
async function describeRulePageList(request: DescribeRulePageListRequest): DescribeRulePageListResponse {
  var runtime = new $RuntimeOptions{};
  return describeRulePageListWithOptions(request, runtime);
}

model DescribeRuleSnapshotRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  ruleId?: string(name='ruleId', description='Policy ID', example='101544'),
  snapshotVersion?: string(name='snapshotVersion', description='Snapshot version.', example='10'),
}

model DescribeRuleSnapshotResponseBody = {
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    bizVersion?: string(name='bizVersion', description='Business version.', example='1'),
    eventCode?: string(name='eventCode', description='Event code', example='de_aszbjb7236'),
    eventName?: string(name='eventName', description='Event name.', example='注册风险'),
    gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1621578648000'),
    gmtModified?: long(name='gmtModified', description='Modification time.', example='1565701886000'),
    logicExpression?: string(name='logicExpression', description='Expression for analysis results.', example='1&2'),
    memo?: string(name='memo', description='Memo.', example='备注'),
    ruleActions?: string(name='ruleActions', description='Rule actions.', example='[{\\\\"inputs\\\\":[\\\\"LdShop\\\\"],\\\\"name\\\\":\\\\"__addDeTags__\\\\",\\\\"actionType\\\\":\\\\"TAG\\\\",\\\\"outputType\\\\":\\\\"const\\\\"}]'),
    ruleBody?: string(name='ruleBody', description='DSL rule expression. This field is required when ruleType is DSL.', example='{\\\\"elseIfStatement\\\\":[{\\\\"condition\\\\":{\\\\"currentId\\\\":0,\\\\"deepCount\\\\":1,\\\\"list\\\\":[{\\\\"currentId\\\\":0,\\\\"deepCount\\\\":1,\\\\"left\\\\":{\\\\"code\\\\":\\\\"getLbsRegion(longitude, latitude)?.prov\\\\",\\\\"description\\\\":\\\\"根据经纬度得到省份信息，比如经度：111.878062，纬度：22.585409，则经过运算，输出”广东省“\\\\",\\\\"displayType\\\\":\\\\"SELF_BIND\\\\",\\\\"fieldType\\\\":\\\\"STRING\\\\",\\\\"functionCode\\\\":\\\\"\\\\",\\\\"functionName\\\\":\\\\"\\\\",\\\\"hasRightVariable\\\\":true,\\\\"name\\\\":\\\\"sl_S02sHLFT7818\\\\",\\\\"outputThreshold\\\\":{},\\\\"sourceType\\\\":\\\\"SAF\\\\",\\\\"title\\\\":\\\\"经纬度自定义系统变量\\\\",\\\\"type\\\\":\\\\"SELF_BIND\\\\"},\\\\"operatorCode\\\\":\\\\"equals\\\\",\\\\"operatorName\\\\":\\\\"等于\\\\",\\\\"parentId\\\\":0,\\\\"right\\\\":{\\\\"name\\\\":\\\\"cc\\\\",\\\\"rightVariableType\\\\":\\\\"constant\\\\"},\\\\"sequence\\\\":5}],\\\\"parentId\\\\":0,\\\\"relationship\\\\":\\\\"and\\\\"},\\\\"then\\\\":[{\\\\"actionType\\\\":\\\\"TAG\\\\",\\\\"code\\\\":\\\\"addDeTags\\\\",\\\\"description\\\\":\\\\"打标签\\\\",\\\\"displayType\\\\":\\\\"ACTION\\\\",\\\\"fieldType\\\\":\\\\"STRING\\\\",\\\\"inputs\\\\":[\\\\"332\\\\"],\\\\"name\\\\":\\\\"__addDeTags__\\\\",\\\\"outputType\\\\":\\\\"const\\\\",\\\\"sourceType\\\\":\\\\"SAF\\\\",\\\\"title\\\\":\\\\"打标签\\\\",\\\\"type\\\\":\\\\"ACTION\\\\"}]}],\\\\"elseStatement\\\\":{\\\\"then\\\\":[{\\\\"actionType\\\\":\\\\"TAG\\\\",\\\\"code\\\\":\\\\"addDeTags\\\\",\\\\"description\\\\":\\\\"打标签\\\\",\\\\"displayType\\\\":\\\\"ACTION\\\\",\\\\"fieldType\\\\":\\\\"STRING\\\\",\\\\"inputs\\\\":[\\\\"321\\\\"],\\\\"name\\\\":\\\\"__addDeTags__\\\\",\\\\"outputType\\\\":\\\\"const\\\\",\\\\"sourceType\\\\":\\\\"SAF\\\\",\\\\"title\\\\":\\\\"打标签\\\\",\\\\"type\\\\":\\\\"ACTION\\\\"}]},\\\\"ifStatement\\\\":{\\\\"condition\\\\":{\\\\"currentId\\\\":0,\\\\"deepCount\\\\":1,\\\\"list\\\\":[{\\\\"currentId\\\\":0,\\\\"deepCount\\\\":1,\\\\"left\\\\":{\\\\"code\\\\":\\\\"queryPhoneSimulatorInfo(deviceToken)?.brand\\\\",\\\\"description\\\\":\\\\"设备信息-终端品牌\\\\",\\\\"displayType\\\\":\\\\"DEVICE\\\\",\\\\"fieldType\\\\":\\\\"STRING\\\\",\\\\"functionCode\\\\":\\\\"\\\\",\\\\"functionName\\\\":\\\\"\\\\",\\\\"hasRightVariable\\\\":true,\\\\"name\\\\":\\\\"__device_brand__\\\\",\\\\"sourceType\\\\":\\\\"SAF\\\\",\\\\"title\\\\":\\\\"设备信息-终端品牌-brand\\\\",\\\\"type\\\\":\\\\"DEVICE\\\\"},\\\\"operatorCode\\\\":\\\\"deInNameList\\\\",\\\\"operatorName\\\\":\\\\"在名单中\\\\",\\\\"parentId\\\\":0,\\\\"right\\\\":{\\\\"code\\\\":\\\\"nl_UN8otElLb490\\\\",\\\\"description\\\\":\\\\"描述11\\\\",\\\\"displayType\\\\":\\\\"NAME_LIST\\\\",\\\\"name\\\\":\\\\"nl_UN8otElLb490\\\\",\\\\"rightVariableType\\\\":\\\\"constant\\\\",\\\\"sourceType\\\\":\\\\"SAF\\\\",\\\\"title\\\\":\\\\"wtz_名单新建测试02\\\\",\\\\"type\\\\":\\\\"NAME_LIST\\\\"},\\\\"sequence\\\\":1},{\\\\"currentId\\\\":0,\\\\"deepCount\\\\":1,\\\\"left\\\\":{\\\\"code\\\\":\\\\"deFunctionProcess(ip,\\\\\\\\\\\\"isIp\\\\\\\\\\\\")\\\\",\\\\"description\\\\":\\\\"判断是否符合IPv4标准\\\\",\\\\"displayType\\\\":\\\\"SYSTEM_BIND\\\\",\\\\"fieldType\\\\":\\\\"BOOLEAN\\\\",\\\\"functionCode\\\\":\\\\"\\\\",\\\\"functionName\\\\":\\\\"\\\\",\\\\"hasRightVariable\\\\":false,\\\\"name\\\\":\\\\"__isIpAddressV4__\\\\",\\\\"outputThreshold\\\\":{},\\\\"sourceType\\\\":\\\\"SAF\\\\",\\\\"title\\\\":\\\\"IP是否符合IPV4格式\\\\",\\\\"type\\\\":\\\\"SYSTEM_BIND\\\\"},\\\\"operatorCode\\\\":\\\\"boolIsTrue\\\\",\\\\"operatorName\\\\":\\\\"为true\\\\",\\\\"parentId\\\\":0,\\\\"right\\\\":{\\\\"name\\\\":\\\\"\\\\",\\\\"rightVariableType\\\\":\\\\"constant\\\\"},\\\\"sequence\\\\":2},{\\\\"currentId\\\\":0,\\\\"deepCount\\\\":1,\\\\"list\\\\":[{\\\\"currentId\\\\":0,\\\\"deepCount\\\\":1,\\\\"left\\\\":{\\\\"code\\\\":\\\\"parseIpV2(ip)?.cityId\\\\",\\\\"description\\\\":\\\\"通过IP地址库解析IP所在的城市Code，例如，输入“42.120.74.211”，经过该变量运算，输出“330100”。\\\\",\\\\"displayType\\\\":\\\\"SYSTEM_BIND\\\\",\\\\"fieldType\\\\":\\\\"STRING\\\\",\\\\"functionCode\\\\":\\\\"\\\\",\\\\"functionName\\\\":\\\\"\\\\",\\\\"hasRightVariable\\\\":true,\\\\"name\\\\":\\\\"__ipLocationCityCode__\\\\",\\\\"outputThreshold\\\\":{},\\\\"sourceType\\\\":\\\\"SAF\\\\",\\\\"title\\\\":\\\\"IP所在地_城市Code\\\\",\\\\"type\\\\":\\\\"SYSTEM_BIND\\\\"},\\\\"operatorCode\\\\":\\\\"equals\\\\",\\\\"operatorName\\\\":\\\\"等于\\\\",\\\\"parentId\\\\":0,\\\\"right\\\\":{\\\\"code\\\\":\\\\"deFunctionProcess(ip,\\\\\\\\\\\\"getCountry\\\\\\\\\\\\")\\\\",\\\\"description\\\\":\\\\"通过IP地址库解析IP所在的城市名称，例如，输入“42.120.74.211”，经过该变量运算，输出“CN”。\\\\",\\\\"displayType\\\\":\\\\"SYSTEM_BIND\\\\",\\\\"fieldType\\\\":\\\\"STRING\\\\",\\\\"functionCode\\\\":\\\\"\\\\",\\\\"functionName\\\\":\\\\"\\\\",\\\\"name\\\\":\\\\"__ipLocationCountryId__\\\\",\\\\"outputThreshold\\\\":{},\\\\"rightVariableType\\\\":\\\\"variable\\\\",\\\\"sourceType\\\\":\\\\"SAF\\\\",\\\\"title\\\\":\\\\"IP所在地_国家Code\\\\",\\\\"type\\\\":\\\\"SYSTEM_BIND\\\\"},\\\\"sequence\\\\":3},{\\\\"currentId\\\\":0,\\\\"deepCount\\\\":1,\\\\"list\\\\":[{\\\\"currentId\\\\":0,\\\\"deepCount\\\\":1,\\\\"left\\\\":{\\\\"code\\\\":\\\\"parseIpV2(ip)?.cityId\\\\",\\\\"description\\\\":\\\\"通过IP地址库解析IP所在的城市Code，例如，输入“42.120.74.211”，经过该变量运算，输出“330100”。\\\\",\\\\"displayType\\\\":\\\\"SYSTEM_BIND\\\\",\\\\"fieldType\\\\":\\\\"STRING\\\\",\\\\"functionCode\\\\":\\\\"\\\\",\\\\"functionName\\\\":\\\\"\\\\",\\\\"hasRightVariable\\\\":true,\\\\"name\\\\":\\\\"__ipLocationCityCode__\\\\",\\\\"outputThreshold\\\\":{\\\\"$ref\\\\":\\\\"$.ifStatement.condition.list[2].list[0].left.outputThreshold\\\\"},\\\\"sourceType\\\\":\\\\"SAF\\\\",\\\\"title\\\\":\\\\"IP所在地_城市Code\\\\",\\\\"type\\\\":\\\\"SYSTEM_BIND\\\\"},\\\\"operatorCode\\\\":\\\\"deInNameList\\\\",\\\\"operatorName\\\\":\\\\"在名单中\\\\",\\\\"parentId\\\\":0,\\\\"right\\\\":{\\\\"code\\\\":\\\\"nl_NsVwBD2s11e0\\\\",\\\\"displayType\\\\":\\\\"NAME_LIST\\\\",\\\\"name\\\\":\\\\"nl_NsVwBD2s11e0\\\\",\\\\"rightVariableType\\\\":\\\\"constant\\\\",\\\\"sourceType\\\\":\\\\"SAF\\\\",\\\\"title\\\\":\\\\"device_block_list\\\\",\\\\"type\\\\":\\\\"NAME_LIST\\\\"},\\\\"sequence\\\\":4}],\\\\"parentId\\\\":0,\\\\"relationship\\\\":\\\\"and\\\\"}],\\\\"parentId\\\\":0,\\\\"relationship\\\\":\\\\"and\\\\"}],\\\\"parentId\\\\":0,\\\\"relationship\\\\":\\\\"and\\\\"},\\\\"then\\\\":[{\\\\"actionType\\\\":\\\\"TAG\\\\",\\\\"code\\\\":\\\\"addDeTags\\\\",\\\\"description\\\\":\\\\"打标签\\\\",\\\\"displayType\\\\":\\\\"ACTION\\\\",\\\\"fieldType\\\\":\\\\"STRING\\\\",\\\\"inputs\\\\":[\\\\"123\\\\"],\\\\"name\\\\":\\\\"__addDeTags__\\\\",\\\\"outputType\\\\":\\\\"const\\\\",\\\\"sourceType\\\\":\\\\"SAF\\\\",\\\\"title\\\\":\\\\"打标签\\\\",\\\\"type\\\\":\\\\"ACTION\\\\"}]}}'),
    ruleExpressions?: string(name='ruleExpressions', description='Expression.', example='[{\\\\"expressionName\\\\":\\\\"代下单_记录日志\\\\",\\\\"itemId\\\\":1,\\\\"left\\\\":{\\\\"name\\\\":\\\\"dhcfX2v7670\\\\"},\\\\"operatorCode\\\\":\\\\"gte\\\\",\\\\"operatorName\\\\":\\\\"大于等于\\\\",\\\\"right\\\\":{\\\\"fieldValue\\\\":\\\\"2\\\\"}}]'),
    ruleId?: string(name='ruleId', description='Policy ID', example='101804'),
    ruleName?: string(name='ruleName', description='Policy name', example='营销风险识别'),
    ruleStatus?: string(name='ruleStatus', description='Policy status', example='RUNNING'),
    ruleType?: string(name='ruleType', description='Rule type.', example='DSL'),
  }(name='resultObject', description='Returned object'),
}

model DescribeRuleSnapshotResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRuleSnapshotResponseBody(name='body'),
}

/**
 * @summary Query historical snapshots based on ruleId and version
 *
 * @param request DescribeRuleSnapshotRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeRuleSnapshotResponse
 */
@context("describeRuleSnapshotWithContext")
async function describeRuleSnapshotWithOptions(request: DescribeRuleSnapshotRequest, runtime: $RuntimeOptions): DescribeRuleSnapshotResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.ruleId)) {
    query['ruleId'] = request.ruleId;
  }
  if (!$isNull(request.snapshotVersion)) {
    query['snapshotVersion'] = request.snapshotVersion;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeRuleSnapshot',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query historical snapshots based on ruleId and version
 *
 * @param request DescribeRuleSnapshotRequest
 * @return DescribeRuleSnapshotResponse
 */
async function describeRuleSnapshot(request: DescribeRuleSnapshotRequest): DescribeRuleSnapshotResponse {
  var runtime = new $RuntimeOptions{};
  return describeRuleSnapshotWithOptions(request, runtime);
}

model DescribeRuleVersionListRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  consoleRuleId?: long(name='consoleRuleId', description='Policy primary key ID', example='6851'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10', example='10'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  ruleId?: string(name='ruleId', description='Policy ID', example='101804'),
}

model DescribeRuleVersionListResponseBody = {
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10', example='10'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: [ 
    {
      consoleAudit?: {
        applyUserId?: string(name='applyUserId', description='Initiator UID', example='1519714049632764'),
        applyUserName?: string(name='applyUserName', description='Initiator name', example='root'),
        auditMsg?: string(name='auditMsg', description='Approval comment', example='同意'),
        auditRealUserId?: string(name='auditRealUserId', description='Final approver UID', example='1519714049632764'),
        auditRealUserName?: string(name='auditRealUserName', description='Final approver name', example='root'),
        auditRemark?: string(name='auditRemark', description='Approver\\\\"s remarks.', example='备注'),
        auditStatus?: string(name='auditStatus', description='Approval status', example='AGREE'),
        auditTime?: long(name='auditTime', description='Approval time.', example='1545726028000'),
        auditUserId?: string(name='auditUserId', description='Designated approver UID', example='1519714049632764'),
        auditUserName?: string(name='auditUserName', description='Designated auditor\\\\"s name', example='root'),
        gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1545726028000'),
        id?: long(name='id', description='Primary key ID', example='1728'),
        relationExt?: string(name='relationExt', description='Information of related others (in JSON format)', example='{}'),
        relationId?: long(name='relationId', description='ID of the associated transaction', example='123'),
        relationName?: string(name='relationName', description='Name of the associated item', example='营销风险识别'),
        relationType?: string(name='relationType', description='Type of approval (e.g., `rule` for policy approval)', example='RULE'),
      }(name='consoleAudit', description='Audit object'),
      consoleRuleId?: long(name='consoleRuleId', description='Console rule ID.', example='6715'),
      consoleRuleMemo?: string(name='consoleRuleMemo', description='Associated policy remarks', example='备注'),
      consoleRuleName?: string(name='consoleRuleName', description='Associated policy name', example='营销风险识别'),
      eventCode?: string(name='eventCode', description='Event code', example='de_aszbjb7236'),
      eventType?: string(name='eventType', description='Event type', example='MAIN'),
      gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1621578648000'),
      gmtModified?: long(name='gmtModified', description='Modification time.', example='1565701886000'),
      id?: long(name='id', description='Primary key ID of the policy', example='376773'),
      lastOperator?: string(name='lastOperator', description='The user who last operated.', example='1519714049632764'),
      priority?: long(name='priority', description='Policy priority, the higher the number, the higher the priority.', example='10'),
      ruleId?: string(name='ruleId', description='Policy ID', example='102224'),
      ruleStatus?: string(name='ruleStatus', description='Policy status', example='RUNNING'),
      ruleType?: string(name='ruleType', description='Rule Type', example='DEFAULT'),
      version?: long(name='version', description='Version number', example='2'),
    }
  ](name='resultObject', description='Returned object'),
  totalItem?: int32(name='totalItem', description='Total number of items', example='3'),
  totalPage?: int32(name='totalPage', description='Total number of pages.', example='7'),
}

model DescribeRuleVersionListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRuleVersionListResponseBody(name='body'),
}

/**
 * @summary Query Policy Version List
 *
 * @param request DescribeRuleVersionListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeRuleVersionListResponse
 */
@context("describeRuleVersionListWithContext")
async function describeRuleVersionListWithOptions(request: DescribeRuleVersionListRequest, runtime: $RuntimeOptions): DescribeRuleVersionListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.consoleRuleId)) {
    query['consoleRuleId'] = request.consoleRuleId;
  }
  if (!$isNull(request.currentPage)) {
    query['currentPage'] = request.currentPage;
  }
  if (!$isNull(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.ruleId)) {
    query['ruleId'] = request.ruleId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeRuleVersionList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Policy Version List
 *
 * @param request DescribeRuleVersionListRequest
 * @return DescribeRuleVersionListResponse
 */
async function describeRuleVersionList(request: DescribeRuleVersionListRequest): DescribeRuleVersionListResponse {
  var runtime = new $RuntimeOptions{};
  return describeRuleVersionListWithOptions(request, runtime);
}

model DescribeSDKDownloadListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  deviceType?: string(name='deviceType', description='Device type.', example='ANDROID'),
  listType?: string(name='listType', description='Download type', example='OLD'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeSDKDownloadListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: [ 
    {
      description?: string(name='description', description='Description information.', example='描述'),
      developer?: string(name='developer', description='Developer', example='阿里云安全-风险识别'),
      deviceType?: string(name='deviceType', description='Device type.', example='ANDROID'),
      downloadUrl?: string(name='downloadUrl', description='Download URL.', example='https://aliyun-xxxx.oss-cn-xxx.xxx.com/sdk/xxx/10056.1/Android-AliyunDeviceEnhance-10056.1-20250611.tgz'),
      md5?: string(name='md5', description='File MD5.', example='E582EEB6B4BC9B5CB168AA5A7DD0EE93'),
      packageName?: string(name='packageName', description='Package name', example='net.security.device'),
      privacyLink?: string(name='privacyLink', description='Risk recognition SDK privacy policy link', example='https://terms.aliyun.com/legal-agreement/terms/suit_bu1_ali_cloud/suit_bu1_ali_cloud202111120818_92724.html'),
      pushTime?: string(name='pushTime', description='Release time', example='1751212800000'),
      sdkVersion?: string(name='sdkVersion', description='SDK version.', example='1'),
      size?: string(name='size', description='Size', example='4.12 MB'),
    }
  ](name='resultObject', description='Return object'),
}

model DescribeSDKDownloadListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSDKDownloadListResponseBody(name='body'),
}

/**
 * @summary SDK Download List
 *
 * @param request DescribeSDKDownloadListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSDKDownloadListResponse
 */
@context("describeSDKDownloadListWithContext")
async function describeSDKDownloadListWithOptions(request: DescribeSDKDownloadListRequest, runtime: $RuntimeOptions): DescribeSDKDownloadListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.deviceType)) {
    query['deviceType'] = request.deviceType;
  }
  if (!$isNull(request.listType)) {
    query['listType'] = request.listType;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeSDKDownloadList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary SDK Download List
 *
 * @param request DescribeSDKDownloadListRequest
 * @return DescribeSDKDownloadListResponse
 */
async function describeSDKDownloadList(request: DescribeSDKDownloadListRequest): DescribeSDKDownloadListResponse {
  var runtime = new $RuntimeOptions{};
  return describeSDKDownloadListWithOptions(request, runtime);
}

model DescribeSafConsoleRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  content?: string(name='content', description='Query content.', example='ei_riskLpInfo'),
  service?: string(name='service', description='Service to be called.

This parameter is required.', example='ei_riskLpInfo'),
}

model DescribeSafConsoleResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  bizData?: [ string ](name='bizData', description='Returned result.'),
}

model DescribeSafConsoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSafConsoleResponseBody(name='body'),
}

/**
 * @summary Query SAF permissions.
 *
 * @param request DescribeSafConsoleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSafConsoleResponse
 */
@context("describeSafConsoleWithContext")
async function describeSafConsoleWithOptions(request: DescribeSafConsoleRequest, runtime: $RuntimeOptions): DescribeSafConsoleResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.content)) {
    query['content'] = request.content;
  }
  if (!$isNull(request.service)) {
    query['service'] = request.service;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeSafConsole',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query SAF permissions.
 *
 * @param request DescribeSafConsoleRequest
 * @return DescribeSafConsoleResponse
 */
async function describeSafConsole(request: DescribeSafConsoleRequest): DescribeSafConsoleResponse {
  var runtime = new $RuntimeOptions{};
  return describeSafConsoleWithOptions(request, runtime);
}

model DescribeSafDeOrderRequest {
  lang?: string(name='Lang', description='Set the language type for request and response messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  endDate?: string(name='endDate', description='End date', example='1728008155799'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10', example='10'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  startDate?: string(name='startDate', description='Start date.', example='1728008155799'),
}

model DescribeSafDeOrderResponseBody = {
  requestId?: string(name='requestId', description='Request ID', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: {
    expirationDate?: long(name='expirationDate', description='Expiration time', example='1728008155799'),
    openUserType?: int32(name='openUserType', description='Based on the product type subscribed by the customer, the console permissions are divided into three categories:

     1. New Customer: Has not purchased/subscribed to any service.
     2. Old Customer (Subscription): Customers who have purchased the SAF product.
     3. Pay-As-You-Go: Customers who have purchased the SAF_BAG product or activated SAF_POS.', example='2'),
  }(name='resultObject', description='Return object'),
}

model DescribeSafDeOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSafDeOrderResponseBody(name='body'),
}

/**
 * @summary Query saf_de Order
 *
 * @param request DescribeSafDeOrderRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSafDeOrderResponse
 */
@context("describeSafDeOrderWithContext")
async function describeSafDeOrderWithOptions(request: DescribeSafDeOrderRequest, runtime: $RuntimeOptions): DescribeSafDeOrderResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.currentPage)) {
    query['currentPage'] = request.currentPage;
  }
  if (!$isNull(request.endDate)) {
    query['endDate'] = request.endDate;
  }
  if (!$isNull(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.startDate)) {
    query['startDate'] = request.startDate;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeSafDeOrder',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query saf_de Order
 *
 * @param request DescribeSafDeOrderRequest
 * @return DescribeSafDeOrderResponse
 */
async function describeSafDeOrder(request: DescribeSafDeOrderRequest): DescribeSafDeOrderResponse {
  var runtime = new $RuntimeOptions{};
  return describeSafDeOrderWithOptions(request, runtime);
}

model DescribeSafOrderRequest {
  lang?: string(name='Lang', description='Set the language type for request and response, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  endDate?: string(name='endDate', description='End date.', example='1755076800000'),
  exactProductCode?: string(name='exactProductCode', description='Product code.', example='saf_de'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10.', example='10'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou'),
  startDate?: string(name='startDate', description='Start time.', example='1752076800000'),
}

model DescribeSafOrderResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    expirationDate?: long(name='expirationDate', description='Expiration date (timestamp).', example='1755076800000'),
  }(name='resultObject', description='Returned object.'),
}

model DescribeSafOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSafOrderResponseBody(name='body'),
}

/**
 * @summary Query Order Information
 *
 * @param request DescribeSafOrderRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSafOrderResponse
 */
@context("describeSafOrderWithContext")
async function describeSafOrderWithOptions(request: DescribeSafOrderRequest, runtime: $RuntimeOptions): DescribeSafOrderResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.currentPage)) {
    query['currentPage'] = request.currentPage;
  }
  if (!$isNull(request.endDate)) {
    query['endDate'] = request.endDate;
  }
  if (!$isNull(request.exactProductCode)) {
    query['exactProductCode'] = request.exactProductCode;
  }
  if (!$isNull(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.startDate)) {
    query['startDate'] = request.startDate;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeSafOrder',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Order Information
 *
 * @param request DescribeSafOrderRequest
 * @return DescribeSafOrderResponse
 */
async function describeSafOrder(request: DescribeSafOrderRequest): DescribeSafOrderResponse {
  var runtime = new $RuntimeOptions{};
  return describeSafOrderWithOptions(request, runtime);
}

model DescribeSafStartConfigRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeSafStartConfigResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    deviceTypes?: [ string ](name='deviceTypes', description='List of device types.'),
    eventCodes?: [ string ](name='eventCodes', description='Event codes.'),
    languages?: [ string ](name='languages', description='Configuration language details.'),
    serverRegions?: [ string ](name='serverRegions', description='Server region'),
  }(name='resultObject', description='Returned object'),
}

model DescribeSafStartConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSafStartConfigResponseBody(name='body'),
}

/**
 * @summary Query Access Configuration
 *
 * @param request DescribeSafStartConfigRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSafStartConfigResponse
 */
@context("describeSafStartConfigWithContext")
async function describeSafStartConfigWithOptions(request: DescribeSafStartConfigRequest, runtime: $RuntimeOptions): DescribeSafStartConfigResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeSafStartConfig',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Access Configuration
 *
 * @param request DescribeSafStartConfigRequest
 * @return DescribeSafStartConfigResponse
 */
async function describeSafStartConfig(request: DescribeSafStartConfigRequest): DescribeSafStartConfigResponse {
  var runtime = new $RuntimeOptions{};
  return describeSafStartConfigWithOptions(request, runtime);
}

model DescribeSafStartStepsRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  aliyunServer?: boolean(name='aliyunServer', description='Whether the server is an Alibaba Cloud server

true or false', example='true'),
  deviceTypesStr?: string(name='deviceTypesStr', description='Used to receive a collection of strings from the frontend that POP cannot accept
     
Device type', example='ios'),
  eventCode?: string(name='eventCode', description='Event code', example='de_ahqido8038'),
  language?: string(name='language', description='Language, parameters can be passed
- zh-CN: Chinese (default)
- en-US: English', example='zh_CN'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  serverRegion?: string(name='serverRegion', description='Server region', example='cn-hangzhou'),
}

model DescribeSafStartStepsResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: [ 
    {
      content?: string(name='content', description='Step content', example='https://help.aliyun.com/document_detail/177689.html'),
      id?: string(name='id', description='Step title', example='ios'),
      type?: string(name='type', description='Type', example='URL'),
    }
  ](name='resultObject', description='Return object'),
}

model DescribeSafStartStepsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSafStartStepsResponseBody(name='body'),
}

/**
 * @summary Query Access Configuration
 *
 * @param request DescribeSafStartStepsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSafStartStepsResponse
 */
@context("describeSafStartStepsWithContext")
async function describeSafStartStepsWithOptions(request: DescribeSafStartStepsRequest, runtime: $RuntimeOptions): DescribeSafStartStepsResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.aliyunServer)) {
    query['aliyunServer'] = request.aliyunServer;
  }
  if (!$isNull(request.deviceTypesStr)) {
    query['deviceTypesStr'] = request.deviceTypesStr;
  }
  if (!$isNull(request.eventCode)) {
    query['eventCode'] = request.eventCode;
  }
  if (!$isNull(request.language)) {
    query['language'] = request.language;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.serverRegion)) {
    query['serverRegion'] = request.serverRegion;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeSafStartSteps',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Access Configuration
 *
 * @param request DescribeSafStartStepsRequest
 * @return DescribeSafStartStepsResponse
 */
async function describeSafStartSteps(request: DescribeSafStartStepsRequest): DescribeSafStartStepsResponse {
  var runtime = new $RuntimeOptions{};
  return describeSafStartStepsWithOptions(request, runtime);
}

model DescribeSafTagListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  tagName?: string(name='TagName', description='Tag name. Fuzzy search.', example='rn0301'),
  apiId?: string(name='apiId', description='API service ID.', example='34'),
  currentPage?: string(name='currentPage', description='Current page number.', example='1'),
  pageSize?: string(name='pageSize', description='Page size, default value is 10.', example='10'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou'),
}

model DescribeSafTagListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10.', example='10'),
  resultObject?: [ 
    {
      tagDesc?: string(name='tagDesc', description='Tag description.', example='依赖IP画像模型识别输出风险高、中高、中的判定\\\\n数据来源主要基于IP的网络属性数据和对黑产行为轨迹的情报监控数据，涵盖可识别检测IP网络属性特征、恶意属性等特征\\\\n而模型评分的高中低主要是根据当前IP号段命中风险行为的恶意程度和种类来判定的\\\\n备注：以下rn0311、rn0312、rn0313、rn0314、rn0315属于IP画像模型针对当前请求IP识别出的风险类别'),
      tagMean?: string(name='tagMean', description='Tag meaning.', example='IP风险评分高'),
      tagName?: string(name='tagName', description='Tag name.', example='rn0301'),
      tagState?: string(name='tagState', description='Tag identifier.', example='rn0301'),
      tagType?: string(name='tagType', description='Tag type.', example='IP风险类'),
      tagUid?: string(name='tagUid', description='Unique identifier of the tag key.', example='rn0301'),
      updateTime?: string(name='updateTime', description='Update time.', example='1684744034000'),
    }
  ](name='resultObject', description='Returned object.'),
  totalItem?: int32(name='totalItem', description='Total number of items.', example='6'),
  totalPage?: int32(name='totalPage', description='Total number of pages.', example='1'),
}

model DescribeSafTagListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSafTagListResponseBody(name='body'),
}

/**
 * @summary Get Risk Tag List
 *
 * @param request DescribeSafTagListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSafTagListResponse
 */
@context("describeSafTagListWithContext")
async function describeSafTagListWithOptions(request: DescribeSafTagListRequest, runtime: $RuntimeOptions): DescribeSafTagListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.tagName)) {
    query['TagName'] = request.tagName;
  }
  if (!$isNull(request.apiId)) {
    query['apiId'] = request.apiId;
  }
  if (!$isNull(request.currentPage)) {
    query['currentPage'] = request.currentPage;
  }
  if (!$isNull(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeSafTagList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Get Risk Tag List
 *
 * @param request DescribeSafTagListRequest
 * @return DescribeSafTagListResponse
 */
async function describeSafTagList(request: DescribeSafTagListRequest): DescribeSafTagListResponse {
  var runtime = new $RuntimeOptions{};
  return describeSafTagListWithOptions(request, runtime);
}

model DescribeSampleBatchOssPolicyRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  batchName?: string(name='batchName', description='Sample batch name', example='白样本'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeSampleBatchOssPolicyResponseBody = {
  accessId?: string(name='AccessId', description='OSS Access ID', example='LTAxxxxxxxxxxxx'),
  host?: string(name='Host', description='OSS Domain', example='172.25.126.234'),
  key?: string(name='Key', description='Key required for file upload.', example='saf/de/namelist/e924/ufzgsedX9bd3a7'),
  policy?: string(name='Policy', description='OSS Security Policy', example='eyJleHBpcmF0aW9uIjoiMjAyNS0wNy0zMFQwNjowNTo0OS45NTRaIiwiY29uZGl0aW9ucyI6W1siY29udGVudC1sZW5ndGgtcmFuZ2UiLDAsMTA0ODU3NjAwMF0sWyJlcSIsIiRrZXkiLCJzYWZcL2RlXC9uYW1lbGlzdFwvZTkyNFwvdWZ6Z3NlZFg5Ymxxxxxxxxxxx'),
  requestId?: string(name='RequestId', description='ID of the request', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  signature?: string(name='Signature', description='OSS Signature', example='PoAUQ//RusJJFIvCrn36O3+mM/U='),
}

model DescribeSampleBatchOssPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSampleBatchOssPolicyResponseBody(name='body'),
}

/**
 * @summary Get File Upload Credentials
 *
 * @param request DescribeSampleBatchOssPolicyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSampleBatchOssPolicyResponse
 */
@context("describeSampleBatchOssPolicyWithContext")
async function describeSampleBatchOssPolicyWithOptions(request: DescribeSampleBatchOssPolicyRequest, runtime: $RuntimeOptions): DescribeSampleBatchOssPolicyResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.batchName)) {
    query['batchName'] = request.batchName;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeSampleBatchOssPolicy',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Get File Upload Credentials
 *
 * @param request DescribeSampleBatchOssPolicyRequest
 * @return DescribeSampleBatchOssPolicyResponse
 */
async function describeSampleBatchOssPolicy(request: DescribeSampleBatchOssPolicyRequest): DescribeSampleBatchOssPolicyResponse {
  var runtime = new $RuntimeOptions{};
  return describeSampleBatchOssPolicyWithOptions(request, runtime);
}

model DescribeSampleDataByBatchUUidPageRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  batchUuid?: string(name='batchUuid', description='Sample batch UUID', example='203f1ae65c0a41a49dc4f8a47946caa2'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  dataValue?: string(name='dataValue', description='Content of the list entered in the text box', example='1770000000,1770000001'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10', example='10'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  updateBeginTime?: long(name='updateBeginTime', description='Start time', example='1724986526000'),
  updateEndTime?: long(name='updateEndTime', description='End time', example='1724986526000'),
}

model DescribeSampleDataByBatchUUidPageResponseBody = {
  requestId?: string(name='RequestId', description='ID of the request', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10', example='10'),
  resultObject?: [ 
    {
      batchName?: string(name='batchName', description='Sample batch name', example='白样本'),
      creator?: string(name='creator', description='Creator', example='1519714049632764'),
      dataTagType?: string(name='dataTagType', description='Sample type', example='pass'),
      dataValue?: string(name='dataValue', description='Data content', example='177000001'),
      gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1621578648000'),
      gmtModified?: long(name='gmtModified', description='Modification time', example='1565701886000'),
      lastSourceType?: string(name='lastSourceType', description='Last source', example='Console-Text'),
      uuid?: string(name='uuid', description='Sample batch UUID', example='203f1ae65c0a41a49dc4f8a47946caa2'),
      version?: int32(name='version', description='Version', example='1'),
    }
  ](name='resultObject', description='Returned object'),
  totalItem?: int32(name='totalItem', description='Total number of items', example='6'),
  totalPage?: int32(name='totalPage', description='Total number of pages.', example='1'),
}

model DescribeSampleDataByBatchUUidPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSampleDataByBatchUUidPageResponseBody(name='body'),
}

/**
 * @summary Sample List
 *
 * @param request DescribeSampleDataByBatchUUidPageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSampleDataByBatchUUidPageResponse
 */
@context("describeSampleDataByBatchUUidPageWithContext")
async function describeSampleDataByBatchUUidPageWithOptions(request: DescribeSampleDataByBatchUUidPageRequest, runtime: $RuntimeOptions): DescribeSampleDataByBatchUUidPageResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.batchUuid)) {
    query['batchUuid'] = request.batchUuid;
  }
  if (!$isNull(request.currentPage)) {
    query['currentPage'] = request.currentPage;
  }
  if (!$isNull(request.dataValue)) {
    query['dataValue'] = request.dataValue;
  }
  if (!$isNull(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.updateBeginTime)) {
    query['updateBeginTime'] = request.updateBeginTime;
  }
  if (!$isNull(request.updateEndTime)) {
    query['updateEndTime'] = request.updateEndTime;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeSampleDataByBatchUUidPage',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Sample List
 *
 * @param request DescribeSampleDataByBatchUUidPageRequest
 * @return DescribeSampleDataByBatchUUidPageResponse
 */
async function describeSampleDataByBatchUUidPage(request: DescribeSampleDataByBatchUUidPageRequest): DescribeSampleDataByBatchUUidPageResponse {
  var runtime = new $RuntimeOptions{};
  return describeSampleDataByBatchUUidPageWithOptions(request, runtime);
}

model DescribeSampleDataListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  currentPage?: string(name='currentPage', description='Current page number.', example='1'),
  deleteTag?: string(name='deleteTag', description='Deletion status', example='DELETE'),
  pageSize?: string(name='pageSize', description='Page size, default value is 10.', example='10'),
  queryContent?: string(name='queryContent', description='Query content', example='手机号'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  sampleId?: long(name='sampleId', description='Sample ID.', example='5467'),
  scene?: string(name='scene', description='Scene', example='1'),
  status?: string(name='status', description='Status.', example='CREATE'),
}

model DescribeSampleDataListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10.', example='10'),
  resultObject?: [ 
    {
      classificationType?: string(name='classificationType', description='Classification type, binary or multi-class.', example='二分类'),
      dataDistributed?: string(name='dataDistributed', description='Criterion value for sample data calculation', example='{"正样本":"1"，"负样本":"1"}'),
      dataTitle?: string(name='dataTitle', description='First row of sample data. Used to define the values of each column.', example='17700000000'),
      deleteTag?: string(name='deleteTag', description='Deletion tag.', example='DELETE'),
      description?: string(name='description', description='Description information.', example='描述'),
      gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1621578648000'),
      gmtModified?: long(name='gmtModified', description='Modification time.', example='1565701886000'),
      id?: long(name='id', description='Primary key ID', example='497'),
      name?: string(name='name', description='Name', example='注册样本'),
      normalSize?: long(name='normalSize', description='Number of normal samples', example='999'),
      recallConfig?: string(name='recallConfig', description='Recall configuration', example='{"variables":"a,b,c"}'),
      riskSize?: long(name='riskSize', description='Number of risk samples', example='1'),
      riskValue?: string(name='riskValue', description='Specified risk value', example='black'),
      sampleLabelDetail?: string(name='sampleLabelDetail', description='Sample label details', example='[{"type":"positive","size":"2000","value":1},{"type":"negative","size":1900,"value":0}]'),
      sampleSize?: long(name='sampleSize', description='Sample size', example='1000'),
      scene?: string(name='scene', description='Scene code', example='account_abuse_detection'),
      status?: string(name='status', description='Status.', example='CREATE'),
      storePath?: string(name='storePath', description='Storage path', example='saf/de/sample/3dc2spspHKq4G3YI9d08'),
      storeType?: string(name='storeType', description='Storage type', example='OSS'),
      supportRecall?: string(name='supportRecall', description='Whether recall is supported', example='true'),
      userId?: long(name='userId', description='User UID', example='1519714049632764'),
      version?: int32(name='version', description='Version', example='1'),
    }
  ](name='resultObject', description='Returned object'),
  totalItem?: int32(name='totalItem', description='Total number of items.', example='6'),
  totalPage?: int32(name='totalPage', description='Total number of pages.', example='1'),
}

model DescribeSampleDataListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSampleDataListResponseBody(name='body'),
}

/**
 * @summary Paged Query of Sample List
 *
 * @param request DescribeSampleDataListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSampleDataListResponse
 */
@context("describeSampleDataListWithContext")
async function describeSampleDataListWithOptions(request: DescribeSampleDataListRequest, runtime: $RuntimeOptions): DescribeSampleDataListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.currentPage)) {
    query['currentPage'] = request.currentPage;
  }
  if (!$isNull(request.deleteTag)) {
    query['deleteTag'] = request.deleteTag;
  }
  if (!$isNull(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!$isNull(request.queryContent)) {
    query['queryContent'] = request.queryContent;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.sampleId)) {
    query['sampleId'] = request.sampleId;
  }
  if (!$isNull(request.scene)) {
    query['scene'] = request.scene;
  }
  if (!$isNull(request.status)) {
    query['status'] = request.status;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeSampleDataList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Paged Query of Sample List
 *
 * @param request DescribeSampleDataListRequest
 * @return DescribeSampleDataListResponse
 */
async function describeSampleDataList(request: DescribeSampleDataListRequest): DescribeSampleDataListResponse {
  var runtime = new $RuntimeOptions{};
  return describeSampleDataListWithOptions(request, runtime);
}

model DescribeSampleDataPageRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  dataValue?: string(name='dataValue', description='Content of the list entered in the text box', example='1770000000'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10', example='10'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  updateBeginTime?: long(name='updateBeginTime', description='Start time', example='1730429469000'),
  updateEndTime?: long(name='updateEndTime', description='End time', example='1730429469000'),
}

model DescribeSampleDataPageResponseBody = {
  requestId?: string(name='RequestId', description='ID of the request', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Number of items per page, default is 10.', example='10'),
  resultObject?: [ 
    {
      creator?: string(name='creator', description='Creator', example='1519714049632764'),
      dataTagType?: string(name='dataTagType', description='Sample type', example='pass'),
      dataValue?: string(name='dataValue', description='Content of the list entered in the text box', example='1770000000'),
      gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1621578648000'),
      gmtModified?: long(name='gmtModified', description='Modification time', example='1565701886000'),
      lastSourceType?: string(name='lastSourceType', description='Last source', example='Console-Text'),
      updator?: string(name='updator', description='Modifier', example='1519714049632764'),
      uuid?: string(name='uuid', description='UUID of the sample batch', example='48653f1372444c078f7b3d1c317d37dc'),
      version?: int32(name='version', description='Version number', example='1'),
    }
  ](name='resultObject', description='Returned object'),
  totalItem?: int32(name='totalItem', description='Total number of items', example='3'),
  totalPage?: int32(name='totalPage', description='Total number of pages.', example='1'),
}

model DescribeSampleDataPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSampleDataPageResponseBody(name='body'),
}

/**
 * @summary Sample List
 *
 * @param request DescribeSampleDataPageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSampleDataPageResponse
 */
@context("describeSampleDataPageWithContext")
async function describeSampleDataPageWithOptions(request: DescribeSampleDataPageRequest, runtime: $RuntimeOptions): DescribeSampleDataPageResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.currentPage)) {
    query['currentPage'] = request.currentPage;
  }
  if (!$isNull(request.dataValue)) {
    query['dataValue'] = request.dataValue;
  }
  if (!$isNull(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.updateBeginTime)) {
    query['updateBeginTime'] = request.updateBeginTime;
  }
  if (!$isNull(request.updateEndTime)) {
    query['updateEndTime'] = request.updateEndTime;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeSampleDataPage',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Sample List
 *
 * @param request DescribeSampleDataPageRequest
 * @return DescribeSampleDataPageResponse
 */
async function describeSampleDataPage(request: DescribeSampleDataPageRequest): DescribeSampleDataPageResponse {
  var runtime = new $RuntimeOptions{};
  return describeSampleDataPageWithOptions(request, runtime);
}

model DescribeSampleDemoDownloadUrlRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  scene?: string(name='scene', description='Scene code

This parameter is required.', example='coupon_abuse_detection'),
}

model DescribeSampleDemoDownloadUrlResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DescribeSampleDemoDownloadUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSampleDemoDownloadUrlResponseBody(name='body'),
}

/**
 * @summary Query Sample Example Authorization
 *
 * @param request DescribeSampleDemoDownloadUrlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSampleDemoDownloadUrlResponse
 */
@context("describeSampleDemoDownloadUrlWithContext")
async function describeSampleDemoDownloadUrlWithOptions(request: DescribeSampleDemoDownloadUrlRequest, runtime: $RuntimeOptions): DescribeSampleDemoDownloadUrlResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.scene)) {
    query['scene'] = request.scene;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeSampleDemoDownloadUrl',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Sample Example Authorization
 *
 * @param request DescribeSampleDemoDownloadUrlRequest
 * @return DescribeSampleDemoDownloadUrlResponse
 */
async function describeSampleDemoDownloadUrl(request: DescribeSampleDemoDownloadUrlRequest): DescribeSampleDemoDownloadUrlResponse {
  var runtime = new $RuntimeOptions{};
  return describeSampleDemoDownloadUrlWithOptions(request, runtime);
}

model DescribeSampleDownloadUrlRequest {
  lang?: string(name='Lang', description='Set the language type for request and response, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  sampleId?: long(name='sampleId', description='Sample ID.

This parameter is required.', example='5467'),
}

model DescribeSampleDownloadUrlResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DescribeSampleDownloadUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSampleDownloadUrlResponseBody(name='body'),
}

/**
 * @summary Query Sample Download Authorization Information
 *
 * @param request DescribeSampleDownloadUrlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSampleDownloadUrlResponse
 */
@context("describeSampleDownloadUrlWithContext")
async function describeSampleDownloadUrlWithOptions(request: DescribeSampleDownloadUrlRequest, runtime: $RuntimeOptions): DescribeSampleDownloadUrlResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.sampleId)) {
    query['sampleId'] = request.sampleId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeSampleDownloadUrl',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Sample Download Authorization Information
 *
 * @param request DescribeSampleDownloadUrlRequest
 * @return DescribeSampleDownloadUrlResponse
 */
async function describeSampleDownloadUrl(request: DescribeSampleDownloadUrlRequest): DescribeSampleDownloadUrlResponse {
  var runtime = new $RuntimeOptions{};
  return describeSampleDownloadUrlWithOptions(request, runtime);
}

model DescribeSampleInfoRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  id?: long(name='id', description='Primary key ID', example='3144'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  versions?: int32(name='versions', description='Version number.', example='1'),
}

model DescribeSampleInfoResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    id?: long(name='id', description='Primary key ID', example='3144'),
    sampleTags?: string(name='sampleTags', description='Sample tags.', example='em0102'),
    sampleType?: string(name='sampleType', description='Sample type', example='PHONE'),
    sampleValue?: string(name='sampleValue', description='Sample value.', example='17700000000'),
    updateTime?: string(name='updateTime', description='Update time.', example='1753804800000'),
    version?: int32(name='version', description='Version number.', example='1'),
  }(name='resultObject', description='Returned object'),
}

model DescribeSampleInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSampleInfoResponseBody(name='body'),
}

/**
 * @summary Query Sample Details
 *
 * @param request DescribeSampleInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSampleInfoResponse
 */
@context("describeSampleInfoWithContext")
async function describeSampleInfoWithOptions(request: DescribeSampleInfoRequest, runtime: $RuntimeOptions): DescribeSampleInfoResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.id)) {
    query['id'] = request.id;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.versions)) {
    query['versions'] = request.versions;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeSampleInfo',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Sample Details
 *
 * @param request DescribeSampleInfoRequest
 * @return DescribeSampleInfoResponse
 */
async function describeSampleInfo(request: DescribeSampleInfoRequest): DescribeSampleInfoResponse {
  var runtime = new $RuntimeOptions{};
  return describeSampleInfoWithOptions(request, runtime);
}

model DescribeSampleListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, with a default value of 10', example='10'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  sampleType?: string(name='sampleType', description='Sample type', example='PHONE'),
  sampleValue?: string(name='sampleValue', description='Sample data value.', example='1770000000'),
}

model DescribeSampleListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, with a default value of 10', example='10'),
  resultObject?: [ 
    {
      id?: long(name='id', description='Database ID.', example='497'),
      sampleTags?: string(name='sampleTags', description='Sample tags.', example='rm0102'),
      sampleType?: int32(name='sampleType', description='Sample type', example='PHONE'),
      sampleValue?: string(name='sampleValue', description='Sample value.', example='1770000000'),
      updateTime?: long(name='updateTime', description='Update time.', example='1699450018265'),
      version?: int32(name='version', description='Version number.', example='1'),
    }
  ](name='resultObject', description='Returned object'),
  totalItem?: int32(name='totalItem', description='Total count.', example='6'),
  totalPage?: int32(name='totalPage', description='Total pages', example='1'),
}

model DescribeSampleListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSampleListResponseBody(name='body'),
}

/**
 * @summary Query Sample List
 *
 * @param request DescribeSampleListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSampleListResponse
 */
@context("describeSampleListWithContext")
async function describeSampleListWithOptions(request: DescribeSampleListRequest, runtime: $RuntimeOptions): DescribeSampleListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.currentPage)) {
    query['currentPage'] = request.currentPage;
  }
  if (!$isNull(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.sampleType)) {
    query['sampleType'] = request.sampleType;
  }
  if (!$isNull(request.sampleValue)) {
    query['sampleValue'] = request.sampleValue;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeSampleList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Sample List
 *
 * @param request DescribeSampleListRequest
 * @return DescribeSampleListResponse
 */
async function describeSampleList(request: DescribeSampleListRequest): DescribeSampleListResponse {
  var runtime = new $RuntimeOptions{};
  return describeSampleListWithOptions(request, runtime);
}

model DescribeSampleSceneListRequest {
  lang?: string(name='Lang', description='Set the language type for request and response messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeSampleSceneListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10.', example='10'),
  resultObject?: [ 
    {
      bizType?: string(name='bizType', description='Business type.', example='variable_scene'),
      configKey?: string(name='configKey', description='Configuration key.', example='account_abuse_detection'),
      configValue?: string(name='configValue', description='Configuration value.', example='1'),
      creator?: string(name='creator', description='Creator.', example='1519714049632764'),
      description?: string(name='description', description='Description information.', example='变量描述'),
      gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1621578648000'),
      gmtModified?: long(name='gmtModified', description='Modification time.', example='1565701886000'),
      id?: long(name='id', description='Task ID.', example='3144'),
      lastModifiedOperator?: string(name='lastModifiedOperator', description='Last modified by.', example='1519714049632764'),
      status?: string(name='status', description='Status.', example='ENABLE'),
    }
  ](name='resultObject', description='Returned object.'),
  totalItem?: int32(name='totalItem', description='Total number of items.', example='6'),
  totalPage?: int32(name='totalPage', description='Total number of pages.', example='1'),
}

model DescribeSampleSceneListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSampleSceneListResponseBody(name='body'),
}

/**
 * @summary Query Scene List
 *
 * @param request DescribeSampleSceneListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSampleSceneListResponse
 */
@context("describeSampleSceneListWithContext")
async function describeSampleSceneListWithOptions(request: DescribeSampleSceneListRequest, runtime: $RuntimeOptions): DescribeSampleSceneListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeSampleSceneList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Scene List
 *
 * @param request DescribeSampleSceneListRequest
 * @return DescribeSampleSceneListResponse
 */
async function describeSampleSceneList(request: DescribeSampleSceneListRequest): DescribeSampleSceneListResponse {
  var runtime = new $RuntimeOptions{};
  return describeSampleSceneListWithOptions(request, runtime);
}

model DescribeSampleTagListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and responses, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeSampleTagListResponseBody = {
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DescribeSampleTagListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSampleTagListResponseBody(name='body'),
}

/**
 * @summary Get Tag List
 *
 * @param request DescribeSampleTagListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSampleTagListResponse
 */
@context("describeSampleTagListWithContext")
async function describeSampleTagListWithOptions(request: DescribeSampleTagListRequest, runtime: $RuntimeOptions): DescribeSampleTagListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeSampleTagList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Get Tag List
 *
 * @param request DescribeSampleTagListRequest
 * @return DescribeSampleTagListResponse
 */
async function describeSampleTagList(request: DescribeSampleTagListRequest): DescribeSampleTagListResponse {
  var runtime = new $RuntimeOptions{};
  return describeSampleTagListWithOptions(request, runtime);
}

model DescribeSampleUploadPolicyRequest {
  lang?: string(name='Lang', description='Set the language type for request and response messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou'),
}

model DescribeSampleUploadPolicyResponseBody = {
  accessId?: string(name='AccessId', description='OSS access key ID.', example='LTAxxxxxxxxxxxx'),
  host?: string(name='Host', description='OSS domain name.', example='emseu.cxy8uoq4aafx.eu-central-1.rds.amazonaws.com'),
  key?: string(name='Key', description='The key of OSS upload policy.', example='saf/de/namelist/e924/ufzgsedX9bd3a7'),
  policy?: string(name='Policy', description='OSS upload policy.', example='eyJleHBpcmF0aW9uIjoiMjAyNS0wNy0zMFQwNjowNTo0OS45NTRaIiwiY29uZGl0aW9ucyI6W1siY29udGVudC1sZW5ndGgtcmFuZ2UiLDAsMTA0ODU3NjAwMF0sWyJlcSIsIiRrZXkiLCJzYWZcL2RlXC9uYW1lbGlzdFwvZTkyNFwvdWZ6Z3NlZFg5Ymxxxxxxxxxxx'),
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  signature?: string(name='Signature', description='Signature information.', example='3Es5j/9Xm/zwPcM9cwEr5pa0Wsc='),
  stsToken?: string(name='StsToken', description='Temporary identity credential.', example='tT44bMQxxxxxxxxxxxxxxx'),
}

model DescribeSampleUploadPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSampleUploadPolicyResponseBody(name='body'),
}

/**
 * @summary Query Sample Upload Authorization Information
 *
 * @param request DescribeSampleUploadPolicyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSampleUploadPolicyResponse
 */
@context("describeSampleUploadPolicyWithContext")
async function describeSampleUploadPolicyWithOptions(request: DescribeSampleUploadPolicyRequest, runtime: $RuntimeOptions): DescribeSampleUploadPolicyResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeSampleUploadPolicy',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Sample Upload Authorization Information
 *
 * @param request DescribeSampleUploadPolicyRequest
 * @return DescribeSampleUploadPolicyResponse
 */
async function describeSampleUploadPolicy(request: DescribeSampleUploadPolicyRequest): DescribeSampleUploadPolicyResponse {
  var runtime = new $RuntimeOptions{};
  return describeSampleUploadPolicyWithOptions(request, runtime);
}

model DescribeSamplebatchPageRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  dataValue?: string(name='dataValue', description='Content of the list entered in the text box', example='1770000000'),
  pageSize?: int32(name='pageSize', description='Page size, with a default value of 10', example='10'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeSamplebatchPageResponseBody = {
  requestId?: string(name='RequestId', description='ID of the request', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, with a default value of 10', example='10'),
  resultObject?: [ 
    {
      batchName?: string(name='batchName', description='Sample batch name', example='白样本'),
      creator?: string(name='creator', description='Creator.', example='1519714049632764'),
      dataType?: string(name='dataType', description='Data type', example='mobile'),
      description?: string(name='description', description='Description.', example='描述'),
      gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1621578648000'),
      gmtModified?: long(name='gmtModified', description='Modification time', example='1565701886000'),
      initValidFileRow?: long(name='initValidFileRow', description='Valid sample content data', example='2'),
      sampleBatchType?: string(name='sampleBatchType', description='Specific type of the sample list', example='pass'),
      services?: string(name='services', description='Service ID', example='account_abuse'),
      updator?: string(name='updator', description='Modifier', example='1519714049632764'),
      uuid?: string(name='uuid', description='Sample batch UUID', example='203f1ae65c0a41a49dc4f8a47946caa2'),
    }
  ](name='resultObject', description='Returned object'),
  totalItem?: int32(name='totalItem', description='Total number of items', example='3'),
  totalPage?: int32(name='totalPage', description='Total number of pages', example='1'),
}

model DescribeSamplebatchPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSamplebatchPageResponseBody(name='body'),
}

/**
 * @summary Sample Batch List
 *
 * @param request DescribeSamplebatchPageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSamplebatchPageResponse
 */
@context("describeSamplebatchPageWithContext")
async function describeSamplebatchPageWithOptions(request: DescribeSamplebatchPageRequest, runtime: $RuntimeOptions): DescribeSamplebatchPageResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.currentPage)) {
    query['currentPage'] = request.currentPage;
  }
  if (!$isNull(request.dataValue)) {
    query['dataValue'] = request.dataValue;
  }
  if (!$isNull(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeSamplebatchPage',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Sample Batch List
 *
 * @param request DescribeSamplebatchPageRequest
 * @return DescribeSamplebatchPageResponse
 */
async function describeSamplebatchPage(request: DescribeSamplebatchPageRequest): DescribeSamplebatchPageResponse {
  var runtime = new $RuntimeOptions{};
  return describeSamplebatchPageWithOptions(request, runtime);
}

model DescribeSceneAllEventNameCodeListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  createType?: string(name='createType', description='Creation type', example='NORMAL'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeSceneAllEventNameCodeListResponseBody = {
  code?: string(name='code', description='Status code', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error details', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID, which is unique for each request, facilitating subsequent troubleshooting', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: [ 
    {
      children?: [ 
        {
          createType?: string(name='createType', description='Creation type', example='NORMAL'),
          eventCode?: string(name='eventCode', description='Event code', example='de_aamexg3015'),
          eventName?: string(name='eventName', description='Event name.', example='测试'),
          eventType?: string(name='eventType', description='Event type', example='BYPASS'),
        }
      ](name='children', description='Child objects'),
      createType?: string(name='createType', description='Creation type', example='MORMAL'),
      eventCode?: string(name='eventCode', description='Event code', example='de_aszbjb7236'),
      eventName?: string(name='eventName', description='Event name.', example='营销风险识别_增强版'),
      eventType?: string(name='eventType', description='Event type', example='MAIN'),
    }
  ](name='resultObject', description='Returned object'),
  success?: boolean(name='success', description='Indicates whether the operation was successful, where true means success.', example='true'),
}

model DescribeSceneAllEventNameCodeListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSceneAllEventNameCodeListResponseBody(name='body'),
}

/**
 * @summary Dropdown list for scenario-based service events
 *
 * @description Dropdown list for scenario-based risk control events
 *
 * @param request DescribeSceneAllEventNameCodeListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSceneAllEventNameCodeListResponse
 */
@context("describeSceneAllEventNameCodeListWithContext")
async function describeSceneAllEventNameCodeListWithOptions(request: DescribeSceneAllEventNameCodeListRequest, runtime: $RuntimeOptions): DescribeSceneAllEventNameCodeListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.createType)) {
    query['createType'] = request.createType;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeSceneAllEventNameCodeList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Dropdown list for scenario-based service events
 *
 * @description Dropdown list for scenario-based risk control events
 *
 * @param request DescribeSceneAllEventNameCodeListRequest
 * @return DescribeSceneAllEventNameCodeListResponse
 */
async function describeSceneAllEventNameCodeList(request: DescribeSceneAllEventNameCodeListRequest): DescribeSceneAllEventNameCodeListResponse {
  var runtime = new $RuntimeOptions{};
  return describeSceneAllEventNameCodeListWithOptions(request, runtime);
}

model DescribeSceneEventPageListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  currentPage?: string(name='currentPage', description='Current page number.', example='1'),
  nameOrCode?: string(name='nameOrCode', description='Search name or service code', example='servicer_code'),
  pageSize?: string(name='pageSize', description='Page size.', example='10'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeSceneEventPageListResponseBody = {
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Number of items per page. Default value: 20, minimum value: 1, maximum value: 50.', example='20'),
  requestId?: string(name='requestId', description='Request ID, each request has a unique value, which facilitates subsequent troubleshooting', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: [ 
    {
      commonRuleCount?: string(name='commonRuleCount', description='Number of common rules', example='10'),
      customRuleCount?: string(name='customRuleCount', description='Number of custom rules', example='10'),
      eventCode?: string(name='eventCode', description='Event code', example='de_aszbjb7236'),
      eventName?: string(name='eventName', description='Event name.', example='注册风险'),
      gmtModified?: string(name='gmtModified', description='Modification time', example='1565701886000'),
      modifier?: string(name='modifier', description='Modifier', example='公有云用户uid'),
      normalRuleCount?: string(name='normalRuleCount', description='Number of custom rules', example='10'),
      service?: string(name='service', description='Service code', example='device_risk'),
      useStatus?: string(name='useStatus', description='Usage status', example='使用/未使用'),
      whiteBoxRuleCount?: string(name='whiteBoxRuleCount', description='Number of white-box rules', example='10'),
    }
  ](name='resultObject', description='Return array'),
  totalItem?: int32(name='totalItem', description='Total number of items', example='3'),
  totalPage?: int32(name='totalPage', description='Total number of pages', example='9'),
}

model DescribeSceneEventPageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSceneEventPageListResponseBody(name='body'),
}

/**
 * @summary List of Scenario-based Risk Control Events
 *
 * @param request DescribeSceneEventPageListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSceneEventPageListResponse
 */
@context("describeSceneEventPageListWithContext")
async function describeSceneEventPageListWithOptions(request: DescribeSceneEventPageListRequest, runtime: $RuntimeOptions): DescribeSceneEventPageListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.currentPage)) {
    query['currentPage'] = request.currentPage;
  }
  if (!$isNull(request.nameOrCode)) {
    query['nameOrCode'] = request.nameOrCode;
  }
  if (!$isNull(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeSceneEventPageList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary List of Scenario-based Risk Control Events
 *
 * @param request DescribeSceneEventPageListRequest
 * @return DescribeSceneEventPageListResponse
 */
async function describeSceneEventPageList(request: DescribeSceneEventPageListRequest): DescribeSceneEventPageListResponse {
  var runtime = new $RuntimeOptions{};
  return describeSceneEventPageListWithOptions(request, runtime);
}

model DescribeSceneRulePageListRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages. Default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  createType?: string(name='createType', description='Creation type', example='NOMAL'),
  currentPage?: string(name='currentPage', description='Current page number.', example='1'),
  eventCode?: string(name='eventCode', description='Event code', example='de_ahgctb7098'),
  pageSize?: string(name='pageSize', description='Number of items per page in the returned results. Default value: 20, minimum value: 1, maximum value: 50.', example='20'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  ruleAuthType?: string(name='ruleAuthType', description='Strategy type', example='CUSTMER'),
  ruleName?: string(name='ruleName', description='Strategy name', example='营销风险识别'),
  ruleStatus?: string(name='ruleStatus', description='Strategy status', example='RUNNING'),
}

model DescribeSceneRulePageListResponseBody = {
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Number of items per page in the returned results. Default value: 20, minimum value: 1, maximum value: 50.', example='20'),
  requestId?: string(name='requestId', description='Request ID, which is unique for each request, facilitating subsequent troubleshooting', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: [ 
    {
      authType?: string(name='authType', description='Service authorization type', example='admin'),
      consoleAudit?: {
        applyUserId?: string(name='applyUserId', description='Initiator account ID', example='1234567890999'),
        applyUserName?: string(name='applyUserName', description='Initiator account name', example='张三'),
        auditMsg?: string(name='auditMsg', description='Approval comments', example='同意'),
        auditRealUserId?: string(name='auditRealUserId', description='Final approver ID', example='1234567890'),
        auditRealUserName?: string(name='auditRealUserName', description='Approver account name', example='王五'),
        auditRemark?: string(name='auditRemark', description='Approval application remarks', example='备注'),
        auditStatus?: string(name='auditStatus', description='Status', example='AGREE'),
        auditTime?: long(name='auditTime', description='Approval time', example='1545726028000'),
        auditUserId?: string(name='auditUserId', description='Designated auditor account IDs (comma-separated for multiple)', example='123'),
        auditUserName?: string(name='auditUserName', description='Designated auditor account names (comma-separated for multiple)', example='李四'),
        gmtCreate?: long(name='gmtCreate', description='Creation time in UTC', example='1545726028000'),
        id?: long(name='id', description='Primary key ID', example='1728'),
        relationExt?: string(name='relationExt', description='Information about other related parties (in JSON format)', example='{}'),
        relationId?: long(name='relationId', description='审批关联的事务ID', example='123'),
        relationName?: string(name='relationName', description='The name of the associated transaction (can be null)', example='t'),
        relationType?: string(name='relationType', description='审批的类型（如rule代表策略的审批）', example='RULE'),
      }(name='consoleAudit', description='Audit object'),
      eventCode?: string(name='eventCode', description='Event code', example='de_aszbjb7236'),
      eventName?: string(name='eventName', description='Event name.', example='注册风险'),
      eventType?: string(name='eventType', description='Event type', example='MAIN'),
      externalRuleName?: string(name='externalRuleName', description='External rule name', example='策略1'),
      gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1621578648000'),
      gmtModified?: long(name='gmtModified', description='Modification time', example='1565701886000'),
      id?: long(name='id', description='Primary key ID of the rule', example='497'),
      mainRuleId?: string(name='mainRuleId', description='Main rule ID', example='4399'),
      priority?: long(name='priority', description='Strategy priority, where a higher number indicates a higher priority.', example='10'),
      ruleAuthType?: string(name='ruleAuthType', description='Rule Auth type', example='CUSTMER'),
      ruleId?: string(name='ruleId', description='Strategy ID', example='4730'),
      ruleMemo?: string(name='ruleMemo', description='Strategy description', example='描述信息'),
      ruleName?: string(name='ruleName', description='Strategy name', example='营销风险识别'),
      ruleStatus?: string(name='ruleStatus', description='Strategy status', example='RUNNING'),
      ruleType?: string(name='ruleType', description='Rule type', example='DEFAULT'),
      ruleVersionId?: long(name='ruleVersionId', description='Primary key ID of the rule version', example='3823'),
      templateId?: long(name='templateId', description='Template ID', example='6'),
      version?: int32(name='version', description='Version number', example='1.0'),
    }
  ](name='resultObject', description='Returned object'),
  totalItem?: int32(name='totalItem', description='Total number of items', example='3'),
  totalPage?: int32(name='totalPage', description='Total number of pages', example='9'),
}

model DescribeSceneRulePageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSceneRulePageListResponseBody(name='body'),
}

/**
 * @summary White-boxed strategy list for risk control services
 *
 * @description Query the list of scenarized risk control event strategies
 *
 * @param request DescribeSceneRulePageListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSceneRulePageListResponse
 */
@context("describeSceneRulePageListWithContext")
async function describeSceneRulePageListWithOptions(request: DescribeSceneRulePageListRequest, runtime: $RuntimeOptions): DescribeSceneRulePageListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.createType)) {
    query['createType'] = request.createType;
  }
  if (!$isNull(request.currentPage)) {
    query['currentPage'] = request.currentPage;
  }
  if (!$isNull(request.eventCode)) {
    query['eventCode'] = request.eventCode;
  }
  if (!$isNull(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.ruleAuthType)) {
    query['ruleAuthType'] = request.ruleAuthType;
  }
  if (!$isNull(request.ruleName)) {
    query['ruleName'] = request.ruleName;
  }
  if (!$isNull(request.ruleStatus)) {
    query['ruleStatus'] = request.ruleStatus;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeSceneRulePageList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary White-boxed strategy list for risk control services
 *
 * @description Query the list of scenarized risk control event strategies
 *
 * @param request DescribeSceneRulePageListRequest
 * @return DescribeSceneRulePageListResponse
 */
async function describeSceneRulePageList(request: DescribeSceneRulePageListRequest): DescribeSceneRulePageListResponse {
  var runtime = new $RuntimeOptions{};
  return describeSceneRulePageListWithOptions(request, runtime);
}

model DescribeScoreListRequest {
  id?: string(name='Id', description='Primary key ID.', example='300126'),
  lang?: string(name='Lang', description='Language type of the returned message. Values:

- **zh** (default): Chinese
- **en**: English', example='zh'),
}

model DescribeScoreListResponseBody = {
  code?: string(name='Code', description='Status code.', example='200'),
  httpStatusCode?: string(name='HttpStatusCode', description='HTTP status code.', example='200'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: string(name='ResultObject', description='Return result.', example='true'),
}

model DescribeScoreListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeScoreListResponseBody(name='body'),
}

/**
 * @summary Score Distribution
 *
 * @param request DescribeScoreListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeScoreListResponse
 */
@context("describeScoreListWithContext")
async function describeScoreListWithOptions(request: DescribeScoreListRequest, runtime: $RuntimeOptions): DescribeScoreListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.id)) {
    query['Id'] = request.id;
  }
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeScoreList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Score Distribution
 *
 * @param request DescribeScoreListRequest
 * @return DescribeScoreListResponse
 */
async function describeScoreList(request: DescribeScoreListRequest): DescribeScoreListResponse {
  var runtime = new $RuntimeOptions{};
  return describeScoreListWithOptions(request, runtime);
}

model DescribeScoreSectionNumLineChartRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  beginTime?: string(name='beginTime', description='Start timestamp, in milliseconds.

This parameter is required.', example='1751249559000'),
  byPassEventCodes?: string(name='byPassEventCodes', description='Bypass event code', example='de_amnhke2482'),
  endTime?: string(name='endTime', description='End timestamp, in milliseconds.

This parameter is required.', example='1751249559000'),
  mainEventCodes?: string(name='mainEventCodes', description='Main event code', example='de_avcqzc3714'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  shuntEventCodes?: string(name='shuntEventCodes', description='Diversion event code', example='de_amnhke2488'),
}

model DescribeScoreSectionNumLineChartResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    series?: [ 
      {
        data?: [ string ](name='data', description='List of current category results.'),
        name?: string(name='name', description='Category name.', example='旁路事件'),
      }
    ](name='series', description='Data list'),
    xaxis?: {
      data?: [ string ](name='data', description='Data structure.'),
    }(name='xaxis', description='Details of xaxis node.'),
  }(name='resultObject', description='Returned object'),
}

model DescribeScoreSectionNumLineChartResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeScoreSectionNumLineChartResponseBody(name='body'),
}

/**
 * @summary Score Range Quantity Analysis
 *
 * @param request DescribeScoreSectionNumLineChartRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeScoreSectionNumLineChartResponse
 */
@context("describeScoreSectionNumLineChartWithContext")
async function describeScoreSectionNumLineChartWithOptions(request: DescribeScoreSectionNumLineChartRequest, runtime: $RuntimeOptions): DescribeScoreSectionNumLineChartResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.beginTime)) {
    query['beginTime'] = request.beginTime;
  }
  if (!$isNull(request.byPassEventCodes)) {
    query['byPassEventCodes'] = request.byPassEventCodes;
  }
  if (!$isNull(request.endTime)) {
    query['endTime'] = request.endTime;
  }
  if (!$isNull(request.mainEventCodes)) {
    query['mainEventCodes'] = request.mainEventCodes;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.shuntEventCodes)) {
    query['shuntEventCodes'] = request.shuntEventCodes;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeScoreSectionNumLineChart',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Score Range Quantity Analysis
 *
 * @param request DescribeScoreSectionNumLineChartRequest
 * @return DescribeScoreSectionNumLineChartResponse
 */
async function describeScoreSectionNumLineChart(request: DescribeScoreSectionNumLineChartRequest): DescribeScoreSectionNumLineChartResponse {
  var runtime = new $RuntimeOptions{};
  return describeScoreSectionNumLineChartWithOptions(request, runtime);
}

model DescribeScoreSectionPieChartRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  beginTime?: long(name='beginTime', description='Start time, accurate to milliseconds (ms).', example='1751249559000'),
  endTime?: long(name='endTime', description='End time, accurate to milliseconds (ms).', example='1740535600000'),
  eventCodes?: string(name='eventCodes', description='Event code.', example='de_afghcf6411'),
  eventType?: string(name='eventType', description='Event type.', example='MAIN'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeScoreSectionPieChartResponseBody = {
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: {
    animation?: boolean(name='animation', description='Chart field, default true', example='true'),
    grid?: {
      show?: boolean(name='show', description='Chart field, default false', example='false'),
    }(name='grid', description='Belongs to grid.'),
    series?: [ 
      {
        data?: [ 
          {
            name?: string(name='name', description='Category item name.', example='名称'),
            value?: string(name='value', description='Result value.', example='100'),
          }
        ](name='data', description='Chart data list'),
        name?: string(name='name', description='Category name.', example='分值区间占比'),
        roseType?: boolean(name='roseType', description='Chart field, default false', example='false'),
      }
    ](name='series', description='Data list'),
  }(name='resultObject', description='Return object'),
}

model DescribeScoreSectionPieChartResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeScoreSectionPieChartResponseBody(name='body'),
}

/**
 * @summary Proportion of Score Ranges for Main Events/Bypass Events/Diversion Events
 *
 * @param request DescribeScoreSectionPieChartRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeScoreSectionPieChartResponse
 */
@context("describeScoreSectionPieChartWithContext")
async function describeScoreSectionPieChartWithOptions(request: DescribeScoreSectionPieChartRequest, runtime: $RuntimeOptions): DescribeScoreSectionPieChartResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.beginTime)) {
    query['beginTime'] = request.beginTime;
  }
  if (!$isNull(request.endTime)) {
    query['endTime'] = request.endTime;
  }
  if (!$isNull(request.eventCodes)) {
    query['eventCodes'] = request.eventCodes;
  }
  if (!$isNull(request.eventType)) {
    query['eventType'] = request.eventType;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeScoreSectionPieChart',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Proportion of Score Ranges for Main Events/Bypass Events/Diversion Events
 *
 * @param request DescribeScoreSectionPieChartRequest
 * @return DescribeScoreSectionPieChartResponse
 */
async function describeScoreSectionPieChart(request: DescribeScoreSectionPieChartRequest): DescribeScoreSectionPieChartResponse {
  var runtime = new $RuntimeOptions{};
  return describeScoreSectionPieChartWithOptions(request, runtime);
}

model DescribeScoreSectionRatioLineChartRequest {
  lang?: string(name='Lang', description='Sets the language type for request and response messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  beginTime?: string(name='beginTime', description='Start time, accurate to milliseconds (ms).

This parameter is required.', example='1751249559000'),
  byPassEventCodes?: string(name='byPassEventCodes', description='Bypass event code', example='de_amnhke2482'),
  endTime?: string(name='endTime', description='End time, accurate to milliseconds (ms).

This parameter is required.', example='1748491200000'),
  mainEventCodes?: string(name='mainEventCodes', description='Main event code', example='de_avcqzc3714'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  shuntEventCodes?: string(name='shuntEventCodes', description='Shunt event code', example='de_amnhke2488'),
}

model DescribeScoreSectionRatioLineChartResponseBody = {
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    series?: [ 
      {
        data?: [ string ](name='data', description='Chart data list'),
        name?: string(name='name', description='Statistical dimension.', example='旁路事件'),
      }
    ](name='series', description='Data list'),
    xaxis?: {
      data?: [ string ](name='data', description='Chart data list'),
    }(name='xaxis', description='Details of the xaxis node.'),
  }(name='resultObject', description='Return object'),
}

model DescribeScoreSectionRatioLineChartResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeScoreSectionRatioLineChartResponseBody(name='body'),
}

/**
 * @summary Score Section Ratio Analysis
 *
 * @param request DescribeScoreSectionRatioLineChartRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeScoreSectionRatioLineChartResponse
 */
@context("describeScoreSectionRatioLineChartWithContext")
async function describeScoreSectionRatioLineChartWithOptions(request: DescribeScoreSectionRatioLineChartRequest, runtime: $RuntimeOptions): DescribeScoreSectionRatioLineChartResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.beginTime)) {
    query['beginTime'] = request.beginTime;
  }
  if (!$isNull(request.byPassEventCodes)) {
    query['byPassEventCodes'] = request.byPassEventCodes;
  }
  if (!$isNull(request.endTime)) {
    query['endTime'] = request.endTime;
  }
  if (!$isNull(request.mainEventCodes)) {
    query['mainEventCodes'] = request.mainEventCodes;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.shuntEventCodes)) {
    query['shuntEventCodes'] = request.shuntEventCodes;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeScoreSectionRatioLineChart',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Score Section Ratio Analysis
 *
 * @param request DescribeScoreSectionRatioLineChartRequest
 * @return DescribeScoreSectionRatioLineChartResponse
 */
async function describeScoreSectionRatioLineChart(request: DescribeScoreSectionRatioLineChartRequest): DescribeScoreSectionRatioLineChartResponse {
  var runtime = new $RuntimeOptions{};
  return describeScoreSectionRatioLineChartWithOptions(request, runtime);
}

model DescribeSelectItemRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeSelectItemResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    monitorStatusList?: [ string ](name='monitorStatusList', description='Monitoring status list.'),
    taskIdList?: [ string ](name='taskIdList', description='Task ID list.'),
  }(name='resultObject', description='Return object'),
}

model DescribeSelectItemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSelectItemResponseBody(name='body'),
}

/**
 * @summary Query Task ID List
 *
 * @param request DescribeSelectItemRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSelectItemResponse
 */
@context("describeSelectItemWithContext")
async function describeSelectItemWithOptions(request: DescribeSelectItemRequest, runtime: $RuntimeOptions): DescribeSelectItemResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeSelectItem',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Task ID List
 *
 * @param request DescribeSelectItemRequest
 * @return DescribeSelectItemResponse
 */
async function describeSelectItem(request: DescribeSelectItemRequest): DescribeSelectItemResponse {
  var runtime = new $RuntimeOptions{};
  return describeSelectItemWithOptions(request, runtime);
}

model DescribeServiceAppKeyRequest {
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeServiceAppKeyResponseBody = {
  code?: string(name='code', description='Status code.', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error message.', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
  uccess?: boolean(name='uccess', description='Whether the request was successful.', example='true'),
}

model DescribeServiceAppKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeServiceAppKeyResponseBody(name='body'),
}

/**
 * @summary ServiceAppkey dropdown
 *
 * @param request DescribeServiceAppKeyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeServiceAppKeyResponse
 */
@context("describeServiceAppKeyWithContext")
async function describeServiceAppKeyWithOptions(request: DescribeServiceAppKeyRequest, runtime: $RuntimeOptions): DescribeServiceAppKeyResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeServiceAppKey',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary ServiceAppkey dropdown
 *
 * @param request DescribeServiceAppKeyRequest
 * @return DescribeServiceAppKeyResponse
 */
async function describeServiceAppKey(request: DescribeServiceAppKeyRequest): DescribeServiceAppKeyResponse {
  var runtime = new $RuntimeOptions{};
  return describeServiceAppKeyWithOptions(request, runtime);
}

model DescribeServiceCodeNameRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  tab?: string(name='Tab', description='Scenario.', example='FNAENIC'),
}

model DescribeServiceCodeNameResponseBody = {
  code?: string(name='Code', description='Status code.', example='200'),
  httpStatusCode?: string(name='HttpStatusCode', description='HTTP status code.', example='200'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: string(name='ResultObject', description='Return result.', example='true'),
}

model DescribeServiceCodeNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeServiceCodeNameResponseBody(name='body'),
}

/**
 * @summary ServiceCodeName Information
 *
 * @param request DescribeServiceCodeNameRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeServiceCodeNameResponse
 */
@context("describeServiceCodeNameWithContext")
async function describeServiceCodeNameWithOptions(request: DescribeServiceCodeNameRequest, runtime: $RuntimeOptions): DescribeServiceCodeNameResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.tab)) {
    query['Tab'] = request.tab;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeServiceCodeName',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary ServiceCodeName Information
 *
 * @param request DescribeServiceCodeNameRequest
 * @return DescribeServiceCodeNameResponse
 */
async function describeServiceCodeName(request: DescribeServiceCodeNameRequest): DescribeServiceCodeNameResponse {
  var runtime = new $RuntimeOptions{};
  return describeServiceCodeNameWithOptions(request, runtime);
}

model DescribeServiceListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeServiceListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: [ 
    {
      serviceCode?: string(name='serviceCode', description='Service code', example='coupon_abuse_detection'),
      serviceName?: string(name='serviceName', description='Service name.', example='coupon_abuse_detection'),
    }
  ](name='resultObject', description='Return object'),
}

model DescribeServiceListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeServiceListResponseBody(name='body'),
}

/**
 * @summary Get Service List
 *
 * @param request DescribeServiceListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeServiceListResponse
 */
@context("describeServiceListWithContext")
async function describeServiceListWithOptions(request: DescribeServiceListRequest, runtime: $RuntimeOptions): DescribeServiceListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeServiceList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Get Service List
 *
 * @param request DescribeServiceListRequest
 * @return DescribeServiceListResponse
 */
async function describeServiceList(request: DescribeServiceListRequest): DescribeServiceListResponse {
  var runtime = new $RuntimeOptions{};
  return describeServiceListWithOptions(request, runtime);
}

model DescribeSimulationPreditInfoRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  eventCode?: string(name='eventCode', description='Event code

This parameter is required.', example='de_azywkh7523'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  rulesStr?: string(name='rulesStr', description='Policy list

This parameter is required.', example='[\\\\"100244\\\\",\\\\"100245\\\\"]'),
}

model DescribeSimulationPreditInfoResponseBody = {
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DescribeSimulationPreditInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSimulationPreditInfoResponseBody(name='body'),
}

/**
 * @summary Estimate Call Information
 *
 * @param request DescribeSimulationPreditInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSimulationPreditInfoResponse
 */
@context("describeSimulationPreditInfoWithContext")
async function describeSimulationPreditInfoWithOptions(request: DescribeSimulationPreditInfoRequest, runtime: $RuntimeOptions): DescribeSimulationPreditInfoResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.eventCode)) {
    query['eventCode'] = request.eventCode;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.rulesStr)) {
    query['rulesStr'] = request.rulesStr;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeSimulationPreditInfo',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Estimate Call Information
 *
 * @param request DescribeSimulationPreditInfoRequest
 * @return DescribeSimulationPreditInfoResponse
 */
async function describeSimulationPreditInfo(request: DescribeSimulationPreditInfoRequest): DescribeSimulationPreditInfoResponse {
  var runtime = new $RuntimeOptions{};
  return describeSimulationPreditInfoWithOptions(request, runtime);
}

model DescribeSimulationTaskCountRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  dataSourceConfig?: string(name='dataSourceConfig', description='Data source configuration', example='{}'),
  dataSourceType?: string(name='dataSourceType', description='Data source type', example='SLS'),
  endTime?: long(name='endTime', description='Task end time.

This parameter is required.', example='1740016411000'),
  eventCode?: string(name='eventCode', description='Event code

This parameter is required.', example='de_ayfofy4941'),
  filtersStr?: string(name='filtersStr', description='Filter', example='{"left":"score","operate":"bw","right":"222,333"}'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  startTime?: long(name='startTime', description='Task start time.

This parameter is required.', example='1739496651000'),
}

model DescribeSimulationTaskCountResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DescribeSimulationTaskCountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSimulationTaskCountResponseBody(name='body'),
}

/**
 * @summary Query Task Record Count
 *
 * @param request DescribeSimulationTaskCountRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSimulationTaskCountResponse
 */
@context("describeSimulationTaskCountWithContext")
async function describeSimulationTaskCountWithOptions(request: DescribeSimulationTaskCountRequest, runtime: $RuntimeOptions): DescribeSimulationTaskCountResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.dataSourceConfig)) {
    query['dataSourceConfig'] = request.dataSourceConfig;
  }
  if (!$isNull(request.dataSourceType)) {
    query['dataSourceType'] = request.dataSourceType;
  }
  if (!$isNull(request.endTime)) {
    query['endTime'] = request.endTime;
  }
  if (!$isNull(request.eventCode)) {
    query['eventCode'] = request.eventCode;
  }
  if (!$isNull(request.filtersStr)) {
    query['filtersStr'] = request.filtersStr;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.startTime)) {
    query['startTime'] = request.startTime;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeSimulationTaskCount',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Task Record Count
 *
 * @param request DescribeSimulationTaskCountRequest
 * @return DescribeSimulationTaskCountResponse
 */
async function describeSimulationTaskCount(request: DescribeSimulationTaskCountRequest): DescribeSimulationTaskCountResponse {
  var runtime = new $RuntimeOptions{};
  return describeSimulationTaskCountWithOptions(request, runtime);
}

model DescribeSimulationTaskListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  currentPage?: string(name='currentPage', description='Current page number.', example='1'),
  id?: string(name='id', description='Primary key ID', example='3144'),
  name?: string(name='name', description='Name', example='SIMULATION'),
  pageSize?: string(name='pageSize', description='Page size, with a default value of 10', example='10'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  title?: string(name='title', description='Title.', example='仿真任务'),
}

model DescribeSimulationTaskListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, with a default value of 10', example='10'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
  totalItem?: int32(name='totalItem', description='Total count.', example='6'),
  totalPage?: int32(name='totalPage', description='Total pages', example='1'),
}

model DescribeSimulationTaskListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSimulationTaskListResponseBody(name='body'),
}

/**
 * @summary Task List
 *
 * @param request DescribeSimulationTaskListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSimulationTaskListResponse
 */
@context("describeSimulationTaskListWithContext")
async function describeSimulationTaskListWithOptions(request: DescribeSimulationTaskListRequest, runtime: $RuntimeOptions): DescribeSimulationTaskListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.currentPage)) {
    query['currentPage'] = request.currentPage;
  }
  if (!$isNull(request.id)) {
    query['id'] = request.id;
  }
  if (!$isNull(request.name)) {
    query['name'] = request.name;
  }
  if (!$isNull(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.title)) {
    query['title'] = request.title;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeSimulationTaskList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Task List
 *
 * @param request DescribeSimulationTaskListRequest
 * @return DescribeSimulationTaskListResponse
 */
async function describeSimulationTaskList(request: DescribeSimulationTaskListRequest): DescribeSimulationTaskListResponse {
  var runtime = new $RuntimeOptions{};
  return describeSimulationTaskListWithOptions(request, runtime);
}

model DescribeSlsUrlConfigRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeSlsUrlConfigResponseBody = {
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: string(name='resultObject', description='Returned object', example='true'),
}

model DescribeSlsUrlConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSlsUrlConfigResponseBody(name='body'),
}

/**
 * @summary Get Project Configuration
 *
 * @param request DescribeSlsUrlConfigRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSlsUrlConfigResponse
 */
@context("describeSlsUrlConfigWithContext")
async function describeSlsUrlConfigWithOptions(request: DescribeSlsUrlConfigRequest, runtime: $RuntimeOptions): DescribeSlsUrlConfigResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeSlsUrlConfig',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Get Project Configuration
 *
 * @param request DescribeSlsUrlConfigRequest
 * @return DescribeSlsUrlConfigResponse
 */
async function describeSlsUrlConfig(request: DescribeSlsUrlConfigRequest): DescribeSlsUrlConfigResponse {
  var runtime = new $RuntimeOptions{};
  return describeSlsUrlConfigWithOptions(request, runtime);
}

model DescribeSupportRuleListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  eventCode?: string(name='eventCode', description='Event code

This parameter is required.', example='de_ahpayh4121'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeSupportRuleListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DescribeSupportRuleListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSupportRuleListResponseBody(name='body'),
}

/**
 * @summary Query List of Policies Supporting Simulation
 *
 * @param request DescribeSupportRuleListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSupportRuleListResponse
 */
@context("describeSupportRuleListWithContext")
async function describeSupportRuleListWithOptions(request: DescribeSupportRuleListRequest, runtime: $RuntimeOptions): DescribeSupportRuleListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.eventCode)) {
    query['eventCode'] = request.eventCode;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeSupportRuleList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query List of Policies Supporting Simulation
 *
 * @param request DescribeSupportRuleListRequest
 * @return DescribeSupportRuleListResponse
 */
async function describeSupportRuleList(request: DescribeSupportRuleListRequest): DescribeSupportRuleListResponse {
  var runtime = new $RuntimeOptions{};
  return describeSupportRuleListWithOptions(request, runtime);
}

model DescribeTagListRequest {
  id?: string(name='Id', description='Primary key ID', example='433102'),
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='RegId', description='Region code', example='cn-hangzhou'),
}

model DescribeTagListResponseBody = {
  code?: string(name='Code', description='Status code.', example='200'),
  httpStatusCode?: string(name='HttpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='Message', description='Error message.', example='success'),
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: string(name='ResultObject', description='Result object.', example='true'),
}

model DescribeTagListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTagListResponseBody(name='body'),
}

/**
 * @summary Tag List
 *
 * @param request DescribeTagListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeTagListResponse
 */
@context("describeTagListWithContext")
async function describeTagListWithOptions(request: DescribeTagListRequest, runtime: $RuntimeOptions): DescribeTagListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.id)) {
    query['Id'] = request.id;
  }
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['RegId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeTagList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Tag List
 *
 * @param request DescribeTagListRequest
 * @return DescribeTagListResponse
 */
async function describeTagList(request: DescribeTagListRequest): DescribeTagListResponse {
  var runtime = new $RuntimeOptions{};
  return describeTagListWithOptions(request, runtime);
}

model DescribeTagsBarChartRequest {
  lang?: string(name='Lang', description='Sets the language type for the request and response messages. Default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  beginTime?: long(name='beginTime', description='Start time, accurate to milliseconds (ms).

This parameter is required.', example='1751249559000'),
  endTime?: long(name='endTime', description='End time, accurate to milliseconds (ms).

This parameter is required.', example='1751595912000'),
  eventCodes?: string(name='eventCodes', description='Event code.', example='de_afghcf6411'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  result?: string(name='result', description='Policy execution result', example='PASS'),
}

model DescribeTagsBarChartResponseBody = {
  code?: string(name='code', description='Status code.', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error message.', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: {
    series?: [ 
      {
        data?: [ 
          {
            num?: long(name='num', description='Number.', example='200'),
            scale?: string(name='scale', description='Scale', example='10%'),
          }
        ](name='data', description='Chart data list'),
        name?: string(name='name', description='Series name.', example='tag'),
        stack?: string(name='stack', description='Chart field, same as name', example='tag'),
      }
    ](name='series', description='Data list'),
    xaxis?: {
      data?: [ string ](name='data', description='xaxis data items'),
    }(name='xaxis', description='xaxis interface configuration.'),
  }(name='resultObject', description='Return object'),
  success?: boolean(name='success', description='Whether the request was successful.', example='true'),
}

model DescribeTagsBarChartResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTagsBarChartResponseBody(name='body'),
}

/**
 * @summary Tag Overview List
 *
 * @param request DescribeTagsBarChartRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeTagsBarChartResponse
 */
@context("describeTagsBarChartWithContext")
async function describeTagsBarChartWithOptions(request: DescribeTagsBarChartRequest, runtime: $RuntimeOptions): DescribeTagsBarChartResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.beginTime)) {
    query['beginTime'] = request.beginTime;
  }
  if (!$isNull(request.endTime)) {
    query['endTime'] = request.endTime;
  }
  if (!$isNull(request.eventCodes)) {
    query['eventCodes'] = request.eventCodes;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.result)) {
    query['result'] = request.result;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeTagsBarChart',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Tag Overview List
 *
 * @param request DescribeTagsBarChartRequest
 * @return DescribeTagsBarChartResponse
 */
async function describeTagsBarChart(request: DescribeTagsBarChartRequest): DescribeTagsBarChartResponse {
  var runtime = new $RuntimeOptions{};
  return describeTagsBarChartWithOptions(request, runtime);
}

model DescribeTagsFluctuationRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  eventCodes?: string(name='eventCodes', description='Event code.', example='de_afghcf6411'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeTagsFluctuationResponseBody = {
  code?: string(name='code', description='Status code.', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error message.', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: [ 
    {
      tableName?: string(name='tableName', description='Tag name', example='accountId'),
      todayNum?: long(name='todayNum', description='Data for today', example='100'),
      withinSevenDayNum?: string(name='withinSevenDayNum', description='Data for the last seven days', example='600'),
      withinThirtyDayNum?: string(name='withinThirtyDayNum', description='Data for the last thirty days', example='1200'),
      withinThreeDayNum?: string(name='withinThreeDayNum', description='Data for the last three days', example='300'),
      yesterdayNum?: long(name='yesterdayNum', description='Data for yesterday', example='200'),
    }
  ](name='resultObject', description='Return object'),
  success?: boolean(name='success', description='Indicates whether the call was successful', example='true'),
}

model DescribeTagsFluctuationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTagsFluctuationResponseBody(name='body'),
}

/**
 * @summary Tag Fluctuation Detection
 *
 * @param request DescribeTagsFluctuationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeTagsFluctuationResponse
 */
@context("describeTagsFluctuationWithContext")
async function describeTagsFluctuationWithOptions(request: DescribeTagsFluctuationRequest, runtime: $RuntimeOptions): DescribeTagsFluctuationResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.eventCodes)) {
    query['eventCodes'] = request.eventCodes;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeTagsFluctuation',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Tag Fluctuation Detection
 *
 * @param request DescribeTagsFluctuationRequest
 * @return DescribeTagsFluctuationResponse
 */
async function describeTagsFluctuation(request: DescribeTagsFluctuationRequest): DescribeTagsFluctuationResponse {
  var runtime = new $RuntimeOptions{};
  return describeTagsFluctuationWithOptions(request, runtime);
}

model DescribeTagsListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and responses, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeTagsListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DescribeTagsListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTagsListResponseBody(name='body'),
}

/**
 * @summary Get Tag List
 *
 * @param request DescribeTagsListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeTagsListResponse
 */
@context("describeTagsListWithContext")
async function describeTagsListWithOptions(request: DescribeTagsListRequest, runtime: $RuntimeOptions): DescribeTagsListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeTagsList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Get Tag List
 *
 * @param request DescribeTagsListRequest
 * @return DescribeTagsListResponse
 */
async function describeTagsList(request: DescribeTagsListRequest): DescribeTagsListResponse {
  var runtime = new $RuntimeOptions{};
  return describeTagsListWithOptions(request, runtime);
}

model DescribeTagsNumLineChartRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  beginTime?: string(name='beginTime', description='Start time, accurate to milliseconds (ms).

This parameter is required.', example='1751249559000'),
  byPassEventCodes?: string(name='byPassEventCodes', description='Bypass event code', example='de_amnhke2482'),
  endTime?: string(name='endTime', description='End time, accurate to milliseconds (ms).

This parameter is required.', example='1749002991000'),
  mainEventCodes?: string(name='mainEventCodes', description='Main event code', example='de_amnhke2482'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  shuntEventCodes?: string(name='shuntEventCodes', description='Shunt event code', example='de_amnhke2488'),
}

model DescribeTagsNumLineChartResponseBody = {
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: {
    series?: [ 
      {
        data?: [ string ](name='data', description='Chart data list'),
        name?: string(name='name', description='Series name.', example='rn101'),
      }
    ](name='series', description='Data list'),
    xaxis?: {
      data?: [ string ](name='data', description='Chart data list'),
    }(name='xaxis', description='xaxis node.'),
  }(name='resultObject', description='Returned object'),
}

model DescribeTagsNumLineChartResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTagsNumLineChartResponseBody(name='body'),
}

/**
 * @summary Tag Hit Count Analysis
 *
 * @param request DescribeTagsNumLineChartRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeTagsNumLineChartResponse
 */
@context("describeTagsNumLineChartWithContext")
async function describeTagsNumLineChartWithOptions(request: DescribeTagsNumLineChartRequest, runtime: $RuntimeOptions): DescribeTagsNumLineChartResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.beginTime)) {
    query['beginTime'] = request.beginTime;
  }
  if (!$isNull(request.byPassEventCodes)) {
    query['byPassEventCodes'] = request.byPassEventCodes;
  }
  if (!$isNull(request.endTime)) {
    query['endTime'] = request.endTime;
  }
  if (!$isNull(request.mainEventCodes)) {
    query['mainEventCodes'] = request.mainEventCodes;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.shuntEventCodes)) {
    query['shuntEventCodes'] = request.shuntEventCodes;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeTagsNumLineChart',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Tag Hit Count Analysis
 *
 * @param request DescribeTagsNumLineChartRequest
 * @return DescribeTagsNumLineChartResponse
 */
async function describeTagsNumLineChart(request: DescribeTagsNumLineChartRequest): DescribeTagsNumLineChartResponse {
  var runtime = new $RuntimeOptions{};
  return describeTagsNumLineChartWithOptions(request, runtime);
}

model DescribeTagsRatioLineChartRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  beginTime?: long(name='beginTime', description='Start time, accurate to milliseconds (ms).

This parameter is required.', example='1751249559000'),
  byPassEventCodes?: string(name='byPassEventCodes', description='Bypass event code', example='de_amnhke2482'),
  endTime?: long(name='endTime', description='End time, accurate to milliseconds (ms).

This parameter is required.', example='1751595912000'),
  mainEventCodes?: string(name='mainEventCodes', description='Main event code', example='de_amnhke2482'),
  regId?: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou'),
  shuntEventCodes?: string(name='shuntEventCodes', description='Shunt event code', example='de_amnhke2488'),
}

model DescribeTagsRatioLineChartResponseBody = {
  requestId?: string(name='requestId', description='Request ID', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: {
    series?: [ 
      {
        data?: [ string ](name='data', description='Result data.'),
        name?: string(name='name', description='Series name.', example='rn101'),
      }
    ](name='series', description='Data list'),
    xaxis?: {
      data?: [ string ](name='data', description='X-axis data'),
    }(name='xaxis', description='xaxis node.'),
  }(name='resultObject', description='Return object'),
}

model DescribeTagsRatioLineChartResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTagsRatioLineChartResponseBody(name='body'),
}

/**
 * @summary Tag Hit Ratio Analysis
 *
 * @param request DescribeTagsRatioLineChartRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeTagsRatioLineChartResponse
 */
@context("describeTagsRatioLineChartWithContext")
async function describeTagsRatioLineChartWithOptions(request: DescribeTagsRatioLineChartRequest, runtime: $RuntimeOptions): DescribeTagsRatioLineChartResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.beginTime)) {
    query['beginTime'] = request.beginTime;
  }
  if (!$isNull(request.byPassEventCodes)) {
    query['byPassEventCodes'] = request.byPassEventCodes;
  }
  if (!$isNull(request.endTime)) {
    query['endTime'] = request.endTime;
  }
  if (!$isNull(request.mainEventCodes)) {
    query['mainEventCodes'] = request.mainEventCodes;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.shuntEventCodes)) {
    query['shuntEventCodes'] = request.shuntEventCodes;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeTagsRatioLineChart',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Tag Hit Ratio Analysis
 *
 * @param request DescribeTagsRatioLineChartRequest
 * @return DescribeTagsRatioLineChartResponse
 */
async function describeTagsRatioLineChart(request: DescribeTagsRatioLineChartRequest): DescribeTagsRatioLineChartResponse {
  var runtime = new $RuntimeOptions{};
  return describeTagsRatioLineChartWithOptions(request, runtime);
}

model DescribeTagsTrendRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  beginTime?: long(name='beginTime', description='Start time, accurate to milliseconds (ms).', example='1751249559000'),
  endTime?: long(name='endTime', description='End time, accurate to milliseconds (ms).', example='1740298093000'),
  eventCodes?: string(name='eventCodes', description='Event code.', example='de_afghcf6411'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  result?: string(name='result', description='Policy execution result', example='PASS'),
}

model DescribeTagsTrendResponseBody = {
  code?: string(name='code', description='Status code', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error message.', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: {
    series?: [ 
      {
        data?: [ 
          {
            num?: long(name='num', description='The number of items in this category.', example='100'),
            scale?: string(name='scale', description='Proportion', example='10%'),
          }
        ](name='data', description='Chart data list'),
        name?: string(name='name', description='Category name.', example='rm0102'),
      }
    ](name='series', description='Data list'),
    xaxis?: {
      data?: [ string ](name='data', description='X-axis data'),
    }(name='xaxis', description='xaxis returned data'),
  }(name='resultObject', description='Returned object'),
  success?: boolean(name='success', description='Whether the request was successful.', example='true'),
}

model DescribeTagsTrendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTagsTrendResponseBody(name='body'),
}

/**
 * @summary Tag Hit Trend
 *
 * @param request DescribeTagsTrendRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeTagsTrendResponse
 */
@context("describeTagsTrendWithContext")
async function describeTagsTrendWithOptions(request: DescribeTagsTrendRequest, runtime: $RuntimeOptions): DescribeTagsTrendResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.beginTime)) {
    query['beginTime'] = request.beginTime;
  }
  if (!$isNull(request.endTime)) {
    query['endTime'] = request.endTime;
  }
  if (!$isNull(request.eventCodes)) {
    query['eventCodes'] = request.eventCodes;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.result)) {
    query['result'] = request.result;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeTagsTrend',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Tag Hit Trend
 *
 * @param request DescribeTagsTrendRequest
 * @return DescribeTagsTrendResponse
 */
async function describeTagsTrend(request: DescribeTagsTrendRequest): DescribeTagsTrendResponse {
  var runtime = new $RuntimeOptions{};
  return describeTagsTrendWithOptions(request, runtime);
}

model DescribeTaskListRequest {
  currentPage?: string(name='CurrentPage', description='Current page.', example='1'),
  isPage?: boolean(name='IsPage', description='Whether to paginate.', example='true'),
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  pageSize?: string(name='PageSize', description='Page size, with a default value of 10.', example='10'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeTaskListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, with a default value of 10', example='10'),
  resultObject?: [ 
    {
      completionTime?: long(name='completionTime', description='Completion time, in milliseconds.', example='1753804800000'),
      createTime?: long(name='createTime', description='Creation time.', example='1753804800000'),
      id?: long(name='id', description='Task ID.', example='497'),
      mark?: int32(name='mark', description='Total number of mark information.', example='100'),
      remark?: string(name='remark', description='Remark.', example='备注'),
      sceneName?: string(name='sceneName', description='Scene name', example='样本调度'),
      status?: string(name='status', description='Data status.

-1: Failed
0: Deleted
1: Pending
2: Success', example='2'),
      taskLogId?: long(name='taskLogId', description='Task ID.', example='1102'),
      taskType?: string(name='taskType', description='Task type
1: Data upload
2: Supplemental upload
3: Labeling', example='1'),
    }
  ](name='resultObject', description='Returned object'),
  totalItem?: int32(name='totalItem', description='Total number of items', example='6'),
  totalPage?: int32(name='totalPage', description='Total number of pages', example='1'),
}

model DescribeTaskListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTaskListResponseBody(name='body'),
}

/**
 * @summary Task List
 *
 * @param request DescribeTaskListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeTaskListResponse
 */
@context("describeTaskListWithContext")
async function describeTaskListWithOptions(request: DescribeTaskListRequest, runtime: $RuntimeOptions): DescribeTaskListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!$isNull(request.isPage)) {
    query['IsPage'] = request.isPage;
  }
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeTaskList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Task List
 *
 * @param request DescribeTaskListRequest
 * @return DescribeTaskListResponse
 */
async function describeTaskList(request: DescribeTaskListRequest): DescribeTaskListResponse {
  var runtime = new $RuntimeOptions{};
  return describeTaskListWithOptions(request, runtime);
}

model DescribeTaskLogListRequest {
  currentPage?: string(name='CurrentPage', description='Current page.', example='1'),
  isPage?: boolean(name='IsPage', description='Whether to paginate.', example='true'),
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  pageSize?: string(name='PageSize', description='Page size.', example='10'),
  taskId?: string(name='TaskId', description='Task ID.', example='18044'),
  taskLogId?: string(name='TaskLogId', description='Task log ID', example='107'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeTaskLogListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Number of items per page, default value is 10', example='10'),
  resultObject?: [ 
    {
      completionTime?: long(name='completionTime', description='Completion time, in milliseconds.', example='1753804800000'),
      createTime?: long(name='createTime', description='Task creation time.', example='1753804800000'),
      id?: long(name='id', description='Log ID.', example='2793'),
      remark?: string(name='remark', description='Remark.', example='备注'),
      sceneName?: string(name='sceneName', description='Scene name', example='coupon_abuse_detection'),
      status?: string(name='status', description='Status.

0: Deleted
1: Normal', example='1'),
      taskType?: string(name='taskType', description='Task type

1: Data upload
2: Supplemental upload
3: Labeling', example='1'),
    }
  ](name='resultObject', description='Returned object'),
  totalItem?: int32(name='totalItem', description='Total number of items', example='6'),
  totalPage?: int32(name='totalPage', description='Total number of pages.', example='1'),
}

model DescribeTaskLogListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTaskLogListResponseBody(name='body'),
}

/**
 * @summary Task Log List
 *
 * @param request DescribeTaskLogListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeTaskLogListResponse
 */
@context("describeTaskLogListWithContext")
async function describeTaskLogListWithOptions(request: DescribeTaskLogListRequest, runtime: $RuntimeOptions): DescribeTaskLogListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!$isNull(request.isPage)) {
    query['IsPage'] = request.isPage;
  }
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  if (!$isNull(request.taskLogId)) {
    query['TaskLogId'] = request.taskLogId;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeTaskLogList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Task Log List
 *
 * @param request DescribeTaskLogListRequest
 * @return DescribeTaskLogListResponse
 */
async function describeTaskLogList(request: DescribeTaskLogListRequest): DescribeTaskLogListResponse {
  var runtime = new $RuntimeOptions{};
  return describeTaskLogListWithOptions(request, runtime);
}

model DescribeTemplateCountRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeTemplateCountResponseBody = {
  requestId?: string(name='requestId', description='Request ID', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: {
    limit?: boolean(name='limit', description='Template quantity limit.', example='false'),
    maxTotalItem?: int32(name='maxTotalItem', description='Maximum count', example='1000'),
    totalItem?: int32(name='totalItem', description='Total count.', example='13'),
  }(name='resultObject', description='Returned object'),
}

model DescribeTemplateCountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTemplateCountResponseBody(name='body'),
}

/**
 * @summary Query Total Event Count
 *
 * @param request DescribeTemplateCountRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeTemplateCountResponse
 */
@context("describeTemplateCountWithContext")
async function describeTemplateCountWithOptions(request: DescribeTemplateCountRequest, runtime: $RuntimeOptions): DescribeTemplateCountResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeTemplateCount',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Total Event Count
 *
 * @param request DescribeTemplateCountRequest
 * @return DescribeTemplateCountResponse
 */
async function describeTemplateCount(request: DescribeTemplateCountRequest): DescribeTemplateCountResponse {
  var runtime = new $RuntimeOptions{};
  return describeTemplateCountWithOptions(request, runtime);
}

model DescribeTemplateDownloadRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeTemplateDownloadResponseBody = {
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  data?: boolean(name='data', description='Data object', example='true'),
}

model DescribeTemplateDownloadResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTemplateDownloadResponseBody(name='body'),
}

/**
 * @summary Template Download
 *
 * @param request DescribeTemplateDownloadRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeTemplateDownloadResponse
 */
@context("describeTemplateDownloadWithContext")
async function describeTemplateDownloadWithOptions(request: DescribeTemplateDownloadRequest, runtime: $RuntimeOptions): DescribeTemplateDownloadResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeTemplateDownload',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Template Download
 *
 * @param request DescribeTemplateDownloadRequest
 * @return DescribeTemplateDownloadResponse
 */
async function describeTemplateDownload(request: DescribeTemplateDownloadRequest): DescribeTemplateDownloadResponse {
  var runtime = new $RuntimeOptions{};
  return describeTemplateDownloadWithOptions(request, runtime);
}

model DescribeTemplatePageListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  currentPage?: string(name='currentPage', description='Current page number.', example='1'),
  eventCodes?: string(name='eventCodes', description='Event code.', example='d6_h1fe4cfa1g'),
  pageSize?: string(name='pageSize', description='Page size, default value is 10', example='10'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  templateName?: string(name='templateName', description='Event name', example='注册事件'),
  templateSearchItem?: string(name='templateSearchItem', description='Event template search field', example='age'),
  templateStatus?: string(name='templateStatus', description='Event status', example='ONLINE'),
  templateType?: string(name='templateType', description='Template type', example='PUB_SERVICE'),
}

model DescribeTemplatePageListResponseBody = {
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Number of items per page, default value is 10', example='10'),
  requestId?: string(name='requestId', description='Request ID', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: [ 
    {
      description?: string(name='description', description='Description information.', example='描述'),
      eventCode?: string(name='eventCode', description='Event code', example='de_aszbjb7236'),
      eventName?: string(name='eventName', description='Event name.', example='注册风险'),
      gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1621578648000'),
      gmtModified?: long(name='gmtModified', description='Modification time.', example='1565701886000'),
      id?: long(name='id', description='Template ID.', example='497'),
      ruleCount?: int32(name='ruleCount', description='Number of policies', example='3'),
      templateCode?: string(name='templateCode', description='Template code.', example='register'),
      templateName?: string(name='templateName', description='Template name.', example='注册事件'),
      templateStatus?: string(name='templateStatus', description='Event status', example='ONLINE'),
      templateType?: string(name='templateType', description='Template type', example='PUB_SERVICE'),
      userCount?: int32(name='userCount', description='Number of customer authorizations', example='1'),
      version?: int32(name='version', description='Version number.', example='1'),
    }
  ](name='resultObject', description='Returned object'),
  totalItem?: int32(name='totalItem', description='Total number of items', example='6'),
  totalPage?: int32(name='totalPage', description='Total number of pages', example='1'),
}

model DescribeTemplatePageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTemplatePageListResponseBody(name='body'),
}

/**
 * @summary Query Event List by Event Name
 *
 * @param request DescribeTemplatePageListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeTemplatePageListResponse
 */
@context("describeTemplatePageListWithContext")
async function describeTemplatePageListWithOptions(request: DescribeTemplatePageListRequest, runtime: $RuntimeOptions): DescribeTemplatePageListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.currentPage)) {
    query['currentPage'] = request.currentPage;
  }
  if (!$isNull(request.eventCodes)) {
    query['eventCodes'] = request.eventCodes;
  }
  if (!$isNull(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.templateName)) {
    query['templateName'] = request.templateName;
  }
  if (!$isNull(request.templateSearchItem)) {
    query['templateSearchItem'] = request.templateSearchItem;
  }
  if (!$isNull(request.templateStatus)) {
    query['templateStatus'] = request.templateStatus;
  }
  if (!$isNull(request.templateType)) {
    query['templateType'] = request.templateType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeTemplatePageList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Event List by Event Name
 *
 * @param request DescribeTemplatePageListRequest
 * @return DescribeTemplatePageListResponse
 */
async function describeTemplatePageList(request: DescribeTemplatePageListRequest): DescribeTemplatePageListResponse {
  var runtime = new $RuntimeOptions{};
  return describeTemplatePageListWithOptions(request, runtime);
}

model DescribeUsedServiceRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeUsedServiceResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  records?: [ 
    {
      enName?: string(name='enName', description='English name', example='account_abuse'),
      name?: string(name='name', description='Service name', example='注册风险识别服务'),
      serviceCode?: string(name='serviceCode', description='Service code', example='account_abuse'),
    }
  ](name='records', description='Record details'),
}

model DescribeUsedServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeUsedServiceResponseBody(name='body'),
}

/**
 * @summary Get List of Services Used by User
 *
 * @param request DescribeUsedServiceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeUsedServiceResponse
 */
@context("describeUsedServiceWithContext")
async function describeUsedServiceWithOptions(request: DescribeUsedServiceRequest, runtime: $RuntimeOptions): DescribeUsedServiceResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeUsedService',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Get List of Services Used by User
 *
 * @param request DescribeUsedServiceRequest
 * @return DescribeUsedServiceResponse
 */
async function describeUsedService(request: DescribeUsedServiceRequest): DescribeUsedServiceResponse {
  var runtime = new $RuntimeOptions{};
  return describeUsedServiceWithOptions(request, runtime);
}

model DescribeUserInfoRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeUserInfoResponseBody = {
  code?: string(name='code', description='Status code.', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error message', example='The input parameter data is not valid. order_storage_company_num component not found'),
  resultObject?: {
    clientIp?: string(name='clientIp', description='Client IP.', example='192.168.0.1'),
    subId?: string(name='subId', description='Sub-account ID', example='555666'),
    userId?: long(name='userId', description='User UID', example='15633333331111'),
    userName?: string(name='userName', description='User name', example='root'),
  }(name='resultObject', description='Returned object'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model DescribeUserInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeUserInfoResponseBody(name='body'),
}

/**
 * @summary Get Current Logged-in User Information
 *
 * @param request DescribeUserInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeUserInfoResponse
 */
@context("describeUserInfoWithContext")
async function describeUserInfoWithOptions(request: DescribeUserInfoRequest, runtime: $RuntimeOptions): DescribeUserInfoResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeUserInfo',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Get Current Logged-in User Information
 *
 * @param request DescribeUserInfoRequest
 * @return DescribeUserInfoResponse
 */
async function describeUserInfo(request: DescribeUserInfoRequest): DescribeUserInfoResponse {
  var runtime = new $RuntimeOptions{};
  return describeUserInfoWithOptions(request, runtime);
}

model DescribeVariableBindDetailRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  defineId?: long(name='defineId', description='Bound variable definition ID', example='10'),
  id?: long(name='id', description='Primary key ID of the variable, which is empty if it\\\\"s a new addition', example='3144'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeVariableBindDetailResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    allowModify?: boolean(name='allowModify', description='Whether modification is allowed, default is false', example='false'),
    defineId?: long(name='defineId', description='Variable definition ID', example='10'),
    defineTitle?: string(name='defineTitle', description='Variable definition title', example='IP所在地_城市Code'),
    description?: string(name='description', description='Variable description information', example='描述'),
    eventCode?: string(name='eventCode', description='Event code', example='de_aszbjb7236'),
    id?: long(name='id', description='Variable ID.', example='497'),
    params?: [ 
      {
        eventFieldName?: string(name='eventFieldName', description='Event field name', example='ip'),
        required?: boolean(name='required', description='Whether it is required, default is false', example='false'),
        variableName?: string(name='variableName', description='Bound variable name', example='ip'),
      }
    ](name='params', description='Bound parameters.'),
    relationRules?: [ 
      {
        key?: string(name='key', description='Policy rule ID', example='104566'),
        value?: string(name='value', description='Policy name', example='营销风险识别'),
      }
    ](name='relationRules', description='List of associated policies'),
    title?: string(name='title', description='Title.', example='变量title'),
  }(name='resultObject', description='Return object'),
}

model DescribeVariableBindDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVariableBindDetailResponseBody(name='body'),
}

/**
 * @summary Query Variable Binding Information
 *
 * @param request DescribeVariableBindDetailRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeVariableBindDetailResponse
 */
@context("describeVariableBindDetailWithContext")
async function describeVariableBindDetailWithOptions(request: DescribeVariableBindDetailRequest, runtime: $RuntimeOptions): DescribeVariableBindDetailResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.defineId)) {
    query['defineId'] = request.defineId;
  }
  if (!$isNull(request.id)) {
    query['id'] = request.id;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeVariableBindDetail',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Variable Binding Information
 *
 * @param request DescribeVariableBindDetailRequest
 * @return DescribeVariableBindDetailResponse
 */
async function describeVariableBindDetail(request: DescribeVariableBindDetailRequest): DescribeVariableBindDetailResponse {
  var runtime = new $RuntimeOptions{};
  return describeVariableBindDetailWithOptions(request, runtime);
}

model DescribeVariableDetailRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  id?: long(name='id', description='Variable ID

This parameter is required.', example='3144'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeVariableDetailResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    baseInfo?: {
      allowBind?: string(name='allowBind', description='Whether variable binding is allowed', example='ENABLE'),
      chargingMode?: string(name='chargingMode', description='Charging mode', example='FREE'),
      chargingModeDesc?: string(name='chargingModeDesc', description='Charging mode description', example='免费'),
      creator?: string(name='creator', description='Creator.', example='176020'),
      dataDisplay?: string(name='dataDisplay', description='Data distribution display, in JSON format', example='{}'),
      dataThreshold?: string(name='dataThreshold', description='Data valid range, left-closed and right-closed', example='(0,10)'),
      deductionFactor?: int32(name='deductionFactor', description='Deduction factor', example='10'),
      description?: string(name='description', description='Description.', example='描述'),
      frontAllowBind?: string(name='frontAllowBind', description='Front-end binding allowed', example='ENABLE'),
      gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1698143758000'),
      gmtModified?: long(name='gmtModified', description='Modification time.', example='1698143758000'),
      id?: long(name='id', description='Primary key ID', example='3144'),
      inputRequired?: string(name='inputRequired', description='Required parameters
     
     When inputRequired=__all__, it means all parameters are required
     When inputRequired=__one__, it means only one input is needed
     Required fields are separated by commas, e.g., mobile,ip,email', example='__one__'),
      inputs?: string(name='inputs', description='Input parameters.', example='ip,age,mobile'),
      inputsDesc?: string(name='inputsDesc', description='Input parameter description.', example='ip,年龄,手机号'),
      invokeKey?: string(name='invokeKey', description='Invoke key', example='onlineScamDetectionTags_v'),
      invokeRt?: int32(name='invokeRt', description='Invoke RT, unit: milliseconds', example='10'),
      invokeSuccessRate?: string(name='invokeSuccessRate', description='Invocation success rate', example='100'),
      invokeTimes?: long(name='invokeTimes', description='Number of invocations', example='100000'),
      lastModifiedOperator?: string(name='lastModifiedOperator', description='Last modifier.', example='root'),
      name?: string(name='name', description='Variable name', example='__onlineScamDetectionTags__'),
      outputs?: string(name='outputs', description='Output', example='STRING'),
      outputsDesc?: string(name='outputsDesc', description='Output description', example='字符串'),
      scene?: [ string ](name='scene', description='Code of applicable scenarios'),
      sceneDesc?: [ string ](name='sceneDesc', description='Applicable scenario description'),
      showOrder?: string(name='showOrder', description='Display order', example='10'),
      source?: string(name='source', description='Source', example='SAF'),
      sourceDesc?: string(name='sourceDesc', description='Source description', example='风险识别'),
      status?: string(name='status', description='Status.', example='ENABLE'),
      supportRegions?: [ string ](name='supportRegions', description='List of supported regions.'),
      title?: string(name='title', description='Title.', example='诈骗引流识别_标签'),
      type?: string(name='type', description='Type', example='NATIVE'),
      typeDesc?: string(name='typeDesc', description='Category description', example='事件字段'),
      xLabel?: string(name='xLabel', description='X-axis label for data distribution display', example='10'),
      yLabel?: string(name='yLabel', description='Data distribution display y-axis label', example='10'),
    }(name='baseInfo', description='Basic attributes.'),
  }(name='resultObject', description='Return object'),
}

model DescribeVariableDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVariableDetailResponseBody(name='body'),
}

/**
 * @summary Query variable details
 *
 * @param request DescribeVariableDetailRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeVariableDetailResponse
 */
@context("describeVariableDetailWithContext")
async function describeVariableDetailWithOptions(request: DescribeVariableDetailRequest, runtime: $RuntimeOptions): DescribeVariableDetailResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.id)) {
    query['id'] = request.id;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeVariableDetail',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query variable details
 *
 * @param request DescribeVariableDetailRequest
 * @return DescribeVariableDetailResponse
 */
async function describeVariableDetail(request: DescribeVariableDetailRequest): DescribeVariableDetailResponse {
  var runtime = new $RuntimeOptions{};
  return describeVariableDetailWithOptions(request, runtime);
}

model DescribeVariableFeeRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  ids?: [ long ](name='ids', description='Variable ID

This parameter is required.'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DescribeVariableFeeResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DescribeVariableFeeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVariableFeeResponseBody(name='body'),
}

/**
 * @summary Query Variable Fee Information
 *
 * @param request DescribeVariableFeeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeVariableFeeResponse
 */
@context("describeVariableFeeWithContext")
async function describeVariableFeeWithOptions(request: DescribeVariableFeeRequest, runtime: $RuntimeOptions): DescribeVariableFeeResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.ids)) {
    query['ids'] = request.ids;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeVariableFee',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Variable Fee Information
 *
 * @param request DescribeVariableFeeRequest
 * @return DescribeVariableFeeResponse
 */
async function describeVariableFee(request: DescribeVariableFeeRequest): DescribeVariableFeeResponse {
  var runtime = new $RuntimeOptions{};
  return describeVariableFeeWithOptions(request, runtime);
}

model DescribeVariableListRequest {
  lang?: string(name='Lang', description='Set the language type for requests and responses, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  createType?: string(name='createType', description='Creation type.', example='NORMAL'),
  currentPage?: string(name='currentPage', description='Current page number.', example='1'),
  pageSize?: string(name='pageSize', description='Page size, default value is 10.', example='10'),
  refObjId?: string(name='refObjId', description='Associated event ID.', example='de_avypfd8253'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou'),
  sourceType?: string(name='sourceType', description='Source type.', example='SAF'),
  type?: string(name='type', description='Type.', example='IDENTIFY_SERVICE'),
  typesStr?: string(name='typesStr', description='JSON array string of types.', example='[\\\\"coupon_abuse_detection\\\\"]'),
  value?: string(name='value', description='Value for fuzzy search.', example='注册'),
}

model DescribeVariableListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10.', example='10'),
  resultObject?: [ 
    {
      capacity?: long(name='capacity', description='Capacity.', example='100000'),
      defineId?: string(name='defineId', description='Variable definition ID.', example='10'),
      description?: string(name='description', description='Description information.', example='变量描述'),
      extendInfo?: map[string]any(name='extendInfo', description='Extended information.', example='暂无'),
      gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1621578648000'),
      gmtModified?: long(name='gmtModified', description='Modification time.', example='1565701886000'),
      id?: long(name='id', description='Variable ID.', example='497'),
      leftCapacity?: long(name='leftCapacity', description='Remaining capacity.', example='100000'),
      name?: string(name='name', description='Variable name', example='__ipLocationCityCode__'),
      outputsType?: string(name='outputsType', description='Variable output type', example='STRING'),
      refObjId?: string(name='refObjId', description='Associated event ID.', example='de_agdxgz0246'),
      refObjName?: string(name='refObjName', description='Associated event name.', example='注册事件'),
      refObjType?: string(name='refObjType', description='Associated object type of the variable', example='EVENT'),
      sourceType?: string(name='sourceType', description='Source type.', example='SAF'),
      title?: string(name='title', description='Title.', example='设备风险识别_标签'),
      type?: string(name='type', description='Variable type.', example='NATIVE'),
      userId?: long(name='userId', description='User ID to which the data belongs.', example='100000'),
    }
  ](name='resultObject', description='Returned object.'),
  totalItem?: int32(name='totalItem', description='Total number of items.', example='27'),
  totalPage?: int32(name='totalPage', description='Total number of pages.', example='3'),
}

model DescribeVariableListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVariableListResponseBody(name='body'),
}

/**
 * @summary Query Variable Details
 *
 * @param request DescribeVariableListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeVariableListResponse
 */
@context("describeVariableListWithContext")
async function describeVariableListWithOptions(request: DescribeVariableListRequest, runtime: $RuntimeOptions): DescribeVariableListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.createType)) {
    query['createType'] = request.createType;
  }
  if (!$isNull(request.currentPage)) {
    query['currentPage'] = request.currentPage;
  }
  if (!$isNull(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!$isNull(request.refObjId)) {
    query['refObjId'] = request.refObjId;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.sourceType)) {
    query['sourceType'] = request.sourceType;
  }
  if (!$isNull(request.type)) {
    query['type'] = request.type;
  }
  if (!$isNull(request.typesStr)) {
    query['typesStr'] = request.typesStr;
  }
  if (!$isNull(request.value)) {
    query['value'] = request.value;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeVariableList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Variable Details
 *
 * @param request DescribeVariableListRequest
 * @return DescribeVariableListResponse
 */
async function describeVariableList(request: DescribeVariableListRequest): DescribeVariableListResponse {
  var runtime = new $RuntimeOptions{};
  return describeVariableListWithOptions(request, runtime);
}

model DescribeVariableMarketListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  chargingMode?: string(name='chargingMode', description='Charging mode', example='FREE'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, with a default value of 10.', example='10'),
  paging?: string(name='paging', description='Paging indicator, default is true.', example='true'),
  queryContent?: string(name='queryContent', description='Query content, supports fuzzy search.

 Title/Description', example='手机号'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  scenesStr?: string(name='scenesStr', description='Scenario', example='[\\\\"coupon_abuse_detection\\\\"]'),
  source?: string(name='source', description='Source', example='SAF'),
  title?: string(name='title', description='Title.', example='设备风险识别_标签'),
}

model DescribeVariableMarketListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, with a default value of 10.', example='10'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
  totalItem?: int32(name='totalItem', description='Total number of items', example='6'),
  totalPage?: int32(name='totalPage', description='Total number of pages', example='9'),
}

model DescribeVariableMarketListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVariableMarketListResponseBody(name='body'),
}

/**
 * @summary Query Variable Definitions
 *
 * @param request DescribeVariableMarketListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeVariableMarketListResponse
 */
@context("describeVariableMarketListWithContext")
async function describeVariableMarketListWithOptions(request: DescribeVariableMarketListRequest, runtime: $RuntimeOptions): DescribeVariableMarketListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.chargingMode)) {
    query['chargingMode'] = request.chargingMode;
  }
  if (!$isNull(request.currentPage)) {
    query['currentPage'] = request.currentPage;
  }
  if (!$isNull(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!$isNull(request.paging)) {
    query['paging'] = request.paging;
  }
  if (!$isNull(request.queryContent)) {
    query['queryContent'] = request.queryContent;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.scenesStr)) {
    query['scenesStr'] = request.scenesStr;
  }
  if (!$isNull(request.source)) {
    query['source'] = request.source;
  }
  if (!$isNull(request.title)) {
    query['title'] = request.title;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeVariableMarketList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Variable Definitions
 *
 * @param request DescribeVariableMarketListRequest
 * @return DescribeVariableMarketListResponse
 */
async function describeVariableMarketList(request: DescribeVariableMarketListRequest): DescribeVariableMarketListResponse {
  var runtime = new $RuntimeOptions{};
  return describeVariableMarketListWithOptions(request, runtime);
}

model DescribeVariableSceneListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  bizType?: string(name='bizType', description='Business type.

This parameter is required.', example='variable_scene'),
  configKey?: string(name='configKey', description='Configuration key.', example='account_abuse_detection'),
  currentPage?: string(name='currentPage', description='Current page number.', example='1'),
  pageSize?: string(name='pageSize', description='Page size, default value is 10.', example='10'),
  paging?: boolean(name='paging', description='Paging flag, default is true.

This parameter is required.', example='true'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou'),
}

model DescribeVariableSceneListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10.', example='10'),
  resultObject?: [ 
    {
      bizType?: string(name='bizType', description='Business category identifier.', example='variable_scene'),
      configKey?: string(name='configKey', description='Configuration key.', example='account_abuse_detection'),
      configValue?: string(name='configValue', description='Configuration value.', example='1'),
      creator?: string(name='creator', description='Created by.', example='1519714049632764'),
      description?: string(name='description', description='Description information.', example='配置描述信息'),
      gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1621578648000'),
      gmtModified?: long(name='gmtModified', description='Modification time.', example='1565701886000'),
      id?: long(name='id', description='Primary key ID of the configuration.', example='497'),
      lastModifiedOperator?: string(name='lastModifiedOperator', description='Last modified by.', example='1519714049632764'),
      status?: string(name='status', description='Status.', example='ENABLE'),
    }
  ](name='resultObject', description='Returned object.'),
  totalItem?: int32(name='totalItem', description='Total number of items.', example='6'),
  totalPage?: int32(name='totalPage', description='Total number of pages.', example='1'),
}

model DescribeVariableSceneListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVariableSceneListResponseBody(name='body'),
}

/**
 * @summary Query Configuration Information
 *
 * @param request DescribeVariableSceneListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeVariableSceneListResponse
 */
@context("describeVariableSceneListWithContext")
async function describeVariableSceneListWithOptions(request: DescribeVariableSceneListRequest, runtime: $RuntimeOptions): DescribeVariableSceneListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.bizType)) {
    query['bizType'] = request.bizType;
  }
  if (!$isNull(request.configKey)) {
    query['configKey'] = request.configKey;
  }
  if (!$isNull(request.currentPage)) {
    query['currentPage'] = request.currentPage;
  }
  if (!$isNull(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!$isNull(request.paging)) {
    query['paging'] = request.paging;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeVariableSceneList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Configuration Information
 *
 * @param request DescribeVariableSceneListRequest
 * @return DescribeVariableSceneListResponse
 */
async function describeVariableSceneList(request: DescribeVariableSceneListRequest): DescribeVariableSceneListResponse {
  var runtime = new $RuntimeOptions{};
  return describeVariableSceneListWithOptions(request, runtime);
}

model DescribeVersionPageListRequest {
  lang?: string(name='Lang', description='Sets the language type for the request and response messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  maxResults?: int32(name='MaxResults', description='Maximum number of results to be read in this call, with a default value of 10.', example='10'),
  nextToken?: string(name='NextToken', description='Used to mark the starting position for reading. An empty value indicates starting from the beginning.', example='1'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  objectCode?: string(name='objectCode', description='Name of the variable.', example='ex_OERlw0Zqfb23'),
  objectId?: long(name='objectId', description='Primary key ID of the variable.', example='392023'),
  pageSize?: int32(name='pageSize', description='Number of items per page, with a default value of 10.', example='10'),
  paging?: boolean(name='paging', description='Pagination flag, with a default value of true.', example='true'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou'),
  type?: string(name='type', description='Type.', example='EXPRESSION'),
}

model DescribeVersionPageListResponseBody = {
  maxResults?: int32(name='MaxResults', description='The maximum amount of data to be read in this call, with a default value of 10.', example='10'),
  nextToken?: string(name='NextToken', description='用来表示当前调用返回读取到的位置。空代表数据已经读取完毕。', example='1'),
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Number of items per page, with a default value of 10.', example='10'),
  resultObject?: [ 
    {
      content?: string(name='content', description='Change content.', example='{\\\\"description\\\\":\\\\"自定义变量\\\\",\\\\"expression\\\\":\\\\"1\\\\",\\\\"expressionTitle\\\\":\\\\"1\\\\",\\\\"expressionVariable\\\\":\\\\"\\\\",\\\\"fieldRank\\\\":0,\\\\"id\\\\":392023,\\\\"name\\\\":\\\\"ex_OERlw0Zqfb23\\\\",\\\\"outlier\\\\":\\\\"SYS_ERROR\\\\",\\\\"outputs\\\\":\\\\"STRING\\\\",\\\\"refObjId\\\\":\\\\"de_auevox0336\\\\",\\\\"region\\\\":\\\\"SH\\\\",\\\\"title\\\\":\\\\"自定义变量\\\\",\\\\"version\\\\":4}'),
      creator?: string(name='creator', description='Creator.', example='root'),
      description?: string(name='description', description='Variable description.', example='变量描述'),
      gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1621578648000'),
      gmtModified?: long(name='gmtModified', description='Modification time.', example='1565701886000'),
      id?: long(name='id', description='Primary key ID of the version.', example='808'),
      modifier?: string(name='modifier', description='Modifier.', example='root'),
      objectCode?: string(name='objectCode', description='Name of the variable.', example='ex_OERlw0Zqfb23'),
      objectId?: long(name='objectId', description='Primary key ID of the variable.', example='392023'),
      region?: string(name='region', description='Region ID.', example='cn-hangzhou'),
      type?: string(name='type', description='Variable type.', example='EXPRESSION'),
      userId?: long(name='userId', description='User UID.', example='151222222222226'),
      version?: long(name='version', description='Version number.', example='1'),
    }
  ](name='resultObject', description='Returned object.'),
  totalItem?: int32(name='totalItem', description='Total number of items.', example='10'),
  totalPage?: int32(name='totalPage', description='Total number of pages.', example='1'),
}

model DescribeVersionPageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVersionPageListResponseBody(name='body'),
}

/**
 * @summary Variable Version List Query
 *
 * @param request DescribeVersionPageListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeVersionPageListResponse
 */
@context("describeVersionPageListWithContext")
async function describeVersionPageListWithOptions(request: DescribeVersionPageListRequest, runtime: $RuntimeOptions): DescribeVersionPageListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!$isNull(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!$isNull(request.currentPage)) {
    query['currentPage'] = request.currentPage;
  }
  if (!$isNull(request.objectCode)) {
    query['objectCode'] = request.objectCode;
  }
  if (!$isNull(request.objectId)) {
    query['objectId'] = request.objectId;
  }
  if (!$isNull(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!$isNull(request.paging)) {
    query['paging'] = request.paging;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.type)) {
    query['type'] = request.type;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeVersionPageList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Variable Version List Query
 *
 * @param request DescribeVersionPageListRequest
 * @return DescribeVersionPageListResponse
 */
async function describeVersionPageList(request: DescribeVersionPageListRequest): DescribeVersionPageListResponse {
  var runtime = new $RuntimeOptions{};
  return describeVersionPageListWithOptions(request, runtime);
}

model DownloadSmapleBatchRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  batchUuid?: string(name='batchUuid', description='Sample batch UUID', example='203f1ae65c0a41a49dc4f8a47946caa2'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model DownloadSmapleBatchResponseBody = {
  requestId?: string(name='RequestId', description='ID of the request', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    fileDownloadURL?: string(name='fileDownloadURL', description='Download URL', example='https://xxxxx-oss-xxxxx.xxxxxx.aliyuncs.com/xx/xx/xxx/xxxxxx.csv?Expires=1753433384&OSSAccessKeyId=xxxxxxxxx&Signature=%2F%xxxxxxxxxxxx%3D'),
  }(name='resultObject', description='Returned object'),
}

model DownloadSmapleBatchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DownloadSmapleBatchResponseBody(name='body'),
}

/**
 * @summary Sample List Data Download
 *
 * @param request DownloadSmapleBatchRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DownloadSmapleBatchResponse
 */
@context("downloadSmapleBatchWithContext")
async function downloadSmapleBatchWithOptions(request: DownloadSmapleBatchRequest, runtime: $RuntimeOptions): DownloadSmapleBatchResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.batchUuid)) {
    query['batchUuid'] = request.batchUuid;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DownloadSmapleBatch',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Sample List Data Download
 *
 * @param request DownloadSmapleBatchRequest
 * @return DownloadSmapleBatchResponse
 */
async function downloadSmapleBatch(request: DownloadSmapleBatchRequest): DownloadSmapleBatchResponse {
  var runtime = new $RuntimeOptions{};
  return downloadSmapleBatchWithOptions(request, runtime);
}

model ExpressionTestRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  expression?: string(name='expression', description='Test expression.

This parameter is required.', example='@ex_GX9rrlTq4b67 + 1001'),
  expressionVariable?: string(name='expressionVariable', description='Calculation expression variable

This parameter is required.', example='[{\\\\"name\\\\":\\\\"age\\\\",\\\\"code\\\\":\\\\"age\\\\",\\\\"fieldType\\\\":\\\\"INT\\\\",\\\\"id\\\\":44809,\\\\"value\\\\":\\\\"1\\\\"}]'),
  expressionVariableIds?: string(name='expressionVariableIds', description='Associated variable ID', example='[44659]'),
  id?: long(name='id', description='Variable ID', example='3144'),
  regId?: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou'),
  scene?: string(name='scene', description='Scene

This parameter is required.', example='EXPRESSION'),
}

model ExpressionTestResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model ExpressionTestResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExpressionTestResponseBody(name='body'),
}

/**
 * @summary Custom Variable Test
 *
 * @param request ExpressionTestRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ExpressionTestResponse
 */
@context("expressionTestWithContext")
async function expressionTestWithOptions(request: ExpressionTestRequest, runtime: $RuntimeOptions): ExpressionTestResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.expression)) {
    query['expression'] = request.expression;
  }
  if (!$isNull(request.expressionVariable)) {
    query['expressionVariable'] = request.expressionVariable;
  }
  if (!$isNull(request.expressionVariableIds)) {
    query['expressionVariableIds'] = request.expressionVariableIds;
  }
  if (!$isNull(request.id)) {
    query['id'] = request.id;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.scene)) {
    query['scene'] = request.scene;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ExpressionTest',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Custom Variable Test
 *
 * @param request ExpressionTestRequest
 * @return ExpressionTestResponse
 */
async function expressionTest(request: ExpressionTestRequest): ExpressionTestResponse {
  var runtime = new $RuntimeOptions{};
  return expressionTestWithOptions(request, runtime);
}

model FileUploadRequest {
  fileName?: string(name='FileName', description='File name.', example='P4911_2707.csv'),
  fileUrl?: string(name='FileUrl', description='File URL', example='https://res-v1.cupl-fdfs.com/direct/79886bdc-9855-4ff4-aa34-eb5b21cd43a7'),
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  tab?: string(name='Tab', description='Scenario.', example='FNNCIEA'),
}

model FileUploadResponseBody = {
  code?: string(name='Code', description='Status code.', example='200'),
  httpStatusCode?: string(name='HttpStatusCode', description='HTTP status code.', example='200'),
  message?: string(name='Message', description='Information returned by the API request.', example='success'),
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: string(name='ResultObject', description='Return result.', example='true'),
}

model FileUploadResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FileUploadResponseBody(name='body'),
}

/**
 * @summary File Upload
 *
 * @param request FileUploadRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return FileUploadResponse
 */
@context("fileUploadWithContext")
async function fileUploadWithOptions(request: FileUploadRequest, runtime: $RuntimeOptions): FileUploadResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.fileName)) {
    query['FileName'] = request.fileName;
  }
  if (!$isNull(request.fileUrl)) {
    query['FileUrl'] = request.fileUrl;
  }
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.tab)) {
    query['Tab'] = request.tab;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'FileUpload',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary File Upload
 *
 * @param request FileUploadRequest
 * @return FileUploadResponse
 */
async function fileUpload(request: FileUploadRequest): FileUploadResponse {
  var runtime = new $RuntimeOptions{};
  return fileUploadWithOptions(request, runtime);
}

model ImportFieldRequest {
  fileUrl?: string(name='FileUrl', description='Attachment download URL.

This parameter is required.', example='filed/data/text.csv'),
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='RegId', description='Region code', example='cn-hangzhou'),
}

model ImportFieldResponseBody = {
  code?: string(name='Code', description='API status code.', example='200'),
  httpStatusCode?: string(name='HttpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='Message', description='Error message.', example='successful'),
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    failFieldNames?: string(name='FailFieldNames', description='Names of fields that failed to upload', example='test'),
    successNum?: int32(name='SuccessNum', description='Number of successful executions.', example='7'),
    totalNum?: int32(name='TotalNum', description='Total number of records.', example='7'),
  }(name='ResultObject', description='Returned result'),
  success?: boolean(name='Success', description='Indicator of whether the request was successful.', example='true'),
}

model ImportFieldResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ImportFieldResponseBody(name='body'),
}

/**
 * @summary Batch Import
 *
 * @param request ImportFieldRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ImportFieldResponse
 */
@context("importFieldWithContext")
async function importFieldWithOptions(request: ImportFieldRequest, runtime: $RuntimeOptions): ImportFieldResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.fileUrl)) {
    query['FileUrl'] = request.fileUrl;
  }
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['RegId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ImportField',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Batch Import
 *
 * @param request ImportFieldRequest
 * @return ImportFieldResponse
 */
async function importField(request: ImportFieldRequest): ImportFieldResponse {
  var runtime = new $RuntimeOptions{};
  return importFieldWithOptions(request, runtime);
}

model ImportNameListRequest {
  lang?: string(name='Lang', description='Set the language type for request and response messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  createType?: string(name='createType', description='Creation type', example='NORMAL'),
  data?: string(name='data', description='Import name list.', example='aa\\\\nbb\\\\ncc'),
  description?: string(name='description', description='Description information.', example='描述'),
  importType?: string(name='importType', description='Document import type:


INPUT: Text input
CSV: CSV upload
NONE: Do not upload for now

This parameter is required.', example='CSV'),
  memo?: string(name='memo', description='name content memo', example='名单内容描述'),
  nameListType?: string(name='nameListType', description='nameListType', example='accountId'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  title?: string(name='title', description='Title.

This parameter is required.', example='变量title'),
  variableId?: long(name='variableId', description='Variable ID', example='393314'),
}

model ImportNameListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model ImportNameListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ImportNameListResponseBody(name='body'),
}

/**
 * @summary Create or Import Name List
 *
 * @param request ImportNameListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ImportNameListResponse
 */
@context("importNameListWithContext")
async function importNameListWithOptions(request: ImportNameListRequest, runtime: $RuntimeOptions): ImportNameListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.createType)) {
    query['createType'] = request.createType;
  }
  if (!$isNull(request.data)) {
    query['data'] = request.data;
  }
  if (!$isNull(request.description)) {
    query['description'] = request.description;
  }
  if (!$isNull(request.importType)) {
    query['importType'] = request.importType;
  }
  if (!$isNull(request.memo)) {
    query['memo'] = request.memo;
  }
  if (!$isNull(request.nameListType)) {
    query['nameListType'] = request.nameListType;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.title)) {
    query['title'] = request.title;
  }
  if (!$isNull(request.variableId)) {
    query['variableId'] = request.variableId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ImportNameList',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Create or Import Name List
 *
 * @param request ImportNameListRequest
 * @return ImportNameListResponse
 */
async function importNameList(request: ImportNameListRequest): ImportNameListResponse {
  var runtime = new $RuntimeOptions{};
  return importNameListWithOptions(request, runtime);
}

model ImportTemplateEventRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  eventTemplateIds?: string(name='eventTemplateIds', description='The template ID of the event.', example='register'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model ImportTemplateEventResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  data?: boolean(name='data', description='Returned data object', example='true'),
}

model ImportTemplateEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ImportTemplateEventResponseBody(name='body'),
}

/**
 * @summary Import Template Event
 *
 * @param request ImportTemplateEventRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ImportTemplateEventResponse
 */
@context("importTemplateEventWithContext")
async function importTemplateEventWithOptions(request: ImportTemplateEventRequest, runtime: $RuntimeOptions): ImportTemplateEventResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.eventTemplateIds)) {
    query['eventTemplateIds'] = request.eventTemplateIds;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ImportTemplateEvent',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Import Template Event
 *
 * @param request ImportTemplateEventRequest
 * @return ImportTemplateEventResponse
 */
async function importTemplateEvent(request: ImportTemplateEventRequest): ImportTemplateEventResponse {
  var runtime = new $RuntimeOptions{};
  return importTemplateEventWithOptions(request, runtime);
}

model ListVariableDefineRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  allowBind?: string(name='allowBind', description='Whether binding is allowed, default is ENABLE', example='ENABLE'),
  chargingMode?: string(name='chargingMode', description='Charging mode', example='FREE'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10', example='10'),
  paging?: string(name='paging', description='Paging identifier', example='false'),
  queryContent?: string(name='queryContent', description='Query content', example='age'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  roleType?: string(name='roleType', description='Authorization type', example='1'),
  scenesStr?: string(name='scenesStr', description='Scenario', example='[\\\\"EVENT_ACTION\\\\"]'),
  source?: string(name='source', description='Source', example='SAF'),
  status?: string(name='status', description='Status.', example='ENABLE'),
  title?: string(name='title', description='Title.', example='变量的title'),
  typesStr?: string(name='typesStr', description='Type', example='[\\\\"IDENTIFY_SERVICE\\\\"]'),
}

model ListVariableDefineResponseBody = {
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10', example='10'),
  resultObject?: boolean(name='resultObject', description='Returned object', example='true'),
  totalItem?: int32(name='totalItem', description='Total items', example='27'),
  totalPage?: int32(name='totalPage', description='Total pages.', example='4'),
}

model ListVariableDefineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListVariableDefineResponseBody(name='body'),
}

/**
 * @summary Query Variable Definition
 *
 * @param request ListVariableDefineRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListVariableDefineResponse
 */
@context("listVariableDefineWithContext")
async function listVariableDefineWithOptions(request: ListVariableDefineRequest, runtime: $RuntimeOptions): ListVariableDefineResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.allowBind)) {
    query['allowBind'] = request.allowBind;
  }
  if (!$isNull(request.chargingMode)) {
    query['chargingMode'] = request.chargingMode;
  }
  if (!$isNull(request.currentPage)) {
    query['currentPage'] = request.currentPage;
  }
  if (!$isNull(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!$isNull(request.paging)) {
    query['paging'] = request.paging;
  }
  if (!$isNull(request.queryContent)) {
    query['queryContent'] = request.queryContent;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.roleType)) {
    query['roleType'] = request.roleType;
  }
  if (!$isNull(request.scenesStr)) {
    query['scenesStr'] = request.scenesStr;
  }
  if (!$isNull(request.source)) {
    query['source'] = request.source;
  }
  if (!$isNull(request.status)) {
    query['status'] = request.status;
  }
  if (!$isNull(request.title)) {
    query['title'] = request.title;
  }
  if (!$isNull(request.typesStr)) {
    query['typesStr'] = request.typesStr;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListVariableDefine',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Variable Definition
 *
 * @param request ListVariableDefineRequest
 * @return ListVariableDefineResponse
 */
async function listVariableDefine(request: ListVariableDefineRequest): ListVariableDefineResponse {
  var runtime = new $RuntimeOptions{};
  return listVariableDefineWithOptions(request, runtime);
}

model ModelDeleteRequest {
  modelName?: string(name='ModelName', description='Model name.

This parameter is required.', example='qwen-max'),
  regId?: string(name='RegId', description='Region code.', example='cn-hangzhou'),
}

model ModelDeleteResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='ResultObject', description='Deletion result.', example='true'),
}

model ModelDeleteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModelDeleteResponseBody(name='body'),
}

/**
 * @summary Delete
 *
 * @param request ModelDeleteRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModelDeleteResponse
 */
@context("modelDeleteWithContext")
async function modelDeleteWithOptions(request: ModelDeleteRequest, runtime: $RuntimeOptions): ModelDeleteResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.modelName)) {
    query['ModelName'] = request.modelName;
  }
  if (!$isNull(request.regId)) {
    query['RegId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ModelDelete',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Delete
 *
 * @param request ModelDeleteRequest
 * @return ModelDeleteResponse
 */
async function modelDelete(request: ModelDeleteRequest): ModelDeleteResponse {
  var runtime = new $RuntimeOptions{};
  return modelDeleteWithOptions(request, runtime);
}

model ModelFileUploadRequest {
  objectName?: string(name='ObjectName', description='File name.

This parameter is required.', example='2023-07-10/商品信息批量导出-20230710132028'),
  regId?: string(name='RegId', description='Region code.', example='cn-hangzhou'),
}

model ModelFileUploadResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='ResultObject', description='Return result.', example='true'),
}

model ModelFileUploadResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModelFileUploadResponseBody(name='body'),
}

/**
 * @summary File Upload
 *
 * @param request ModelFileUploadRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModelFileUploadResponse
 */
@context("modelFileUploadWithContext")
async function modelFileUploadWithOptions(request: ModelFileUploadRequest, runtime: $RuntimeOptions): ModelFileUploadResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.objectName)) {
    query['ObjectName'] = request.objectName;
  }
  if (!$isNull(request.regId)) {
    query['RegId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ModelFileUpload',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary File Upload
 *
 * @param request ModelFileUploadRequest
 * @return ModelFileUploadResponse
 */
async function modelFileUpload(request: ModelFileUploadRequest): ModelFileUploadResponse {
  var runtime = new $RuntimeOptions{};
  return modelFileUploadWithOptions(request, runtime);
}

model ModelIsUsingRequest {
  modelCode?: string(name='ModelCode', description='Model code.

This parameter is required.', example='ebgdsa'),
  modelId?: string(name='ModelId', description='Model ID.

This parameter is required.', example='27269'),
  modelName?: string(name='ModelName', description='Model name.

This parameter is required.', example='text-embedding-v1'),
  regId?: string(name='RegId', description='Region code.', example='cn-hangzhou'),
  status?: string(name='Status', description='Model status.

This parameter is required.', example='Disabled'),
}

model ModelIsUsingResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='ResultObject', description='Result object.', example='true'),
}

model ModelIsUsingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModelIsUsingResponseBody(name='body'),
}

/**
 * @summary Enable, Disable
 *
 * @param request ModelIsUsingRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModelIsUsingResponse
 */
@context("modelIsUsingWithContext")
async function modelIsUsingWithOptions(request: ModelIsUsingRequest, runtime: $RuntimeOptions): ModelIsUsingResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.modelCode)) {
    query['ModelCode'] = request.modelCode;
  }
  if (!$isNull(request.modelId)) {
    query['ModelId'] = request.modelId;
  }
  if (!$isNull(request.modelName)) {
    query['ModelName'] = request.modelName;
  }
  if (!$isNull(request.regId)) {
    query['RegId'] = request.regId;
  }
  if (!$isNull(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ModelIsUsing',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Enable, Disable
 *
 * @param request ModelIsUsingRequest
 * @return ModelIsUsingResponse
 */
async function modelIsUsing(request: ModelIsUsingRequest): ModelIsUsingResponse {
  var runtime = new $RuntimeOptions{};
  return modelIsUsingWithOptions(request, runtime);
}

model ModelNameIsDuplicationRequest {
  modelName?: string(name='ModelName', description='Model name.

This parameter is required.', example='text-embedding-v2'),
  regId?: string(name='RegId', description='Region code.', example='cn-hangzhou'),
}

model ModelNameIsDuplicationResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='ResultObject', description='Return result.', example='true'),
}

model ModelNameIsDuplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModelNameIsDuplicationResponseBody(name='body'),
}

/**
 * @summary Is Model Name Duplicated
 *
 * @param request ModelNameIsDuplicationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModelNameIsDuplicationResponse
 */
@context("modelNameIsDuplicationWithContext")
async function modelNameIsDuplicationWithOptions(request: ModelNameIsDuplicationRequest, runtime: $RuntimeOptions): ModelNameIsDuplicationResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.modelName)) {
    query['ModelName'] = request.modelName;
  }
  if (!$isNull(request.regId)) {
    query['RegId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ModelNameIsDuplication',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Is Model Name Duplicated
 *
 * @param request ModelNameIsDuplicationRequest
 * @return ModelNameIsDuplicationResponse
 */
async function modelNameIsDuplication(request: ModelNameIsDuplicationRequest): ModelNameIsDuplicationResponse {
  var runtime = new $RuntimeOptions{};
  return modelNameIsDuplicationWithOptions(request, runtime);
}

model ModelSampleDownloadRequest {
  regId?: string(name='RegId', description='Region code.', example='cn-hangzhou'),
}

model ModelSampleDownloadResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='ResultObject', description='Request result.', example='true'),
}

model ModelSampleDownloadResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModelSampleDownloadResponseBody(name='body'),
}

/**
 * @summary Template Download
 *
 * @param request ModelSampleDownloadRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModelSampleDownloadResponse
 */
@context("modelSampleDownloadWithContext")
async function modelSampleDownloadWithOptions(request: ModelSampleDownloadRequest, runtime: $RuntimeOptions): ModelSampleDownloadResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.regId)) {
    query['RegId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ModelSampleDownload',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Template Download
 *
 * @param request ModelSampleDownloadRequest
 * @return ModelSampleDownloadResponse
 */
async function modelSampleDownload(request: ModelSampleDownloadRequest): ModelSampleDownloadResponse {
  var runtime = new $RuntimeOptions{};
  return modelSampleDownloadWithOptions(request, runtime);
}

model ModifyAppKeyRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  appKey?: string(name='appKey', description='appkey information.', example='***'),
  memo?: string(name='memo', description='Application memo information.', example='备注'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model ModifyAppKeyResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  data?: boolean(name='data', description='Returned data object.', example='true'),
}

model ModifyAppKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAppKeyResponseBody(name='body'),
}

/**
 * @summary Update Memo
 *
 * @param request ModifyAppKeyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyAppKeyResponse
 */
@context("modifyAppKeyWithContext")
async function modifyAppKeyWithOptions(request: ModifyAppKeyRequest, runtime: $RuntimeOptions): ModifyAppKeyResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.appKey)) {
    query['appKey'] = request.appKey;
  }
  if (!$isNull(request.memo)) {
    query['memo'] = request.memo;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ModifyAppKey',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Update Memo
 *
 * @param request ModifyAppKeyRequest
 * @return ModifyAppKeyResponse
 */
async function modifyAppKey(request: ModifyAppKeyRequest): ModifyAppKeyResponse {
  var runtime = new $RuntimeOptions{};
  return modifyAppKeyWithOptions(request, runtime);
}

model ModifyCustVariableRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  condition?: string(name='condition', description='Condition value.', example='{\\\\"currentId\\\\":1,\\\\"deepCount\\\\":0,\\\\"list\\\\":[{\\\\"currentId\\\\":2,\\\\"deepCount\\\\":1,\\\\"left\\\\":{\\\\"code\\\\":\\\\"__hit_rules\\\\",\\\\"fieldType\\\\":\\\\"STRING\\\\",\\\\"functionName\\\\":\\\\"\\\\",\\\\"hasRightVariable\\\\":true,\\\\"name\\\\":\\\\"hitRules\\\\",\\\\"operatorCode\\\\":\\\\"deNotInNameList\\\\"},\\\\"operatorCode\\\\":\\\\"deNotInNameList\\\\",\\\\"parentId\\\\":1,\\\\"right\\\\":{\\\\"code\\\\":\\\\"\\\\"nl_Xcufc8wV6624\\\\"\\\\",\\\\"name\\\\":\\\\"nl_Xcufc8wV6624\\\\",\\\\"rightVariableType\\\\":\\\\"variable\\\\"}},{\\\\"currentId\\\\":3,\\\\"deepCount\\\\":1,\\\\"list\\\\":[{\\\\"currentId\\\\":4,\\\\"deepCount\\\\":2,\\\\"left\\\\":{\\\\"code\\\\":\\\\"__v_safde\\\\",\\\\"fieldType\\\\":\\\\"DOUBLE\\\\",\\\\"functionName\\\\":\\\\"\\\\",\\\\"hasRightVariable\\\\":true,\\\\"name\\\\":\\\\"score\\\\",\\\\"operatorCode\\\\":\\\\"equals\\\\"},\\\\"operatorCode\\\\":\\\\"equals\\\\",\\\\"parentId\\\\":3,\\\\"right\\\\":{\\\\"code\\\\":\\\\"\\\\"99\\\\"\\\\",\\\\"name\\\\":\\\\"99\\\\",\\\\"rightVariableType\\\\":\\\\"constant\\\\"}},{\\\\"currentId\\\\":5,\\\\"deepCount\\\\":2,\\\\"left\\\\":{\\\\"code\\\\":\\\\"queryPhoneSimulatorInfo(deviceToken)?\\\\",\\\\"fieldType\\\\":\\\\"STRING\\\\",\\\\"functionName\\\\":\\\\"\\\\",\\\\"hasRightVariable\\\\":false,\\\\"name\\\\":\\\\"__device-test01__\\\\",\\\\"operatorCode\\\\":\\\\"isNotEmptyWrapper\\\\"},\\\\"operatorCode\\\\":\\\\"isNotEmptyWrapper\\\\",\\\\"parentId\\\\":3,\\\\"right\\\\":{\\\\"functionName\\\\":\\\\"\\\\",\\\\"name\\\\":\\\\"\\\\",\\\\"rightVariableType\\\\":\\\\"constant\\\\"}}],\\\\"parentId\\\\":1,\\\\"relationship\\\\":\\\\"and\\\\"}],\\\\"parentId\\\\":0,\\\\"relationship\\\\":\\\\"and\\\\"}'),
  dataVersion?: long(name='dataVersion', description='Data version.

This parameter is required.', example='6'),
  description?: string(name='description', description='Description information.', example='描述'),
  eventCodes?: string(name='eventCodes', description='Event code.', example='account_abuse_pro,account_abuse'),
  id?: long(name='id', description='Variable ID

This parameter is required.', example='376773'),
  name?: string(name='name', description='Variable name

This parameter is required.', example='dxkkLw8fe18'),
  outputs?: string(name='outputs', description='Output', example='STRING'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model ModifyCustVariableResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: [ 
    {
      failType?: string(name='failType', description='Failure type', example='rule'),
      message?: string(name='message', description='Detailed information.', example='ok'),
      success?: boolean(name='success', description='Whether the operation was successful', example='true'),
    }
  ](name='resultObject', description='Return object'),
}

model ModifyCustVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyCustVariableResponseBody(name='body'),
}

/**
 * @summary Edit Accumulated Variable
 *
 * @param request ModifyCustVariableRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyCustVariableResponse
 */
@context("modifyCustVariableWithContext")
async function modifyCustVariableWithOptions(request: ModifyCustVariableRequest, runtime: $RuntimeOptions): ModifyCustVariableResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.condition)) {
    query['condition'] = request.condition;
  }
  if (!$isNull(request.dataVersion)) {
    query['dataVersion'] = request.dataVersion;
  }
  if (!$isNull(request.description)) {
    query['description'] = request.description;
  }
  if (!$isNull(request.eventCodes)) {
    query['eventCodes'] = request.eventCodes;
  }
  if (!$isNull(request.id)) {
    query['id'] = request.id;
  }
  if (!$isNull(request.name)) {
    query['name'] = request.name;
  }
  if (!$isNull(request.outputs)) {
    query['outputs'] = request.outputs;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ModifyCustVariable',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Edit Accumulated Variable
 *
 * @param request ModifyCustVariableRequest
 * @return ModifyCustVariableResponse
 */
async function modifyCustVariable(request: ModifyCustVariableRequest): ModifyCustVariableResponse {
  var runtime = new $RuntimeOptions{};
  return modifyCustVariableWithOptions(request, runtime);
}

model ModifyEventRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  bizVersion?: int32(name='bizVersion', description='Version number (latest).', example='1'),
  createType?: string(name='createType', description='Creation type', example='NORMAL'),
  eventCode?: string(name='eventCode', description='Event code', example='de_ambiby3420'),
  eventName?: string(name='eventName', description='Event name.', example='注册事件'),
  inputFieldsStr?: string(name='inputFieldsStr', description='Input parameters, JSON string.', example='[{\\\\"fieldCode\\\\":\\\\"sessionId\\\\",\\\\"description\\\\":\\\\"会话ID\\\\",\\\\"fieldRank\\\\":0,\\\\"title\\\\":\\\\"会话ID\\\\",\\\\"fieldType\\\\":\\\\"STRING\\\\",\\\\"fieldSource\\\\":\\\\"DEFAULT\\\\"},{\\\\"fieldCode\\\\":\\\\"tags\\\\",\\\\"fieldRank\\\\":1,\\\\"title\\\\":\\\\"风险标签\\\\",\\\\"fieldType\\\\":\\\\"STRING\\\\",\\\\"fieldSource\\\\":\\\\"DEFAULT\\\\"},{\\\\"fieldCode\\\\":\\\\"score\\\\",\\\\"fieldRank\\\\":2,\\\\"title\\\\":\\\\"风险分值\\\\",\\\\"fieldType\\\\":\\\\"DOUBLE\\\\",\\\\"fieldSource\\\\":\\\\"DEFAULT\\\\"},{\\\\"fieldCode\\\\":\\\\"hitRules\\\\",\\\\"fieldRank\\\\":3,\\\\"title\\\\":\\\\"命中策略\\\\",\\\\"fieldType\\\\":\\\\"STRING\\\\",\\\\"fieldSource\\\\":\\\\"DEFAULT\\\\"}]'),
  memo?: string(name='memo', description='Memo.', example='备注'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  templateType?: string(name='templateType', description='Template type', example='暂无'),
}

model ModifyEventResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model ModifyEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyEventResponseBody(name='body'),
}

/**
 * @summary Edit Event
 *
 * @param request ModifyEventRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyEventResponse
 */
@context("modifyEventWithContext")
async function modifyEventWithOptions(request: ModifyEventRequest, runtime: $RuntimeOptions): ModifyEventResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.bizVersion)) {
    query['bizVersion'] = request.bizVersion;
  }
  if (!$isNull(request.createType)) {
    query['createType'] = request.createType;
  }
  if (!$isNull(request.eventCode)) {
    query['eventCode'] = request.eventCode;
  }
  if (!$isNull(request.eventName)) {
    query['eventName'] = request.eventName;
  }
  if (!$isNull(request.inputFieldsStr)) {
    query['inputFieldsStr'] = request.inputFieldsStr;
  }
  if (!$isNull(request.memo)) {
    query['memo'] = request.memo;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.templateType)) {
    query['templateType'] = request.templateType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ModifyEvent',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Edit Event
 *
 * @param request ModifyEventRequest
 * @return ModifyEventResponse
 */
async function modifyEvent(request: ModifyEventRequest): ModifyEventResponse {
  var runtime = new $RuntimeOptions{};
  return modifyEventWithOptions(request, runtime);
}

model ModifyEventStatusRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  createType?: string(name='createType', description='Creation type', example='NORMAL'),
  eventCode?: string(name='eventCode', description='Event code', example='de_aamexg3015'),
  fromEventSatus?: string(name='fromEventSatus', description='Initial event status, to avoid duplicate submissions or historical replays', example='ONLINE'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  toEventSatus?: string(name='toEventSatus', description='Updated event status', example='OFFLINE'),
}

model ModifyEventStatusResponseBody = {
  requestId?: string(name='requestId', description='Request ID', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model ModifyEventStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyEventStatusResponseBody(name='body'),
}

/**
 * @summary Modify Event Status
 *
 * @param request ModifyEventStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyEventStatusResponse
 */
@context("modifyEventStatusWithContext")
async function modifyEventStatusWithOptions(request: ModifyEventStatusRequest, runtime: $RuntimeOptions): ModifyEventStatusResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.createType)) {
    query['createType'] = request.createType;
  }
  if (!$isNull(request.eventCode)) {
    query['eventCode'] = request.eventCode;
  }
  if (!$isNull(request.fromEventSatus)) {
    query['fromEventSatus'] = request.fromEventSatus;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.toEventSatus)) {
    query['toEventSatus'] = request.toEventSatus;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ModifyEventStatus',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modify Event Status
 *
 * @param request ModifyEventStatusRequest
 * @return ModifyEventStatusResponse
 */
async function modifyEventStatus(request: ModifyEventStatusRequest): ModifyEventStatusResponse {
  var runtime = new $RuntimeOptions{};
  return modifyEventStatusWithOptions(request, runtime);
}

model ModifyExpressionVariableRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  dataVersion?: long(name='dataVersion', description='Data version.

This parameter is required.', example='5'),
  description?: string(name='description', description='Description.', example='描述'),
  eventCode?: string(name='eventCode', description='Event code

This parameter is required.', example='de_acytyt7036'),
  expression?: string(name='expression', description='Expression

This parameter is required.', example='@ex_GX9rrlTq4b67 + 1001'),
  expressionTitle?: string(name='expressionTitle', description='Expression display

This parameter is required.', example='@selfvariable_02 + 1001'),
  expressionVariable?: string(name='expressionVariable', description='Calculation expression variable', example='ex_GX9rrlTq4b67'),
  id?: long(name='id', description='Variable ID

This parameter is required.', example='3144'),
  name?: string(name='name', description='Variable name', example='ex_NgR6nDVD821c'),
  outlier?: string(name='outlier', description='Outlier

This parameter is required.', example='-1'),
  outputs?: string(name='outputs', description='Output

This parameter is required.', example='STRING'),
  regId?: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou'),
  title?: string(name='title', description='Title.

This parameter is required.', example='变量标题'),
}

model ModifyExpressionVariableResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model ModifyExpressionVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyExpressionVariableResponseBody(name='body'),
}

/**
 * @summary Edit Custom Variable
 *
 * @param request ModifyExpressionVariableRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyExpressionVariableResponse
 */
@context("modifyExpressionVariableWithContext")
async function modifyExpressionVariableWithOptions(request: ModifyExpressionVariableRequest, runtime: $RuntimeOptions): ModifyExpressionVariableResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.dataVersion)) {
    query['dataVersion'] = request.dataVersion;
  }
  if (!$isNull(request.description)) {
    query['description'] = request.description;
  }
  if (!$isNull(request.eventCode)) {
    query['eventCode'] = request.eventCode;
  }
  if (!$isNull(request.expression)) {
    query['expression'] = request.expression;
  }
  if (!$isNull(request.expressionTitle)) {
    query['expressionTitle'] = request.expressionTitle;
  }
  if (!$isNull(request.expressionVariable)) {
    query['expressionVariable'] = request.expressionVariable;
  }
  if (!$isNull(request.id)) {
    query['id'] = request.id;
  }
  if (!$isNull(request.name)) {
    query['name'] = request.name;
  }
  if (!$isNull(request.outlier)) {
    query['outlier'] = request.outlier;
  }
  if (!$isNull(request.outputs)) {
    query['outputs'] = request.outputs;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.title)) {
    query['title'] = request.title;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ModifyExpressionVariable',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Edit Custom Variable
 *
 * @param request ModifyExpressionVariableRequest
 * @return ModifyExpressionVariableResponse
 */
async function modifyExpressionVariable(request: ModifyExpressionVariableRequest): ModifyExpressionVariableResponse {
  var runtime = new $RuntimeOptions{};
  return modifyExpressionVariableWithOptions(request, runtime);
}

model ModifyFieldRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  classify?: string(name='classify', description='Field classification', example='REQUEST_PARAM'),
  description?: string(name='description', description='Description information.', example='描述'),
  enumData?: string(name='enumData', description='Enum type', example='[{\\\\"name\\\\":\\\\"ENABLE\\\\",\\\\"value\\\\":\\\\"禁用\\\\"}]'),
  id?: long(name='id', description='Variable ID', example='376773'),
  name?: string(name='name', description='Variable name', example='age'),
  regId?: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou'),
  title?: string(name='title', description='Title.', example='年龄'),
}

model ModifyFieldResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model ModifyFieldResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyFieldResponseBody(name='body'),
}

/**
 * @summary Modify Field
 *
 * @param request ModifyFieldRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyFieldResponse
 */
@context("modifyFieldWithContext")
async function modifyFieldWithOptions(request: ModifyFieldRequest, runtime: $RuntimeOptions): ModifyFieldResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.classify)) {
    query['classify'] = request.classify;
  }
  if (!$isNull(request.description)) {
    query['description'] = request.description;
  }
  if (!$isNull(request.enumData)) {
    query['enumData'] = request.enumData;
  }
  if (!$isNull(request.id)) {
    query['id'] = request.id;
  }
  if (!$isNull(request.name)) {
    query['name'] = request.name;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.title)) {
    query['title'] = request.title;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ModifyField',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modify Field
 *
 * @param request ModifyFieldRequest
 * @return ModifyFieldResponse
 */
async function modifyField(request: ModifyFieldRequest): ModifyFieldResponse {
  var runtime = new $RuntimeOptions{};
  return modifyFieldWithOptions(request, runtime);
}

model ModifyRulePriorityRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  consoleRuleId?: long(name='consoleRuleId', description='Primary key ID of the policy', example='3581'),
  priority?: int32(name='priority', description='Policy priority, the higher the number, the higher the priority.', example='10'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  ruleId?: long(name='ruleId', description='Policy ID', example='101796'),
}

model ModifyRulePriorityResponseBody = {
  requestId?: string(name='requestId', description='Request ID', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model ModifyRulePriorityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyRulePriorityResponseBody(name='body'),
}

/**
 * @summary Modify Policy Priority
 *
 * @param request ModifyRulePriorityRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyRulePriorityResponse
 */
@context("modifyRulePriorityWithContext")
async function modifyRulePriorityWithOptions(request: ModifyRulePriorityRequest, runtime: $RuntimeOptions): ModifyRulePriorityResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.consoleRuleId)) {
    query['consoleRuleId'] = request.consoleRuleId;
  }
  if (!$isNull(request.priority)) {
    query['priority'] = request.priority;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.ruleId)) {
    query['ruleId'] = request.ruleId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ModifyRulePriority',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modify Policy Priority
 *
 * @param request ModifyRulePriorityRequest
 * @return ModifyRulePriorityResponse
 */
async function modifyRulePriority(request: ModifyRulePriorityRequest): ModifyRulePriorityResponse {
  var runtime = new $RuntimeOptions{};
  return modifyRulePriorityWithOptions(request, runtime);
}

model ModifyRuleStatusRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  applyUserId?: string(name='applyUserId', description='UID of the applicant.', example='1519714049632764'),
  applyUserName?: string(name='applyUserName', description='Name of the applicant.', example='root'),
  auditRemark?: string(name='auditRemark', description='Approval remarks.', example='申请发布上线'),
  auditUserId?: string(name='auditUserId', description='UID of the auditor.', example='1519714049632764'),
  auditUserName?: string(name='auditUserName', description='Name of the auditor.', example='root'),
  consoleRuleId?: long(name='consoleRuleId', description='Primary key ID of the policy.', example='6843'),
  eventType?: string(name='eventType', description='Event type.', example='MAIN'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou'),
  ruleAuditType?: string(name='ruleAuditType', description='Audit status.', example='DRAFT_TO_RUNNING'),
  ruleId?: string(name='ruleId', description='Policy ID.', example='101544'),
  ruleVersionId?: long(name='ruleVersionId', description='Primary key ID of the policy version.', example='11519'),
}

model ModifyRuleStatusResponseBody = {
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: boolean(name='resultObject', description='Return object.', example='true'),
}

model ModifyRuleStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyRuleStatusResponseBody(name='body'),
}

/**
 * @summary Change the status of a policy version application
 *
 * @param request ModifyRuleStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyRuleStatusResponse
 */
@context("modifyRuleStatusWithContext")
async function modifyRuleStatusWithOptions(request: ModifyRuleStatusRequest, runtime: $RuntimeOptions): ModifyRuleStatusResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.applyUserId)) {
    query['applyUserId'] = request.applyUserId;
  }
  if (!$isNull(request.applyUserName)) {
    query['applyUserName'] = request.applyUserName;
  }
  if (!$isNull(request.auditRemark)) {
    query['auditRemark'] = request.auditRemark;
  }
  if (!$isNull(request.auditUserId)) {
    query['auditUserId'] = request.auditUserId;
  }
  if (!$isNull(request.auditUserName)) {
    query['auditUserName'] = request.auditUserName;
  }
  if (!$isNull(request.consoleRuleId)) {
    query['consoleRuleId'] = request.consoleRuleId;
  }
  if (!$isNull(request.eventType)) {
    query['eventType'] = request.eventType;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.ruleAuditType)) {
    query['ruleAuditType'] = request.ruleAuditType;
  }
  if (!$isNull(request.ruleId)) {
    query['ruleId'] = request.ruleId;
  }
  if (!$isNull(request.ruleVersionId)) {
    query['ruleVersionId'] = request.ruleVersionId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ModifyRuleStatus',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Change the status of a policy version application
 *
 * @param request ModifyRuleStatusRequest
 * @return ModifyRuleStatusResponse
 */
async function modifyRuleStatus(request: ModifyRuleStatusRequest): ModifyRuleStatusResponse {
  var runtime = new $RuntimeOptions{};
  return modifyRuleStatusWithOptions(request, runtime);
}

model OpenConsoleSlsRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  scene?: string(name='scene', description='Scene', example='SAF_DE_SERVICE'),
}

model OpenConsoleSlsResponseBody = {
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: string(name='resultObject', description='Returned object', example='true'),
}

model OpenConsoleSlsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OpenConsoleSlsResponseBody(name='body'),
}

/**
 * @summary Activate Service
 *
 * @param request OpenConsoleSlsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return OpenConsoleSlsResponse
 */
@context("openConsoleSlsWithContext")
async function openConsoleSlsWithOptions(request: OpenConsoleSlsRequest, runtime: $RuntimeOptions): OpenConsoleSlsResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.scene)) {
    query['scene'] = request.scene;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'OpenConsoleSls',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Activate Service
 *
 * @param request OpenConsoleSlsRequest
 * @return OpenConsoleSlsResponse
 */
async function openConsoleSls(request: OpenConsoleSlsRequest): OpenConsoleSlsResponse {
  var runtime = new $RuntimeOptions{};
  return openConsoleSlsWithOptions(request, runtime);
}

model OperateFavoriteVariableRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  id?: long(name='id', description='Variable ID

This parameter is required.', example='3144'),
  operate?: string(name='operate', description='Favorite operation

This parameter is required.', example='ADD'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model OperateFavoriteVariableResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model OperateFavoriteVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OperateFavoriteVariableResponseBody(name='body'),
}

/**
 * @summary Operate Favorites
 *
 * @param request OperateFavoriteVariableRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return OperateFavoriteVariableResponse
 */
@context("operateFavoriteVariableWithContext")
async function operateFavoriteVariableWithOptions(request: OperateFavoriteVariableRequest, runtime: $RuntimeOptions): OperateFavoriteVariableResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.id)) {
    query['id'] = request.id;
  }
  if (!$isNull(request.operate)) {
    query['operate'] = request.operate;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'OperateFavoriteVariable',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Operate Favorites
 *
 * @param request OperateFavoriteVariableRequest
 * @return OperateFavoriteVariableResponse
 */
async function operateFavoriteVariable(request: OperateFavoriteVariableRequest): OperateFavoriteVariableResponse {
  var runtime = new $RuntimeOptions{};
  return operateFavoriteVariableWithOptions(request, runtime);
}

model PermissionCheckRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='RegId', description='Region code.', example='cn-hangzhou'),
}

model PermissionCheckResponseBody = {
  code?: string(name='Code', description='Return code.', example='200'),
  httpStatusCode?: string(name='HttpStatusCode', description='HTTP status code.', example='200'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: string(name='ResultObject', description='Return result.', example='true'),
}

model PermissionCheckResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PermissionCheckResponseBody(name='body'),
}

/**
 * @summary Enterprise Verification
 *
 * @param request PermissionCheckRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PermissionCheckResponse
 */
@context("permissionCheckWithContext")
async function permissionCheckWithOptions(request: PermissionCheckRequest, runtime: $RuntimeOptions): PermissionCheckResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['RegId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'PermissionCheck',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Enterprise Verification
 *
 * @param request PermissionCheckRequest
 * @return PermissionCheckResponse
 */
async function permissionCheck(request: PermissionCheckRequest): PermissionCheckResponse {
  var runtime = new $RuntimeOptions{};
  return permissionCheckWithOptions(request, runtime);
}

model PocCreateTaskRequest {
  dateFormat?: string(name='DateFormat', description='Date format', example='yyyyMMdd'),
  lang?: string(name='Lang', description='Set the language type for request and response messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='RegId', description='Region code.', example='cn-hangzhou'),
  taskName?: string(name='TaskName', description='Task name.', example='o32d1pktx4t'),
  token?: string(name='Token', description='Task token.

This parameter is required.', example='68ce949aff6be7f1201eb2f9095ac95f'),
}

model PocCreateTaskResponseBody = {
  code?: string(name='Code', description='Status code.', example='200'),
  data?: string(name='Data', description='Task creation result', example='{\\\\"Values\\\\": {\\\\"status\\\\": {\\\\"value\\\\": 4, \\\\"label\\\\": u\\\\"\\\\u5904\\\\u7406\\\\u4e2d\\\\"}, \\\\"bbs_ticket\\\\": True, \\\\"description\\\\": u\\\\"[LV-ERROR'),
  httpStatusCode?: string(name='HttpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='Message', description='Response message.', example='successful'),
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  success?: string(name='Success', description='Whether the task was successful. **true** indicates success, **false** indicates failure.', example='true'),
}

model PocCreateTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PocCreateTaskResponseBody(name='body'),
}

/**
 * @summary createTask
 *
 * @param request PocCreateTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PocCreateTaskResponse
 */
@context("pocCreateTaskWithContext")
async function pocCreateTaskWithOptions(request: PocCreateTaskRequest, runtime: $RuntimeOptions): PocCreateTaskResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.dateFormat)) {
    query['DateFormat'] = request.dateFormat;
  }
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['RegId'] = request.regId;
  }
  if (!$isNull(request.taskName)) {
    query['TaskName'] = request.taskName;
  }
  if (!$isNull(request.token)) {
    query['Token'] = request.token;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'PocCreateTask',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary createTask
 *
 * @param request PocCreateTaskRequest
 * @return PocCreateTaskResponse
 */
async function pocCreateTask(request: PocCreateTaskRequest): PocCreateTaskResponse {
  var runtime = new $RuntimeOptions{};
  return pocCreateTaskWithOptions(request, runtime);
}

model PocGetDownloadUrlRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  token?: string(name='Token', description='Task token.', example='d83221f51752805880'),
}

model PocGetDownloadUrlResponseBody = {
  code?: string(name='Code', description='Status code.', example='200'),
  data?: string(name='Data', description='Data', example='{\\\\"searchResult\\\\": [], \\\\"searchTotalNum\\\\": 0, \\\\"searchTime\\\\": 0.012349}'),
  httpStatusCode?: string(name='HttpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='Message', description='Response message', example='successful'),
  requestId?: string(name='RequestId', description='ID of the request', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  success?: string(name='Success', description='Indicates whether the call was successful. true: Call succeeded. false: Call failed.', example='True'),
}

model PocGetDownloadUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PocGetDownloadUrlResponseBody(name='body'),
}

/**
 * @summary PocGetDownloadUrl
 *
 * @param request PocGetDownloadUrlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PocGetDownloadUrlResponse
 */
@context("pocGetDownloadUrlWithContext")
async function pocGetDownloadUrlWithOptions(request: PocGetDownloadUrlRequest, runtime: $RuntimeOptions): PocGetDownloadUrlResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.token)) {
    query['Token'] = request.token;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'PocGetDownloadUrl',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary PocGetDownloadUrl
 *
 * @param request PocGetDownloadUrlRequest
 * @return PocGetDownloadUrlResponse
 */
async function pocGetDownloadUrl(request: PocGetDownloadUrlRequest): PocGetDownloadUrlResponse {
  var runtime = new $RuntimeOptions{};
  return pocGetDownloadUrlWithOptions(request, runtime);
}

model PocGetTokenRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='RegId', description='Region code.', example='cn-hangzhou'),
  serviceCode?: string(name='ServiceCode', description='Service code.

This parameter is required.', example='alinlp'),
}

model PocGetTokenResponseBody = {
  code?: string(name='Code', description='Status code', example='200'),
  data?: string(name='Data', description='Returned data', example='true'),
  httpStatusCode?: string(name='HttpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='Message', description='Return message', example='success'),
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  success?: string(name='Success', description='Whether the call was successful. true: Call succeeded. false: Call failed.', example='true'),
}

model PocGetTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PocGetTokenResponseBody(name='body'),
}

/**
 * @summary getToken
 *
 * @param request PocGetTokenRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PocGetTokenResponse
 */
@context("pocGetTokenWithContext")
async function pocGetTokenWithOptions(request: PocGetTokenRequest, runtime: $RuntimeOptions): PocGetTokenResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['RegId'] = request.regId;
  }
  if (!$isNull(request.serviceCode)) {
    query['ServiceCode'] = request.serviceCode;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'PocGetToken',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary getToken
 *
 * @param request PocGetTokenRequest
 * @return PocGetTokenResponse
 */
async function pocGetToken(request: PocGetTokenRequest): PocGetTokenResponse {
  var runtime = new $RuntimeOptions{};
  return pocGetTokenWithOptions(request, runtime);
}

model PocSendDataRequest {
  batchNo?: long(name='BatchNo', description='Starting position for batch operations, starting from 0.

This parameter is required.', example='d0'),
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  paramsList?: string(name='ParamsList', description='Return parameters, in JSON format.

This parameter is required.', example='c222460c'),
  regId?: string(name='RegId', description='Region code.', example='cn-hangzhou'),
  token?: string(name='Token', description='Task token.

This parameter is required.', example='a471aa421752633438'),
}

model PocSendDataResponseBody = {
  code?: string(name='Code', description='API status code.', example='200'),
  data?: string(name='Data', description='Returned data result.', example='true'),
  httpStatusCode?: string(name='HttpStatusCode', description='HTTP status code.', example='200'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  success?: string(name='Success', description='Whether the operation was successful.', example='true'),
}

model PocSendDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PocSendDataResponseBody(name='body'),
}

/**
 * @summary sendData
 *
 * @param request PocSendDataRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PocSendDataResponse
 */
@context("pocSendDataWithContext")
async function pocSendDataWithOptions(request: PocSendDataRequest, runtime: $RuntimeOptions): PocSendDataResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.batchNo)) {
    query['BatchNo'] = request.batchNo;
  }
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.paramsList)) {
    query['ParamsList'] = request.paramsList;
  }
  if (!$isNull(request.regId)) {
    query['RegId'] = request.regId;
  }
  if (!$isNull(request.token)) {
    query['Token'] = request.token;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'PocSendData',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary sendData
 *
 * @param request PocSendDataRequest
 * @return PocSendDataResponse
 */
async function pocSendData(request: PocSendDataRequest): PocSendDataResponse {
  var runtime = new $RuntimeOptions{};
  return pocSendDataWithOptions(request, runtime);
}

model QueryAuthRuleDetailByRuleIdRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  consoleRuleId?: long(name='consoleRuleId', description='Primary key ID of the strategy', example='6843'),
  regId?: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou'),
  ruleId?: string(name='ruleId', description='Strategy ID', example='102224'),
  ruleVersionId?: long(name='ruleVersionId', description='Primary key ID of the strategy version', example='11519'),
}

model QueryAuthRuleDetailByRuleIdResponseBody = {
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    auditId?: long(name='auditId', description='Audit ID', example='225'),
    authType?: string(name='authType', description='Authorization type', example='all'),
    authUsers?: string(name='authUsers', description='Authorized user UID', example='*'),
    consoleRuleId?: long(name='consoleRuleId', description='Primary key ID of the strategy', example='6843'),
    eventCode?: string(name='eventCode', description='Event code', example='de_aszbjb7236'),
    eventName?: string(name='eventName', description='Event name.', example='注册风险'),
    gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1621578648000'),
    gmtModified?: long(name='gmtModified', description='Modification time', example='1565701886000'),
    logicExpression?: string(name='logicExpression', description='Execution logic', example='1&2'),
    memo?: string(name='memo', description='Description', example='描述'),
    priority?: long(name='priority', description='Rule priority, the higher the number, the higher the priority.', example='10'),
    ruleActionMap?: map[string]string(name='ruleActionMap', description='Returned rule action structure.'),
    ruleActions?: string(name='ruleActions', description='Output actions', example='[{\\\\"inputs\\\\":[\\\\"unusualBrand\\\\"],\\\\"name\\\\":\\\\"__addDeTags__\\\\",\\\\"actionType\\\\":\\\\"TAG\\\\",\\\\"outputType\\\\":\\\\"const\\\\"}]'),
    ruleAuthType?: string(name='ruleAuthType', description='Rule authorization type', example='WHITE_BOX'),
    ruleExpressions?: string(name='ruleExpressions', description='Rule expressions.', example='[{\\\\"expressionName\\\\":\\\\"同一设备同一IP上的注册用户数\\\\",\\\\"itemId\\\\":1,\\\\"left\\\\":{\\\\"name\\\\":\\\\"dK7EXHr490f\\\\"},\\\\"operatorCode\\\\":\\\\"gte\\\\",\\\\"operatorName\\\\":\\\\"大于等于\\\\",\\\\"right\\\\":{\\\\"fieldValue\\\\":\\\\"2\\\\"}}]'),
    ruleId?: string(name='ruleId', description='Strategy ID', example='102224'),
    ruleName?: string(name='ruleName', description='Strategy name', example='营销风险识别'),
    ruleStatus?: string(name='ruleStatus', description='Strategy status', example='RUNNING'),
    ruleType?: string(name='ruleType', description='Rule type', example='DEFAULT'),
    ruleVersionId?: long(name='ruleVersionId', description='Primary key ID of the strategy version', example='11519'),
    templateType?: string(name='templateType', description='Template type', example='PUB_SERVICE'),
    version?: long(name='version', description='Version number', example='1'),
  }(name='resultObject', description='Returned object'),
}

model QueryAuthRuleDetailByRuleIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAuthRuleDetailByRuleIdResponseBody(name='body'),
}

/**
 * @summary Query White-box Strategy Details
 *
 * @param request QueryAuthRuleDetailByRuleIdRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryAuthRuleDetailByRuleIdResponse
 */
@context("queryAuthRuleDetailByRuleIdWithContext")
async function queryAuthRuleDetailByRuleIdWithOptions(request: QueryAuthRuleDetailByRuleIdRequest, runtime: $RuntimeOptions): QueryAuthRuleDetailByRuleIdResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.consoleRuleId)) {
    query['consoleRuleId'] = request.consoleRuleId;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.ruleId)) {
    query['ruleId'] = request.ruleId;
  }
  if (!$isNull(request.ruleVersionId)) {
    query['ruleVersionId'] = request.ruleVersionId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryAuthRuleDetailByRuleId',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query White-box Strategy Details
 *
 * @param request QueryAuthRuleDetailByRuleIdRequest
 * @return QueryAuthRuleDetailByRuleIdResponse
 */
async function queryAuthRuleDetailByRuleId(request: QueryAuthRuleDetailByRuleIdRequest): QueryAuthRuleDetailByRuleIdResponse {
  var runtime = new $RuntimeOptions{};
  return queryAuthRuleDetailByRuleIdWithOptions(request, runtime);
}

model RecallRuleAuditRequest {
  id?: long(name='id', description='Primary key ID

This parameter is required.', example='1'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model RecallRuleAuditResponseBody = {
  requestId?: string(name='requestId', description='Request ID.', example='4C7DC1C8-557F-5483-9E96-74D77A15EEB5'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model RecallRuleAuditResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RecallRuleAuditResponseBody(name='body'),
}

/**
 * @summary Recall.
 *
 * @param request RecallRuleAuditRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RecallRuleAuditResponse
 */
@context("recallRuleAuditWithContext")
async function recallRuleAuditWithOptions(request: RecallRuleAuditRequest, runtime: $RuntimeOptions): RecallRuleAuditResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.id)) {
    query['id'] = request.id;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'RecallRuleAudit',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Recall.
 *
 * @param request RecallRuleAuditRequest
 * @return RecallRuleAuditResponse
 */
async function recallRuleAudit(request: RecallRuleAuditRequest): RecallRuleAuditResponse {
  var runtime = new $RuntimeOptions{};
  return recallRuleAuditWithOptions(request, runtime);
}

model RemoveEventRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  createType?: string(name='createType', description='Creation type', example='NORMAL'),
  eventCode?: string(name='eventCode', description='Event code', example='de_arqbuy7206'),
  id?: long(name='id', description='Event ID', example='2556'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  templateCode?: string(name='templateCode', description='Input field template type', example='register'),
}

model RemoveEventResponseBody = {
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model RemoveEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveEventResponseBody(name='body'),
}

/**
 * @summary Delete Event
 *
 * @param request RemoveEventRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RemoveEventResponse
 */
@context("removeEventWithContext")
async function removeEventWithOptions(request: RemoveEventRequest, runtime: $RuntimeOptions): RemoveEventResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.createType)) {
    query['createType'] = request.createType;
  }
  if (!$isNull(request.eventCode)) {
    query['eventCode'] = request.eventCode;
  }
  if (!$isNull(request.id)) {
    query['id'] = request.id;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.templateCode)) {
    query['templateCode'] = request.templateCode;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'RemoveEvent',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Delete Event
 *
 * @param request RemoveEventRequest
 * @return RemoveEventResponse
 */
async function removeEvent(request: RemoveEventRequest): RemoveEventResponse {
  var runtime = new $RuntimeOptions{};
  return removeEventWithOptions(request, runtime);
}

model SampleFileDownloadRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='RegId', description='Region code.', example='cn-hangzhou'),
  tab?: string(name='Tab', description='Scenario.', example='FINANCE'),
}

model SampleFileDownloadResponseBody = {
  code?: string(name='Code', description='Status code.', example='200'),
  httpStatusCode?: string(name='HttpStatusCode', description='HTTP status code.', example='200'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: string(name='ResultObject', description='Request result.', example='true'),
}

model SampleFileDownloadResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SampleFileDownloadResponseBody(name='body'),
}

/**
 * @summary Template Download
 *
 * @param request SampleFileDownloadRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SampleFileDownloadResponse
 */
@context("sampleFileDownloadWithContext")
async function sampleFileDownloadWithOptions(request: SampleFileDownloadRequest, runtime: $RuntimeOptions): SampleFileDownloadResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['RegId'] = request.regId;
  }
  if (!$isNull(request.tab)) {
    query['Tab'] = request.tab;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'SampleFileDownload',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Template Download
 *
 * @param request SampleFileDownloadRequest
 * @return SampleFileDownloadResponse
 */
async function sampleFileDownload(request: SampleFileDownloadRequest): SampleFileDownloadResponse {
  var runtime = new $RuntimeOptions{};
  return sampleFileDownloadWithOptions(request, runtime);
}

model SaveAnalysisColumnRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  columns?: string(name='columns', description='Custom columns

This parameter is required.', example='[{\\\\"variableName\\\\":\\\\"requestId\\\\",\\\\"variableTitle\\\\":\\\\"RequestId\\\\",\\\\"variableType\\\\":\\\\"SYSTEM_BIND\\\\",\\\\"isDefault\\\\":true},{\\\\"variableName\\\\":\\\\"eventTime\\\\",\\\\"variableTitle\\\\":\\\\"事件时间\\\\",\\\\"variableType\\\\":\\\\"SYSTEM_BIND\\\\",\\\\"isDefault\\\\":true},{\\\\"variableName\\\\":\\\\"accountId\\\\",\\\\"variableTitle\\\\":\\\\"账号\\\\",\\\\"variableType\\\\":\\\\"SYSTEM_BIND\\\\",\\\\"isDefault\\\\":true},{\\\\"variableName\\\\":\\\\"deviceId\\\\",\\\\"variableTitle\\\\":\\\\"设备ID\\\\",\\\\"variableType\\\\":\\\\"SYSTEM_BIND\\\\",\\\\"isDefault\\\\":true},{\\\\"variableName\\\\":\\\\"eventCode\\\\",\\\\"variableTitle\\\\":\\\\"事件编码\\\\",\\\\"variableType\\\\":\\\\"SYSTEM_BIND\\\\",\\\\"isDefault\\\\":true},{\\\\"variableName\\\\":\\\\"ip\\\\",\\\\"variableTitle\\\\":\\\\"IP\\\\",\\\\"variableType\\\\":\\\\"SYSTEM_BIND\\\\",\\\\"isDefault\\\\":true},{\\\\"variableName\\\\":\\\\"score\\\\",\\\\"variableTitle\\\\":\\\\"分值\\\\",\\\\"variableType\\\\":\\\\"SYSTEM_BIND\\\\",\\\\"isDefault\\\\":true},{\\\\"variableName\\\\":\\\\"tags\\\\",\\\\"variableTitle\\\\":\\\\"标签\\\\",\\\\"variableType\\\\":\\\\"SYSTEM_BIND\\\\",\\\\"isDefault\\\\":true},{\\\\"variableName\\\\":\\\\"DEtest222\\\\",\\\\"variableTitle\\\\":\\\\"测试222\\\\",\\\\"variableType\\\\":\\\\"NATIVE\\\\",\\\\"isDefault\\\\":false}]'),
  regId?: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou'),
}

model SaveAnalysisColumnResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model SaveAnalysisColumnResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SaveAnalysisColumnResponseBody(name='body'),
}

/**
 * @summary Save Custom Columns
 *
 * @param request SaveAnalysisColumnRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SaveAnalysisColumnResponse
 */
@context("saveAnalysisColumnWithContext")
async function saveAnalysisColumnWithOptions(request: SaveAnalysisColumnRequest, runtime: $RuntimeOptions): SaveAnalysisColumnResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.columns)) {
    query['columns'] = request.columns;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'SaveAnalysisColumn',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Save Custom Columns
 *
 * @param request SaveAnalysisColumnRequest
 * @return SaveAnalysisColumnResponse
 */
async function saveAnalysisColumn(request: SaveAnalysisColumnRequest): SaveAnalysisColumnResponse {
  var runtime = new $RuntimeOptions{};
  return saveAnalysisColumnWithOptions(request, runtime);
}

model SaveByPassOrShuntEventRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  eventId?: long(name='eventId', description='Event ID.', example='445'),
  eventName?: string(name='eventName', description='Event name.', example='注册事件'),
  eventType?: string(name='eventType', description='Event type', example='MAIN'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model SaveByPassOrShuntEventResponseBody = {
  code?: string(name='code', description='Status code', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error message.', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
  success?: boolean(name='success', description='Whether the request was successful.', example='true'),
}

model SaveByPassOrShuntEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SaveByPassOrShuntEventResponseBody(name='body'),
}

/**
 * @summary Bypass/Shunt Configuration
 *
 * @param request SaveByPassOrShuntEventRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SaveByPassOrShuntEventResponse
 */
@context("saveByPassOrShuntEventWithContext")
async function saveByPassOrShuntEventWithOptions(request: SaveByPassOrShuntEventRequest, runtime: $RuntimeOptions): SaveByPassOrShuntEventResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.eventId)) {
    query['eventId'] = request.eventId;
  }
  if (!$isNull(request.eventName)) {
    query['eventName'] = request.eventName;
  }
  if (!$isNull(request.eventType)) {
    query['eventType'] = request.eventType;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'SaveByPassOrShuntEvent',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Bypass/Shunt Configuration
 *
 * @param request SaveByPassOrShuntEventRequest
 * @return SaveByPassOrShuntEventResponse
 */
async function saveByPassOrShuntEvent(request: SaveByPassOrShuntEventRequest): SaveByPassOrShuntEventResponse {
  var runtime = new $RuntimeOptions{};
  return saveByPassOrShuntEventWithOptions(request, runtime);
}

model StartOrStopByPassShuntEventRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  eventId?: long(name='eventId', description='Event ID.', example='445'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  status?: string(name='status', description='Status.', example='1'),
}

model StartOrStopByPassShuntEventResponseBody = {
  code?: string(name='code', description='Status code', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error message.', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
  success?: boolean(name='success', description='Whether the request was successful.', example='true'),
}

model StartOrStopByPassShuntEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartOrStopByPassShuntEventResponseBody(name='body'),
}

/**
 * @summary Start/Stop Bypass Event
 *
 * @param request StartOrStopByPassShuntEventRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StartOrStopByPassShuntEventResponse
 */
@context("startOrStopByPassShuntEventWithContext")
async function startOrStopByPassShuntEventWithOptions(request: StartOrStopByPassShuntEventRequest, runtime: $RuntimeOptions): StartOrStopByPassShuntEventResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.eventId)) {
    query['eventId'] = request.eventId;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.status)) {
    query['status'] = request.status;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'StartOrStopByPassShuntEvent',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Start/Stop Bypass Event
 *
 * @param request StartOrStopByPassShuntEventRequest
 * @return StartOrStopByPassShuntEventResponse
 */
async function startOrStopByPassShuntEvent(request: StartOrStopByPassShuntEventRequest): StartOrStopByPassShuntEventResponse {
  var runtime = new $RuntimeOptions{};
  return startOrStopByPassShuntEventWithOptions(request, runtime);
}

model StartSimulationTaskRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  id?: string(name='id', description='Primary key ID

This parameter is required.', example='3144'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model StartSimulationTaskResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model StartSimulationTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartSimulationTaskResponseBody(name='body'),
}

/**
 * @summary Start Task Execution
 *
 * @param request StartSimulationTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StartSimulationTaskResponse
 */
@context("startSimulationTaskWithContext")
async function startSimulationTaskWithOptions(request: StartSimulationTaskRequest, runtime: $RuntimeOptions): StartSimulationTaskResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.id)) {
    query['id'] = request.id;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'StartSimulationTask',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Start Task Execution
 *
 * @param request StartSimulationTaskRequest
 * @return StartSimulationTaskResponse
 */
async function startSimulationTask(request: StartSimulationTaskRequest): StartSimulationTaskResponse {
  var runtime = new $RuntimeOptions{};
  return startSimulationTaskWithOptions(request, runtime);
}

model StopSimulationTaskRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  id?: string(name='id', description='Task ID.

This parameter is required.', example='376773'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model StopSimulationTaskResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model StopSimulationTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopSimulationTaskResponseBody(name='body'),
}

/**
 * @summary Stop Task
 *
 * @param request StopSimulationTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StopSimulationTaskResponse
 */
@context("stopSimulationTaskWithContext")
async function stopSimulationTaskWithOptions(request: StopSimulationTaskRequest, runtime: $RuntimeOptions): StopSimulationTaskResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.id)) {
    query['id'] = request.id;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'StopSimulationTask',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Stop Task
 *
 * @param request StopSimulationTaskRequest
 * @return StopSimulationTaskResponse
 */
async function stopSimulationTask(request: StopSimulationTaskRequest): StopSimulationTaskResponse {
  var runtime = new $RuntimeOptions{};
  return stopSimulationTaskWithOptions(request, runtime);
}

model SwitchExpressionVariableRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  dataVersion?: long(name='dataVersion', description='Data version.

This parameter is required.', example='1'),
  id?: long(name='id', description='Variable ID

This parameter is required.', example='2556'),
  regId?: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou'),
  status?: string(name='status', description='Status.

This parameter is required.', example='ENABLE'),
}

model SwitchExpressionVariableResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model SwitchExpressionVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SwitchExpressionVariableResponseBody(name='body'),
}

/**
 * @summary Custom Variable Switch
 *
 * @param request SwitchExpressionVariableRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SwitchExpressionVariableResponse
 */
@context("switchExpressionVariableWithContext")
async function switchExpressionVariableWithOptions(request: SwitchExpressionVariableRequest, runtime: $RuntimeOptions): SwitchExpressionVariableResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.dataVersion)) {
    query['dataVersion'] = request.dataVersion;
  }
  if (!$isNull(request.id)) {
    query['id'] = request.id;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.status)) {
    query['status'] = request.status;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'SwitchExpressionVariable',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Custom Variable Switch
 *
 * @param request SwitchExpressionVariableRequest
 * @return SwitchExpressionVariableResponse
 */
async function switchExpressionVariable(request: SwitchExpressionVariableRequest): SwitchExpressionVariableResponse {
  var runtime = new $RuntimeOptions{};
  return switchExpressionVariableWithOptions(request, runtime);
}

model SwitchFieldRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  id?: long(name='id', description='Primary Key ID', example='250002'),
  name?: string(name='name', description='Parameter Name.', example='age'),
  regId?: string(name='regId', description='Region Code

This parameter is required.', example='cn-hangzhou'),
  source?: string(name='source', description='Field Source', example='DEFINE'),
  status?: string(name='status', description='Status.', example='ENABLE'),
}

model SwitchFieldResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return Object', example='true'),
}

model SwitchFieldResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SwitchFieldResponseBody(name='body'),
}

/**
 * @summary Field Switch
 *
 * @param request SwitchFieldRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SwitchFieldResponse
 */
@context("switchFieldWithContext")
async function switchFieldWithOptions(request: SwitchFieldRequest, runtime: $RuntimeOptions): SwitchFieldResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.id)) {
    query['id'] = request.id;
  }
  if (!$isNull(request.name)) {
    query['name'] = request.name;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.source)) {
    query['source'] = request.source;
  }
  if (!$isNull(request.status)) {
    query['status'] = request.status;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'SwitchField',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Field Switch
 *
 * @param request SwitchFieldRequest
 * @return SwitchFieldResponse
 */
async function switchField(request: SwitchFieldRequest): SwitchFieldResponse {
  var runtime = new $RuntimeOptions{};
  return switchFieldWithOptions(request, runtime);
}

model SwitchQueryVariableRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  id?: long(name='id', description='Primary key ID

This parameter is required.', example='3144'),
  regId?: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou'),
  status?: string(name='status', description='Status.', example='ENABLE'),
}

model SwitchQueryVariableResponseBody = {
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model SwitchQueryVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SwitchQueryVariableResponseBody(name='body'),
}

/**
 * @summary Query Variable Enable/Disable
 *
 * @param request SwitchQueryVariableRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SwitchQueryVariableResponse
 */
@context("switchQueryVariableWithContext")
async function switchQueryVariableWithOptions(request: SwitchQueryVariableRequest, runtime: $RuntimeOptions): SwitchQueryVariableResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.id)) {
    query['id'] = request.id;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.status)) {
    query['status'] = request.status;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'SwitchQueryVariable',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Variable Enable/Disable
 *
 * @param request SwitchQueryVariableRequest
 * @return SwitchQueryVariableResponse
 */
async function switchQueryVariable(request: SwitchQueryVariableRequest): SwitchQueryVariableResponse {
  var runtime = new $RuntimeOptions{};
  return switchQueryVariableWithOptions(request, runtime);
}

model SwitchToOnlineRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  eventId?: long(name='eventId', description='The event ID to switch to.

This parameter is required.', example='de_ahqhsw7665'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model SwitchToOnlineResponseBody = {
  code?: string(name='code', description='Status code', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error message.', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
  success?: boolean(name='success', description='Indicates whether this operation was successful, `true` means success.', example='true'),
}

model SwitchToOnlineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SwitchToOnlineResponseBody(name='body'),
}

/**
 * @summary One-click switch online
 *
 * @param request SwitchToOnlineRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SwitchToOnlineResponse
 */
@context("switchToOnlineWithContext")
async function switchToOnlineWithOptions(request: SwitchToOnlineRequest, runtime: $RuntimeOptions): SwitchToOnlineResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.eventId)) {
    query['eventId'] = request.eventId;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'SwitchToOnline',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary One-click switch online
 *
 * @param request SwitchToOnlineRequest
 * @return SwitchToOnlineResponse
 */
async function switchToOnline(request: SwitchToOnlineRequest): SwitchToOnlineResponse {
  var runtime = new $RuntimeOptions{};
  return switchToOnlineWithOptions(request, runtime);
}

model SwitchVariableRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  dataVersion?: long(name='dataVersion', description='Data version.', example='1'),
  id?: long(name='id', description='Primary key ID of the cumulative variable', example='2557'),
  name?: string(name='name', description='Cumulative variable name: generated by the backend', example='hS6fn8Oe0c1'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  status?: string(name='status', description='Status.', example='ENABLE'),
}

model SwitchVariableResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model SwitchVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SwitchVariableResponseBody(name='body'),
}

/**
 * @summary Cumulative Variable Switch
 *
 * @param request SwitchVariableRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SwitchVariableResponse
 */
@context("switchVariableWithContext")
async function switchVariableWithOptions(request: SwitchVariableRequest, runtime: $RuntimeOptions): SwitchVariableResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.dataVersion)) {
    query['dataVersion'] = request.dataVersion;
  }
  if (!$isNull(request.id)) {
    query['id'] = request.id;
  }
  if (!$isNull(request.name)) {
    query['name'] = request.name;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.status)) {
    query['status'] = request.status;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'SwitchVariable',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Cumulative Variable Switch
 *
 * @param request SwitchVariableRequest
 * @return SwitchVariableResponse
 */
async function switchVariable(request: SwitchVariableRequest): SwitchVariableResponse {
  var runtime = new $RuntimeOptions{};
  return switchVariableWithOptions(request, runtime);
}

model TaskNameByUserIdRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  regId?: string(name='RegId', description='Region code.', example='cn-hangzhou'),
  taskName?: string(name='TaskName', description='Task name.', example='Methylation_node_5_3'),
}

model TaskNameByUserIdResponseBody = {
  code?: string(name='Code', description='Response code.', example='200'),
  httpStatusCode?: string(name='HttpStatusCode', description='HTTP status code.', example='200'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='ResultObject', description='Return result.', example='true'),
}

model TaskNameByUserIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TaskNameByUserIdResponseBody(name='body'),
}

/**
 * @summary Determine if the task name is duplicated
 *
 * @param request TaskNameByUserIdRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return TaskNameByUserIdResponse
 */
@context("taskNameByUserIdWithContext")
async function taskNameByUserIdWithOptions(request: TaskNameByUserIdRequest, runtime: $RuntimeOptions): TaskNameByUserIdResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.regId)) {
    query['RegId'] = request.regId;
  }
  if (!$isNull(request.taskName)) {
    query['TaskName'] = request.taskName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'TaskNameByUserId',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Determine if the task name is duplicated
 *
 * @param request TaskNameByUserIdRequest
 * @return TaskNameByUserIdResponse
 */
async function taskNameByUserId(request: TaskNameByUserIdRequest): TaskNameByUserIdResponse {
  var runtime = new $RuntimeOptions{};
  return taskNameByUserIdWithOptions(request, runtime);
}

model UpdateAnalysisConditionFavoriteRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  condition?: string(name='condition', description='Condition value.', example='{\\\\"relationship\\\\":\\\\"and\\\\",\\\\"list\\\\":[{\\\\"deepCount\\\\":1,\\\\"left\\\\":{\\\\"hasRightVariable\\\\":true,\\\\"fieldType\\\\":\\\\"INT\\\\",\\\\"functionName\\\\":\\\\"\\\\",\\\\"leftVariableType\\\\":\\\\"NATIVE\\\\",\\\\"name\\\\":\\\\"DEtest222\\\\",\\\\"operatorCode\\\\":\\\\"equals\\\\"},\\\\"right\\\\":{\\\\"rightVariableType\\\\":\\\\"constant\\\\",\\\\"name\\\\":\\\\"9007199254\\\\",\\\\"functionName\\\\":\\\\"\\\\"},\\\\"operatorCode\\\\":\\\\"equals\\\\"}]}'),
  eventBeginTime?: long(name='eventBeginTime', description='Start time, accurate to milliseconds (ms).', example='1752076800000'),
  eventCode?: string(name='eventCode', description='Event code', example='de_ajnoqe2016'),
  eventEndTime?: long(name='eventEndTime', description='End time, accurate to milliseconds (ms).', example='1753891199000'),
  fieldName?: string(name='fieldName', description='Field name', example='age'),
  fieldValue?: string(name='fieldValue', description='Field value', example='20'),
  id?: long(name='id', description='Primary key ID

This parameter is required.', example='3144'),
  name?: string(name='name', description='Condition name', example='查询条件1'),
  regId?: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou'),
  type?: string(name='type', description='Type, BASIC: Basic query, ADVANCE: Advanced query, BATCH: Batch query', example='BASIC'),
}

model UpdateAnalysisConditionFavoriteResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Returned object', example='true'),
}

model UpdateAnalysisConditionFavoriteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAnalysisConditionFavoriteResponseBody(name='body'),
}

/**
 * @summary Modify Query Conditions
 *
 * @param request UpdateAnalysisConditionFavoriteRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateAnalysisConditionFavoriteResponse
 */
@context("updateAnalysisConditionFavoriteWithContext")
async function updateAnalysisConditionFavoriteWithOptions(request: UpdateAnalysisConditionFavoriteRequest, runtime: $RuntimeOptions): UpdateAnalysisConditionFavoriteResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.condition)) {
    query['condition'] = request.condition;
  }
  if (!$isNull(request.eventBeginTime)) {
    query['eventBeginTime'] = request.eventBeginTime;
  }
  if (!$isNull(request.eventCode)) {
    query['eventCode'] = request.eventCode;
  }
  if (!$isNull(request.eventEndTime)) {
    query['eventEndTime'] = request.eventEndTime;
  }
  if (!$isNull(request.fieldName)) {
    query['fieldName'] = request.fieldName;
  }
  if (!$isNull(request.fieldValue)) {
    query['fieldValue'] = request.fieldValue;
  }
  if (!$isNull(request.id)) {
    query['id'] = request.id;
  }
  if (!$isNull(request.name)) {
    query['name'] = request.name;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.type)) {
    query['type'] = request.type;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateAnalysisConditionFavorite',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modify Query Conditions
 *
 * @param request UpdateAnalysisConditionFavoriteRequest
 * @return UpdateAnalysisConditionFavoriteResponse
 */
async function updateAnalysisConditionFavorite(request: UpdateAnalysisConditionFavoriteRequest): UpdateAnalysisConditionFavoriteResponse {
  var runtime = new $RuntimeOptions{};
  return updateAnalysisConditionFavoriteWithOptions(request, runtime);
}

model UpdateAuditRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  auditMsg?: string(name='auditMsg', description='Approval comments', example='同意'),
  auditRelationType?: string(name='auditRelationType', description='Associated type', example='RULE'),
  auditStatus?: string(name='auditStatus', description='Status', example='AGREE'),
  id?: long(name='id', description='The ID of the approval to be updated.', example='376773'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model UpdateAuditResponseBody = {
  code?: string(name='code', description='Status code', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error message.', example='The input parameter data is not valid. order_storage_company_num component not found'),
  resultObject?: boolean(name='resultObject', description='Returned object', example='true'),
  success?: boolean(name='success', description='Whether the call was successful', example='true'),
}

model UpdateAuditResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAuditResponseBody(name='body'),
}

/**
 * @summary Approval
 *
 * @param request UpdateAuditRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateAuditResponse
 */
@context("updateAuditWithContext")
async function updateAuditWithOptions(request: UpdateAuditRequest, runtime: $RuntimeOptions): UpdateAuditResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.auditMsg)) {
    query['auditMsg'] = request.auditMsg;
  }
  if (!$isNull(request.auditRelationType)) {
    query['auditRelationType'] = request.auditRelationType;
  }
  if (!$isNull(request.auditStatus)) {
    query['auditStatus'] = request.auditStatus;
  }
  if (!$isNull(request.id)) {
    query['id'] = request.id;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateAudit',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Approval
 *
 * @param request UpdateAuditRequest
 * @return UpdateAuditResponse
 */
async function updateAudit(request: UpdateAuditRequest): UpdateAuditResponse {
  var runtime = new $RuntimeOptions{};
  return updateAuditWithOptions(request, runtime);
}

model UpdateAuthRuleRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  consoleRuleId?: long(name='consoleRuleId', description='Policy primary key ID', example='7088'),
  eventCode?: string(name='eventCode', description='Event code', example='de_afghcf6411'),
  regId?: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou'),
  ruleActions?: string(name='ruleActions', description='Policy output action', example='[{\\\\"inputs\\\\":[\\\\"auto_accselist\\\\"],\\\\"name\\\\":\\\\"__addDeTags__\\\\",\\\\"actionType\\\\":\\\\"TAG\\\\",\\\\"outputType\\\\":\\\\"const\\\\"}]'),
  ruleExpressions?: string(name='ruleExpressions', description='Expression

This parameter is required.', example='[{\\\\"expressionName\\\\":\\\\"设备token不为空\\\\",\\\\"itemId\\\\":1,\\\\"left\\\\":{\\\\"name\\\\":\\\\"deviceToken\\\\"},\\\\"operatorCode\\\\":\\\\"isNotEmptyWrapper\\\\",\\\\"operatorName\\\\":\\\\"不为空\\\\"}]'),
  ruleId?: string(name='ruleId', description='Policy ID

This parameter is required.', example='101544'),
  ruleVersionId?: long(name='ruleVersionId', description='Policy version primary key ID', example='5190'),
}

model UpdateAuthRuleResponseBody = {
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model UpdateAuthRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAuthRuleResponseBody(name='body'),
}

/**
 * @summary Modify Authorization Policy
 *
 * @param request UpdateAuthRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateAuthRuleResponse
 */
@context("updateAuthRuleWithContext")
async function updateAuthRuleWithOptions(request: UpdateAuthRuleRequest, runtime: $RuntimeOptions): UpdateAuthRuleResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.consoleRuleId)) {
    query['consoleRuleId'] = request.consoleRuleId;
  }
  if (!$isNull(request.eventCode)) {
    query['eventCode'] = request.eventCode;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.ruleActions)) {
    query['ruleActions'] = request.ruleActions;
  }
  if (!$isNull(request.ruleExpressions)) {
    query['ruleExpressions'] = request.ruleExpressions;
  }
  if (!$isNull(request.ruleId)) {
    query['ruleId'] = request.ruleId;
  }
  if (!$isNull(request.ruleVersionId)) {
    query['ruleVersionId'] = request.ruleVersionId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateAuthRule',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modify Authorization Policy
 *
 * @param request UpdateAuthRuleRequest
 * @return UpdateAuthRuleResponse
 */
async function updateAuthRule(request: UpdateAuthRuleRequest): UpdateAuthRuleResponse {
  var runtime = new $RuntimeOptions{};
  return updateAuthRuleWithOptions(request, runtime);
}

model UpdateByPassShuntEventRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  eventId?: long(name='eventId', description='Event ID.', example='233'),
  eventName?: string(name='eventName', description='Event name.', example='用户昵称文本审核检测结果'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
}

model UpdateByPassShuntEventResponseBody = {
  code?: string(name='code', description='Status code.', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error message.', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
  success?: boolean(name='success', description='Whether it was successful', example='true'),
}

model UpdateByPassShuntEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateByPassShuntEventResponseBody(name='body'),
}

/**
 * @summary Edit Bypass Event
 *
 * @param request UpdateByPassShuntEventRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateByPassShuntEventResponse
 */
@context("updateByPassShuntEventWithContext")
async function updateByPassShuntEventWithOptions(request: UpdateByPassShuntEventRequest, runtime: $RuntimeOptions): UpdateByPassShuntEventResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.eventId)) {
    query['eventId'] = request.eventId;
  }
  if (!$isNull(request.eventName)) {
    query['eventName'] = request.eventName;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateByPassShuntEvent',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Edit Bypass Event
 *
 * @param request UpdateByPassShuntEventRequest
 * @return UpdateByPassShuntEventResponse
 */
async function updateByPassShuntEvent(request: UpdateByPassShuntEventRequest): UpdateByPassShuntEventResponse {
  var runtime = new $RuntimeOptions{};
  return updateByPassShuntEventWithOptions(request, runtime);
}

model UpdateDataSourceRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  description?: string(name='description', description='Description information.', example='描述'),
  id?: long(name='id', description='Primary key ID

This parameter is required.', example='30'),
  name?: string(name='name', description='Data source name.', example='年龄数据源'),
  ossKey?: string(name='ossKey', description='OSS file key.', example='saf/path/xxx'),
  regId?: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou'),
  type?: string(name='type', description='Data source type', example='FILE'),
}

model UpdateDataSourceResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model UpdateDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataSourceResponseBody(name='body'),
}

/**
 * @summary Modify Data Source
 *
 * @param request UpdateDataSourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDataSourceResponse
 */
@context("updateDataSourceWithContext")
async function updateDataSourceWithOptions(request: UpdateDataSourceRequest, runtime: $RuntimeOptions): UpdateDataSourceResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.description)) {
    query['description'] = request.description;
  }
  if (!$isNull(request.id)) {
    query['id'] = request.id;
  }
  if (!$isNull(request.name)) {
    query['name'] = request.name;
  }
  if (!$isNull(request.ossKey)) {
    query['ossKey'] = request.ossKey;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.type)) {
    query['type'] = request.type;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateDataSource',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modify Data Source
 *
 * @param request UpdateDataSourceRequest
 * @return UpdateDataSourceResponse
 */
async function updateDataSource(request: UpdateDataSourceRequest): UpdateDataSourceResponse {
  var runtime = new $RuntimeOptions{};
  return updateDataSourceWithOptions(request, runtime);
}

model UpdateQueryVariableRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  dataSourceCode?: string(name='dataSourceCode', description='Data source code

This parameter is required.', example='ds_vcaoii1697'),
  description?: string(name='description', description='Description.', example='描述'),
  eventCode?: string(name='eventCode', description='Event code

This parameter is required.', example='de_ajnoqe2016'),
  expression?: string(name='expression', description='Expression.

This parameter is required.', example='SELECT  AVG( $source )\\\\nFROM ds_vcaoii1697 \\\\nWHERE  $age > 0'),
  expressionTitle?: string(name='expressionTitle', description='Display expression

This parameter is required.', example='SELECT  AVG( $source )\\\\nFROM testCase\\\\nWHERE  $age > 0'),
  expressionVariable?: string(name='expressionVariable', description='Expression associated variable

This parameter is required.', example='age'),
  id?: long(name='id', description='Primary key ID

This parameter is required.', example='3144'),
  outlier?: string(name='outlier', description='Outlier

This parameter is required.', example='-1'),
  outputs?: string(name='outputs', description='Variable return type

This parameter is required.', example='STRING'),
  regId?: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou'),
  title?: string(name='title', description='Title.

This parameter is required.', example='获取年龄大于30的数据'),
}

model UpdateQueryVariableResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model UpdateQueryVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateQueryVariableResponseBody(name='body'),
}

/**
 * @summary Modify Custom Query Variable
 *
 * @param request UpdateQueryVariableRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateQueryVariableResponse
 */
@context("updateQueryVariableWithContext")
async function updateQueryVariableWithOptions(request: UpdateQueryVariableRequest, runtime: $RuntimeOptions): UpdateQueryVariableResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.dataSourceCode)) {
    query['dataSourceCode'] = request.dataSourceCode;
  }
  if (!$isNull(request.description)) {
    query['description'] = request.description;
  }
  if (!$isNull(request.eventCode)) {
    query['eventCode'] = request.eventCode;
  }
  if (!$isNull(request.expression)) {
    query['expression'] = request.expression;
  }
  if (!$isNull(request.expressionTitle)) {
    query['expressionTitle'] = request.expressionTitle;
  }
  if (!$isNull(request.expressionVariable)) {
    query['expressionVariable'] = request.expressionVariable;
  }
  if (!$isNull(request.id)) {
    query['id'] = request.id;
  }
  if (!$isNull(request.outlier)) {
    query['outlier'] = request.outlier;
  }
  if (!$isNull(request.outputs)) {
    query['outputs'] = request.outputs;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.title)) {
    query['title'] = request.title;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateQueryVariable',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modify Custom Query Variable
 *
 * @param request UpdateQueryVariableRequest
 * @return UpdateQueryVariableResponse
 */
async function updateQueryVariable(request: UpdateQueryVariableRequest): UpdateQueryVariableResponse {
  var runtime = new $RuntimeOptions{};
  return updateQueryVariableWithOptions(request, runtime);
}

model UpdateRuleRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh'),
  consoleRuleId?: long(name='consoleRuleId', description='Primary key ID of the policy', example='6843'),
  eventCode?: string(name='eventCode', description='Event code', example='de_agdxgz0246'),
  logicExpression?: string(name='logicExpression', description='Execution logic', example='1&2'),
  memo?: string(name='memo', description='Description', example='备注'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  ruleActions?: string(name='ruleActions', description='Output action', example='[{\\\\"inputs\\\\":[\\\\"rn0301\\\\"],\\\\"name\\\\":\\\\"__addDeTags__\\\\",\\\\"actionType\\\\":\\\\"TAG\\\\",\\\\"outputType\\\\":\\\\"const\\\\"}]'),
  ruleBody?: string(name='ruleBody', description='DSL policy expression', example='{
        "elseIfStatement": [
            {
                "condition": {
                    "currentId": 0,
                    "deepCount": 1,
                    "list": [
                        {
                            "currentId": 0,
                            "deepCount": 1,
                            "left": {
                                "code": "getLbsRegion(longitude, latitude)?.prov",
                                "description": "根据经纬度得到省份信息，比如经度：111.878062，纬度：22.585409，则经过运算，输出”广东省“",
                                "displayType": "SELF_BIND",
                                "fieldType": "STRING",
                                "functionCode": "",
                                "functionName": "",
                                "hasRightVariable": true,
                                "name": "sl_S02sHLFT7818",
                                "outputThreshold": {

                                },
                                "sourceType": "SAF",
                                "title": "经纬度自定义系统变量",
                                "type": "SELF_BIND"
                            },
                            "operatorCode": "equals",
                            "operatorName": "等于",
                            "parentId": 0,
                            "right": {
                                "name": "v",
                                "rightVariableType": "constant"
                            },
                            "sequence": 2
                        },
                        {
                            "currentId": 0,
                            "deepCount": 1,
                            "list": [
                                {
                                    "currentId": 0,
                                    "deepCount": 1,
                                    "left": {
                                        "code": "deReadVelocity(userId,"hK1DMAp1d97",1,"H",0,true,"COUNT")",
                                        "description": "测试系统变量累计",
                                        "displayType": "SELF_BIND",
                                        "fieldType": "DOUBLE",
                                        "functionCode": "",
                                        "functionName": "",
                                        "hasRightVariable": true,
                                        "name": "hK1DMAp1d97",
                                        "outputThreshold": {

                                        },
                                        "sourceType": "SAF_SELF",
                                        "title": "测试系统变量累计",
                                        "type": "SELF_BIND"
                                    },
                                    "operatorCode": "equals",
                                    "operatorName": "等于",
                                    "parentId": 0,
                                    "right": {
                                        "name": "a",
                                        "rightVariableType": "constant"
                                    },
                                    "sequence": 3
                                }
                            ],
                            "parentId": 0,
                            "relationship": "and"
                        }
                    ],
                    "parentId": 0,
                    "relationship": "and"
                },
                "then": [
                    {
                        "inputs": [
                            "123"
                        ],
                        "name": "__addDeScore__",
                        "actionType": "SCORE",
                        "outputType": "const",
                        "inputTitle": "123"
                    }
                ]
            }
        ],
        "elseStatement": {

        },
        "ifStatement": {
            "condition": {
                "currentId": 0,
                "deepCount": 1,
                "list": [
                    {
                        "currentId": 0,
                        "deepCount": 1,
                        "left": {
                            "code": "deFunctionProcess(ip,"isIp")",
                            "description": "判断是否符合IPv4标准",
                            "displayType": "SYSTEM_BIND",
                            "fieldType": "BOOLEAN",
                            "functionCode": "",
                            "functionName": "",
                            "hasRightVariable": true,
                            "name": "__isIpAddressV4__",
                            "outputThreshold": {

                            },
                            "sourceType": "SAF",
                            "title": "IP是否符合IPV4格式",
                            "type": "SYSTEM_BIND"
                        },
                        "operatorCode": "equals",
                        "operatorName": "等于",
                        "parentId": 0,
                        "right": {
                            "name": "c
d
s",
                            "rightVariableType": "constant"
                        },
                        "sequence": 1
                    }
                ],
                "parentId": 0,
                "relationship": "and"
            },
            "then": [
                {
                    "inputs": [
                        "22"
                    ],
                    "name": "__addDeTags__",
                    "actionType": "TAG",
                    "outputType": "const"
                }
            ]
        }
    }'),
  ruleExpressions?: string(name='ruleExpressions', description='Policy expression', example='[{\\\\"expressionName\\\\":\\\\"手机号MD5命中人脸测试名单\\\\",\\\\"itemId\\\\":1,\\\\"left\\\\":{\\\\"name\\\\":\\\\"mobileMd5\\\\"},\\\\"operatorCode\\\\":\\\\"deInNameList\\\\",\\\\"operatorName\\\\":\\\\"在名单中\\\\",\\\\"right\\\\":{\\\\"fieldValue\\\\":\\\\"nl_5tolf69W138c\\\\"}}]'),
  ruleId?: string(name='ruleId', description='Policy ID', example='102224'),
  ruleName?: string(name='ruleName', description='Policy name', example='分析中心事件测试_策略01'),
  ruleStatus?: string(name='ruleStatus', description='Policy status', example='RUNNING'),
  ruleType?: string(name='ruleType', description='Policy type', example='DEFAULT'),
  ruleVersionId?: long(name='ruleVersionId', description='Primary key ID of the policy version', example='11519'),
}

model UpdateRuleResponseBody = {
  requestId?: string(name='requestId', description='Request ID', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model UpdateRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateRuleResponseBody(name='body'),
}

/**
 * @summary Update Policy
 *
 * @param request UpdateRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateRuleResponse
 */
@context("updateRuleWithContext")
async function updateRuleWithOptions(request: UpdateRuleRequest, runtime: $RuntimeOptions): UpdateRuleResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.consoleRuleId)) {
    query['consoleRuleId'] = request.consoleRuleId;
  }
  if (!$isNull(request.eventCode)) {
    query['eventCode'] = request.eventCode;
  }
  if (!$isNull(request.logicExpression)) {
    query['logicExpression'] = request.logicExpression;
  }
  if (!$isNull(request.memo)) {
    query['memo'] = request.memo;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.ruleActions)) {
    query['ruleActions'] = request.ruleActions;
  }
  if (!$isNull(request.ruleBody)) {
    query['ruleBody'] = request.ruleBody;
  }
  if (!$isNull(request.ruleExpressions)) {
    query['ruleExpressions'] = request.ruleExpressions;
  }
  if (!$isNull(request.ruleId)) {
    query['ruleId'] = request.ruleId;
  }
  if (!$isNull(request.ruleName)) {
    query['ruleName'] = request.ruleName;
  }
  if (!$isNull(request.ruleStatus)) {
    query['ruleStatus'] = request.ruleStatus;
  }
  if (!$isNull(request.ruleType)) {
    query['ruleType'] = request.ruleType;
  }
  if (!$isNull(request.ruleVersionId)) {
    query['ruleVersionId'] = request.ruleVersionId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateRule',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Update Policy
 *
 * @param request UpdateRuleRequest
 * @return UpdateRuleResponse
 */
async function updateRule(request: UpdateRuleRequest): UpdateRuleResponse {
  var runtime = new $RuntimeOptions{};
  return updateRuleWithOptions(request, runtime);
}

model UpdateRuleBaseRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  consoleRuleId?: long(name='consoleRuleId', description='Policy primary key ID', example='6843'),
  eventCode?: string(name='eventCode', description='Event code', example='de_arcehq4370'),
  memo?: string(name='memo', description='Description', example='备注'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  ruleId?: string(name='ruleId', description='Policy ID', example='102224'),
  ruleName?: string(name='ruleName', description='Policy name', example='营销风险识别'),
}

model UpdateRuleBaseResponseBody = {
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model UpdateRuleBaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateRuleBaseResponseBody(name='body'),
}

/**
 * @summary Update Basic Policy Information
 *
 * @param request UpdateRuleBaseRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateRuleBaseResponse
 */
@context("updateRuleBaseWithContext")
async function updateRuleBaseWithOptions(request: UpdateRuleBaseRequest, runtime: $RuntimeOptions): UpdateRuleBaseResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.consoleRuleId)) {
    query['consoleRuleId'] = request.consoleRuleId;
  }
  if (!$isNull(request.eventCode)) {
    query['eventCode'] = request.eventCode;
  }
  if (!$isNull(request.memo)) {
    query['memo'] = request.memo;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.ruleId)) {
    query['ruleId'] = request.ruleId;
  }
  if (!$isNull(request.ruleName)) {
    query['ruleName'] = request.ruleName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateRuleBase',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Update Basic Policy Information
 *
 * @param request UpdateRuleBaseRequest
 * @return UpdateRuleBaseResponse
 */
async function updateRuleBase(request: UpdateRuleBaseRequest): UpdateRuleBaseResponse {
  var runtime = new $RuntimeOptions{};
  return updateRuleBaseWithOptions(request, runtime);
}

model UpdateSampleBatchRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  ids?: string(name='ids', description='Batch operation IDs.', example='324,343'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou'),
  tags?: string(name='tags', description='Tags (comma-separated).', example='rm0102,rm0103'),
  versions?: string(name='versions', description='Version number (latest).', example='1,1'),
}

model UpdateSampleBatchResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  data?: boolean(name='data', description='Returned data.', example='true'),
}

model UpdateSampleBatchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSampleBatchResponseBody(name='body'),
}

/**
 * @summary Batch Update Samples
 *
 * @param request UpdateSampleBatchRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateSampleBatchResponse
 */
@context("updateSampleBatchWithContext")
async function updateSampleBatchWithOptions(request: UpdateSampleBatchRequest, runtime: $RuntimeOptions): UpdateSampleBatchResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.ids)) {
    query['ids'] = request.ids;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.tags)) {
    query['tags'] = request.tags;
  }
  if (!$isNull(request.versions)) {
    query['versions'] = request.versions;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateSampleBatch',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Batch Update Samples
 *
 * @param request UpdateSampleBatchRequest
 * @return UpdateSampleBatchResponse
 */
async function updateSampleBatch(request: UpdateSampleBatchRequest): UpdateSampleBatchResponse {
  var runtime = new $RuntimeOptions{};
  return updateSampleBatchWithOptions(request, runtime);
}

model UploadFileCheckRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh'),
  batchName?: string(name='batchName', description='Sample batch name', example='白样本'),
  dataType?: string(name='dataType', description='Data type', example='mobile'),
  ossFileName?: string(name='ossFileName', description='Uploaded OSS address.', example='sample/94b4193d321c44b44ee92b19984000a0/样本测试01/0d8dbc6809834d51b1d88a42295c803e/1753865835166.csv'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou'),
  sampleTagType?: string(name='sampleTagType', description='Sample type', example='白名单'),
  serviceList?: string(name='serviceList', description='Service list', example='account_abuse'),
}

model UploadFileCheckResponseBody = {
  requestId?: string(name='RequestId', description='ID of the request', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    effectiveNumber?: int32(name='effectiveNumber', description='Number of effective rows', example='100'),
    resultList?: [ string ](name='resultList', description='Valid sample data'),
    totalNumber?: int32(name='totalNumber', description='Total number of rows', example='100'),
  }(name='resultObject', description='Returned object'),
}

model UploadFileCheckResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UploadFileCheckResponseBody(name='body'),
}

/**
 * @summary Sample Inspection
 *
 * @param request UploadFileCheckRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UploadFileCheckResponse
 */
@context("uploadFileCheckWithContext")
async function uploadFileCheckWithOptions(request: UploadFileCheckRequest, runtime: $RuntimeOptions): UploadFileCheckResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.batchName)) {
    query['batchName'] = request.batchName;
  }
  if (!$isNull(request.dataType)) {
    query['dataType'] = request.dataType;
  }
  if (!$isNull(request.ossFileName)) {
    query['ossFileName'] = request.ossFileName;
  }
  if (!$isNull(request.regId)) {
    query['regId'] = request.regId;
  }
  if (!$isNull(request.sampleTagType)) {
    query['sampleTagType'] = request.sampleTagType;
  }
  if (!$isNull(request.serviceList)) {
    query['serviceList'] = request.serviceList;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UploadFileCheck',
    version = '2021-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Sample Inspection
 *
 * @param request UploadFileCheckRequest
 * @return UploadFileCheckResponse
 */
async function uploadFileCheck(request: UploadFileCheckRequest): UploadFileCheckResponse {
  var runtime = new $RuntimeOptions{};
  return uploadFileCheckWithOptions(request, runtime);
}

