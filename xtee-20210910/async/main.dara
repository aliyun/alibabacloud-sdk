/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'xtee';
  @version = '2021-09-10';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddSampleDataByCsvRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  ossFileName?: string(name='ossFileName', description='Uploaded OSS address.', example='saf/path/test.csv', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  sampleBatchUuid?: string(name='sampleBatchUuid', description='Sample UUID.', example='1806507582222226_saf_sample_split_coupon_abuse_saf_sample_split_mobile_saf_sample_split_pass', position='Query'),
}

model AddSampleDataByCsvResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
}

model AddSampleDataByCsvResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddSampleDataByCsvResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddSampleDataByCsv  AddSampleDataByCsvRequest
  * @return AddSampleDataByCsvResponse
 */
async function addSampleDataByCsv(request: AddSampleDataByCsvRequest): AddSampleDataByCsvResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddSampleDataByCsv', 'POST', '/', 'json', false, 'json', request);
}

model AddSampleDataByTextRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  dataValue?: string(name='dataValue', description='List data.', example='testA \\n testB', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  sampleBatchUuid?: string(name='sampleBatchUuid', description='Sample UUID.', example='1806507582222226
_saf_sample_split_coupon_abuse_saf_sample_split_mobile_saf_sample_split_pass', position='Query'),
}

model AddSampleDataByTextResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
}

model AddSampleDataByTextResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddSampleDataByTextResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddSampleDataByText  AddSampleDataByTextRequest
  * @return AddSampleDataByTextResponse
 */
async function addSampleDataByText(request: AddSampleDataByTextRequest): AddSampleDataByTextResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddSampleDataByText', 'POST', '/', 'json', false, 'json', request);
}

model BatchDeleteSampleDataRequest {
  lang?: string(name='Lang', description='Language of the error message returned by the interface. Values: zh: Chinese; en: English. Default is en.', example='zh', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  uuids?: string(name='uuids', description='UUID.', example='89cd3e44cd2f4a529fb020f3bab3ee1c', position='Query'),
}

model BatchDeleteSampleDataResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
}

model BatchDeleteSampleDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchDeleteSampleDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchDeleteSampleData  BatchDeleteSampleDataRequest
  * @return BatchDeleteSampleDataResponse
 */
async function batchDeleteSampleData(request: BatchDeleteSampleDataRequest): BatchDeleteSampleDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchDeleteSampleData', 'POST', '/', 'json', false, 'json', request);
}

model BindVariableRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  apiRegionId?: string(name='apiRegionId', description='API region ID', example='cn-hangzhou', position='Query'),
  apiType?: string(name='apiType', description='API type', example='SELF', position='Query'),
  createType?: string(name='createType', description='Creation type', example='NORMAL', position='Query'),
  defineId?: string(name='defineId', description='Associated variable definition primary key ID', example='2438', position='Query'),
  defineIds?: string(name='defineIds', description='Variable definition IDs, can be multiple. If binding multiple IDs, separate them with commas', example='1546, 1547', position='Query'),
  description?: string(name='description', description='Description information.', example='变量描述', position='Query'),
  eventCode: string(name='eventCode', description='Event code

This parameter is required.', example='de_agbzfi5134', position='Query'),
  exceptionValue?: string(name='exceptionValue', description='Exception value', example='SYS_ERROR', position='Query'),
  id?: long(name='id', description='Variable primary key ID', example='106875', position='Query'),
  outputField?: string(name='outputField', description='Output field path', example='BOOLEAN', position='Query'),
  outputType?: string(name='outputType', description='Output type', example='STRING', position='Query'),
  params?: string(name='params', description='Binding input parameter information', example='{"accountId":"accountId","mobile":""}', position='Query'),
  paramsList?: string(name='paramsList', description='Event parameter mapping 2.0, either params or paramsList must not be empty. List, JSON structure', example='[{"eventFieldName":"accountId","required":false}]', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  sourceType?: string(name='sourceType', description='Variable source', example='SAF', position='Query'),
  title: string(name='title', description='Title

This parameter is required.', example='变量title', position='Query'),
}

model BindVariableResponseBody = {
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model BindVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BindVariableResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BindVariable  BindVariableRequest
  * @return BindVariableResponse
 */
async function bindVariable(request: BindVariableRequest): BindVariableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindVariable', 'POST', '/', 'json', false, 'json', request);
}

model CheckCopyRuleVariableRequest {
  createType?: string(name='CreateType', description='Creation type', example='NORMAL', position='Query'),
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='RegId', description='Region code', example='cn-hangzhou', position='Query'),
  sourceRuleId?: string(name='SourceRuleId', description='Source policy ID', example='102125', position='Query'),
  sourceRuleIds?: string(name='SourceRuleIds', description='Source policy IDs', example='02125,102129', position='Query'),
  targetEventCode?: string(name='TargetEventCode', description='Target event', example='de_ajtshf1581', position='Query'),
}

model CheckCopyRuleVariableResponseBody = {
  requestId?: string(name='RequestId', description='ID of the request', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    message?: [ 
      {
        id?: long(name='Id', description='Primary key ID of the variable', example='213'),
        name?: string(name='Name', description='Name of the variable', example='age'),
        title?: string(name='Title', description='Title of the variable', example='年龄'),
        type?: string(name='Type', description='Type of the variable', example='NATIVE'),
      }
    ](name='Message', description='Information.'),
  }(name='ResultObject', description='Returned result information'),
}

model CheckCopyRuleVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckCopyRuleVariableResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckCopyRuleVariable  CheckCopyRuleVariableRequest
  * @return CheckCopyRuleVariableResponse
 */
async function checkCopyRuleVariable(request: CheckCopyRuleVariableRequest): CheckCopyRuleVariableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckCopyRuleVariable', 'POST', '/', 'json', false, 'json', request);
}

model CheckCustVariableLimitRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  createType?: string(name='createType', description='Creation type', example='NORMAL', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model CheckCustVariableLimitResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model CheckCustVariableLimitResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckCustVariableLimitResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckCustVariableLimit  CheckCustVariableLimitRequest
  * @return CheckCustVariableLimitResponse
 */
async function checkCustVariableLimit(request: CheckCustVariableLimitRequest): CheckCustVariableLimitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckCustVariableLimit', 'POST', '/', 'json', false, 'json', request);
}

model CheckExpressionVariableLimitRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model CheckExpressionVariableLimitResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model CheckExpressionVariableLimitResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckExpressionVariableLimitResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckExpressionVariableLimit  CheckExpressionVariableLimitRequest
  * @return CheckExpressionVariableLimitResponse
 */
async function checkExpressionVariableLimit(request: CheckExpressionVariableLimitRequest): CheckExpressionVariableLimitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckExpressionVariableLimit', 'POST', '/', 'json', false, 'json', request);
}

model CheckFieldLimitRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  source?: string(name='source', description='Source of the field', example='DEFINE', position='Query'),
}

model CheckFieldLimitResponseBody = {
  requestId?: string(name='requestId', description='Request ID', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: boolean(name='resultObject', description='Whether the condition is met: -**true**: meets the condition-**false**: does not meet the condition', example='true'),
}

model CheckFieldLimitResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckFieldLimitResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckFieldLimit  CheckFieldLimitRequest
  * @return CheckFieldLimitResponse
 */
async function checkFieldLimit(request: CheckFieldLimitRequest): CheckFieldLimitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckFieldLimit', 'POST', '/', 'json', false, 'json', request);
}

model CheckUsageVariableRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  id: long(name='id', description='Primary Key ID

This parameter is required.', example='1', position='Query'),
  regId: string(name='regId', description='Region ID

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model CheckUsageVariableResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Whether it was successful', example='true'),
}

model CheckUsageVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckUsageVariableResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckUsageVariable  CheckUsageVariableRequest
  * @return CheckUsageVariableResponse
 */
async function checkUsageVariable(request: CheckUsageVariableRequest): CheckUsageVariableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckUsageVariable', 'POST', '/', 'json', false, 'json', request);
}

model CompareCopyRuleVariableRequest {
  createType?: string(name='CreateType', description='Creation type', example='NORMAL', position='Query'),
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='RegId', description='Region code.', example='cn-hangzhou', position='Query'),
  sourceRuleId?: string(name='SourceRuleId', description='Original policy ruleId.', example='102125', position='Query'),
  sourceRuleIds?: string(name='SourceRuleIds', description='Original policy ruleIds.', example='102125,102129', position='Query'),
  targetEventCode?: string(name='TargetEventCode', description='Target event eventCode.', example='de_ajtshf1581', position='Query'),
}

model CompareCopyRuleVariableResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    custVariableList?: [ 
      {
        description?: string(name='Description', description='Description', example='描述'),
        id?: long(name='Id', description='Variable ID', example='1483'),
        name?: string(name='Name', description='Variable name', example='dxkkLw8fe18'),
        outType?: string(name='OutType', description='Variable type', example='SELF_VELOCITY'),
        title?: string(name='Title', description='Title', example='近1天账户登录设备数_bk4'),
      }
    ](name='CustVariableList', description='Cumulative variable list'),
    eventVariableList?: [ 
      {
        description?: string(name='Description', description='Description', example='描述'),
        id?: long(name='Id', description='Variable id', example='375'),
        name?: string(name='Name', description='Variable name', example='age'),
        outType?: string(name='OutType', description='Variable type', example='NATIVE'),
        title?: string(name='Title', description='Title', example='年龄'),
      }
    ](name='EventVariableList', description='Event field variables'),
    expressionVariableList?: [ 
      {
        description?: string(name='Description', description='Description', example='描述'),
        id?: long(name='Id', description='Variable ID', example='2540'),
        name?: string(name='Name', description='Variable name', example='ex_XheC9A382fe7'),
        outType?: string(name='OutType', description='Variable Type', example='EXPRESSION'),
        title?: string(name='Title', description='Title', example='手机号前7位'),
      }
    ](name='ExpressionVariableList', description='Custom variable list'),
    nameListVariableList?: [ 
      {
        description?: string(name='Description', description='Description', example='描述'),
        id?: long(name='Id', description='Variable id', example='1987'),
        name?: string(name='Name', description='Variable name', example='nl_UN8otElLb490'),
        outType?: string(name='OutType', description='Variable type', example='NAME_LIST'),
        title?: string(name='Title', description='Title', example='白名单'),
      }
    ](name='NameListVariableList', description='Name list variables'),
    queryExpressionVariableList?: [ 
      {
        description?: string(name='Description', description='Description', example='描述'),
        id?: long(name='Id', description='Variable ID', example='217'),
        name?: string(name='Name', description='Variable Name', example='ex_vcaoii1697'),
        outType?: string(name='OutType', description='Variable Type', example='QUERY_EXPRESSION'),
        title?: string(name='Title', description='Title', example='获取年龄'),
      }
    ](name='QueryExpressionVariableList', description='Custom Query Variable List'),
    systemVariableList?: [ 
      {
        description?: string(name='Description', description='Description', example='描述'),
        id?: long(name='Id', description='Variable ID', example='1003'),
        name?: string(name='Name', description='Variable name', example='sl_S02sHLFT7818'),
        outType?: string(name='OutType', description='Variable type', example='SELF_BIND'),
        title?: string(name='Title', description='Title', example='根据ip地址得到评分'),
      }
    ](name='SystemVariableList', description='System variable list'),
  }(name='ResultObject', description='Result object.'),
}

model CompareCopyRuleVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CompareCopyRuleVariableResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CompareCopyRuleVariable  CompareCopyRuleVariableRequest
  * @return CompareCopyRuleVariableResponse
 */
async function compareCopyRuleVariable(request: CompareCopyRuleVariableRequest): CompareCopyRuleVariableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CompareCopyRuleVariable', 'POST', '/', 'json', false, 'json', request);
}

model CreateAnalysisConditionFavoriteRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  condition: string(name='condition', description='Condition value.

This parameter is required.', example='{"relationship":"and","list":[{"deepCount":1,"left":{"hasRightVariable":true,"fieldType":"INT","functionName":"","leftVariableType":"NATIVE","name":"DEtest222","operatorCode":"equals"},"right":{"rightVariableType":"constant","name":"11","functionName":""},"operatorCode":"equals"}]}', position='Query'),
  eventBeginTime: long(name='eventBeginTime', description='Start time, accurate to milliseconds (ms).

This parameter is required.', example='1751299200000', position='Query'),
  eventCodes: string(name='eventCodes', description='Event codes, separated by commas

This parameter is required.', example='["de_ahqhsw7665","de_agbzfi5134"]', position='Query'),
  eventEndTime: long(name='eventEndTime', description='End time, accurate to milliseconds (ms).

This parameter is required.', example='1753372799000', position='Query'),
  fieldName?: string(name='fieldName', description='Field name', example='age', position='Query'),
  fieldValue?: string(name='fieldValue', description='Field value', example='10', position='Query'),
  name: string(name='name', description='Condition favorite name

This parameter is required.', example='条件一', position='Query'),
  regId: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou', position='Query'),
  type: string(name='type', description='Query type

This parameter is required.', example='BASIC', position='Query'),
}

model CreateAnalysisConditionFavoriteResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model CreateAnalysisConditionFavoriteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAnalysisConditionFavoriteResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateAnalysisConditionFavorite  CreateAnalysisConditionFavoriteRequest
  * @return CreateAnalysisConditionFavoriteResponse
 */
async function createAnalysisConditionFavorite(request: CreateAnalysisConditionFavoriteRequest): CreateAnalysisConditionFavoriteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAnalysisConditionFavorite', 'POST', '/', 'json', false, 'json', request);
}

model CreateAnalysisExportTaskRequest {
  lang?: string(name='Lang', description='Sets the language type for the request and response messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  columns?: string(name='columns', description='Custom columns', example='[
                {
                    "fieldName": "requestId",
                    "fieldTitle": "RequestId"
                },
                {
                    "fieldName": "eventTime",
                    "fieldTitle": "事件时间"
                },
                {
                    "fieldName": "accountId",
                    "fieldTitle": "账号"
                },
                {
                    "fieldName": "deviceId",
                    "fieldTitle": "设备ID"
                },
                {
                    "fieldName": "eventCode",
                    "fieldTitle": "事件编码"
                },
                {
                    "fieldName": "ip",
                    "fieldTitle": "IP"
                },
                {
                    "fieldName": "score",
                    "fieldTitle": "分值"
                },
                {
                    "fieldName": "tags",
                    "fieldTitle": "标签"
                },
                {
                    "fieldName": "DEtest222",
                    "fieldTitle": "测试222"
                }
            ]', position='Query'),
  conditions?: string(name='conditions', description='Query expression', example='{
     "fieldName": null, 
      "fieldValue": null 
      }', position='Query'),
  eventBeginTime: long(name='eventBeginTime', description='Start time, accurate to milliseconds (ms).

This parameter is required.', example='1752076800000', position='Query'),
  eventCodes: string(name='eventCodes', description='Event code.

This parameter is required.', example='de_afghcf6411', position='Query'),
  eventEndTime: long(name='eventEndTime', description='End time, accurate to milliseconds (ms).

This parameter is required.', example='1753891199000', position='Query'),
  fieldName?: string(name='fieldName', description='Field name', example='age', position='Query'),
  fieldValue?: string(name='fieldValue', description='Field value', example='20', position='Query'),
  fileFormat: string(name='fileFormat', description='File format, Excel, CSV

This parameter is required.', example='CSV', position='Query'),
  regId: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou', position='Query'),
  scope: string(name='scope', description='Export scope: ALL: All, SELECT: Selected rows

This parameter is required.', example='ALL', position='Query'),
  type: string(name='type', description='Type, BASIC: Basic query, ADVANCE: Advanced query, BATCH: Batch query

This parameter is required.', example='BASIC', position='Query'),
}

model CreateAnalysisExportTaskResponseBody = {
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    columns?: string(name='columns', description='Export list.', example='[
                {
                    "fieldName": "requestId",
                    "fieldTitle": "RequestId"
                },
                {
                    "fieldName": "eventTime",
                    "fieldTitle": "事件时间"
                },
                {
                    "fieldName": "accountId",
                    "fieldTitle": "账号"
                },
                {
                    "fieldName": "deviceId",
                    "fieldTitle": "设备ID"
                },
                {
                    "fieldName": "eventCode",
                    "fieldTitle": "事件编码"
                },
                {
                    "fieldName": "ip",
                    "fieldTitle": "IP"
                },
                {
                    "fieldName": "score",
                    "fieldTitle": "分值"
                },
                {
                    "fieldName": "tags",
                    "fieldTitle": "标签"
                },
                {
                    "fieldName": "DEtest222",
                    "fieldTitle": "测试222"
                }
            ]'),
    conditions?: string(name='conditions', description='Export task conditions.', example='{
     "fieldName": null, 
      "fieldValue": null 
      }'),
    eventBeginTime?: long(name='eventBeginTime', description='Event start time.', example='1752076800000'),
    eventCodes?: string(name='eventCodes', description='Event code.', example='de_ahespg8137'),
    eventEndTime?: long(name='eventEndTime', description='End time.', example='1753891199000'),
    fileFormat?: string(name='fileFormat', description='File format.', example='CSV'),
    ossKey?: string(name='ossKey', description='OSS-generated key.', example='xxxxx'),
    scope?: string(name='scope', description='Export task scope.', example='ALL'),
    status?: string(name='status', description='Task status.', example='RUNNING'),
    type?: string(name='type', description='Export task type.', example='BASIC'),
    userId?: long(name='userId', description='User UID', example='1519714049632764'),
  }(name='resultObject', description='Returned object'),
}

model CreateAnalysisExportTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAnalysisExportTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateAnalysisExportTask  CreateAnalysisExportTaskRequest
  * @return CreateAnalysisExportTaskResponse
 */
async function createAnalysisExportTask(request: CreateAnalysisExportTaskRequest): CreateAnalysisExportTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAnalysisExportTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateAppKeyRequest {
  lang?: string(name='Lang', description='Set the language type for requests and responses, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model CreateAppKeyResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  data?: boolean(name='data', description='Data object', example='true'),
}

model CreateAppKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAppKeyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateAppKey  CreateAppKeyRequest
  * @return CreateAppKeyResponse
 */
async function createAppKey(request: CreateAppKeyRequest): CreateAppKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAppKey', 'POST', '/', 'json', false, 'json', request);
}

model CreateCustVariableRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  condition?: string(name='condition', description='Condition value.', example='{"relationship":"and","list":[{"deepCount":1,"left":{"hasRightVariable":true,"fieldType":"INT","functionName":"","leftVariableType":"NATIVE","name":"DEtest222","operatorCode":"equals"},"right":{"rightVariableType":"constant","name":"11","functionName":""},"operatorCode":"equals"}]}', position='Query'),
  createType?: string(name='createType', description='Creation type', example='NORMAL', position='Query'),
  description?: string(name='description', description='Description information.', example='ip调用次数累计描述', position='Query'),
  eventCodes: string(name='eventCodes', description='Event code

This parameter is required.', example='de_ahqhsw7665,de_agbzfi5134', position='Query'),
  historyValueType?: string(name='historyValueType', description='Value type', example='EARLIEST', position='Query'),
  object?: string(name='object', description='Accumulative object', example='age', position='Query'),
  outputs?: string(name='outputs', description='Variable return type', example='STRING', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  subject: string(name='subject', description='Primary object

This parameter is required.', example='name', position='Query'),
  timeType: string(name='timeType', description='Time slice type

This parameter is required.', example='CURRENT', position='Query'),
  title: string(name='title', description='Title.

This parameter is required.', example='ip调用次数累计', position='Query'),
  twCount?: int32(name='twCount', description='Number of time units', example='1', position='Query'),
  velocityFC: string(name='velocityFC', description='Variable type

This parameter is required.', example='DISTINCT', position='Query'),
  velocityTW: string(name='velocityTW', description='Time slice unit

This parameter is required.', example='DAY_1', position='Query'),
}

model CreateCustVariableResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model CreateCustVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCustVariableResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateCustVariable  CreateCustVariableRequest
  * @return CreateCustVariableResponse
 */
async function createCustVariable(request: CreateCustVariableRequest): CreateCustVariableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCustVariable', 'POST', '/', 'json', false, 'json', request);
}

model CreateDataSourceRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  description?: string(name='description', description='Data source description.', example='数据源描述', position='Query'),
  name: string(name='name', description='Data source name.

This parameter is required.', example='testDispatch', position='Query'),
  ossKey: string(name='ossKey', description='OSS file key.

This parameter is required.', example='oss上传key', position='Query'),
  regId: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou', position='Query'),
  type: string(name='type', description='Data source type

This parameter is required.', example='FILE', position='Query'),
}

model CreateDataSourceResponseBody = {
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model CreateDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataSourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDataSource  CreateDataSourceRequest
  * @return CreateDataSourceResponse
 */
async function createDataSource(request: CreateDataSourceRequest): CreateDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDataSource', 'POST', '/', 'json', false, 'json', request);
}

model CreateEventRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  createType?: string(name='createType', description='Creation type', example='NORMAL', position='Query'),
  eventName?: string(name='eventName', description='Event name.', example='登录事件', position='Query'),
  inputFieldsStr?: string(name='inputFieldsStr', description='Input parameters, JSON string.', example='[{"fieldCode":"accountId","description":"用户的账户ID，唯一标识一个账户的id","fieldRank":1,"title":"账户ID","fieldType":"STRING","fieldSource":"DEFAULT"},{"fieldCode":"hitRules","fieldRank":2,"title":"命中策略","fieldType":"STRING","fieldSource":"DEFAULT"},{"fieldCode":"age","description":"","fieldRank":3,"title":"年龄","fieldType":"INT","fieldSource":"DEFAULT"},{"fieldCode":"ip","description":"IP地址","fieldRank":4,"title":"IP地址","fieldType":"STRING","fieldSource":"DEFAULT"},{"fieldCode":"tags","fieldRank":5,"title":"风险标签","fieldType":"STRING","fieldSource":"DEFAULT"},{"fieldCode":"score","fieldRank":6,"title":"风险分值","fieldType":"DOUBLE","fieldSource":"DEFAULT"},{"fieldCode":"hitList","fieldRank":7}]', position='Query'),
  memo?: string(name='memo', description='Memo information', example='登录事件描述', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  templateCode?: string(name='templateCode', description='Input field template type', example='register', position='Query'),
  templateName?: string(name='templateName', description='Published template name.', example='注册事件模版', position='Query'),
  templateType?: string(name='templateType', description='Template type.', example='TASK', position='Query'),
}

model CreateEventResponseBody = {
  data?: boolean(name='data', description='Return result.', example='true'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
}

model CreateEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateEventResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateEvent  CreateEventRequest
  * @return CreateEventResponse
 */
async function createEvent(request: CreateEventRequest): CreateEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEvent', 'POST', '/', 'json', false, 'json', request);
}

model CreateExpressionVariableRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  description?: string(name='description', description='Description.', example='获取入参的手机号前7位', position='Query'),
  eventCode: string(name='eventCode', description='Event code

This parameter is required.', example='de_ahpayh4121', position='Query'),
  expression: string(name='expression', description='Calculation expression

This parameter is required.', example='@ex_GX9rrlTq4b67 + 1001', position='Query'),
  expressionTitle: string(name='expressionTitle', description='Display value of calculation expression

This parameter is required.', example='@selfvariable_02 + 1001', position='Query'),
  expressionVariable?: string(name='expressionVariable', description='Calculation expression variable', example='[{"name":"ex_GX9rrlTq4b67","code":"deInvokeSelfVariable(44659)","fieldType":"INT"}]', position='Query'),
  outlier: string(name='outlier', description='Outlier

This parameter is required.', example='-1', position='Query'),
  outputs: string(name='outputs', description='Variable return type

This parameter is required.', example='STRING', position='Query'),
  regId: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou', position='Query'),
  title: string(name='title', description='Title.

This parameter is required.', example='获取手机号前7位', position='Query'),
}

model CreateExpressionVariableResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model CreateExpressionVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateExpressionVariableResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateExpressionVariable  CreateExpressionVariableRequest
  * @return CreateExpressionVariableResponse
 */
async function createExpressionVariable(request: CreateExpressionVariableRequest): CreateExpressionVariableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateExpressionVariable', 'POST', '/', 'json', false, 'json', request);
}

model CreateFieldRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  classify?: string(name='classify', description='Field classification.', example='REQUEST_PARAM', position='Query'),
  description?: string(name='description', description='Description information.', example='字段描述信息', position='Query'),
  enumData?: string(name='enumData', description='Enum data.', example='enum', position='Query'),
  name?: string(name='name', description='Field name.', example='age', position='Query'),
  regId: string(name='regId', description='Region code.

This parameter is required.', example='cn-hangzhou', position='Query'),
  source?: string(name='source', description='Business source.', example='DEFINE', position='Query'),
  title?: string(name='title', description='Title.', example='年龄', position='Query'),
  type?: string(name='type', description='Field type.', example='STRING', position='Query'),
}

model CreateFieldResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object.', example='true'),
}

model CreateFieldResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFieldResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateField  CreateFieldRequest
  * @return CreateFieldResponse
 */
async function createField(request: CreateFieldRequest): CreateFieldResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateField', 'POST', '/', 'json', false, 'json', request);
}

model CreateModelRequest {
  bucId: string(name='BucId', description='Submitter ID.

This parameter is required.', example='WB01160353', position='Query'),
  counts: string(name='Counts', description='Number of file rows.

This parameter is required.', example='1000', position='Query'),
  fileMD5: string(name='FileMD5', description='File MD5 value.

This parameter is required.', example='VC6Sj3u138yfWHLxLl7dtA==', position='Query'),
  filePath: string(name='FilePath', description='File path.

This parameter is required.', example='tempCache/ef2387dfb357ffe87925fd51d2b5305b/1665717035328/mockData.csv', position='Query'),
  modelName: string(name='ModelName', description='Model name.

This parameter is required.', example='qwen-max', position='Query'),
  modelScene: string(name='ModelScene', description='Model scenario.

This parameter is required.', example='saf_ai_account_abuse', position='Query'),
  parameterNum: string(name='ParameterNum', description='Number of file columns.

This parameter is required.', example='10', position='Query'),
  regId?: string(name='RegId', description='Region code', example='cn-hangzhou', position='Query'),
  userLocalFileName: string(name='UserLocalFileName', description='Uploaded file name.

This parameter is required.', example='fileTest', position='Query'),
}

model CreateModelResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='ResultObject', description='Result object.', example='True'),
}

model CreateModelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateModelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateModel  CreateModelRequest
  * @return CreateModelResponse
 */
async function createModel(request: CreateModelRequest): CreateModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateModel', 'POST', '/', 'json', false, 'json', request);
}

model CreatePocEvRequest {
  dateFormat?: string(name='DateFormat', description='Date format type', example='yyyyMMdd', position='Query'),
  fileName?: string(name='FileName', description='File name.
> The file name must end with txt or sql. For example, test.txt, test.sql.', example='test.csv', position='Query'),
  fileType?: string(name='FileType', description='File type', example='CSV', position='Query'),
  fileUrl?: string(name='FileUrl', description='File URL.', example='saf/cpoc/953c883cde33b2e21d722eb661d26375/测试文件模板-通用.csv', position='Query'),
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='RegId', description='Region code', example='cn-hangzhou', position='Query'),
  serviceCode?: string(name='ServiceCode', description='Service code.', example='anti_fraud_v2', position='Query'),
  serviceName?: string(name='ServiceName', description='Service name.', example='注册风险', position='Query'),
  tab?: string(name='Tab', description='Scenario.', example='INTERNET', position='Query'),
  taskName?: string(name='TaskName', description='Task name.', example='er-log-s3', position='Query'),
  type?: string(name='Type', description='Access type.', example='SAF_CONSOLE', position='Query'),
}

model CreatePocEvResponseBody = {
  code?: string(name='Code', description='Response code.', example='200'),
  httpStatusCode?: string(name='HttpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='Message', description='Return message.', example='successful'),
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: string(name='ResultObject', description='Return result', example='True'),
}

model CreatePocEvResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePocEvResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreatePocEv  CreatePocEvRequest
  * @return CreatePocEvResponse
 */
async function createPocEv(request: CreatePocEvRequest): CreatePocEvResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePocEv', 'POST', '/', 'json', false, 'json', request);
}

model CreateQueryVariableRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  dataSourceCode: string(name='dataSourceCode', description='Data source ID.

This parameter is required.', example='3527', position='Query'),
  description?: string(name='description', description='Description.', example='查询变量描述信息', position='Query'),
  eventCode: string(name='eventCode', description='Event code

This parameter is required.', example='de_arqbuy7206', position='Query'),
  expression: string(name='expression', description='Calculation expression

This parameter is required.', example='SELECT  AVG( $source )
FROM testCase
WHERE  $age > 0', position='Query'),
  expressionTitle: string(name='expressionTitle', description='Display value of calculation expression

This parameter is required.', example='SELECT  AVG( $source )
FROM testCase
WHERE  $age > 0', position='Query'),
  expressionVariable: string(name='expressionVariable', description='Calculation expression variable

This parameter is required.', example='age', position='Query'),
  outlier: string(name='outlier', description='Outlier

This parameter is required.', example='-1', position='Query'),
  outputs: string(name='outputs', description='Variable return type

This parameter is required.', example='STRING', position='Query'),
  regId: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou', position='Query'),
  title: string(name='title', description='Title.

This parameter is required.', example='获取手机号前7位', position='Query'),
}

model CreateQueryVariableResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model CreateQueryVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateQueryVariableResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateQueryVariable  CreateQueryVariableRequest
  * @return CreateQueryVariableResponse
 */
async function createQueryVariable(request: CreateQueryVariableRequest): CreateQueryVariableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateQueryVariable', 'POST', '/', 'json', false, 'json', request);
}

model CreateRecommendEventRuleRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  eventCode?: string(name='eventCode', description='Event code.', example='de_ahqido8038', position='Query'),
  eventName?: string(name='eventName', description='Event name.', example='用户昵称文本审核检测结果', position='Query'),
  recommendRuleIdsStr?: string(name='recommendRuleIdsStr', description='Strategy ID.', example='[\\"100234\\",\\"100235\\"]', position='Query'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou', position='Query'),
  taskId?: long(name='taskId', description='Task ID.', example='6770764', position='Query'),
}

model CreateRecommendEventRuleResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object.', example='true'),
}

model CreateRecommendEventRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRecommendEventRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateRecommendEventRule  CreateRecommendEventRuleRequest
  * @return CreateRecommendEventRuleResponse
 */
async function createRecommendEventRule(request: CreateRecommendEventRuleRequest): CreateRecommendEventRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRecommendEventRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateRecommendTaskRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  name: string(name='name', description='Name

This parameter is required.', example='注册样本', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  sampleId: long(name='sampleId', description='Task ID.

This parameter is required.', example='5467', position='Query'),
  variablesStr: string(name='variablesStr', description='Variables to be calculated, variables

This parameter is required.', example='[\\"1112\\",\\"1113\\"]', position='Query'),
  velocitiesStr: string(name='velocitiesStr', description='Indicator effect

This parameter is required.', example='[\\"dxkkLw8fe18\\",\\"dxUxSCM26d7\\"]', position='Query'),
}

model CreateRecommendTaskResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model CreateRecommendTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRecommendTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateRecommendTask  CreateRecommendTaskRequest
  * @return CreateRecommendTaskResponse
 */
async function createRecommendTask(request: CreateRecommendTaskRequest): CreateRecommendTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRecommendTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateRuleRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  consoleRuleId?: long(name='consoleRuleId', description='Rule ID.', example='5178', position='Query'),
  createType?: string(name='createType', description='Creation type', example='NORMAL', position='Query'),
  eventCode?: string(name='eventCode', description='Event code', example='de_acytyt7036', position='Query'),
  eventName?: string(name='eventName', description='Event name.', example='登录事件', position='Query'),
  logicExpression?: string(name='logicExpression', description='Policy expression execution logic', example='1&2', position='Query'),
  memo?: string(name='memo', description='Memo', example='描述信息', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  ruleActions?: string(name='ruleActions', description='Policy execution output action', example='[{"inputs":["123"],"name":"__addDeTags__","actionType":"TAG","outputType":"const"},{"inputs":["123"],"name":"__addDeScore__","actionType":"SCORE","outputType":"const","inputTitle":"123"},{"actionType":"MIDDLE_VARIABLE","fieldValue":"123","inputs":["mid1"]},{"actionType":"VARIABLE","inputs":["gg"],"name":"mid1"}]', position='Query'),
  ruleBody?: string(name='ruleBody', description='DSL policy execution logic', example='{"elseIfStatement":[],"elseStatement":{},"ifStatement":{"condition":{"currentId":0,"deepCount":1,"list":[{"currentId":0,"deepCount":1,"left":{"code":"deFunctionProcess(ip,\\"isIp\\")","description":"判断是否符合IPv4标准","displayType":"SYSTEM_BIND","fieldType":"BOOLEAN","functionCode":"","functionName":"","hasRightVariable":false,"name":"__isIpAddressV4__","outputThreshold":{},"sourceType":"SAF","title":"IP是否符合IPV4格式","type":"SYSTEM_BIND"},"operatorCode":"boolIsFalse","operatorName":"为false","parentId":0,"sequence":1}],"parentId":0,"relationship":"and"},"then":[{"inputs":["123"],"name":"__addDeTags__","actionType":"TAG","outputType":"const"}]}}', position='Query'),
  ruleExpressions?: string(name='ruleExpressions', description='Policy expression', example='[{"expressionName":"cc","itemId":1,"left":{"name":"__ipLocationCityCode__"},"operatorCode":"equals","operatorName":"等于","right":{"fieldValue":"a"}}]', position='Query'),
  ruleName?: string(name='ruleName', description='Policy name', example='注册手机号是11位数字', position='Query'),
  ruleStatus?: string(name='ruleStatus', description='Policy status', example='DRAFT', position='Query'),
  ruleType?: string(name='ruleType', description='Policy type', example='DRAFT', position='Query'),
}

model CreateRuleResponseBody = {
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: boolean(name='resultObject', description='Return result.', example='true'),
}

model CreateRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateRule  CreateRuleRequest
  * @return CreateRuleResponse
 */
async function createRule(request: CreateRuleRequest): CreateRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateSampleRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  clientFileName?: string(name='clientFileName', description='OSS client uploaded file name', example='样本文件.csv', position='Query'),
  clientPath?: string(name='clientPath', description='OSS client address', example='sample/path', position='Query'),
  fileType?: string(name='fileType', description='File type', example='CSV', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  sampleTag?: string(name='sampleTag', description='Sample tag', example='rm0102', position='Query'),
  sampleType?: string(name='sampleType', description='Sample type', example='PHONE', position='Query'),
  sampleValues?: string(name='sampleValues', description='Sample values', example='1777000000,1777000001', position='Query'),
  uploadType?: string(name='uploadType', description='Upload type', example='ANNEX', position='Query'),
}

model CreateSampleResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    communityCount?: int32(name='communityCount', description='Number of colored groups', example='10'),
    failCount?: int32(name='failCount', description='Number of failed samples', example='1'),
    recallProbability?: string(name='recallProbability', description='Recall probability', example='2.5%'),
    riskDensity?: string(name='riskDensity', description='Risk density', example='1.5%'),
    sampleCount?: int32(name='sampleCount', description='Number of samples', example='100'),
    successCount?: int32(name='successCount', description='Number of successful samples', example='99'),
  }(name='resultObject', description='Return object'),
}

model CreateSampleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSampleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateSample  CreateSampleRequest
  * @return CreateSampleResponse
 */
async function createSample(request: CreateSampleRequest): CreateSampleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSample', 'POST', '/', 'json', false, 'json', request);
}

model CreateSampleApiRequest {
  dataType?: string(name='DataType', description='Same as input parameter', example='ip/accountID', position='Query'),
  dataValue?: string(name='DataValue', description='Specific data value', example='同参数', position='Query'),
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='RegId', description='regionId', example='cn-shanghai', position='Query'),
  sampleBatchType?: string(name='SampleBatchType', description='Sample batch type', example='白名单/黑名单/混合', position='Query'),
  serviceList?: string(name='ServiceList', description='Service list.', example='同参数', position='Query'),
}

model CreateSampleApiResponseBody = {
  code?: int32(name='Code', description='Status code.', example='200'),
  message?: string(name='Message', description='Error message.', example='ConsolePocQueryServiceImpl.queryServiceCodeName.arg0.tab tab Type error'),
  requestId?: string(name='RequestId', description='ID of the request', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
}

model CreateSampleApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSampleApiResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateSampleApi  CreateSampleApiRequest
  * @return CreateSampleApiResponse
 */
async function createSampleApi(request: CreateSampleApiRequest): CreateSampleApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSampleApi', 'POST', '/', 'json', false, 'json', request);
}

model CreateSampleBatchRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  batchName?: string(name='batchName', description='Sample batch name', example='白样本', position='Query'),
  dataType?: string(name='dataType', description='Data type', example='mobile', position='Query'),
  dataValue?: string(name='dataValue', description='Content of the list entered in the text box', example='1770000000,1770000001', position='Query'),
  description?: string(name='description', description='Description information.', example='描述', position='Query'),
  ossFileName?: string(name='ossFileName', description='Uploaded OSS address.', example='sample/94b4193d321c44b44ee92b19984000a0/样本测试01/0d8dbc6809834d51b1d88a42295c803e/1753865835166.csv', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  sampleBatchType?: string(name='sampleBatchType', description='Specific type of sample list', example='白名单', position='Query'),
  serviceList?: string(name='serviceList', description='Service list', example='account_takeover', position='Query'),
}

model CreateSampleBatchResponseBody = {
  requestId?: string(name='RequestId', description='ID of the request', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
}

model CreateSampleBatchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSampleBatchResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateSampleBatch  CreateSampleBatchRequest
  * @return CreateSampleBatchResponse
 */
async function createSampleBatch(request: CreateSampleBatchRequest): CreateSampleBatchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSampleBatch', 'POST', '/', 'json', false, 'json', request);
}

model CreateSampleDataRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  description?: string(name='description', description='Description.', example='描述', position='Query'),
  encryptType?: string(name='encryptType', description='Encryption type', example='LABEL', position='Query'),
  name?: string(name='name', description='Name', example='注册样本', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  riskValue?: string(name='riskValue', description='Specified risk value', example='black', position='Query'),
  scene?: string(name='scene', description='Scene', example='PHONE', position='Query'),
  storePath?: string(name='storePath', description='Storage path', example='saf/de/sample/3dc2spspHKq4G3YI9d08', position='Query'),
  storeType?: string(name='storeType', description='Storage type', example='OSS', position='Query'),
}

model CreateSampleDataResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model CreateSampleDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSampleDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateSampleData  CreateSampleDataRequest
  * @return CreateSampleDataResponse
 */
async function createSampleData(request: CreateSampleDataRequest): CreateSampleDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSampleData', 'POST', '/', 'json', false, 'json', request);
}

model CreateSimulationTaskRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  dataSourceConfig?: string(name='dataSourceConfig', description='Data source configuration', example='{}', position='Query'),
  dataSourceType?: string(name='dataSourceType', description='Data source type', example='SLS', position='Query'),
  endTime: long(name='endTime', description='End time, accurate to milliseconds (ms).

This parameter is required.', example='1735541040000', position='Query'),
  eventCode: string(name='eventCode', description='Event code

This parameter is required.', example='de_anbwns2231', position='Query'),
  filtersStr?: string(name='filtersStr', description='Filters', example='{"left":"score","operate":"bw","right":"222,333"}', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  rulesStr: string(name='rulesStr', description='Rules list

This parameter is required.', example='[\\"100234\\"]', position='Query'),
  runTask: boolean(name='runTask', description='Whether to run the task directly

This parameter is required.', example='false', position='Query'),
  startTime: long(name='startTime', description='Start time, accurate to milliseconds (ms).

This parameter is required.', example='1730448000000', position='Query'),
  taskName: string(name='taskName', description='Task name

This parameter is required.', example='仿真任务', position='Query'),
}

model CreateSimulationTaskResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model CreateSimulationTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSimulationTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateSimulationTask  CreateSimulationTaskRequest
  * @return CreateSimulationTaskResponse
 */
async function createSimulationTask(request: CreateSimulationTaskRequest): CreateSimulationTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSimulationTask', 'POST', '/', 'json', false, 'json', request);
}

model DeepCopyRuleRequest {
  createType?: string(name='CreateType', description='Creation type', example='NORMAL', position='Query'),
  custInsertInfo?: string(name='CustInsertInfo', description='Newly added cumulative variable', example='[{"id":"1288","title":"新标题"}]', position='Query'),
  custWriteInfo?: string(name='CustWriteInfo', description='Read cumulative variable', example='[1234，2345]', position='Query'),
  expressionVariableInfo?: string(name='ExpressionVariableInfo', description='Custom variables to be added', example='[{"id":"ex_2wxZPcxg3a03","title":"新标题"}]', position='Query'),
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  queryExpressionVariableInfo?: string(name='QueryExpressionVariableInfo', description='Custom query variables to be added', example='[{"id":"ex_2wxZPcxg3a03","title":"新标题"}]', position='Query'),
  regId?: string(name='RegId', description='Region code', example='cn-hangzhou', position='Query'),
  sourceRuleId?: string(name='SourceRuleId', description='Source policy ID', example='102125', position='Query'),
  sourceRuleIds?: string(name='SourceRuleIds', description='Target policy ID', example='102125,102129', position='Query'),
  targetEventCode?: string(name='TargetEventCode', description='Target event', example='de_ajtshf1581', position='Query'),
  targetEventName?: string(name='TargetEventName', description='Target event name', example='目标事件名称', position='Query'),
}

model DeepCopyRuleResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    batchCopyFlag?: boolean(name='BatchCopyFlag', description='Whether to redirect to details', example='true'),
    consoleRuleId?: long(name='ConsoleRuleId', description='Primary key of the policy', example='2346'),
    ruleId?: string(name='RuleId', description='Policy ID', example='104556'),
    ruleVersionId?: long(name='RuleVersionId', description='Primary key of the policy version', example='1135'),
  }(name='ResultObject', description='Returned result information'),
}

model DeepCopyRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeepCopyRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeepCopyRule  DeepCopyRuleRequest
  * @return DeepCopyRuleResponse
 */
async function deepCopyRule(request: DeepCopyRuleRequest): DeepCopyRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeepCopyRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAnalysisConditionFavoriteRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  id: long(name='id', description='Primary key ID

This parameter is required.', example='30', position='Query'),
  regId: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DeleteAnalysisConditionFavoriteResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Returned object', example='true'),
}

model DeleteAnalysisConditionFavoriteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAnalysisConditionFavoriteResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteAnalysisConditionFavorite  DeleteAnalysisConditionFavoriteRequest
  * @return DeleteAnalysisConditionFavoriteResponse
 */
async function deleteAnalysisConditionFavorite(request: DeleteAnalysisConditionFavoriteRequest): DeleteAnalysisConditionFavoriteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAnalysisConditionFavorite', 'POST', '/', 'json', false, 'json', request);
}

model DeleteByPassShuntEventRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  eventId?: long(name='eventId', description='Event ID.', example='25', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DeleteByPassShuntEventResponseBody = {
  code?: string(name='code', description='Status code', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error message.', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
  success?: boolean(name='success', description='Whether it was successful.', example='true'),
}

model DeleteByPassShuntEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteByPassShuntEventResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteByPassShuntEvent  DeleteByPassShuntEventRequest
  * @return DeleteByPassShuntEventResponse
 */
async function deleteByPassShuntEvent(request: DeleteByPassShuntEventRequest): DeleteByPassShuntEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteByPassShuntEvent', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCustVariableRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  createType?: string(name='createType', description='Creation type', example='NORMAL', position='Query'),
  dataVersion?: long(name='dataVersion', description='Data version.', example='1', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  variableId?: string(name='variableId', description='Variable ID', example='235', position='Query'),
}

model DeleteCustVariableResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DeleteCustVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCustVariableResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteCustVariable  DeleteCustVariableRequest
  * @return DeleteCustVariableResponse
 */
async function deleteCustVariable(request: DeleteCustVariableRequest): DeleteCustVariableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCustVariable', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDataSourceRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  id: long(name='id', description='Primary key ID

This parameter is required.', example='30', position='Query'),
  regId: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DeleteDataSourceResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DeleteDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDataSourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDataSource  DeleteDataSourceRequest
  * @return DeleteDataSourceResponse
 */
async function deleteDataSource(request: DeleteDataSourceRequest): DeleteDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDataSource', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEventFieldRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  eventCode?: string(name='eventCode', description='Event code', example='de_awukck7117', position='Query'),
  fieldName?: string(name='fieldName', description='Field name', example='age', position='Query'),
  regId?: string(name='regId', description='Region ID', example='cn-hangzhou', position='Query'),
}

model DeleteEventFieldResponseBody = {
  requestId?: string(name='RequestId', description='ID of the request', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resuleObject?: boolean(name='resuleObject', description='Result object', example='true'),
}

model DeleteEventFieldResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEventFieldResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteEventField  DeleteEventFieldRequest
  * @return DeleteEventFieldResponse
 */
async function deleteEventField(request: DeleteEventFieldRequest): DeleteEventFieldResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEventField', 'POST', '/', 'json', false, 'json', request);
}

model DeleteExpressionVariableRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  dataVersion: long(name='dataVersion', description='Data version.

This parameter is required.', example='1', position='Query'),
  id: long(name='id', description='Variable ID

This parameter is required.', example='2556', position='Query'),
  regId: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DeleteExpressionVariableResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DeleteExpressionVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteExpressionVariableResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteExpressionVariable  DeleteExpressionVariableRequest
  * @return DeleteExpressionVariableResponse
 */
async function deleteExpressionVariable(request: DeleteExpressionVariableRequest): DeleteExpressionVariableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteExpressionVariable', 'POST', '/', 'json', false, 'json', request);
}

model DeleteFieldRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  id?: long(name='id', description='Primary key ID of the field', example='2556', position='Query'),
  name?: string(name='name', description='Name of the field.', example='age', position='Query'),
  regId: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DeleteFieldResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Returned object', example='true'),
}

model DeleteFieldResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFieldResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteField  DeleteFieldRequest
  * @return DeleteFieldResponse
 */
async function deleteField(request: DeleteFieldRequest): DeleteFieldResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteField', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNameListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  ids?: string(name='ids', description='Name list ID, multiple IDs should be separated by commas', example='23,24,25', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DeleteNameListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DeleteNameListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNameListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteNameList  DeleteNameListRequest
  * @return DeleteNameListResponse
 */
async function deleteNameList(request: DeleteNameListRequest): DeleteNameListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNameList', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNameListDataRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  variableId?: string(name='variableId', description='Variable ID', example='239', position='Query'),
}

model DeleteNameListDataResponseBody = {
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DeleteNameListDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNameListDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteNameListData  DeleteNameListDataRequest
  * @return DeleteNameListDataResponse
 */
async function deleteNameListData(request: DeleteNameListDataRequest): DeleteNameListDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNameListData', 'POST', '/', 'json', false, 'json', request);
}

model DeleteQueryVariableRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  id: long(name='id', description='Variable ID.

This parameter is required.', example='3144', position='Query'),
  regId: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DeleteQueryVariableResponseBody = {
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DeleteQueryVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteQueryVariableResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteQueryVariable  DeleteQueryVariableRequest
  * @return DeleteQueryVariableResponse
 */
async function deleteQueryVariable(request: DeleteQueryVariableRequest): DeleteQueryVariableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteQueryVariable', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRuleRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  consoleRuleId?: long(name='consoleRuleId', description='Policy primary key ID', example='7035', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  ruleId?: string(name='ruleId', description='Policy ID', example='102059', position='Query'),
  ruleVersionId?: long(name='ruleVersionId', description='Policy version primary key ID', example='10203', position='Query'),
}

model DeleteRuleResponseBody = {
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DeleteRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteRule  DeleteRuleRequest
  * @return DeleteRuleResponse
 */
async function deleteRule(request: DeleteRuleRequest): DeleteRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSampleBatchRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  ids?: string(name='ids', description='IDs for batch deletion operations.', example='324,343', position='Query'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou', position='Query'),
  versions: string(name='versions', description='List of versions.

This parameter is required.', example='1,1', position='Query'),
}

model DeleteSampleBatchResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  data?: boolean(name='data', description='Returned data object.', example='true'),
}

model DeleteSampleBatchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSampleBatchResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteSampleBatch  DeleteSampleBatchRequest
  * @return DeleteSampleBatchResponse
 */
async function deleteSampleBatch(request: DeleteSampleBatchRequest): DeleteSampleBatchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSampleBatch', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSampleBatchMetaRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  batchUuid?: string(name='batchUuid', description='UUID.', example='jigaklba83ka', position='Query'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou', position='Query'),
}

model DeleteSampleBatchMetaResponseBody = {
  requestId?: string(name='RequestId', description='ID of the request', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
}

model DeleteSampleBatchMetaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSampleBatchMetaResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteSampleBatchMeta  DeleteSampleBatchMetaRequest
  * @return DeleteSampleBatchMetaResponse
 */
async function deleteSampleBatchMeta(request: DeleteSampleBatchMetaRequest): DeleteSampleBatchMetaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSampleBatchMeta', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSampleDataRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  id?: string(name='id', description='Primary key ID', example='3144', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DeleteSampleDataResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DeleteSampleDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSampleDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteSampleData  DeleteSampleDataRequest
  * @return DeleteSampleDataResponse
 */
async function deleteSampleData(request: DeleteSampleDataRequest): DeleteSampleDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSampleData', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSelfBindVariableRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  id?: long(name='id', description='Variable ID', example='3144', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DeleteSelfBindVariableResponseBody = {
  requestId?: string(name='RequestId', description='ID of the request', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Returned object', example='true'),
}

model DeleteSelfBindVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSelfBindVariableResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteSelfBindVariable  DeleteSelfBindVariableRequest
  * @return DeleteSelfBindVariableResponse
 */
async function deleteSelfBindVariable(request: DeleteSelfBindVariableRequest): DeleteSelfBindVariableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSelfBindVariable', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAdvanceSearchLeftVariableListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  eventCodes: string(name='eventCodes', description='Event code.

This parameter is required.', example='de_ahqhsw7665,de_agbzfi5134', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  scene: string(name='scene', description='Scene

This parameter is required.', example='VELOCITY', position='Query'),
}

model DescribeAdvanceSearchLeftVariableListResponseBody = {
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: [ 
    {
      code?: string(name='code', description='Variable code', example='age'),
      description?: string(name='description', description='Description.', example='年龄描述'),
      displayType?: string(name='displayType', description='Display type and grouping label', example='NATIVE'),
      fieldRank?: long(name='fieldRank', description='Variable return value type', example='STRING'),
      fieldType?: string(name='fieldType', description='Field table sorting', example='1'),
      id?: long(name='id', description='Primary key ID', example='2453'),
      name?: string(name='name', description='Variable name', example='age'),
      parentName?: string(name='parentName', description='Parent node', example='name'),
      sourceType?: string(name='sourceType', description='Data source', example='SAF'),
      title?: string(name='title', description='Title.', example='年龄'),
      type?: string(name='type', description='Variable type', example='NATIVE'),
    }
  ](name='resultObject', description='Return object'),
}

model DescribeAdvanceSearchLeftVariableListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAdvanceSearchLeftVariableListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAdvanceSearchLeftVariableList  DescribeAdvanceSearchLeftVariableListRequest
  * @return DescribeAdvanceSearchLeftVariableListResponse
 */
async function describeAdvanceSearchLeftVariableList(request: DescribeAdvanceSearchLeftVariableListRequest): DescribeAdvanceSearchLeftVariableListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAdvanceSearchLeftVariableList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAdvanceSearchPageListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  condition?: string(name='condition', description='Condition value.', example='{
    "relationship": "and",
    "list": [
        {
            "deepCount": 1,
            "left": {
                "hasRightVariable": true,
                "fieldType": "STRING",
                "functionName": "",
                "leftVariableType": "NATIVE",
                "name": "accountId",
                "operatorCode": "equals"
            },
            "right": {
                "rightVariableType": "constant",
                "name": "10000",
                "functionName": ""
            },
            "operatorCode": "equals"
        }
    ]
}', position='Query'),
  currentPage: long(name='currentPage', description='Current page number.

This parameter is required.', example='1', position='Query'),
  eventBeginTime: long(name='eventBeginTime', description='Query start time, accurate to milliseconds (ms).

This parameter is required.', example='1753372800000', position='Query'),
  eventCodes: string(name='eventCodes', description='Event code.

This parameter is required.', example='["de_ahqhsw7665"]', position='Query'),
  eventEndTime: long(name='eventEndTime', description='End time, accurate to milliseconds (ms).

This parameter is required.', example='1753459199059', position='Query'),
  fieldName?: string(name='fieldName', description='Field name', example='age', position='Query'),
  fieldValue?: string(name='fieldValue', description='Field value', example='20', position='Query'),
  pageSize: long(name='pageSize', description='Page size, default value is 10

This parameter is required.', example='10', position='Query'),
  regId: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DescribeAdvanceSearchPageListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    currentPage?: long(name='currentPage', description='Current page number.', example='1'),
    data?: [  map[string]any ](name='data', description='Returned data object'),
    header?: [ 
      {
        fieldName?: string(name='fieldName', description='Field name', example='age'),
        fieldTitle?: string(name='fieldTitle', description='Field title.', example='年龄'),
        isDefault?: boolean(name='isDefault', description='Whether it is a default display field (displayed in the response, not used as a parameter)
- true: Yes
- false: No', example='true'),
      }
    ](name='header', description='Table header'),
    pageSize?: long(name='pageSize', description='Number of items per page. Default value: 20, minimum value: 1, maximum value: 50.', example='10'),
    totalItem?: long(name='totalItem', description='Total number of items', example='37'),
    totalPage?: long(name='totalPage', description='Total number of pages', example='4'),
  }(name='resultObject', description='Return object'),
}

model DescribeAdvanceSearchPageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAdvanceSearchPageListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAdvanceSearchPageList  DescribeAdvanceSearchPageListRequest
  * @return DescribeAdvanceSearchPageListResponse
 */
async function describeAdvanceSearchPageList(request: DescribeAdvanceSearchPageListRequest): DescribeAdvanceSearchPageListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAdvanceSearchPageList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAllDataSourceRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DescribeAllDataSourceResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: [ 
    {
      eventCode?: string(name='eventCode', description='Event code', example='de_aszbjb7236'),
      eventName?: string(name='eventName', description='Event name.', example='注册风险'),
      id?: long(name='id', description='Policy primary key ID', example='497'),
    }
  ](name='resultObject', description='Return object'),
}

model DescribeAllDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAllDataSourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAllDataSource  DescribeAllDataSourceRequest
  * @return DescribeAllDataSourceResponse
 */
async function describeAllDataSource(request: DescribeAllDataSourceRequest): DescribeAllDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAllDataSource', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAllEventNameAndCodeRequest {
  lang?: string(name='Lang', description='Sets the language type for the request and response messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  createType?: string(name='createType', description='Creation type', example='NORMAL', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeAllEventNameAndCodeResponseBody = {
  code?: string(name='code', description='Status code.', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error message.', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: [ 
    {
      children?: [ 
        {
          createType?: string(name='createType', description='Creation type', example='NORMAL'),
          eventCode?: string(name='eventCode', description='Event code', example='de_aamexg3015'),
          eventName?: string(name='eventName', description='Event name.', example='注册风险旁路'),
          eventType?: string(name='eventType', description='Event type', example='BYPASS'),
        }
      ](name='children', description='List of child fields.'),
      createType?: string(name='createType', description='Creation type', example='MORMAL'),
      eventCode?: string(name='eventCode', description='Event code', example='de_aszbjb7236'),
      eventName?: string(name='eventName', description='Event name.', example='注册风险'),
      eventType?: string(name='eventType', description='Event type', example='MAIN'),
    }
  ](name='resultObject', description='Returned object'),
  success?: boolean(name='success', description='Whether the operation was successful.', example='true'),
}

model DescribeAllEventNameAndCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAllEventNameAndCodeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAllEventNameAndCode  DescribeAllEventNameAndCodeRequest
  * @return DescribeAllEventNameAndCodeResponse
 */
async function describeAllEventNameAndCode(request: DescribeAllEventNameAndCodeRequest): DescribeAllEventNameAndCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAllEventNameAndCode', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAllRootVariableRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  sourceIp?: string(name='SourceIp', description='Request source IP. No need to fill in, the system will automatically obtain it.', example='61.169.104.202', position='Query'),
  deviceVariableIds?: string(name='deviceVariableIds', description='Device variable list', example='[180]', position='Query'),
  eventCode?: string(name='eventCode', description='Event code', example='de_arqbuy7206', position='Query'),
  expressionVariableIds?: string(name='expressionVariableIds', description='Custom variable list', example='[6780]', position='Query'),
  id?: long(name='id', description='Variable ID.', example='2557', position='Query'),
  nativeVariableIds?: string(name='nativeVariableIds', description='Event field list', example='[106780]', position='Query'),
  queryVariableIds?: string(name='queryVariableIds', description='Custom query variable', example='[2678]', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  velocityVariableIds?: string(name='velocityVariableIds', description='Custom cumulative variable', example='[780]', position='Query'),
}

model DescribeAllRootVariableResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: [ 
    {
      code?: string(name='code', description='Variable code', example='age'),
      description?: string(name='description', description='Variable description.', example='年龄'),
      displayType?: string(name='displayType', description='Display type and group label', example='NATIVE'),
      favoriteFlag?: boolean(name='favoriteFlag', description='Favorite flag', example='true'),
      fieldRank?: long(name='fieldRank', description='Field ranking', example='1'),
      fieldType?: string(name='fieldType', description='Field type.', example='STRING'),
      id?: long(name='id', description='Variable ID.', example='497'),
      inputFieldType?: string(name='inputFieldType', description='Input field type.', example='STRING'),
      inputs?: string(name='inputs', description='Variable input.', example='age'),
      name?: string(name='name', description='Variable name.', example='age'),
      outputThreshold?: {
        maxValue?: double(name='maxValue', description='Maximum value', example='1000'),
        minValue?: double(name='minValue', description='Minimum value.', example='10'),
      }(name='outputThreshold', description='Maximum cross-sectional area of the checkbox.'),
      sourceType?: string(name='sourceType', description='Data source', example='SAF'),
      title?: string(name='title', description='Title.', example='年龄'),
      type?: string(name='type', description='Variable type.', example='NATIVE'),
    }
  ](name='resultObject', description='Return object'),
}

model DescribeAllRootVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAllRootVariableResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAllRootVariable  DescribeAllRootVariableRequest
  * @return DescribeAllRootVariableResponse
 */
async function describeAllRootVariable(request: DescribeAllRootVariableRequest): DescribeAllRootVariableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAllRootVariable', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAnalysisColumnFieldListRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DescribeAnalysisColumnFieldListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Returned object', example='true'),
}

model DescribeAnalysisColumnFieldListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAnalysisColumnFieldListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAnalysisColumnFieldList  DescribeAnalysisColumnFieldListRequest
  * @return DescribeAnalysisColumnFieldListResponse
 */
async function describeAnalysisColumnFieldList(request: DescribeAnalysisColumnFieldListRequest): DescribeAnalysisColumnFieldListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAnalysisColumnFieldList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAnalysisColumnListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DescribeAnalysisColumnListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: [ 
    {
      eventCode?: string(name='eventCode', description='Event code', example='de_aszbjb7236'),
      eventName?: string(name='eventName', description='Event name.', example='注册风险'),
      isDefault?: boolean(name='isDefault', description='Whether it is a default column.', example='true'),
      variableName?: string(name='variableName', description='Variable name.', example='age'),
      variableTitle?: string(name='variableTitle', description='Variable title.', example='年龄'),
      variableType?: string(name='variableType', description='Variable type.', example='NATIVE'),
    }
  ](name='resultObject', description='Returned object'),
}

model DescribeAnalysisColumnListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAnalysisColumnListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAnalysisColumnList  DescribeAnalysisColumnListRequest
  * @return DescribeAnalysisColumnListResponse
 */
async function describeAnalysisColumnList(request: DescribeAnalysisColumnListRequest): DescribeAnalysisColumnListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAnalysisColumnList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAnalysisConditionFavoriteListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DescribeAnalysisConditionFavoriteListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: [ 
    {
      condition?: string(name='condition', description='Condition value.', example='{"currentId":1,"deepCount":0,"list":[{"currentId":2,"deepCount":1,"left":{"code":"accountId","fieldType":"STRING","functionName":"","hasRightVariable":false,"name":"accountId"},"operatorCode":"isNotEmptyWrapper","parentId":1,"right":{"code":"\\"A\\nB\\nC\\"","functionName":"","name":"","rightVariableType":"constant"}}],"parentId":0,"relationship":"and"}'),
      eventBeginTime?: long(name='eventBeginTime', description='Event start timestamp.', example='1752076800000'),
      eventCodes?: string(name='eventCodes', description='Event codes.', example='de_ahespg8137'),
      eventEndTime?: long(name='eventEndTime', description='Event end time.', example='1753891199000'),
      fieldName?: string(name='fieldName', description='Field name.', example='age'),
      fieldValue?: string(name='fieldValue', description='Field value.', example='20'),
      id?: long(name='id', description='Primary key ID', example='497'),
      name?: string(name='name', description='Condition name', example='查询条件1'),
      type?: string(name='type', description='Type, BASIC: Basic query, ADVANCE: Advanced query, BATCH: Batch query', example='BASIC'),
    }
  ](name='resultObject', description='Returned object'),
}

model DescribeAnalysisConditionFavoriteListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAnalysisConditionFavoriteListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAnalysisConditionFavoriteList  DescribeAnalysisConditionFavoriteListRequest
  * @return DescribeAnalysisConditionFavoriteListResponse
 */
async function describeAnalysisConditionFavoriteList(request: DescribeAnalysisConditionFavoriteListRequest): DescribeAnalysisConditionFavoriteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAnalysisConditionFavoriteList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAnalysisExportTaskDownloadUrlRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DescribeAnalysisExportTaskDownloadUrlResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    downloadFileUrl?: string(name='downloadFileUrl', description='Download URL.', example='https://xxxxx-oss-xxxxx.xxxxxx.aliyuncs.com/xx/xx/xxx/xxxxxx.csv?Expires=1753433384&OSSAccessKeyId=xxxxxxxxx&Signature=%2F%xxxxxxxxxxxx%3D'),
    executeTime?: long(name='executeTime', description='Download execution time', example='1753891199000'),
    status?: string(name='status', description='Task status.', example='SUCCESS'),
  }(name='resultObject', description='Returned object'),
}

model DescribeAnalysisExportTaskDownloadUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAnalysisExportTaskDownloadUrlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAnalysisExportTaskDownloadUrl  DescribeAnalysisExportTaskDownloadUrlRequest
  * @return DescribeAnalysisExportTaskDownloadUrlResponse
 */
async function describeAnalysisExportTaskDownloadUrl(request: DescribeAnalysisExportTaskDownloadUrlRequest): DescribeAnalysisExportTaskDownloadUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAnalysisExportTaskDownloadUrl', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  apiId: string(name='apiId', description='API unique ID.

This parameter is required.', example='33', position='Query'),
  apiRegionId: string(name='apiRegionId', description='Region ID.

This parameter is required.', example='cn-hangzhou、cn-shanghai', position='Query'),
  apiType: string(name='apiType', description='API type

This parameter is required.', example='SELF', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeApiResponseBody = {
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DescribeApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApiResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeApi  DescribeApiRequest
  * @return DescribeApiResponse
 */
async function describeApi(request: DescribeApiRequest): DescribeApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApi', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiGroupsRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  apiRegionId: string(name='apiRegionId', description='Region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeApiGroupsResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DescribeApiGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApiGroupsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeApiGroups  DescribeApiGroupsRequest
  * @return DescribeApiGroupsResponse
 */
async function describeApiGroups(request: DescribeApiGroupsRequest): DescribeApiGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiGroups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiLimitRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeApiLimitResponseBody = {
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: {
    limit?: boolean(name='limit', description='Whether the maximum number has been exceeded', example='true'),
    maxTotalItem?: long(name='maxTotalItem', description='Maximum number of items that can be created', example='150'),
    totalItem?: long(name='totalItem', description='Total number of items', example='31'),
  }(name='resultObject', description='Returned object'),
}

model DescribeApiLimitResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApiLimitResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeApiLimit  DescribeApiLimitRequest
  * @return DescribeApiLimitResponse
 */
async function describeApiLimit(request: DescribeApiLimitRequest): DescribeApiLimitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiLimit', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiNameListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and responses, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeApiNameListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: [ 
    {
      apiId?: string(name='apiId', description='API ID.', example='33'),
      apiName?: string(name='apiName', description='API name.', example='ListAuditLog'),
    }
  ](name='resultObject', description='Return object'),
}

model DescribeApiNameListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApiNameListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeApiNameList  DescribeApiNameListRequest
  * @return DescribeApiNameListResponse
 */
async function describeApiNameList(request: DescribeApiNameListRequest): DescribeApiNameListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiNameList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiVariableRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  id: string(name='id', description='Variable ID

This parameter is required.', example='3144', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeApiVariableResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DescribeApiVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApiVariableResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeApiVariable  DescribeApiVariableRequest
  * @return DescribeApiVariableResponse
 */
async function describeApiVariable(request: DescribeApiVariableRequest): DescribeApiVariableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiVariable', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApisRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  apiGroupId: string(name='apiGroupId', description='API group ID.

This parameter is required.', example='3309b0f4b1e243cd8bd9dd029f9c5f0a', position='Query'),
  apiRegionId: string(name='apiRegionId', description='Region ID.

This parameter is required.', example='cn-hangzhou、cn-shanghai', position='Query'),
  apiType: string(name='apiType', description='API type.

This parameter is required.', example='SELF', position='Query'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou', position='Query'),
}

model DescribeApisResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object.', example='true'),
}

model DescribeApisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApisResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeApis  DescribeApisRequest
  * @return DescribeApisResponse
 */
async function describeApis(request: DescribeApisRequest): DescribeApisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApis', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAppKeyPageRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  currentPage?: string(name='currentPage', description='Current page number.', example='1', position='Query'),
  pageSize?: string(name='pageSize', description='Number of items per page, default value is 10.', example='10', position='Query'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou', position='Query'),
}

model DescribeAppKeyPageResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='E01E1B4A-6747-5329-9046-B6D6B2D91349'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Number of items per page, default value is 10.', example='10'),
  resultObject?: [ 
    {
      androidSdkUrl?: string(name='androidSdkUrl', description='Android SDK download URL.', example='https://xxxxx-oss-xxxxx.xxxxxx.aliyuncs.com/xx/xx/xxx/xxxxxx.csv?Expires=1753433384&OSSAccessKeyId=xxxxxxxxx&Signature=%2F%xxxxxxxxxxxx%3D'),
      androidSdkVersion?: string(name='androidSdkVersion', description='Android SDK version number.', example='1'),
      appKey?: string(name='appKey', description='Application appkey.', example='sh9a71f07fhs556bd767586307e82795'),
      gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1621578648000'),
      iosSdkUrl?: string(name='iosSdkUrl', description='iOS SDK download URL.', example='https://xxxxx-oss-xxxxx.xxxxxx.aliyuncs.com/xx/xx/xxx/xxxxxx.csv?Expires=1753433384&OSSAccessKeyId=xxxxxxxxx&Signature=%2F%xxxxxxxxxxxx%3D'),
      iosSdkVersion?: string(name='iosSdkVersion', description='iOS SDK version number.', example='1'),
      memo?: string(name='memo', description='Memo.', example='备注'),
      sdkItems?: string(name='sdkItems', description='Deprecated.', example='已作废'),
      used?: string(name='used', description='Whether this appKey is integrated.', example='false'),
    }
  ](name='resultObject', description='Returned object.'),
  totalItem?: int32(name='totalItem', description='Total number of items.', example='3'),
  totalPage?: int32(name='totalPage', description='Total number of pages.', example='1'),
}

model DescribeAppKeyPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAppKeyPageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAppKeyPage  DescribeAppKeyPageRequest
  * @return DescribeAppKeyPageResponse
 */
async function describeAppKeyPage(request: DescribeAppKeyPageRequest): DescribeAppKeyPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAppKeyPage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAuditConfigRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  auditRelationType?: string(name='auditRelationType', description='Audit type', example='RULE', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeAuditConfigResponseBody = {
  code?: string(name='code', description='Status code.', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error message', example='The input parameter data is not valid. order_storage_company_num component not found'),
  resultObject?: boolean(name='resultObject', description='Returned object', example='true'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model DescribeAuditConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAuditConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAuditConfig  DescribeAuditConfigRequest
  * @return DescribeAuditConfigResponse
 */
async function describeAuditConfig(request: DescribeAuditConfigRequest): DescribeAuditConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAuditConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAuditDetailsRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  id: long(name='id', description='Primary key ID

This parameter is required.', example='2557', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeAuditDetailsResponseBody = {
  code?: string(name='code', description='Status code.', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error message.', example='The input parameter data is not valid. order_storage_company_num component not found'),
  resultObject?: boolean(name='resultObject', description='Returned object', example='true'),
  success?: boolean(name='success', description='Whether the call was successful', example='true'),
}

model DescribeAuditDetailsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAuditDetailsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAuditDetails  DescribeAuditDetailsRequest
  * @return DescribeAuditDetailsResponse
 */
async function describeAuditDetails(request: DescribeAuditDetailsRequest): DescribeAuditDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAuditDetails', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAuditPageListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  auditStatus?: string(name='auditStatus', description='Audit status', example='SUCCESS', position='Query'),
  currentPage?: string(name='currentPage', description='Current page number.', example='1', position='Query'),
  eventCode?: string(name='eventCode', description='Event code', example='de_awukck7117', position='Query'),
  pageSize?: string(name='pageSize', description='Page size, default value is 10', example='10', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  ruleName?: string(name='ruleName', description='Policy name', example='手机号MD5命中人脸测试名单', position='Query'),
}

model DescribeAuditPageListResponseBody = {
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Number of records per page, default value: 10.', example='10'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
  totalItem?: int32(name='totalItem', description='Total items', example='6'),
  totalPage?: long(name='totalPage', description='Total pages', example='4'),
}

model DescribeAuditPageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAuditPageListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAuditPageList  DescribeAuditPageListRequest
  * @return DescribeAuditPageListResponse
 */
async function describeAuditPageList(request: DescribeAuditPageListRequest): DescribeAuditPageListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAuditPageList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAuthEventNameListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeAuthEventNameListResponseBody = {
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DescribeAuthEventNameListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAuthEventNameListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAuthEventNameList  DescribeAuthEventNameListRequest
  * @return DescribeAuthEventNameListResponse
 */
async function describeAuthEventNameList(request: DescribeAuthEventNameListRequest): DescribeAuthEventNameListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAuthEventNameList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAuthRulePageListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  eventCode?: string(name='eventCode', description='Event code', example='de_arcehq4370', position='Query'),
  regId: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou', position='Query'),
  ruleName?: string(name='ruleName', description='Policy name', example='分析中心事件测试_策略01', position='Query'),
  status?: string(name='status', description='Status.', example='RUNNING', position='Query'),
}

model DescribeAuthRulePageListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: long(name='currentPage', description='Current page number.', example='1'),
  pageSize?: long(name='pageSize', description='Page size, default value is 10', example='10'),
  resultObject?: [ 
    {
      consoleRuleId?: long(name='consoleRuleId', description='Console rule ID.', example='6715'),
      createType?: string(name='createType', description='Creation type', example='MORMAL'),
      gmtModified?: long(name='gmtModified', description='Modification time', example='1565701886000'),
      id?: long(name='id', description='Policy primary key ID', example='497'),
      memo?: string(name='memo', description='Memo', example='分析中心事件测试_策略01'),
      ruleId?: string(name='ruleId', description='Policy ID', example='102059'),
      ruleName?: string(name='ruleName', description='Policy name', example='营销风险识别'),
      ruleVersionId?: long(name='ruleVersionId', description='Policy version primary key ID', example='3823'),
      status?: string(name='status', description='Status.', example='RUNNING'),
      version?: long(name='version', description='Version number', example='8'),
    }
  ](name='resultObject', description='Returned object'),
  totalItem?: long(name='totalItem', description='Total items', example='6'),
  totalPage?: long(name='totalPage', description='Total pages', example='9'),
}

model DescribeAuthRulePageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAuthRulePageListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAuthRulePageList  DescribeAuthRulePageListRequest
  * @return DescribeAuthRulePageListResponse
 */
async function describeAuthRulePageList(request: DescribeAuthRulePageListRequest): DescribeAuthRulePageListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAuthRulePageList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAuthSceneListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DescribeAuthSceneListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: [ 
    {
      serviceCode?: string(name='serviceCode', description='Service code', example='account_abuse'),
    }
  ](name='resultObject', description='Returned object'),
}

model DescribeAuthSceneListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAuthSceneListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAuthSceneList  DescribeAuthSceneListRequest
  * @return DescribeAuthSceneListResponse
 */
async function describeAuthSceneList(request: DescribeAuthSceneListRequest): DescribeAuthSceneListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAuthSceneList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAuthScenePageListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou', position='Query'),
  sceneName?: string(name='sceneName', description='Scene name.', example='account_abuse', position='Query'),
}

model DescribeAuthScenePageListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: long(name='currentPage', description='Current page number.', example='1'),
  pageSize?: long(name='pageSize', description='Page size, default value is 10', example='10'),
  resultObject?: [ 
    {
      commonRuleCount?: long(name='commonRuleCount', description='Number of common rules', example='10'),
      customRuleCount?: long(name='customRuleCount', description='Number of custom rules', example='10'),
      eventCode?: string(name='eventCode', description='Event code', example='de_avypfd8253'),
      sceneName?: string(name='sceneName', description='Scene name.', example='注册风险识别服务'),
      serverName?: string(name='serverName', description='Service name.', example='account_abuse'),
    }
  ](name='resultObject', description='Returned object'),
  totalItem?: long(name='totalItem', description='Total number of items', example='6'),
  totalPage?: long(name='totalPage', description='Total number of pages.', example='9'),
}

model DescribeAuthScenePageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAuthScenePageListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAuthScenePageList  DescribeAuthScenePageListRequest
  * @return DescribeAuthScenePageListResponse
 */
async function describeAuthScenePageList(request: DescribeAuthScenePageListRequest): DescribeAuthScenePageListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAuthScenePageList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAuthStatusRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and responses, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeAuthStatusResponseBody = {
  requestId?: string(name='requestId', description='Request ID', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DescribeAuthStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAuthStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAuthStatus  DescribeAuthStatusRequest
  * @return DescribeAuthStatusResponse
 */
async function describeAuthStatus(request: DescribeAuthStatusRequest): DescribeAuthStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAuthStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAvgExecuteCostReportRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeAvgExecuteCostReportResponseBody = {
  code?: string(name='code', description='Status code.', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error message.', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: [ 
    {
      ratio?: string(name='ratio', description='Comparison with yesterday\\"s average execution time', example='0.2'),
      value?: string(name='value', description='Today\\"s average execution time', example='0.1 毫秒'),
    }
  ](name='resultObject', description='Return object'),
  success?: boolean(name='success', description='Whether the call was successful', example='true'),
}

model DescribeAvgExecuteCostReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAvgExecuteCostReportResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAvgExecuteCostReport  DescribeAvgExecuteCostReportRequest
  * @return DescribeAvgExecuteCostReportResponse
 */
async function describeAvgExecuteCostReport(request: DescribeAvgExecuteCostReportRequest): DescribeAvgExecuteCostReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAvgExecuteCostReport', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBasicSearchPageListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  currentPage: long(name='currentPage', description='Current page number.

This parameter is required.', example='1', position='Query'),
  eventBeginTime: long(name='eventBeginTime', description='Query start time, accurate to milliseconds (ms).

This parameter is required.', example='1753372800000', position='Query'),
  eventCodes: string(name='eventCodes', description='Event code.

This parameter is required.', example='["de_ahqhsw7665"]', position='Query'),
  eventEndTime: long(name='eventEndTime', description='End time, accurate to milliseconds (ms).

This parameter is required.', example='1753459199059', position='Query'),
  fieldName?: string(name='fieldName', description='Field name', example='age', position='Query'),
  fieldValue?: string(name='fieldValue', description='Field value', example='20', position='Query'),
  pageSize: long(name='pageSize', description='Page size, with a default value of 10

This parameter is required.', example='10', position='Query'),
  regId: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DescribeBasicSearchPageListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    currentPage?: long(name='currentPage', description='Current page number in pagination queries.', example='1'),
    data?: [  map[string]any ](name='data', description='Returned data object'),
    header?: [ 
      {
        fieldName?: string(name='fieldName', description='Field name', example='age'),
        fieldTitle?: string(name='fieldTitle', description='Field title.', example='年龄'),
        isDefault?: boolean(name='isDefault', description='Whether it is a default display field (displayed in the response, not used as a parameter)
- true: Yes
- false: No', example='true'),
      }
    ](name='header', description='Table header'),
    pageSize?: long(name='pageSize', description='Page size, with a default value of 10', example='10'),
    totalItem?: long(name='totalItem', description='Total number of items', example='6'),
    totalPage?: long(name='totalPage', description='Total number of pages', example='1'),
  }(name='resultObject', description='Return object'),
}

model DescribeBasicSearchPageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeBasicSearchPageListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeBasicSearchPageList  DescribeBasicSearchPageListRequest
  * @return DescribeBasicSearchPageListResponse
 */
async function describeBasicSearchPageList(request: DescribeBasicSearchPageListRequest): DescribeBasicSearchPageListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBasicSearchPageList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBasicStartRequest {
  appKey?: string(name='appKey', description='Application appkey.', example='***', position='Query'),
  endDs?: string(name='endDs', description='End time, accurate to milliseconds (ms).', example='20250320', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  service?: string(name='service', description='Service to call', example='service_tender_cee', position='Query'),
  startDs?: string(name='startDs', description='Start time, accurate to milliseconds (ms).', example='20250310', position='Query'),
}

model DescribeBasicStartResponseBody = {
  code?: string(name='code', description='Status code.', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Return message', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: boolean(name='resultObject', description='Returned object', example='true'),
  success?: boolean(name='success', description='Whether the request was successful.', example='true'),
}

model DescribeBasicStartResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeBasicStartResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeBasicStart  DescribeBasicStartRequest
  * @return DescribeBasicStartResponse
 */
async function describeBasicStart(request: DescribeBasicStartRequest): DescribeBasicStartResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBasicStart', 'POST', '/', 'json', false, 'json', request);
}

model DescribeByPassShuntEventRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  eventId?: long(name='eventId', description='Event ID.', example='25', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeByPassShuntEventResponseBody = {
  code?: string(name='code', description='Error code.', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error details', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: {
    eventName?: string(name='eventName', description='Event name.', example='营销风险识别_增强版'),
  }(name='resultObject', description='Returned object'),
  success?: boolean(name='success', description='Whether it was successful.', example='true'),
}

model DescribeByPassShuntEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeByPassShuntEventResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeByPassShuntEvent  DescribeByPassShuntEventRequest
  * @return DescribeByPassShuntEventResponse
 */
async function describeByPassShuntEvent(request: DescribeByPassShuntEventRequest): DescribeByPassShuntEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeByPassShuntEvent', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCustVariableConfigListRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  bizType: string(name='bizType', description='Configuration type

This parameter is required.', example='TIME_TYPE', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  timeType?: string(name='timeType', description='Time type', example='CURRENT', position='Query'),
}

model DescribeCustVariableConfigListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: [ 
    {
      configKey?: string(name='configKey', description='Configuration key', example='COUNT'),
      configValue?: string(name='configValue', description='Configuration value', example='累计'),
    }
  ](name='resultObject', description='Return object'),
}

model DescribeCustVariableConfigListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCustVariableConfigListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeCustVariableConfigList  DescribeCustVariableConfigListRequest
  * @return DescribeCustVariableConfigListResponse
 */
async function describeCustVariableConfigList(request: DescribeCustVariableConfigListRequest): DescribeCustVariableConfigListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCustVariableConfigList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCustVariableDetailRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  id: long(name='id', description='Primary key ID of the cumulative variable

This parameter is required.', example='2793', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeCustVariableDetailResponseBody = {
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: [ 
    {
      condition?: string(name='condition', description='Condition value.', example='{"currentId":1,"deepCount":0,"list":[{"currentId":2,"deepCount":1,"left":{"code":"accountId","fieldType":"STRING","functionName":"","hasRightVariable":false,"name":"accountId"},"operatorCode":"isNotEmptyWrapper","parentId":1,"right":{"code":"\\"A\\nB\\nC\\"","functionName":"","name":"","rightVariableType":"constant"}}],"parentId":0,"relationship":"and"}'),
      dataVersion?: long(name='dataVersion', description='Data version.', example='1'),
      description?: string(name='description', description='Description information.', example='变量描述'),
      eventCodes?: string(name='eventCodes', description='Event code.', example='de_ahespg8137'),
      historyValueType?: string(name='historyValueType', description='Value type', example='EARLIEST'),
      id?: long(name='id', description='Primary key ID of the cumulative variable', example='2793'),
      object?: string(name='object', description='Cumulative object', example='DEpage'),
      outputs?: string(name='outputs', description='Variable return type', example='DOUBLE'),
      subject?: string(name='subject', description='Main object', example='DEpname'),
      timeType?: string(name='timeType', description='Time slice type', example='NEAR'),
      title?: string(name='title', description='Title.', example='累计变量求平均值'),
      twCount?: string(name='twCount', description='Time count', example='1'),
      velocityFC?: string(name='velocityFC', description='Variable type', example='DISTINCT'),
      velocityTW?: string(name='velocityTW', description='Time slice unit', example='HOUR_1'),
    }
  ](name='resultObject', description='Return object'),
}

model DescribeCustVariableDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCustVariableDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeCustVariableDetail  DescribeCustVariableDetailRequest
  * @return DescribeCustVariableDetailResponse
 */
async function describeCustVariableDetail(request: DescribeCustVariableDetailRequest): DescribeCustVariableDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCustVariableDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCustVariablePageRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  createType?: string(name='createType', description='Creation type.', example='NORMAL', position='Query'),
  currentPage?: int32(name='currentPage', description='Pagination parameter, current page number.', example='1', position='Query'),
  description?: string(name='description', description='Description.', example='累计变量描述', position='Query'),
  eventCode?: string(name='eventCode', description='Event code.', example='de_aheldm3876', position='Query'),
  pageSize?: int32(name='pageSize', description='Number of records per page, default value: 10.', example='10', position='Query'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou', position='Query'),
  status?: string(name='status', description='status.', example='ENABLE', position='Query'),
}

model DescribeCustVariablePageResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10.', example='10'),
  resultObject?: [ 
    {
      dataVersion?: long(name='dataVersion', description='Data version.', example='1'),
      description?: string(name='description', description='Description information.', example='累计变量描述'),
      eventName?: string(name='eventName', description='event name.', example='注册事件'),
      gmtModified?: long(name='gmtModified', description='Modification time.', example='1565701886000'),
      id?: long(name='id', description='Primary key ID of accumulated variable.', example='497'),
      name?: string(name='name', description='Accumulated variable name: generated by backend.', example='xLMfE9K161d'),
      ruleList?: [ string ](name='ruleList', description='Associated Strategies.'),
      status?: string(name='status', description='Status.', example='ENABLE'),
      title?: string(name='title', description='Title.', example='累计变量名称'),
    }
  ](name='resultObject', description='Returned object.'),
  totalItem?: int32(name='totalItem', description='Total number of items.', example='6'),
  totalPage?: int32(name='totalPage', description='Total number of pages.', example='1'),
}

model DescribeCustVariablePageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCustVariablePageResponseBody(name='body'),
}

/**
  * @description List Query of Accumulated Variables
  * @param request  the request parameters of DescribeCustVariablePage  DescribeCustVariablePageRequest
  * @return DescribeCustVariablePageResponse
 */
async function describeCustVariablePage(request: DescribeCustVariablePageRequest): DescribeCustVariablePageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCustVariablePage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDataSourceDataDownloadUrlRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  dataSourceId: long(name='dataSourceId', description='Data source ID.

This parameter is required.', example='69', position='Query'),
  regId: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DescribeDataSourceDataDownloadUrlResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    downloadFileUrl?: string(name='downloadFileUrl', description='Download URL.', example='https:/xxxxx.oss-cn-xxxxxx.aliyuncs.com/xxxx/xxx/xxxxxx/xxx/xxxxxxxxxx?Expires=1753421064&OSSAccessKeyId=xxxxxxx&Signature=xxxxxxx%3D'),
  }(name='resultObject', description='Return object'),
}

model DescribeDataSourceDataDownloadUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDataSourceDataDownloadUrlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDataSourceDataDownloadUrl  DescribeDataSourceDataDownloadUrlRequest
  * @return DescribeDataSourceDataDownloadUrlResponse
 */
async function describeDataSourceDataDownloadUrl(request: DescribeDataSourceDataDownloadUrlRequest): DescribeDataSourceDataDownloadUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDataSourceDataDownloadUrl', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDataSourceFieldsRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  dataSourceCode: string(name='dataSourceCode', description='Data source code

This parameter is required.', example='date_source', position='Query'),
  regId: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DescribeDataSourceFieldsResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DescribeDataSourceFieldsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDataSourceFieldsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDataSourceFields  DescribeDataSourceFieldsRequest
  * @return DescribeDataSourceFieldsResponse
 */
async function describeDataSourceFields(request: DescribeDataSourceFieldsRequest): DescribeDataSourceFieldsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDataSourceFields', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDataSourcePageListRequest {
  lang?: string(name='Lang', description='Set the language type for request and response, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  sourceIp?: string(name='SourceIp', description='Request source IP.', example='220.250.21.83', position='Query'),
  currentPage?: long(name='currentPage', description='Current page number.', example='1', position='Query'),
  name?: string(name='name', description='Variable name', example='data_source', position='Query'),
  pageSize?: long(name='pageSize', description='Page size, default value is 10', example='10', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  type?: string(name='type', description='Type', example='FILE', position='Query'),
}

model DescribeDataSourcePageListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10', example='10'),
  resultObject?: [ 
    {
      creator?: string(name='creator', description='Creator of the data source.', example='xxxx'),
      description?: string(name='description', description='Data source description.', example='描述'),
      gmtCreate?: string(name='gmtCreate', description='Time when the data source was created.', example='1621578648000'),
      gmtModified?: string(name='gmtModified', description='Time when the data source was last modified.', example='1565701886000'),
      id?: long(name='id', description='Data source ID.', example='497'),
      modifier?: string(name='modifier', description='Last modifier.', example='xxxxx'),
      name?: string(name='name', description='Data source name.', example='data_source'),
      total?: long(name='total', description='Total pages.', example='4'),
      type?: string(name='type', description='Data source type.', example='FILE'),
    }
  ](name='resultObject', description='Return object'),
  totalItem?: int32(name='totalItem', description='Total items', example='3'),
  totalPage?: int32(name='totalPage', description='Total pages', example='9'),
}

model DescribeDataSourcePageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDataSourcePageListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDataSourcePageList  DescribeDataSourcePageListRequest
  * @return DescribeDataSourcePageListResponse
 */
async function describeDataSourcePageList(request: DescribeDataSourcePageListRequest): DescribeDataSourcePageListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDataSourcePageList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDecisionResultFluctuationRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  eventCodes?: string(name='eventCodes', description='Event code.', example='de_ahqhsw7665,de_ahqhsw7622', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeDecisionResultFluctuationResponseBody = {
  code?: string(name='code', description='Status code.', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error details', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: [ 
    {
      status?: string(name='status', description='Execution status.', example='PASS'),
      todayNum?: long(name='todayNum', description='Today\\"s count', example='100'),
      withinSevenDayNum?: string(name='withinSevenDayNum', description='Count within the last seven days', example='600'),
      withinThirtyDayNum?: string(name='withinThirtyDayNum', description='Count within the last thirty days', example='1200'),
      withinThreeDayNum?: string(name='withinThreeDayNum', description='Count within the last three days', example='300'),
      yesterdayNum?: long(name='yesterdayNum', description='Yesterday\\"s count', example='200'),
    }
  ](name='resultObject', description='Return object'),
  success?: boolean(name='success', description='Indicates whether the operation was successful.', example='true'),
}

model DescribeDecisionResultFluctuationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDecisionResultFluctuationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDecisionResultFluctuation  DescribeDecisionResultFluctuationRequest
  * @return DescribeDecisionResultFluctuationResponse
 */
async function describeDecisionResultFluctuation(request: DescribeDecisionResultFluctuationRequest): DescribeDecisionResultFluctuationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDecisionResultFluctuation', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDecisionResultTrendRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  beginTime?: long(name='beginTime', description='Start timestamp, in milliseconds.', example='1737101348000', position='Query'),
  endTime?: long(name='endTime', description='End time, accurate to milliseconds (ms).', example='1747101348000', position='Query'),
  eventCodes?: string(name='eventCodes', description='Event code.', example='de_ahqhsw7665,de_agbzfi5134', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeDecisionResultTrendResponseBody = {
  code?: string(name='code', description='Status code', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error details', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: {
    series?: [ 
      {
        data?: [ 
          {
            num?: long(name='num', description='Number', example='10'),
            scale?: string(name='scale', description='ratio', example='5.56%'),
          }
        ](name='data', description='Returned data object'),
        name?: string(name='name', description='Name.', example='IpTag_FFF'),
      }
    ](name='series', description='Chart data'),
    xaxis?: {
      data?: [ string ](name='data', description='X-axis data structure.'),
    }(name='xaxis', description='X-axis data'),
  }(name='resultObject', description='Returned object'),
  success?: boolean(name='success', description='Whether the request was successful.', example='true'),
}

model DescribeDecisionResultTrendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDecisionResultTrendResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDecisionResultTrend  DescribeDecisionResultTrendRequest
  * @return DescribeDecisionResultTrendResponse
 */
async function describeDecisionResultTrend(request: DescribeDecisionResultTrendRequest): DescribeDecisionResultTrendResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDecisionResultTrend', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDetailStartRequest {
  appKey?: string(name='appKey', description='Application appkey.', example='***', position='Query'),
  endDs?: string(name='endDs', description='End time
     
Format yyyymmdd', example='20250320', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  service?: string(name='service', description='Called service', example='service_tender_cee', position='Query'),
  startDs?: string(name='startDs', description='Start time
     
 Format yyyymmdd', example='20250310', position='Query'),
}

model DescribeDetailStartResponseBody = {
  code?: string(name='code', description='Status code.', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error details', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: boolean(name='resultObject', description='Returned object', example='true'),
  success?: boolean(name='success', description='Indicates whether the operation was successful, with true representing success.', example='true'),
}

model DescribeDetailStartResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDetailStartResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDetailStart  DescribeDetailStartRequest
  * @return DescribeDetailStartResponse
 */
async function describeDetailStart(request: DescribeDetailStartRequest): DescribeDetailStartResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDetailStart', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDownloadUrlRequest {
  fileType?: string(name='FileType', description='File type', example='CSV', position='Query'),
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='RegId', description='Region code', example='cn-hangzhou', position='Query'),
  taskId?: long(name='TaskId', description='Task ID.', example='18191', position='Query'),
  type?: string(name='Type', description='Download type', example='FILE', position='Query'),
}

model DescribeDownloadUrlResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: string(name='resultObject', description='Returned object', example='true'),
}

model DescribeDownloadUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDownloadUrlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDownloadUrl  DescribeDownloadUrlRequest
  * @return DescribeDownloadUrlResponse
 */
async function describeDownloadUrl(request: DescribeDownloadUrlRequest): DescribeDownloadUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDownloadUrl', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEventBaseInfoByEventCodeRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  createType?: string(name='createType', description='Creation type', example='NORMAL', position='Query'),
  eventCode?: string(name='eventCode', description='Event code', example='de_arcehq4370', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeEventBaseInfoByEventCodeResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    bizVersion?: int32(name='bizVersion', description='Business version number', example='1'),
    eventCode?: string(name='eventCode', description='Event code', example='de_aszbjb7236'),
    eventName?: string(name='eventName', description='Event name.', example='注册风险'),
    eventStauts?: string(name='eventStauts', description='Event status.', example='ONLINE'),
    inputFields?: [ 
      {
        description?: string(name='description', description='Field description.', example='描述'),
        fieldCode?: string(name='fieldCode', description='Field code', example='age'),
        fieldRank?: string(name='fieldRank', description='Field ranking', example='1'),
        fieldSource?: string(name='fieldSource', description='Field source.', example='DEFAULT'),
        fieldType?: string(name='fieldType', description='Field type.', example='STRING'),
        title?: string(name='title', description='Field name.', example='年龄'),
      }
    ](name='inputFields', description='Field list.'),
    memo?: string(name='memo', description='Memo.', example='备注'),
    ruleDetails?: [ 
      {
        logicExpression?: string(name='logicExpression', description='Policy Execution Logic', example='3&((1&2&4)'),
        memo?: string(name='memo', description='Memo', example='描述'),
        ruleActions?: string(name='ruleActions', description='Rule Actions', example='[{\\"inputs\\":[\\"auto_accselist\\"],\\"name\\":\\"__addDeTags__\\",\\"actionType\\":\\"TAG\\",\\"outputType\\":\\"const\\"}]'),
        ruleAuthType?: string(name='ruleAuthType', description='Policy Type', example='DEFAULT'),
        ruleExpressions?: string(name='ruleExpressions', description='Event Expressions.', example='[{\\"expressionName\\":\\"同一设备同一IP上的注册用户数\\",\\"itemId\\":1,\\"left\\":{\\"name\\":\\"dK7EXHr490f\\"},\\"operatorCode\\":\\"gte\\",\\"operatorName\\":\\"大于等于\\",\\"right\\":{\\"fieldValue\\":\\"2\\"}}]'),
        ruleId?: string(name='ruleId', description='Policy ID', example='101544'),
        ruleName?: string(name='ruleName', description='Policy Name', example='手机号MD5命中人脸测试名单'),
        ruleStatus?: string(name='ruleStatus', description='Policy Status', example='DRAFT'),
      }
    ](name='ruleDetails', description='Policy Information'),
    templateCode?: string(name='templateCode', description='Operation template code', example='register'),
    templateName?: string(name='templateName', description='Template name', example='注册事件模板'),
    templateType?: string(name='templateType', description='Template type.', example='TEMPLATE'),
  }(name='resultObject', description='Return object'),
}

model DescribeEventBaseInfoByEventCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEventBaseInfoByEventCodeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeEventBaseInfoByEventCode  DescribeEventBaseInfoByEventCodeRequest
  * @return DescribeEventBaseInfoByEventCodeResponse
 */
async function describeEventBaseInfoByEventCode(request: DescribeEventBaseInfoByEventCodeRequest): DescribeEventBaseInfoByEventCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEventBaseInfoByEventCode', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEventCountRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  createType?: string(name='createType', description='Creation type', example='NORMAL', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeEventCountResponseBody = {
  code?: string(name='code', description='Status code', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error details', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: {
    limit?: boolean(name='limit', description='Whether it exceeds the maximum number', example='true'),
    maxTotalItem?: int32(name='maxTotalItem', description='Maximum creation count', example='100'),
    totalItem?: int32(name='totalItem', description='Total count', example='101'),
  }(name='resultObject', description='Returned object'),
  success?: boolean(name='success', description='Whether the request was successful.', example='true'),
}

model DescribeEventCountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEventCountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeEventCount  DescribeEventCountRequest
  * @return DescribeEventCountResponse
 */
async function describeEventCount(request: DescribeEventCountRequest): DescribeEventCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEventCount', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEventDetailByRequestIdRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  eventCode?: string(name='eventCode', description='Event code', example='de_azywkh7523', position='Query'),
  eventTime?: long(name='eventTime', description='Event execution time', example='1752571330000', position='Query'),
  regId: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou', position='Query'),
  sRequestId: string(name='sRequestId', description='Request ID.

This parameter is required.', example='BD6B08EC-1B44-5378-8838-C76A36415C55', position='Query'),
}

model DescribeEventDetailByRequestIdResponseBody = {
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DescribeEventDetailByRequestIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEventDetailByRequestIdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeEventDetailByRequestId  DescribeEventDetailByRequestIdRequest
  * @return DescribeEventDetailByRequestIdResponse
 */
async function describeEventDetailByRequestId(request: DescribeEventDetailByRequestIdRequest): DescribeEventDetailByRequestIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEventDetailByRequestId', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEventLogDetailRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  reqIdByLog: string(name='reqIdByLog', description='Log details.

This parameter is required.', example='BD6B08EC-1B44-5378-8838-C76A36415C55', position='Query'),
}

model DescribeEventLogDetailResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DescribeEventLogDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEventLogDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeEventLogDetail  DescribeEventLogDetailRequest
  * @return DescribeEventLogDetailResponse
 */
async function describeEventLogDetail(request: DescribeEventLogDetailRequest): DescribeEventLogDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEventLogDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEventLogPageRequest {
  lang?: string(name='Lang', description='Set the language type for request and response messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  accountIdPRP?: string(name='accountIdPRP', description='Account ID (request_param.accountId), up to 50 characters, supports “*” and “?” wildcards.', example='180650758xxxxxxx', position='Query'),
  beginTime?: long(name='beginTime', description='Start timestamp of the log. Unit: milliseconds.', example='1737101348000', position='Query'),
  condition1AL?: string(name='condition1AL', description='Full-text match 1, cannot exceed 30 characters.', example='rm0102', position='Query'),
  condition2AL?: string(name='condition2AL', description='Full-text match 2, cannot exceed 30 characters.', example='rm0102', position='Query'),
  condition3AL?: string(name='condition3AL', description='Full-text match 3, cannot exceed 30 characters.', example='rm0102', position='Query'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1', position='Query'),
  deviceTypeLRP?: string(name='deviceTypeLRP', description='Device type (request_param.deviceType), examples: 1. PC, 2. MOBILE.', example='PC', position='Query'),
  emailPRP?: string(name='emailPRP', description='Email (request_param.email), up to 100 characters, supports “*” and “?” wildcards.', example='xxxx@123.com', position='Query'),
  endTime?: long(name='endTime', description='End time, accurate to milliseconds (ms).', example='1746669075000', position='Query'),
  failReasonLRP?: string(name='failReasonLRP', description='Login failure reason (-request_param.failReason).', example='wrongPassword', position='Query'),
  ipPRP?: string(name='ipPRP', description='IP (request_param.ip), up to 20 characters, supports “*” and “?” wildcards.', example='168.168.168.168', position='Query'),
  loginResultARP?: string(name='loginResultARP', description='Login success indicator (request_param.loginResult).', example='SUCCESS', position='Query'),
  loginTypeLRP?: string(name='loginTypeLRP', description='Login verification method (-request_param.loginType).', example='PASSWORD', position='Query'),
  macPRP?: string(name='macPRP', description='Device MAC address (-request_param.mac), up to 30 characters, supports “*” and “?” wildcards.', example='00-1C-F0-1D-A7-81', position='Query'),
  mobilePRP?: string(name='mobilePRP', description='Phone number (supports MD5 request_param.mobile/request_param.mobileMd5), up to 30 characters, supports “*” and “?” wildcards, searchable by mobile and mobileMd5 fields.', example='17600000000', position='Query'),
  nickNamePRP?: string(name='nickNamePRP', description='Account nickname (request_param.nickName), up to 50 characters, supports “*” and “?” wildcards.', example='测试xx', position='Query'),
  operateSourceLRP?: string(name='operateSourceLRP', description='Operation source (request_param.operateSource), examples: 1. PC, 2. H5, 3. App.', example='PC', position='Query'),
  pageSize?: int32(name='pageSize', description='Number of items per page, default value is 10.', example='10', position='Query'),
  referPRP?: string(name='referPRP', description='Referer (-request_param.refer), up to 50 characters, supports “*” and “?” wildcards.', example='refer', position='Query'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou', position='Query'),
  registerIpPRP?: string(name='registerIpPRP', description='Account registration IP (request_param.registerIp), up to 20 characters, supports “*” and “?” wildcards.', example='168.168.168.168', position='Query'),
  reqIdPBS?: string(name='reqIdPBS', description='Request ID.', example='BD6B08EC-1B44-5378-8838-C76A36415C55', position='Query'),
  scoreEBS?: int32(name='scoreEBS', description='End value of the score range (score), only non-negative integers are allowed, and the right interval must be greater than the left interval, with both intervals being closed.', example='2', position='Query'),
  scoreSBS?: int32(name='scoreSBS', description='Starting value of the score range (score), only non-negative integers are allowed, the right interval must be greater than the left interval, both intervals are inclusive.', example='1', position='Query'),
  serviceABS?: string(name='serviceABS', description='Event name (instance_id).', example='de_afghcf6411', position='Query'),
  tagsLBS?: string(name='tagsLBS', description='Risk tags (tags), data source DescribeTagsList.', example='rg0001', position='Query'),
  umidPDI?: string(name='umidPDI', description='Device ID (device_info.umid).', example='设备ID', position='Query'),
  userAgentPRP?: string(name='userAgentPRP', description='User agent (-request_param.userAgent), up to 50 characters, supports “*” and “?” wildcards.', example='00-1C-F0-1D-A7-81', position='Query'),
  userNameTypeLRP?: string(name='userNameTypeLRP', description='Username type, login scenario (-request_param.userNameType).', example='type', position='Query'),
}

model DescribeEventLogPageResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10.', example='10'),
  resultObject?: [ 
    {
      accountId?: string(name='accountId', description='Account ID.', example='1631801314885832'),
      email?: string(name='email', description='Email.', example='xxxx@123.com'),
      ip?: string(name='ip', description='IP address.', example='10.200.5.100'),
      mobile?: string(name='mobile', description='Mobile phone number.', example='13817606333'),
      nickName?: string(name='nickName', description='Nickname.', example='昵称'),
      requestId?: string(name='requestId', description='Request ID.', example='546F8063-0104-5271-9EB7-56FB3F375BAD'),
      score?: string(name='score', description='Score.', example='10.0'),
      service?: string(name='service', description='Event name.', example='注册事件'),
      tags?: string(name='tags', description='Tags.', example='rm0102'),
      timestamp?: string(name='timestamp', description='Transaction time.', example='1737101348000'),
      umid?: string(name='umid', description='Device ID.', example='4239'),
    }
  ](name='resultObject', description='Returned object.'),
  totalItem?: int32(name='totalItem', description='Total number of items.', example='6'),
  totalPage?: int32(name='totalPage', description='Total number of pages.', example='9'),
}

model DescribeEventLogPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEventLogPageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeEventLogPage  DescribeEventLogPageRequest
  * @return DescribeEventLogPageResponse
 */
async function describeEventLogPage(request: DescribeEventLogPageRequest): DescribeEventLogPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEventLogPage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEventPageListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  createType?: string(name='createType', description='Creation type', example='NORMAL', position='Query'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1', position='Query'),
  eventCode?: string(name='eventCode', description='Event code', example='de_aikqxy3122', position='Query'),
  eventName?: string(name='eventName', description='Event name.', example='注册风险旁路', position='Query'),
  eventStatus?: string(name='eventStatus', description='Event status.', example='ONLINE', position='Query'),
  pageSize?: int32(name='pageSize', description='Page size, with a default value of 10', example='10', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeEventPageListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, with a default value of 10', example='10'),
  resultObject?: [ 
    {
      children?: [ 
        {
          eventCode?: string(name='eventCode', description='Event code.', example='de_aamexg3015'),
          eventName?: string(name='eventName', description='Event name.', example='测试'),
          eventStatus?: string(name='eventStatus', description='Event status.', example='ONLINE'),
          eventType?: string(name='eventType', description='Event type.', example='BYPASS'),
          gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1621578648000'),
          gmtModified?: long(name='gmtModified', description='Modification time', example='1621578648000'),
          id?: long(name='id', description='Primary key ID', example='334'),
          ruleCount?: long(name='ruleCount', description='Total number of rules.', example='10'),
        }
      ](name='children', description='Object'),
      eventCode?: string(name='eventCode', description='Event code', example='de_aszbjb7236'),
      eventName?: string(name='eventName', description='Event name.', example='注册风险'),
      eventStatus?: string(name='eventStatus', description='Event status.', example='ONLINE'),
      eventType?: string(name='eventType', description='Event type.', example='MAIN'),
      gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1621578648000'),
      gmtModified?: long(name='gmtModified', description='Modification time', example='1565701886000'),
      id?: long(name='id', description='Database ID.', example='497'),
      ruleCount?: int32(name='ruleCount', description='Total number of rules.', example='10'),
      templateCode?: string(name='templateCode', description='Template code', example='register'),
      templateName?: string(name='templateName', description='Template name.', example='注册模版'),
      templateType?: string(name='templateType', description='Template type', example='UNIVERSAL'),
      userCount?: int32(name='userCount', description='Number of customer authorizations', example='1'),
    }
  ](name='resultObject', description='Returned object'),
  totalItem?: int32(name='totalItem', description='Total number of items', example='3'),
  totalPage?: int32(name='totalPage', description='Total number of pages.', example='9'),
}

model DescribeEventPageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEventPageListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeEventPageList  DescribeEventPageListRequest
  * @return DescribeEventPageListResponse
 */
async function describeEventPageList(request: DescribeEventPageListRequest): DescribeEventPageListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEventPageList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEventResultBarChartRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  beginTime: long(name='beginTime', description='Start time, accurate to milliseconds (ms).

This parameter is required.', example='1737101348000', position='Query'),
  endTime: long(name='endTime', description='End time, accurate to milliseconds (ms).

This parameter is required.', example='1744337383000', position='Query'),
  eventCodes?: string(name='eventCodes', description='Event code.', example='de_ahqhsw7665,de_ahqhsw7622', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeEventResultBarChartResponseBody = {
  code?: string(name='code', description='Status code.', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error message.', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: {
    series?: [ 
      {
        data?: [ 
          {
            num?: long(name='num', description='Number.', example='100'),
            scale?: string(name='scale', description='Scale', example='50.00%'),
          }
        ](name='data', description='Returned data object'),
        name?: string(name='name', description='Series name.', example='通过'),
        stack?: string(name='stack', description='Label key', example='通过'),
      }
    ](name='series', description='Chart data'),
    xaxis?: {
      data?: [ string ](name='data', description='Returned data object'),
    }(name='xaxis', description='xaxis interface configuration.'),
  }(name='resultObject', description='Returned object'),
  success?: boolean(name='success', description='Whether the request was successful.', example='true'),
}

model DescribeEventResultBarChartResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEventResultBarChartResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeEventResultBarChart  DescribeEventResultBarChartRequest
  * @return DescribeEventResultBarChartResponse
 */
async function describeEventResultBarChart(request: DescribeEventResultBarChartRequest): DescribeEventResultBarChartResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEventResultBarChart', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEventResultListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  beginTime: long(name='beginTime', description='Start time, accurate to milliseconds (ms).

This parameter is required.', example='1737101348000', position='Query'),
  currentPage?: long(name='currentPage', description='Current page number.', example='1', position='Query'),
  endTime: long(name='endTime', description='End time, accurate to milliseconds (ms).

This parameter is required.', example='1683616457000', position='Query'),
  pageSize?: long(name='pageSize', description='Page size, default value is 10', example='10', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeEventResultListResponseBody = {
  code?: string(name='code', description='Status code.', example='200'),
  currentPage?: long(name='currentPage', description='Current page number.', example='1'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error details', example='The input parameter data is not valid. order_storage_company_num component not found'),
  pageSize?: long(name='pageSize', description='Page size, default value is 10', example='10'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: [ 
    {
      eventCode?: string(name='eventCode', description='Event code', example='de_aszbjb7236'),
      eventName?: string(name='eventName', description='Event name.', example='注册风险'),
      passNum?: long(name='passNum', description='Number of passed checks.', example='90'),
      pendingNum?: long(name='pendingNum', description='Number of pending items.', example='5'),
      rejectNum?: long(name='rejectNum', description='Number of rejected approvals.', example='5'),
      totalNum?: long(name='totalNum', description='Total number of items.', example='100'),
    }
  ](name='resultObject', description='Returned object'),
  success?: boolean(name='success', description='Whether the query was successful.', example='true'),
  totalItem?: long(name='totalItem', description='Total number of items.', example='31'),
  totalPage?: long(name='totalPage', description='Total number of pages', example='9'),
}

model DescribeEventResultListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEventResultListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeEventResultList  DescribeEventResultListRequest
  * @return DescribeEventResultListResponse
 */
async function describeEventResultList(request: DescribeEventResultListRequest): DescribeEventResultListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEventResultList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEventTaskHistoryRequest {
  lang?: string(name='Lang', description='Set the language type for request and response messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeEventTaskHistoryResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: [ 
    {
      taskCode?: string(name='taskCode', description='Task code.', example='de_aoxcdy9473'),
      taskName?: string(name='taskName', description='Task name', example='仿真任务'),
      taskStatus?: string(name='taskStatus', description='Task status.', example='SUCCESSFUL'),
      url?: string(name='url', description='OSS download URL', example='https://xxxxx-oss-xxxxx.xxxxxx.aliyuncs.com/xx/xx/xxx/xxxxxx.csv?Expires=1753433384&OSSAccessKeyId=xxxxxxxxx&Signature=%2F%xxxxxxxxxxxx%3D'),
    }
  ](name='resultObject', description='Return object'),
}

model DescribeEventTaskHistoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEventTaskHistoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeEventTaskHistory  DescribeEventTaskHistoryRequest
  * @return DescribeEventTaskHistoryResponse
 */
async function describeEventTaskHistory(request: DescribeEventTaskHistoryRequest): DescribeEventTaskHistoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEventTaskHistory', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEventTotalCountReportRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeEventTotalCountReportResponseBody = {
  code?: string(name='code', description='Status code', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error message.', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: {
    ratio?: string(name='ratio', description='Comparison with yesterday\\"s event invocation count', example='101'),
    value?: string(name='value', description='Today\\"s event invocation count', example='100'),
  }(name='resultObject', description='Returned object'),
  success?: boolean(name='success', description='Indicates whether this operation was successful, `true` means success.', example='true'),
}

model DescribeEventTotalCountReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEventTotalCountReportResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeEventTotalCountReport  DescribeEventTotalCountReportRequest
  * @return DescribeEventTotalCountReportResponse
 */
async function describeEventTotalCountReport(request: DescribeEventTotalCountReportRequest): DescribeEventTotalCountReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEventTotalCountReport', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEventUploadPolicyRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeEventUploadPolicyResponseBody = {
  accessId?: string(name='AccessId', description='ID for accessing OSS', example='LTAxxxxxxxxxxxx'),
  host?: string(name='Host', description='OSS host.', example='172.16.0.44'),
  key?: string(name='Key', description='The Key required for file upload.', example='saf/de/namelist/e924/ufzgsedX9bd3a7'),
  policy?: string(name='Policy', description='OSS security policy', example='eyJleHBpcmF0aW9uIjoiMjAyNS0wNy0zMFQwNjowNTo0OS45NTRaIiwiY29uZGl0aW9ucyI6W1siY29udGVudC1sZW5ndGgtcmFuZ2UiLDAsMTA0ODU3NjAwMF0sWyJlcSIsIiRrZXkiLCJzYWZcL2RlXC9uYW1lbGlzdFwvZTkyNFwvdWZ6Z3NlZFg5Ymxxxxxxxxxxx'),
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  signature?: string(name='Signature', description='Signature data.', example='7aXmkd2Z3oksCXOS9uvKlJuOKaY='),
  stsToken?: string(name='StsToken', description='Temporary identity credential.', example='tT44bMQxxxxxxxxxxxxxxx'),
}

model DescribeEventUploadPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEventUploadPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeEventUploadPolicy  DescribeEventUploadPolicyRequest
  * @return DescribeEventUploadPolicyResponse
 */
async function describeEventUploadPolicy(request: DescribeEventUploadPolicyRequest): DescribeEventUploadPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEventUploadPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEventVariableListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. The values are: - **zh**: Chinese - **en**: English', example='zh', position='Query'),
  createType?: string(name='createType', description='Create Type.', example='NORMAL', position='Query'),
  filterDTO?: string(name='filterDTO', description='Filter object.', example='{
    "type": "EXPRESSION",
    "name": "ex_NgR6nDVD821c"
}', position='Query'),
  refObjId: string(name='refObjId', description='Associated event eventCode.

This parameter is required.', example='de_awkhwh0314', position='Query'),
  refObjType: string(name='refObjType', description='Association Type.

This parameter is required.', example='EVENT', position='Query'),
  regId?: string(name='regId', description='Region Code.', example='cn-hangzhou', position='Query'),
  type?: string(name='type', description='type.', example='NATIVE', position='Query'),
}

model DescribeEventVariableListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    actions?: [ 
      {
        code?: string(name='code', description='Variable code.', example='deAddResult'),
        dataDisplay?: string(name='dataDisplay', description='Data distribution display in JSON format. This field is not returned for this type of variable.', example='This type does not have this field'),
        defineId?: string(name='defineId', description='Variable definition ID. This type of variable does not return this field.', example='This type does not have this field'),
        description?: string(name='description', description='Description information.', example='决策结果'),
        displayType?: string(name='displayType', description='Display type and group label.', example='ACTION'),
        expressionTitle?: string(name='expressionTitle', description='Expression display. This type of variable does not return this field.', example='This type does not have this field'),
        favoriteFlag?: boolean(name='favoriteFlag', description='Favorite identifier.', example='false'),
        fieldDetail?: string(name='fieldDetail', description='Details of the field pool. This type of variable does not return this field.', example='This type does not have this field'),
        fieldRank?: int32(name='fieldRank', description='Field sorting.', example='0'),
        fieldSource?: string(name='fieldSource', description='Source of the field. This type of variable does not return this field.', example='This type does not have this field'),
        fieldType?: string(name='fieldType', description='Field type. This field is not returned for this type of variable.', example='This type does not have this field'),
        id?: long(name='id', description='Primary key ID.', example='3144'),
        inputFieldType?: string(name='inputFieldType', description='Input type of the parameter.', example='STRING'),
        inputRequired?: string(name='inputRequired', description='Required parameter. This type of variable does not return this field.', example='This type does not have this field'),
        inputs?: string(name='inputs', description='Input parameters. This field is not returned for this type of variable.', example='This type does not have this field'),
        name?: string(name='name', description='Variable name.', example='__addDeResult__'),
        outlier?: string(name='outlier', description='Anomaly value. This field is not returned for this type of variable.', example='This type does not have this field'),
        outputThreshold?: {
          maxValue?: double(name='maxValue', description='Maximum value.', example='10'),
          minValue?: double(name='minValue', description='Minimum value.', example='1'),
        }(name='outputThreshold', description='Output value threshold.'),
        parentName?: string(name='parentName', description='Parent node. This field is not returned for this type of variable.', example='This type does not have this field'),
        sourceType?: string(name='sourceType', description='Source type.', example='SAF'),
        title?: string(name='title', description='Title.', example='决策结果'),
        type?: string(name='type', description='Variable type.', example='ACTION'),
        variableVelocity?: {
          iv?: string(name='iv', description='iv value. This type of variable does not return this field.', example='This type does not have this field'),
        }(name='variableVelocity', description='Variable metric information. This field is not returned for this type of variable.'),
        xLabel?: string(name='xLabel', description='x label. This type of variable does not return this field.', example='This type does not have this field'),
        yLabel?: string(name='yLabel', description='y label. This type of variable does not return this field.', example='This type does not have this field'),
      }
    ](name='actions', description='Action variable.'),
    deviceVariables?: [ 
      {
        code?: string(name='code', description='Variable code.', example='queryPhoneSimulatorInfo(deviceToken)?.deviceName'),
        dataDisplay?: string(name='dataDisplay', description='Data distribution display in JSON format. This field is not returned for this type of variable.', example='This type does not have this field'),
        defineId?: string(name='defineId', description='Variable definition ID. This type of variable does not return this field.', example='This type does not have this field'),
        description?: string(name='description', description='Description information.', example='设备信息-设备名称'),
        displayType?: string(name='displayType', description='The display type and grouping label.', example='DEVICE'),
        expressionTitle?: string(name='expressionTitle', description='The display value of the calculation expression. This field is not returned for this type of variable.', example='This type does not have this field'),
        favoriteFlag?: boolean(name='favoriteFlag', description='The favorite flag.', example='false'),
        fieldDetail?: string(name='fieldDetail', description='The detailed information of the field in the field pool. This field is not returned for this type of variable.', example='This type does not have this field'),
        fieldRank?: int32(name='fieldRank', description='The field rank.', example='0'),
        fieldSource?: string(name='fieldSource', description='The source of the field. This field is not returned for this type of variable.', example='This type does not have this field'),
        fieldType?: string(name='fieldType', description='Field type.', example='STRING'),
        id?: long(name='id', description='Primary key ID.', example='41'),
        inputFieldType?: string(name='inputFieldType', description='The input type of the parameter. This field is not returned for this type of variable.', example='This type does not have this field'),
        inputRequired?: string(name='inputRequired', description='The required parameter. This field is not returned for this type of variable.', example='This type does not have this field'),
        inputs?: string(name='inputs', description='Input for the variable. This field is not returned for this type of variable.', example='This type does not have this field'),
        name?: string(name='name', description='Variable name.', example='__device_name__'),
        outlier?: string(name='outlier', description='The outlier value. This field is not returned for this type of variable.', example='This type does not have this field'),
        outputThreshold?: {
          maxValue?: double(name='maxValue', description='The minimum value.', example='10'),
          minValue?: double(name='minValue', description='The minimum value.', example='1'),
        }(name='outputThreshold', description='The output value threshold.'),
        parentName?: string(name='parentName', description='Parent node. This field is not returned for this type of variable.', example='This type does not have this field'),
        sourceType?: string(name='sourceType', description='The source type.', example='SAF'),
        title?: string(name='title', description='Title.', example='设备信息-设备名称-deviceName'),
        type?: string(name='type', description='Variable type.', example='DEVICE'),
        variableVelocity?: {
          iv?: string(name='iv', description='The IV value. This field is not returned for this type of variable.', example='This type does not have this field'),
        }(name='variableVelocity', description='The variable metric information. This field is not returned for this type of variable.'),
        xLabel?: string(name='xLabel', description='The X label. This field is not returned for this type of variable.', example='This type does not have this field'),
        yLabel?: string(name='yLabel', description='The Y label. This field is not returned for this type of variable.', example='This type does not have this field'),
      }
    ](name='deviceVariables', description='Device variable.'),
    expressionVariables?: [ 
      {
        code?: string(name='code', description='The code of the variable.', example='deInvokeSelfVariable(390397)'),
        dataDisplay?: string(name='dataDisplay', description='Data distribution display, in JSON format. This field is not returned for this type of variable.', example='This type does not have this field'),
        defineId?: string(name='defineId', description='The definition ID of the variable. This field is not returned for this type of variable.', example='This type does not have this field'),
        description?: string(name='description', description='The description of the variable.', example='获取手机号前7位'),
        displayType?: string(name='displayType', description='The display type and grouping label.', example='EXPRESSION'),
        expressionTitle?: string(name='expressionTitle', description='The display value of the calculation expression.', example='@testaaa +1'),
        favoriteFlag?: boolean(name='favoriteFlag', description='The favorite flag.', example='false'),
        fieldDetail?: string(name='fieldDetail', description='The detailed information of the field in the field pool. This field is not returned for this type of variable.', example='This type does not have this field'),
        fieldRank?: int32(name='fieldRank', description='The field rank.', example='0'),
        fieldSource?: string(name='fieldSource', description='The source of the field. This field is not returned for this type of variable.', example='This type does not have this field'),
        fieldType?: string(name='fieldType', description='The input type of the variable.', example='STRING'),
        id?: long(name='id', description='Primary key ID.', example='3148'),
        inputFieldType?: string(name='inputFieldType', description='The input type of the parameter. This field is not returned for this type of variable.', example='This type does not have this field'),
        inputRequired?: string(name='inputRequired', description='The required parameter. This field is not returned for this type of variable.', example='This type does not have this field'),
        inputs?: string(name='inputs', description='Multiple input parameters separated by commas. This field is not returned for this type of variable.', example='This type does not have this field'),
        name?: string(name='name', description='The name of the variable.', example='ex_w2yIClHCc150'),
        outlier?: string(name='outlier', description='The outlier value.', example='-1'),
        outputThreshold?: {
          maxValue?: double(name='maxValue', description='The maximum value.', example='10'),
          minValue?: double(name='minValue', description='The minimum value.', example='1'),
        }(name='outputThreshold', description='The output value threshold.'),
        parentName?: string(name='parentName', description='The parent node. This field is not returned for this type of variable.', example='This type does not have this field'),
        sourceType?: string(name='sourceType', description='The source type.', example='SAF'),
        title?: string(name='title', description='Title.', example='获取手机号前7位'),
        type?: string(name='type', description='The type of the variable.', example='EXPRESSION'),
        variableVelocity?: {
          iv?: string(name='iv', description='The IV value. This field is not returned for this type of variable.', example='This type does not have this field'),
        }(name='variableVelocity', description='The variable metric information. This field is not returned for this type of variable.'),
        xLabel?: string(name='xLabel', description='The X label. This field is not returned for this type of variable.', example='This type does not have this field'),
        yLabel?: string(name='yLabel', description='The Y label. This field is not returned for this type of variable.', example='This type does not have this field'),
      }
    ](name='expressionVariables', description='Custom variable.'),
    favoriteVariables?: [ 
      {
        code?: string(name='code', description='Variable code.', example='deFunctionProcess(ip,\\"isIp\\")'),
        dataDisplay?: string(name='dataDisplay', description='Data distribution display in JSON format. This field is not returned for this type of variable.', example='This type does not have this field'),
        defineId?: string(name='defineId', description='Variable definition ID.', example='16'),
        description?: string(name='description', description='Description of the variable.', example='判断是否符合IPv4标准'),
        displayType?: string(name='displayType', description='Display type and group label.', example='SYSTEM_BIND'),
        expressionTitle?: string(name='expressionTitle', description='Expression display value. This type of variable does not return this field.', example='This type does not have this field'),
        favoriteFlag?: boolean(name='favoriteFlag', description='Favorite identifier.', example='false'),
        fieldDetail?: string(name='fieldDetail', description='Details of the field pool. This type of variable does not return this field.', example='This type does not have this field'),
        fieldRank?: int32(name='fieldRank', description='Field sorting.', example='0'),
        fieldSource?: string(name='fieldSource', description='Source of the field. This type of variable does not return this field.', example='This type does not have this field'),
        fieldType?: string(name='fieldType', description='Field type.', example='BOOLEAN'),
        id?: long(name='id', description='Primary key ID.', example='34'),
        inputFieldType?: string(name='inputFieldType', description='Input type of the parameter. This field is not returned for this type of variable.', example='This type does not have this field'),
        inputRequired?: string(name='inputRequired', description='Required parameter. This field is not returned for this type of variable.', example='This type does not have this field'),
        inputs?: string(name='inputs', description='Input parameters should be separated by commas. Some variables may not have this field.', example='ip'),
        name?: string(name='name', description='Variable name.', example='__isIpAddressV4__'),
        outlier?: string(name='outlier', description='Anomaly value. This field is not returned for this type of variable.', example='This type does not have this field'),
        outputThreshold?: {
          maxValue?: double(name='maxValue', description='Maximum value.', example='10'),
          minValue?: double(name='minValue', description='Minimum value.', example='1'),
        }(name='outputThreshold', description='Output value threshold.'),
        parentName?: string(name='parentName', description='Parent node. This field is not returned for this type of variable.', example='This type does not have this field'),
        sourceType?: string(name='sourceType', description='Source type.', example='SAF'),
        title?: string(name='title', description='Title.', example='IP是否符合IPV4格式'),
        type?: string(name='type', description='Variable type.', example='SYSTEM_BIND'),
        variableVelocity?: {
          iv?: string(name='iv', description='iv value. This type of variable does not return this field.', example='This type does not have this field'),
        }(name='variableVelocity', description='Variable metric information. This field is not returned for this type of variable.'),
        xLabel?: string(name='xLabel', description='x label. This type of variable does not return this field.', example='This type does not have this field'),
        yLabel?: string(name='yLabel', description='y label. This type of variable does not return this field.', example='This type does not have this field'),
      }
    ](name='favoriteVariables', description='Favorite variables.'),
    middleVariables?: [ 
      {
        code?: string(name='code', description='Variable code.', example='mid'),
        dataDisplay?: string(name='dataDisplay', description='Data distribution display in JSON format. This field is not returned for this type of variable.', example='This type does not have this field'),
        defineId?: string(name='defineId', description='Variable definition ID.', example='register'),
        description?: string(name='description', description='Variable description.', example='description'),
        displayType?: string(name='displayType', description='Display type and group label.', example='MIDDLE'),
        expressionTitle?: string(name='expressionTitle', description='Calculate the display value of the expression. This type of variable does not return this field.', example='This type does not have this field'),
        favoriteFlag?: boolean(name='favoriteFlag', description='Favorite identifier.', example='false'),
        fieldDetail?: string(name='fieldDetail', description='Details of the field pool. This type of variable does not return this field.', example='This type does not have this field'),
        fieldRank?: int32(name='fieldRank', description='Field sorting.', example='0'),
        fieldSource?: string(name='fieldSource', description='Variable source.', example='DEFAULT'),
        fieldType?: string(name='fieldType', description='Field type.', example='STRING'),
        id?: long(name='id', description='Primary key ID.', example='49'),
        inputFieldType?: string(name='inputFieldType', description='Input field type, indicating the type of input parameters, mainly used for function classification. This type of variable does not return this field.', example='This type does not have this field'),
        inputRequired?: string(name='inputRequired', description='Required parameter. This field is not returned for this type of variable.', example='This type does not have this field'),
        inputs?: string(name='inputs', description='Input of the variable.', example='This type does not have this field'),
        name?: string(name='name', description='Variable name.', example='mid'),
        outlier?: string(name='outlier', description='Outlier value. This field is not returned for this type of variable.', example='This type does not have this field'),
        outputThreshold?: {
          maxValue?: double(name='maxValue', description='Maximum value.', example='10'),
          minValue?: double(name='minValue', description='Minimum value.', example='0'),
        }(name='outputThreshold', description='Output value threshold.'),
        parentName?: string(name='parentName', description='Parent node. This field is not returned for this type of variable.', example='This type does not have this field'),
        sourceType?: string(name='sourceType', description='Source type.', example='SAF'),
        title?: string(name='title', description='Title.', example='midVaribale'),
        type?: string(name='type', description='Variable type.', example='MIDDLE'),
        variableVelocity?: {
          iv?: string(name='iv', description='id value. This type of variable does not return this field.', example='This type does not have this field'),
        }(name='variableVelocity', description='Variable metric information. This type of variable does not return this field.'),
        xLabel?: string(name='xLabel', description='x label. This type of variable does not return this field.', example='This type does not have this field'),
        yLabel?: string(name='yLabel', description='y label. This type of variable does not return this field.', example='This type does not have this field'),
      }
    ](name='middleVariables', description='Intermediate variable return object.'),
    modelVariables?: [ 
      {
        code?: string(name='code', description='The code of the model variable.', example='getAIData(model)'),
        dataDisplay?: string(name='dataDisplay', description='Data distribution display, in JSON format. This field is not returned for this type of variable.', example='This type does not have this field'),
        defineId?: string(name='defineId', description='The definition ID of the model variable. This field is not returned for this type of variable.', example='This type does not have this field'),
        description?: string(name='description', description='The description of the model variable.', example='BL_t_show'),
        displayType?: string(name='displayType', description='The display type and grouping label.', example='MODEL'),
        expressionTitle?: string(name='expressionTitle', description='The display value of the calculation expression. This field is not returned for this type of variable.', example='This type does not have this field'),
        favoriteFlag?: boolean(name='favoriteFlag', description='The favorite flag.', example='false'),
        fieldDetail?: string(name='fieldDetail', description='The detailed information of the field in the field pool. This field is not returned for this type of variable.', example='This type does not have this field'),
        fieldRank?: int32(name='fieldRank', description='The field rank.', example='0'),
        fieldSource?: string(name='fieldSource', description='The source of the field. This field is not returned for this type of variable.', example='This type does not have this field'),
        fieldType?: string(name='fieldType', description='The type of the field.', example='DOUBLE'),
        id?: long(name='id', description='The primary key ID of the model variable.', example='43'),
        inputFieldType?: string(name='inputFieldType', description='The input type of the parameter. This field is not returned for this type of variable.', example='This type does not have this field'),
        inputRequired?: string(name='inputRequired', description='The required parameter. This field is not returned for this type of variable.', example='This type does not have this field'),
        inputs?: string(name='inputs', description='Multiple input parameters separated by commas. This field is not returned for this type of variable.', example='This type does not have this field'),
        name?: string(name='name', description='The name of the model variable.', example='mo_qbbyf33o66f2'),
        outlier?: string(name='outlier', description='The outlier value. This field is not returned for this type of variable.', example='This type does not have this field'),
        outputThreshold?: {
          maxValue?: double(name='maxValue', description='The maximum value.', example='10'),
          minValue?: double(name='minValue', description='The minimum value.', example='1'),
        }(name='outputThreshold', description='The output value threshold.'),
        parentName?: string(name='parentName', description='The parent node. This field is not returned for this type of variable.', example='This type does not have this field'),
        sourceType?: string(name='sourceType', description='The source type.', example='SAF'),
        title?: string(name='title', description='The title of the model variable.', example='BL_t_show'),
        type?: string(name='type', description='The type of the model variable.', example='MODEL'),
        variableVelocity?: {
          iv?: string(name='iv', description='The IV value. This field is not returned for this type of variable.', example='This type does not have this field'),
        }(name='variableVelocity', description='The variable metric information. This field is not returned for this type of variable.'),
        xLabel?: string(name='xLabel', description='The X label. This field is not returned for this type of variable.', example='This type does not have this field'),
        yLabel?: string(name='yLabel', description='The Y label. This field is not returned for this type of variable.', example='This type does not have this field'),
      }
    ](name='modelVariables', description='An array of model variables.'),
    nameList?: [ 
      {
        code?: string(name='code', description='Variable code.', example='nl_UN8otElLb490'),
        dataDisplay?: string(name='dataDisplay', description='Data distribution display in JSON format. This field is not currently returned.', example='This type does not have this field'),
        defineId?: string(name='defineId', description='Variable definition ID. This type of variable does not return this field.', example='This type does not have this field'),
        description?: string(name='description', description='Description information.', example='描述'),
        displayType?: string(name='displayType', description='Display type and group label.', example='NAME_LIST'),
        expressionTitle?: string(name='expressionTitle', description='Calculate the expression display value. This type of variable does not return this field.', example='This type does not have this field'),
        favoriteFlag?: boolean(name='favoriteFlag', description='Favorite identifier.', example='false'),
        fieldDetail?: string(name='fieldDetail', description='Details of the field pool. This type of variable does not return this field.', example='This type does not have this field'),
        fieldRank?: int32(name='fieldRank', description='Field sorting.', example='0'),
        fieldSource?: string(name='fieldSource', description='Source of the field. This type of variable does not return this field.', example='This type does not have this field'),
        fieldType?: string(name='fieldType', description='Field type. This field is not returned for this type of variable.', example='This type does not have this field'),
        id?: long(name='id', description='Primary key ID.', example='34'),
        inputFieldType?: string(name='inputFieldType', description='Input type of the parameter. This field is not returned for this type of variable.', example='This type does not have this field'),
        inputRequired?: string(name='inputRequired', description='Required parameter. This field is not returned for this type of variable.', example='This type does not have this field'),
        inputs?: string(name='inputs', description='Input parameters. This field is not returned for this type of variable.', example='This type does not have this field'),
        name?: string(name='name', description='Variable name.', example='nl_UN8otElLb490'),
        outlier?: string(name='outlier', description='Outlier value. This field is not returned for this type of variable.', example='This type does not have this field'),
        outputThreshold?: {
          maxValue?: double(name='maxValue', description='Maximum value.', example='10'),
          minValue?: double(name='minValue', description='Minimum value.', example='1'),
        }(name='outputThreshold', description='Output value threshold.'),
        parentName?: string(name='parentName', description='Parent node. This field is not returned currently.', example='This type does not have this field'),
        sourceType?: string(name='sourceType', description='Source type.', example='SAF'),
        title?: string(name='title', description='Title.', example='白名单'),
        type?: string(name='type', description='Variable type.', example='NAME_LIST'),
        variableVelocity?: {
          iv?: string(name='iv', description='iv value. This type of variable does not return this field.', example='This type does not have this field'),
        }(name='variableVelocity', description='Variable metric information. This field is not returned for this type of variable.'),
        xLabel?: string(name='xLabel', description='x label. This type of variable does not return this field.', example='This type does not have this field'),
        yLabel?: string(name='yLabel', description='y label. This type of variable does not return this field.', example='This type does not have this field'),
      }
    ](name='nameList', description='List of name variables.'),
    nativeVariableFunctions?: [ 
      {
        code?: string(name='code', description='Variable code.', example='getHourOfTimestamp({data})'),
        dataDisplay?: string(name='dataDisplay', description='Data distribution display in JSON format. This field is not returned for this type of variable.', example='This type does not have this field'),
        defineId?: string(name='defineId', description='Variable definition ID. This type of variable does not return this field.', example='This type does not have this field'),
        description?: string(name='description', description='Description information.', example='时间戳，可以是秒或者毫秒'),
        displayType?: string(name='displayType', description='Display type and group label.', example='FUNC'),
        expressionTitle?: string(name='expressionTitle', description='Calculate the expression display value. This field is not returned for this type of variable.', example='This type does not have this field'),
        favoriteFlag?: boolean(name='favoriteFlag', description='Favorite identifier.', example='false'),
        fieldDetail?: string(name='fieldDetail', description='Details of the field pool. This type of variable does not return this field.', example='This type does not have this field'),
        fieldRank?: int32(name='fieldRank', description='Field sorting.', example='0'),
        fieldSource?: string(name='fieldSource', description='Source of the field. This type of variable does not return this field.', example='This type does not have this field'),
        fieldType?: string(name='fieldType', description='Variable return type.', example='LONG'),
        id?: long(name='id', description='Primary key ID.', example='93'),
        inputFieldType?: string(name='inputFieldType', description='The input type of the parameter.', example='DATE'),
        inputRequired?: string(name='inputRequired', description='Required parameter. This field is not returned for this type of variable.', example='This type does not have this field'),
        inputs?: string(name='inputs', description='Input field. This type of variable does not return this field.', example='This type does not have this field'),
        name?: string(name='name', description='Variable name.', example='__getHourOfTimestamp__'),
        outlier?: string(name='outlier', description='Exception value. This type of variable does not return this field.', example='This type does not have this field'),
        outputThreshold?: {
          maxValue?: double(name='maxValue', description='Maximum value.', example='10'),
          minValue?: double(name='minValue', description='Minimum value.', example='0'),
        }(name='outputThreshold', description='Output value threshold.'),
        parentName?: string(name='parentName', description='Parent node. This field is not returned for this type of variable.', example='This type does not have this field'),
        sourceType?: string(name='sourceType', description='Source type.', example='SAF'),
        title?: string(name='title', description='Variable title.', example='根据时间戳获取小时'),
        type?: string(name='type', description='Variable type.', example='FUNC'),
        variableVelocity?: {
          iv?: string(name='iv', description='iv value. This type of variable does not return this field.', example='This type does not have this field'),
        }(name='variableVelocity', description='Variable metric information. This type of variable does not return this field.'),
        xLabel?: string(name='xLabel', description='x label. This type of variable does not return this field.', example='This type does not have this field'),
        yLabel?: string(name='yLabel', description='y label. This type of variable does not return this field.', example='This type does not have this field'),
      }
    ](name='nativeVariableFunctions', description='List of available functions for the original variable.'),
    nativeVariables?: [ 
      {
        code?: string(name='code', description='variable code.', example='age'),
        dataDisplay?: string(name='dataDisplay', description='Data distribution display, in JSON format.', example='{}'),
        defineId?: string(name='defineId', description='Associated variable definition ID.', example='register'),
        description?: string(name='description', description='Variable description.', example='描述'),
        displayType?: string(name='displayType', description='Display type and group label.', example='NATIVE'),
        expressionTitle?: string(name='expressionTitle', description='Calculate expression display value.', example='无'),
        favoriteFlag?: boolean(name='favoriteFlag', description='Favorite Identifier.', example='true'),
        fieldDetail?: string(name='fieldDetail', description='Field pool field details.', example='无'),
        fieldRank?: int32(name='fieldRank', description='Field Sorting.', example='1'),
        fieldSource?: string(name='fieldSource', description='Variable source.', example='DEFINE'),
        fieldType?: string(name='fieldType', description='Field type.', example='STRING'),
        id?: long(name='id', description='Variable ID.', example='223'),
        inputFieldType?: string(name='inputFieldType', description='Input field type, indicating the type of input parameters, mainly used for function categorization.', example='STRING'),
        inputRequired?: string(name='inputRequired', description='Required parameters.', example='无'),
        inputs?: string(name='inputs', description='Input of the variable. Event field is not present.', example='无'),
        name?: string(name='name', description='variable name.', example='age'),
        outlier?: string(name='outlier', description='outlier.', example='无'),
        outputThreshold?: {
          maxValue?: double(name='maxValue', description='Maximum value.', example='10'),
          minValue?: double(name='minValue', description='Minimum value.', example='1'),
        }(name='outputThreshold', description='Output score threshold.'),
        parentName?: string(name='parentName', description='Parent name.', example='parentName'),
        sourceType?: string(name='sourceType', description='Variable source type.', example='SAF'),
        title?: string(name='title', description='Variable name.', example='年龄'),
        type?: string(name='type', description='Variable type.', example='NATIVE'),
        variableVelocity?: {
          iv?: string(name='iv', description='iv value.', example='无'),
        }(name='variableVelocity', description='Variable indicator information.'),
        xLabel?: string(name='xLabel', description='x label.', example='x'),
        yLabel?: string(name='yLabel', description='y label.', example='y'),
      }
    ](name='nativeVariables', description='List of event fields.'),
    queryVariables?: [ 
      {
        code?: string(name='code', description='The code of the query variable.', example='deInvokeQueryVariable(376773)'),
        dataDisplay?: string(name='dataDisplay', description='Data distribution display, in JSON format. This field is not returned for this type of variable.', example='This type does not have this field'),
        defineId?: string(name='defineId', description='The definition ID of the query variable. This field is not returned for this type of variable.', example='This type does not have this field'),
        description?: string(name='description', description='The description of the query variable.', example='年龄计算'),
        displayType?: string(name='displayType', description='The display type and grouping label.', example='QUERY_EXPRESSION'),
        expressionTitle?: string(name='expressionTitle', description='The display value of the calculation expression. This field is not returned for this type of variable.', example='SELECT  AVG( $source )\\nFROM testCase\\nWHERE  $age > 0'),
        favoriteFlag?: boolean(name='favoriteFlag', description='The favorite flag.', example='false'),
        fieldDetail?: string(name='fieldDetail', description='The detailed information of the field in the field pool. This field is not returned for this type of variable.', example='This type does not have this field'),
        fieldRank?: int32(name='fieldRank', description='The field rank.', example='0'),
        fieldSource?: string(name='fieldSource', description='The source of the field. This field is not returned for this type of variable.', example='This type does not have this field'),
        fieldType?: string(name='fieldType', description='The type of the field.', example='STRING'),
        id?: long(name='id', description='The primary key ID of the query variable.', example='3148'),
        inputFieldType?: string(name='inputFieldType', description='The input type of the parameter. This field is not returned for this type of variable.', example='This type does not have this field'),
        inputRequired?: string(name='inputRequired', description='The required parameter. This field is not returned for this type of variable.', example='This type does not have this field'),
        inputs?: string(name='inputs', description='Multiple input parameters separated by commas. This field is not returned for this type of variable.', example='This type does not have this field'),
        name?: string(name='name', description='The name of the query variable.', example='ex_qWtKgCox350f'),
        outlier?: string(name='outlier', description='The outlier value.', example='SYS_ERROR'),
        outputThreshold?: {
          maxValue?: double(name='maxValue', description='The maximum value.', example='10'),
          minValue?: double(name='minValue', description='The minimum value.', example='1'),
        }(name='outputThreshold', description='The output value threshold.'),
        parentName?: string(name='parentName', description='The parent node. This field is not returned for this type of variable.', example='This type does not have this field'),
        sourceType?: string(name='sourceType', description='The source type.', example='DATA_SOURCE'),
        title?: string(name='title', description='The title of the query variable. The title of the query variable.', example='年龄计算'),
        type?: string(name='type', description='The type of the query variable.', example='QUERY_EXPRESSION'),
        variableVelocity?: {
          iv?: string(name='iv', description='The IV value. This field is not returned for this type of variable.', example='This type does not have this field'),
        }(name='variableVelocity', description='The variable metric information. This field is not returned for this type of variable.'),
        xLabel?: string(name='xLabel', description='The X label. This field is not returned for this type of variable.', example='This type does not have this field'),
        yLabel?: string(name='yLabel', description='The Y label. This field is not returned for this type of variable.', example='This type does not have this field'),
      }
    ](name='queryVariables', description='An array of custom query variables.'),
    selfVariables?: [ 
      {
        code?: string(name='code', description='Variable code.', example='deReadVelocity(hitRules,\\"dUd5ioJ8014\\",1,\\"MO\\",0,true,\\"SUM\\")'),
        dataDisplay?: string(name='dataDisplay', description='Data distribution display, in JSON format. This field is not returned for this type of variable.', example='This type does not have this field'),
        defineId?: string(name='defineId', description='Variable definition ID. Only returned for custom system variables.', example='49'),
        description?: string(name='description', description='Description of the variable.', example='变量的描述信息'),
        displayType?: string(name='displayType', description='Display type and group label.', example='SELF_BIND'),
        expressionTitle?: string(name='expressionTitle', description='Expression name.', example='@IP地址'),
        favoriteFlag?: boolean(name='favoriteFlag', description='Favorite identifier.', example='false'),
        fieldDetail?: string(name='fieldDetail', description='Details of the field pool. This type of variable does not return this field.', example='This type does not have this field'),
        fieldRank?: int32(name='fieldRank', description='Field sorting.', example='0'),
        fieldSource?: string(name='fieldSource', description='Source of the field. This type of variable does not return this field.', example='This type does not have this field'),
        fieldType?: string(name='fieldType', description='Field type.', example='STRING'),
        id?: long(name='id', description='Variable ID.', example='3174'),
        inputFieldType?: string(name='inputFieldType', description='The input type of the parameter. This field is not returned for this type of variable.', example='This type does not have this field'),
        inputRequired?: string(name='inputRequired', description='Required parameter. This field is not returned for this type of variable.', example='This type does not have this field'),
        inputs?: string(name='inputs', description='Input parameters. Only returned when custom system variables are defined.', example='ip'),
        name?: string(name='name', description='Variable name.', example='ex_isvspbF2c7ac'),
        outlier?: string(name='outlier', description='Anomaly value. Returned when the variable is a custom variable (type= EXPRESSION).', example='-1'),
        outputThreshold?: {
          maxValue?: double(name='maxValue', description='Maximum value.', example='10'),
          minValue?: double(name='minValue', description='Minimum value.', example='1'),
        }(name='outputThreshold', description='Output value threshold.'),
        parentName?: string(name='parentName', description='Parent node. This field is not returned currently.', example='This type does not have this field'),
        sourceType?: string(name='sourceType', description='Source type.', example='SAF'),
        title?: string(name='title', description='Title.', example='获取手机号前七位'),
        type?: string(name='type', description='Variable type.', example='EXPRESSION'),
        variableVelocity?: {
          iv?: string(name='iv', description='iv value. This type of variable does not return this field.', example='This type does not have this field'),
        }(name='variableVelocity', description='Variable metric information. This field is not returned for this type of variable.'),
        xLabel?: string(name='xLabel', description='x label. This type of variable does not return this field.', example='This type does not have this field'),
        yLabel?: string(name='yLabel', description='y label. This type of variable does not return this field.', example='This type does not have this field'),
      }
    ](name='selfVariables', description='Custom variables (custom variables, cumulative variables, custom system variables).'),
    sysVariables?: [ 
      {
        code?: string(name='code', description='Variable code.', example='parseIpV2(ip)?.cityId'),
        dataDisplay?: string(name='dataDisplay', description='Data distribution display, in JSON format. This field is not returned for this type of variable.', example='This type does not have this field'),
        defineId?: string(name='defineId', description='ID of the bound variable definition.', example='2488'),
        description?: string(name='description', description='Description of the variable.', example='通过IP地址库解析IP所在的城市Code，例如，输入“42.120.74.211”，经过该变量运算，输出“330100”。'),
        displayType?: string(name='displayType', description='Display type and group label.', example='SYSTEM_BIND'),
        expressionTitle?: string(name='expressionTitle', description='Calculate the expression display value. This type of variable does not return this field.', example='This type does not have this field'),
        favoriteFlag?: boolean(name='favoriteFlag', description='Favorite identifier.', example='false'),
        fieldDetail?: string(name='fieldDetail', description='Details of the field pool. This type of variable does not return this field.', example='This type does not have this field'),
        fieldRank?: int32(name='fieldRank', description='Field sorting.', example='0'),
        fieldSource?: string(name='fieldSource', description='Source of the field. This type of variable does not return this field.', example='This type does not have this field'),
        fieldType?: string(name='fieldType', description='Field type.', example='STRING'),
        id?: long(name='id', description='Variable ID.', example='3151'),
        inputFieldType?: string(name='inputFieldType', description='Input type of the parameter. This field is not returned for this type of variable.', example='This type does not have this field'),
        inputRequired?: string(name='inputRequired', description='Required parameter. This field is not returned for this type of variable.', example='This type does not have this field'),
        inputs?: string(name='inputs', description='Variable value input.', example='ip'),
        name?: string(name='name', description='Variable name.', example='__ipLocationCityCode__'),
        outlier?: string(name='outlier', description='Outlier value. This field is not returned for this type of variable.', example='This type does not have this field'),
        outputThreshold?: {
          maxValue?: double(name='maxValue', description='Maximum value.', example='10'),
          minValue?: double(name='minValue', description='Minimum value.', example='1'),
        }(name='outputThreshold', description='Output value threshold.'),
        parentName?: string(name='parentName', description='Parent name.', example='无'),
        sourceType?: string(name='sourceType', description='Source type.', example='SAF'),
        title?: string(name='title', description='Title.', example='IP所在地_城市Code'),
        type?: string(name='type', description='Variable type.', example='SYSTEM_BIND'),
        variableVelocity?: {
          iv?: string(name='iv', description='iv value. This type of variable does not return this field.', example='This type does not have this field'),
        }(name='variableVelocity', description='Variable metric information. This field is not returned for this type of variable.'),
        xLabel?: string(name='xLabel', description='x label. This type of variable does not return this field.', example='This type does not have this field'),
        yLabel?: string(name='yLabel', description='y label. This type of variable does not return this field.', example='This type does not have this field'),
      }
    ](name='sysVariables', description='System variables.'),
    thirdVariables?: map[string]any(name='thirdVariables', description='Other related variables.', example='{}'),
    velocityVariables?: [ 
      {
        code?: string(name='code', description='The code of the variable.', example='deReadVelocity(userId,\\"hFsEFUEe88a\\",1,\\"H\\",0,true,\\"COUNT\\")'),
        dataDisplay?: string(name='dataDisplay', description='Data distribution display, in JSON format. This field is not returned for this type of variable.', example='This type does not have this field'),
        defineId?: string(name='defineId', description='The definition ID of the variable. This field is not returned for this type of variable.', example='This type does not have this field'),
        description?: string(name='description', description='The description of the variable.', example='累计用户省份次数。'),
        displayType?: string(name='displayType', description='The display type and grouping label.', example='SELF_VELOCITY'),
        expressionTitle?: string(name='expressionTitle', description='The display value of the calculation expression. This field is not returned for this type of variable.', example='This type does not have this field'),
        favoriteFlag?: boolean(name='favoriteFlag', description='The favorite flag.', example='false'),
        fieldDetail?: string(name='fieldDetail', description='The detailed information of the field in the field pool. This field is not returned for this type of variable.', example='This type does not have this field'),
        fieldRank?: int32(name='fieldRank', description='The field rank.', example='0'),
        fieldSource?: string(name='fieldSource', description='The source of the field. This field is not returned for this type of variable.', example='This type does not have this field'),
        fieldType?: string(name='fieldType', description='The type of the field.', example='DOUBLE'),
        id?: long(name='id', description='The primary key ID.', example='3148'),
        inputFieldType?: string(name='inputFieldType', description='The input type of the parameter. This field is not returned for this type of variable.', example='This type does not have this field'),
        inputRequired?: string(name='inputRequired', description='The required parameter. This field is not returned for this type of variable.', example='This type does not have this field'),
        inputs?: string(name='inputs', description='Multiple input parameters separated by commas. This field is not returned for this type of variable.', example='This type does not have this field'),
        name?: string(name='name', description='The name of the variable.', example='hFsEFUEe88a'),
        outlier?: string(name='outlier', description='The outlier value. This field is not returned for this type of variable.', example='This type does not have this field'),
        outputThreshold?: {
          maxValue?: double(name='maxValue', description='The maximum value.', example='10'),
          minValue?: double(name='minValue', description='The minimum value.', example='1'),
        }(name='outputThreshold', description='The output value threshold.'),
        parentName?: string(name='parentName', description='The parent node. This field is not returned for this type of variable.', example='This type does not have this field'),
        sourceType?: string(name='sourceType', description='The source type.', example='SAF_SELF'),
        title?: string(name='title', description='The title of the variable.', example='累计用户省份次数'),
        type?: string(name='type', description='The type of the variable.', example='SELF_VELOCITY'),
        variableVelocity?: {
          iv?: string(name='iv', description='The IV value. This field is not returned for this type of variable.', example='This type does not have this field'),
        }(name='variableVelocity', description='The variable metric information. This field is not returned for this type of variable.'),
        xLabel?: string(name='xLabel', description='The X label. This field is not returned for this type of variable.', example='This type does not have this field'),
        yLabel?: string(name='yLabel', description='The Y label. This field is not returned for this type of variable.', example='This type does not have this field'),
      }
    ](name='velocityVariables', description='An array of accumulated variables.'),
  }(name='resultObject', description='Return object.'),
}

model DescribeEventVariableListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEventVariableListResponseBody(name='body'),
}

/**
  * @description Cumulative Variable List Query
  * @param request  the request parameters of DescribeEventVariableList  DescribeEventVariableListRequest
  * @return DescribeEventVariableListResponse
 */
async function describeEventVariableList(request: DescribeEventVariableListRequest): DescribeEventVariableListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEventVariableList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEventVariableTemplateBindRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages. Default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  inputs: string(name='inputs', description='Input parameters, separated by commas if multiple.

This parameter is required.', example='age,ip', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  templateCode?: string(name='templateCode', description='Template code.', example='register', position='Query'),
  type: string(name='type', description='Type

This parameter is required.', example='NATIVE', position='Query'),
}

model DescribeEventVariableTemplateBindResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    chargeVariables?: [ 
      {
        code?: string(name='code', description='Variable code', example='ip'),
        description?: string(name='description', description='Description of the variable.', example='描述'),
        fieldType?: string(name='fieldType', description='Field type.', example='STRING'),
        id?: long(name='id', description='Primary key ID', example='456'),
        name?: string(name='name', description='Variable name', example='ip'),
        title?: string(name='title', description='Title.', example='ip'),
        type?: string(name='type', description='Variable type.', example='NATIVE'),
      }
    ](name='chargeVariables', description='List of chargeable variables'),
    freeVariables?: [ 
      {
        code?: string(name='code', description='Variable code', example='age'),
        description?: string(name='description', description='Variable description.', example='描述'),
        fieldType?: string(name='fieldType', description='Field type.', example='STRING'),
        id?: long(name='id', description='Primary key ID', example='234'),
        name?: string(name='name', description='Variable name', example='age'),
        title?: string(name='title', description='Title.', example='年龄'),
        type?: string(name='type', description='Variable type.', example='NATIVE'),
      }
    ](name='freeVariables', description='List of free variables'),
    templateCode?: string(name='templateCode', description='Template code', example='register'),
    totalCount?: string(name='totalCount', description='Total count', example='38'),
  }(name='resultObject', description='Return object'),
}

model DescribeEventVariableTemplateBindResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEventVariableTemplateBindResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeEventVariableTemplateBind  DescribeEventVariableTemplateBindRequest
  * @return DescribeEventVariableTemplateBindResponse
 */
async function describeEventVariableTemplateBind(request: DescribeEventVariableTemplateBindRequest): DescribeEventVariableTemplateBindResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEventVariableTemplateBind', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEventVariableTemplateListRequest {
  lang?: string(name='Lang', description='Sets the language type for the request and response messages. The default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  inputs?: string(name='inputs', description='Input parameters, separated by commas.', example='age,ip', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  templateCode?: string(name='templateCode', description='Template code.', example='register', position='Query'),
  type?: string(name='type', description='Template type.', example='NATIVE', position='Query'),
}

model DescribeEventVariableTemplateListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: [ 
    {
      templateCode?: string(name='templateCode', description='Template code.', example='register'),
      templateName?: string(name='templateName', description='Template name.', example='注册模版'),
      variables?: [ 
        {
          code?: string(name='code', description='Variable code', example='age'),
          description?: string(name='description', description='Description information.', example='描述'),
          fieldType?: string(name='fieldType', description='Variable input type', example='STRING'),
          id?: long(name='id', description='Primary key ID', example='454'),
          name?: string(name='name', description='Variable name', example='age'),
          title?: string(name='title', description='Title.', example='年龄'),
          type?: string(name='type', description='Variable type.', example='NATIVE'),
        }
      ](name='variables', description='Variable list.'),
    }
  ](name='resultObject', description='Return object'),
}

model DescribeEventVariableTemplateListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEventVariableTemplateListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeEventVariableTemplateList  DescribeEventVariableTemplateListRequest
  * @return DescribeEventVariableTemplateListResponse
 */
async function describeEventVariableTemplateList(request: DescribeEventVariableTemplateListRequest): DescribeEventVariableTemplateListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEventVariableTemplateList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEventsVariableListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  createType?: string(name='createType', description='Creation type', example='NORMAL', position='Query'),
  eventCodes: string(name='eventCodes', description='Event code.

This parameter is required.', example='de_afghcf6411', position='Query'),
  filterDTO?: string(name='filterDTO', description='Filter object', example='{\\"type\\":\\"EXPRESSION\\",\\"name\\":\\"ex_NgR6nDVD821c\\"}', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  scene: string(name='scene', description='Applicable scene code

This parameter is required.', example='VELOCITY', position='Query'),
}

model DescribeEventsVariableListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DescribeEventsVariableListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEventsVariableListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeEventsVariableList  DescribeEventsVariableListRequest
  * @return DescribeEventsVariableListResponse
 */
async function describeEventsVariableList(request: DescribeEventsVariableListRequest): DescribeEventsVariableListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEventsVariableList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeExcuteNumRequest {
  code: string(name='Code', description='Service code.

This parameter is required.', example='saf_all', position='Query'),
  degree?: string(name='Degree', description='This field is currently unused and has no query significance.', example='暂时不需要传入', position='Query'),
  endDate?: string(name='EndDate', description='End date, format yyyy-MM-dd, e.g., 2025-03-13.', example='2025-03-15', position='Query'),
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  sourceIp?: string(name='SourceIp', description='Request source IP address.', example='220.250.21.83', position='Query'),
  startDate?: string(name='StartDate', description='Start date, format yyyy-MM-dd, e.g., 2025-03-10.', example='2025-03-10', position='Query'),
}

model DescribeExcuteNumResponseBody = {
  categories?: [ string ](name='Categories', description='Service category names.'),
  data?: [ string ](name='Data', description='Returned data.'),
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
}

model DescribeExcuteNumResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeExcuteNumResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeExcuteNum  DescribeExcuteNumRequest
  * @return DescribeExcuteNumResponse
 */
async function describeExcuteNum(request: DescribeExcuteNumRequest): DescribeExcuteNumResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeExcuteNum', 'POST', '/', 'json', false, 'json', request);
}

model DescribeExistNameRequest {
  lang?: string(name='Lang', description='Set the language type for request and response messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  name?: string(name='name', description='Variable name', example='age', position='Query'),
  regId: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DescribeExistNameResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DescribeExistNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeExistNameResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeExistName  DescribeExistNameRequest
  * @return DescribeExistNameResponse
 */
async function describeExistName(request: DescribeExistNameRequest): DescribeExistNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeExistName', 'POST', '/', 'json', false, 'json', request);
}

model DescribeExistSceneRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  sceneName?: string(name='SceneName', description='Scene name.', example='样本调度', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeExistSceneResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  data?: boolean(name='data', description='Data object', example='true'),
}

model DescribeExistSceneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeExistSceneResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeExistScene  DescribeExistSceneRequest
  * @return DescribeExistSceneResponse
 */
async function describeExistScene(request: DescribeExistSceneRequest): DescribeExistSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeExistScene', 'POST', '/', 'json', false, 'json', request);
}

model DescribeExpressionVariableDetailRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  id: long(name='id', description='Primary key ID

This parameter is required.', example='334', position='Query'),
  regId: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DescribeExpressionVariableDetailResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: map[string]any(name='resultObject', description='Returned object', example='true'),
}

model DescribeExpressionVariableDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeExpressionVariableDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeExpressionVariableDetail  DescribeExpressionVariableDetailRequest
  * @return DescribeExpressionVariableDetailResponse
 */
async function describeExpressionVariableDetail(request: DescribeExpressionVariableDetailRequest): DescribeExpressionVariableDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeExpressionVariableDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeExpressionVariableFunctionListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DescribeExpressionVariableFunctionListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='6E8817D5-5354-5953-84B1-D98379F036DC'),
  resultObject?: [ 
    {
      description?: string(name='description', description='Description information.', example='描述'),
      key?: string(name='key', description='Function name', example='concat'),
      maxParamSize?: long(name='maxParamSize', description='Maximum number of parameters', example='4'),
      minParamSize?: long(name='minParamSize', description='Minimum number of parameters', example='2'),
      paramTypes?: string(name='paramTypes', description='Parameter types', example='*STRING'),
      redirect?: boolean(name='redirect', description='Whether it is directly invoked', example='true'),
      returnTypes?: string(name='returnTypes', description='Method return types', example='STRING'),
      value?: string(name='value', description='Function value', example='concat'),
    }
  ](name='resultObject', description='Return object'),
}

model DescribeExpressionVariableFunctionListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeExpressionVariableFunctionListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeExpressionVariableFunctionList  DescribeExpressionVariableFunctionListRequest
  * @return DescribeExpressionVariableFunctionListResponse
 */
async function describeExpressionVariableFunctionList(request: DescribeExpressionVariableFunctionListRequest): DescribeExpressionVariableFunctionListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeExpressionVariableFunctionList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeExpressionVariablePageRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  currentPage: string(name='currentPage', description='Current page number.

This parameter is required.', example='1', position='Query'),
  eventCode?: string(name='eventCode', description='Event code.', example='de_aamexg3015,de_aamexg3342', position='Query'),
  outputs?: string(name='outputs', description='Variable return type.', example='STRING', position='Query'),
  pageSize: string(name='pageSize', description='Page size, with a default value of 10.

This parameter is required.', example='10', position='Query'),
  regId: string(name='regId', description='Region code.

This parameter is required.', example='cn-hangzhou', position='Query'),
  status?: string(name='status', description='Status.', example='ENABLE', position='Query'),
  value?: string(name='value', description='Variable name/description.', example='自定义变量', position='Query'),
}

model DescribeExpressionVariablePageResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, with a default value of 10.', example='10'),
  resultObject?: [ 
    {
      description?: string(name='description', description='Description information.', example='变量描述'),
      eventName?: string(name='eventName', description='Event name.', example='注册风险'),
      gmtModified?: long(name='gmtModified', description='Modification time.', example='1565701886000'),
      id?: long(name='id', description='Primary key of custom variable.', example='2793'),
      name?: string(name='name', description='Query variable name.', example='ex_OERlw0Zqfb23'),
      outputs?: string(name='outputs', description='Variable return type.', example='DOUBLE'),
      ruleList?: [ string ](name='ruleList', description='Associated Strategies.'),
      status?: string(name='status', description='Status.', example='ENABLE'),
      title?: string(name='title', description='Title.', example='获取手机号前7位自定义变量'),
      version?: long(name='version', description='Version information.', example='1'),
    }
  ](name='resultObject', description='Returned object.'),
  totalItem?: int32(name='totalItem', description='Total number of items.', example='31'),
  totalPage?: int32(name='totalPage', description='Total number of pages.', example='9'),
}

model DescribeExpressionVariablePageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeExpressionVariablePageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeExpressionVariablePage  DescribeExpressionVariablePageRequest
  * @return DescribeExpressionVariablePageResponse
 */
async function describeExpressionVariablePage(request: DescribeExpressionVariablePageRequest): DescribeExpressionVariablePageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeExpressionVariablePage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFieldByIdRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  id?: long(name='id', description='Primary key ID', example='223', position='Query'),
  regId: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DescribeFieldByIdResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Returned object', example='true'),
}

model DescribeFieldByIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFieldByIdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeFieldById  DescribeFieldByIdRequest
  * @return DescribeFieldByIdResponse
 */
async function describeFieldById(request: DescribeFieldByIdRequest): DescribeFieldByIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFieldById', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFieldListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  condition?: string(name='condition', description='Query input name or title', example='ip', position='Query'),
  inputs?: string(name='inputs', description='Selected fields', example='sex,ip,id', position='Query'),
  regId: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DescribeFieldListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10', example='10'),
  resultObject?: [ 
    {
      classify?: string(name='classify', description='Field classification', example='REQUEST_PARAM'),
      description?: string(name='description', description='Description information.', example='描述'),
      enumData?: string(name='enumData', description='Enum data', example='STATUS'),
      id?: long(name='id', description='Field ID.', example='497'),
      name?: string(name='name', description='Field name', example='age'),
      source?: string(name='source', description='Field source', example='DEFINE'),
      status?: string(name='status', description='Status.', example='ENABLE'),
      title?: string(name='title', description='Title.', example='年龄'),
      type?: string(name='type', description='Field type', example='STRING'),
    }
  ](name='resultObject', description='Returned object'),
  totalItem?: int32(name='totalItem', description='Total number of items', example='101'),
  totalPage?: int32(name='totalPage', description='Total number of pages', example='9'),
}

model DescribeFieldListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFieldListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeFieldList  DescribeFieldListRequest
  * @return DescribeFieldListResponse
 */
async function describeFieldList(request: DescribeFieldListRequest): DescribeFieldListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFieldList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFieldPageRequest {
  lang?: string(name='Lang', description='Set the language type for request and response messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  classify?: string(name='classify', description='Field classification', example='REQUEST_PARAM', position='Query'),
  condition?: string(name='condition', description='Query input parameter name or title', example='age/年龄', position='Query'),
  currentPage?: string(name='currentPage', description='Current page number', example='1', position='Query'),
  name?: string(name='name', description='Field name', example='age', position='Query'),
  pageSize?: string(name='pageSize', description='Number of items per page, default value is 10', example='10', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  source?: string(name='source', description='Field source', example='DEFINE', position='Query'),
  status?: string(name='status', description='Status.', example='ENABLE', position='Query'),
  title?: string(name='title', description='Title.', example='年龄', position='Query'),
  type?: string(name='type', description='Field type', example='STRING', position='Query'),
}

model DescribeFieldPageResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number', example='1'),
  pageSize?: int32(name='pageSize', description='Number of items per page, default value is 10', example='10'),
  resultObject?: [ 
    {
      classify?: string(name='classify', description='Field classification', example='REQUEST_PARAM'),
      description?: string(name='description', description='Description information.', example='描述'),
      enumData?: string(name='enumData', description='Enum data', example='STATUS'),
      id?: long(name='id', description='Unique table ID.', example='497'),
      name?: string(name='name', description='Field name', example='age'),
      source?: string(name='source', description='File source.', example='DEFINE'),
      status?: string(name='status', description='Status.', example='ENABLE'),
      title?: string(name='title', description='Title.', example='年龄'),
      type?: string(name='type', description='Field type', example='STRING'),
    }
  ](name='resultObject', description='Returned object'),
  totalItem?: int32(name='totalItem', description='Total number of items', example='40'),
  totalPage?: int32(name='totalPage', description='Total number of pages.', example='4'),
}

model DescribeFieldPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFieldPageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeFieldPage  DescribeFieldPageRequest
  * @return DescribeFieldPageResponse
 */
async function describeFieldPage(request: DescribeFieldPageRequest): DescribeFieldPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFieldPage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGroupAccountPageRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  communityNo?: string(name='communityNo', description='Community number.', example='129838420210118141502KiJ1SZL2', position='Query'),
  currentPage?: string(name='currentPage', description='Current page number.', example='1', position='Query'),
  direction?: string(name='direction', description='Order direction.', example='0', position='Query'),
  fieldKey?: string(name='fieldKey', description='fieldKey.', example='mobile', position='Query'),
  fieldVal?: string(name='fieldVal', description='fieldVal.', example='18000000000', position='Query'),
  isPage?: boolean(name='isPage', description='Whether to paginate.', example='true', position='Query'),
  order?: string(name='order', description='Sorting condition.', example='asc', position='Query'),
  pageSize?: string(name='pageSize', description='Page size, default value is 10.', example='10', position='Query'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou', position='Query'),
  taskId?: string(name='taskId', description='Task ID.', example='6770764', position='Query'),
}

model DescribeGroupAccountPageResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  data?: boolean(name='data', description='Returned data object.', example='true'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10.', example='10'),
  totalItem?: int32(name='totalItem', description='Total number of items.', example='6'),
  totalPage?: int32(name='totalPage', description='Total number of pages.', example='1'),
}

model DescribeGroupAccountPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGroupAccountPageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeGroupAccountPage  DescribeGroupAccountPageRequest
  * @return DescribeGroupAccountPageResponse
 */
async function describeGroupAccountPage(request: DescribeGroupAccountPageRequest): DescribeGroupAccountPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGroupAccountPage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGroupConditionListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and responses, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeGroupConditionListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: [ 
    {
      fieldKey?: string(name='fieldKey', description='Field key', example='key'),
      fieldValue?: string(name='fieldValue', description='Field value.', example='value'),
    }
  ](name='resultObject', description='Return object'),
}

model DescribeGroupConditionListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGroupConditionListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeGroupConditionList  DescribeGroupConditionListRequest
  * @return DescribeGroupConditionListResponse
 */
async function describeGroupConditionList(request: DescribeGroupConditionListRequest): DescribeGroupConditionListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGroupConditionList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGroupPageRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and responses, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  currentPage?: string(name='currentPage', description='Current page number.', example='1', position='Query'),
  direction?: string(name='direction', description='Order.', example='0', position='Query'),
  order?: string(name='order', description='Sorting condition.', example='asc', position='Query'),
  pageSize?: string(name='pageSize', description='Page size, with a default value of 10.', example='10', position='Query'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou', position='Query'),
  taskId?: string(name='taskId', description='Task ID.', example='6770764', position='Query'),
  timeType?: string(name='timeType', description='Time type.', example='1', position='Query'),
}

model DescribeGroupPageResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, with a default value of 10.', example='10'),
  resultObject?: [ 
    {
      communityNo?: string(name='communityNo', description='Community number.', example='129838420210118141502RaMMIgVG'),
      createTime?: long(name='createTime', description='Creation time.', example='1699450018265'),
      groupRisk?: string(name='groupRisk', description='Group risk concentration.', example='80'),
      groupScale?: string(name='groupScale', description='Group scale.', example='2'),
      id?: long(name='id', description='Primary key ID.', example='497'),
      sceneName?: string(name='sceneName', description='Scene name.', example='通用图计算'),
      taskId?: long(name='taskId', description='Task ID.', example='6770764'),
      userId?: string(name='userId', description='User UID.', example='1519714049632764'),
    }
  ](name='resultObject', description='Returned object.'),
  totalItem?: int32(name='totalItem', description='Total number of items.', example='3'),
  totalPage?: int32(name='totalPage', description='Total number of pages.', example='1'),
}

model DescribeGroupPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGroupPageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeGroupPage  DescribeGroupPageRequest
  * @return DescribeGroupPageResponse
 */
async function describeGroupPage(request: DescribeGroupPageRequest): DescribeGroupPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGroupPage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGroupStatisticsByTodayRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and responses, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeGroupStatisticsByTodayResponseBody = {
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  data?: boolean(name='data', description='Returned data.', example='true'),
}

model DescribeGroupStatisticsByTodayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGroupStatisticsByTodayResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeGroupStatisticsByToday  DescribeGroupStatisticsByTodayRequest
  * @return DescribeGroupStatisticsByTodayResponse
 */
async function describeGroupStatisticsByToday(request: DescribeGroupStatisticsByTodayRequest): DescribeGroupStatisticsByTodayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGroupStatisticsByToday', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGroupTrendRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  day?: string(name='day', description='day', example='1', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeGroupTrendResponseBody = {
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  data?: boolean(name='data', description='Return result.', example='true'),
}

model DescribeGroupTrendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGroupTrendResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeGroupTrend  DescribeGroupTrendRequest
  * @return DescribeGroupTrendResponse
 */
async function describeGroupTrend(request: DescribeGroupTrendRequest): DescribeGroupTrendResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGroupTrend', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHasRuleNameByEventCodeRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  eventCode?: string(name='eventCode', description='Event code', example='de_atvmlf7412', position='Query'),
  excludeRuleId?: string(name='excludeRuleId', description='Excluded policy ID', example='10621', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  ruleName?: string(name='ruleName', description='Policy name', example='非常见设备', position='Query'),
}

model DescribeHasRuleNameByEventCodeResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DescribeHasRuleNameByEventCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeHasRuleNameByEventCodeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeHasRuleNameByEventCode  DescribeHasRuleNameByEventCodeRequest
  * @return DescribeHasRuleNameByEventCodeResponse
 */
async function describeHasRuleNameByEventCode(request: DescribeHasRuleNameByEventCodeRequest): DescribeHasRuleNameByEventCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHasRuleNameByEventCode', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHighRiskPieChartRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages. Default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  beginTime: long(name='beginTime', description='Start time, accurate to milliseconds (ms).

This parameter is required.', example='1737101348000', position='Query'),
  endTime: long(name='endTime', description='End time, accurate to milliseconds (ms).

This parameter is required.', example='1730453400000', position='Query'),
  eventCodes?: string(name='eventCodes', description='Event code.', example='de_ahqhsw7665,de_agbzfi5134', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeHighRiskPieChartResponseBody = {
  code?: string(name='code', description='Status code', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error details', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: {
    highRiskIPCity?: {
      animation?: boolean(name='animation', description='Chart flag, default true', example='true'),
      grid?: {
        show?: boolean(name='show', description='Chart flag, default false', example='false'),
      }(name='grid', description='Belonging grid.'),
      series?: [ 
        {
          data?: [ 
            {
              name?: string(name='name', description='Field name', example='杭州市'),
              value?: string(name='value', description='Data value', example='100'),
            }
          ](name='data', description='Returned data object'),
          name?: string(name='name', description='Field name', example='杭州市'),
          roseType?: string(name='roseType', description='Chart identifier, default is false', example='false'),
        }
      ](name='series', description='Chart data'),
    }(name='highRiskIPCity', description='High-risk IP city'),
    highRiskIPProvince?: {
      animation?: boolean(name='animation', description='Chart identifier, default is true', example='true'),
      grid?: {
        show?: boolean(name='show', description='Chart identifier, default is false', example='false'),
      }(name='grid', description='Belonging grid.'),
      series?: [ 
        {
          data?: [ 
            {
              name?: string(name='name', description='Variable name', example='浙江省'),
              value?: string(name='value', description='Data value', example='100'),
            }
          ](name='data', description='Returned data object'),
          name?: string(name='name', description='Field name', example='浙江省'),
          roseType?: string(name='roseType', description='Chart identifier, default is false', example='false'),
        }
      ](name='series', description='Chart data'),
    }(name='highRiskIPProvince', description='High-risk IP归属province'),
    highRiskMobileCity?: {
      animation?: boolean(name='animation', description='Chart flag, default is true', example='true'),
      grid?: {
        show?: boolean(name='show', description='Chart flag, default is false', example='false'),
      }(name='grid', description='Belongs to grid.'),
      series?: [ 
        {
          data?: [ 
            {
              name?: string(name='name', description='Field name', example='杭州市'),
              value?: string(name='value', description='Data value', example='100'),
            }
          ](name='data', description='Returned data object'),
          name?: string(name='name', description='Field name', example='杭州市'),
          roseType?: string(name='roseType', description='Chart flag, default is false', example='false'),
        }
      ](name='series', description='Chart data'),
    }(name='highRiskMobileCity', description='High-risk mobile phone归属city'),
    highRiskMobileProvince?: {
      animation?: boolean(name='animation', description='Indicator, default true', example='true'),
      grid?: {
        show?: boolean(name='show', description='Chart flag, default is false', example='false'),
      }(name='grid', description='Belongs to grid.'),
      series?: [ 
        {
          data?: [ 
            {
              name?: string(name='name', description='Field name', example='浙江省'),
              value?: string(name='value', description='Data value', example='100'),
            }
          ](name='data', description='High-risk position data.'),
          name?: string(name='name', description='Display title', example='分值区间占比'),
          roseType?: string(name='roseType', description='Chart identifier, default false', example='false'),
        }
      ](name='series', description='Chart data'),
    }(name='highRiskMobileProvince', description='High-risk mobile phone\\"s province of origin'),
  }(name='resultObject', description='Returned object'),
  success?: boolean(name='success', description='Whether the request was successful.', example='true'),
}

model DescribeHighRiskPieChartResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeHighRiskPieChartResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeHighRiskPieChart  DescribeHighRiskPieChartRequest
  * @return DescribeHighRiskPieChartResponse
 */
async function describeHighRiskPieChart(request: DescribeHighRiskPieChartRequest): DescribeHighRiskPieChartResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHighRiskPieChart', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHitRuleFluctuationRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  eventCodes?: string(name='eventCodes', description='Event codes, separated by commas (,).', example='de_ahqhsw7665,de_agbzfi5134', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  ruleStatus?: string(name='ruleStatus', description='Policy status', example='DRAFT', position='Query'),
}

model DescribeHitRuleFluctuationResponseBody = {
  code?: string(name='code', description='Status code.', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error message.', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: [ 
    {
      ruleId?: string(name='ruleId', description='Policy ID', example='115019'),
      ruleName?: string(name='ruleName', description='Policy name', example='营销风险识别'),
      todayNum?: long(name='todayNum', description='Today\\"s count', example='100'),
      withinSevenDayNum?: string(name='withinSevenDayNum', description='Count within seven days', example='600'),
      withinThirtyDayNum?: string(name='withinThirtyDayNum', description='Count within thirty days', example='1200'),
      withinThreeDayNum?: string(name='withinThreeDayNum', description='Count within three days', example='300'),
      yesterdayNum?: long(name='yesterdayNum', description='Yesterday\\"s count', example='200'),
    }
  ](name='resultObject', description='Return object'),
  success?: boolean(name='success', description='Whether the request was successful.', example='true'),
}

model DescribeHitRuleFluctuationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeHitRuleFluctuationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeHitRuleFluctuation  DescribeHitRuleFluctuationRequest
  * @return DescribeHitRuleFluctuationResponse
 */
async function describeHitRuleFluctuation(request: DescribeHitRuleFluctuationRequest): DescribeHitRuleFluctuationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHitRuleFluctuation', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHitRuleListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  beginTime?: long(name='beginTime', description='Start time, accurate to milliseconds (ms).', example='1737101348000', position='Query'),
  endTime?: long(name='endTime', description='End time, accurate to milliseconds (ms).', example='1752027960000', position='Query'),
  eventCodes?: string(name='eventCodes', description='Event codes, separated by commas if multiple.', example='de_ahqhsw7665,de_ahqhsw7622', position='Query'),
  eventType?: string(name='eventType', description='Event type', example='MAIN', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeHitRuleListResponseBody = {
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: [ 
    {
      hitCount?: int32(name='hitCount', description='Number of hits.', example='100'),
      ruleName?: string(name='ruleName', description='Strategy name', example='营销风险识别'),
    }
  ](name='resultObject', description='Response object'),
}

model DescribeHitRuleListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeHitRuleListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeHitRuleList  DescribeHitRuleListRequest
  * @return DescribeHitRuleListResponse
 */
async function describeHitRuleList(request: DescribeHitRuleListRequest): DescribeHitRuleListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHitRuleList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHitRuleTrendRequest {
  lang?: string(name='Lang', description='Sets the language type for the request and response messages. Default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  beginTime?: long(name='beginTime', description='Start time, accurate to milliseconds (ms).', example='1737101348000', position='Query'),
  endTime?: long(name='endTime', description='End time, accurate to milliseconds (ms).', example='1746669075000', position='Query'),
  eventCodes?: string(name='eventCodes', description='Event codes, separated by commas (,).', example='de_ahqhsw7665,de_agbzfi5134', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  ruleStatus?: string(name='ruleStatus', description='Rule status', example='DRAFT', position='Query'),
}

model DescribeHitRuleTrendResponseBody = {
  code?: string(name='code', description='Status code', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error details', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: {
    series?: [ 
      {
        data?: [ 
          {
            num?: long(name='num', description='Number', example='50'),
            scale?: string(name='scale', description='Scale', example='10.00%'),
          }
        ](name='data', description='Returned data object'),
        name?: string(name='name', description='Display title', example='策略name'),
      }
    ](name='series', description='Chart data'),
    xaxis?: {
      data?: [ string ](name='data', description='Returned data object'),
    }(name='xaxis', description='X-axis data'),
  }(name='resultObject', description='Response object'),
  success?: boolean(name='success', description='Indicates whether the operation was successful, where true means success.', example='true'),
}

model DescribeHitRuleTrendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeHitRuleTrendResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeHitRuleTrend  DescribeHitRuleTrendRequest
  * @return DescribeHitRuleTrendResponse
 */
async function describeHitRuleTrend(request: DescribeHitRuleTrendRequest): DescribeHitRuleTrendResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHitRuleTrend', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInitDigRequest {
  lang?: string(name='Lang', description='Set the language type for request and response messages. Default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='RegId', description='Region code', example='cn-hangzhou', position='Query'),
  type: string(name='Type', description='Data source type

This parameter is required.', example='SAF_CONSOLE', position='Query'),
}

model DescribeInitDigResponseBody = {
  requestId?: string(name='RequestId', description='ID of the request', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    tipInfo?: string(name='TipInfo', description='Prompt information', example='阿里云内部测试'),
  }(name='ResultObject', description='Returned result information'),
}

model DescribeInitDigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInitDigResponseBody(name='body'),
}

/**
  * @description Add prompt information in BOPS, POC new page initialization popup prompts this information
  * @param request  the request parameters of DescribeInitDig  DescribeInitDigRequest
  * @return DescribeInitDigResponse
 */
async function describeInitDig(request: DescribeInitDigRequest): DescribeInitDigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInitDig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInputFeildCountByEventCodeRequest {
  lang?: string(name='Lang', description='Set the language type for request and response, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  createType?: string(name='createType', description='Creation type', example='NORMAL', position='Query'),
  eventCode?: string(name='eventCode', description='Event code', example='de_ahqido8038', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeInputFeildCountByEventCodeResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    limit?: boolean(name='limit', description='Whether it exceeds the maximum quantity', example='true'),
    maxTotalItem?: int32(name='maxTotalItem', description='Maximum number of created items', example='100'),
    totalItem?: int32(name='totalItem', description='Total number of items', example='8'),
  }(name='resultObject', description='Return object'),
}

model DescribeInputFeildCountByEventCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInputFeildCountByEventCodeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeInputFeildCountByEventCode  DescribeInputFeildCountByEventCodeRequest
  * @return DescribeInputFeildCountByEventCodeResponse
 */
async function describeInputFeildCountByEventCode(request: DescribeInputFeildCountByEventCodeRequest): DescribeInputFeildCountByEventCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInputFeildCountByEventCode', 'POST', '/', 'json', false, 'json', request);
}

model DescribeListModelRequest {
  currentPage?: long(name='CurrentPage', description='Current page number.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='Number of items per page.', example='10', position='Query'),
  regId?: string(name='RegId', description='Region code.', example='cn-hangzhou', position='Query'),
}

model DescribeListModelResponseBody = {
  currentPage?: string(name='CurrentPage', description='Current page number.', example='1'),
  pageSize?: string(name='PageSize', description='Number of items per page.', example='30'),
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: [ 
    {
      bucId?: string(name='bucId', description='Uploader ID.', example='011786'),
      createTime?: string(name='createTime', description='Creation time.', example='2025-05-07T02:26:01Z'),
      modelCode?: string(name='modelCode', description='Model code.', example='code'),
      modelId?: string(name='modelId', description='Unique identifier of the model in use.', example='qwen-plus'),
      modelName?: string(name='modelName', description='Model name.', example='custom_model'),
      modelScene?: string(name='modelScene', description='Model scenario.', example='custom_scene'),
      modelStatus?: string(name='modelStatus', description='Model status, values: -**ENABLED**: Enabled-**DISABLED**: Disabled', example='ENABLED'),
      taskId?: string(name='taskId', description='Task ID.', example='0c8a3799-5ac8-434b-b255-e06edb35c05f'),
      updateTime?: string(name='updateTime', description='Last update time of the model.', example='2024-11-18T02:07:00Z'),
      userId?: string(name='userId', description='User ID.', example='1806507582222226'),
      userLocalFileName?: string(name='userLocalFileName', description='File name.', example='saf-ai-1662519103706.csv'),
    }
  ](name='ResultObject', description='Returned data.'),
  totalItem?: string(name='TotalItem', description='Total number of records.', example='1'),
  totalPage?: string(name='TotalPage', description='Total number of pages.', example='1'),
}

model DescribeListModelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeListModelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeListModel  DescribeListModelRequest
  * @return DescribeListModelResponse
 */
async function describeListModel(request: DescribeListModelRequest): DescribeListModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeListModel', 'POST', '/', 'json', false, 'json', request);
}

model DescribeListPocRequest {
  currentPage?: long(name='CurrentPage', description='Current page number.', example='1', position='Query'),
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  pageSize?: long(name='PageSize', description='Page size.', example='30', position='Query'),
  regId?: string(name='RegId', description='Region code', example='cn-hangzhou', position='Query'),
  type?: string(name='Type', description='Type', example='SAF_CONSOLE', position='Query'),
}

model DescribeListPocResponseBody = {
  code?: string(name='Code', description='Status code.', example='200'),
  currentPage?: string(name='CurrentPage', description='Current page.', example='1'),
  httpStatusCode?: string(name='HttpStatusCode', description='HTTP status code.', example='200'),
  message?: string(name='Message', description='Return message.', example='successful'),
  pageSize?: string(name='PageSize', description='Page size.', example='10'),
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='ResultObject', description='Return result.', example='true'),
  totalItem?: string(name='TotalItem', description='Total number of items returned.', example='0'),
  totalPage?: string(name='TotalPage', description='Total number of pages.', example='0'),
}

model DescribeListPocResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeListPocResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeListPoc  DescribeListPocRequest
  * @return DescribeListPocResponse
 */
async function describeListPoc(request: DescribeListPocRequest): DescribeListPocResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeListPoc', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLoanExecListRequest {
  lang?: string(name='Lang', description='Set the language type for request and response messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  batchNo?: string(name='batchNo', description='Import batch number.', example='1', position='Query'),
  currentPage?: string(name='currentPage', description='Current page number.', example='1', position='Query'),
  monitorObj?: string(name='monitorObj', description='Monitoring metric data.', example='de_afghcf6411', position='Query'),
  monitorStatus?: string(name='monitorStatus', description='Status', example='WAIT', position='Query'),
  pageSize?: string(name='pageSize', description='Page size, with a default value of 10.', example='10', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeLoanExecListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, with a default value of 10.', example='10'),
  resultObject?: boolean(name='resultObject', description='Return object.', example='true'),
  totalItem?: int32(name='totalItem', description='Total number of items.', example='6'),
  totalPage?: int32(name='totalPage', description='Total number of pages.', example='1'),
}

model DescribeLoanExecListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeLoanExecListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeLoanExecList  DescribeLoanExecListRequest
  * @return DescribeLoanExecListResponse
 */
async function describeLoanExecList(request: DescribeLoanExecListRequest): DescribeLoanExecListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLoanExecList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLoanTaskListRequest {
  lang?: string(name='Lang', description='Set the language type for request and response messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  batchNo?: string(name='batchNo', description='Import batch number.', example='1', position='Query'),
  currentPage?: string(name='currentPage', description='Current page number. Default is: 1.', example='1', position='Query'),
  monitorStatus?: string(name='monitorStatus', description='Task status.', example='WAIT', position='Query'),
  pageSize?: string(name='pageSize', description='Page size, default value is 10.', example='20', position='Query'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou', position='Query'),
}

model DescribeLoanTaskListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10.', example='10'),
  resultObject?: boolean(name='resultObject', description='Return object.', example='true'),
  totalItem?: int32(name='totalItem', description='Total number of items.', example='6'),
  totalPage?: int32(name='totalPage', description='Total number of pages.', example='1'),
}

model DescribeLoanTaskListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeLoanTaskListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeLoanTaskList  DescribeLoanTaskListRequest
  * @return DescribeLoanTaskListResponse
 */
async function describeLoanTaskList(request: DescribeLoanTaskListRequest): DescribeLoanTaskListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLoanTaskList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMarkPageRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  currentPage?: string(name='currentPage', description='Current page number.', example='1', position='Query'),
  direction?: string(name='direction', description='Order direction.', example='0', position='Query'),
  isPage?: boolean(name='isPage', description='Whether to paginate.', example='true', position='Query'),
  order?: string(name='order', description='Sorting condition.', example='asc', position='Query'),
  pageSize?: string(name='pageSize', description='Page size, default value is 10.', example='10', position='Query'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou', position='Query'),
  taskLogId?: string(name='taskLogId', description='Task ID.', example='443', position='Query'),
}

model DescribeMarkPageResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10.', example='10'),
  resultObject?: [ 
    {
      fieldName?: string(name='fieldName', description='Field name.', example='mobile'),
      fieldValue?: string(name='fieldValue', description='Field value.', example='18000000000'),
      id?: long(name='id', description='Primary key ID.', example='2793'),
      markType?: string(name='markType', description='Mark (0 No / 1 Yes).', example='1'),
    }
  ](name='resultObject', description='Returned object.'),
  totalItem?: int32(name='totalItem', description='Total number of items.', example='6'),
  totalPage?: int32(name='totalPage', description='Total number of pages.', example='1'),
}

model DescribeMarkPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMarkPageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeMarkPage  DescribeMarkPageRequest
  * @return DescribeMarkPageResponse
 */
async function describeMarkPage(request: DescribeMarkPageRequest): DescribeMarkPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMarkPage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMenuPermissionRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and responses, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  permissionType?: string(name='permissionType', description='Permission type', example='MENU', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeMenuPermissionResponseBody = {
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DescribeMenuPermissionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMenuPermissionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeMenuPermission  DescribeMenuPermissionRequest
  * @return DescribeMenuPermissionResponse
 */
async function describeMenuPermission(request: DescribeMenuPermissionRequest): DescribeMenuPermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMenuPermission', 'POST', '/', 'json', false, 'json', request);
}

model DescribeModelDetailsByIdRequest {
  modelId: string(name='ModelId', description='Model ID.

This parameter is required.', example='20619', position='Query'),
  regId?: string(name='RegId', description='Region code.', example='cn-hangzhou', position='Query'),
}

model DescribeModelDetailsByIdResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: [ 
    {
      modelEffectEvaluation?: string(name='modelEffectEvaluation', description='Model prediction result.', example='{\\"AUC\\":0.9895246624946594,\\"Count\\":2489,\\"DecisionMark\\":[0.0,0.0010000000474974513,0.05287817938420348,0.0]}'),
    }
  ](name='ResultObject', description='Returned result information'),
}

model DescribeModelDetailsByIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeModelDetailsByIdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeModelDetailsById  DescribeModelDetailsByIdRequest
  * @return DescribeModelDetailsByIdResponse
 */
async function describeModelDetailsById(request: DescribeModelDetailsByIdRequest): DescribeModelDetailsByIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeModelDetailsById', 'POST', '/', 'json', false, 'json', request);
}

model DescribeModelOssPolicyRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou', position='Query'),
}

model DescribeModelOssPolicyResponseBody = {
  accessId?: string(name='AccessId', description='Access ID for OSS.', example='LTAxxxxxxxxxxxx'),
  host?: string(name='Host', description='Address.', example='https://xxxxxxxx-xxxxxxx.aliyuncs.com'),
  key?: string(name='Key', description='OSS access key secret.', example='saf/a/uid/ccc'),
  message?: string(name='Message', description='Error message.', example='success'),
  policy?: string(name='Policy', description='The policy for user form upload, which is a base64-encoded string.', example='eyJleHBpxxxxxx'),
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  signature?: string(name='Signature', description='Signature information.', example='tzl1wL4q8rR/xxxxxx'),
  resultObject?: boolean(name='resultObject', description='Return result.', example='true'),
}

model DescribeModelOssPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeModelOssPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeModelOssPolicy  DescribeModelOssPolicyRequest
  * @return DescribeModelOssPolicyResponse
 */
async function describeModelOssPolicy(request: DescribeModelOssPolicyRequest): DescribeModelOssPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeModelOssPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMonitorTaskLimitRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeMonitorTaskLimitResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    limit?: boolean(name='limit', description='Whether the maximum limit has been reached', example='false'),
    maxTotalItem?: int32(name='maxTotalItem', description='Maximum number of items', example='1000'),
    totalItem?: int32(name='totalItem', description='Total number of items', example='5'),
  }(name='resultObject', description='Returned object'),
}

model DescribeMonitorTaskLimitResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMonitorTaskLimitResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeMonitorTaskLimit  DescribeMonitorTaskLimitRequest
  * @return DescribeMonitorTaskLimitResponse
 */
async function describeMonitorTaskLimit(request: DescribeMonitorTaskLimitRequest): DescribeMonitorTaskLimitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMonitorTaskLimit', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNameListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  createType?: string(name='createType', description='Creation type.', example='NORMAL', position='Query'),
  currentPage?: string(name='currentPage', description='Current page number.', example='1', position='Query'),
  pageSize?: string(name='pageSize', description='Page size, with a default value of 10.', example='10', position='Query'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou', position='Query'),
  value?: string(name='value', description='Search value.', example='白名单', position='Query'),
  variableId?: string(name='variableId', description='Variable ID.', example='393314', position='Query'),
}

model DescribeNameListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, with a default value of 10.', example='10'),
  resultObject?: [ 
    {
      gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1621578648000'),
      gmtModified?: long(name='gmtModified', description='Modification time.', example='1565701886000'),
      id?: long(name='id', description='Name list content ID.', example='30'),
      identifier?: string(name='identifier', description='Variable identifier.', example='NAME_LIST'),
      title?: string(name='title', description='Title.', example='变量的title'),
      value?: string(name='value', description='Value.', example='321311193502064288'),
      variableId?: long(name='variableId', description='Variable ID.', example='393314'),
    }
  ](name='resultObject', description='Returned object.'),
  totalItem?: int32(name='totalItem', description='Total number of items.', example='6'),
  totalPage?: int32(name='totalPage', description='Total number of pages.', example='1'),
}

model DescribeNameListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNameListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeNameList  DescribeNameListRequest
  * @return DescribeNameListResponse
 */
async function describeNameList(request: DescribeNameListRequest): DescribeNameListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNameList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNameListDownloadUrlRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  variableId: long(name='variableId', description='Variable ID.

This parameter is required.', example='762', position='Query'),
}

model DescribeNameListDownloadUrlResponseBody = {
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: {
    downloadFileUrl?: string(name='downloadFileUrl', description='Download URL.', example='https://xxxxx-oss-xxxxx.xxxxxx.aliyuncs.com/xx/xx/xxx/xxxxxx.csv?Expires=1753433384&OSSAccessKeyId=xxxxxxxxx&Signature=%2F%xxxxxxxxxxxx%3D'),
  }(name='resultObject', description='Returned object'),
}

model DescribeNameListDownloadUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNameListDownloadUrlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeNameListDownloadUrl  DescribeNameListDownloadUrlRequest
  * @return DescribeNameListDownloadUrlResponse
 */
async function describeNameListDownloadUrl(request: DescribeNameListDownloadUrlRequest): DescribeNameListDownloadUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNameListDownloadUrl', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNameListLimitRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  createType?: string(name='createType', description='Creation type', example='NORMAL', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeNameListLimitResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    limit?: boolean(name='limit', description='Whether it exceeds the maximum quantity', example='true'),
    maxTotalItem?: long(name='maxTotalItem', description='Maximum number of creatable items', example='100'),
    totalItem?: long(name='totalItem', description='Total number of items', example='101'),
  }(name='resultObject', description='Return object'),
}

model DescribeNameListLimitResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNameListLimitResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeNameListLimit  DescribeNameListLimitRequest
  * @return DescribeNameListLimitResponse
 */
async function describeNameListLimit(request: DescribeNameListLimitRequest): DescribeNameListLimitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNameListLimit', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNameListPageListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='3', position='Query'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10', example='10', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  updateBeginTime?: long(name='updateBeginTime', description='Update start time.', example='1753372800000', position='Query'),
  updateEndTime?: long(name='updateEndTime', description='Update end time.', example='1753459199059', position='Query'),
  value?: string(name='value', description='Variable name/description', example='白名单', position='Query'),
  variableId: long(name='variableId', description='Variable ID

This parameter is required.', example='762', position='Query'),
}

model DescribeNameListPageListResponseBody = {
  currentPage?: string(name='currentPage', description='Current page number.', example='1'),
  pageSize?: string(name='pageSize', description='Page size, default value is 10', example='10'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: [ 
    {
      gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1621578648000'),
      gmtModified?: long(name='gmtModified', description='Modification time.', example='1565701886000'),
      id?: long(name='id', description='ID of the list variable content data', example='497'),
      memo?: string(name='memo', description='NameList Content memo', example='名单内容描述'),
      name?: string(name='name', description='Variable name', example='nl_UN8otElLb490'),
      nameListType?: string(name='nameListType', description='Variable type', example='accountId'),
      title?: string(name='title', description='Title.', example='白名单'),
      userId?: string(name='userId', description='User UID', example='130433202307074287'),
      value?: string(name='value', description='Variable value', example='130433202307074287'),
      variableId?: long(name='variableId', description='Variable ID.', example='762'),
    }
  ](name='resultObject', description='Returned object'),
  totalItem?: string(name='totalItem', description='Total number of items', example='101'),
  totalPage?: string(name='totalPage', description='Total number of pages', example='9'),
}

model DescribeNameListPageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNameListPageListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeNameListPageList  DescribeNameListPageListRequest
  * @return DescribeNameListPageListResponse
 */
async function describeNameListPageList(request: DescribeNameListPageListRequest): DescribeNameListPageListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNameListPageList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNameListTypeListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeNameListTypeListResponseBody = {
  requestId?: string(name='requestId', description='Request ID', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: [ 
    {
      key?: string(name='key', description='Match Key.', example='accountId'),
      value?: string(name='value', description='Variable value', example='账号ID'),
    }
  ](name='resultObject', description='Returned object'),
}

model DescribeNameListTypeListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNameListTypeListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeNameListTypeList  DescribeNameListTypeListRequest
  * @return DescribeNameListTypeListResponse
 */
async function describeNameListTypeList(request: DescribeNameListTypeListRequest): DescribeNameListTypeListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNameListTypeList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNameListVariablePageListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1', position='Query'),
  name?: string(name='name', description='Variable name', example='age', position='Query'),
  nameListType?: string(name='nameListType', description='Variable type', example='accountId', position='Query'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10', example='10', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  value?: string(name='value', description='Name list value', example='valuexxx', position='Query'),
}

model DescribeNameListVariablePageListResponseBody = {
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10', example='10'),
  requestId?: string(name='requestId', description='Request ID', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: [ 
    {
      capacity?: long(name='capacity', description='Used capacity', example='3'),
      description?: string(name='description', description='Description information.', example='变量描述'),
      gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1621578648000'),
      gmtModified?: long(name='gmtModified', description='Modification time', example='1565701886000'),
      id?: long(name='id', description='Name list ID', example='497'),
      leftCapacity?: long(name='leftCapacity', description='Remaining capacity', example='99997'),
      name?: string(name='name', description='Parameter name.', example='nl_UN8otElLb490'),
      nameListType?: string(name='nameListType', description='Name list type', example='手机号'),
      refObjId?: string(name='refObjId', description='Associated event eventCode', example='-1'),
      refObjType?: long(name='refObjType', description='Association type', example='EVENT'),
      sourceType?: string(name='sourceType', description='Data source', example='SAF'),
      title?: string(name='title', description='Title.', example='白名单'),
      type?: string(name='type', description='Variable type', example='NAME_LIST'),
      userId?: long(name='userId', description='User UID', example='180650758xxxxxxx'),
    }
  ](name='resultObject', description='Return object'),
  totalItem?: int32(name='totalItem', description='Total number of items', example='101'),
  totalPage?: int32(name='totalPage', description='Total number of pages', example='1'),
}

model DescribeNameListVariablePageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNameListVariablePageListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeNameListVariablePageList  DescribeNameListVariablePageListRequest
  * @return DescribeNameListVariablePageListResponse
 */
async function describeNameListVariablePageList(request: DescribeNameListVariablePageListRequest): DescribeNameListVariablePageListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNameListVariablePageList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOperationLogMonitoringRequest {
  lang?: string(name='Lang', description='Language type of the returned message. Values:

- **zh** (default): Chinese
- **en**: English', example='zh', position='Query'),
  endDate?: string(name='endDate', description='End date (in yyyy-MM-dd format, and the interval from the start date cannot exceed 90 days)', example='2025-07-30', position='Query'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou', position='Query'),
  startDate?: string(name='startDate', description='Start date (in yyyy-MM-dd format, and the interval from the current date cannot exceed 90 days)', example='2025-07-19', position='Query'),
  userNameSearch?: string(name='userNameSearch', description='Operator.', example='root', position='Query'),
}

model DescribeOperationLogMonitoringResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: [ 
    {
      dateGrouped?: string(name='dateGrouped', description='Time axis slice.', example='2025-07-19'),
      totalCount?: string(name='totalCount', description='Total count.', example='2'),
    }
  ](name='resultObject', description='Returned object.'),
}

model DescribeOperationLogMonitoringResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOperationLogMonitoringResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeOperationLogMonitoring  DescribeOperationLogMonitoringRequest
  * @return DescribeOperationLogMonitoringResponse
 */
async function describeOperationLogMonitoring(request: DescribeOperationLogMonitoringRequest): DescribeOperationLogMonitoringResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOperationLogMonitoring', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOperationLogPageListRequest {
  lang?: string(name='Lang', description='Set the language type for request and response messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1', position='Query'),
  endDate?: long(name='endDate', description='End time.', example='1733364850919', position='Query'),
  operationSummary?: string(name='operationSummary', description='Operation Summary.', example='Update', position='Query'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10', example='10', position='Query'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou', position='Query'),
  startDate?: long(name='startDate', description='Start time.', example='1733364850919', position='Query'),
  userNameSearch?: string(name='userNameSearch', description='User Name Search.', example='root', position='Query'),
}

model DescribeOperationLogPageListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10', example='10'),
  resultObject?: [ 
    {
      clientIp?: string(name='clientIp', description='Client IP.', example='100.68.***.166'),
      gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1621578648000'),
      newContent?: string(name='newContent', description='Content after operation', example='@selfvariable_02'),
      oldContent?: string(name='oldContent', description='Content before operation', example='@selfvariable_02 + 1001'),
      operationSummary?: string(name='operationSummary', description='Operation summary', example='更新事件:决策引擎可观测性持续建设_事件A(de_afghcf6411)'),
      operationType?: string(name='operationType', description='Operation type.', example='CREATE_EVENT'),
      userName?: string(name='userName', description='Operator', example='root'),
    }
  ](name='resultObject', description='Returned object'),
  totalItem?: int32(name='totalItem', description='Total number of items', example='3'),
  totalPage?: int32(name='totalPage', description='Total number of pages', example='3'),
}

model DescribeOperationLogPageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOperationLogPageListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeOperationLogPageList  DescribeOperationLogPageListRequest
  * @return DescribeOperationLogPageListResponse
 */
async function describeOperationLogPageList(request: DescribeOperationLogPageListRequest): DescribeOperationLogPageListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOperationLogPageList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOperatorListRequest {
  lang?: string(name='Lang', description='Set the language type for request and response messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DescribeOperatorListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: [ 
    {
      fieldType?: string(name='fieldType', description='Return value type', example='STRING'),
      operators?: [ 
        {
          code?: string(name='code', description='Operator code', example='equals'),
          hasRightVariable?: boolean(name='hasRightVariable', description='Whether it contains a right variable', example='true'),
          memo?: string(name='memo', description='Description', example='等于'),
          name?: string(name='name', description='Operator name', example='等于'),
          rightVariables?: [ 
            {
              fieldName?: string(name='fieldName', description='Field name.', example='年龄'),
              fieldType?: string(name='fieldType', description='Field type.', example='INT'),
              fieldValue?: string(name='fieldValue', description='Field value.', example='20'),
            }
          ](name='rightVariables', description='Right variable object'),
        }
      ](name='operators', description='Operator list'),
    }
  ](name='resultObject', description='Return object'),
}

model DescribeOperatorListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOperatorListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeOperatorList  DescribeOperatorListRequest
  * @return DescribeOperatorListResponse
 */
async function describeOperatorList(request: DescribeOperatorListRequest): DescribeOperatorListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOperatorList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOperatorListBySceneRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  scene?: string(name='scene', description='Scene type.', example='VELOCITY', position='Query'),
}

model DescribeOperatorListBySceneResponseBody = {
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: [ 
    {
      fieldType?: string(name='fieldType', description='Return value type', example='STRING'),
      operators?: [ 
        {
          code?: string(name='code', description='Operator code', example='equals'),
          hasRightVariable?: boolean(name='hasRightVariable', description='Whether it contains a right variable', example='true'),
          memo?: string(name='memo', description='Description', example='等于'),
          name?: string(name='name', description='Operator name', example='等于'),
          rightVariables?: [ 
            {
              fieldName?: string(name='fieldName', description='Field name.', example='年龄'),
              fieldType?: string(name='fieldType', description='Field type.', example='INT'),
              fieldValue?: string(name='fieldValue', description='Field value.', example='20'),
            }
          ](name='rightVariables', description='Right variable object'),
        }
      ](name='operators', description='Operator list'),
    }
  ](name='resultObject', description='Return object'),
}

model DescribeOperatorListBySceneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOperatorListBySceneResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeOperatorListByScene  DescribeOperatorListBySceneRequest
  * @return DescribeOperatorListBySceneResponse
 */
async function describeOperatorListByScene(request: DescribeOperatorListBySceneRequest): DescribeOperatorListBySceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOperatorListByScene', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOperatorListByTypeRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DescribeOperatorListByTypeResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: [ 
    {
      fieldType?: string(name='fieldType', description='Return value type', example='STRING'),
      operators?: [ 
        {
          code?: string(name='code', description='Operator code', example='equals'),
          hasRightVariable?: boolean(name='hasRightVariable', description='Whether it contains a right variable', example='true'),
          name?: string(name='name', description='Operator name', example='等于'),
        }
      ](name='operators', description='Operator list'),
    }
  ](name='resultObject', description='Return object'),
}

model DescribeOperatorListByTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOperatorListByTypeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeOperatorListByType  DescribeOperatorListByTypeRequest
  * @return DescribeOperatorListByTypeResponse
 */
async function describeOperatorListByType(request: DescribeOperatorListByTypeRequest): DescribeOperatorListByTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOperatorListByType', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOssAuthStatusRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and responses, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeOssAuthStatusResponseBody = {
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: string(name='resultObject', description='Return object', example='true'),
}

model DescribeOssAuthStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOssAuthStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeOssAuthStatus  DescribeOssAuthStatusRequest
  * @return DescribeOssAuthStatusResponse
 */
async function describeOssAuthStatus(request: DescribeOssAuthStatusRequest): DescribeOssAuthStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOssAuthStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOssPolicyRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou', position='Query'),
  scene: string(name='scene', description='Scene

This parameter is required.', example='NAME_LIST', position='Query'),
}

model DescribeOssPolicyResponseBody = {
  accessId?: string(name='AccessId', description='accessId, a parameter used in OSS SDK uploads, corresponding to OSSAccessKeyId', example='LTAxxxxxxxxxxxx'),
  host?: string(name='Host', description='OSS host ID.', example='testvm.biubiubiuu.com'),
  key?: string(name='Key', description='Key required for file upload.', example='saf/a/uid/ccc'),
  policy?: string(name='Policy', description='OSS security policy', example='eyJleHBpxxxxxx'),
  signature?: string(name='Signature', description='Signature data.', example='tzl1wL4q8rR/xxxxxx'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
}

model DescribeOssPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOssPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeOssPolicy  DescribeOssPolicyRequest
  * @return DescribeOssPolicyResponse
 */
async function describeOssPolicy(request: DescribeOssPolicyRequest): DescribeOssPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOssPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOssTokenRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  fileName?: string(name='fileName', description='File name.', example='test.csv', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  uploadType?: string(name='uploadType', description='Upload type', example='COMMUNITY_SAMPLE', position='Query'),
}

model DescribeOssTokenResponseBody = {
  accessId?: string(name='AccessId', description='AccessKeyId for OSS file upload.', example='LTAxxxxxxxxxxxx'),
  host?: string(name='Host', description='Host address.', example='kf.sunwoosoft.com'),
  key?: string(name='Key', description='The Key required for file upload.', example='saf/de/namelist/e924/ufzgsedX9bd3a7'),
  policy?: string(name='Policy', description='Permission policy for ossbucket.', example='eyJleHBpcmF0aW9uIjoiMjAyNS0wNy0zMFQwNjowNTo0OS45NTRaIiwiY29uZGl0aW9ucyI6W1siY29udGVudC1sZW5ndGgtcmFuZ2UiLDAsMTA0ODU3NjAwMF0sWyJlcSIsIiRrZXkiLCJzYWZcL2RlXC9uYW1lbGlzdFwvZTkyNFwvdWZ6Z3NlZFg5Ymxxxxxxxxxxx'),
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  signature?: string(name='Signature', description='OSS signature.', example='n29by5MWBmAjcweVoPEY/OHktog='),
  stsToken?: string(name='StsToken', description='Temporary identity credential.', example='tT44bMQxxxxxxxxxxxxxxx'),
}

model DescribeOssTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOssTokenResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeOssToken  DescribeOssTokenRequest
  * @return DescribeOssTokenResponse
 */
async function describeOssToken(request: DescribeOssTokenRequest): DescribeOssTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOssToken', 'POST', '/', 'json', false, 'json', request);
}

model DescribeParamByEventCodesRequest {
  lang?: string(name='Lang', description='Set the language type for request and response, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  eventCodes: string(name='eventCodes', description='Event code.

This parameter is required.', example='account_abuse_pro,account_abuse', position='Query'),
  parma?: string(name='parma', description='Query condition', example='标题/描述', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeParamByEventCodesResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: [ 
    {
      code?: string(name='code', description='Return code.', example='age'),
      name?: string(name='name', description='Name', example='年龄'),
    }
  ](name='resultObject', description='Return object'),
}

model DescribeParamByEventCodesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeParamByEventCodesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeParamByEventCodes  DescribeParamByEventCodesRequest
  * @return DescribeParamByEventCodesResponse
 */
async function describeParamByEventCodes(request: DescribeParamByEventCodesRequest): DescribeParamByEventCodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeParamByEventCodes', 'POST', '/', 'json', false, 'json', request);
}

model DescribePocOssTokenRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribePocOssTokenResponseBody = {
  accessId?: string(name='AccessId', description='AccessKeyId for OSS file upload', example='LTAxxxxxxxxxxxx'),
  host?: string(name='Host', description='Host address.', example='192.168.34.191'),
  key?: string(name='Key', description='The Key required for file upload.', example='saf/de/namelist/e924/ufzgsedX9bd3a7'),
  policy?: string(name='Policy', description='OSS security policy.', example='eyJleHBpcmF0aW9uIjoiMjAyNS0wNy0zMFQwNjowNTo0OS45NTRaIiwiY29uZGl0aW9ucyI6W1siY29udGVudC1sZW5ndGgtcmFuZ2UiLDAsMTA0ODU3NjAwMF0sWyJlcSIsIiRrZXkiLCJzYWZcL2RlXC9uYW1lbGlzdFwvZTkyNFwvdWZ6Z3NlZFg5Ymxxxxxxxxxxx'),
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  signature?: string(name='Signature', description='Upload signature information.', example='0lxQEWM0BqHd476JJE0fNXdS3UA='),
  resultObject?: boolean(name='resultObject', description='Return result.', example='true'),
}

model DescribePocOssTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePocOssTokenResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribePocOssToken  DescribePocOssTokenRequest
  * @return DescribePocOssTokenResponse
 */
async function describePocOssToken(request: DescribePocOssTokenRequest): DescribePocOssTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePocOssToken', 'POST', '/', 'json', false, 'json', request);
}

model DescribePocTaskListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1', position='Query'),
  pageSize?: int32(name='pageSize', description='Page size, with a default value of 10.', example='10', position='Query'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou', position='Query'),
  type?: string(name='type', description='Query type.', example='SAF_CONSOLE', position='Query'),
}

model DescribePocTaskListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, with a default value of 10.', example='10'),
  resultObject?: [ 
    {
      createTime?: string(name='createTime', description='Creation time.', example='1753804800000'),
      downloadUrl?: string(name='downloadUrl', description='Download URL.', example='https://xxxxx-oss-xxxxx.xxxxxx.aliyuncs.com/xx/xx/xxx/xxxxxx.csv?Expires=1753433384&OSSAccessKeyId=xxxxxxxxx&Signature=%2F%xxxxxxxxxxxx%3D'),
      fileType?: string(name='fileType', description='File type.', example='EXCEL'),
      serviceName?: string(name='serviceName', description='Service name.', example='注册风险识别'),
      status?: string(name='status', description='Status.', example='WAIT_CHECK'),
      taskId?: string(name='taskId', description='Task ID.', example='7'),
      taskName?: string(name='taskName', description='Task name.', example='任务'),
      updateTime?: string(name='updateTime', description='Last modified time.', example='1753804800000'),
    }
  ](name='resultObject', description='Returned object.'),
  totalItem?: int32(name='totalItem', description='Total number of items.', example='6'),
  totalPage?: int32(name='totalPage', description='Total number of pages.', example='1'),
}

model DescribePocTaskListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePocTaskListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribePocTaskList  DescribePocTaskListRequest
  * @return DescribePocTaskListResponse
 */
async function describePocTaskList(request: DescribePocTaskListRequest): DescribePocTaskListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePocTaskList', 'POST', '/', 'json', false, 'json', request);
}

model DescribePrivateStackRequest {
  regId?: string(name='regId', description='Region Code', example='cn-hangzhou', position='Query'),
}

model DescribePrivateStackResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return Object', example='true'),
}

model DescribePrivateStackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePrivateStackResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribePrivateStack  DescribePrivateStackRequest
  * @return DescribePrivateStackResponse
 */
async function describePrivateStack(request: DescribePrivateStackRequest): DescribePrivateStackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePrivateStack', 'POST', '/', 'json', false, 'json', request);
}

model DescribeQueryVariableDetailRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  id: long(name='id', description='Variable ID

This parameter is required.', example='355', position='Query'),
  regId: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DescribeQueryVariableDetailResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    dataSourceCode?: long(name='dataSourceCode', description='Data source code.', example='ds_vcaoii1697'),
    dataSourceName?: string(name='dataSourceName', description='Data source name', example='名称数据源'),
    description?: string(name='description', description='Description.', example='变量描述'),
    eventCode?: string(name='eventCode', description='Event code', example='de_aszbjb7236'),
    expression?: string(name='expression', description='Expression.', example='SELECT  AVG( $source )\\nFROM ds_vcaoii1697 \\nWHERE  $age > 0'),
    expressionTitle?: string(name='expressionTitle', description='Expression title.', example='SELECT  AVG( $source )\\nFROM testCase\\nWHERE  $age > 0'),
    expressionVariable?: string(name='expressionVariable', description='Expression variable.', example='[96426]'),
    id?: long(name='id', description='Variable ID', example='355'),
    outlier?: string(name='outlier', description='Outlier', example='-1'),
    outputs?: string(name='outputs', description='Output results.', example='DOUBLE'),
    title?: string(name='title', description='Title.', example='自定义查询变量标题'),
  }(name='resultObject', description='Returned object'),
}

model DescribeQueryVariableDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeQueryVariableDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeQueryVariableDetail  DescribeQueryVariableDetailRequest
  * @return DescribeQueryVariableDetailResponse
 */
async function describeQueryVariableDetail(request: DescribeQueryVariableDetailRequest): DescribeQueryVariableDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeQueryVariableDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeQueryVariablePageListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  currentPage?: long(name='currentPage', description='Current page number.', example='1', position='Query'),
  dataSourceCode?: string(name='dataSourceCode', description='Data source code', example='ds_vcaoii1697', position='Query'),
  eventCode?: string(name='eventCode', description='Event code', example='de_ahpayh4121', position='Query'),
  name?: string(name='name', description='Query variable name', example='名称', position='Query'),
  pageSize?: long(name='pageSize', description='Page size, default value is 10', example='10', position='Query'),
  regId: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DescribeQueryVariablePageListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: long(name='currentPage', description='Pagination parameter, current page.', example='1'),
  pageSize?: long(name='pageSize', description='Page size, default value is 10', example='10'),
  resultObject?: [ 
    {
      dataSourceCode?: long(name='dataSourceCode', description='Data source code.', example='ds_vcaoii1697'),
      dataSourceName?: string(name='dataSourceName', description='Data source name.', example='姓名数据源'),
      description?: string(name='description', description='Description information.', example='变量描述'),
      eventName?: string(name='eventName', description='Event name.', example='注册风险'),
      fieldType?: string(name='fieldType', description='Return value type', example='STRING'),
      gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1621578648000'),
      gmtModified?: long(name='gmtModified', description='Modification time', example='1565701886000'),
      id?: long(name='id', description='Query variable primary key ID', example='497'),
      name?: string(name='name', description='Query variable name', example='查询变量名称'),
      status?: string(name='status', description='Status.', example='ENABLE'),
      total?: long(name='total', description='Total count', example='24'),
      version?: long(name='version', description='Version number.', example='1'),
    }
  ](name='resultObject', description='Return object'),
  totalItem?: long(name='totalItem', description='Total items', example='6'),
  totalPage?: long(name='totalPage', description='Total pages', example='1'),
}

model DescribeQueryVariablePageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeQueryVariablePageListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeQueryVariablePageList  DescribeQueryVariablePageListRequest
  * @return DescribeQueryVariablePageListResponse
 */
async function describeQueryVariablePageList(request: DescribeQueryVariablePageListRequest): DescribeQueryVariablePageListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeQueryVariablePageList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRecommendSceneVariablesRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='regId', description='Region Code', example='cn-hangzhou', position='Query'),
  sampleId: long(name='sampleId', description='Sample ID

This parameter is required.', example='5467', position='Query'),
}

model DescribeRecommendSceneVariablesResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return Object', example='true'),
}

model DescribeRecommendSceneVariablesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRecommendSceneVariablesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRecommendSceneVariables  DescribeRecommendSceneVariablesRequest
  * @return DescribeRecommendSceneVariablesResponse
 */
async function describeRecommendSceneVariables(request: DescribeRecommendSceneVariablesRequest): DescribeRecommendSceneVariablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRecommendSceneVariables', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRecommendTaskDetailRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and responses, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou', position='Query'),
  taskId?: long(name='taskId', description='Task ID.', example='887', position='Query'),
}

model DescribeRecommendTaskDetailResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    eventCode?: string(name='eventCode', description='Event code', example='de_aszbjb7236'),
    eventName?: string(name='eventName', description='Event name.', example='注册风险'),
    expectVelocities?: [ string ](name='expectVelocities', description='Comparison indicators'),
    gmtCreate?: long(name='gmtCreate', description='Creation time', example='1621578648000'),
    normalSize?: long(name='normalSize', description='Number of normal samples', example='100'),
    recommendRuleDTOs?: [ 
      {
        computeExpression?: string(name='computeExpression', description='Calculation path', example='1&2'),
        hitSample?: long(name='hitSample', description='Number of hit samples', example='99'),
        id?: long(name='id', description='Primary key ID of the rule', example='30'),
        notHitSample?: long(name='notHitSample', description='Number of unhit samples', example='1'),
        recommendRules?: [ 
          {
            left?: string(name='left', description='Left variable', example='age'),
            operator?: string(name='operator', description='Operator', example='equals'),
            right?: string(name='right', description='Right variable', example='20'),
          }
        ](name='recommendRules', description='List of candidate rules'),
        ruleId?: string(name='ruleId', description='Strategy ID', example='102224'),
        ruleName?: string(name='ruleName', description='Rule name', example='营销风险识别评分_高风险_拒绝_副本'),
        status?: string(name='status', description='Status', example='NO_RULE'),
        velocities?: string(name='velocities', description='List of indicators in JSON string format', example='[{"key":"dxkkLw8fe18","value":"2"}]'),
      }
    ](name='recommendRuleDTOs', description='Recommended strategy list'),
    recommendVariableDTOs?: [ 
      {
        id?: long(name='id', description='Primary key ID', example='234'),
        title?: string(name='title', description='Title', example='手机号'),
      }
    ](name='recommendVariableDTOs', description='Selected variable list'),
    riskSize?: long(name='riskSize', description='Number of risk samples', example='10'),
    sampleName?: string(name='sampleName', description='Sample name', example='白样本'),
    sampleScene?: string(name='sampleScene', description='Sample scenario', example='account_abuse_detection'),
    sampleSceneName?: string(name='sampleSceneName', description='Sample scenario name', example='防虚假账号'),
    taskId?: long(name='taskId', description='Task ID', example='887'),
    taskName?: string(name='taskName', description='Task name', example='策略推荐任务'),
    taskStatus?: string(name='taskStatus', description='Task status.', example='CREATE'),
  }(name='resultObject', description='Return result'),
}

model DescribeRecommendTaskDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRecommendTaskDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRecommendTaskDetail  DescribeRecommendTaskDetailRequest
  * @return DescribeRecommendTaskDetailResponse
 */
async function describeRecommendTaskDetail(request: DescribeRecommendTaskDetailRequest): DescribeRecommendTaskDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRecommendTaskDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRecommendTaskPageListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  currentPage?: string(name='currentPage', description='Current page number', example='1', position='Query'),
  pageSize?: string(name='pageSize', description='Page size, with a default value of 10', example='10', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  taskName?: string(name='taskName', description='Task name', example='策略推荐任务', position='Query'),
}

model DescribeRecommendTaskPageListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, with a default value of 10', example='10'),
  resultObject?: [ 
    {
      expectVelocities?: [ string ](name='expectVelocities', description='Impact indicators'),
      gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1621578648000'),
      normalCount?: long(name='normalCount', description='Number of samples', example='100'),
      normalSize?: long(name='normalSize', description='Number of normal samples', example='10'),
      riskCount?: long(name='riskCount', description='Number of records displayed on the current page.', example='100'),
      riskSize?: long(name='riskSize', description='Number of risk samples', example='5'),
      sampleName?: string(name='sampleName', description='Sample name', example='白样本'),
      sampleScene?: string(name='sampleScene', description='Sample scenario', example='account_abuse_detection'),
      taskId?: long(name='taskId', description='Task ID.', example='240c93ddffa74e38be3a00375eb3041d'),
      taskName?: string(name='taskName', description='Task name.', example='策略推荐任务'),
      taskStatus?: string(name='taskStatus', description='Task status.', example='CREATE'),
    }
  ](name='resultObject', description='Returned object'),
  totalItem?: int32(name='totalItem', description='Total number of items', example='3'),
  totalPage?: int32(name='totalPage', description='Total number of pages.', example='1'),
}

model DescribeRecommendTaskPageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRecommendTaskPageListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRecommendTaskPageList  DescribeRecommendTaskPageListRequest
  * @return DescribeRecommendTaskPageListResponse
 */
async function describeRecommendTaskPageList(request: DescribeRecommendTaskPageListRequest): DescribeRecommendTaskPageListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRecommendTaskPageList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRecommendVariablesVelocityRequest {
  lang?: string(name='Lang', description='Set the language type for request and response, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='regId', description='Region Code', example='cn-hangzhou', position='Query'),
  taskId: long(name='taskId', description='Task ID

This parameter is required.', example='6770764', position='Query'),
  variableIdsStr?: string(name='variableIdsStr', description='Variable IDs', example='[\\"232\\",\\"233\\"]', position='Query'),
}

model DescribeRecommendVariablesVelocityResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return Object', example='true'),
}

model DescribeRecommendVariablesVelocityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRecommendVariablesVelocityResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRecommendVariablesVelocity  DescribeRecommendVariablesVelocityRequest
  * @return DescribeRecommendVariablesVelocityResponse
 */
async function describeRecommendVariablesVelocity(request: DescribeRecommendVariablesVelocityRequest): DescribeRecommendVariablesVelocityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRecommendVariablesVelocity', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRecommendVelocitiesRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and responses, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  code?: string(name='code', description='Metric code', example='coupon_abuse_detection', position='Query'),
  regId?: string(name='regId', description='Region ID', example='cn-hangzhou', position='Query'),
  type?: string(name='type', description='Metric type', example='recommend_velocity', position='Query'),
}

model DescribeRecommendVelocitiesResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DescribeRecommendVelocitiesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRecommendVelocitiesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRecommendVelocities  DescribeRecommendVelocitiesRequest
  * @return DescribeRecommendVelocitiesResponse
 */
async function describeRecommendVelocities(request: DescribeRecommendVelocitiesRequest): DescribeRecommendVelocitiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRecommendVelocities', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  lang?: string(name='Lang', description='Set the language type for requests and responses. The default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeRegionsResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DescribeRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRegionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRegions  DescribeRegionsRequest
  * @return DescribeRegionsResponse
 */
async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRequestHitRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  sRequestId: string(name='sRequestId', description='Request ID.

This parameter is required.', example='60C97040-D5D5-4906-9522-B9B413730CAA', position='Query'),
}

model DescribeRequestHitResponseBody = {
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: {
    eventCode?: string(name='eventCode', description='Event code', example='de_aszbjb7236'),
    eventName?: string(name='eventName', description='Event name.', example='注册风险'),
    inputs?: string(name='inputs', description='Input parameters.', example='{\\"eventCode\\":\\"de_afghcf6411\\",\\"ip\\":\\"196.168.0.1\\",\\"DEtest222\\":9007199254740999,\\"age\\":20}'),
    outputs?: string(name='outputs', description='Output parameters', example='{\\"tags\\":\\"rm0102,test_tag,age\\",\\"score\\":\\"30.0\\",\\"extend\\":\\"{\\\\\\"OUT_V01\\\\\\":\\\\\\"Maritime\\\\\\",\\\\\\"OUT_V02\\\\\\":\\\\\\"Lome\\\\\\",\\\\\\"OUT_V03\\\\\\":\\\\\\"196.168.0.1_A\\\\\\"}\\",\\"finalDecision\\":\\"REJECT\\"}'),
    requestTime?: long(name='requestTime', description='Timestamp of the request.', example='1752571330000'),
    ruleHitRecords?: [ 
      {
        cost?: int32(name='cost', description='Duration', example='1'),
        hitSuccessful?: boolean(name='hitSuccessful', description='Whether the rule was hit.', example='true'),
        isShowDetail?: boolean(name='isShowDetail', description='Whether to show details', example='true'),
        order?: int32(name='order', description='Order.', example='1'),
        ruleId?: string(name='ruleId', description='Policy ID', example='101544'),
        ruleName?: string(name='ruleName', description='Policy name', example='注册手机号是11位数字'),
        ruleSnapshotId?: string(name='ruleSnapshotId', description='Rule snapshot ID', example='27'),
        ruleStatus?: string(name='ruleStatus', description='Policy status', example='RUNNING'),
      }
    ](name='ruleHitRecords', description='Details of the executed rules.'),
    sRequestId?: string(name='sRequestId', description='Request ID', example='60C97040-D5D5-4906-9522-B9B413730CAA'),
    totalCost?: long(name='totalCost', description='Total amount of the request', example='4'),
  }(name='resultObject', description='Return object'),
}

model DescribeRequestHitResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRequestHitResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRequestHit  DescribeRequestHitRequest
  * @return DescribeRequestHitResponse
 */
async function describeRequestHit(request: DescribeRequestHitRequest): DescribeRequestHitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRequestHit', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRequestPeakReportRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeRequestPeakReportResponseBody = {
  code?: string(name='code', description='Status code', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code.', example='200'),
  message?: string(name='message', description='Error message.', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: [ 
    {
      ratio?: string(name='ratio', description='Return value', example='1.0'),
      value?: string(name='value', description='Return text', example='1.0 次/秒'),
    }
  ](name='resultObject', description='Return object'),
  success?: boolean(name='success', description='Whether the request was successful', example='true'),
}

model DescribeRequestPeakReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRequestPeakReportResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRequestPeakReport  DescribeRequestPeakReportRequest
  * @return DescribeRequestPeakReportResponse
 */
async function describeRequestPeakReport(request: DescribeRequestPeakReportRequest): DescribeRequestPeakReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRequestPeakReport', 'POST', '/', 'json', false, 'json', request);
}

model DescribeResultCountRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  beginTime: long(name='beginTime', description='Start time, accurate to milliseconds (ms).

This parameter is required.', example='1739841750000', position='Query'),
  endTime: long(name='endTime', description='End time, accurate to milliseconds (ms).

This parameter is required.', example='1739843750000', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeResultCountResponseBody = {
  code?: string(name='code', description='Status code.', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error message.', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: [ 
    {
      result?: string(name='result', description='Execution result', example='PASS'),
      total?: string(name='total', description='Quantity', example='200'),
    }
  ](name='resultObject', description='Return object'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model DescribeResultCountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeResultCountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeResultCount  DescribeResultCountRequest
  * @return DescribeResultCountResponse
 */
async function describeResultCount(request: DescribeResultCountRequest): DescribeResultCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeResultCount', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRiskLineChartRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  beginTime: long(name='beginTime', description='Query start time, accurate to milliseconds (ms).

This parameter is required.', example='1739841750000', position='Query'),
  endTime: long(name='endTime', description='End time, accurate to milliseconds (ms).

This parameter is required.', example='1748491200000', position='Query'),
  eventCodes?: string(name='eventCodes', description='Event codes, separated by commas (,).', example='de_afghcf6411,de_awkhwh0314', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeRiskLineChartResponseBody = {
  code?: string(name='code', description='Status code.', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error message.', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: {
    series?: [ 
      {
        data?: [ string ](name='data', description='Line chart data'),
        name?: string(name='name', description='Title of the line segment in the line chart', example='rm0102'),
      }
    ](name='series', description='Data list'),
    xaxis?: {
      data?: [ string ](name='data', description='Returns x-axis data points'),
    }(name='xaxis', description='Details of xaxis node.'),
  }(name='resultObject', description='Returned object'),
  success?: boolean(name='success', description='Whether the request was successful.', example='true'),
}

model DescribeRiskLineChartResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRiskLineChartResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRiskLineChart  DescribeRiskLineChartRequest
  * @return DescribeRiskLineChartResponse
 */
async function describeRiskLineChart(request: DescribeRiskLineChartRequest): DescribeRiskLineChartResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRiskLineChart', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRiskTagsLineChartRequest {
  beginTime: long(name='BeginTime', description='Start time of the query, in milliseconds (ms).

This parameter is required.', example='1729563800605', position='Query'),
  endTime: long(name='EndTime', description='End time, accurate to milliseconds (ms).

This parameter is required.', example='1729563800605', position='Query'),
  eventCodes?: string(name='EventCodes', description='Event code', example='de_afghcf6411', position='Query'),
  lang?: string(name='Lang', description='Sets the language type for the request and response messages. Default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='RegId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeRiskTagsLineChartResponseBody = {
  code?: string(name='Code', description='Status code. Note: 200 indicates success.', example='200'),
  httpStatusCode?: string(name='HttpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='Message', description='Error message.', example='success'),
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    percent?: [ float ](name='Percent', description='Call percentage, represented as a decimal'),
    series?: [ 
      {
        data?: float(name='Data', description='Data', example='10'),
        name?: string(name='Name', description='Name', example='rm0102'),
      }
    ](name='Series', description='Chart data'),
    total?: [ long ](name='Total', description='Total number of records.'),
    xaxis?: {
      data?: [ string ](name='Data', description='Data returned by the chart'),
    }(name='Xaxis', description='X-axis data of the chart'),
  }(name='ResultObject', description='Returned result information'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DescribeRiskTagsLineChartResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRiskTagsLineChartResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRiskTagsLineChart  DescribeRiskTagsLineChartRequest
  * @return DescribeRiskTagsLineChartResponse
 */
async function describeRiskTagsLineChart(request: DescribeRiskTagsLineChartRequest): DescribeRiskTagsLineChartResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRiskTagsLineChart', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRuleBarChartRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  beginTime: long(name='beginTime', description='Query start time, accurate to milliseconds (ms).

This parameter is required.', example='1739841750000', position='Query'),
  endTime: long(name='endTime', description='End time, accurate to milliseconds (ms).

This parameter is required.', example='1750904603000', position='Query'),
  eventCodes?: string(name='eventCodes', description='Event codes, separated by commas (,).', example='account_abuse_pro,account_abuse', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeRuleBarChartResponseBody = {
  code?: string(name='code', description='Status code.', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code.', example='200'),
  message?: string(name='message', description='Error message.', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: {
    series?: [ 
      {
        data?: [ 
          {
            eventName?: string(name='eventName', description='Event name.', example='营销事件'),
            num?: long(name='num', description='Number.', example='100'),
            ruleName?: string(name='ruleName', description='Policy name', example='营销风险识别评分_高风险_拒绝'),
            status?: string(name='status', description='Status.', example='RUNNING'),
          }
        ](name='data', description='Response data.'),
        type?: string(name='type', description='Bar chart type', example='bar'),
      }
    ](name='series', description='Data list'),
    yaxis?: {
      data?: [ string ](name='data', description='yaxis data items'),
    }(name='yaxis', description='yaxis related results.'),
  }(name='resultObject', description='Returned object'),
  success?: boolean(name='success', description='Whether the request was successful.', example='true'),
}

model DescribeRuleBarChartResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRuleBarChartResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRuleBarChart  DescribeRuleBarChartRequest
  * @return DescribeRuleBarChartResponse
 */
async function describeRuleBarChart(request: DescribeRuleBarChartRequest): DescribeRuleBarChartResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRuleBarChart', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRuleCountByUserIdRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  createType?: string(name='createType', description='Creation type', example='NORMAL', position='Query'),
  regId: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DescribeRuleCountByUserIdResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    limit?: boolean(name='limit', description='Whether the limit condition is reached. Values: -**true**: Yes-**false**: No', example='false'),
    maxTotalItem?: int32(name='maxTotalItem', description='Maximum number of items', example='100'),
    totalItem?: int32(name='totalItem', description='Total number of items', example='27'),
  }(name='resultObject', description='Returned object'),
}

model DescribeRuleCountByUserIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRuleCountByUserIdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRuleCountByUserId  DescribeRuleCountByUserIdRequest
  * @return DescribeRuleCountByUserIdResponse
 */
async function describeRuleCountByUserId(request: DescribeRuleCountByUserIdRequest): DescribeRuleCountByUserIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRuleCountByUserId', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRuleDetailByRuleIdRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  consoleRuleId?: long(name='consoleRuleId', description='Primary key ID of the policy.', example='7110', position='Query'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou', position='Query'),
  ruleId?: string(name='ruleId', description='Policy ID.', example='102059', position='Query'),
  ruleVersionId?: long(name='ruleVersionId', description='Primary key ID of the policy version.', example='10203', position='Query'),
}

model DescribeRuleDetailByRuleIdResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    authType?: string(name='authType', description='Service authorization type.', example='all'),
    bizVersion?: string(name='bizVersion', description='Version.', example='1'),
    consoleRuleId?: long(name='consoleRuleId', description='Primary key ID of the policy.', example='6633'),
    createType?: string(name='createType', description='Creation type.', example='MORMAL'),
    eventCode?: string(name='eventCode', description='Event code.', example='de_asssce8122'),
    eventName?: string(name='eventName', description='Event name.', example='注册风险'),
    gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1621578648000'),
    gmtModified?: long(name='gmtModified', description='Modification time.', example='1565701886000'),
    logicExpression?: string(name='logicExpression', description='Log expression.', example='1&2'),
    mainEventCode?: string(name='mainEventCode', description='Main event code.', example='de_asssce8122'),
    memo?: string(name='memo', description='Memo.', example='备注'),
    ruleActionMap?: map[string]any(name='ruleActionMap', description='Rule action structure.', example='{
                "SCORE": [
                    {
                        "actionType": "SCORE",
                        "displayType": "ACTION",
                        "code": "deAddScore",
                        "sourceType": "SAF",
                        "inputs": [
                            "123"
                        ],
                        "name": "__addDeScore__",
                        "description": "打分",
                        "inputTitle": "123",
                        "outputType": "const",
                        "type": "ACTION",
                        "title": "打分",
                        "fieldType": "DOUBLE"
                    }
                ],
                "VARIABLE": [
                    {
                        "actionType": "VARIABLE",
                        "displayType": "MIDDLE",
                        "code": "mid1",
                        "inputs": [
                            "gg"
                        ],
                        "name": "mid1",
                        "description": "中间变量,mid1",
                        "type": "MIDDLE",
                        "title": "mid1",
                        "fieldType": "STRING"
                    }
                ],
                "TAG": [
                    {
                        "actionType": "TAG",
                        "displayType": "ACTION",
                        "code": "addDeTags",
                        "sourceType": "SAF",
                        "inputs": [
                            "123"
                        ],
                        "name": "__addDeTags__",
                        "description": "打标签",
                        "outputType": "const",
                        "type": "ACTION",
                        "title": "打标签",
                        "fieldType": "STRING"
                    }
                ],
                "MIDDLE_VARIABLE": [
                    {
                        "actionType": "MIDDLE_VARIABLE",
                        "inputs": [
                            "mid1"
                        ],
                        "fieldValue": "123",
                        "fieldType": "STRING"
                    }
                ]
            }'),
    ruleActions?: string(name='ruleActions', description='Rule actions.', example='[{\\"actionType\\":\\"TAG\\",\\"code\\":\\"addDeTags\\",\\"description\\":\\"打标签\\",\\"displayType\\":\\"ACTION\\",\\"fieldType\\":\\"STRING\\",\\"inputs\\":[\\"123\\"],\\"name\\":\\"__addDeTags__\\",\\"outputType\\":\\"const\\",\\"sourceType\\":\\"SAF\\",\\"title\\":\\"打标签\\",\\"type\\":\\"ACTION\\"},{\\"actionType\\":\\"SCORE\\",\\"code\\":\\"deAddScore\\",\\"description\\":\\"打分\\",\\"displayType\\":\\"ACTION\\",\\"fieldType\\":\\"DOUBLE\\",\\"inputTitle\\":\\"123\\",\\"inputs\\":[\\"123\\"],\\"name\\":\\"__addDeScore__\\",\\"outputType\\":\\"const\\",\\"sourceType\\":\\"SAF\\",\\"title\\":\\"打分\\",\\"type\\":\\"ACTION\\"},{\\"actionType\\":\\"MIDDLE_VARIABLE\\",\\"fieldType\\":\\"STRING\\",\\"fieldValue\\":\\"123\\",\\"inputs\\":[\\"mid1\\"]},{\\"actionType\\":\\"VARIABLE\\",\\"code\\":\\"mid1\\",\\"description\\":\\"中间变量,mid1\\",\\"displayType\\":\\"MIDDLE\\",\\"fieldType\\":\\"STRING\\",\\"inputs\\":[\\"gg\\"],\\"name\\":\\"mid1\\",\\"title\\":\\"mid1\\",\\"type\\":\\"MIDDLE\\"}]'),
    ruleAuthType?: string(name='ruleAuthType', description='Rule authorization type.', example='NOMAL'),
    ruleBody?: string(name='ruleBody', description='DSL policy expression.', example='{\\"elseIfStatement\\":[{\\"condition\\":{\\"currentId\\":0,\\"deepCount\\":1,\\"list\\":[{\\"currentId\\":0,\\"deepCount\\":1,\\"left\\":{\\"code\\":\\"getLbsRegion(longitude, latitude)?.prov\\",\\"description\\":\\"根据经纬度得到省份信息，比如经度：111.878062，纬度：22.585409，则经过运算，输出”广东省“\\",\\"displayType\\":\\"SELF_BIND\\",\\"fieldType\\":\\"STRING\\",\\"functionCode\\":\\"\\",\\"functionName\\":\\"\\",\\"hasRightVariable\\":true,\\"name\\":\\"sl_S02sHLFT7818\\",\\"outputThreshold\\":{},\\"sourceType\\":\\"SAF\\",\\"title\\":\\"经纬度自定义系统变量\\",\\"type\\":\\"SELF_BIND\\"},\\"operatorCode\\":\\"equals\\",\\"operatorName\\":\\"等于\\",\\"parentId\\":0,\\"right\\":{\\"name\\":\\"cc\\",\\"rightVariableType\\":\\"constant\\"},\\"sequence\\":5}],\\"parentId\\":0,\\"relationship\\":\\"and\\"},\\"then\\":[{\\"actionType\\":\\"TAG\\",\\"code\\":\\"addDeTags\\",\\"description\\":\\"打标签\\",\\"displayType\\":\\"ACTION\\",\\"fieldType\\":\\"STRING\\",\\"inputs\\":[\\"332\\"],\\"name\\":\\"__addDeTags__\\",\\"outputType\\":\\"const\\",\\"sourceType\\":\\"SAF\\",\\"title\\":\\"打标签\\",\\"type\\":\\"ACTION\\"}]}],\\"elseStatement\\":{\\"then\\":[{\\"actionType\\":\\"TAG\\",\\"code\\":\\"addDeTags\\",\\"description\\":\\"打标签\\",\\"displayType\\":\\"ACTION\\",\\"fieldType\\":\\"STRING\\",\\"inputs\\":[\\"321\\"],\\"name\\":\\"__addDeTags__\\",\\"outputType\\":\\"const\\",\\"sourceType\\":\\"SAF\\",\\"title\\":\\"打标签\\",\\"type\\":\\"ACTION\\"}]},\\"ifStatement\\":{\\"condition\\":{\\"currentId\\":0,\\"deepCount\\":1,\\"list\\":[{\\"currentId\\":0,\\"deepCount\\":1,\\"left\\":{\\"code\\":\\"queryPhoneSimulatorInfo(deviceToken)?.brand\\",\\"description\\":\\"设备信息-终端品牌\\",\\"displayType\\":\\"DEVICE\\",\\"fieldType\\":\\"STRING\\",\\"functionCode\\":\\"\\",\\"functionName\\":\\"\\",\\"hasRightVariable\\":true,\\"name\\":\\"__device_brand__\\",\\"sourceType\\":\\"SAF\\",\\"title\\":\\"设备信息-终端品牌-brand\\",\\"type\\":\\"DEVICE\\"},\\"operatorCode\\":\\"deInNameList\\",\\"operatorName\\":\\"在名单中\\",\\"parentId\\":0,\\"right\\":{\\"code\\":\\"nl_UN8otElLb490\\",\\"description\\":\\"描述11\\",\\"displayType\\":\\"NAME_LIST\\",\\"name\\":\\"nl_UN8otElLb490\\",\\"rightVariableType\\":\\"constant\\",\\"sourceType\\":\\"SAF\\",\\"title\\":\\"wtz_名单新建测试02\\",\\"type\\":\\"NAME_LIST\\"},\\"sequence\\":1},{\\"currentId\\":0,\\"deepCount\\":1,\\"left\\":{\\"code\\":\\"deFunctionProcess(ip,\\\\\\"isIp\\\\\\")\\",\\"description\\":\\"判断是否符合IPv4标准\\",\\"displayType\\":\\"SYSTEM_BIND\\",\\"fieldType\\":\\"BOOLEAN\\",\\"functionCode\\":\\"\\",\\"functionName\\":\\"\\",\\"hasRightVariable\\":false,\\"name\\":\\"__isIpAddressV4__\\",\\"outputThreshold\\":{},\\"sourceType\\":\\"SAF\\",\\"title\\":\\"IP是否符合IPV4格式\\",\\"type\\":\\"SYSTEM_BIND\\"},\\"operatorCode\\":\\"boolIsTrue\\",\\"operatorName\\":\\"为true\\",\\"parentId\\":0,\\"right\\":{\\"name\\":\\"\\",\\"rightVariableType\\":\\"constant\\"},\\"sequence\\":2},{\\"currentId\\":0,\\"deepCount\\":1,\\"list\\":[{\\"currentId\\":0,\\"deepCount\\":1,\\"left\\":{\\"code\\":\\"parseIpV2(ip)?.cityId\\",\\"description\\":\\"通过IP地址库解析IP所在的城市Code，例如，输入“42.120.74.211”，经过该变量运算，输出“330100”。\\",\\"displayType\\":\\"SYSTEM_BIND\\",\\"fieldType\\":\\"STRING\\",\\"functionCode\\":\\"\\",\\"functionName\\":\\"\\",\\"hasRightVariable\\":true,\\"name\\":\\"__ipLocationCityCode__\\",\\"outputThreshold\\":{},\\"sourceType\\":\\"SAF\\",\\"title\\":\\"IP所在地_城市Code\\",\\"type\\":\\"SYSTEM_BIND\\"},\\"operatorCode\\":\\"equals\\",\\"operatorName\\":\\"等于\\",\\"parentId\\":0,\\"right\\":{\\"code\\":\\"deFunctionProcess(ip,\\\\\\"getCountry\\\\\\")\\",\\"description\\":\\"通过IP地址库解析IP所在的城市名称，例如，输入“42.120.74.211”，经过该变量运算，输出“CN”。\\",\\"displayType\\":\\"SYSTEM_BIND\\",\\"fieldType\\":\\"STRING\\",\\"functionCode\\":\\"\\",\\"functionName\\":\\"\\",\\"name\\":\\"__ipLocationCountryId__\\",\\"outputThreshold\\":{},\\"rightVariableType\\":\\"variable\\",\\"sourceType\\":\\"SAF\\",\\"title\\":\\"IP所在地_国家Code\\",\\"type\\":\\"SYSTEM_BIND\\"},\\"sequence\\":3},{\\"currentId\\":0,\\"deepCount\\":1,\\"list\\":[{\\"currentId\\":0,\\"deepCount\\":1,\\"left\\":{\\"code\\":\\"parseIpV2(ip)?.cityId\\",\\"description\\":\\"通过IP地址库解析IP所在的城市Code，例如，输入“42.120.74.211”，经过该变量运算，输出“330100”。\\",\\"displayType\\":\\"SYSTEM_BIND\\",\\"fieldType\\":\\"STRING\\",\\"functionCode\\":\\"\\",\\"functionName\\":\\"\\",\\"hasRightVariable\\":true,\\"name\\":\\"__ipLocationCityCode__\\",\\"outputThreshold\\":{\\"$ref\\":\\"$.ifStatement.condition.list[2].list[0].left.outputThreshold\\"},\\"sourceType\\":\\"SAF\\",\\"title\\":\\"IP所在地_城市Code\\",\\"type\\":\\"SYSTEM_BIND\\"},\\"operatorCode\\":\\"deInNameList\\",\\"operatorName\\":\\"在名单中\\",\\"parentId\\":0,\\"right\\":{\\"code\\":\\"nl_NsVwBD2s11e0\\",\\"displayType\\":\\"NAME_LIST\\",\\"name\\":\\"nl_NsVwBD2s11e0\\",\\"rightVariableType\\":\\"constant\\",\\"sourceType\\":\\"SAF\\",\\"title\\":\\"device_block_list\\",\\"type\\":\\"NAME_LIST\\"},\\"sequence\\":4}],\\"parentId\\":0,\\"relationship\\":\\"and\\"}],\\"parentId\\":0,\\"relationship\\":\\"and\\"}],\\"parentId\\":0,\\"relationship\\":\\"and\\"},\\"then\\":[{\\"actionType\\":\\"TAG\\",\\"code\\":\\"addDeTags\\",\\"description\\":\\"打标签\\",\\"displayType\\":\\"ACTION\\",\\"fieldType\\":\\"STRING\\",\\"inputs\\":[\\"123\\"],\\"name\\":\\"__addDeTags__\\",\\"outputType\\":\\"const\\",\\"sourceType\\":\\"SAF\\",\\"title\\":\\"打标签\\",\\"type\\":\\"ACTION\\"}]}}'),
    ruleExpressions?: string(name='ruleExpressions', description='Rule expressions.', example='[{\\"expressionName\\":\\"营销风险识别评分\\",\\"itemId\\":1,\\"left\\":{\\"name\\":\\"sl_rjtsDXK124a5\\"},\\"operatorCode\\":\\"between\\",\\"operatorName\\":\\"数字在[a,b]之间\\",\\"right\\":{\\"fieldValue\\":\\"[65,100]\\"}}]'),
    ruleId?: string(name='ruleId', description='Policy ID.', example='101544'),
    ruleName?: string(name='ruleName', description='Policy name.', example='营销风险识别'),
    ruleStatus?: string(name='ruleStatus', description='Policy status.', example='RUNNING'),
    ruleType?: string(name='ruleType', description='Rule type.', example='DSL'),
    ruleVersionId?: long(name='ruleVersionId', description='Primary key ID of the policy version.', example='3823'),
  }(name='resultObject', description='Returned object.'),
}

model DescribeRuleDetailByRuleIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRuleDetailByRuleIdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRuleDetailByRuleId  DescribeRuleDetailByRuleIdRequest
  * @return DescribeRuleDetailByRuleIdResponse
 */
async function describeRuleDetailByRuleId(request: DescribeRuleDetailByRuleIdRequest): DescribeRuleDetailByRuleIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRuleDetailByRuleId', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRuleHitRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  requestTime?: long(name='requestTime', description='Execution time', example='1752571330000', position='Query'),
  ruleId?: string(name='ruleId', description='Rule ID', example='102059', position='Query'),
  ruleSnapshotId?: string(name='ruleSnapshotId', description='Snapshot ID.', example='27', position='Query'),
  sRequestId?: string(name='sRequestId', description='Request ID.', example='60C97040-D5D5-4906-9522-B9B413730CAA', position='Query'),
}

model DescribeRuleHitResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: map[string]any(name='resultObject', description='Return object', example='true'),
}

model DescribeRuleHitResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRuleHitResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRuleHit  DescribeRuleHitRequest
  * @return DescribeRuleHitResponse
 */
async function describeRuleHit(request: DescribeRuleHitRequest): DescribeRuleHitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRuleHit', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRuleListByEventCodesListRequest {
  lang?: string(name='Lang', description='Set the language type for request and response messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  eventCodes: string(name='eventCodes', description='Event codes, JSON array string

This parameter is required.', example='["de_asssce8122"]', position='Query'),
  regId: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DescribeRuleListByEventCodesListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: [ 
    {
      ruleId?: string(name='ruleId', description='Policy ID', example='4730'),
      ruleName?: string(name='ruleName', description='Policy name', example='营销风险识别'),
    }
  ](name='resultObject', description='Returned object'),
}

model DescribeRuleListByEventCodesListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRuleListByEventCodesListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRuleListByEventCodesList  DescribeRuleListByEventCodesListRequest
  * @return DescribeRuleListByEventCodesListResponse
 */
async function describeRuleListByEventCodesList(request: DescribeRuleListByEventCodesListRequest): DescribeRuleListByEventCodesListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRuleListByEventCodesList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRulePageListRequest {
  lang?: string(name='Lang', description='Set the language type for requests and responses, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  createType?: string(name='createType', description='Creation type.', example='NORMAL', position='Query'),
  currentPage?: string(name='currentPage', description='Current page number.', example='1', position='Query'),
  eventCode?: string(name='eventCode', description='Event code.', example='de_asssce8122', position='Query'),
  pageSize?: string(name='pageSize', description='Page size, default value is 10.', example='10', position='Query'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou', position='Query'),
  ruleAuthType?: string(name='ruleAuthType', description='Policy type.', example='NOMAL', position='Query'),
  ruleName?: string(name='ruleName', description='Policy name.', example='营销风险识别评分', position='Query'),
  ruleStatus?: string(name='ruleStatus', description='Policy status.', example='RUNNING', position='Query'),
  sort?: string(name='sort', description='Sorting method, default value is desc.
- desc: descending order
- asc: ascending order', example='asc', position='Query'),
}

model DescribeRulePageListResponseBody = {
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10.', example='10'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: [ 
    {
      authType?: string(name='authType', description='Service authorization type', example='all'),
      consoleAudit?: {
        applyUserId?: string(name='applyUserId', description='UID of the user who passed the audit', example='用户uid'),
        applyUserName?: string(name='applyUserName', description='Name of the user who passed the audit', example='root'),
        auditMsg?: string(name='auditMsg', description='Approval comments', example='同意'),
        auditRealUserId?: string(name='auditRealUserId', description='UID of the final auditor', example='1728'),
        auditRealUserName?: string(name='auditRealUserName', description='Name of the final auditor', example='root'),
        auditRemark?: string(name='auditRemark', description='Remarks by the approver.', example='备注'),
        auditStatus?: string(name='auditStatus', description='Application audit status', example='AGREE'),
        auditTime?: long(name='auditTime', description='Approval time', example='1545726028000'),
        auditUserId?: string(name='auditUserId', description='UID of the auditor', example='1234xxxx'),
        auditUserName?: string(name='auditUserName', description='Name of the auditor', example='root'),
        gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1545726028000'),
        id?: long(name='id', description='Primary key ID', example='1728'),
        relationExt?: string(name='relationExt', description='Information of other related parties (in JSON format)', example='{}'),
        relationId?: long(name='relationId', description='ID of the related transaction for the approval', example='123'),
        relationName?: string(name='relationName', description='Name of the related transaction for the approval (can be null)', example='策略1'),
        relationType?: string(name='relationType', description='Type of the approval (e.g., `rule` represents the approval of a rule)', example='RULE'),
      }(name='consoleAudit', description='Audit object'),
      eventCode?: string(name='eventCode', description='Event code.', example='de_arcehq4370'),
      eventName?: string(name='eventName', description='Event name.', example='注册风险'),
      eventType?: string(name='eventType', description='Event type', example='MAIN'),
      externalRuleName?: string(name='externalRuleName', description='External name of the rule', example='策略1'),
      gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1621578648000'),
      gmtModified?: long(name='gmtModified', description='Modification time.', example='1565701886000'),
      hasNewVersion?: boolean(name='hasNewVersion', description='Whether there is a new version', example='true'),
      id?: long(name='id', description='Primary key ID of the policy.', example='2793'),
      mainRuleId?: string(name='mainRuleId', description='Main rule ID', example='4399'),
      priority?: long(name='priority', description='Policy priority, the higher the number, the higher the priority.', example='10'),
      ruleAuthType?: string(name='ruleAuthType', description='Rule type', example='NORMAL'),
      ruleId?: string(name='ruleId', description='Policy ID.', example='102059'),
      ruleMemo?: string(name='ruleMemo', description='Policy description.', example='描述信息'),
      ruleName?: string(name='ruleName', description='Policy name.', example='营销风险识别'),
      ruleStatus?: string(name='ruleStatus', description='Policy status.', example='RUNNING'),
      ruleType?: string(name='ruleType', description='Rule type', example='NORMAL'),
      ruleVersionId?: long(name='ruleVersionId', description='Primary key ID of the rule version.', example='11300'),
      templateId?: long(name='templateId', description='Template ID.', example='register'),
      version?: int32(name='version', description='Version number.', example='1'),
    }
  ](name='resultObject', description='Returned object.'),
  totalItem?: int32(name='totalItem', description='Total number of items.', example='28'),
  totalPage?: int32(name='totalPage', description='Total number of pages.', example='3'),
}

model DescribeRulePageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRulePageListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRulePageList  DescribeRulePageListRequest
  * @return DescribeRulePageListResponse
 */
async function describeRulePageList(request: DescribeRulePageListRequest): DescribeRulePageListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRulePageList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRuleSnapshotRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  ruleId?: string(name='ruleId', description='Policy ID', example='101544', position='Query'),
  snapshotVersion?: string(name='snapshotVersion', description='Snapshot version.', example='10', position='Query'),
}

model DescribeRuleSnapshotResponseBody = {
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    bizVersion?: string(name='bizVersion', description='Business version.', example='1'),
    eventCode?: string(name='eventCode', description='Event code', example='de_aszbjb7236'),
    eventName?: string(name='eventName', description='Event name.', example='注册风险'),
    gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1621578648000'),
    gmtModified?: long(name='gmtModified', description='Modification time.', example='1565701886000'),
    logicExpression?: string(name='logicExpression', description='Expression for analysis results.', example='1&2'),
    memo?: string(name='memo', description='Memo.', example='备注'),
    ruleActions?: string(name='ruleActions', description='Rule actions.', example='[{\\"inputs\\":[\\"LdShop\\"],\\"name\\":\\"__addDeTags__\\",\\"actionType\\":\\"TAG\\",\\"outputType\\":\\"const\\"}]'),
    ruleBody?: string(name='ruleBody', description='DSL rule expression. This field is required when ruleType is DSL.', example='{\\"elseIfStatement\\":[{\\"condition\\":{\\"currentId\\":0,\\"deepCount\\":1,\\"list\\":[{\\"currentId\\":0,\\"deepCount\\":1,\\"left\\":{\\"code\\":\\"getLbsRegion(longitude, latitude)?.prov\\",\\"description\\":\\"根据经纬度得到省份信息，比如经度：111.878062，纬度：22.585409，则经过运算，输出”广东省“\\",\\"displayType\\":\\"SELF_BIND\\",\\"fieldType\\":\\"STRING\\",\\"functionCode\\":\\"\\",\\"functionName\\":\\"\\",\\"hasRightVariable\\":true,\\"name\\":\\"sl_S02sHLFT7818\\",\\"outputThreshold\\":{},\\"sourceType\\":\\"SAF\\",\\"title\\":\\"经纬度自定义系统变量\\",\\"type\\":\\"SELF_BIND\\"},\\"operatorCode\\":\\"equals\\",\\"operatorName\\":\\"等于\\",\\"parentId\\":0,\\"right\\":{\\"name\\":\\"cc\\",\\"rightVariableType\\":\\"constant\\"},\\"sequence\\":5}],\\"parentId\\":0,\\"relationship\\":\\"and\\"},\\"then\\":[{\\"actionType\\":\\"TAG\\",\\"code\\":\\"addDeTags\\",\\"description\\":\\"打标签\\",\\"displayType\\":\\"ACTION\\",\\"fieldType\\":\\"STRING\\",\\"inputs\\":[\\"332\\"],\\"name\\":\\"__addDeTags__\\",\\"outputType\\":\\"const\\",\\"sourceType\\":\\"SAF\\",\\"title\\":\\"打标签\\",\\"type\\":\\"ACTION\\"}]}],\\"elseStatement\\":{\\"then\\":[{\\"actionType\\":\\"TAG\\",\\"code\\":\\"addDeTags\\",\\"description\\":\\"打标签\\",\\"displayType\\":\\"ACTION\\",\\"fieldType\\":\\"STRING\\",\\"inputs\\":[\\"321\\"],\\"name\\":\\"__addDeTags__\\",\\"outputType\\":\\"const\\",\\"sourceType\\":\\"SAF\\",\\"title\\":\\"打标签\\",\\"type\\":\\"ACTION\\"}]},\\"ifStatement\\":{\\"condition\\":{\\"currentId\\":0,\\"deepCount\\":1,\\"list\\":[{\\"currentId\\":0,\\"deepCount\\":1,\\"left\\":{\\"code\\":\\"queryPhoneSimulatorInfo(deviceToken)?.brand\\",\\"description\\":\\"设备信息-终端品牌\\",\\"displayType\\":\\"DEVICE\\",\\"fieldType\\":\\"STRING\\",\\"functionCode\\":\\"\\",\\"functionName\\":\\"\\",\\"hasRightVariable\\":true,\\"name\\":\\"__device_brand__\\",\\"sourceType\\":\\"SAF\\",\\"title\\":\\"设备信息-终端品牌-brand\\",\\"type\\":\\"DEVICE\\"},\\"operatorCode\\":\\"deInNameList\\",\\"operatorName\\":\\"在名单中\\",\\"parentId\\":0,\\"right\\":{\\"code\\":\\"nl_UN8otElLb490\\",\\"description\\":\\"描述11\\",\\"displayType\\":\\"NAME_LIST\\",\\"name\\":\\"nl_UN8otElLb490\\",\\"rightVariableType\\":\\"constant\\",\\"sourceType\\":\\"SAF\\",\\"title\\":\\"wtz_名单新建测试02\\",\\"type\\":\\"NAME_LIST\\"},\\"sequence\\":1},{\\"currentId\\":0,\\"deepCount\\":1,\\"left\\":{\\"code\\":\\"deFunctionProcess(ip,\\\\\\"isIp\\\\\\")\\",\\"description\\":\\"判断是否符合IPv4标准\\",\\"displayType\\":\\"SYSTEM_BIND\\",\\"fieldType\\":\\"BOOLEAN\\",\\"functionCode\\":\\"\\",\\"functionName\\":\\"\\",\\"hasRightVariable\\":false,\\"name\\":\\"__isIpAddressV4__\\",\\"outputThreshold\\":{},\\"sourceType\\":\\"SAF\\",\\"title\\":\\"IP是否符合IPV4格式\\",\\"type\\":\\"SYSTEM_BIND\\"},\\"operatorCode\\":\\"boolIsTrue\\",\\"operatorName\\":\\"为true\\",\\"parentId\\":0,\\"right\\":{\\"name\\":\\"\\",\\"rightVariableType\\":\\"constant\\"},\\"sequence\\":2},{\\"currentId\\":0,\\"deepCount\\":1,\\"list\\":[{\\"currentId\\":0,\\"deepCount\\":1,\\"left\\":{\\"code\\":\\"parseIpV2(ip)?.cityId\\",\\"description\\":\\"通过IP地址库解析IP所在的城市Code，例如，输入“42.120.74.211”，经过该变量运算，输出“330100”。\\",\\"displayType\\":\\"SYSTEM_BIND\\",\\"fieldType\\":\\"STRING\\",\\"functionCode\\":\\"\\",\\"functionName\\":\\"\\",\\"hasRightVariable\\":true,\\"name\\":\\"__ipLocationCityCode__\\",\\"outputThreshold\\":{},\\"sourceType\\":\\"SAF\\",\\"title\\":\\"IP所在地_城市Code\\",\\"type\\":\\"SYSTEM_BIND\\"},\\"operatorCode\\":\\"equals\\",\\"operatorName\\":\\"等于\\",\\"parentId\\":0,\\"right\\":{\\"code\\":\\"deFunctionProcess(ip,\\\\\\"getCountry\\\\\\")\\",\\"description\\":\\"通过IP地址库解析IP所在的城市名称，例如，输入“42.120.74.211”，经过该变量运算，输出“CN”。\\",\\"displayType\\":\\"SYSTEM_BIND\\",\\"fieldType\\":\\"STRING\\",\\"functionCode\\":\\"\\",\\"functionName\\":\\"\\",\\"name\\":\\"__ipLocationCountryId__\\",\\"outputThreshold\\":{},\\"rightVariableType\\":\\"variable\\",\\"sourceType\\":\\"SAF\\",\\"title\\":\\"IP所在地_国家Code\\",\\"type\\":\\"SYSTEM_BIND\\"},\\"sequence\\":3},{\\"currentId\\":0,\\"deepCount\\":1,\\"list\\":[{\\"currentId\\":0,\\"deepCount\\":1,\\"left\\":{\\"code\\":\\"parseIpV2(ip)?.cityId\\",\\"description\\":\\"通过IP地址库解析IP所在的城市Code，例如，输入“42.120.74.211”，经过该变量运算，输出“330100”。\\",\\"displayType\\":\\"SYSTEM_BIND\\",\\"fieldType\\":\\"STRING\\",\\"functionCode\\":\\"\\",\\"functionName\\":\\"\\",\\"hasRightVariable\\":true,\\"name\\":\\"__ipLocationCityCode__\\",\\"outputThreshold\\":{\\"$ref\\":\\"$.ifStatement.condition.list[2].list[0].left.outputThreshold\\"},\\"sourceType\\":\\"SAF\\",\\"title\\":\\"IP所在地_城市Code\\",\\"type\\":\\"SYSTEM_BIND\\"},\\"operatorCode\\":\\"deInNameList\\",\\"operatorName\\":\\"在名单中\\",\\"parentId\\":0,\\"right\\":{\\"code\\":\\"nl_NsVwBD2s11e0\\",\\"displayType\\":\\"NAME_LIST\\",\\"name\\":\\"nl_NsVwBD2s11e0\\",\\"rightVariableType\\":\\"constant\\",\\"sourceType\\":\\"SAF\\",\\"title\\":\\"device_block_list\\",\\"type\\":\\"NAME_LIST\\"},\\"sequence\\":4}],\\"parentId\\":0,\\"relationship\\":\\"and\\"}],\\"parentId\\":0,\\"relationship\\":\\"and\\"}],\\"parentId\\":0,\\"relationship\\":\\"and\\"},\\"then\\":[{\\"actionType\\":\\"TAG\\",\\"code\\":\\"addDeTags\\",\\"description\\":\\"打标签\\",\\"displayType\\":\\"ACTION\\",\\"fieldType\\":\\"STRING\\",\\"inputs\\":[\\"123\\"],\\"name\\":\\"__addDeTags__\\",\\"outputType\\":\\"const\\",\\"sourceType\\":\\"SAF\\",\\"title\\":\\"打标签\\",\\"type\\":\\"ACTION\\"}]}}'),
    ruleExpressions?: string(name='ruleExpressions', description='Expression.', example='[{\\"expressionName\\":\\"代下单_记录日志\\",\\"itemId\\":1,\\"left\\":{\\"name\\":\\"dhcfX2v7670\\"},\\"operatorCode\\":\\"gte\\",\\"operatorName\\":\\"大于等于\\",\\"right\\":{\\"fieldValue\\":\\"2\\"}}]'),
    ruleId?: string(name='ruleId', description='Policy ID', example='101804'),
    ruleName?: string(name='ruleName', description='Policy name', example='营销风险识别'),
    ruleStatus?: string(name='ruleStatus', description='Policy status', example='RUNNING'),
    ruleType?: string(name='ruleType', description='Rule type.', example='DSL'),
  }(name='resultObject', description='Returned object'),
}

model DescribeRuleSnapshotResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRuleSnapshotResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRuleSnapshot  DescribeRuleSnapshotRequest
  * @return DescribeRuleSnapshotResponse
 */
async function describeRuleSnapshot(request: DescribeRuleSnapshotRequest): DescribeRuleSnapshotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRuleSnapshot', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRuleVersionListRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  consoleRuleId?: long(name='consoleRuleId', description='Policy primary key ID', example='6851', position='Query'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1', position='Query'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10', example='10', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  ruleId?: string(name='ruleId', description='Policy ID', example='101804', position='Query'),
}

model DescribeRuleVersionListResponseBody = {
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10', example='10'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: [ 
    {
      consoleAudit?: {
        applyUserId?: string(name='applyUserId', description='Initiator UID', example='1519714049632764'),
        applyUserName?: string(name='applyUserName', description='Initiator name', example='root'),
        auditMsg?: string(name='auditMsg', description='Approval comment', example='同意'),
        auditRealUserId?: string(name='auditRealUserId', description='Final approver UID', example='1519714049632764'),
        auditRealUserName?: string(name='auditRealUserName', description='Final approver name', example='root'),
        auditRemark?: string(name='auditRemark', description='Approver\\"s remarks.', example='备注'),
        auditStatus?: string(name='auditStatus', description='Approval status', example='AGREE'),
        auditTime?: long(name='auditTime', description='Approval time.', example='1545726028000'),
        auditUserId?: string(name='auditUserId', description='Designated approver UID', example='1519714049632764'),
        auditUserName?: string(name='auditUserName', description='Designated auditor\\"s name', example='root'),
        gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1545726028000'),
        id?: long(name='id', description='Primary key ID', example='1728'),
        relationExt?: string(name='relationExt', description='Information of related others (in JSON format)', example='{}'),
        relationId?: long(name='relationId', description='ID of the associated transaction', example='123'),
        relationName?: string(name='relationName', description='Name of the associated item', example='营销风险识别'),
        relationType?: string(name='relationType', description='Type of approval (e.g., `rule` for policy approval)', example='RULE'),
      }(name='consoleAudit', description='Audit object'),
      consoleRuleId?: long(name='consoleRuleId', description='Console rule ID.', example='6715'),
      consoleRuleMemo?: string(name='consoleRuleMemo', description='Associated policy remarks', example='备注'),
      consoleRuleName?: string(name='consoleRuleName', description='Associated policy name', example='营销风险识别'),
      eventCode?: string(name='eventCode', description='Event code', example='de_aszbjb7236'),
      eventType?: string(name='eventType', description='Event type', example='MAIN'),
      gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1621578648000'),
      gmtModified?: long(name='gmtModified', description='Modification time.', example='1565701886000'),
      id?: long(name='id', description='Primary key ID of the policy', example='376773'),
      lastOperator?: string(name='lastOperator', description='The user who last operated.', example='1519714049632764'),
      priority?: long(name='priority', description='Policy priority, the higher the number, the higher the priority.', example='10'),
      ruleId?: string(name='ruleId', description='Policy ID', example='102224'),
      ruleStatus?: string(name='ruleStatus', description='Policy status', example='RUNNING'),
      ruleType?: string(name='ruleType', description='Rule Type', example='DEFAULT'),
      version?: long(name='version', description='Version number', example='2'),
    }
  ](name='resultObject', description='Returned object'),
  totalItem?: int32(name='totalItem', description='Total number of items', example='3'),
  totalPage?: int32(name='totalPage', description='Total number of pages.', example='7'),
}

model DescribeRuleVersionListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRuleVersionListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRuleVersionList  DescribeRuleVersionListRequest
  * @return DescribeRuleVersionListResponse
 */
async function describeRuleVersionList(request: DescribeRuleVersionListRequest): DescribeRuleVersionListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRuleVersionList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSDKDownloadListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  deviceType?: string(name='deviceType', description='Device type.', example='ANDROID', position='Query'),
  listType?: string(name='listType', description='Download type', example='OLD', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeSDKDownloadListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: [ 
    {
      description?: string(name='description', description='Description information.', example='描述'),
      developer?: string(name='developer', description='Developer', example='阿里云安全-风险识别'),
      deviceType?: string(name='deviceType', description='Device type.', example='ANDROID'),
      downloadUrl?: string(name='downloadUrl', description='Download URL.', example='https://aliyun-xxxx.oss-cn-xxx.xxx.com/sdk/xxx/10056.1/Android-AliyunDeviceEnhance-10056.1-20250611.tgz'),
      md5?: string(name='md5', description='File MD5.', example='E582EEB6B4BC9B5CB168AA5A7DD0EE93'),
      packageName?: string(name='packageName', description='Package name', example='net.security.device'),
      privacyLink?: string(name='privacyLink', description='Risk recognition SDK privacy policy link', example='https://terms.aliyun.com/legal-agreement/terms/suit_bu1_ali_cloud/suit_bu1_ali_cloud202111120818_92724.html'),
      pushTime?: string(name='pushTime', description='Release time', example='1751212800000'),
      sdkVersion?: string(name='sdkVersion', description='SDK version.', example='1'),
      size?: string(name='size', description='Size', example='4.12 MB'),
    }
  ](name='resultObject', description='Return object'),
}

model DescribeSDKDownloadListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSDKDownloadListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSDKDownloadList  DescribeSDKDownloadListRequest
  * @return DescribeSDKDownloadListResponse
 */
async function describeSDKDownloadList(request: DescribeSDKDownloadListRequest): DescribeSDKDownloadListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSDKDownloadList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSafConsoleRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  content?: string(name='content', description='Query content.', example='ei_riskLpInfo', position='Query'),
  service: string(name='service', description='Service to be called.

This parameter is required.', example='ei_riskLpInfo', position='Query'),
}

model DescribeSafConsoleResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  bizData?: [ string ](name='bizData', description='Returned result.'),
}

model DescribeSafConsoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSafConsoleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSafConsole  DescribeSafConsoleRequest
  * @return DescribeSafConsoleResponse
 */
async function describeSafConsole(request: DescribeSafConsoleRequest): DescribeSafConsoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSafConsole', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSafDeOrderRequest {
  lang?: string(name='Lang', description='Set the language type for request and response messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1', position='Query'),
  endDate?: string(name='endDate', description='End date', example='1728008155799', position='Query'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10', example='10', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  startDate?: string(name='startDate', description='Start date.', example='1728008155799', position='Query'),
}

model DescribeSafDeOrderResponseBody = {
  requestId?: string(name='requestId', description='Request ID', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: {
    expirationDate?: long(name='expirationDate', description='Expiration time', example='1728008155799'),
    openUserType?: int32(name='openUserType', description='Based on the product type subscribed by the customer, the console permissions are divided into three categories:

     1. New Customer: Has not purchased/subscribed to any service.
     2. Old Customer (Subscription): Customers who have purchased the SAF product.
     3. Pay-As-You-Go: Customers who have purchased the SAF_BAG product or activated SAF_POS.', example='2'),
    regions?: [ 
      {
        expirationDate?: long(name='expirationDate'),
        region?: string(name='region'),
        specification?: int32(name='specification'),
      }
    ](name='regions'),
  }(name='resultObject', description='Return object'),
}

model DescribeSafDeOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSafDeOrderResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSafDeOrder  DescribeSafDeOrderRequest
  * @return DescribeSafDeOrderResponse
 */
async function describeSafDeOrder(request: DescribeSafDeOrderRequest): DescribeSafDeOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSafDeOrder', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSafOrderRequest {
  lang?: string(name='Lang', description='Set the language type for request and response, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1', position='Query'),
  endDate?: string(name='endDate', description='End date.', example='1755076800000', position='Query'),
  exactProductCode?: string(name='exactProductCode', description='Product code.', example='saf_de', position='Query'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10.', example='10', position='Query'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou', position='Query'),
  startDate?: string(name='startDate', description='Start time.', example='1752076800000', position='Query'),
}

model DescribeSafOrderResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    expirationDate?: long(name='expirationDate', description='Expiration date (timestamp).', example='1755076800000'),
  }(name='resultObject', description='Returned object.'),
}

model DescribeSafOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSafOrderResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSafOrder  DescribeSafOrderRequest
  * @return DescribeSafOrderResponse
 */
async function describeSafOrder(request: DescribeSafOrderRequest): DescribeSafOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSafOrder', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSafStartConfigRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeSafStartConfigResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    deviceTypes?: [ string ](name='deviceTypes', description='List of device types.'),
    eventCodes?: [ string ](name='eventCodes', description='Event codes.'),
    languages?: [ string ](name='languages', description='Configuration language details.'),
    serverRegions?: [ string ](name='serverRegions', description='Server region'),
  }(name='resultObject', description='Returned object'),
}

model DescribeSafStartConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSafStartConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSafStartConfig  DescribeSafStartConfigRequest
  * @return DescribeSafStartConfigResponse
 */
async function describeSafStartConfig(request: DescribeSafStartConfigRequest): DescribeSafStartConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSafStartConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSafStartStepsRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  aliyunServer?: boolean(name='aliyunServer', description='Whether the server is an Alibaba Cloud server

true or false', example='true', position='Query'),
  deviceTypesStr?: string(name='deviceTypesStr', description='Used to receive a collection of strings from the frontend that POP cannot accept
     
Device type', example='ios', position='Query'),
  eventCode?: string(name='eventCode', description='Event code', example='de_ahqido8038', position='Query'),
  language?: string(name='language', description='Language, parameters can be passed
- zh-CN: Chinese (default)
- en-US: English', example='zh_CN', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  serverRegion?: string(name='serverRegion', description='Server region', example='cn-hangzhou', position='Query'),
}

model DescribeSafStartStepsResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: [ 
    {
      content?: string(name='content', description='Step content', example='https://help.aliyun.com/document_detail/177689.html'),
      id?: string(name='id', description='Step title', example='ios'),
      type?: string(name='type', description='Type', example='URL'),
    }
  ](name='resultObject', description='Return object'),
}

model DescribeSafStartStepsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSafStartStepsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSafStartSteps  DescribeSafStartStepsRequest
  * @return DescribeSafStartStepsResponse
 */
async function describeSafStartSteps(request: DescribeSafStartStepsRequest): DescribeSafStartStepsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSafStartSteps', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSafTagListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  tagName?: string(name='TagName', description='Tag name. Fuzzy search.', example='rn0301', position='Query'),
  apiId?: string(name='apiId', description='API service ID.', example='34', position='Query'),
  currentPage?: string(name='currentPage', description='Current page number.', example='1', position='Query'),
  pageSize?: string(name='pageSize', description='Page size, default value is 10.', example='10', position='Query'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou', position='Query'),
}

model DescribeSafTagListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10.', example='10'),
  resultObject?: [ 
    {
      tagDesc?: string(name='tagDesc', description='Tag description.', example='依赖IP画像模型识别输出风险高、中高、中的判定\\n数据来源主要基于IP的网络属性数据和对黑产行为轨迹的情报监控数据，涵盖可识别检测IP网络属性特征、恶意属性等特征\\n而模型评分的高中低主要是根据当前IP号段命中风险行为的恶意程度和种类来判定的\\n备注：以下rn0311、rn0312、rn0313、rn0314、rn0315属于IP画像模型针对当前请求IP识别出的风险类别'),
      tagMean?: string(name='tagMean', description='Tag meaning.', example='IP风险评分高'),
      tagName?: string(name='tagName', description='Tag name.', example='rn0301'),
      tagState?: string(name='tagState', description='Tag identifier.', example='rn0301'),
      tagType?: string(name='tagType', description='Tag type.', example='IP风险类'),
      tagUid?: string(name='tagUid', description='Unique identifier of the tag key.', example='rn0301'),
      updateTime?: string(name='updateTime', description='Update time.', example='1684744034000'),
    }
  ](name='resultObject', description='Returned object.'),
  totalItem?: int32(name='totalItem', description='Total number of items.', example='6'),
  totalPage?: int32(name='totalPage', description='Total number of pages.', example='1'),
}

model DescribeSafTagListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSafTagListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSafTagList  DescribeSafTagListRequest
  * @return DescribeSafTagListResponse
 */
async function describeSafTagList(request: DescribeSafTagListRequest): DescribeSafTagListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSafTagList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSampleBatchOssPolicyRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  batchName?: string(name='batchName', description='Sample batch name', example='白样本', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeSampleBatchOssPolicyResponseBody = {
  accessId?: string(name='AccessId', description='OSS Access ID', example='LTAxxxxxxxxxxxx'),
  host?: string(name='Host', description='OSS Domain', example='172.25.126.234'),
  key?: string(name='Key', description='Key required for file upload.', example='saf/de/namelist/e924/ufzgsedX9bd3a7'),
  policy?: string(name='Policy', description='OSS Security Policy', example='eyJleHBpcmF0aW9uIjoiMjAyNS0wNy0zMFQwNjowNTo0OS45NTRaIiwiY29uZGl0aW9ucyI6W1siY29udGVudC1sZW5ndGgtcmFuZ2UiLDAsMTA0ODU3NjAwMF0sWyJlcSIsIiRrZXkiLCJzYWZcL2RlXC9uYW1lbGlzdFwvZTkyNFwvdWZ6Z3NlZFg5Ymxxxxxxxxxxx'),
  requestId?: string(name='RequestId', description='ID of the request', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  signature?: string(name='Signature', description='OSS Signature', example='PoAUQ//RusJJFIvCrn36O3+mM/U='),
}

model DescribeSampleBatchOssPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSampleBatchOssPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSampleBatchOssPolicy  DescribeSampleBatchOssPolicyRequest
  * @return DescribeSampleBatchOssPolicyResponse
 */
async function describeSampleBatchOssPolicy(request: DescribeSampleBatchOssPolicyRequest): DescribeSampleBatchOssPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSampleBatchOssPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSampleDataByBatchUUidPageRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  batchUuid?: string(name='batchUuid', description='Sample batch UUID', example='203f1ae65c0a41a49dc4f8a47946caa2', position='Query'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1', position='Query'),
  dataValue?: string(name='dataValue', description='Content of the list entered in the text box', example='1770000000,1770000001', position='Query'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10', example='10', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  updateBeginTime?: long(name='updateBeginTime', description='Start time', example='1724986526000', position='Query'),
  updateEndTime?: long(name='updateEndTime', description='End time', example='1724986526000', position='Query'),
}

model DescribeSampleDataByBatchUUidPageResponseBody = {
  requestId?: string(name='RequestId', description='ID of the request', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10', example='10'),
  resultObject?: [ 
    {
      batchName?: string(name='batchName', description='Sample batch name', example='白样本'),
      creator?: string(name='creator', description='Creator', example='1519714049632764'),
      dataTagType?: string(name='dataTagType', description='Sample type', example='pass'),
      dataValue?: string(name='dataValue', description='Data content', example='177000001'),
      gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1621578648000'),
      gmtModified?: long(name='gmtModified', description='Modification time', example='1565701886000'),
      lastSourceType?: string(name='lastSourceType', description='Last source', example='Console-Text'),
      uuid?: string(name='uuid', description='Sample batch UUID', example='203f1ae65c0a41a49dc4f8a47946caa2'),
      version?: int32(name='version', description='Version', example='1'),
    }
  ](name='resultObject', description='Returned object'),
  totalItem?: int32(name='totalItem', description='Total number of items', example='6'),
  totalPage?: int32(name='totalPage', description='Total number of pages.', example='1'),
}

model DescribeSampleDataByBatchUUidPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSampleDataByBatchUUidPageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSampleDataByBatchUUidPage  DescribeSampleDataByBatchUUidPageRequest
  * @return DescribeSampleDataByBatchUUidPageResponse
 */
async function describeSampleDataByBatchUUidPage(request: DescribeSampleDataByBatchUUidPageRequest): DescribeSampleDataByBatchUUidPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSampleDataByBatchUUidPage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSampleDataListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  currentPage?: string(name='currentPage', description='Current page number.', example='1', position='Query'),
  deleteTag?: string(name='deleteTag', description='Deletion status', example='DELETE', position='Query'),
  pageSize?: string(name='pageSize', description='Page size, default value is 10.', example='10', position='Query'),
  queryContent?: string(name='queryContent', description='Query content', example='手机号', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  sampleId?: long(name='sampleId', description='Sample ID.', example='5467', position='Query'),
  scene?: string(name='scene', description='Scene', example='1', position='Query'),
  status?: string(name='status', description='Status.', example='CREATE', position='Query'),
}

model DescribeSampleDataListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10.', example='10'),
  resultObject?: [ 
    {
      classificationType?: string(name='classificationType', description='Classification type, binary or multi-class.', example='二分类'),
      dataDistributed?: string(name='dataDistributed', description='Criterion value for sample data calculation', example='{"正样本":"1"，"负样本":"1"}'),
      dataTitle?: string(name='dataTitle', description='First row of sample data. Used to define the values of each column.', example='17700000000'),
      deleteTag?: string(name='deleteTag', description='Deletion tag.', example='DELETE'),
      description?: string(name='description', description='Description information.', example='描述'),
      gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1621578648000'),
      gmtModified?: long(name='gmtModified', description='Modification time.', example='1565701886000'),
      id?: long(name='id', description='Primary key ID', example='497'),
      name?: string(name='name', description='Name', example='注册样本'),
      normalSize?: long(name='normalSize', description='Number of normal samples', example='999'),
      recallConfig?: string(name='recallConfig', description='Recall configuration', example='{"variables":"a,b,c"}'),
      riskSize?: long(name='riskSize', description='Number of risk samples', example='1'),
      riskValue?: string(name='riskValue', description='Specified risk value', example='black'),
      sampleLabelDetail?: string(name='sampleLabelDetail', description='Sample label details', example='[{"type":"positive","size":"2000","value":1},{"type":"negative","size":1900,"value":0}]'),
      sampleSize?: long(name='sampleSize', description='Sample size', example='1000'),
      scene?: string(name='scene', description='Scene code', example='account_abuse_detection'),
      status?: string(name='status', description='Status.', example='CREATE'),
      storePath?: string(name='storePath', description='Storage path', example='saf/de/sample/3dc2spspHKq4G3YI9d08'),
      storeType?: string(name='storeType', description='Storage type', example='OSS'),
      supportRecall?: string(name='supportRecall', description='Whether recall is supported', example='true'),
      userId?: long(name='userId', description='User UID', example='1519714049632764'),
      version?: int32(name='version', description='Version', example='1'),
    }
  ](name='resultObject', description='Returned object'),
  totalItem?: int32(name='totalItem', description='Total number of items.', example='6'),
  totalPage?: int32(name='totalPage', description='Total number of pages.', example='1'),
}

model DescribeSampleDataListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSampleDataListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSampleDataList  DescribeSampleDataListRequest
  * @return DescribeSampleDataListResponse
 */
async function describeSampleDataList(request: DescribeSampleDataListRequest): DescribeSampleDataListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSampleDataList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSampleDataPageRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1', position='Query'),
  dataValue?: string(name='dataValue', description='Content of the list entered in the text box', example='1770000000', position='Query'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10', example='10', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  updateBeginTime?: long(name='updateBeginTime', description='Start time', example='1730429469000', position='Query'),
  updateEndTime?: long(name='updateEndTime', description='End time', example='1730429469000', position='Query'),
}

model DescribeSampleDataPageResponseBody = {
  requestId?: string(name='RequestId', description='ID of the request', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Number of items per page, default is 10.', example='10'),
  resultObject?: [ 
    {
      creator?: string(name='creator', description='Creator', example='1519714049632764'),
      dataTagType?: string(name='dataTagType', description='Sample type', example='pass'),
      dataValue?: string(name='dataValue', description='Content of the list entered in the text box', example='1770000000'),
      gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1621578648000'),
      gmtModified?: long(name='gmtModified', description='Modification time', example='1565701886000'),
      lastSourceType?: string(name='lastSourceType', description='Last source', example='Console-Text'),
      updator?: string(name='updator', description='Modifier', example='1519714049632764'),
      uuid?: string(name='uuid', description='UUID of the sample batch', example='48653f1372444c078f7b3d1c317d37dc'),
      version?: int32(name='version', description='Version number', example='1'),
    }
  ](name='resultObject', description='Returned object'),
  totalItem?: int32(name='totalItem', description='Total number of items', example='3'),
  totalPage?: int32(name='totalPage', description='Total number of pages.', example='1'),
}

model DescribeSampleDataPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSampleDataPageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSampleDataPage  DescribeSampleDataPageRequest
  * @return DescribeSampleDataPageResponse
 */
async function describeSampleDataPage(request: DescribeSampleDataPageRequest): DescribeSampleDataPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSampleDataPage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSampleDemoDownloadUrlRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  scene: string(name='scene', description='Scene code

This parameter is required.', example='coupon_abuse_detection', position='Query'),
}

model DescribeSampleDemoDownloadUrlResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DescribeSampleDemoDownloadUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSampleDemoDownloadUrlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSampleDemoDownloadUrl  DescribeSampleDemoDownloadUrlRequest
  * @return DescribeSampleDemoDownloadUrlResponse
 */
async function describeSampleDemoDownloadUrl(request: DescribeSampleDemoDownloadUrlRequest): DescribeSampleDemoDownloadUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSampleDemoDownloadUrl', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSampleDownloadUrlRequest {
  lang?: string(name='Lang', description='Set the language type for request and response, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  sampleId: long(name='sampleId', description='Sample ID.

This parameter is required.', example='5467', position='Query'),
}

model DescribeSampleDownloadUrlResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DescribeSampleDownloadUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSampleDownloadUrlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSampleDownloadUrl  DescribeSampleDownloadUrlRequest
  * @return DescribeSampleDownloadUrlResponse
 */
async function describeSampleDownloadUrl(request: DescribeSampleDownloadUrlRequest): DescribeSampleDownloadUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSampleDownloadUrl', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSampleInfoRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  id?: long(name='id', description='Primary key ID', example='3144', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  versions?: int32(name='versions', description='Version number.', example='1', position='Query'),
}

model DescribeSampleInfoResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    id?: long(name='id', description='Primary key ID', example='3144'),
    sampleTags?: string(name='sampleTags', description='Sample tags.', example='em0102'),
    sampleType?: string(name='sampleType', description='Sample type', example='PHONE'),
    sampleValue?: string(name='sampleValue', description='Sample value.', example='17700000000'),
    updateTime?: string(name='updateTime', description='Update time.', example='1753804800000'),
    version?: int32(name='version', description='Version number.', example='1'),
  }(name='resultObject', description='Returned object'),
}

model DescribeSampleInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSampleInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSampleInfo  DescribeSampleInfoRequest
  * @return DescribeSampleInfoResponse
 */
async function describeSampleInfo(request: DescribeSampleInfoRequest): DescribeSampleInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSampleInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSampleListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1', position='Query'),
  pageSize?: int32(name='pageSize', description='Page size, with a default value of 10', example='10', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  sampleType?: string(name='sampleType', description='Sample type', example='PHONE', position='Query'),
  sampleValue?: string(name='sampleValue', description='Sample data value.', example='1770000000', position='Query'),
}

model DescribeSampleListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, with a default value of 10', example='10'),
  resultObject?: [ 
    {
      id?: long(name='id', description='Database ID.', example='497'),
      sampleTags?: string(name='sampleTags', description='Sample tags.', example='rm0102'),
      sampleType?: int32(name='sampleType', description='Sample type', example='PHONE'),
      sampleValue?: string(name='sampleValue', description='Sample value.', example='1770000000'),
      updateTime?: long(name='updateTime', description='Update time.', example='1699450018265'),
      version?: int32(name='version', description='Version number.', example='1'),
    }
  ](name='resultObject', description='Returned object'),
  totalItem?: int32(name='totalItem', description='Total count.', example='6'),
  totalPage?: int32(name='totalPage', description='Total pages', example='1'),
}

model DescribeSampleListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSampleListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSampleList  DescribeSampleListRequest
  * @return DescribeSampleListResponse
 */
async function describeSampleList(request: DescribeSampleListRequest): DescribeSampleListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSampleList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSampleSceneListRequest {
  lang?: string(name='Lang', description='Set the language type for request and response messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeSampleSceneListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10.', example='10'),
  resultObject?: [ 
    {
      bizType?: string(name='bizType', description='Business type.', example='variable_scene'),
      configKey?: string(name='configKey', description='Configuration key.', example='account_abuse_detection'),
      configValue?: string(name='configValue', description='Configuration value.', example='1'),
      creator?: string(name='creator', description='Creator.', example='1519714049632764'),
      description?: string(name='description', description='Description information.', example='变量描述'),
      gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1621578648000'),
      gmtModified?: long(name='gmtModified', description='Modification time.', example='1565701886000'),
      id?: long(name='id', description='Task ID.', example='3144'),
      lastModifiedOperator?: string(name='lastModifiedOperator', description='Last modified by.', example='1519714049632764'),
      status?: string(name='status', description='Status.', example='ENABLE'),
    }
  ](name='resultObject', description='Returned object.'),
  totalItem?: int32(name='totalItem', description='Total number of items.', example='6'),
  totalPage?: int32(name='totalPage', description='Total number of pages.', example='1'),
}

model DescribeSampleSceneListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSampleSceneListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSampleSceneList  DescribeSampleSceneListRequest
  * @return DescribeSampleSceneListResponse
 */
async function describeSampleSceneList(request: DescribeSampleSceneListRequest): DescribeSampleSceneListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSampleSceneList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSampleTagListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and responses, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeSampleTagListResponseBody = {
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DescribeSampleTagListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSampleTagListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSampleTagList  DescribeSampleTagListRequest
  * @return DescribeSampleTagListResponse
 */
async function describeSampleTagList(request: DescribeSampleTagListRequest): DescribeSampleTagListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSampleTagList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSampleUploadPolicyRequest {
  lang?: string(name='Lang', description='Set the language type for request and response messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou', position='Query'),
}

model DescribeSampleUploadPolicyResponseBody = {
  accessId?: string(name='AccessId', description='OSS access key ID.', example='LTAxxxxxxxxxxxx'),
  host?: string(name='Host', description='OSS domain name.', example='emseu.cxy8uoq4aafx.eu-central-1.rds.amazonaws.com'),
  key?: string(name='Key', description='The key of OSS upload policy.', example='saf/de/namelist/e924/ufzgsedX9bd3a7'),
  policy?: string(name='Policy', description='OSS upload policy.', example='eyJleHBpcmF0aW9uIjoiMjAyNS0wNy0zMFQwNjowNTo0OS45NTRaIiwiY29uZGl0aW9ucyI6W1siY29udGVudC1sZW5ndGgtcmFuZ2UiLDAsMTA0ODU3NjAwMF0sWyJlcSIsIiRrZXkiLCJzYWZcL2RlXC9uYW1lbGlzdFwvZTkyNFwvdWZ6Z3NlZFg5Ymxxxxxxxxxxx'),
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  signature?: string(name='Signature', description='Signature information.', example='3Es5j/9Xm/zwPcM9cwEr5pa0Wsc='),
  stsToken?: string(name='StsToken', description='Temporary identity credential.', example='tT44bMQxxxxxxxxxxxxxxx'),
}

model DescribeSampleUploadPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSampleUploadPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSampleUploadPolicy  DescribeSampleUploadPolicyRequest
  * @return DescribeSampleUploadPolicyResponse
 */
async function describeSampleUploadPolicy(request: DescribeSampleUploadPolicyRequest): DescribeSampleUploadPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSampleUploadPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSamplebatchPageRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1', position='Query'),
  dataValue?: string(name='dataValue', description='Content of the list entered in the text box', example='1770000000', position='Query'),
  pageSize?: int32(name='pageSize', description='Page size, with a default value of 10', example='10', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeSamplebatchPageResponseBody = {
  requestId?: string(name='RequestId', description='ID of the request', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, with a default value of 10', example='10'),
  resultObject?: [ 
    {
      batchName?: string(name='batchName', description='Sample batch name', example='白样本'),
      creator?: string(name='creator', description='Creator.', example='1519714049632764'),
      dataType?: string(name='dataType', description='Data type', example='mobile'),
      description?: string(name='description', description='Description.', example='描述'),
      gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1621578648000'),
      gmtModified?: long(name='gmtModified', description='Modification time', example='1565701886000'),
      initValidFileRow?: long(name='initValidFileRow', description='Valid sample content data', example='2'),
      sampleBatchType?: string(name='sampleBatchType', description='Specific type of the sample list', example='pass'),
      services?: string(name='services', description='Service ID', example='account_abuse'),
      updator?: string(name='updator', description='Modifier', example='1519714049632764'),
      uuid?: string(name='uuid', description='Sample batch UUID', example='203f1ae65c0a41a49dc4f8a47946caa2'),
    }
  ](name='resultObject', description='Returned object'),
  totalItem?: int32(name='totalItem', description='Total number of items', example='3'),
  totalPage?: int32(name='totalPage', description='Total number of pages', example='1'),
}

model DescribeSamplebatchPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSamplebatchPageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSamplebatchPage  DescribeSamplebatchPageRequest
  * @return DescribeSamplebatchPageResponse
 */
async function describeSamplebatchPage(request: DescribeSamplebatchPageRequest): DescribeSamplebatchPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSamplebatchPage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSceneAllEventNameCodeListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  createType?: string(name='createType', description='Creation type', example='NORMAL', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeSceneAllEventNameCodeListResponseBody = {
  code?: string(name='code', description='Status code', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error details', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID, which is unique for each request, facilitating subsequent troubleshooting', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: [ 
    {
      children?: [ 
        {
          createType?: string(name='createType', description='Creation type', example='NORMAL'),
          eventCode?: string(name='eventCode', description='Event code', example='de_aamexg3015'),
          eventName?: string(name='eventName', description='Event name.', example='测试'),
          eventType?: string(name='eventType', description='Event type', example='BYPASS'),
        }
      ](name='children', description='Child objects'),
      createType?: string(name='createType', description='Creation type', example='MORMAL'),
      eventCode?: string(name='eventCode', description='Event code', example='de_aszbjb7236'),
      eventName?: string(name='eventName', description='Event name.', example='营销风险识别_增强版'),
      eventType?: string(name='eventType', description='Event type', example='MAIN'),
    }
  ](name='resultObject', description='Returned object'),
  success?: boolean(name='success', description='Indicates whether the operation was successful, where true means success.', example='true'),
}

model DescribeSceneAllEventNameCodeListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSceneAllEventNameCodeListResponseBody(name='body'),
}

/**
  * @description Dropdown list for scenario-based risk control events
  * @param request  the request parameters of DescribeSceneAllEventNameCodeList  DescribeSceneAllEventNameCodeListRequest
  * @return DescribeSceneAllEventNameCodeListResponse
 */
async function describeSceneAllEventNameCodeList(request: DescribeSceneAllEventNameCodeListRequest): DescribeSceneAllEventNameCodeListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSceneAllEventNameCodeList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSceneEventPageListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  currentPage?: string(name='currentPage', description='Current page number.', example='1', position='Query'),
  nameOrCode?: string(name='nameOrCode', description='Search name or service code', example='servicer_code', position='Query'),
  pageSize?: string(name='pageSize', description='Page size.', example='10', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeSceneEventPageListResponseBody = {
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Number of items per page. Default value: 20, minimum value: 1, maximum value: 50.', example='20'),
  requestId?: string(name='requestId', description='Request ID, each request has a unique value, which facilitates subsequent troubleshooting', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: [ 
    {
      commonRuleCount?: string(name='commonRuleCount', description='Number of common rules', example='10'),
      customRuleCount?: string(name='customRuleCount', description='Number of custom rules', example='10'),
      eventCode?: string(name='eventCode', description='Event code', example='de_aszbjb7236'),
      eventName?: string(name='eventName', description='Event name.', example='注册风险'),
      gmtModified?: string(name='gmtModified', description='Modification time', example='1565701886000'),
      modifier?: string(name='modifier', description='Modifier', example='公有云用户uid'),
      normalRuleCount?: string(name='normalRuleCount', description='Number of custom rules', example='10'),
      service?: string(name='service', description='Service code', example='device_risk'),
      useStatus?: string(name='useStatus', description='Usage status', example='使用/未使用'),
      whiteBoxRuleCount?: string(name='whiteBoxRuleCount', description='Number of white-box rules', example='10'),
    }
  ](name='resultObject', description='Return array'),
  totalItem?: int32(name='totalItem', description='Total number of items', example='3'),
  totalPage?: int32(name='totalPage', description='Total number of pages', example='9'),
}

model DescribeSceneEventPageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSceneEventPageListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSceneEventPageList  DescribeSceneEventPageListRequest
  * @return DescribeSceneEventPageListResponse
 */
async function describeSceneEventPageList(request: DescribeSceneEventPageListRequest): DescribeSceneEventPageListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSceneEventPageList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSceneRulePageListRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages. Default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  createType?: string(name='createType', description='Creation type', example='NOMAL', position='Query'),
  currentPage?: string(name='currentPage', description='Current page number.', example='1', position='Query'),
  eventCode?: string(name='eventCode', description='Event code', example='de_ahgctb7098', position='Query'),
  pageSize?: string(name='pageSize', description='Number of items per page in the returned results. Default value: 20, minimum value: 1, maximum value: 50.', example='20', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  ruleAuthType?: string(name='ruleAuthType', description='Strategy type', example='CUSTMER', position='Query'),
  ruleName?: string(name='ruleName', description='Strategy name', example='营销风险识别', position='Query'),
  ruleStatus?: string(name='ruleStatus', description='Strategy status', example='RUNNING', position='Query'),
}

model DescribeSceneRulePageListResponseBody = {
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Number of items per page in the returned results. Default value: 20, minimum value: 1, maximum value: 50.', example='20'),
  requestId?: string(name='requestId', description='Request ID, which is unique for each request, facilitating subsequent troubleshooting', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: [ 
    {
      authType?: string(name='authType', description='Service authorization type', example='admin'),
      consoleAudit?: {
        applyUserId?: string(name='applyUserId', description='Initiator account ID', example='1234567890999'),
        applyUserName?: string(name='applyUserName', description='Initiator account name', example='张三'),
        auditMsg?: string(name='auditMsg', description='Approval comments', example='同意'),
        auditRealUserId?: string(name='auditRealUserId', description='Final approver ID', example='1234567890'),
        auditRealUserName?: string(name='auditRealUserName', description='Approver account name', example='王五'),
        auditRemark?: string(name='auditRemark', description='Approval application remarks', example='备注'),
        auditStatus?: string(name='auditStatus', description='Status', example='AGREE'),
        auditTime?: long(name='auditTime', description='Approval time', example='1545726028000'),
        auditUserId?: string(name='auditUserId', description='Designated auditor account IDs (comma-separated for multiple)', example='123'),
        auditUserName?: string(name='auditUserName', description='Designated auditor account names (comma-separated for multiple)', example='李四'),
        gmtCreate?: long(name='gmtCreate', description='Creation time in UTC', example='1545726028000'),
        id?: long(name='id', description='Primary key ID', example='1728'),
        relationExt?: string(name='relationExt', description='Information about other related parties (in JSON format)', example='{}'),
        relationId?: long(name='relationId', description='审批关联的事务ID', example='123'),
        relationName?: string(name='relationName', description='The name of the associated transaction (can be null)', example='t'),
        relationType?: string(name='relationType', description='审批的类型（如rule代表策略的审批）', example='RULE'),
      }(name='consoleAudit', description='Audit object'),
      eventCode?: string(name='eventCode', description='Event code', example='de_aszbjb7236'),
      eventName?: string(name='eventName', description='Event name.', example='注册风险'),
      eventType?: string(name='eventType', description='Event type', example='MAIN'),
      externalRuleName?: string(name='externalRuleName', description='External rule name', example='策略1'),
      gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1621578648000'),
      gmtModified?: long(name='gmtModified', description='Modification time', example='1565701886000'),
      id?: long(name='id', description='Primary key ID of the rule', example='497'),
      mainRuleId?: string(name='mainRuleId', description='Main rule ID', example='4399'),
      priority?: long(name='priority', description='Strategy priority, where a higher number indicates a higher priority.', example='10'),
      ruleAuthType?: string(name='ruleAuthType', description='Rule Auth type', example='CUSTMER'),
      ruleId?: string(name='ruleId', description='Strategy ID', example='4730'),
      ruleMemo?: string(name='ruleMemo', description='Strategy description', example='描述信息'),
      ruleName?: string(name='ruleName', description='Strategy name', example='营销风险识别'),
      ruleStatus?: string(name='ruleStatus', description='Strategy status', example='RUNNING'),
      ruleType?: string(name='ruleType', description='Rule type', example='DEFAULT'),
      ruleVersionId?: long(name='ruleVersionId', description='Primary key ID of the rule version', example='3823'),
      templateId?: long(name='templateId', description='Template ID', example='6'),
      version?: int32(name='version', description='Version number', example='1.0'),
    }
  ](name='resultObject', description='Returned object'),
  totalItem?: int32(name='totalItem', description='Total number of items', example='3'),
  totalPage?: int32(name='totalPage', description='Total number of pages', example='9'),
}

model DescribeSceneRulePageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSceneRulePageListResponseBody(name='body'),
}

/**
  * @description Query the list of scenarized risk control event strategies
  * @param request  the request parameters of DescribeSceneRulePageList  DescribeSceneRulePageListRequest
  * @return DescribeSceneRulePageListResponse
 */
async function describeSceneRulePageList(request: DescribeSceneRulePageListRequest): DescribeSceneRulePageListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSceneRulePageList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScoreListRequest {
  id?: string(name='Id', description='Primary key ID.', example='300126', position='Query'),
  lang?: string(name='Lang', description='Language type of the returned message. Values:

- **zh** (default): Chinese
- **en**: English', example='zh', position='Query'),
}

model DescribeScoreListResponseBody = {
  code?: string(name='Code', description='Status code.', example='200'),
  httpStatusCode?: string(name='HttpStatusCode', description='HTTP status code.', example='200'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: string(name='ResultObject', description='Return result.', example='true'),
}

model DescribeScoreListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeScoreListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeScoreList  DescribeScoreListRequest
  * @return DescribeScoreListResponse
 */
async function describeScoreList(request: DescribeScoreListRequest): DescribeScoreListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScoreList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScoreSectionNumLineChartRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  beginTime: string(name='beginTime', description='Start timestamp, in milliseconds.

This parameter is required.', example='1751249559000', position='Query'),
  byPassEventCodes?: string(name='byPassEventCodes', description='Bypass event code', example='de_amnhke2482', position='Query'),
  endTime: string(name='endTime', description='End timestamp, in milliseconds.

This parameter is required.', example='1751249559000', position='Query'),
  mainEventCodes?: string(name='mainEventCodes', description='Main event code', example='de_avcqzc3714', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  shuntEventCodes?: string(name='shuntEventCodes', description='Diversion event code', example='de_amnhke2488', position='Query'),
}

model DescribeScoreSectionNumLineChartResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    series?: [ 
      {
        data?: [ string ](name='data', description='List of current category results.'),
        name?: string(name='name', description='Category name.', example='旁路事件'),
      }
    ](name='series', description='Data list'),
    xaxis?: {
      data?: [ string ](name='data', description='Data structure.'),
    }(name='xaxis', description='Details of xaxis node.'),
  }(name='resultObject', description='Returned object'),
}

model DescribeScoreSectionNumLineChartResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeScoreSectionNumLineChartResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeScoreSectionNumLineChart  DescribeScoreSectionNumLineChartRequest
  * @return DescribeScoreSectionNumLineChartResponse
 */
async function describeScoreSectionNumLineChart(request: DescribeScoreSectionNumLineChartRequest): DescribeScoreSectionNumLineChartResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScoreSectionNumLineChart', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScoreSectionPieChartRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  beginTime?: long(name='beginTime', description='Start time, accurate to milliseconds (ms).', example='1751249559000', position='Query'),
  endTime?: long(name='endTime', description='End time, accurate to milliseconds (ms).', example='1740535600000', position='Query'),
  eventCodes?: string(name='eventCodes', description='Event code.', example='de_afghcf6411', position='Query'),
  eventType?: string(name='eventType', description='Event type.', example='MAIN', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeScoreSectionPieChartResponseBody = {
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: {
    animation?: boolean(name='animation', description='Chart field, default true', example='true'),
    grid?: {
      show?: boolean(name='show', description='Chart field, default false', example='false'),
    }(name='grid', description='Belongs to grid.'),
    series?: [ 
      {
        data?: [ 
          {
            name?: string(name='name', description='Category item name.', example='名称'),
            value?: string(name='value', description='Result value.', example='100'),
          }
        ](name='data', description='Chart data list'),
        name?: string(name='name', description='Category name.', example='分值区间占比'),
        roseType?: boolean(name='roseType', description='Chart field, default false', example='false'),
      }
    ](name='series', description='Data list'),
  }(name='resultObject', description='Return object'),
}

model DescribeScoreSectionPieChartResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeScoreSectionPieChartResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeScoreSectionPieChart  DescribeScoreSectionPieChartRequest
  * @return DescribeScoreSectionPieChartResponse
 */
async function describeScoreSectionPieChart(request: DescribeScoreSectionPieChartRequest): DescribeScoreSectionPieChartResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScoreSectionPieChart', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScoreSectionRatioLineChartRequest {
  lang?: string(name='Lang', description='Sets the language type for request and response messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  beginTime: string(name='beginTime', description='Start time, accurate to milliseconds (ms).

This parameter is required.', example='1751249559000', position='Query'),
  byPassEventCodes?: string(name='byPassEventCodes', description='Bypass event code', example='de_amnhke2482', position='Query'),
  endTime: string(name='endTime', description='End time, accurate to milliseconds (ms).

This parameter is required.', example='1748491200000', position='Query'),
  mainEventCodes?: string(name='mainEventCodes', description='Main event code', example='de_avcqzc3714', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  shuntEventCodes?: string(name='shuntEventCodes', description='Shunt event code', example='de_amnhke2488', position='Query'),
}

model DescribeScoreSectionRatioLineChartResponseBody = {
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    series?: [ 
      {
        data?: [ string ](name='data', description='Chart data list'),
        name?: string(name='name', description='Statistical dimension.', example='旁路事件'),
      }
    ](name='series', description='Data list'),
    xaxis?: {
      data?: [ string ](name='data', description='Chart data list'),
    }(name='xaxis', description='Details of the xaxis node.'),
  }(name='resultObject', description='Return object'),
}

model DescribeScoreSectionRatioLineChartResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeScoreSectionRatioLineChartResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeScoreSectionRatioLineChart  DescribeScoreSectionRatioLineChartRequest
  * @return DescribeScoreSectionRatioLineChartResponse
 */
async function describeScoreSectionRatioLineChart(request: DescribeScoreSectionRatioLineChartRequest): DescribeScoreSectionRatioLineChartResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScoreSectionRatioLineChart', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSelectItemRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeSelectItemResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    monitorStatusList?: [ string ](name='monitorStatusList', description='Monitoring status list.'),
    taskIdList?: [ string ](name='taskIdList', description='Task ID list.'),
  }(name='resultObject', description='Return object'),
}

model DescribeSelectItemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSelectItemResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSelectItem  DescribeSelectItemRequest
  * @return DescribeSelectItemResponse
 */
async function describeSelectItem(request: DescribeSelectItemRequest): DescribeSelectItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSelectItem', 'POST', '/', 'json', false, 'json', request);
}

model DescribeServiceAppKeyRequest {
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeServiceAppKeyResponseBody = {
  code?: string(name='code', description='Status code.', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error message.', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
  uccess?: boolean(name='uccess', description='Whether the request was successful.', example='true'),
}

model DescribeServiceAppKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeServiceAppKeyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeServiceAppKey  DescribeServiceAppKeyRequest
  * @return DescribeServiceAppKeyResponse
 */
async function describeServiceAppKey(request: DescribeServiceAppKeyRequest): DescribeServiceAppKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeServiceAppKey', 'POST', '/', 'json', false, 'json', request);
}

model DescribeServiceCodeNameRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  tab?: string(name='Tab', description='Scenario.', example='FNAENIC', position='Query'),
}

model DescribeServiceCodeNameResponseBody = {
  code?: string(name='Code', description='Status code.', example='200'),
  httpStatusCode?: string(name='HttpStatusCode', description='HTTP status code.', example='200'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: string(name='ResultObject', description='Return result.', example='true'),
}

model DescribeServiceCodeNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeServiceCodeNameResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeServiceCodeName  DescribeServiceCodeNameRequest
  * @return DescribeServiceCodeNameResponse
 */
async function describeServiceCodeName(request: DescribeServiceCodeNameRequest): DescribeServiceCodeNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeServiceCodeName', 'POST', '/', 'json', false, 'json', request);
}

model DescribeServiceListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeServiceListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: [ 
    {
      serviceCode?: string(name='serviceCode', description='Service code', example='coupon_abuse_detection'),
      serviceName?: string(name='serviceName', description='Service name.', example='coupon_abuse_detection'),
    }
  ](name='resultObject', description='Return object'),
}

model DescribeServiceListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeServiceListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeServiceList  DescribeServiceListRequest
  * @return DescribeServiceListResponse
 */
async function describeServiceList(request: DescribeServiceListRequest): DescribeServiceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeServiceList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSimulationPreditInfoRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  eventCode: string(name='eventCode', description='Event code

This parameter is required.', example='de_azywkh7523', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  rulesStr: string(name='rulesStr', description='Policy list

This parameter is required.', example='[\\"100244\\",\\"100245\\"]', position='Query'),
}

model DescribeSimulationPreditInfoResponseBody = {
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DescribeSimulationPreditInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSimulationPreditInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSimulationPreditInfo  DescribeSimulationPreditInfoRequest
  * @return DescribeSimulationPreditInfoResponse
 */
async function describeSimulationPreditInfo(request: DescribeSimulationPreditInfoRequest): DescribeSimulationPreditInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSimulationPreditInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSimulationTaskCountRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  dataSourceConfig?: string(name='dataSourceConfig', description='Data source configuration', example='{}', position='Query'),
  dataSourceType?: string(name='dataSourceType', description='Data source type', example='SLS', position='Query'),
  endTime: long(name='endTime', description='Task end time.

This parameter is required.', example='1740016411000', position='Query'),
  eventCode: string(name='eventCode', description='Event code

This parameter is required.', example='de_ayfofy4941', position='Query'),
  filtersStr?: string(name='filtersStr', description='Filter', example='{"left":"score","operate":"bw","right":"222,333"}', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  startTime: long(name='startTime', description='Task start time.

This parameter is required.', example='1739496651000', position='Query'),
}

model DescribeSimulationTaskCountResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DescribeSimulationTaskCountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSimulationTaskCountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSimulationTaskCount  DescribeSimulationTaskCountRequest
  * @return DescribeSimulationTaskCountResponse
 */
async function describeSimulationTaskCount(request: DescribeSimulationTaskCountRequest): DescribeSimulationTaskCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSimulationTaskCount', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSimulationTaskListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  currentPage?: string(name='currentPage', description='Current page number.', example='1', position='Query'),
  id?: string(name='id', description='Primary key ID', example='3144', position='Query'),
  name?: string(name='name', description='Name', example='SIMULATION', position='Query'),
  pageSize?: string(name='pageSize', description='Page size, with a default value of 10', example='10', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  title?: string(name='title', description='Title.', example='仿真任务', position='Query'),
}

model DescribeSimulationTaskListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, with a default value of 10', example='10'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
  totalItem?: int32(name='totalItem', description='Total count.', example='6'),
  totalPage?: int32(name='totalPage', description='Total pages', example='1'),
}

model DescribeSimulationTaskListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSimulationTaskListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSimulationTaskList  DescribeSimulationTaskListRequest
  * @return DescribeSimulationTaskListResponse
 */
async function describeSimulationTaskList(request: DescribeSimulationTaskListRequest): DescribeSimulationTaskListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSimulationTaskList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSlsUrlConfigRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeSlsUrlConfigResponseBody = {
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: string(name='resultObject', description='Returned object', example='true'),
}

model DescribeSlsUrlConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSlsUrlConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSlsUrlConfig  DescribeSlsUrlConfigRequest
  * @return DescribeSlsUrlConfigResponse
 */
async function describeSlsUrlConfig(request: DescribeSlsUrlConfigRequest): DescribeSlsUrlConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSlsUrlConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSupportRuleListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  eventCode: string(name='eventCode', description='Event code

This parameter is required.', example='de_ahpayh4121', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeSupportRuleListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DescribeSupportRuleListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSupportRuleListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSupportRuleList  DescribeSupportRuleListRequest
  * @return DescribeSupportRuleListResponse
 */
async function describeSupportRuleList(request: DescribeSupportRuleListRequest): DescribeSupportRuleListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSupportRuleList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTagListRequest {
  id?: string(name='Id', description='Primary key ID', example='433102', position='Query'),
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='RegId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeTagListResponseBody = {
  code?: string(name='Code', description='Status code.', example='200'),
  httpStatusCode?: string(name='HttpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='Message', description='Error message.', example='success'),
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: string(name='ResultObject', description='Result object.', example='true'),
}

model DescribeTagListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTagListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeTagList  DescribeTagListRequest
  * @return DescribeTagListResponse
 */
async function describeTagList(request: DescribeTagListRequest): DescribeTagListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTagList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTagsBarChartRequest {
  lang?: string(name='Lang', description='Sets the language type for the request and response messages. Default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  beginTime: long(name='beginTime', description='Start time, accurate to milliseconds (ms).

This parameter is required.', example='1751249559000', position='Query'),
  endTime: long(name='endTime', description='End time, accurate to milliseconds (ms).

This parameter is required.', example='1751595912000', position='Query'),
  eventCodes?: string(name='eventCodes', description='Event code.', example='de_afghcf6411', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  result?: string(name='result', description='Policy execution result', example='PASS', position='Query'),
}

model DescribeTagsBarChartResponseBody = {
  code?: string(name='code', description='Status code.', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error message.', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: {
    series?: [ 
      {
        data?: [ 
          {
            num?: long(name='num', description='Number.', example='200'),
            scale?: string(name='scale', description='Scale', example='10%'),
          }
        ](name='data', description='Chart data list'),
        name?: string(name='name', description='Series name.', example='tag'),
        stack?: string(name='stack', description='Chart field, same as name', example='tag'),
      }
    ](name='series', description='Data list'),
    xaxis?: {
      data?: [ string ](name='data', description='xaxis data items'),
    }(name='xaxis', description='xaxis interface configuration.'),
  }(name='resultObject', description='Return object'),
  success?: boolean(name='success', description='Whether the request was successful.', example='true'),
}

model DescribeTagsBarChartResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTagsBarChartResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeTagsBarChart  DescribeTagsBarChartRequest
  * @return DescribeTagsBarChartResponse
 */
async function describeTagsBarChart(request: DescribeTagsBarChartRequest): DescribeTagsBarChartResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTagsBarChart', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTagsFluctuationRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  eventCodes?: string(name='eventCodes', description='Event code.', example='de_afghcf6411', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeTagsFluctuationResponseBody = {
  code?: string(name='code', description='Status code.', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error message.', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: [ 
    {
      tableName?: string(name='tableName', description='Tag name', example='accountId'),
      todayNum?: long(name='todayNum', description='Data for today', example='100'),
      withinSevenDayNum?: string(name='withinSevenDayNum', description='Data for the last seven days', example='600'),
      withinThirtyDayNum?: string(name='withinThirtyDayNum', description='Data for the last thirty days', example='1200'),
      withinThreeDayNum?: string(name='withinThreeDayNum', description='Data for the last three days', example='300'),
      yesterdayNum?: long(name='yesterdayNum', description='Data for yesterday', example='200'),
    }
  ](name='resultObject', description='Return object'),
  success?: boolean(name='success', description='Indicates whether the call was successful', example='true'),
}

model DescribeTagsFluctuationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTagsFluctuationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeTagsFluctuation  DescribeTagsFluctuationRequest
  * @return DescribeTagsFluctuationResponse
 */
async function describeTagsFluctuation(request: DescribeTagsFluctuationRequest): DescribeTagsFluctuationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTagsFluctuation', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTagsListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and responses, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeTagsListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DescribeTagsListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTagsListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeTagsList  DescribeTagsListRequest
  * @return DescribeTagsListResponse
 */
async function describeTagsList(request: DescribeTagsListRequest): DescribeTagsListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTagsList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTagsNumLineChartRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  beginTime: string(name='beginTime', description='Start time, accurate to milliseconds (ms).

This parameter is required.', example='1751249559000', position='Query'),
  byPassEventCodes?: string(name='byPassEventCodes', description='Bypass event code', example='de_amnhke2482', position='Query'),
  endTime: string(name='endTime', description='End time, accurate to milliseconds (ms).

This parameter is required.', example='1749002991000', position='Query'),
  mainEventCodes?: string(name='mainEventCodes', description='Main event code', example='de_amnhke2482', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  shuntEventCodes?: string(name='shuntEventCodes', description='Shunt event code', example='de_amnhke2488', position='Query'),
}

model DescribeTagsNumLineChartResponseBody = {
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: {
    series?: [ 
      {
        data?: [ string ](name='data', description='Chart data list'),
        name?: string(name='name', description='Series name.', example='rn101'),
      }
    ](name='series', description='Data list'),
    xaxis?: {
      data?: [ string ](name='data', description='Chart data list'),
    }(name='xaxis', description='xaxis node.'),
  }(name='resultObject', description='Returned object'),
}

model DescribeTagsNumLineChartResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTagsNumLineChartResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeTagsNumLineChart  DescribeTagsNumLineChartRequest
  * @return DescribeTagsNumLineChartResponse
 */
async function describeTagsNumLineChart(request: DescribeTagsNumLineChartRequest): DescribeTagsNumLineChartResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTagsNumLineChart', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTagsRatioLineChartRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  beginTime: long(name='beginTime', description='Start time, accurate to milliseconds (ms).

This parameter is required.', example='1751249559000', position='Query'),
  byPassEventCodes?: string(name='byPassEventCodes', description='Bypass event code', example='de_amnhke2482', position='Query'),
  endTime: long(name='endTime', description='End time, accurate to milliseconds (ms).

This parameter is required.', example='1751595912000', position='Query'),
  mainEventCodes?: string(name='mainEventCodes', description='Main event code', example='de_amnhke2482', position='Query'),
  regId: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou', position='Query'),
  shuntEventCodes?: string(name='shuntEventCodes', description='Shunt event code', example='de_amnhke2488', position='Query'),
}

model DescribeTagsRatioLineChartResponseBody = {
  requestId?: string(name='requestId', description='Request ID', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: {
    series?: [ 
      {
        data?: [ string ](name='data', description='Result data.'),
        name?: string(name='name', description='Series name.', example='rn101'),
      }
    ](name='series', description='Data list'),
    xaxis?: {
      data?: [ string ](name='data', description='X-axis data'),
    }(name='xaxis', description='xaxis node.'),
  }(name='resultObject', description='Return object'),
}

model DescribeTagsRatioLineChartResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTagsRatioLineChartResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeTagsRatioLineChart  DescribeTagsRatioLineChartRequest
  * @return DescribeTagsRatioLineChartResponse
 */
async function describeTagsRatioLineChart(request: DescribeTagsRatioLineChartRequest): DescribeTagsRatioLineChartResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTagsRatioLineChart', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTagsTrendRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  beginTime?: long(name='beginTime', description='Start time, accurate to milliseconds (ms).', example='1751249559000', position='Query'),
  endTime?: long(name='endTime', description='End time, accurate to milliseconds (ms).', example='1740298093000', position='Query'),
  eventCodes?: string(name='eventCodes', description='Event code.', example='de_afghcf6411', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  result?: string(name='result', description='Policy execution result', example='PASS', position='Query'),
}

model DescribeTagsTrendResponseBody = {
  code?: string(name='code', description='Status code', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error message.', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: {
    series?: [ 
      {
        data?: [ 
          {
            num?: long(name='num', description='The number of items in this category.', example='100'),
            scale?: string(name='scale', description='Proportion', example='10%'),
          }
        ](name='data', description='Chart data list'),
        name?: string(name='name', description='Category name.', example='rm0102'),
      }
    ](name='series', description='Data list'),
    xaxis?: {
      data?: [ string ](name='data', description='X-axis data'),
    }(name='xaxis', description='xaxis returned data'),
  }(name='resultObject', description='Returned object'),
  success?: boolean(name='success', description='Whether the request was successful.', example='true'),
}

model DescribeTagsTrendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTagsTrendResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeTagsTrend  DescribeTagsTrendRequest
  * @return DescribeTagsTrendResponse
 */
async function describeTagsTrend(request: DescribeTagsTrendRequest): DescribeTagsTrendResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTagsTrend', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTaskListRequest {
  currentPage?: string(name='CurrentPage', description='Current page.', example='1', position='Query'),
  isPage?: boolean(name='IsPage', description='Whether to paginate.', example='true', position='Query'),
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  pageSize?: string(name='PageSize', description='Page size, with a default value of 10.', example='10', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeTaskListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, with a default value of 10', example='10'),
  resultObject?: [ 
    {
      completionTime?: long(name='completionTime', description='Completion time, in milliseconds.', example='1753804800000'),
      createTime?: long(name='createTime', description='Creation time.', example='1753804800000'),
      id?: long(name='id', description='Task ID.', example='497'),
      mark?: int32(name='mark', description='Total number of mark information.', example='100'),
      remark?: string(name='remark', description='Remark.', example='备注'),
      sceneName?: string(name='sceneName', description='Scene name', example='样本调度'),
      status?: string(name='status', description='Data status.

-1: Failed
0: Deleted
1: Pending
2: Success', example='2'),
      taskLogId?: long(name='taskLogId', description='Task ID.', example='1102'),
      taskType?: string(name='taskType', description='Task type
1: Data upload
2: Supplemental upload
3: Labeling', example='1'),
    }
  ](name='resultObject', description='Returned object'),
  totalItem?: int32(name='totalItem', description='Total number of items', example='6'),
  totalPage?: int32(name='totalPage', description='Total number of pages', example='1'),
}

model DescribeTaskListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTaskListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeTaskList  DescribeTaskListRequest
  * @return DescribeTaskListResponse
 */
async function describeTaskList(request: DescribeTaskListRequest): DescribeTaskListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTaskList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTaskLogListRequest {
  currentPage?: string(name='CurrentPage', description='Current page.', example='1', position='Query'),
  isPage?: boolean(name='IsPage', description='Whether to paginate.', example='true', position='Query'),
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  pageSize?: string(name='PageSize', description='Page size.', example='10', position='Query'),
  taskId?: string(name='TaskId', description='Task ID.', example='18044', position='Query'),
  taskLogId?: string(name='TaskLogId', description='Task log ID', example='107', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeTaskLogListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Number of items per page, default value is 10', example='10'),
  resultObject?: [ 
    {
      completionTime?: long(name='completionTime', description='Completion time, in milliseconds.', example='1753804800000'),
      createTime?: long(name='createTime', description='Task creation time.', example='1753804800000'),
      id?: long(name='id', description='Log ID.', example='2793'),
      remark?: string(name='remark', description='Remark.', example='备注'),
      sceneName?: string(name='sceneName', description='Scene name', example='coupon_abuse_detection'),
      status?: string(name='status', description='Status.

0: Deleted
1: Normal', example='1'),
      taskType?: string(name='taskType', description='Task type

1: Data upload
2: Supplemental upload
3: Labeling', example='1'),
    }
  ](name='resultObject', description='Returned object'),
  totalItem?: int32(name='totalItem', description='Total number of items', example='6'),
  totalPage?: int32(name='totalPage', description='Total number of pages.', example='1'),
}

model DescribeTaskLogListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTaskLogListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeTaskLogList  DescribeTaskLogListRequest
  * @return DescribeTaskLogListResponse
 */
async function describeTaskLogList(request: DescribeTaskLogListRequest): DescribeTaskLogListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTaskLogList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTemplateCountRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeTemplateCountResponseBody = {
  requestId?: string(name='requestId', description='Request ID', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: {
    limit?: boolean(name='limit', description='Template quantity limit.', example='false'),
    maxTotalItem?: int32(name='maxTotalItem', description='Maximum count', example='1000'),
    totalItem?: int32(name='totalItem', description='Total count.', example='13'),
  }(name='resultObject', description='Returned object'),
}

model DescribeTemplateCountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTemplateCountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeTemplateCount  DescribeTemplateCountRequest
  * @return DescribeTemplateCountResponse
 */
async function describeTemplateCount(request: DescribeTemplateCountRequest): DescribeTemplateCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTemplateCount', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTemplateDownloadRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeTemplateDownloadResponseBody = {
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  data?: boolean(name='data', description='Data object', example='true'),
}

model DescribeTemplateDownloadResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTemplateDownloadResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeTemplateDownload  DescribeTemplateDownloadRequest
  * @return DescribeTemplateDownloadResponse
 */
async function describeTemplateDownload(request: DescribeTemplateDownloadRequest): DescribeTemplateDownloadResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTemplateDownload', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTemplatePageListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  currentPage?: string(name='currentPage', description='Current page number.', example='1', position='Query'),
  eventCodes?: string(name='eventCodes', description='Event code.', example='d6_h1fe4cfa1g', position='Query'),
  pageSize?: string(name='pageSize', description='Page size, default value is 10', example='10', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  templateName?: string(name='templateName', description='Event name', example='注册事件', position='Query'),
  templateSearchItem?: string(name='templateSearchItem', description='Event template search field', example='age', position='Query'),
  templateStatus?: string(name='templateStatus', description='Event status', example='ONLINE', position='Query'),
  templateType?: string(name='templateType', description='Template type', example='PUB_SERVICE', position='Query'),
}

model DescribeTemplatePageListResponseBody = {
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Number of items per page, default value is 10', example='10'),
  requestId?: string(name='requestId', description='Request ID', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: [ 
    {
      description?: string(name='description', description='Description information.', example='描述'),
      eventCode?: string(name='eventCode', description='Event code', example='de_aszbjb7236'),
      eventName?: string(name='eventName', description='Event name.', example='注册风险'),
      gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1621578648000'),
      gmtModified?: long(name='gmtModified', description='Modification time.', example='1565701886000'),
      id?: long(name='id', description='Template ID.', example='497'),
      ruleCount?: int32(name='ruleCount', description='Number of policies', example='3'),
      templateCode?: string(name='templateCode', description='Template code.', example='register'),
      templateName?: string(name='templateName', description='Template name.', example='注册事件'),
      templateStatus?: string(name='templateStatus', description='Event status', example='ONLINE'),
      templateType?: string(name='templateType', description='Template type', example='PUB_SERVICE'),
      userCount?: int32(name='userCount', description='Number of customer authorizations', example='1'),
      version?: int32(name='version', description='Version number.', example='1'),
    }
  ](name='resultObject', description='Returned object'),
  totalItem?: int32(name='totalItem', description='Total number of items', example='6'),
  totalPage?: int32(name='totalPage', description='Total number of pages', example='1'),
}

model DescribeTemplatePageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTemplatePageListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeTemplatePageList  DescribeTemplatePageListRequest
  * @return DescribeTemplatePageListResponse
 */
async function describeTemplatePageList(request: DescribeTemplatePageListRequest): DescribeTemplatePageListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTemplatePageList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUsedServiceRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeUsedServiceResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  records?: [ 
    {
      enName?: string(name='enName', description='English name', example='account_abuse'),
      name?: string(name='name', description='Service name', example='注册风险识别服务'),
      serviceCode?: string(name='serviceCode', description='Service code', example='account_abuse'),
    }
  ](name='records', description='Record details'),
}

model DescribeUsedServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeUsedServiceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeUsedService  DescribeUsedServiceRequest
  * @return DescribeUsedServiceResponse
 */
async function describeUsedService(request: DescribeUsedServiceRequest): DescribeUsedServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUsedService', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUserInfoRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeUserInfoResponseBody = {
  code?: string(name='code', description='Status code.', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error message', example='The input parameter data is not valid. order_storage_company_num component not found'),
  resultObject?: {
    clientIp?: string(name='clientIp', description='Client IP.', example='192.168.0.1'),
    subId?: string(name='subId', description='Sub-account ID', example='555666'),
    userId?: long(name='userId', description='User UID', example='15633333331111'),
    userName?: string(name='userName', description='User name', example='root'),
  }(name='resultObject', description='Returned object'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model DescribeUserInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeUserInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeUserInfo  DescribeUserInfoRequest
  * @return DescribeUserInfoResponse
 */
async function describeUserInfo(request: DescribeUserInfoRequest): DescribeUserInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUserInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVariableBindDetailRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  defineId?: long(name='defineId', description='Bound variable definition ID', example='10', position='Query'),
  id?: long(name='id', description='Primary key ID of the variable, which is empty if it\\"s a new addition', example='3144', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeVariableBindDetailResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    allowModify?: boolean(name='allowModify', description='Whether modification is allowed, default is false', example='false'),
    defineId?: long(name='defineId', description='Variable definition ID', example='10'),
    defineTitle?: string(name='defineTitle', description='Variable definition title', example='IP所在地_城市Code'),
    description?: string(name='description', description='Variable description information', example='描述'),
    eventCode?: string(name='eventCode', description='Event code', example='de_aszbjb7236'),
    id?: long(name='id', description='Variable ID.', example='497'),
    params?: [ 
      {
        eventFieldName?: string(name='eventFieldName', description='Event field name', example='ip'),
        required?: boolean(name='required', description='Whether it is required, default is false', example='false'),
        variableName?: string(name='variableName', description='Bound variable name', example='ip'),
      }
    ](name='params', description='Bound parameters.'),
    relationRules?: [ 
      {
        key?: string(name='key', description='Policy rule ID', example='104566'),
        value?: string(name='value', description='Policy name', example='营销风险识别'),
      }
    ](name='relationRules', description='List of associated policies'),
    title?: string(name='title', description='Title.', example='变量title'),
  }(name='resultObject', description='Return object'),
}

model DescribeVariableBindDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVariableBindDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVariableBindDetail  DescribeVariableBindDetailRequest
  * @return DescribeVariableBindDetailResponse
 */
async function describeVariableBindDetail(request: DescribeVariableBindDetailRequest): DescribeVariableBindDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVariableBindDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVariableDetailRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  id: long(name='id', description='Variable ID

This parameter is required.', example='3144', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeVariableDetailResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    baseInfo?: {
      allowBind?: string(name='allowBind', description='Whether variable binding is allowed', example='ENABLE'),
      chargingMode?: string(name='chargingMode', description='Charging mode', example='FREE'),
      chargingModeDesc?: string(name='chargingModeDesc', description='Charging mode description', example='免费'),
      creator?: string(name='creator', description='Creator.', example='176020'),
      dataDisplay?: string(name='dataDisplay', description='Data distribution display, in JSON format', example='{}'),
      dataThreshold?: string(name='dataThreshold', description='Data valid range, left-closed and right-closed', example='(0,10)'),
      deductionFactor?: int32(name='deductionFactor', description='Deduction factor', example='10'),
      description?: string(name='description', description='Description.', example='描述'),
      frontAllowBind?: string(name='frontAllowBind', description='Front-end binding allowed', example='ENABLE'),
      gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1698143758000'),
      gmtModified?: long(name='gmtModified', description='Modification time.', example='1698143758000'),
      id?: long(name='id', description='Primary key ID', example='3144'),
      inputRequired?: string(name='inputRequired', description='Required parameters
     
     When inputRequired=__all__, it means all parameters are required
     When inputRequired=__one__, it means only one input is needed
     Required fields are separated by commas, e.g., mobile,ip,email', example='__one__'),
      inputs?: string(name='inputs', description='Input parameters.', example='ip,age,mobile'),
      inputsDesc?: string(name='inputsDesc', description='Input parameter description.', example='ip,年龄,手机号'),
      invokeKey?: string(name='invokeKey', description='Invoke key', example='onlineScamDetectionTags_v'),
      invokeRt?: int32(name='invokeRt', description='Invoke RT, unit: milliseconds', example='10'),
      invokeSuccessRate?: string(name='invokeSuccessRate', description='Invocation success rate', example='100'),
      invokeTimes?: long(name='invokeTimes', description='Number of invocations', example='100000'),
      lastModifiedOperator?: string(name='lastModifiedOperator', description='Last modifier.', example='root'),
      name?: string(name='name', description='Variable name', example='__onlineScamDetectionTags__'),
      outputs?: string(name='outputs', description='Output', example='STRING'),
      outputsDesc?: string(name='outputsDesc', description='Output description', example='字符串'),
      scene?: [ string ](name='scene', description='Code of applicable scenarios'),
      sceneDesc?: [ string ](name='sceneDesc', description='Applicable scenario description'),
      showOrder?: string(name='showOrder', description='Display order', example='10'),
      source?: string(name='source', description='Source', example='SAF'),
      sourceDesc?: string(name='sourceDesc', description='Source description', example='风险识别'),
      status?: string(name='status', description='Status.', example='ENABLE'),
      supportRegions?: [ string ](name='supportRegions', description='List of supported regions.'),
      title?: string(name='title', description='Title.', example='诈骗引流识别_标签'),
      type?: string(name='type', description='Type', example='NATIVE'),
      typeDesc?: string(name='typeDesc', description='Category description', example='事件字段'),
      xLabel?: string(name='xLabel', description='X-axis label for data distribution display', example='10'),
      yLabel?: string(name='yLabel', description='Data distribution display y-axis label', example='10'),
    }(name='baseInfo', description='Basic attributes.'),
  }(name='resultObject', description='Return object'),
}

model DescribeVariableDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVariableDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVariableDetail  DescribeVariableDetailRequest
  * @return DescribeVariableDetailResponse
 */
async function describeVariableDetail(request: DescribeVariableDetailRequest): DescribeVariableDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVariableDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVariableFeeRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  ids: [ long ](name='ids', description='Variable ID

This parameter is required.', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DescribeVariableFeeResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model DescribeVariableFeeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVariableFeeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVariableFee  DescribeVariableFeeRequest
  * @return DescribeVariableFeeResponse
 */
async function describeVariableFee(request: DescribeVariableFeeRequest): DescribeVariableFeeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVariableFee', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVariableListRequest {
  lang?: string(name='Lang', description='Set the language type for requests and responses, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  createType?: string(name='createType', description='Creation type.', example='NORMAL', position='Query'),
  currentPage?: string(name='currentPage', description='Current page number.', example='1', position='Query'),
  pageSize?: string(name='pageSize', description='Page size, default value is 10.', example='10', position='Query'),
  refObjId?: string(name='refObjId', description='Associated event ID.', example='de_avypfd8253', position='Query'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou', position='Query'),
  sourceType?: string(name='sourceType', description='Source type.', example='SAF', position='Query'),
  type?: string(name='type', description='Type.', example='IDENTIFY_SERVICE', position='Query'),
  typesStr?: string(name='typesStr', description='JSON array string of types.', example='[\\"coupon_abuse_detection\\"]', position='Query'),
  value?: string(name='value', description='Value for fuzzy search.', example='注册', position='Query'),
}

model DescribeVariableListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10.', example='10'),
  resultObject?: [ 
    {
      capacity?: long(name='capacity', description='Capacity.', example='100000'),
      defineId?: string(name='defineId', description='Variable definition ID.', example='10'),
      description?: string(name='description', description='Description information.', example='变量描述'),
      extendInfo?: map[string]any(name='extendInfo', description='Extended information.', example='暂无'),
      gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1621578648000'),
      gmtModified?: long(name='gmtModified', description='Modification time.', example='1565701886000'),
      id?: long(name='id', description='Variable ID.', example='497'),
      leftCapacity?: long(name='leftCapacity', description='Remaining capacity.', example='100000'),
      name?: string(name='name', description='Variable name', example='__ipLocationCityCode__'),
      outputsType?: string(name='outputsType', description='Variable output type', example='STRING'),
      refObjId?: string(name='refObjId', description='Associated event ID.', example='de_agdxgz0246'),
      refObjName?: string(name='refObjName', description='Associated event name.', example='注册事件'),
      refObjType?: string(name='refObjType', description='Associated object type of the variable', example='EVENT'),
      sourceType?: string(name='sourceType', description='Source type.', example='SAF'),
      title?: string(name='title', description='Title.', example='设备风险识别_标签'),
      type?: string(name='type', description='Variable type.', example='NATIVE'),
      userId?: long(name='userId', description='User ID to which the data belongs.', example='100000'),
    }
  ](name='resultObject', description='Returned object.'),
  totalItem?: int32(name='totalItem', description='Total number of items.', example='27'),
  totalPage?: int32(name='totalPage', description='Total number of pages.', example='3'),
}

model DescribeVariableListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVariableListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVariableList  DescribeVariableListRequest
  * @return DescribeVariableListResponse
 */
async function describeVariableList(request: DescribeVariableListRequest): DescribeVariableListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVariableList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVariableMarketListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  chargingMode?: string(name='chargingMode', description='Charging mode', example='FREE', position='Query'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1', position='Query'),
  pageSize?: int32(name='pageSize', description='Page size, with a default value of 10.', example='10', position='Query'),
  paging?: string(name='paging', description='Paging indicator, default is true.', example='true', position='Query'),
  queryContent?: string(name='queryContent', description='Query content, supports fuzzy search.

 Title/Description', example='手机号', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  scenesStr?: string(name='scenesStr', description='Scenario', example='[\\"coupon_abuse_detection\\"]', position='Query'),
  source?: string(name='source', description='Source', example='SAF', position='Query'),
  title?: string(name='title', description='Title.', example='设备风险识别_标签', position='Query'),
}

model DescribeVariableMarketListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, with a default value of 10.', example='10'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
  totalItem?: int32(name='totalItem', description='Total number of items', example='6'),
  totalPage?: int32(name='totalPage', description='Total number of pages', example='9'),
}

model DescribeVariableMarketListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVariableMarketListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVariableMarketList  DescribeVariableMarketListRequest
  * @return DescribeVariableMarketListResponse
 */
async function describeVariableMarketList(request: DescribeVariableMarketListRequest): DescribeVariableMarketListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVariableMarketList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVariableSceneListRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  bizType: string(name='bizType', description='Business type.

This parameter is required.', example='variable_scene', position='Query'),
  configKey?: string(name='configKey', description='Configuration key.', example='account_abuse_detection', position='Query'),
  currentPage?: string(name='currentPage', description='Current page number.', example='1', position='Query'),
  pageSize?: string(name='pageSize', description='Page size, default value is 10.', example='10', position='Query'),
  paging: boolean(name='paging', description='Paging flag, default is true.

This parameter is required.', example='true', position='Query'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou', position='Query'),
}

model DescribeVariableSceneListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10.', example='10'),
  resultObject?: [ 
    {
      bizType?: string(name='bizType', description='Business category identifier.', example='variable_scene'),
      configKey?: string(name='configKey', description='Configuration key.', example='account_abuse_detection'),
      configValue?: string(name='configValue', description='Configuration value.', example='1'),
      creator?: string(name='creator', description='Created by.', example='1519714049632764'),
      description?: string(name='description', description='Description information.', example='配置描述信息'),
      gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1621578648000'),
      gmtModified?: long(name='gmtModified', description='Modification time.', example='1565701886000'),
      id?: long(name='id', description='Primary key ID of the configuration.', example='497'),
      lastModifiedOperator?: string(name='lastModifiedOperator', description='Last modified by.', example='1519714049632764'),
      status?: string(name='status', description='Status.', example='ENABLE'),
    }
  ](name='resultObject', description='Returned object.'),
  totalItem?: int32(name='totalItem', description='Total number of items.', example='6'),
  totalPage?: int32(name='totalPage', description='Total number of pages.', example='1'),
}

model DescribeVariableSceneListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVariableSceneListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVariableSceneList  DescribeVariableSceneListRequest
  * @return DescribeVariableSceneListResponse
 */
async function describeVariableSceneList(request: DescribeVariableSceneListRequest): DescribeVariableSceneListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVariableSceneList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVersionPageListRequest {
  lang?: string(name='Lang', description='Sets the language type for the request and response messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  maxResults?: int32(name='MaxResults', description='Maximum number of results to be read in this call, with a default value of 10.', example='10', position='Query'),
  nextToken?: string(name='NextToken', description='Used to mark the starting position for reading. An empty value indicates starting from the beginning.', example='1', position='Query'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1', position='Query'),
  objectCode?: string(name='objectCode', description='Name of the variable.', example='ex_OERlw0Zqfb23', position='Query'),
  objectId?: long(name='objectId', description='Primary key ID of the variable.', example='392023', position='Query'),
  pageSize?: int32(name='pageSize', description='Number of items per page, with a default value of 10.', example='10', position='Query'),
  paging?: boolean(name='paging', description='Pagination flag, with a default value of true.', example='true', position='Query'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou', position='Query'),
  type?: string(name='type', description='Type.', example='EXPRESSION', position='Query'),
}

model DescribeVersionPageListResponseBody = {
  maxResults?: int32(name='MaxResults', description='The maximum amount of data to be read in this call, with a default value of 10.', example='10'),
  nextToken?: string(name='NextToken', description='用来表示当前调用返回读取到的位置。空代表数据已经读取完毕。', example='1'),
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Number of items per page, with a default value of 10.', example='10'),
  resultObject?: [ 
    {
      content?: string(name='content', description='Change content.', example='{\\"description\\":\\"自定义变量\\",\\"expression\\":\\"1\\",\\"expressionTitle\\":\\"1\\",\\"expressionVariable\\":\\"\\",\\"fieldRank\\":0,\\"id\\":392023,\\"name\\":\\"ex_OERlw0Zqfb23\\",\\"outlier\\":\\"SYS_ERROR\\",\\"outputs\\":\\"STRING\\",\\"refObjId\\":\\"de_auevox0336\\",\\"region\\":\\"SH\\",\\"title\\":\\"自定义变量\\",\\"version\\":4}'),
      creator?: string(name='creator', description='Creator.', example='root'),
      description?: string(name='description', description='Variable description.', example='变量描述'),
      gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1621578648000'),
      gmtModified?: long(name='gmtModified', description='Modification time.', example='1565701886000'),
      id?: long(name='id', description='Primary key ID of the version.', example='808'),
      modifier?: string(name='modifier', description='Modifier.', example='root'),
      objectCode?: string(name='objectCode', description='Name of the variable.', example='ex_OERlw0Zqfb23'),
      objectId?: long(name='objectId', description='Primary key ID of the variable.', example='392023'),
      region?: string(name='region', description='Region ID.', example='cn-hangzhou'),
      type?: string(name='type', description='Variable type.', example='EXPRESSION'),
      userId?: long(name='userId', description='User UID.', example='151222222222226'),
      version?: long(name='version', description='Version number.', example='1'),
    }
  ](name='resultObject', description='Returned object.'),
  totalItem?: int32(name='totalItem', description='Total number of items.', example='10'),
  totalPage?: int32(name='totalPage', description='Total number of pages.', example='1'),
}

model DescribeVersionPageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVersionPageListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVersionPageList  DescribeVersionPageListRequest
  * @return DescribeVersionPageListResponse
 */
async function describeVersionPageList(request: DescribeVersionPageListRequest): DescribeVersionPageListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVersionPageList', 'POST', '/', 'json', false, 'json', request);
}

model DownloadSmapleBatchRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  batchUuid?: string(name='batchUuid', description='Sample batch UUID', example='203f1ae65c0a41a49dc4f8a47946caa2', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model DownloadSmapleBatchResponseBody = {
  requestId?: string(name='RequestId', description='ID of the request', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    fileDownloadURL?: string(name='fileDownloadURL', description='Download URL', example='https://xxxxx-oss-xxxxx.xxxxxx.aliyuncs.com/xx/xx/xxx/xxxxxx.csv?Expires=1753433384&OSSAccessKeyId=xxxxxxxxx&Signature=%2F%xxxxxxxxxxxx%3D'),
  }(name='resultObject', description='Returned object'),
}

model DownloadSmapleBatchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DownloadSmapleBatchResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DownloadSmapleBatch  DownloadSmapleBatchRequest
  * @return DownloadSmapleBatchResponse
 */
async function downloadSmapleBatch(request: DownloadSmapleBatchRequest): DownloadSmapleBatchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DownloadSmapleBatch', 'POST', '/', 'json', false, 'json', request);
}

model ExpressionTestRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  expression: string(name='expression', description='Test expression.

This parameter is required.', example='@ex_GX9rrlTq4b67 + 1001', position='Query'),
  expressionVariable: string(name='expressionVariable', description='Calculation expression variable

This parameter is required.', example='[{\\"name\\":\\"age\\",\\"code\\":\\"age\\",\\"fieldType\\":\\"INT\\",\\"id\\":44809,\\"value\\":\\"1\\"}]', position='Query'),
  expressionVariableIds?: string(name='expressionVariableIds', description='Associated variable ID', example='[44659]', position='Query'),
  id?: long(name='id', description='Variable ID', example='3144', position='Query'),
  regId: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou', position='Query'),
  scene: string(name='scene', description='Scene

This parameter is required.', example='EXPRESSION', position='Query'),
}

model ExpressionTestResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model ExpressionTestResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExpressionTestResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ExpressionTest  ExpressionTestRequest
  * @return ExpressionTestResponse
 */
async function expressionTest(request: ExpressionTestRequest): ExpressionTestResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExpressionTest', 'POST', '/', 'json', false, 'json', request);
}

model FileUploadRequest {
  fileName?: string(name='FileName', description='File name.', example='P4911_2707.csv', position='Query'),
  fileUrl?: string(name='FileUrl', description='File URL', example='https://res-v1.cupl-fdfs.com/direct/79886bdc-9855-4ff4-aa34-eb5b21cd43a7', position='Query'),
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  tab?: string(name='Tab', description='Scenario.', example='FNNCIEA', position='Query'),
}

model FileUploadResponseBody = {
  code?: string(name='Code', description='Status code.', example='200'),
  httpStatusCode?: string(name='HttpStatusCode', description='HTTP status code.', example='200'),
  message?: string(name='Message', description='Information returned by the API request.', example='success'),
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: string(name='ResultObject', description='Return result.', example='true'),
}

model FileUploadResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FileUploadResponseBody(name='body'),
}

/**
  * @param request  the request parameters of FileUpload  FileUploadRequest
  * @return FileUploadResponse
 */
async function fileUpload(request: FileUploadRequest): FileUploadResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FileUpload', 'POST', '/', 'json', false, 'json', request);
}

model ImportFieldRequest {
  fileUrl: string(name='FileUrl', description='Attachment download URL.

This parameter is required.', example='filed/data/text.csv', position='Query'),
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='RegId', description='Region code', example='cn-hangzhou', position='Query'),
}

model ImportFieldResponseBody = {
  code?: string(name='Code', description='API status code.', example='200'),
  httpStatusCode?: string(name='HttpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='Message', description='Error message.', example='successful'),
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    failFieldNames?: string(name='FailFieldNames', description='Names of fields that failed to upload', example='test'),
    successNum?: int32(name='SuccessNum', description='Number of successful executions.', example='7'),
    totalNum?: int32(name='TotalNum', description='Total number of records.', example='7'),
  }(name='ResultObject', description='Returned result'),
  success?: boolean(name='Success', description='Indicator of whether the request was successful.', example='true'),
}

model ImportFieldResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ImportFieldResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ImportField  ImportFieldRequest
  * @return ImportFieldResponse
 */
async function importField(request: ImportFieldRequest): ImportFieldResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportField', 'POST', '/', 'json', false, 'json', request);
}

model ImportNameListRequest {
  lang?: string(name='Lang', description='Set the language type for request and response messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  createType?: string(name='createType', description='Creation type', example='NORMAL', position='Query'),
  data?: string(name='data', description='Import name list.', example='aa\\nbb\\ncc', position='Query'),
  description?: string(name='description', description='Description information.', example='描述', position='Query'),
  importType: string(name='importType', description='Document import type:


INPUT: Text input
CSV: CSV upload
NONE: Do not upload for now

This parameter is required.', example='CSV', position='Query'),
  memo?: string(name='memo', description='name content memo', example='名单内容描述', position='Query'),
  nameListType?: string(name='nameListType', description='nameListType', example='accountId', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  title: string(name='title', description='Title.

This parameter is required.', example='变量title', position='Query'),
  variableId?: long(name='variableId', description='Variable ID', example='393314', position='Query'),
}

model ImportNameListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model ImportNameListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ImportNameListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ImportNameList  ImportNameListRequest
  * @return ImportNameListResponse
 */
async function importNameList(request: ImportNameListRequest): ImportNameListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportNameList', 'POST', '/', 'json', false, 'json', request);
}

model ImportTemplateEventRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  eventTemplateIds?: string(name='eventTemplateIds', description='The template ID of the event.', example='register', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model ImportTemplateEventResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  data?: boolean(name='data', description='Returned data object', example='true'),
}

model ImportTemplateEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ImportTemplateEventResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ImportTemplateEvent  ImportTemplateEventRequest
  * @return ImportTemplateEventResponse
 */
async function importTemplateEvent(request: ImportTemplateEventRequest): ImportTemplateEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportTemplateEvent', 'POST', '/', 'json', false, 'json', request);
}

model ListVariableDefineRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  allowBind?: string(name='allowBind', description='Whether binding is allowed, default is ENABLE', example='ENABLE', position='Query'),
  chargingMode?: string(name='chargingMode', description='Charging mode', example='FREE', position='Query'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1', position='Query'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10', example='10', position='Query'),
  paging?: string(name='paging', description='Paging identifier', example='false', position='Query'),
  queryContent?: string(name='queryContent', description='Query content', example='age', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  roleType?: string(name='roleType', description='Authorization type', example='1', position='Query'),
  scenesStr?: string(name='scenesStr', description='Scenario', example='[\\"EVENT_ACTION\\"]', position='Query'),
  source?: string(name='source', description='Source', example='SAF', position='Query'),
  status?: string(name='status', description='Status.', example='ENABLE', position='Query'),
  title?: string(name='title', description='Title.', example='变量的title', position='Query'),
  typesStr?: string(name='typesStr', description='Type', example='[\\"IDENTIFY_SERVICE\\"]', position='Query'),
}

model ListVariableDefineResponseBody = {
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  currentPage?: int32(name='currentPage', description='Current page number.', example='1'),
  pageSize?: int32(name='pageSize', description='Page size, default value is 10', example='10'),
  resultObject?: boolean(name='resultObject', description='Returned object', example='true'),
  totalItem?: int32(name='totalItem', description='Total items', example='27'),
  totalPage?: int32(name='totalPage', description='Total pages.', example='4'),
}

model ListVariableDefineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListVariableDefineResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListVariableDefine  ListVariableDefineRequest
  * @return ListVariableDefineResponse
 */
async function listVariableDefine(request: ListVariableDefineRequest): ListVariableDefineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVariableDefine', 'POST', '/', 'json', false, 'json', request);
}

model ModelDeleteRequest {
  modelName: string(name='ModelName', description='Model name.

This parameter is required.', example='qwen-max', position='Query'),
  regId?: string(name='RegId', description='Region code.', example='cn-hangzhou', position='Query'),
}

model ModelDeleteResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='ResultObject', description='Deletion result.', example='true'),
}

model ModelDeleteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModelDeleteResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModelDelete  ModelDeleteRequest
  * @return ModelDeleteResponse
 */
async function modelDelete(request: ModelDeleteRequest): ModelDeleteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModelDelete', 'POST', '/', 'json', false, 'json', request);
}

model ModelFileUploadRequest {
  objectName: string(name='ObjectName', description='File name.

This parameter is required.', example='2023-07-10/商品信息批量导出-20230710132028', position='Query'),
  regId?: string(name='RegId', description='Region code.', example='cn-hangzhou', position='Query'),
}

model ModelFileUploadResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='ResultObject', description='Return result.', example='true'),
}

model ModelFileUploadResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModelFileUploadResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModelFileUpload  ModelFileUploadRequest
  * @return ModelFileUploadResponse
 */
async function modelFileUpload(request: ModelFileUploadRequest): ModelFileUploadResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModelFileUpload', 'POST', '/', 'json', false, 'json', request);
}

model ModelIsUsingRequest {
  modelCode: string(name='ModelCode', description='Model code.

This parameter is required.', example='ebgdsa', position='Query'),
  modelId: string(name='ModelId', description='Model ID.

This parameter is required.', example='27269', position='Query'),
  modelName: string(name='ModelName', description='Model name.

This parameter is required.', example='text-embedding-v1', position='Query'),
  regId?: string(name='RegId', description='Region code.', example='cn-hangzhou', position='Query'),
  status: string(name='Status', description='Model status.

This parameter is required.', example='Disabled', position='Query'),
}

model ModelIsUsingResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='ResultObject', description='Result object.', example='true'),
}

model ModelIsUsingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModelIsUsingResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModelIsUsing  ModelIsUsingRequest
  * @return ModelIsUsingResponse
 */
async function modelIsUsing(request: ModelIsUsingRequest): ModelIsUsingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModelIsUsing', 'POST', '/', 'json', false, 'json', request);
}

model ModelNameIsDuplicationRequest {
  modelName: string(name='ModelName', description='Model name.

This parameter is required.', example='text-embedding-v2', position='Query'),
  regId?: string(name='RegId', description='Region code.', example='cn-hangzhou', position='Query'),
}

model ModelNameIsDuplicationResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='ResultObject', description='Return result.', example='true'),
}

model ModelNameIsDuplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModelNameIsDuplicationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModelNameIsDuplication  ModelNameIsDuplicationRequest
  * @return ModelNameIsDuplicationResponse
 */
async function modelNameIsDuplication(request: ModelNameIsDuplicationRequest): ModelNameIsDuplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModelNameIsDuplication', 'POST', '/', 'json', false, 'json', request);
}

model ModelSampleDownloadRequest {
  regId?: string(name='RegId', description='Region code.', example='cn-hangzhou', position='Query'),
}

model ModelSampleDownloadResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='ResultObject', description='Request result.', example='true'),
}

model ModelSampleDownloadResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModelSampleDownloadResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModelSampleDownload  ModelSampleDownloadRequest
  * @return ModelSampleDownloadResponse
 */
async function modelSampleDownload(request: ModelSampleDownloadRequest): ModelSampleDownloadResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModelSampleDownload', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAppKeyRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  appKey?: string(name='appKey', description='appkey information.', example='***', position='Query'),
  memo?: string(name='memo', description='Application memo information.', example='备注', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model ModifyAppKeyResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  data?: boolean(name='data', description='Returned data object.', example='true'),
}

model ModifyAppKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAppKeyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyAppKey  ModifyAppKeyRequest
  * @return ModifyAppKeyResponse
 */
async function modifyAppKey(request: ModifyAppKeyRequest): ModifyAppKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAppKey', 'POST', '/', 'json', false, 'json', request);
}

model ModifyCustVariableRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  condition?: string(name='condition', description='Condition value.', example='{\\"currentId\\":1,\\"deepCount\\":0,\\"list\\":[{\\"currentId\\":2,\\"deepCount\\":1,\\"left\\":{\\"code\\":\\"__hit_rules\\",\\"fieldType\\":\\"STRING\\",\\"functionName\\":\\"\\",\\"hasRightVariable\\":true,\\"name\\":\\"hitRules\\",\\"operatorCode\\":\\"deNotInNameList\\"},\\"operatorCode\\":\\"deNotInNameList\\",\\"parentId\\":1,\\"right\\":{\\"code\\":\\"\\"nl_Xcufc8wV6624\\"\\",\\"name\\":\\"nl_Xcufc8wV6624\\",\\"rightVariableType\\":\\"variable\\"}},{\\"currentId\\":3,\\"deepCount\\":1,\\"list\\":[{\\"currentId\\":4,\\"deepCount\\":2,\\"left\\":{\\"code\\":\\"__v_safde\\",\\"fieldType\\":\\"DOUBLE\\",\\"functionName\\":\\"\\",\\"hasRightVariable\\":true,\\"name\\":\\"score\\",\\"operatorCode\\":\\"equals\\"},\\"operatorCode\\":\\"equals\\",\\"parentId\\":3,\\"right\\":{\\"code\\":\\"\\"99\\"\\",\\"name\\":\\"99\\",\\"rightVariableType\\":\\"constant\\"}},{\\"currentId\\":5,\\"deepCount\\":2,\\"left\\":{\\"code\\":\\"queryPhoneSimulatorInfo(deviceToken)?\\",\\"fieldType\\":\\"STRING\\",\\"functionName\\":\\"\\",\\"hasRightVariable\\":false,\\"name\\":\\"__device-test01__\\",\\"operatorCode\\":\\"isNotEmptyWrapper\\"},\\"operatorCode\\":\\"isNotEmptyWrapper\\",\\"parentId\\":3,\\"right\\":{\\"functionName\\":\\"\\",\\"name\\":\\"\\",\\"rightVariableType\\":\\"constant\\"}}],\\"parentId\\":1,\\"relationship\\":\\"and\\"}],\\"parentId\\":0,\\"relationship\\":\\"and\\"}', position='Query'),
  dataVersion: long(name='dataVersion', description='Data version.

This parameter is required.', example='6', position='Query'),
  description?: string(name='description', description='Description information.', example='描述', position='Query'),
  eventCodes?: string(name='eventCodes', description='Event code.', example='account_abuse_pro,account_abuse', position='Query'),
  id: long(name='id', description='Variable ID

This parameter is required.', example='376773', position='Query'),
  name: string(name='name', description='Variable name

This parameter is required.', example='dxkkLw8fe18', position='Query'),
  outputs?: string(name='outputs', description='Output', example='STRING', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model ModifyCustVariableResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: [ 
    {
      failType?: string(name='failType', description='Failure type', example='rule'),
      message?: string(name='message', description='Detailed information.', example='ok'),
      success?: boolean(name='success', description='Whether the operation was successful', example='true'),
    }
  ](name='resultObject', description='Return object'),
}

model ModifyCustVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyCustVariableResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyCustVariable  ModifyCustVariableRequest
  * @return ModifyCustVariableResponse
 */
async function modifyCustVariable(request: ModifyCustVariableRequest): ModifyCustVariableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyCustVariable', 'POST', '/', 'json', false, 'json', request);
}

model ModifyEventRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  bizVersion?: int32(name='bizVersion', description='Version number (latest).', example='1', position='Query'),
  createType?: string(name='createType', description='Creation type', example='NORMAL', position='Query'),
  eventCode?: string(name='eventCode', description='Event code', example='de_ambiby3420', position='Query'),
  eventName?: string(name='eventName', description='Event name.', example='注册事件', position='Query'),
  inputFieldsStr?: string(name='inputFieldsStr', description='Input parameters, JSON string.', example='[{\\"fieldCode\\":\\"sessionId\\",\\"description\\":\\"会话ID\\",\\"fieldRank\\":0,\\"title\\":\\"会话ID\\",\\"fieldType\\":\\"STRING\\",\\"fieldSource\\":\\"DEFAULT\\"},{\\"fieldCode\\":\\"tags\\",\\"fieldRank\\":1,\\"title\\":\\"风险标签\\",\\"fieldType\\":\\"STRING\\",\\"fieldSource\\":\\"DEFAULT\\"},{\\"fieldCode\\":\\"score\\",\\"fieldRank\\":2,\\"title\\":\\"风险分值\\",\\"fieldType\\":\\"DOUBLE\\",\\"fieldSource\\":\\"DEFAULT\\"},{\\"fieldCode\\":\\"hitRules\\",\\"fieldRank\\":3,\\"title\\":\\"命中策略\\",\\"fieldType\\":\\"STRING\\",\\"fieldSource\\":\\"DEFAULT\\"}]', position='Query'),
  memo?: string(name='memo', description='Memo.', example='备注', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  templateType?: string(name='templateType', description='Template type', example='暂无', position='Query'),
}

model ModifyEventResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model ModifyEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyEventResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyEvent  ModifyEventRequest
  * @return ModifyEventResponse
 */
async function modifyEvent(request: ModifyEventRequest): ModifyEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyEvent', 'POST', '/', 'json', false, 'json', request);
}

model ModifyEventStatusRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  createType?: string(name='createType', description='Creation type', example='NORMAL', position='Query'),
  eventCode?: string(name='eventCode', description='Event code', example='de_aamexg3015', position='Query'),
  fromEventSatus?: string(name='fromEventSatus', description='Initial event status, to avoid duplicate submissions or historical replays', example='ONLINE', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  toEventSatus?: string(name='toEventSatus', description='Updated event status', example='OFFLINE', position='Query'),
}

model ModifyEventStatusResponseBody = {
  requestId?: string(name='requestId', description='Request ID', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model ModifyEventStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyEventStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyEventStatus  ModifyEventStatusRequest
  * @return ModifyEventStatusResponse
 */
async function modifyEventStatus(request: ModifyEventStatusRequest): ModifyEventStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyEventStatus', 'POST', '/', 'json', false, 'json', request);
}

model ModifyExpressionVariableRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  dataVersion: long(name='dataVersion', description='Data version.

This parameter is required.', example='5', position='Query'),
  description?: string(name='description', description='Description.', example='描述', position='Query'),
  eventCode: string(name='eventCode', description='Event code

This parameter is required.', example='de_acytyt7036', position='Query'),
  expression: string(name='expression', description='Expression

This parameter is required.', example='@ex_GX9rrlTq4b67 + 1001', position='Query'),
  expressionTitle: string(name='expressionTitle', description='Expression display

This parameter is required.', example='@selfvariable_02 + 1001', position='Query'),
  expressionVariable?: string(name='expressionVariable', description='Calculation expression variable', example='ex_GX9rrlTq4b67', position='Query'),
  id: long(name='id', description='Variable ID

This parameter is required.', example='3144', position='Query'),
  name?: string(name='name', description='Variable name', example='ex_NgR6nDVD821c', position='Query'),
  outlier: string(name='outlier', description='Outlier

This parameter is required.', example='-1', position='Query'),
  outputs: string(name='outputs', description='Output

This parameter is required.', example='STRING', position='Query'),
  regId: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou', position='Query'),
  title: string(name='title', description='Title.

This parameter is required.', example='变量标题', position='Query'),
}

model ModifyExpressionVariableResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model ModifyExpressionVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyExpressionVariableResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyExpressionVariable  ModifyExpressionVariableRequest
  * @return ModifyExpressionVariableResponse
 */
async function modifyExpressionVariable(request: ModifyExpressionVariableRequest): ModifyExpressionVariableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyExpressionVariable', 'POST', '/', 'json', false, 'json', request);
}

model ModifyFieldRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  classify?: string(name='classify', description='Field classification', example='REQUEST_PARAM', position='Query'),
  description?: string(name='description', description='Description information.', example='描述', position='Query'),
  enumData?: string(name='enumData', description='Enum type', example='[{\\"name\\":\\"ENABLE\\",\\"value\\":\\"禁用\\"}]', position='Query'),
  id?: long(name='id', description='Variable ID', example='376773', position='Query'),
  name?: string(name='name', description='Variable name', example='age', position='Query'),
  regId: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou', position='Query'),
  title?: string(name='title', description='Title.', example='年龄', position='Query'),
}

model ModifyFieldResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model ModifyFieldResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyFieldResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyField  ModifyFieldRequest
  * @return ModifyFieldResponse
 */
async function modifyField(request: ModifyFieldRequest): ModifyFieldResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyField', 'POST', '/', 'json', false, 'json', request);
}

model ModifyRulePriorityRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  consoleRuleId?: long(name='consoleRuleId', description='Primary key ID of the policy', example='3581', position='Query'),
  priority?: int32(name='priority', description='Policy priority, the higher the number, the higher the priority.', example='10', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  ruleId?: long(name='ruleId', description='Policy ID', example='101796', position='Query'),
}

model ModifyRulePriorityResponseBody = {
  requestId?: string(name='requestId', description='Request ID', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model ModifyRulePriorityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyRulePriorityResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyRulePriority  ModifyRulePriorityRequest
  * @return ModifyRulePriorityResponse
 */
async function modifyRulePriority(request: ModifyRulePriorityRequest): ModifyRulePriorityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyRulePriority', 'POST', '/', 'json', false, 'json', request);
}

model ModifyRuleStatusRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  applyUserId?: string(name='applyUserId', description='UID of the applicant.', example='1519714049632764', position='Query'),
  applyUserName?: string(name='applyUserName', description='Name of the applicant.', example='root', position='Query'),
  auditRemark?: string(name='auditRemark', description='Approval remarks.', example='申请发布上线', position='Query'),
  auditUserId?: string(name='auditUserId', description='UID of the auditor.', example='1519714049632764', position='Query'),
  auditUserName?: string(name='auditUserName', description='Name of the auditor.', example='root', position='Query'),
  consoleRuleId?: long(name='consoleRuleId', description='Primary key ID of the policy.', example='6843', position='Query'),
  eventType?: string(name='eventType', description='Event type.', example='MAIN', position='Query'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou', position='Query'),
  ruleAuditType?: string(name='ruleAuditType', description='Audit status.', example='DRAFT_TO_RUNNING', position='Query'),
  ruleId?: string(name='ruleId', description='Policy ID.', example='101544', position='Query'),
  ruleVersionId?: long(name='ruleVersionId', description='Primary key ID of the policy version.', example='11519', position='Query'),
}

model ModifyRuleStatusResponseBody = {
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: boolean(name='resultObject', description='Return object.', example='true'),
}

model ModifyRuleStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyRuleStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyRuleStatus  ModifyRuleStatusRequest
  * @return ModifyRuleStatusResponse
 */
async function modifyRuleStatus(request: ModifyRuleStatusRequest): ModifyRuleStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyRuleStatus', 'POST', '/', 'json', false, 'json', request);
}

model OpenConsoleSlsRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  scene?: string(name='scene', description='Scene', example='SAF_DE_SERVICE', position='Query'),
}

model OpenConsoleSlsResponseBody = {
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: string(name='resultObject', description='Returned object', example='true'),
}

model OpenConsoleSlsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OpenConsoleSlsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of OpenConsoleSls  OpenConsoleSlsRequest
  * @return OpenConsoleSlsResponse
 */
async function openConsoleSls(request: OpenConsoleSlsRequest): OpenConsoleSlsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenConsoleSls', 'POST', '/', 'json', false, 'json', request);
}

model OperateFavoriteVariableRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  id: long(name='id', description='Variable ID

This parameter is required.', example='3144', position='Query'),
  operate: string(name='operate', description='Favorite operation

This parameter is required.', example='ADD', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model OperateFavoriteVariableResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model OperateFavoriteVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OperateFavoriteVariableResponseBody(name='body'),
}

/**
  * @param request  the request parameters of OperateFavoriteVariable  OperateFavoriteVariableRequest
  * @return OperateFavoriteVariableResponse
 */
async function operateFavoriteVariable(request: OperateFavoriteVariableRequest): OperateFavoriteVariableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OperateFavoriteVariable', 'POST', '/', 'json', false, 'json', request);
}

model PermissionCheckRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='RegId', description='Region code.', example='cn-hangzhou', position='Query'),
}

model PermissionCheckResponseBody = {
  code?: string(name='Code', description='Return code.', example='200'),
  httpStatusCode?: string(name='HttpStatusCode', description='HTTP status code.', example='200'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: string(name='ResultObject', description='Return result.', example='true'),
}

model PermissionCheckResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PermissionCheckResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PermissionCheck  PermissionCheckRequest
  * @return PermissionCheckResponse
 */
async function permissionCheck(request: PermissionCheckRequest): PermissionCheckResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PermissionCheck', 'POST', '/', 'json', false, 'json', request);
}

model PocCreateTaskRequest {
  dateFormat?: string(name='DateFormat', description='Date format', example='yyyyMMdd', position='Query'),
  lang?: string(name='Lang', description='Set the language type for request and response messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='RegId', description='Region code.', example='cn-hangzhou', position='Query'),
  taskName?: string(name='TaskName', description='Task name.', example='o32d1pktx4t', position='Query'),
  token: string(name='Token', description='Task token.

This parameter is required.', example='68ce949aff6be7f1201eb2f9095ac95f', position='Query'),
}

model PocCreateTaskResponseBody = {
  code?: string(name='Code', description='Status code.', example='200'),
  data?: string(name='Data', description='Task creation result', example='{\\"Values\\": {\\"status\\": {\\"value\\": 4, \\"label\\": u\\"\\u5904\\u7406\\u4e2d\\"}, \\"bbs_ticket\\": True, \\"description\\": u\\"[LV-ERROR'),
  httpStatusCode?: string(name='HttpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='Message', description='Response message.', example='successful'),
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  success?: string(name='Success', description='Whether the task was successful. **true** indicates success, **false** indicates failure.', example='true'),
}

model PocCreateTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PocCreateTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PocCreateTask  PocCreateTaskRequest
  * @return PocCreateTaskResponse
 */
async function pocCreateTask(request: PocCreateTaskRequest): PocCreateTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PocCreateTask', 'POST', '/', 'json', false, 'json', request);
}

model PocGetDownloadUrlRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  token?: string(name='Token', description='Task token.', example='d83221f51752805880', position='Query'),
}

model PocGetDownloadUrlResponseBody = {
  code?: string(name='Code', description='Status code.', example='200'),
  data?: string(name='Data', description='Data', example='{\\"searchResult\\": [], \\"searchTotalNum\\": 0, \\"searchTime\\": 0.012349}'),
  httpStatusCode?: string(name='HttpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='Message', description='Response message', example='successful'),
  requestId?: string(name='RequestId', description='ID of the request', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  success?: string(name='Success', description='Indicates whether the call was successful. true: Call succeeded. false: Call failed.', example='True'),
}

model PocGetDownloadUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PocGetDownloadUrlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PocGetDownloadUrl  PocGetDownloadUrlRequest
  * @return PocGetDownloadUrlResponse
 */
async function pocGetDownloadUrl(request: PocGetDownloadUrlRequest): PocGetDownloadUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PocGetDownloadUrl', 'POST', '/', 'json', false, 'json', request);
}

model PocGetTokenRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='RegId', description='Region code.', example='cn-hangzhou', position='Query'),
  serviceCode: string(name='ServiceCode', description='Service code.

This parameter is required.', example='alinlp', position='Query'),
}

model PocGetTokenResponseBody = {
  code?: string(name='Code', description='Status code', example='200'),
  data?: string(name='Data', description='Returned data', example='true'),
  httpStatusCode?: string(name='HttpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='Message', description='Return message', example='success'),
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  success?: string(name='Success', description='Whether the call was successful. true: Call succeeded. false: Call failed.', example='true'),
}

model PocGetTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PocGetTokenResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PocGetToken  PocGetTokenRequest
  * @return PocGetTokenResponse
 */
async function pocGetToken(request: PocGetTokenRequest): PocGetTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PocGetToken', 'POST', '/', 'json', false, 'json', request);
}

model PocSendDataRequest {
  batchNo: long(name='BatchNo', description='Starting position for batch operations, starting from 0.

This parameter is required.', example='d0', position='Query'),
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  paramsList: string(name='ParamsList', description='Return parameters, in JSON format.

This parameter is required.', example='c222460c', position='Query'),
  regId?: string(name='RegId', description='Region code.', example='cn-hangzhou', position='Query'),
  token: string(name='Token', description='Task token.

This parameter is required.', example='a471aa421752633438', position='Query'),
}

model PocSendDataResponseBody = {
  code?: string(name='Code', description='API status code.', example='200'),
  data?: string(name='Data', description='Returned data result.', example='true'),
  httpStatusCode?: string(name='HttpStatusCode', description='HTTP status code.', example='200'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  success?: string(name='Success', description='Whether the operation was successful.', example='true'),
}

model PocSendDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PocSendDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PocSendData  PocSendDataRequest
  * @return PocSendDataResponse
 */
async function pocSendData(request: PocSendDataRequest): PocSendDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PocSendData', 'POST', '/', 'json', false, 'json', request);
}

model QueryAuthRuleDetailByRuleIdRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  consoleRuleId?: long(name='consoleRuleId', description='Primary key ID of the strategy', example='6843', position='Query'),
  regId: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou', position='Query'),
  ruleId?: string(name='ruleId', description='Strategy ID', example='102224', position='Query'),
  ruleVersionId?: long(name='ruleVersionId', description='Primary key ID of the strategy version', example='11519', position='Query'),
}

model QueryAuthRuleDetailByRuleIdResponseBody = {
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    auditId?: long(name='auditId', description='Audit ID', example='225'),
    authType?: string(name='authType', description='Authorization type', example='all'),
    authUsers?: string(name='authUsers', description='Authorized user UID', example='*'),
    consoleRuleId?: long(name='consoleRuleId', description='Primary key ID of the strategy', example='6843'),
    eventCode?: string(name='eventCode', description='Event code', example='de_aszbjb7236'),
    eventName?: string(name='eventName', description='Event name.', example='注册风险'),
    gmtCreate?: long(name='gmtCreate', description='Creation time.', example='1621578648000'),
    gmtModified?: long(name='gmtModified', description='Modification time', example='1565701886000'),
    logicExpression?: string(name='logicExpression', description='Execution logic', example='1&2'),
    memo?: string(name='memo', description='Description', example='描述'),
    priority?: long(name='priority', description='Rule priority, the higher the number, the higher the priority.', example='10'),
    ruleActionMap?: map[string]string(name='ruleActionMap', description='Returned rule action structure.'),
    ruleActions?: string(name='ruleActions', description='Output actions', example='[{\\"inputs\\":[\\"unusualBrand\\"],\\"name\\":\\"__addDeTags__\\",\\"actionType\\":\\"TAG\\",\\"outputType\\":\\"const\\"}]'),
    ruleAuthType?: string(name='ruleAuthType', description='Rule authorization type', example='WHITE_BOX'),
    ruleExpressions?: string(name='ruleExpressions', description='Rule expressions.', example='[{\\"expressionName\\":\\"同一设备同一IP上的注册用户数\\",\\"itemId\\":1,\\"left\\":{\\"name\\":\\"dK7EXHr490f\\"},\\"operatorCode\\":\\"gte\\",\\"operatorName\\":\\"大于等于\\",\\"right\\":{\\"fieldValue\\":\\"2\\"}}]'),
    ruleId?: string(name='ruleId', description='Strategy ID', example='102224'),
    ruleName?: string(name='ruleName', description='Strategy name', example='营销风险识别'),
    ruleStatus?: string(name='ruleStatus', description='Strategy status', example='RUNNING'),
    ruleType?: string(name='ruleType', description='Rule type', example='DEFAULT'),
    ruleVersionId?: long(name='ruleVersionId', description='Primary key ID of the strategy version', example='11519'),
    templateType?: string(name='templateType', description='Template type', example='PUB_SERVICE'),
    version?: long(name='version', description='Version number', example='1'),
  }(name='resultObject', description='Returned object'),
}

model QueryAuthRuleDetailByRuleIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAuthRuleDetailByRuleIdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryAuthRuleDetailByRuleId  QueryAuthRuleDetailByRuleIdRequest
  * @return QueryAuthRuleDetailByRuleIdResponse
 */
async function queryAuthRuleDetailByRuleId(request: QueryAuthRuleDetailByRuleIdRequest): QueryAuthRuleDetailByRuleIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAuthRuleDetailByRuleId', 'POST', '/', 'json', false, 'json', request);
}

model RecallRuleAuditRequest {
  id: long(name='id', description='Primary key ID

This parameter is required.', example='1', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model RecallRuleAuditResponseBody = {
  requestId?: string(name='requestId', description='Request ID.', example='4C7DC1C8-557F-5483-9E96-74D77A15EEB5'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model RecallRuleAuditResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RecallRuleAuditResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RecallRuleAudit  RecallRuleAuditRequest
  * @return RecallRuleAuditResponse
 */
async function recallRuleAudit(request: RecallRuleAuditRequest): RecallRuleAuditResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecallRuleAudit', 'POST', '/', 'json', false, 'json', request);
}

model RemoveEventRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  createType?: string(name='createType', description='Creation type', example='NORMAL', position='Query'),
  eventCode?: string(name='eventCode', description='Event code', example='de_arqbuy7206', position='Query'),
  id?: long(name='id', description='Event ID', example='2556', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  templateCode?: string(name='templateCode', description='Input field template type', example='register', position='Query'),
}

model RemoveEventResponseBody = {
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model RemoveEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveEventResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemoveEvent  RemoveEventRequest
  * @return RemoveEventResponse
 */
async function removeEvent(request: RemoveEventRequest): RemoveEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveEvent', 'POST', '/', 'json', false, 'json', request);
}

model SampleFileDownloadRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='RegId', description='Region code.', example='cn-hangzhou', position='Query'),
  tab?: string(name='Tab', description='Scenario.', example='FINANCE', position='Query'),
}

model SampleFileDownloadResponseBody = {
  code?: string(name='Code', description='Status code.', example='200'),
  httpStatusCode?: string(name='HttpStatusCode', description='HTTP status code.', example='200'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: string(name='ResultObject', description='Request result.', example='true'),
}

model SampleFileDownloadResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SampleFileDownloadResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SampleFileDownload  SampleFileDownloadRequest
  * @return SampleFileDownloadResponse
 */
async function sampleFileDownload(request: SampleFileDownloadRequest): SampleFileDownloadResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SampleFileDownload', 'POST', '/', 'json', false, 'json', request);
}

model SaveAnalysisColumnRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  columns: string(name='columns', description='Custom columns

This parameter is required.', example='[{\\"variableName\\":\\"requestId\\",\\"variableTitle\\":\\"RequestId\\",\\"variableType\\":\\"SYSTEM_BIND\\",\\"isDefault\\":true},{\\"variableName\\":\\"eventTime\\",\\"variableTitle\\":\\"事件时间\\",\\"variableType\\":\\"SYSTEM_BIND\\",\\"isDefault\\":true},{\\"variableName\\":\\"accountId\\",\\"variableTitle\\":\\"账号\\",\\"variableType\\":\\"SYSTEM_BIND\\",\\"isDefault\\":true},{\\"variableName\\":\\"deviceId\\",\\"variableTitle\\":\\"设备ID\\",\\"variableType\\":\\"SYSTEM_BIND\\",\\"isDefault\\":true},{\\"variableName\\":\\"eventCode\\",\\"variableTitle\\":\\"事件编码\\",\\"variableType\\":\\"SYSTEM_BIND\\",\\"isDefault\\":true},{\\"variableName\\":\\"ip\\",\\"variableTitle\\":\\"IP\\",\\"variableType\\":\\"SYSTEM_BIND\\",\\"isDefault\\":true},{\\"variableName\\":\\"score\\",\\"variableTitle\\":\\"分值\\",\\"variableType\\":\\"SYSTEM_BIND\\",\\"isDefault\\":true},{\\"variableName\\":\\"tags\\",\\"variableTitle\\":\\"标签\\",\\"variableType\\":\\"SYSTEM_BIND\\",\\"isDefault\\":true},{\\"variableName\\":\\"DEtest222\\",\\"variableTitle\\":\\"测试222\\",\\"variableType\\":\\"NATIVE\\",\\"isDefault\\":false}]', position='Query'),
  regId: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model SaveAnalysisColumnResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model SaveAnalysisColumnResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SaveAnalysisColumnResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SaveAnalysisColumn  SaveAnalysisColumnRequest
  * @return SaveAnalysisColumnResponse
 */
async function saveAnalysisColumn(request: SaveAnalysisColumnRequest): SaveAnalysisColumnResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveAnalysisColumn', 'POST', '/', 'json', false, 'json', request);
}

model SaveByPassOrShuntEventRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  eventId?: long(name='eventId', description='Event ID.', example='445', position='Query'),
  eventName?: string(name='eventName', description='Event name.', example='注册事件', position='Query'),
  eventType?: string(name='eventType', description='Event type', example='MAIN', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model SaveByPassOrShuntEventResponseBody = {
  code?: string(name='code', description='Status code', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error message.', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
  success?: boolean(name='success', description='Whether the request was successful.', example='true'),
}

model SaveByPassOrShuntEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SaveByPassOrShuntEventResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SaveByPassOrShuntEvent  SaveByPassOrShuntEventRequest
  * @return SaveByPassOrShuntEventResponse
 */
async function saveByPassOrShuntEvent(request: SaveByPassOrShuntEventRequest): SaveByPassOrShuntEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveByPassOrShuntEvent', 'POST', '/', 'json', false, 'json', request);
}

model StartOrStopByPassShuntEventRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  eventId?: long(name='eventId', description='Event ID.', example='445', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  status?: string(name='status', description='Status.', example='1', position='Query'),
}

model StartOrStopByPassShuntEventResponseBody = {
  code?: string(name='code', description='Status code', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error message.', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
  success?: boolean(name='success', description='Whether the request was successful.', example='true'),
}

model StartOrStopByPassShuntEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartOrStopByPassShuntEventResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartOrStopByPassShuntEvent  StartOrStopByPassShuntEventRequest
  * @return StartOrStopByPassShuntEventResponse
 */
async function startOrStopByPassShuntEvent(request: StartOrStopByPassShuntEventRequest): StartOrStopByPassShuntEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartOrStopByPassShuntEvent', 'POST', '/', 'json', false, 'json', request);
}

model StartSimulationTaskRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  id: string(name='id', description='Primary key ID

This parameter is required.', example='3144', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model StartSimulationTaskResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model StartSimulationTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartSimulationTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartSimulationTask  StartSimulationTaskRequest
  * @return StartSimulationTaskResponse
 */
async function startSimulationTask(request: StartSimulationTaskRequest): StartSimulationTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartSimulationTask', 'POST', '/', 'json', false, 'json', request);
}

model StopSimulationTaskRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  id: string(name='id', description='Task ID.

This parameter is required.', example='376773', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model StopSimulationTaskResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model StopSimulationTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopSimulationTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopSimulationTask  StopSimulationTaskRequest
  * @return StopSimulationTaskResponse
 */
async function stopSimulationTask(request: StopSimulationTaskRequest): StopSimulationTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopSimulationTask', 'POST', '/', 'json', false, 'json', request);
}

model SwitchExpressionVariableRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  dataVersion: long(name='dataVersion', description='Data version.

This parameter is required.', example='1', position='Query'),
  id: long(name='id', description='Variable ID

This parameter is required.', example='2556', position='Query'),
  regId: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou', position='Query'),
  status: string(name='status', description='Status.

This parameter is required.', example='ENABLE', position='Query'),
}

model SwitchExpressionVariableResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model SwitchExpressionVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SwitchExpressionVariableResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SwitchExpressionVariable  SwitchExpressionVariableRequest
  * @return SwitchExpressionVariableResponse
 */
async function switchExpressionVariable(request: SwitchExpressionVariableRequest): SwitchExpressionVariableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SwitchExpressionVariable', 'POST', '/', 'json', false, 'json', request);
}

model SwitchFieldRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  id?: long(name='id', description='Primary Key ID', example='250002', position='Query'),
  name?: string(name='name', description='Parameter Name.', example='age', position='Query'),
  regId: string(name='regId', description='Region Code

This parameter is required.', example='cn-hangzhou', position='Query'),
  source?: string(name='source', description='Field Source', example='DEFINE', position='Query'),
  status?: string(name='status', description='Status.', example='ENABLE', position='Query'),
}

model SwitchFieldResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return Object', example='true'),
}

model SwitchFieldResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SwitchFieldResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SwitchField  SwitchFieldRequest
  * @return SwitchFieldResponse
 */
async function switchField(request: SwitchFieldRequest): SwitchFieldResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SwitchField', 'POST', '/', 'json', false, 'json', request);
}

model SwitchQueryVariableRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  id: long(name='id', description='Primary key ID

This parameter is required.', example='3144', position='Query'),
  regId: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou', position='Query'),
  status?: string(name='status', description='Status.', example='ENABLE', position='Query'),
}

model SwitchQueryVariableResponseBody = {
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model SwitchQueryVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SwitchQueryVariableResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SwitchQueryVariable  SwitchQueryVariableRequest
  * @return SwitchQueryVariableResponse
 */
async function switchQueryVariable(request: SwitchQueryVariableRequest): SwitchQueryVariableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SwitchQueryVariable', 'POST', '/', 'json', false, 'json', request);
}

model SwitchToOnlineRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  eventId: long(name='eventId', description='The event ID to switch to.

This parameter is required.', example='de_ahqhsw7665', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model SwitchToOnlineResponseBody = {
  code?: string(name='code', description='Status code', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error message.', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
  success?: boolean(name='success', description='Indicates whether this operation was successful, `true` means success.', example='true'),
}

model SwitchToOnlineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SwitchToOnlineResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SwitchToOnline  SwitchToOnlineRequest
  * @return SwitchToOnlineResponse
 */
async function switchToOnline(request: SwitchToOnlineRequest): SwitchToOnlineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SwitchToOnline', 'POST', '/', 'json', false, 'json', request);
}

model SwitchVariableRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  dataVersion?: long(name='dataVersion', description='Data version.', example='1', position='Query'),
  id?: long(name='id', description='Primary key ID of the cumulative variable', example='2557', position='Query'),
  name?: string(name='name', description='Cumulative variable name: generated by the backend', example='hS6fn8Oe0c1', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  status?: string(name='status', description='Status.', example='ENABLE', position='Query'),
}

model SwitchVariableResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model SwitchVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SwitchVariableResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SwitchVariable  SwitchVariableRequest
  * @return SwitchVariableResponse
 */
async function switchVariable(request: SwitchVariableRequest): SwitchVariableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SwitchVariable', 'POST', '/', 'json', false, 'json', request);
}

model TaskNameByUserIdRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  regId?: string(name='RegId', description='Region code.', example='cn-hangzhou', position='Query'),
  taskName?: string(name='TaskName', description='Task name.', example='Methylation_node_5_3', position='Query'),
}

model TaskNameByUserIdResponseBody = {
  code?: string(name='Code', description='Response code.', example='200'),
  httpStatusCode?: string(name='HttpStatusCode', description='HTTP status code.', example='200'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='ResultObject', description='Return result.', example='true'),
}

model TaskNameByUserIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TaskNameByUserIdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of TaskNameByUserId  TaskNameByUserIdRequest
  * @return TaskNameByUserIdResponse
 */
async function taskNameByUserId(request: TaskNameByUserIdRequest): TaskNameByUserIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TaskNameByUserId', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAnalysisConditionFavoriteRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  condition?: string(name='condition', description='Condition value.', example='{\\"relationship\\":\\"and\\",\\"list\\":[{\\"deepCount\\":1,\\"left\\":{\\"hasRightVariable\\":true,\\"fieldType\\":\\"INT\\",\\"functionName\\":\\"\\",\\"leftVariableType\\":\\"NATIVE\\",\\"name\\":\\"DEtest222\\",\\"operatorCode\\":\\"equals\\"},\\"right\\":{\\"rightVariableType\\":\\"constant\\",\\"name\\":\\"9007199254\\",\\"functionName\\":\\"\\"},\\"operatorCode\\":\\"equals\\"}]}', position='Query'),
  eventBeginTime?: long(name='eventBeginTime', description='Start time, accurate to milliseconds (ms).', example='1752076800000', position='Query'),
  eventCode?: string(name='eventCode', description='Event code', example='de_ajnoqe2016', position='Query'),
  eventEndTime?: long(name='eventEndTime', description='End time, accurate to milliseconds (ms).', example='1753891199000', position='Query'),
  fieldName?: string(name='fieldName', description='Field name', example='age', position='Query'),
  fieldValue?: string(name='fieldValue', description='Field value', example='20', position='Query'),
  id: long(name='id', description='Primary key ID

This parameter is required.', example='3144', position='Query'),
  name?: string(name='name', description='Condition name', example='查询条件1', position='Query'),
  regId: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou', position='Query'),
  type?: string(name='type', description='Type, BASIC: Basic query, ADVANCE: Advanced query, BATCH: Batch query', example='BASIC', position='Query'),
}

model UpdateAnalysisConditionFavoriteResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Returned object', example='true'),
}

model UpdateAnalysisConditionFavoriteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAnalysisConditionFavoriteResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateAnalysisConditionFavorite  UpdateAnalysisConditionFavoriteRequest
  * @return UpdateAnalysisConditionFavoriteResponse
 */
async function updateAnalysisConditionFavorite(request: UpdateAnalysisConditionFavoriteRequest): UpdateAnalysisConditionFavoriteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAnalysisConditionFavorite', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAuditRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  auditMsg?: string(name='auditMsg', description='Approval comments', example='同意', position='Query'),
  auditRelationType?: string(name='auditRelationType', description='Associated type', example='RULE', position='Query'),
  auditStatus?: string(name='auditStatus', description='Status', example='AGREE', position='Query'),
  id?: long(name='id', description='The ID of the approval to be updated.', example='376773', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model UpdateAuditResponseBody = {
  code?: string(name='code', description='Status code', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error message.', example='The input parameter data is not valid. order_storage_company_num component not found'),
  resultObject?: boolean(name='resultObject', description='Returned object', example='true'),
  success?: boolean(name='success', description='Whether the call was successful', example='true'),
}

model UpdateAuditResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAuditResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateAudit  UpdateAuditRequest
  * @return UpdateAuditResponse
 */
async function updateAudit(request: UpdateAuditRequest): UpdateAuditResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAudit', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAuthRuleRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  consoleRuleId?: long(name='consoleRuleId', description='Policy primary key ID', example='7088', position='Query'),
  eventCode?: string(name='eventCode', description='Event code', example='de_afghcf6411', position='Query'),
  regId: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou', position='Query'),
  ruleActions?: string(name='ruleActions', description='Policy output action', example='[{\\"inputs\\":[\\"auto_accselist\\"],\\"name\\":\\"__addDeTags__\\",\\"actionType\\":\\"TAG\\",\\"outputType\\":\\"const\\"}]', position='Query'),
  ruleExpressions: string(name='ruleExpressions', description='Expression

This parameter is required.', example='[{\\"expressionName\\":\\"设备token不为空\\",\\"itemId\\":1,\\"left\\":{\\"name\\":\\"deviceToken\\"},\\"operatorCode\\":\\"isNotEmptyWrapper\\",\\"operatorName\\":\\"不为空\\"}]', position='Query'),
  ruleId: string(name='ruleId', description='Policy ID

This parameter is required.', example='101544', position='Query'),
  ruleVersionId?: long(name='ruleVersionId', description='Policy version primary key ID', example='5190', position='Query'),
}

model UpdateAuthRuleResponseBody = {
  requestId?: string(name='RequestId', description='Request ID', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model UpdateAuthRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAuthRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateAuthRule  UpdateAuthRuleRequest
  * @return UpdateAuthRuleResponse
 */
async function updateAuthRule(request: UpdateAuthRuleRequest): UpdateAuthRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAuthRule', 'POST', '/', 'json', false, 'json', request);
}

model UpdateByPassShuntEventRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  eventId?: long(name='eventId', description='Event ID.', example='233', position='Query'),
  eventName?: string(name='eventName', description='Event name.', example='用户昵称文本审核检测结果', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
}

model UpdateByPassShuntEventResponseBody = {
  code?: string(name='code', description='Status code.', example='200'),
  httpStatusCode?: string(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error message.', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
  success?: boolean(name='success', description='Whether it was successful', example='true'),
}

model UpdateByPassShuntEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateByPassShuntEventResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateByPassShuntEvent  UpdateByPassShuntEventRequest
  * @return UpdateByPassShuntEventResponse
 */
async function updateByPassShuntEvent(request: UpdateByPassShuntEventRequest): UpdateByPassShuntEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateByPassShuntEvent', 'POST', '/', 'json', false, 'json', request);
}

model UpdateDataSourceRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  description?: string(name='description', description='Description information.', example='描述', position='Query'),
  id: long(name='id', description='Primary key ID

This parameter is required.', example='30', position='Query'),
  name?: string(name='name', description='Data source name.', example='年龄数据源', position='Query'),
  ossKey?: string(name='ossKey', description='OSS file key.', example='saf/path/xxx', position='Query'),
  regId: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou', position='Query'),
  type?: string(name='type', description='Data source type', example='FILE', position='Query'),
}

model UpdateDataSourceResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model UpdateDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataSourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateDataSource  UpdateDataSourceRequest
  * @return UpdateDataSourceResponse
 */
async function updateDataSource(request: UpdateDataSourceRequest): UpdateDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDataSource', 'POST', '/', 'json', false, 'json', request);
}

model UpdateQueryVariableRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  dataSourceCode: string(name='dataSourceCode', description='Data source code

This parameter is required.', example='ds_vcaoii1697', position='Query'),
  description?: string(name='description', description='Description.', example='描述', position='Query'),
  eventCode: string(name='eventCode', description='Event code

This parameter is required.', example='de_ajnoqe2016', position='Query'),
  expression: string(name='expression', description='Expression.

This parameter is required.', example='SELECT  AVG( $source )\\nFROM ds_vcaoii1697 \\nWHERE  $age > 0', position='Query'),
  expressionTitle: string(name='expressionTitle', description='Display expression

This parameter is required.', example='SELECT  AVG( $source )\\nFROM testCase\\nWHERE  $age > 0', position='Query'),
  expressionVariable: string(name='expressionVariable', description='Expression associated variable

This parameter is required.', example='age', position='Query'),
  id: long(name='id', description='Primary key ID

This parameter is required.', example='3144', position='Query'),
  outlier: string(name='outlier', description='Outlier

This parameter is required.', example='-1', position='Query'),
  outputs: string(name='outputs', description='Variable return type

This parameter is required.', example='STRING', position='Query'),
  regId: string(name='regId', description='Region code

This parameter is required.', example='cn-hangzhou', position='Query'),
  title: string(name='title', description='Title.

This parameter is required.', example='获取年龄大于30的数据', position='Query'),
}

model UpdateQueryVariableResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model UpdateQueryVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateQueryVariableResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateQueryVariable  UpdateQueryVariableRequest
  * @return UpdateQueryVariableResponse
 */
async function updateQueryVariable(request: UpdateQueryVariableRequest): UpdateQueryVariableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateQueryVariable', 'POST', '/', 'json', false, 'json', request);
}

model UpdateRuleRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values: 
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  consoleRuleId?: long(name='consoleRuleId', description='Primary key ID of the policy', example='6843', position='Query'),
  eventCode?: string(name='eventCode', description='Event code', example='de_agdxgz0246', position='Query'),
  logicExpression?: string(name='logicExpression', description='Execution logic', example='1&2', position='Query'),
  memo?: string(name='memo', description='Description', example='备注', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  ruleActions?: string(name='ruleActions', description='Output action', example='[{\\"inputs\\":[\\"rn0301\\"],\\"name\\":\\"__addDeTags__\\",\\"actionType\\":\\"TAG\\",\\"outputType\\":\\"const\\"}]', position='Query'),
  ruleBody?: string(name='ruleBody', description='DSL policy expression', example='{
        "elseIfStatement": [
            {
                "condition": {
                    "currentId": 0,
                    "deepCount": 1,
                    "list": [
                        {
                            "currentId": 0,
                            "deepCount": 1,
                            "left": {
                                "code": "getLbsRegion(longitude, latitude)?.prov",
                                "description": "根据经纬度得到省份信息，比如经度：111.878062，纬度：22.585409，则经过运算，输出”广东省“",
                                "displayType": "SELF_BIND",
                                "fieldType": "STRING",
                                "functionCode": "",
                                "functionName": "",
                                "hasRightVariable": true,
                                "name": "sl_S02sHLFT7818",
                                "outputThreshold": {

                                },
                                "sourceType": "SAF",
                                "title": "经纬度自定义系统变量",
                                "type": "SELF_BIND"
                            },
                            "operatorCode": "equals",
                            "operatorName": "等于",
                            "parentId": 0,
                            "right": {
                                "name": "v",
                                "rightVariableType": "constant"
                            },
                            "sequence": 2
                        },
                        {
                            "currentId": 0,
                            "deepCount": 1,
                            "list": [
                                {
                                    "currentId": 0,
                                    "deepCount": 1,
                                    "left": {
                                        "code": "deReadVelocity(userId,"hK1DMAp1d97",1,"H",0,true,"COUNT")",
                                        "description": "测试系统变量累计",
                                        "displayType": "SELF_BIND",
                                        "fieldType": "DOUBLE",
                                        "functionCode": "",
                                        "functionName": "",
                                        "hasRightVariable": true,
                                        "name": "hK1DMAp1d97",
                                        "outputThreshold": {

                                        },
                                        "sourceType": "SAF_SELF",
                                        "title": "测试系统变量累计",
                                        "type": "SELF_BIND"
                                    },
                                    "operatorCode": "equals",
                                    "operatorName": "等于",
                                    "parentId": 0,
                                    "right": {
                                        "name": "a",
                                        "rightVariableType": "constant"
                                    },
                                    "sequence": 3
                                }
                            ],
                            "parentId": 0,
                            "relationship": "and"
                        }
                    ],
                    "parentId": 0,
                    "relationship": "and"
                },
                "then": [
                    {
                        "inputs": [
                            "123"
                        ],
                        "name": "__addDeScore__",
                        "actionType": "SCORE",
                        "outputType": "const",
                        "inputTitle": "123"
                    }
                ]
            }
        ],
        "elseStatement": {

        },
        "ifStatement": {
            "condition": {
                "currentId": 0,
                "deepCount": 1,
                "list": [
                    {
                        "currentId": 0,
                        "deepCount": 1,
                        "left": {
                            "code": "deFunctionProcess(ip,"isIp")",
                            "description": "判断是否符合IPv4标准",
                            "displayType": "SYSTEM_BIND",
                            "fieldType": "BOOLEAN",
                            "functionCode": "",
                            "functionName": "",
                            "hasRightVariable": true,
                            "name": "__isIpAddressV4__",
                            "outputThreshold": {

                            },
                            "sourceType": "SAF",
                            "title": "IP是否符合IPV4格式",
                            "type": "SYSTEM_BIND"
                        },
                        "operatorCode": "equals",
                        "operatorName": "等于",
                        "parentId": 0,
                        "right": {
                            "name": "c
d
s",
                            "rightVariableType": "constant"
                        },
                        "sequence": 1
                    }
                ],
                "parentId": 0,
                "relationship": "and"
            },
            "then": [
                {
                    "inputs": [
                        "22"
                    ],
                    "name": "__addDeTags__",
                    "actionType": "TAG",
                    "outputType": "const"
                }
            ]
        }
    }', position='Query'),
  ruleExpressions?: string(name='ruleExpressions', description='Policy expression', example='[{\\"expressionName\\":\\"手机号MD5命中人脸测试名单\\",\\"itemId\\":1,\\"left\\":{\\"name\\":\\"mobileMd5\\"},\\"operatorCode\\":\\"deInNameList\\",\\"operatorName\\":\\"在名单中\\",\\"right\\":{\\"fieldValue\\":\\"nl_5tolf69W138c\\"}}]', position='Query'),
  ruleId?: string(name='ruleId', description='Policy ID', example='102224', position='Query'),
  ruleName?: string(name='ruleName', description='Policy name', example='分析中心事件测试_策略01', position='Query'),
  ruleStatus?: string(name='ruleStatus', description='Policy status', example='RUNNING', position='Query'),
  ruleType?: string(name='ruleType', description='Policy type', example='DEFAULT', position='Query'),
  ruleVersionId?: long(name='ruleVersionId', description='Primary key ID of the policy version', example='11519', position='Query'),
}

model UpdateRuleResponseBody = {
  requestId?: string(name='requestId', description='Request ID', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model UpdateRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateRule  UpdateRuleRequest
  * @return UpdateRuleResponse
 */
async function updateRule(request: UpdateRuleRequest): UpdateRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateRule', 'POST', '/', 'json', false, 'json', request);
}

model UpdateRuleBaseRequest {
  lang?: string(name='Lang', description='Set the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  consoleRuleId?: long(name='consoleRuleId', description='Policy primary key ID', example='6843', position='Query'),
  eventCode?: string(name='eventCode', description='Event code', example='de_arcehq4370', position='Query'),
  memo?: string(name='memo', description='Description', example='备注', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  ruleId?: string(name='ruleId', description='Policy ID', example='102224', position='Query'),
  ruleName?: string(name='ruleName', description='Policy name', example='营销风险识别', position='Query'),
}

model UpdateRuleBaseResponseBody = {
  requestId?: string(name='requestId', description='Request ID.', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: boolean(name='resultObject', description='Return object', example='true'),
}

model UpdateRuleBaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateRuleBaseResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateRuleBase  UpdateRuleBaseRequest
  * @return UpdateRuleBaseResponse
 */
async function updateRuleBase(request: UpdateRuleBaseRequest): UpdateRuleBaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateRuleBase', 'POST', '/', 'json', false, 'json', request);
}

model UpdateSampleBatchRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, default value is **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  ids?: string(name='ids', description='Batch operation IDs.', example='324,343', position='Query'),
  regId?: string(name='regId', description='Region code.', example='cn-hangzhou', position='Query'),
  tags?: string(name='tags', description='Tags (comma-separated).', example='rm0102,rm0103', position='Query'),
  versions?: string(name='versions', description='Version number (latest).', example='1,1', position='Query'),
}

model UpdateSampleBatchResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  data?: boolean(name='data', description='Returned data.', example='true'),
}

model UpdateSampleBatchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSampleBatchResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateSampleBatch  UpdateSampleBatchRequest
  * @return UpdateSampleBatchResponse
 */
async function updateSampleBatch(request: UpdateSampleBatchRequest): UpdateSampleBatchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSampleBatch', 'POST', '/', 'json', false, 'json', request);
}

model UploadFileCheckRequest {
  lang?: string(name='Lang', description='Sets the language type for requests and received messages, with a default value of **zh**. Values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  batchName?: string(name='batchName', description='Sample batch name', example='白样本', position='Query'),
  dataType?: string(name='dataType', description='Data type', example='mobile', position='Query'),
  ossFileName?: string(name='ossFileName', description='Uploaded OSS address.', example='sample/94b4193d321c44b44ee92b19984000a0/样本测试01/0d8dbc6809834d51b1d88a42295c803e/1753865835166.csv', position='Query'),
  regId?: string(name='regId', description='Region code', example='cn-hangzhou', position='Query'),
  sampleTagType?: string(name='sampleTagType', description='Sample type', example='白名单', position='Query'),
  serviceList?: string(name='serviceList', description='Service list', example='account_abuse', position='Query'),
}

model UploadFileCheckResponseBody = {
  requestId?: string(name='RequestId', description='ID of the request', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
  resultObject?: {
    effectiveNumber?: int32(name='effectiveNumber', description='Number of effective rows', example='100'),
    resultList?: [ string ](name='resultList', description='Valid sample data'),
    totalNumber?: int32(name='totalNumber', description='Total number of rows', example='100'),
  }(name='resultObject', description='Returned object'),
}

model UploadFileCheckResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UploadFileCheckResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UploadFileCheck  UploadFileCheckRequest
  * @return UploadFileCheckResponse
 */
async function uploadFileCheck(request: UploadFileCheckRequest): UploadFileCheckResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UploadFileCheck', 'POST', '/', 'json', false, 'json', request);
}

