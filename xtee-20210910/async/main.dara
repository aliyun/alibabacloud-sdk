/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'xtee';
  @version = '2021-09-10';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model BindVariableRequest {
  lang?: string(name='Lang', position='Query'),
  apiRegionId?: string(name='apiRegionId', position='Query'),
  apiType?: string(name='apiType', position='Query'),
  createType?: string(name='createType', position='Query'),
  defineId?: string(name='defineId', position='Query'),
  defineIds?: string(name='defineIds', position='Query'),
  description?: string(name='description', position='Query'),
  eventCode: string(name='eventCode', position='Query'),
  exceptionValue?: string(name='exceptionValue', position='Query'),
  id?: long(name='id', position='Query'),
  outputField?: string(name='outputField', position='Query'),
  outputType?: string(name='outputType', position='Query'),
  params?: string(name='params', position='Query'),
  paramsList?: string(name='paramsList', position='Query'),
  regId?: string(name='regId', position='Query'),
  sourceType?: string(name='sourceType', position='Query'),
  title: string(name='title', position='Query'),
}

model BindVariableResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model BindVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BindVariableResponseBody(name='body'),
}

async function bindVariable(request: BindVariableRequest): BindVariableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindVariable', 'POST', '/', 'json', false, 'json', request);
}

model CheckCustVariableLimitRequest {
  lang?: string(name='Lang', position='Query'),
  createType?: string(name='createType', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model CheckCustVariableLimitResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model CheckCustVariableLimitResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckCustVariableLimitResponseBody(name='body'),
}

async function checkCustVariableLimit(request: CheckCustVariableLimitRequest): CheckCustVariableLimitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckCustVariableLimit', 'POST', '/', 'json', false, 'json', request);
}

model CheckExpressionVariableLimitRequest {
  lang?: string(name='Lang', position='Query'),
  regId: string(name='regId', position='Query'),
}

model CheckExpressionVariableLimitResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model CheckExpressionVariableLimitResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckExpressionVariableLimitResponseBody(name='body'),
}

async function checkExpressionVariableLimit(request: CheckExpressionVariableLimitRequest): CheckExpressionVariableLimitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckExpressionVariableLimit', 'POST', '/', 'json', false, 'json', request);
}

model CheckFieldLimitRequest {
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='regId', position='Query'),
  source?: string(name='source', position='Query'),
}

model CheckFieldLimitResponseBody = {
  requestId?: string(name='requestId'),
  resultObject?: boolean(name='resultObject'),
}

model CheckFieldLimitResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckFieldLimitResponseBody(name='body'),
}

async function checkFieldLimit(request: CheckFieldLimitRequest): CheckFieldLimitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckFieldLimit', 'POST', '/', 'json', false, 'json', request);
}

model CheckPermissionRequest {
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model CheckPermissionResponseBody = {
  requestId?: string(name='requestId'),
  resultObject?: boolean(name='resultObject'),
}

model CheckPermissionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckPermissionResponseBody(name='body'),
}

async function checkPermission(request: CheckPermissionRequest): CheckPermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckPermission', 'POST', '/', 'json', false, 'json', request);
}

model CheckUsageVariableRequest {
  lang?: string(name='Lang', position='Query'),
  id: long(name='id', position='Query'),
  regId: string(name='regId', position='Query'),
}

model CheckUsageVariableResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model CheckUsageVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckUsageVariableResponseBody(name='body'),
}

async function checkUsageVariable(request: CheckUsageVariableRequest): CheckUsageVariableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckUsageVariable', 'POST', '/', 'json', false, 'json', request);
}

model ClearNameListRequest {
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='regId', position='Query'),
  variableId: long(name='variableId', position='Query'),
}

model ClearNameListResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model ClearNameListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ClearNameListResponseBody(name='body'),
}

async function clearNameList(request: ClearNameListRequest): ClearNameListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ClearNameList', 'POST', '/', 'json', false, 'json', request);
}

model CreateAnalysisConditionFavoriteRequest {
  lang?: string(name='Lang', position='Query'),
  condition: string(name='condition', position='Query'),
  eventBeginTime: long(name='eventBeginTime', position='Query'),
  eventCodes: string(name='eventCodes', position='Query'),
  eventEndTime: long(name='eventEndTime', position='Query'),
  fieldName?: string(name='fieldName', position='Query'),
  fieldValue?: string(name='fieldValue', position='Query'),
  name: string(name='name', position='Query'),
  regId: string(name='regId', position='Query'),
  type: string(name='type', position='Query'),
}

model CreateAnalysisConditionFavoriteResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model CreateAnalysisConditionFavoriteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAnalysisConditionFavoriteResponseBody(name='body'),
}

async function createAnalysisConditionFavorite(request: CreateAnalysisConditionFavoriteRequest): CreateAnalysisConditionFavoriteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAnalysisConditionFavorite', 'POST', '/', 'json', false, 'json', request);
}

model CreateAnalysisExportTaskRequest {
  lang?: string(name='Lang', position='Query'),
  columns?: string(name='columns', position='Query'),
  conditions?: string(name='conditions', position='Query'),
  eventBeginTime: long(name='eventBeginTime', position='Query'),
  eventCodes: string(name='eventCodes', position='Query'),
  eventEndTime: long(name='eventEndTime', position='Query'),
  fieldName?: string(name='fieldName', position='Query'),
  fieldValue?: string(name='fieldValue', position='Query'),
  fileFormat: string(name='fileFormat', position='Query'),
  regId: string(name='regId', position='Query'),
  scope: string(name='scope', position='Query'),
  type: string(name='type', position='Query'),
}

model CreateAnalysisExportTaskResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: {
    columns?: string(name='columns'),
    conditions?: string(name='conditions'),
    eventBeginTime?: long(name='eventBeginTime'),
    eventCodes?: string(name='eventCodes'),
    eventEndTime?: long(name='eventEndTime'),
    fileFormat?: string(name='fileFormat'),
    ossKey?: string(name='ossKey'),
    scope?: string(name='scope'),
    status?: string(name='status'),
    type?: string(name='type'),
    userId?: long(name='userId'),
  }(name='resultObject'),
}

model CreateAnalysisExportTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAnalysisExportTaskResponseBody(name='body'),
}

async function createAnalysisExportTask(request: CreateAnalysisExportTaskRequest): CreateAnalysisExportTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAnalysisExportTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateAppKeyRequest {
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model CreateAppKeyResponseBody = {
  requestId?: string(name='RequestId'),
  data?: boolean(name='data'),
}

model CreateAppKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAppKeyResponseBody(name='body'),
}

async function createAppKey(request: CreateAppKeyRequest): CreateAppKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAppKey', 'POST', '/', 'json', false, 'json', request);
}

model CreateAuthorizationUserRequest {
  lang?: string(name='Lang', position='Query'),
  bindId?: long(name='bindId', position='Query'),
  createType?: string(name='createType', position='Query'),
  eventTemplateId?: long(name='eventTemplateId', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model CreateAuthorizationUserResponseBody = {
  requestId?: string(name='requestId'),
  resultObject?: boolean(name='resultObject'),
}

model CreateAuthorizationUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAuthorizationUserResponseBody(name='body'),
}

async function createAuthorizationUser(request: CreateAuthorizationUserRequest): CreateAuthorizationUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAuthorizationUser', 'POST', '/', 'json', false, 'json', request);
}

model CreateCustVariableRequest {
  lang?: string(name='Lang', position='Query'),
  condition?: string(name='condition', position='Query'),
  createType?: string(name='createType', position='Query'),
  description?: string(name='description', position='Query'),
  eventCodes: string(name='eventCodes', position='Query'),
  historyValueType?: string(name='historyValueType', position='Query'),
  object?: string(name='object', position='Query'),
  outputs?: string(name='outputs', position='Query'),
  regId?: string(name='regId', position='Query'),
  subject: string(name='subject', position='Query'),
  timeType: string(name='timeType', position='Query'),
  title: string(name='title', position='Query'),
  twCount?: int32(name='twCount', position='Query'),
  velocityFC: string(name='velocityFC', position='Query'),
  velocityTW: string(name='velocityTW', position='Query'),
}

model CreateCustVariableResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model CreateCustVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCustVariableResponseBody(name='body'),
}

async function createCustVariable(request: CreateCustVariableRequest): CreateCustVariableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCustVariable', 'POST', '/', 'json', false, 'json', request);
}

model CreateDataSourceRequest {
  lang?: string(name='Lang', position='Query'),
  description?: string(name='description', position='Query'),
  name: string(name='name', position='Query'),
  ossKey: string(name='ossKey', position='Query'),
  regId: string(name='regId', position='Query'),
  type: string(name='type', position='Query'),
}

model CreateDataSourceResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model CreateDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataSourceResponseBody(name='body'),
}

async function createDataSource(request: CreateDataSourceRequest): CreateDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDataSource', 'POST', '/', 'json', false, 'json', request);
}

model CreateEventRequest {
  lang?: string(name='Lang', position='Query'),
  createType?: string(name='createType', position='Query'),
  eventName?: string(name='eventName', position='Query'),
  inputFieldsStr?: string(name='inputFieldsStr', position='Query'),
  memo?: string(name='memo', position='Query'),
  regId?: string(name='regId', position='Query'),
  templateCode?: string(name='templateCode', position='Query'),
  templateName?: string(name='templateName', position='Query'),
  templateType?: string(name='templateType', position='Query'),
}

model CreateEventResponseBody = {
  data?: boolean(name='data'),
  requestId?: string(name='requestId'),
}

model CreateEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateEventResponseBody(name='body'),
}

async function createEvent(request: CreateEventRequest): CreateEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEvent', 'POST', '/', 'json', false, 'json', request);
}

model CreateExpressionVariableRequest {
  lang?: string(name='Lang', position='Query'),
  description?: string(name='description', position='Query'),
  eventCode: string(name='eventCode', position='Query'),
  expression: string(name='expression', position='Query'),
  expressionTitle: string(name='expressionTitle', position='Query'),
  expressionVariable?: string(name='expressionVariable', position='Query'),
  outlier: string(name='outlier', position='Query'),
  outputs: string(name='outputs', position='Query'),
  regId: string(name='regId', position='Query'),
  title: string(name='title', position='Query'),
}

model CreateExpressionVariableResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model CreateExpressionVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateExpressionVariableResponseBody(name='body'),
}

async function createExpressionVariable(request: CreateExpressionVariableRequest): CreateExpressionVariableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateExpressionVariable', 'POST', '/', 'json', false, 'json', request);
}

model CreateFieldRequest {
  lang?: string(name='Lang', position='Query'),
  classify?: string(name='classify', position='Query'),
  description?: string(name='description', position='Query'),
  enumData?: string(name='enumData', position='Query'),
  name?: string(name='name', position='Query'),
  regId: string(name='regId', position='Query'),
  source?: string(name='source', position='Query'),
  title?: string(name='title', position='Query'),
  type?: string(name='type', position='Query'),
}

model CreateFieldResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model CreateFieldResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFieldResponseBody(name='body'),
}

async function createField(request: CreateFieldRequest): CreateFieldResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateField', 'POST', '/', 'json', false, 'json', request);
}

model CreateGroupSignRequest {
  lang?: string(name='Lang', position='Query'),
  signList: string(name='SignList', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model CreateGroupSignResponseBody = {
  requestId?: string(name='RequestId'),
  data?: boolean(name='data'),
}

model CreateGroupSignResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateGroupSignResponseBody(name='body'),
}

async function createGroupSign(request: CreateGroupSignRequest): CreateGroupSignResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateGroupSign', 'POST', '/', 'json', false, 'json', request);
}

model CreateMonitorTaskRequest {
  lang?: string(name='Lang', position='Query'),
  bizType: string(name='bizType', position='Query'),
  cycleType: string(name='cycleType', position='Query'),
  endTime: long(name='endTime', position='Query'),
  filePath: string(name='filePath', position='Query'),
  listdayStr?: string(name='listdayStr', position='Query'),
  regId?: string(name='regId', position='Query'),
  startTime: long(name='startTime', position='Query'),
}

model CreateMonitorTaskResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model CreateMonitorTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMonitorTaskResponseBody(name='body'),
}

async function createMonitorTask(request: CreateMonitorTaskRequest): CreateMonitorTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateMonitorTask', 'POST', '/', 'json', false, 'json', request);
}

model CreatePocRequest {
  lang?: string(name='Lang', position='Query'),
  configStr?: string(name='configStr', position='Query'),
  fileName?: string(name='fileName', position='Query'),
  fileType?: string(name='fileType', position='Query'),
  fileUrl?: string(name='fileUrl', position='Query'),
  regId?: string(name='regId', position='Query'),
  serviceCode?: string(name='serviceCode', position='Query'),
  serviceName?: string(name='serviceName', position='Query'),
  taskName?: string(name='taskName', position='Query'),
}

model CreatePocResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model CreatePocResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePocResponseBody(name='body'),
}

async function createPoc(request: CreatePocRequest): CreatePocResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePoc', 'POST', '/', 'json', false, 'json', request);
}

model CreatePocEvRequest {
  dateFormat?: string(name='DateFormat', position='Query'),
  fileName?: string(name='FileName', position='Query'),
  fileType?: string(name='FileType', position='Query'),
  fileUrl?: string(name='FileUrl', position='Query'),
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='RegId', position='Query'),
  serviceCode?: string(name='ServiceCode', position='Query'),
  serviceName?: string(name='ServiceName', position='Query'),
  tab?: string(name='Tab', position='Query'),
  taskName?: string(name='TaskName', position='Query'),
  type?: string(name='Type', position='Query'),
}

model CreatePocEvResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  resultObject?: string(name='ResultObject'),
}

model CreatePocEvResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePocEvResponseBody(name='body'),
}

async function createPocEv(request: CreatePocEvRequest): CreatePocEvResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePocEv', 'POST', '/', 'json', false, 'json', request);
}

model CreateQueryVariableRequest {
  lang?: string(name='Lang', position='Query'),
  dataSourceCode: string(name='dataSourceCode', position='Query'),
  description?: string(name='description', position='Query'),
  eventCode: string(name='eventCode', position='Query'),
  expression: string(name='expression', position='Query'),
  expressionTitle: string(name='expressionTitle', position='Query'),
  expressionVariable: string(name='expressionVariable', position='Query'),
  outlier: string(name='outlier', position='Query'),
  outputs: string(name='outputs', position='Query'),
  regId: string(name='regId', position='Query'),
  title: string(name='title', position='Query'),
}

model CreateQueryVariableResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model CreateQueryVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateQueryVariableResponseBody(name='body'),
}

async function createQueryVariable(request: CreateQueryVariableRequest): CreateQueryVariableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateQueryVariable', 'POST', '/', 'json', false, 'json', request);
}

model CreateRecommendEventRuleRequest {
  lang?: string(name='Lang', position='Query'),
  eventCode?: string(name='eventCode', position='Query'),
  eventName?: string(name='eventName', position='Query'),
  recommendRuleIdsStr?: string(name='recommendRuleIdsStr', position='Query'),
  regId?: string(name='regId', position='Query'),
  taskId?: long(name='taskId', position='Query'),
}

model CreateRecommendEventRuleResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model CreateRecommendEventRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRecommendEventRuleResponseBody(name='body'),
}

async function createRecommendEventRule(request: CreateRecommendEventRuleRequest): CreateRecommendEventRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRecommendEventRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateRecommendTaskRequest {
  lang?: string(name='Lang', position='Query'),
  name: string(name='name', position='Query'),
  regId?: string(name='regId', position='Query'),
  sampleId: long(name='sampleId', position='Query'),
  variablesStr: string(name='variablesStr', position='Query'),
  velocitiesStr: string(name='velocitiesStr', position='Query'),
}

model CreateRecommendTaskResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model CreateRecommendTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRecommendTaskResponseBody(name='body'),
}

async function createRecommendTask(request: CreateRecommendTaskRequest): CreateRecommendTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRecommendTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateReplenishTaskRequest {
  clientFileName: string(name='ClientFileName', position='Query'),
  clientPath: string(name='ClientPath', position='Query'),
  lang?: string(name='Lang', position='Query'),
  taskId: string(name='TaskId', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model CreateReplenishTaskResponseBody = {
  requestId?: string(name='RequestId'),
  data?: boolean(name='data'),
}

model CreateReplenishTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateReplenishTaskResponseBody(name='body'),
}

async function createReplenishTask(request: CreateReplenishTaskRequest): CreateReplenishTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateReplenishTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateRuleRequest {
  lang?: string(name='Lang', position='Query'),
  consoleRuleId?: long(name='consoleRuleId', position='Query'),
  createType?: string(name='createType', position='Query'),
  eventCode?: string(name='eventCode', position='Query'),
  eventName?: string(name='eventName', position='Query'),
  logicExpression?: string(name='logicExpression', position='Query'),
  memo?: string(name='memo', position='Query'),
  regId?: string(name='regId', position='Query'),
  ruleActions?: string(name='ruleActions', position='Query'),
  ruleExpressions?: string(name='ruleExpressions', position='Query'),
  ruleName?: string(name='ruleName', position='Query'),
  ruleStatus?: string(name='ruleStatus', position='Query'),
}

model CreateRuleResponseBody = {
  requestId?: string(name='requestId'),
  resultObject?: boolean(name='resultObject'),
}

model CreateRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRuleResponseBody(name='body'),
}

async function createRule(request: CreateRuleRequest): CreateRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateSampleRequest {
  lang?: string(name='Lang', position='Query'),
  clientFileName?: string(name='clientFileName', position='Query'),
  clientPath?: string(name='clientPath', position='Query'),
  fileType?: string(name='fileType', position='Query'),
  regId?: string(name='regId', position='Query'),
  sampleTag?: string(name='sampleTag', position='Query'),
  sampleType?: string(name='sampleType', position='Query'),
  sampleValues?: string(name='sampleValues', position='Query'),
  uploadType?: string(name='uploadType', position='Query'),
}

model CreateSampleResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: {
    communityCount?: int32(name='communityCount'),
    failCount?: int32(name='failCount'),
    recallProbability?: string(name='recallProbability'),
    riskDensity?: string(name='riskDensity'),
    sampleCount?: int32(name='sampleCount'),
    successCount?: int32(name='successCount'),
  }(name='resultObject'),
}

model CreateSampleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSampleResponseBody(name='body'),
}

async function createSample(request: CreateSampleRequest): CreateSampleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSample', 'POST', '/', 'json', false, 'json', request);
}

model CreateSampleApiRequest {
  dataType?: string(name='DataType', example='ip/accountID', position='Query'),
  dataValue?: string(name='DataValue', position='Query'),
  lang?: string(name='Lang', example='zh', position='Query'),
  regId?: string(name='RegId', description='regionId', example='cn-shanghai', position='Query'),
  sampleBatchType?: string(name='SampleBatchType', position='Query'),
  serviceList?: string(name='ServiceList', position='Query'),
}

model CreateSampleApiResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='A32FE941-35F2-5378-B37C-4B8FDB16F094'),
}

model CreateSampleApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSampleApiResponseBody(name='body'),
}

async function createSampleApi(request: CreateSampleApiRequest): CreateSampleApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSampleApi', 'POST', '/', 'json', false, 'json', request);
}

model CreateSampleDataRequest {
  lang?: string(name='Lang', position='Query'),
  description?: string(name='description', position='Query'),
  encryptType?: string(name='encryptType', position='Query'),
  name?: string(name='name', position='Query'),
  regId?: string(name='regId', position='Query'),
  riskValue?: string(name='riskValue', position='Query'),
  scene?: string(name='scene', position='Query'),
  storePath?: string(name='storePath', position='Query'),
  storeType?: string(name='storeType', position='Query'),
}

model CreateSampleDataResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model CreateSampleDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSampleDataResponseBody(name='body'),
}

async function createSampleData(request: CreateSampleDataRequest): CreateSampleDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSampleData', 'POST', '/', 'json', false, 'json', request);
}

model CreateSimulationTaskRequest {
  lang?: string(name='Lang', position='Query'),
  dataSourceConfig?: string(name='dataSourceConfig', position='Query'),
  dataSourceType?: string(name='dataSourceType', position='Query'),
  endTime: long(name='endTime', position='Query'),
  eventCode: string(name='eventCode', position='Query'),
  filtersStr?: string(name='filtersStr', position='Query'),
  regId?: string(name='regId', position='Query'),
  rulesStr: string(name='rulesStr', position='Query'),
  runTask: boolean(name='runTask', position='Query'),
  startTime: long(name='startTime', position='Query'),
  taskName: string(name='taskName', position='Query'),
}

model CreateSimulationTaskResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model CreateSimulationTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSimulationTaskResponseBody(name='body'),
}

async function createSimulationTask(request: CreateSimulationTaskRequest): CreateSimulationTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSimulationTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateTaskRequest {
  clientFileName?: string(name='ClientFileName', position='Query'),
  clientPath?: string(name='ClientPath', position='Query'),
  describe?: string(name='Describe', position='Query'),
  lang?: string(name='Lang', position='Query'),
  sceneName?: string(name='SceneName', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model CreateTaskResponseBody = {
  requestId?: string(name='RequestId'),
  data?: boolean(name='data'),
}

model CreateTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTaskResponseBody(name='body'),
}

async function createTask(request: CreateTaskRequest): CreateTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateTemplateRequest {
  lang?: string(name='Lang', position='Query'),
  createType?: string(name='createType', position='Query'),
  eventCode?: string(name='eventCode', position='Query'),
  eventName?: string(name='eventName', position='Query'),
  logicExpression?: string(name='logicExpression', position='Query'),
  memo?: string(name='memo', position='Query'),
  regId?: string(name='regId', position='Query'),
  ruleActions?: string(name='ruleActions', position='Query'),
  ruleExpressions?: string(name='ruleExpressions', position='Query'),
  ruleName?: string(name='ruleName', position='Query'),
  ruleStatus?: string(name='ruleStatus', position='Query'),
}

model CreateTemplateResponseBody = {
  requestId?: string(name='requestId'),
  resultObject?: boolean(name='resultObject'),
}

model CreateTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTemplateResponseBody(name='body'),
}

async function createTemplate(request: CreateTemplateRequest): CreateTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTemplate', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAnalysisConditionFavoriteRequest {
  lang?: string(name='Lang', position='Query'),
  id: long(name='id', position='Query'),
  regId: string(name='regId', position='Query'),
}

model DeleteAnalysisConditionFavoriteResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model DeleteAnalysisConditionFavoriteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAnalysisConditionFavoriteResponseBody(name='body'),
}

async function deleteAnalysisConditionFavorite(request: DeleteAnalysisConditionFavoriteRequest): DeleteAnalysisConditionFavoriteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAnalysisConditionFavorite', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAuthUserRequest {
  lang?: string(name='Lang', position='Query'),
  createType?: string(name='createType', position='Query'),
  eventCode?: string(name='eventCode', position='Query'),
  id?: long(name='id', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DeleteAuthUserResponseBody = {
  requestId?: string(name='requestId'),
  resultObject?: boolean(name='resultObject'),
}

model DeleteAuthUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAuthUserResponseBody(name='body'),
}

async function deleteAuthUser(request: DeleteAuthUserRequest): DeleteAuthUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAuthUser', 'POST', '/', 'json', false, 'json', request);
}

model DeleteByPassShuntEventRequest {
  lang?: string(name='Lang', position='Query'),
  eventId?: long(name='eventId', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DeleteByPassShuntEventResponseBody = {
  code?: string(name='code'),
  httpStatusCode?: string(name='httpStatusCode'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  resultObject?: boolean(name='resultObject'),
  success?: boolean(name='success'),
}

model DeleteByPassShuntEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteByPassShuntEventResponseBody(name='body'),
}

async function deleteByPassShuntEvent(request: DeleteByPassShuntEventRequest): DeleteByPassShuntEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteByPassShuntEvent', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCustVariableRequest {
  lang?: string(name='Lang', position='Query'),
  createType?: string(name='createType', position='Query'),
  dataVersion?: long(name='dataVersion', position='Query'),
  regId?: string(name='regId', position='Query'),
  variableId?: string(name='variableId', position='Query'),
}

model DeleteCustVariableResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model DeleteCustVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCustVariableResponseBody(name='body'),
}

async function deleteCustVariable(request: DeleteCustVariableRequest): DeleteCustVariableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCustVariable', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDataSourceRequest {
  lang?: string(name='Lang', position='Query'),
  id: long(name='id', position='Query'),
  regId: string(name='regId', position='Query'),
}

model DeleteDataSourceResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model DeleteDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDataSourceResponseBody(name='body'),
}

async function deleteDataSource(request: DeleteDataSourceRequest): DeleteDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDataSource', 'POST', '/', 'json', false, 'json', request);
}

model DeleteExpressionVariableRequest {
  lang?: string(name='Lang', position='Query'),
  dataVersion: long(name='dataVersion', position='Query'),
  id: long(name='id', position='Query'),
  regId: string(name='regId', position='Query'),
}

model DeleteExpressionVariableResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model DeleteExpressionVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteExpressionVariableResponseBody(name='body'),
}

async function deleteExpressionVariable(request: DeleteExpressionVariableRequest): DeleteExpressionVariableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteExpressionVariable', 'POST', '/', 'json', false, 'json', request);
}

model DeleteFieldRequest {
  lang?: string(name='Lang', position='Query'),
  id?: long(name='id', position='Query'),
  name?: string(name='name', position='Query'),
  regId: string(name='regId', position='Query'),
}

model DeleteFieldResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model DeleteFieldResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFieldResponseBody(name='body'),
}

async function deleteField(request: DeleteFieldRequest): DeleteFieldResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteField', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNameListRequest {
  lang?: string(name='Lang', position='Query'),
  ids?: string(name='ids', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DeleteNameListResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model DeleteNameListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNameListResponseBody(name='body'),
}

async function deleteNameList(request: DeleteNameListRequest): DeleteNameListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNameList', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNameListDataRequest {
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='regId', position='Query'),
  variableId?: string(name='variableId', position='Query'),
}

model DeleteNameListDataResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model DeleteNameListDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNameListDataResponseBody(name='body'),
}

async function deleteNameListData(request: DeleteNameListDataRequest): DeleteNameListDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNameListData', 'POST', '/', 'json', false, 'json', request);
}

model DeleteQueryVariableRequest {
  lang?: string(name='Lang', position='Query'),
  id: long(name='id', position='Query'),
  regId: string(name='regId', position='Query'),
}

model DeleteQueryVariableResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model DeleteQueryVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteQueryVariableResponseBody(name='body'),
}

async function deleteQueryVariable(request: DeleteQueryVariableRequest): DeleteQueryVariableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteQueryVariable', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRuleRequest {
  lang?: string(name='Lang', position='Query'),
  consoleRuleId?: long(name='consoleRuleId', position='Query'),
  regId?: string(name='regId', position='Query'),
  ruleId?: string(name='ruleId', position='Query'),
  ruleVersionId?: long(name='ruleVersionId', position='Query'),
}

model DeleteRuleResponseBody = {
  requestId?: string(name='requestId'),
  resultObject?: boolean(name='resultObject'),
}

model DeleteRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRuleResponseBody(name='body'),
}

async function deleteRule(request: DeleteRuleRequest): DeleteRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSampleBatchRequest {
  lang?: string(name='Lang', position='Query'),
  ids?: string(name='ids', position='Query'),
  regId?: string(name='regId', position='Query'),
  versions: string(name='versions', position='Query'),
}

model DeleteSampleBatchResponseBody = {
  requestId?: string(name='RequestId'),
  data?: boolean(name='data'),
}

model DeleteSampleBatchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSampleBatchResponseBody(name='body'),
}

async function deleteSampleBatch(request: DeleteSampleBatchRequest): DeleteSampleBatchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSampleBatch', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSampleDataRequest {
  lang?: string(name='Lang', position='Query'),
  id?: string(name='id', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DeleteSampleDataResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model DeleteSampleDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSampleDataResponseBody(name='body'),
}

async function deleteSampleData(request: DeleteSampleDataRequest): DeleteSampleDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSampleData', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTaskRequest {
  lang?: string(name='Lang', position='Query'),
  taskId?: string(name='TaskId', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DeleteTaskResponseBody = {
  requestId?: string(name='RequestId'),
  data?: boolean(name='data'),
}

model DeleteTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTaskResponseBody(name='body'),
}

async function deleteTask(request: DeleteTaskRequest): DeleteTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTask', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAdvanceSearchLeftVariableListRequest {
  lang?: string(name='Lang', position='Query'),
  eventCodes: string(name='eventCodes', position='Query'),
  regId?: string(name='regId', position='Query'),
  scene: string(name='scene', position='Query'),
}

model DescribeAdvanceSearchLeftVariableListResponseBody = {
  requestId?: string(name='requestId'),
  resultObject?: [ 
    {
      code?: string(name='code'),
      description?: string(name='description'),
      displayType?: string(name='displayType'),
      fieldRank?: long(name='fieldRank'),
      fieldType?: string(name='fieldType'),
      id?: long(name='id'),
      name?: string(name='name'),
      parentName?: string(name='parentName'),
      sourceType?: string(name='sourceType'),
      title?: string(name='title'),
      type?: string(name='type'),
    }
  ](name='resultObject'),
}

model DescribeAdvanceSearchLeftVariableListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAdvanceSearchLeftVariableListResponseBody(name='body'),
}

async function describeAdvanceSearchLeftVariableList(request: DescribeAdvanceSearchLeftVariableListRequest): DescribeAdvanceSearchLeftVariableListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAdvanceSearchLeftVariableList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAdvanceSearchPageListRequest {
  lang?: string(name='Lang', position='Query'),
  condition?: string(name='condition', position='Query'),
  currentPage: long(name='currentPage', position='Query'),
  eventBeginTime: long(name='eventBeginTime', position='Query'),
  eventCodes: string(name='eventCodes', position='Query'),
  eventEndTime: long(name='eventEndTime', position='Query'),
  fieldName?: string(name='fieldName', position='Query'),
  fieldValue?: string(name='fieldValue', position='Query'),
  pageSize: long(name='pageSize', position='Query'),
  regId: string(name='regId', position='Query'),
}

model DescribeAdvanceSearchPageListResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: {
    currentPage?: long(name='currentPage'),
    data?: [  map[string]any ](name='data'),
    header?: [ 
      {
        fieldName?: string(name='fieldName'),
        fieldTitle?: string(name='fieldTitle'),
        isDefault?: boolean(name='isDefault'),
      }
    ](name='header'),
    pageSize?: long(name='pageSize'),
    totalItem?: long(name='totalItem'),
    totalPage?: long(name='totalPage'),
  }(name='resultObject'),
}

model DescribeAdvanceSearchPageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAdvanceSearchPageListResponseBody(name='body'),
}

async function describeAdvanceSearchPageList(request: DescribeAdvanceSearchPageListRequest): DescribeAdvanceSearchPageListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAdvanceSearchPageList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAllDataSourceRequest {
  lang?: string(name='Lang', position='Query'),
  regId: string(name='regId', position='Query'),
}

model DescribeAllDataSourceResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: [ 
    {
      eventCode?: string(name='eventCode'),
      eventName?: string(name='eventName'),
      id?: long(name='id'),
    }
  ](name='resultObject'),
}

model DescribeAllDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAllDataSourceResponseBody(name='body'),
}

async function describeAllDataSource(request: DescribeAllDataSourceRequest): DescribeAllDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAllDataSource', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAllEventNameAndCodeRequest {
  lang?: string(name='Lang', position='Query'),
  createType?: string(name='createType', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeAllEventNameAndCodeResponseBody = {
  code?: string(name='code'),
  httpStatusCode?: string(name='httpStatusCode'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  resultObject?: [ 
    {
      children?: [ 
        {
          createType?: string(name='createType'),
          eventCode?: string(name='eventCode'),
          eventName?: string(name='eventName'),
          eventType?: string(name='eventType'),
        }
      ](name='children'),
      createType?: string(name='createType'),
      eventCode?: string(name='eventCode'),
      eventName?: string(name='eventName'),
      eventType?: string(name='eventType'),
    }
  ](name='resultObject'),
  success?: boolean(name='success'),
}

model DescribeAllEventNameAndCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAllEventNameAndCodeResponseBody(name='body'),
}

async function describeAllEventNameAndCode(request: DescribeAllEventNameAndCodeRequest): DescribeAllEventNameAndCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAllEventNameAndCode', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAllRootVariableRequest {
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  deviceVariableIds?: string(name='deviceVariableIds', position='Query'),
  eventCode?: string(name='eventCode', position='Query'),
  expressionVariableIds?: string(name='expressionVariableIds', position='Query'),
  id?: long(name='id', position='Query'),
  nativeVariableIds?: string(name='nativeVariableIds', position='Query'),
  queryVariableIds?: string(name='queryVariableIds', position='Query'),
  regId?: string(name='regId', position='Query'),
  velocityVariableIds?: string(name='velocityVariableIds', position='Query'),
}

model DescribeAllRootVariableResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: [ 
    {
      code?: string(name='code'),
      description?: string(name='description'),
      displayType?: string(name='displayType'),
      favoriteFlag?: boolean(name='favoriteFlag'),
      fieldRank?: long(name='fieldRank'),
      fieldType?: string(name='fieldType'),
      id?: long(name='id'),
      inputFieldType?: string(name='inputFieldType'),
      inputs?: string(name='inputs'),
      name?: string(name='name'),
      outputThreshold?: {
        maxValue?: double(name='maxValue'),
        minValue?: double(name='minValue'),
      }(name='outputThreshold'),
      sourceType?: string(name='sourceType'),
      title?: string(name='title'),
      type?: string(name='type'),
    }
  ](name='resultObject'),
}

model DescribeAllRootVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAllRootVariableResponseBody(name='body'),
}

async function describeAllRootVariable(request: DescribeAllRootVariableRequest): DescribeAllRootVariableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAllRootVariable', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAnalysisColumnFieldListRequest {
  lang?: string(name='Lang', position='Query'),
  regId: string(name='regId', position='Query'),
}

model DescribeAnalysisColumnFieldListResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model DescribeAnalysisColumnFieldListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAnalysisColumnFieldListResponseBody(name='body'),
}

async function describeAnalysisColumnFieldList(request: DescribeAnalysisColumnFieldListRequest): DescribeAnalysisColumnFieldListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAnalysisColumnFieldList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAnalysisColumnListRequest {
  lang?: string(name='Lang', position='Query'),
  regId: string(name='regId', position='Query'),
}

model DescribeAnalysisColumnListResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: [ 
    {
      eventCode?: string(name='eventCode'),
      eventName?: string(name='eventName'),
      isDefault?: boolean(name='isDefault'),
      variableName?: string(name='variableName'),
      variableTitle?: string(name='variableTitle'),
      variableType?: string(name='variableType'),
    }
  ](name='resultObject'),
}

model DescribeAnalysisColumnListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAnalysisColumnListResponseBody(name='body'),
}

async function describeAnalysisColumnList(request: DescribeAnalysisColumnListRequest): DescribeAnalysisColumnListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAnalysisColumnList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAnalysisConditionFavoriteListRequest {
  lang?: string(name='Lang', position='Query'),
  regId: string(name='regId', position='Query'),
}

model DescribeAnalysisConditionFavoriteListResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: [ 
    {
      condition?: string(name='condition'),
      eventBeginTime?: long(name='eventBeginTime'),
      eventCodes?: string(name='eventCodes'),
      eventEndTime?: long(name='eventEndTime'),
      fieldName?: string(name='fieldName'),
      fieldValue?: string(name='fieldValue'),
      id?: long(name='id'),
      name?: string(name='name'),
      type?: string(name='type'),
    }
  ](name='resultObject'),
}

model DescribeAnalysisConditionFavoriteListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAnalysisConditionFavoriteListResponseBody(name='body'),
}

async function describeAnalysisConditionFavoriteList(request: DescribeAnalysisConditionFavoriteListRequest): DescribeAnalysisConditionFavoriteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAnalysisConditionFavoriteList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAnalysisExportTaskDownloadUrlRequest {
  lang?: string(name='Lang', position='Query'),
  regId: string(name='regId', position='Query'),
}

model DescribeAnalysisExportTaskDownloadUrlResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: {
    downloadFileUrl?: string(name='downloadFileUrl'),
    executeTime?: long(name='executeTime'),
    status?: string(name='status'),
  }(name='resultObject'),
}

model DescribeAnalysisExportTaskDownloadUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAnalysisExportTaskDownloadUrlResponseBody(name='body'),
}

async function describeAnalysisExportTaskDownloadUrl(request: DescribeAnalysisExportTaskDownloadUrlRequest): DescribeAnalysisExportTaskDownloadUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAnalysisExportTaskDownloadUrl', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiRequest {
  lang?: string(name='Lang', position='Query'),
  apiId: string(name='apiId', position='Query'),
  apiRegionId: string(name='apiRegionId', position='Query'),
  apiType: string(name='apiType', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeApiResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model DescribeApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApiResponseBody(name='body'),
}

async function describeApi(request: DescribeApiRequest): DescribeApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApi', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiGroupsRequest {
  lang?: string(name='Lang', position='Query'),
  apiRegionId: string(name='apiRegionId', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeApiGroupsResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model DescribeApiGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApiGroupsResponseBody(name='body'),
}

async function describeApiGroups(request: DescribeApiGroupsRequest): DescribeApiGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiGroups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiLimitRequest {
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeApiLimitResponseBody = {
  requestId?: string(name='requestId'),
  resultObject?: {
    limit?: boolean(name='limit'),
    maxTotalItem?: long(name='maxTotalItem'),
    totalItem?: long(name='totalItem'),
  }(name='resultObject'),
}

model DescribeApiLimitResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApiLimitResponseBody(name='body'),
}

async function describeApiLimit(request: DescribeApiLimitRequest): DescribeApiLimitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiLimit', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiNameListRequest {
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeApiNameListResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: [ 
    {
      apiId?: string(name='apiId'),
      apiName?: string(name='apiName'),
    }
  ](name='resultObject'),
}

model DescribeApiNameListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApiNameListResponseBody(name='body'),
}

async function describeApiNameList(request: DescribeApiNameListRequest): DescribeApiNameListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiNameList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiVariableRequest {
  lang?: string(name='Lang', position='Query'),
  id: string(name='id', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeApiVariableResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model DescribeApiVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApiVariableResponseBody(name='body'),
}

async function describeApiVariable(request: DescribeApiVariableRequest): DescribeApiVariableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiVariable', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApisRequest {
  lang?: string(name='Lang', position='Query'),
  apiGroupId: string(name='apiGroupId', position='Query'),
  apiRegionId: string(name='apiRegionId', position='Query'),
  apiType: string(name='apiType', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeApisResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model DescribeApisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApisResponseBody(name='body'),
}

async function describeApis(request: DescribeApisRequest): DescribeApisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApis', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAppKeyPageRequest {
  lang?: string(name='Lang', position='Query'),
  currentPage?: string(name='currentPage', position='Query'),
  pageSize?: string(name='pageSize', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeAppKeyPageResponseBody = {
  requestId?: string(name='RequestId'),
  currentPage?: int32(name='currentPage'),
  pageSize?: int32(name='pageSize'),
  resultObject?: [ 
    {
      androidSdkUrl?: string(name='androidSdkUrl'),
      androidSdkVersion?: string(name='androidSdkVersion'),
      appKey?: string(name='appKey'),
      gmtCreate?: long(name='gmtCreate'),
      iosSdkUrl?: string(name='iosSdkUrl'),
      iosSdkVersion?: string(name='iosSdkVersion'),
      memo?: string(name='memo'),
      sdkItems?: string(name='sdkItems'),
      used?: string(name='used'),
    }
  ](name='resultObject'),
  totalItem?: int32(name='totalItem'),
  totalPage?: int32(name='totalPage'),
}

model DescribeAppKeyPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAppKeyPageResponseBody(name='body'),
}

async function describeAppKeyPage(request: DescribeAppKeyPageRequest): DescribeAppKeyPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAppKeyPage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAuditConfigRequest {
  lang?: string(name='Lang', position='Query'),
  auditRelationType?: string(name='auditRelationType', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeAuditConfigResponseBody = {
  code?: string(name='code'),
  httpStatusCode?: string(name='httpStatusCode'),
  message?: string(name='message'),
  resultObject?: boolean(name='resultObject'),
  success?: boolean(name='success'),
}

model DescribeAuditConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAuditConfigResponseBody(name='body'),
}

async function describeAuditConfig(request: DescribeAuditConfigRequest): DescribeAuditConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAuditConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAuditDetailsRequest {
  lang?: string(name='Lang', position='Query'),
  id: long(name='id', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeAuditDetailsResponseBody = {
  code?: string(name='code'),
  httpStatusCode?: string(name='httpStatusCode'),
  message?: string(name='message'),
  resultObject?: boolean(name='resultObject'),
  success?: boolean(name='success'),
}

model DescribeAuditDetailsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAuditDetailsResponseBody(name='body'),
}

async function describeAuditDetails(request: DescribeAuditDetailsRequest): DescribeAuditDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAuditDetails', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAuditPageListRequest {
  lang?: string(name='Lang', position='Query'),
  auditStatus?: string(name='auditStatus', position='Query'),
  currentPage?: string(name='currentPage', position='Query'),
  eventCode?: string(name='eventCode', position='Query'),
  pageSize?: string(name='pageSize', position='Query'),
  regId?: string(name='regId', position='Query'),
  ruleName?: string(name='ruleName', position='Query'),
}

model DescribeAuditPageListResponseBody = {
  currentPage?: int32(name='currentPage'),
  pageSize?: int32(name='pageSize'),
  requestId?: string(name='requestId'),
  resultObject?: boolean(name='resultObject'),
  totalItem?: int32(name='totalItem'),
  totalPage?: long(name='totalPage'),
}

model DescribeAuditPageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAuditPageListResponseBody(name='body'),
}

async function describeAuditPageList(request: DescribeAuditPageListRequest): DescribeAuditPageListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAuditPageList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAuthEventNameListRequest {
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeAuthEventNameListResponseBody = {
  requestId?: string(name='requestId'),
  resultObject?: boolean(name='resultObject'),
}

model DescribeAuthEventNameListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAuthEventNameListResponseBody(name='body'),
}

async function describeAuthEventNameList(request: DescribeAuthEventNameListRequest): DescribeAuthEventNameListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAuthEventNameList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAuthRulePageListRequest {
  lang?: string(name='Lang', position='Query'),
  eventCode?: string(name='eventCode', position='Query'),
  regId: string(name='regId', position='Query'),
  ruleName?: string(name='ruleName', position='Query'),
  status?: string(name='status', position='Query'),
}

model DescribeAuthRulePageListResponseBody = {
  requestId?: string(name='RequestId'),
  currentPage?: long(name='currentPage'),
  pageSize?: long(name='pageSize'),
  resultObject?: [ 
    {
      consoleRuleId?: long(name='consoleRuleId'),
      createType?: string(name='createType'),
      gmtModified?: long(name='gmtModified'),
      id?: long(name='id'),
      memo?: string(name='memo'),
      ruleId?: string(name='ruleId'),
      ruleName?: string(name='ruleName'),
      ruleVersionId?: long(name='ruleVersionId'),
      status?: string(name='status'),
      version?: long(name='version'),
    }
  ](name='resultObject'),
  totalItem?: long(name='totalItem'),
  totalPage?: long(name='totalPage'),
}

model DescribeAuthRulePageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAuthRulePageListResponseBody(name='body'),
}

async function describeAuthRulePageList(request: DescribeAuthRulePageListRequest): DescribeAuthRulePageListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAuthRulePageList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAuthSceneListRequest {
  lang?: string(name='Lang', position='Query'),
  regId: string(name='regId', position='Query'),
}

model DescribeAuthSceneListResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: [ 
    {
      serviceCode?: string(name='serviceCode'),
    }
  ](name='resultObject'),
}

model DescribeAuthSceneListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAuthSceneListResponseBody(name='body'),
}

async function describeAuthSceneList(request: DescribeAuthSceneListRequest): DescribeAuthSceneListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAuthSceneList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAuthScenePageListRequest {
  lang?: string(name='Lang', position='Query'),
  regId: string(name='regId', position='Query'),
  sceneName?: string(name='sceneName', position='Query'),
}

model DescribeAuthScenePageListResponseBody = {
  requestId?: string(name='RequestId'),
  currentPage?: long(name='currentPage'),
  pageSize?: long(name='pageSize'),
  resultObject?: [ 
    {
      commonRuleCount?: long(name='commonRuleCount'),
      customRuleCount?: long(name='customRuleCount'),
      eventCode?: string(name='eventCode'),
      sceneName?: string(name='sceneName'),
      serverName?: string(name='serverName'),
    }
  ](name='resultObject'),
  totalItem?: long(name='totalItem'),
  totalPage?: long(name='totalPage'),
}

model DescribeAuthScenePageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAuthScenePageListResponseBody(name='body'),
}

async function describeAuthScenePageList(request: DescribeAuthScenePageListRequest): DescribeAuthScenePageListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAuthScenePageList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAuthStatusRequest {
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeAuthStatusResponseBody = {
  requestId?: string(name='requestId'),
  resultObject?: boolean(name='resultObject'),
}

model DescribeAuthStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAuthStatusResponseBody(name='body'),
}

async function describeAuthStatus(request: DescribeAuthStatusRequest): DescribeAuthStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAuthStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAvgExecuteCostReportRequest {
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeAvgExecuteCostReportResponseBody = {
  code?: string(name='code'),
  httpStatusCode?: string(name='httpStatusCode'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  resultObject?: [ 
    {
      ratio?: string(name='ratio'),
      value?: string(name='value'),
    }
  ](name='resultObject'),
  success?: boolean(name='success'),
}

model DescribeAvgExecuteCostReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAvgExecuteCostReportResponseBody(name='body'),
}

async function describeAvgExecuteCostReport(request: DescribeAvgExecuteCostReportRequest): DescribeAvgExecuteCostReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAvgExecuteCostReport', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBasicSearchPageListRequest {
  lang?: string(name='Lang', position='Query'),
  currentPage: long(name='currentPage', position='Query'),
  eventBeginTime: long(name='eventBeginTime', position='Query'),
  eventCodes: string(name='eventCodes', position='Query'),
  eventEndTime: long(name='eventEndTime', position='Query'),
  fieldName?: string(name='fieldName', position='Query'),
  fieldValue?: string(name='fieldValue', position='Query'),
  pageSize: long(name='pageSize', position='Query'),
  regId: string(name='regId', position='Query'),
}

model DescribeBasicSearchPageListResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: {
    currentPage?: long(name='currentPage'),
    data?: [  map[string]any ](name='data'),
    header?: [ 
      {
        fieldName?: string(name='fieldName'),
        fieldTitle?: string(name='fieldTitle'),
        isDefault?: boolean(name='isDefault'),
      }
    ](name='header'),
    pageSize?: long(name='pageSize'),
    totalItem?: long(name='totalItem'),
    totalPage?: long(name='totalPage'),
  }(name='resultObject'),
}

model DescribeBasicSearchPageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeBasicSearchPageListResponseBody(name='body'),
}

async function describeBasicSearchPageList(request: DescribeBasicSearchPageListRequest): DescribeBasicSearchPageListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBasicSearchPageList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBasicStartRequest {
  appKey?: string(name='appKey', position='Query'),
  endDs?: string(name='endDs', position='Query'),
  regId?: string(name='regId', position='Query'),
  service?: string(name='service', position='Query'),
  startDs?: string(name='startDs', position='Query'),
}

model DescribeBasicStartResponseBody = {
  code?: string(name='code'),
  httpStatusCode?: string(name='httpStatusCode'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  resultObject?: boolean(name='resultObject'),
  success?: boolean(name='success'),
}

model DescribeBasicStartResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeBasicStartResponseBody(name='body'),
}

async function describeBasicStart(request: DescribeBasicStartRequest): DescribeBasicStartResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBasicStart', 'POST', '/', 'json', false, 'json', request);
}

model DescribeByPassShuntEventRequest {
  lang?: string(name='Lang', position='Query'),
  eventId?: long(name='eventId', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeByPassShuntEventResponseBody = {
  code?: string(name='code'),
  httpStatusCode?: string(name='httpStatusCode'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  resultObject?: {
    eventName?: string(name='eventName'),
  }(name='resultObject'),
  success?: boolean(name='success'),
}

model DescribeByPassShuntEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeByPassShuntEventResponseBody(name='body'),
}

async function describeByPassShuntEvent(request: DescribeByPassShuntEventRequest): DescribeByPassShuntEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeByPassShuntEvent', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCustVariableConfigListRequest {
  lang?: string(name='Lang', position='Query'),
  bizType: string(name='bizType', position='Query'),
  regId?: string(name='regId', position='Query'),
  timeType?: string(name='timeType', position='Query'),
}

model DescribeCustVariableConfigListResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: [ 
    {
      configKey?: string(name='configKey'),
      configValue?: string(name='configValue'),
    }
  ](name='resultObject'),
}

model DescribeCustVariableConfigListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCustVariableConfigListResponseBody(name='body'),
}

async function describeCustVariableConfigList(request: DescribeCustVariableConfigListRequest): DescribeCustVariableConfigListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCustVariableConfigList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCustVariableDetailRequest {
  lang?: string(name='Lang', position='Query'),
  id: long(name='id', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeCustVariableDetailResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: [ 
    {
      condition?: string(name='condition'),
      dataVersion?: long(name='dataVersion'),
      description?: string(name='description'),
      eventCodes?: string(name='eventCodes'),
      historyValueType?: string(name='historyValueType'),
      id?: long(name='id'),
      object?: string(name='object'),
      outputs?: string(name='outputs'),
      subject?: string(name='subject'),
      timeType?: string(name='timeType'),
      title?: string(name='title'),
      twCount?: string(name='twCount'),
      velocityFC?: string(name='velocityFC'),
      velocityTW?: string(name='velocityTW'),
    }
  ](name='resultObject'),
}

model DescribeCustVariableDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCustVariableDetailResponseBody(name='body'),
}

async function describeCustVariableDetail(request: DescribeCustVariableDetailRequest): DescribeCustVariableDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCustVariableDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCustVariablePageRequest {
  lang?: string(name='Lang', position='Query'),
  createType?: string(name='createType', position='Query'),
  currentPage?: int32(name='currentPage', position='Query'),
  description?: string(name='description', position='Query'),
  eventCode?: string(name='eventCode', position='Query'),
  pageSize?: int32(name='pageSize', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeCustVariablePageResponseBody = {
  requestId?: string(name='RequestId'),
  currentPage?: int32(name='currentPage'),
  pageSize?: int32(name='pageSize'),
  resultObject?: [ 
    {
      dataVersion?: long(name='dataVersion'),
      description?: string(name='description'),
      gmtModified?: long(name='gmtModified'),
      id?: long(name='id'),
      name?: string(name='name'),
      status?: string(name='status'),
      title?: string(name='title'),
    }
  ](name='resultObject'),
  totalItem?: int32(name='totalItem'),
  totalPage?: int32(name='totalPage'),
}

model DescribeCustVariablePageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCustVariablePageResponseBody(name='body'),
}

async function describeCustVariablePage(request: DescribeCustVariablePageRequest): DescribeCustVariablePageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCustVariablePage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDataSourceDataDownloadUrlRequest {
  lang?: string(name='Lang', position='Query'),
  dataSourceId: long(name='dataSourceId', position='Query'),
  regId: string(name='regId', position='Query'),
}

model DescribeDataSourceDataDownloadUrlResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: {
    downloadFileUrl?: string(name='downloadFileUrl'),
  }(name='resultObject'),
}

model DescribeDataSourceDataDownloadUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDataSourceDataDownloadUrlResponseBody(name='body'),
}

async function describeDataSourceDataDownloadUrl(request: DescribeDataSourceDataDownloadUrlRequest): DescribeDataSourceDataDownloadUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDataSourceDataDownloadUrl', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDataSourceFieldsRequest {
  lang?: string(name='Lang', position='Query'),
  dataSourceCode: string(name='dataSourceCode', position='Query'),
  regId: string(name='regId', position='Query'),
}

model DescribeDataSourceFieldsResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model DescribeDataSourceFieldsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDataSourceFieldsResponseBody(name='body'),
}

async function describeDataSourceFields(request: DescribeDataSourceFieldsRequest): DescribeDataSourceFieldsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDataSourceFields', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDataSourcePageListRequest {
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  currentPage?: long(name='currentPage', position='Query'),
  name?: string(name='name', position='Query'),
  pageSize?: long(name='pageSize', position='Query'),
  regId?: string(name='regId', position='Query'),
  type?: string(name='type', position='Query'),
}

model DescribeDataSourcePageListResponseBody = {
  requestId?: string(name='RequestId'),
  currentPage?: int32(name='currentPage'),
  pageSize?: int32(name='pageSize'),
  resultObject?: [ 
    {
      creator?: string(name='creator'),
      description?: string(name='description'),
      gmtCreate?: string(name='gmtCreate'),
      gmtModified?: string(name='gmtModified'),
      id?: long(name='id'),
      modifier?: string(name='modifier'),
      name?: string(name='name'),
      total?: long(name='total'),
      type?: string(name='type'),
    }
  ](name='resultObject'),
  totalItem?: int32(name='totalItem'),
  totalPage?: int32(name='totalPage'),
}

model DescribeDataSourcePageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDataSourcePageListResponseBody(name='body'),
}

async function describeDataSourcePageList(request: DescribeDataSourcePageListRequest): DescribeDataSourcePageListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDataSourcePageList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDecisionResultFluctuationRequest {
  lang?: string(name='Lang', position='Query'),
  eventCodes?: string(name='eventCodes', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeDecisionResultFluctuationResponseBody = {
  code?: string(name='code'),
  httpStatusCode?: string(name='httpStatusCode'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  resultObject?: [ 
    {
      status?: string(name='status'),
      todayNum?: long(name='todayNum'),
      withinSevenDayNum?: string(name='withinSevenDayNum'),
      withinThirtyDayNum?: string(name='withinThirtyDayNum'),
      withinThreeDayNum?: string(name='withinThreeDayNum'),
      yesterdayNum?: long(name='yesterdayNum'),
    }
  ](name='resultObject'),
  success?: boolean(name='success'),
}

model DescribeDecisionResultFluctuationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDecisionResultFluctuationResponseBody(name='body'),
}

async function describeDecisionResultFluctuation(request: DescribeDecisionResultFluctuationRequest): DescribeDecisionResultFluctuationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDecisionResultFluctuation', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDecisionResultTrendRequest {
  lang?: string(name='Lang', position='Query'),
  beginTime?: long(name='beginTime', position='Query'),
  endTime?: long(name='endTime', position='Query'),
  eventCodes?: string(name='eventCodes', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeDecisionResultTrendResponseBody = {
  code?: string(name='code'),
  httpStatusCode?: string(name='httpStatusCode'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  resultObject?: {
    series?: [ 
      {
        data?: [ 
          {
            num?: long(name='num'),
            scale?: string(name='scale'),
          }
        ](name='data'),
        name?: string(name='name'),
      }
    ](name='series'),
    xaxis?: {
      data?: [ string ](name='data'),
    }(name='xaxis'),
  }(name='resultObject'),
  success?: boolean(name='success'),
}

model DescribeDecisionResultTrendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDecisionResultTrendResponseBody(name='body'),
}

async function describeDecisionResultTrend(request: DescribeDecisionResultTrendRequest): DescribeDecisionResultTrendResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDecisionResultTrend', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDetailStartRequest {
  appKey?: string(name='appKey', position='Query'),
  endDs?: string(name='endDs', position='Query'),
  regId?: string(name='regId', position='Query'),
  service?: string(name='service', position='Query'),
  startDs?: string(name='startDs', position='Query'),
}

model DescribeDetailStartResponseBody = {
  code?: string(name='code'),
  httpStatusCode?: string(name='httpStatusCode'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  resultObject?: boolean(name='resultObject'),
  success?: boolean(name='success'),
}

model DescribeDetailStartResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDetailStartResponseBody(name='body'),
}

async function describeDetailStart(request: DescribeDetailStartRequest): DescribeDetailStartResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDetailStart', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDownloadUrlRequest {
  fileType?: string(name='FileType', position='Query'),
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='RegId', position='Query'),
  taskId?: long(name='TaskId', position='Query'),
  type?: string(name='Type', position='Query'),
}

model DescribeDownloadUrlResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: string(name='resultObject'),
}

model DescribeDownloadUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDownloadUrlResponseBody(name='body'),
}

async function describeDownloadUrl(request: DescribeDownloadUrlRequest): DescribeDownloadUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDownloadUrl', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEventBaseInfoByEventCodeRequest {
  lang?: string(name='Lang', position='Query'),
  createType?: string(name='createType', position='Query'),
  eventCode?: string(name='eventCode', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeEventBaseInfoByEventCodeResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: {
    bizVersion?: int32(name='bizVersion'),
    eventCode?: string(name='eventCode'),
    eventName?: string(name='eventName'),
    eventStauts?: string(name='eventStauts'),
    inputFields?: [ 
      {
        description?: string(name='description'),
        fieldCode?: string(name='fieldCode'),
        fieldRank?: string(name='fieldRank'),
        fieldSource?: string(name='fieldSource'),
        fieldType?: string(name='fieldType'),
        title?: string(name='title'),
      }
    ](name='inputFields'),
    memo?: string(name='memo'),
    ruleDetails?: [ 
      {
        logicExpression?: string(name='logicExpression'),
        memo?: string(name='memo'),
        ruleActions?: string(name='ruleActions'),
        ruleAuthType?: string(name='ruleAuthType'),
        ruleExpressions?: string(name='ruleExpressions'),
        ruleId?: string(name='ruleId'),
        ruleName?: string(name='ruleName'),
        ruleStatus?: string(name='ruleStatus'),
      }
    ](name='ruleDetails'),
    templateCode?: string(name='templateCode'),
    templateName?: string(name='templateName'),
    templateType?: string(name='templateType'),
  }(name='resultObject'),
}

model DescribeEventBaseInfoByEventCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEventBaseInfoByEventCodeResponseBody(name='body'),
}

async function describeEventBaseInfoByEventCode(request: DescribeEventBaseInfoByEventCodeRequest): DescribeEventBaseInfoByEventCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEventBaseInfoByEventCode', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEventCountRequest {
  lang?: string(name='Lang', position='Query'),
  createType?: string(name='createType', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeEventCountResponseBody = {
  code?: string(name='code'),
  httpStatusCode?: string(name='httpStatusCode'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  resultObject?: {
    limit?: boolean(name='limit'),
    maxTotalItem?: int32(name='maxTotalItem'),
    totalItem?: int32(name='totalItem'),
  }(name='resultObject'),
  success?: boolean(name='success'),
}

model DescribeEventCountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEventCountResponseBody(name='body'),
}

async function describeEventCount(request: DescribeEventCountRequest): DescribeEventCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEventCount', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEventDetailByRequestIdRequest {
  lang?: string(name='Lang', position='Query'),
  eventCode?: string(name='eventCode', position='Query'),
  eventTime?: long(name='eventTime', position='Query'),
  regId: string(name='regId', position='Query'),
  sRequestId: string(name='sRequestId', position='Query'),
}

model DescribeEventDetailByRequestIdResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model DescribeEventDetailByRequestIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEventDetailByRequestIdResponseBody(name='body'),
}

async function describeEventDetailByRequestId(request: DescribeEventDetailByRequestIdRequest): DescribeEventDetailByRequestIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEventDetailByRequestId', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEventLogDetailRequest {
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='regId', position='Query'),
  reqIdByLog: string(name='reqIdByLog', position='Query'),
}

model DescribeEventLogDetailResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model DescribeEventLogDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEventLogDetailResponseBody(name='body'),
}

async function describeEventLogDetail(request: DescribeEventLogDetailRequest): DescribeEventLogDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEventLogDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEventLogPageRequest {
  lang?: string(name='Lang', position='Query'),
  accountIdPRP?: string(name='accountIdPRP', position='Query'),
  beginTime?: long(name='beginTime', position='Query'),
  condition1AL?: string(name='condition1AL', position='Query'),
  condition2AL?: string(name='condition2AL', position='Query'),
  condition3AL?: string(name='condition3AL', position='Query'),
  currentPage?: int32(name='currentPage', position='Query'),
  deviceTypeLRP?: string(name='deviceTypeLRP', position='Query'),
  emailPRP?: string(name='emailPRP', position='Query'),
  endTime?: long(name='endTime', position='Query'),
  failReasonLRP?: string(name='failReasonLRP', position='Query'),
  ipPRP?: string(name='ipPRP', position='Query'),
  loginResultARP?: string(name='loginResultARP', position='Query'),
  loginTypeLRP?: string(name='loginTypeLRP', position='Query'),
  macPRP?: string(name='macPRP', position='Query'),
  mobilePRP?: string(name='mobilePRP', position='Query'),
  nickNamePRP?: string(name='nickNamePRP', position='Query'),
  operateSourceLRP?: string(name='operateSourceLRP', position='Query'),
  pageSize?: int32(name='pageSize', position='Query'),
  referPRP?: string(name='referPRP', position='Query'),
  regId?: string(name='regId', position='Query'),
  registerIpPRP?: string(name='registerIpPRP', position='Query'),
  reqIdPBS?: string(name='reqIdPBS', position='Query'),
  scoreEBS?: int32(name='scoreEBS', position='Query'),
  scoreSBS?: int32(name='scoreSBS', position='Query'),
  serviceABS?: string(name='serviceABS', position='Query'),
  tagsLBS?: string(name='tagsLBS', position='Query'),
  umidPDI?: string(name='umidPDI', position='Query'),
  userAgentPRP?: string(name='userAgentPRP', position='Query'),
  userNameTypeLRP?: string(name='userNameTypeLRP', position='Query'),
}

model DescribeEventLogPageResponseBody = {
  requestId?: string(name='RequestId'),
  currentPage?: int32(name='currentPage'),
  pageSize?: int32(name='pageSize'),
  resultObject?: [ 
    {
      accountId?: string(name='accountId'),
      email?: string(name='email'),
      ip?: string(name='ip'),
      mobile?: string(name='mobile'),
      nickName?: string(name='nickName'),
      requestId?: string(name='requestId'),
      score?: string(name='score'),
      service?: string(name='service'),
      tags?: string(name='tags'),
      timestamp?: string(name='timestamp'),
      umid?: string(name='umid'),
    }
  ](name='resultObject'),
  totalItem?: int32(name='totalItem'),
  totalPage?: int32(name='totalPage'),
}

model DescribeEventLogPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEventLogPageResponseBody(name='body'),
}

async function describeEventLogPage(request: DescribeEventLogPageRequest): DescribeEventLogPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEventLogPage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEventPageListRequest {
  lang?: string(name='Lang', position='Query'),
  createType?: string(name='createType', position='Query'),
  currentPage?: int32(name='currentPage', position='Query'),
  eventCode?: string(name='eventCode', position='Query'),
  eventName?: string(name='eventName', position='Query'),
  eventStatus?: string(name='eventStatus', position='Query'),
  pageSize?: int32(name='pageSize', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeEventPageListResponseBody = {
  requestId?: string(name='RequestId'),
  currentPage?: int32(name='currentPage'),
  pageSize?: int32(name='pageSize'),
  resultObject?: [ 
    {
      children?: [ 
        {
          eventCode?: string(name='eventCode'),
          eventName?: string(name='eventName'),
          eventStatus?: string(name='eventStatus'),
          eventType?: string(name='eventType'),
          gmtCreate?: long(name='gmtCreate'),
          gmtModified?: long(name='gmtModified'),
          id?: long(name='id'),
          ruleCount?: long(name='ruleCount'),
        }
      ](name='children'),
      eventCode?: string(name='eventCode'),
      eventName?: string(name='eventName'),
      eventStatus?: string(name='eventStatus'),
      eventType?: string(name='eventType'),
      gmtCreate?: long(name='gmtCreate'),
      gmtModified?: long(name='gmtModified'),
      id?: long(name='id'),
      ruleCount?: int32(name='ruleCount'),
      templateCode?: string(name='templateCode'),
      templateName?: string(name='templateName'),
      templateType?: string(name='templateType'),
      userCount?: int32(name='userCount'),
    }
  ](name='resultObject'),
  totalItem?: int32(name='totalItem'),
  totalPage?: int32(name='totalPage'),
}

model DescribeEventPageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEventPageListResponseBody(name='body'),
}

async function describeEventPageList(request: DescribeEventPageListRequest): DescribeEventPageListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEventPageList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEventResultBarChartRequest {
  lang?: string(name='Lang', position='Query'),
  beginTime: long(name='beginTime', position='Query'),
  endTime: long(name='endTime', position='Query'),
  eventCodes?: string(name='eventCodes', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeEventResultBarChartResponseBody = {
  code?: string(name='code'),
  httpStatusCode?: string(name='httpStatusCode'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  resultObject?: {
    series?: [ 
      {
        data?: [ 
          {
            num?: long(name='num'),
            scale?: string(name='scale'),
          }
        ](name='data'),
        name?: string(name='name'),
        stack?: string(name='stack'),
      }
    ](name='series'),
    xaxis?: {
      data?: [ string ](name='data'),
    }(name='xaxis'),
  }(name='resultObject'),
  success?: boolean(name='success'),
}

model DescribeEventResultBarChartResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEventResultBarChartResponseBody(name='body'),
}

async function describeEventResultBarChart(request: DescribeEventResultBarChartRequest): DescribeEventResultBarChartResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEventResultBarChart', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEventResultListRequest {
  lang?: string(name='Lang', position='Query'),
  beginTime: long(name='beginTime', position='Query'),
  currentPage?: long(name='currentPage', position='Query'),
  endTime: long(name='endTime', position='Query'),
  pageSize?: long(name='pageSize', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeEventResultListResponseBody = {
  code?: string(name='code'),
  currentPage?: long(name='currentPage'),
  httpStatusCode?: string(name='httpStatusCode'),
  message?: string(name='message'),
  pageSize?: long(name='pageSize'),
  requestId?: string(name='requestId'),
  resultObject?: [ 
    {
      eventCode?: string(name='eventCode'),
      eventName?: string(name='eventName'),
      passNum?: long(name='passNum'),
      pendingNum?: long(name='pendingNum'),
      rejectNum?: long(name='rejectNum'),
      totalNum?: long(name='totalNum'),
    }
  ](name='resultObject'),
  success?: boolean(name='success'),
  totalItem?: long(name='totalItem'),
  totalPage?: long(name='totalPage'),
}

model DescribeEventResultListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEventResultListResponseBody(name='body'),
}

async function describeEventResultList(request: DescribeEventResultListRequest): DescribeEventResultListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEventResultList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEventTaskHistoryRequest {
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeEventTaskHistoryResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: [ 
    {
      taskCode?: string(name='taskCode'),
      taskName?: string(name='taskName'),
      taskStatus?: string(name='taskStatus'),
      url?: string(name='url'),
    }
  ](name='resultObject'),
}

model DescribeEventTaskHistoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEventTaskHistoryResponseBody(name='body'),
}

async function describeEventTaskHistory(request: DescribeEventTaskHistoryRequest): DescribeEventTaskHistoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEventTaskHistory', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEventTotalCountReportRequest {
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeEventTotalCountReportResponseBody = {
  code?: string(name='code'),
  httpStatusCode?: string(name='httpStatusCode'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  resultObject?: {
    ratio?: string(name='ratio'),
    value?: string(name='value'),
  }(name='resultObject'),
  success?: boolean(name='success'),
}

model DescribeEventTotalCountReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEventTotalCountReportResponseBody(name='body'),
}

async function describeEventTotalCountReport(request: DescribeEventTotalCountReportRequest): DescribeEventTotalCountReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEventTotalCountReport', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEventUploadPolicyRequest {
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeEventUploadPolicyResponseBody = {
  accessId?: string(name='AccessId'),
  host?: string(name='Host'),
  key?: string(name='Key'),
  policy?: string(name='Policy'),
  requestId?: string(name='RequestId'),
  signature?: string(name='Signature'),
  stsToken?: string(name='StsToken'),
}

model DescribeEventUploadPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEventUploadPolicyResponseBody(name='body'),
}

async function describeEventUploadPolicy(request: DescribeEventUploadPolicyRequest): DescribeEventUploadPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEventUploadPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEventVariableListRequest {
  lang?: string(name='Lang', position='Query'),
  createType?: string(name='createType', position='Query'),
  filterDTO?: string(name='filterDTO', position='Query'),
  refObjId: string(name='refObjId', position='Query'),
  refObjType: string(name='refObjType', position='Query'),
  regId?: string(name='regId', position='Query'),
  type?: string(name='type', position='Query'),
}

model DescribeEventVariableListResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: {
    actions?: [ 
      {
        code?: string(name='code'),
        dataDisplay?: string(name='dataDisplay'),
        defineId?: string(name='defineId'),
        description?: string(name='description'),
        displayType?: string(name='displayType'),
        expressionTitle?: string(name='expressionTitle'),
        favoriteFlag?: boolean(name='favoriteFlag'),
        fieldDetail?: string(name='fieldDetail'),
        fieldRank?: int32(name='fieldRank'),
        fieldSource?: string(name='fieldSource'),
        fieldType?: string(name='fieldType'),
        id?: long(name='id'),
        inputFieldType?: string(name='inputFieldType'),
        inputRequired?: string(name='inputRequired'),
        inputs?: string(name='inputs'),
        name?: string(name='name'),
        outlier?: string(name='outlier'),
        outputThreshold?: {
          maxValue?: double(name='maxValue'),
          minValue?: double(name='minValue'),
        }(name='outputThreshold'),
        parentName?: string(name='parentName'),
        sourceType?: string(name='sourceType'),
        title?: string(name='title'),
        type?: string(name='type'),
        variableVelocity?: {
          iv?: string(name='iv'),
        }(name='variableVelocity'),
        xLabel?: string(name='xLabel'),
        yLabel?: string(name='yLabel'),
      }
    ](name='actions'),
    deviceVariables?: [ 
      {
        code?: string(name='code'),
        dataDisplay?: string(name='dataDisplay'),
        defineId?: string(name='defineId'),
        description?: string(name='description'),
        displayType?: string(name='displayType'),
        expressionTitle?: string(name='expressionTitle'),
        favoriteFlag?: boolean(name='favoriteFlag'),
        fieldDetail?: string(name='fieldDetail'),
        fieldRank?: int32(name='fieldRank'),
        fieldSource?: string(name='fieldSource'),
        fieldType?: string(name='fieldType'),
        id?: long(name='id'),
        inputFieldType?: string(name='inputFieldType'),
        inputRequired?: string(name='inputRequired'),
        inputs?: string(name='inputs'),
        name?: string(name='name'),
        outlier?: string(name='outlier'),
        outputThreshold?: {
          maxValue?: double(name='maxValue'),
          minValue?: double(name='minValue'),
        }(name='outputThreshold'),
        parentName?: string(name='parentName'),
        sourceType?: string(name='sourceType'),
        title?: string(name='title'),
        type?: string(name='type'),
        variableVelocity?: {
          iv?: string(name='iv'),
        }(name='variableVelocity'),
        xLabel?: string(name='xLabel'),
        yLabel?: string(name='yLabel'),
      }
    ](name='deviceVariables'),
    expressionVariables?: [ 
      {
        code?: string(name='code'),
        dataDisplay?: string(name='dataDisplay'),
        defineId?: string(name='defineId'),
        description?: string(name='description'),
        displayType?: string(name='displayType'),
        expressionTitle?: string(name='expressionTitle'),
        favoriteFlag?: boolean(name='favoriteFlag'),
        fieldDetail?: string(name='fieldDetail'),
        fieldRank?: int32(name='fieldRank'),
        fieldSource?: string(name='fieldSource'),
        fieldType?: string(name='fieldType'),
        id?: long(name='id'),
        inputFieldType?: string(name='inputFieldType'),
        inputRequired?: string(name='inputRequired'),
        inputs?: string(name='inputs'),
        name?: string(name='name'),
        outlier?: string(name='outlier'),
        outputThreshold?: {
          maxValue?: double(name='maxValue'),
          minValue?: double(name='minValue'),
        }(name='outputThreshold'),
        parentName?: string(name='parentName'),
        sourceType?: string(name='sourceType'),
        title?: string(name='title'),
        type?: string(name='type'),
        variableVelocity?: {
          iv?: string(name='iv'),
        }(name='variableVelocity'),
        xLabel?: string(name='xLabel'),
        yLabel?: string(name='yLabel'),
      }
    ](name='expressionVariables'),
    favoriteVariables?: [ 
      {
        code?: string(name='code'),
        dataDisplay?: string(name='dataDisplay'),
        defineId?: string(name='defineId'),
        description?: string(name='description'),
        displayType?: string(name='displayType'),
        expressionTitle?: string(name='expressionTitle'),
        favoriteFlag?: boolean(name='favoriteFlag'),
        fieldDetail?: string(name='fieldDetail'),
        fieldRank?: int32(name='fieldRank'),
        fieldSource?: string(name='fieldSource'),
        fieldType?: string(name='fieldType'),
        id?: long(name='id'),
        inputFieldType?: string(name='inputFieldType'),
        inputRequired?: string(name='inputRequired'),
        inputs?: string(name='inputs'),
        name?: string(name='name'),
        outlier?: string(name='outlier'),
        outputThreshold?: {
          maxValue?: double(name='maxValue'),
          minValue?: double(name='minValue'),
        }(name='outputThreshold'),
        parentName?: string(name='parentName'),
        sourceType?: string(name='sourceType'),
        title?: string(name='title'),
        type?: string(name='type'),
        variableVelocity?: {
          iv?: string(name='iv'),
        }(name='variableVelocity'),
        xLabel?: string(name='xLabel'),
        yLabel?: string(name='yLabel'),
      }
    ](name='favoriteVariables'),
    middleVariables?: [ 
      {
        code?: string(name='code'),
        dataDisplay?: string(name='dataDisplay'),
        defineId?: string(name='defineId'),
        description?: string(name='description'),
        displayType?: string(name='displayType'),
        expressionTitle?: string(name='expressionTitle'),
        favoriteFlag?: boolean(name='favoriteFlag'),
        fieldDetail?: string(name='fieldDetail'),
        fieldRank?: int32(name='fieldRank'),
        fieldSource?: string(name='fieldSource'),
        fieldType?: string(name='fieldType'),
        id?: long(name='id'),
        inputFieldType?: string(name='inputFieldType'),
        inputRequired?: string(name='inputRequired'),
        inputs?: string(name='inputs'),
        name?: string(name='name'),
        outlier?: string(name='outlier'),
        outputThreshold?: {
          maxValue?: double(name='maxValue'),
          minValue?: double(name='minValue'),
        }(name='outputThreshold'),
        parentName?: string(name='parentName'),
        sourceType?: string(name='sourceType'),
        title?: string(name='title'),
        type?: string(name='type'),
        variableVelocity?: {
          iv?: string(name='iv'),
        }(name='variableVelocity'),
        xLabel?: string(name='xLabel'),
        yLabel?: string(name='yLabel'),
      }
    ](name='middleVariables'),
    modelVariables?: [ 
      {
        code?: string(name='code'),
        dataDisplay?: string(name='dataDisplay'),
        defineId?: string(name='defineId'),
        description?: string(name='description'),
        displayType?: string(name='displayType'),
        expressionTitle?: string(name='expressionTitle'),
        favoriteFlag?: boolean(name='favoriteFlag'),
        fieldDetail?: string(name='fieldDetail'),
        fieldRank?: int32(name='fieldRank'),
        fieldSource?: string(name='fieldSource'),
        fieldType?: string(name='fieldType'),
        id?: long(name='id'),
        inputFieldType?: string(name='inputFieldType'),
        inputRequired?: string(name='inputRequired'),
        inputs?: string(name='inputs'),
        name?: string(name='name'),
        outlier?: string(name='outlier'),
        outputThreshold?: {
          maxValue?: double(name='maxValue'),
          minValue?: double(name='minValue'),
        }(name='outputThreshold'),
        parentName?: string(name='parentName'),
        sourceType?: string(name='sourceType'),
        title?: string(name='title'),
        type?: string(name='type'),
        variableVelocity?: {
          iv?: string(name='iv'),
        }(name='variableVelocity'),
        xLabel?: string(name='xLabel'),
        yLabel?: string(name='yLabel'),
      }
    ](name='modelVariables'),
    nameList?: [ 
      {
        code?: string(name='code'),
        dataDisplay?: string(name='dataDisplay'),
        defineId?: string(name='defineId'),
        description?: string(name='description'),
        displayType?: string(name='displayType'),
        expressionTitle?: string(name='expressionTitle'),
        favoriteFlag?: boolean(name='favoriteFlag'),
        fieldDetail?: string(name='fieldDetail'),
        fieldRank?: int32(name='fieldRank'),
        fieldSource?: string(name='fieldSource'),
        fieldType?: string(name='fieldType'),
        id?: long(name='id'),
        inputFieldType?: string(name='inputFieldType'),
        inputRequired?: string(name='inputRequired'),
        inputs?: string(name='inputs'),
        name?: string(name='name'),
        outlier?: string(name='outlier'),
        outputThreshold?: {
          maxValue?: double(name='maxValue'),
          minValue?: double(name='minValue'),
        }(name='outputThreshold'),
        parentName?: string(name='parentName'),
        sourceType?: string(name='sourceType'),
        title?: string(name='title'),
        type?: string(name='type'),
        variableVelocity?: {
          iv?: string(name='iv'),
        }(name='variableVelocity'),
        xLabel?: string(name='xLabel'),
        yLabel?: string(name='yLabel'),
      }
    ](name='nameList'),
    nativeVariableFunctions?: [ 
      {
        code?: string(name='code'),
        dataDisplay?: string(name='dataDisplay'),
        defineId?: string(name='defineId'),
        description?: string(name='description'),
        displayType?: string(name='displayType'),
        expressionTitle?: string(name='expressionTitle'),
        favoriteFlag?: boolean(name='favoriteFlag'),
        fieldDetail?: string(name='fieldDetail'),
        fieldRank?: int32(name='fieldRank'),
        fieldSource?: string(name='fieldSource'),
        fieldType?: string(name='fieldType'),
        id?: long(name='id'),
        inputFieldType?: string(name='inputFieldType'),
        inputRequired?: string(name='inputRequired'),
        inputs?: string(name='inputs'),
        name?: string(name='name'),
        outlier?: string(name='outlier'),
        outputThreshold?: {
          maxValue?: double(name='maxValue'),
          minValue?: double(name='minValue'),
        }(name='outputThreshold'),
        parentName?: string(name='parentName'),
        sourceType?: string(name='sourceType'),
        title?: string(name='title'),
        type?: string(name='type'),
        variableVelocity?: {
          iv?: string(name='iv'),
        }(name='variableVelocity'),
        xLabel?: string(name='xLabel'),
        yLabel?: string(name='yLabel'),
      }
    ](name='nativeVariableFunctions'),
    nativeVariables?: [ 
      {
        code?: string(name='code'),
        dataDisplay?: string(name='dataDisplay'),
        defineId?: string(name='defineId'),
        description?: string(name='description'),
        displayType?: string(name='displayType'),
        expressionTitle?: string(name='expressionTitle'),
        favoriteFlag?: boolean(name='favoriteFlag'),
        fieldDetail?: string(name='fieldDetail'),
        fieldRank?: int32(name='fieldRank'),
        fieldSource?: string(name='fieldSource'),
        fieldType?: string(name='fieldType'),
        id?: long(name='id'),
        inputFieldType?: string(name='inputFieldType'),
        inputRequired?: string(name='inputRequired'),
        inputs?: string(name='inputs'),
        name?: string(name='name'),
        outlier?: string(name='outlier'),
        outputThreshold?: {
          maxValue?: double(name='maxValue'),
          minValue?: double(name='minValue'),
        }(name='outputThreshold'),
        parentName?: string(name='parentName'),
        sourceType?: string(name='sourceType'),
        title?: string(name='title'),
        type?: string(name='type'),
        variableVelocity?: {
          iv?: string(name='iv'),
        }(name='variableVelocity'),
        xLabel?: string(name='xLabel'),
        yLabel?: string(name='yLabel'),
      }
    ](name='nativeVariables'),
    queryVariables?: [ 
      {
        code?: string(name='code'),
        dataDisplay?: string(name='dataDisplay'),
        defineId?: string(name='defineId'),
        description?: string(name='description'),
        displayType?: string(name='displayType'),
        expressionTitle?: string(name='expressionTitle'),
        favoriteFlag?: boolean(name='favoriteFlag'),
        fieldDetail?: string(name='fieldDetail'),
        fieldRank?: int32(name='fieldRank'),
        fieldSource?: string(name='fieldSource'),
        fieldType?: string(name='fieldType'),
        id?: long(name='id'),
        inputFieldType?: string(name='inputFieldType'),
        inputRequired?: string(name='inputRequired'),
        inputs?: string(name='inputs'),
        name?: string(name='name'),
        outlier?: string(name='outlier'),
        outputThreshold?: {
          maxValue?: double(name='maxValue'),
          minValue?: double(name='minValue'),
        }(name='outputThreshold'),
        parentName?: string(name='parentName'),
        sourceType?: string(name='sourceType'),
        title?: string(name='title'),
        type?: string(name='type'),
        variableVelocity?: {
          iv?: string(name='iv'),
        }(name='variableVelocity'),
        xLabel?: string(name='xLabel'),
        yLabel?: string(name='yLabel'),
      }
    ](name='queryVariables'),
    selfVariables?: [ 
      {
        code?: string(name='code'),
        dataDisplay?: string(name='dataDisplay'),
        defineId?: string(name='defineId'),
        description?: string(name='description'),
        displayType?: string(name='displayType'),
        expressionTitle?: string(name='expressionTitle'),
        favoriteFlag?: boolean(name='favoriteFlag'),
        fieldDetail?: string(name='fieldDetail'),
        fieldRank?: int32(name='fieldRank'),
        fieldSource?: string(name='fieldSource'),
        fieldType?: string(name='fieldType'),
        id?: long(name='id'),
        inputFieldType?: string(name='inputFieldType'),
        inputRequired?: string(name='inputRequired'),
        inputs?: string(name='inputs'),
        name?: string(name='name'),
        outlier?: string(name='outlier'),
        outputThreshold?: {
          maxValue?: double(name='maxValue'),
          minValue?: double(name='minValue'),
        }(name='outputThreshold'),
        parentName?: string(name='parentName'),
        sourceType?: string(name='sourceType'),
        title?: string(name='title'),
        type?: string(name='type'),
        variableVelocity?: {
          iv?: string(name='iv'),
        }(name='variableVelocity'),
        xLabel?: string(name='xLabel'),
        yLabel?: string(name='yLabel'),
      }
    ](name='selfVariables'),
    sysVariables?: [ 
      {
        code?: string(name='code'),
        dataDisplay?: string(name='dataDisplay'),
        defineId?: string(name='defineId'),
        description?: string(name='description'),
        displayType?: string(name='displayType'),
        expressionTitle?: string(name='expressionTitle'),
        favoriteFlag?: boolean(name='favoriteFlag'),
        fieldDetail?: string(name='fieldDetail'),
        fieldRank?: int32(name='fieldRank'),
        fieldSource?: string(name='fieldSource'),
        fieldType?: string(name='fieldType'),
        id?: long(name='id'),
        inputFieldType?: string(name='inputFieldType'),
        inputRequired?: string(name='inputRequired'),
        inputs?: string(name='inputs'),
        name?: string(name='name'),
        outlier?: string(name='outlier'),
        outputThreshold?: {
          maxValue?: double(name='maxValue'),
          minValue?: double(name='minValue'),
        }(name='outputThreshold'),
        parentName?: string(name='parentName'),
        sourceType?: string(name='sourceType'),
        title?: string(name='title'),
        type?: string(name='type'),
        variableVelocity?: {
          iv?: string(name='iv'),
        }(name='variableVelocity'),
        xLabel?: string(name='xLabel'),
        yLabel?: string(name='yLabel'),
      }
    ](name='sysVariables'),
    thirdVariables?: map[string]any(name='thirdVariables'),
    velocityVariables?: [ 
      {
        code?: string(name='code'),
        dataDisplay?: string(name='dataDisplay'),
        defineId?: string(name='defineId'),
        description?: string(name='description'),
        displayType?: string(name='displayType'),
        expressionTitle?: string(name='expressionTitle'),
        favoriteFlag?: boolean(name='favoriteFlag'),
        fieldDetail?: string(name='fieldDetail'),
        fieldRank?: int32(name='fieldRank'),
        fieldSource?: string(name='fieldSource'),
        fieldType?: string(name='fieldType'),
        id?: long(name='id'),
        inputFieldType?: string(name='inputFieldType'),
        inputRequired?: string(name='inputRequired'),
        inputs?: string(name='inputs'),
        name?: string(name='name'),
        outlier?: string(name='outlier'),
        outputThreshold?: {
          maxValue?: double(name='maxValue'),
          minValue?: double(name='minValue'),
        }(name='outputThreshold'),
        parentName?: string(name='parentName'),
        sourceType?: string(name='sourceType'),
        title?: string(name='title'),
        type?: string(name='type'),
        variableVelocity?: {
          iv?: string(name='iv'),
        }(name='variableVelocity'),
        xLabel?: string(name='xLabel'),
        yLabel?: string(name='yLabel'),
      }
    ](name='velocityVariables'),
  }(name='resultObject'),
}

model DescribeEventVariableListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEventVariableListResponseBody(name='body'),
}

async function describeEventVariableList(request: DescribeEventVariableListRequest): DescribeEventVariableListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEventVariableList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEventVariableTemplateBindRequest {
  lang?: string(name='Lang', position='Query'),
  inputs: string(name='inputs', position='Query'),
  regId?: string(name='regId', position='Query'),
  templateCode?: string(name='templateCode', position='Query'),
  type: string(name='type', position='Query'),
}

model DescribeEventVariableTemplateBindResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: {
    chargeVariables?: [ 
      {
        code?: string(name='code'),
        description?: string(name='description'),
        fieldType?: string(name='fieldType'),
        id?: long(name='id'),
        name?: string(name='name'),
        title?: string(name='title'),
        type?: string(name='type'),
      }
    ](name='chargeVariables'),
    freeVariables?: [ 
      {
        code?: string(name='code'),
        description?: string(name='description'),
        fieldType?: string(name='fieldType'),
        id?: long(name='id'),
        name?: string(name='name'),
        title?: string(name='title'),
        type?: string(name='type'),
      }
    ](name='freeVariables'),
    templateCode?: string(name='templateCode'),
    totalCount?: string(name='totalCount'),
  }(name='resultObject'),
}

model DescribeEventVariableTemplateBindResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEventVariableTemplateBindResponseBody(name='body'),
}

async function describeEventVariableTemplateBind(request: DescribeEventVariableTemplateBindRequest): DescribeEventVariableTemplateBindResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEventVariableTemplateBind', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEventVariableTemplateListRequest {
  lang?: string(name='Lang', position='Query'),
  inputs?: string(name='inputs', position='Query'),
  regId?: string(name='regId', position='Query'),
  templateCode?: string(name='templateCode', position='Query'),
  type?: string(name='type', position='Query'),
}

model DescribeEventVariableTemplateListResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: [ 
    {
      templateCode?: string(name='templateCode'),
      templateName?: string(name='templateName'),
      variables?: [ 
        {
          code?: string(name='code'),
          description?: string(name='description'),
          fieldType?: string(name='fieldType'),
          id?: long(name='id'),
          name?: string(name='name'),
          title?: string(name='title'),
          type?: string(name='type'),
        }
      ](name='variables'),
    }
  ](name='resultObject'),
}

model DescribeEventVariableTemplateListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEventVariableTemplateListResponseBody(name='body'),
}

async function describeEventVariableTemplateList(request: DescribeEventVariableTemplateListRequest): DescribeEventVariableTemplateListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEventVariableTemplateList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEventsVariableListRequest {
  lang?: string(name='Lang', position='Query'),
  createType?: string(name='createType', position='Query'),
  eventCodes: string(name='eventCodes', position='Query'),
  filterDTO?: string(name='filterDTO', position='Query'),
  regId?: string(name='regId', position='Query'),
  scene: string(name='scene', position='Query'),
}

model DescribeEventsVariableListResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model DescribeEventsVariableListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEventsVariableListResponseBody(name='body'),
}

async function describeEventsVariableList(request: DescribeEventsVariableListRequest): DescribeEventsVariableListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEventsVariableList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeExcuteNumRequest {
  code: string(name='Code', position='Query'),
  degree?: string(name='Degree', position='Query'),
  endDate?: string(name='EndDate', position='Query'),
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  startDate?: string(name='StartDate', position='Query'),
}

model DescribeExcuteNumResponseBody = {
  categories?: [ string ](name='Categories'),
  data?: [ string ](name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeExcuteNumResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeExcuteNumResponseBody(name='body'),
}

async function describeExcuteNum(request: DescribeExcuteNumRequest): DescribeExcuteNumResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeExcuteNum', 'POST', '/', 'json', false, 'json', request);
}

model DescribeExistNameRequest {
  lang?: string(name='Lang', position='Query'),
  name?: string(name='name', position='Query'),
  regId: string(name='regId', position='Query'),
}

model DescribeExistNameResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model DescribeExistNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeExistNameResponseBody(name='body'),
}

async function describeExistName(request: DescribeExistNameRequest): DescribeExistNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeExistName', 'POST', '/', 'json', false, 'json', request);
}

model DescribeExistSceneRequest {
  lang?: string(name='Lang', position='Query'),
  sceneName?: string(name='SceneName', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeExistSceneResponseBody = {
  requestId?: string(name='RequestId'),
  data?: boolean(name='data'),
}

model DescribeExistSceneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeExistSceneResponseBody(name='body'),
}

async function describeExistScene(request: DescribeExistSceneRequest): DescribeExistSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeExistScene', 'POST', '/', 'json', false, 'json', request);
}

model DescribeExpressionVariableDetailRequest {
  lang?: string(name='Lang', position='Query'),
  id: long(name='id', position='Query'),
  regId: string(name='regId', position='Query'),
}

model DescribeExpressionVariableDetailResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: map[string]any(name='resultObject'),
}

model DescribeExpressionVariableDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeExpressionVariableDetailResponseBody(name='body'),
}

async function describeExpressionVariableDetail(request: DescribeExpressionVariableDetailRequest): DescribeExpressionVariableDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeExpressionVariableDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeExpressionVariableFunctionListRequest {
  lang?: string(name='Lang', position='Query'),
  regId: string(name='regId', position='Query'),
}

model DescribeExpressionVariableFunctionListResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: [ 
    {
      description?: string(name='description'),
      key?: string(name='key'),
      maxParamSize?: long(name='maxParamSize'),
      minParamSize?: long(name='minParamSize'),
      paramTypes?: string(name='paramTypes'),
      redirect?: boolean(name='redirect'),
      returnTypes?: string(name='returnTypes'),
      value?: string(name='value'),
    }
  ](name='resultObject'),
}

model DescribeExpressionVariableFunctionListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeExpressionVariableFunctionListResponseBody(name='body'),
}

async function describeExpressionVariableFunctionList(request: DescribeExpressionVariableFunctionListRequest): DescribeExpressionVariableFunctionListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeExpressionVariableFunctionList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeExpressionVariablePageRequest {
  lang?: string(name='Lang', position='Query'),
  currentPage: string(name='currentPage', position='Query'),
  eventCode?: string(name='eventCode', position='Query'),
  outputs?: string(name='outputs', position='Query'),
  pageSize: string(name='pageSize', position='Query'),
  regId: string(name='regId', position='Query'),
  status?: string(name='status', position='Query'),
  value?: string(name='value', position='Query'),
}

model DescribeExpressionVariablePageResponseBody = {
  requestId?: string(name='RequestId'),
  currentPage?: int32(name='currentPage'),
  pageSize?: int32(name='pageSize'),
  resultObject?: [ 
    {
      description?: string(name='description'),
      eventName?: string(name='eventName'),
      gmtModified?: long(name='gmtModified'),
      id?: long(name='id'),
      outputs?: string(name='outputs'),
      status?: string(name='status'),
      title?: string(name='title'),
      version?: long(name='version'),
    }
  ](name='resultObject'),
  totalItem?: int32(name='totalItem'),
  totalPage?: int32(name='totalPage'),
}

model DescribeExpressionVariablePageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeExpressionVariablePageResponseBody(name='body'),
}

async function describeExpressionVariablePage(request: DescribeExpressionVariablePageRequest): DescribeExpressionVariablePageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeExpressionVariablePage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFieldByIdRequest {
  lang?: string(name='Lang', position='Query'),
  id?: long(name='id', position='Query'),
  regId: string(name='regId', position='Query'),
}

model DescribeFieldByIdResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model DescribeFieldByIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFieldByIdResponseBody(name='body'),
}

async function describeFieldById(request: DescribeFieldByIdRequest): DescribeFieldByIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFieldById', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFieldListRequest {
  lang?: string(name='Lang', position='Query'),
  condition?: string(name='condition', position='Query'),
  inputs?: string(name='inputs', position='Query'),
  regId: string(name='regId', position='Query'),
}

model DescribeFieldListResponseBody = {
  requestId?: string(name='RequestId'),
  currentPage?: int32(name='currentPage'),
  pageSize?: int32(name='pageSize'),
  resultObject?: [ 
    {
      classify?: string(name='classify'),
      description?: string(name='description'),
      enumData?: string(name='enumData'),
      id?: long(name='id'),
      name?: string(name='name'),
      source?: string(name='source'),
      status?: string(name='status'),
      title?: string(name='title'),
      type?: string(name='type'),
    }
  ](name='resultObject'),
  totalItem?: int32(name='totalItem'),
  totalPage?: int32(name='totalPage'),
}

model DescribeFieldListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFieldListResponseBody(name='body'),
}

async function describeFieldList(request: DescribeFieldListRequest): DescribeFieldListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFieldList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFieldPageRequest {
  lang?: string(name='Lang', position='Query'),
  classify?: string(name='classify', position='Query'),
  condition?: string(name='condition', position='Query'),
  currentPage?: string(name='currentPage', position='Query'),
  name?: string(name='name', position='Query'),
  pageSize?: string(name='pageSize', position='Query'),
  regId?: string(name='regId', position='Query'),
  source?: string(name='source', position='Query'),
  status?: string(name='status', position='Query'),
  title?: string(name='title', position='Query'),
  type?: string(name='type', position='Query'),
}

model DescribeFieldPageResponseBody = {
  requestId?: string(name='RequestId'),
  currentPage?: int32(name='currentPage'),
  pageSize?: int32(name='pageSize'),
  resultObject?: [ 
    {
      classify?: string(name='classify'),
      description?: string(name='description'),
      enumData?: string(name='enumData'),
      id?: long(name='id'),
      name?: string(name='name'),
      source?: string(name='source'),
      status?: string(name='status'),
      title?: string(name='title'),
      type?: string(name='type'),
    }
  ](name='resultObject'),
  totalItem?: int32(name='totalItem'),
  totalPage?: int32(name='totalPage'),
}

model DescribeFieldPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFieldPageResponseBody(name='body'),
}

async function describeFieldPage(request: DescribeFieldPageRequest): DescribeFieldPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFieldPage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGroupAccountPageRequest {
  lang?: string(name='Lang', position='Query'),
  communityNo?: string(name='communityNo', position='Query'),
  currentPage?: string(name='currentPage', position='Query'),
  direction?: string(name='direction', position='Query'),
  fieldKey?: string(name='fieldKey', position='Query'),
  fieldVal?: string(name='fieldVal', position='Query'),
  isPage?: boolean(name='isPage', position='Query'),
  order?: string(name='order', position='Query'),
  pageSize?: string(name='pageSize', position='Query'),
  regId?: string(name='regId', position='Query'),
  taskId?: string(name='taskId', position='Query'),
}

model DescribeGroupAccountPageResponseBody = {
  requestId?: string(name='RequestId'),
  currentPage?: int32(name='currentPage'),
  data?: boolean(name='data'),
  pageSize?: int32(name='pageSize'),
  totalItem?: int32(name='totalItem'),
  totalPage?: int32(name='totalPage'),
}

model DescribeGroupAccountPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGroupAccountPageResponseBody(name='body'),
}

async function describeGroupAccountPage(request: DescribeGroupAccountPageRequest): DescribeGroupAccountPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGroupAccountPage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGroupConditionListRequest {
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeGroupConditionListResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: [ 
    {
      fieldKey?: string(name='fieldKey'),
      fieldValue?: string(name='fieldValue'),
    }
  ](name='resultObject'),
}

model DescribeGroupConditionListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGroupConditionListResponseBody(name='body'),
}

async function describeGroupConditionList(request: DescribeGroupConditionListRequest): DescribeGroupConditionListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGroupConditionList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGroupPageRequest {
  lang?: string(name='Lang', position='Query'),
  currentPage?: string(name='currentPage', position='Query'),
  direction?: string(name='direction', position='Query'),
  order?: string(name='order', position='Query'),
  pageSize?: string(name='pageSize', position='Query'),
  regId?: string(name='regId', position='Query'),
  taskId?: string(name='taskId', position='Query'),
  timeType?: string(name='timeType', position='Query'),
}

model DescribeGroupPageResponseBody = {
  requestId?: string(name='RequestId'),
  currentPage?: int32(name='currentPage'),
  pageSize?: int32(name='pageSize'),
  resultObject?: [ 
    {
      communityNo?: string(name='communityNo'),
      createTime?: long(name='createTime'),
      groupRisk?: string(name='groupRisk'),
      groupScale?: string(name='groupScale'),
      id?: long(name='id'),
      sceneName?: string(name='sceneName'),
      taskId?: long(name='taskId'),
      userId?: string(name='userId'),
    }
  ](name='resultObject'),
  totalItem?: int32(name='totalItem'),
  totalPage?: int32(name='totalPage'),
}

model DescribeGroupPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGroupPageResponseBody(name='body'),
}

async function describeGroupPage(request: DescribeGroupPageRequest): DescribeGroupPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGroupPage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGroupStatisticsByTodayRequest {
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeGroupStatisticsByTodayResponseBody = {
  requestId?: string(name='RequestId'),
  data?: boolean(name='data'),
}

model DescribeGroupStatisticsByTodayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGroupStatisticsByTodayResponseBody(name='body'),
}

async function describeGroupStatisticsByToday(request: DescribeGroupStatisticsByTodayRequest): DescribeGroupStatisticsByTodayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGroupStatisticsByToday', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGroupTrendRequest {
  lang?: string(name='Lang', position='Query'),
  day?: string(name='day', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeGroupTrendResponseBody = {
  requestId?: string(name='RequestId'),
  data?: boolean(name='data'),
}

model DescribeGroupTrendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGroupTrendResponseBody(name='body'),
}

async function describeGroupTrend(request: DescribeGroupTrendRequest): DescribeGroupTrendResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGroupTrend', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHasRuleNameByEventCodeRequest {
  lang?: string(name='Lang', position='Query'),
  eventCode?: string(name='eventCode', position='Query'),
  excludeRuleId?: string(name='excludeRuleId', position='Query'),
  regId?: string(name='regId', position='Query'),
  ruleName?: string(name='ruleName', position='Query'),
}

model DescribeHasRuleNameByEventCodeResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model DescribeHasRuleNameByEventCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeHasRuleNameByEventCodeResponseBody(name='body'),
}

async function describeHasRuleNameByEventCode(request: DescribeHasRuleNameByEventCodeRequest): DescribeHasRuleNameByEventCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHasRuleNameByEventCode', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHighRiskPieChartRequest {
  lang?: string(name='Lang', position='Query'),
  beginTime: long(name='beginTime', position='Query'),
  endTime: long(name='endTime', position='Query'),
  eventCodes?: string(name='eventCodes', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeHighRiskPieChartResponseBody = {
  code?: string(name='code'),
  httpStatusCode?: string(name='httpStatusCode'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  resultObject?: {
    highRiskIPCity?: {
      animation?: boolean(name='animation'),
      grid?: {
        show?: boolean(name='show'),
      }(name='grid'),
      series?: [ 
        {
          data?: [ 
            {
              name?: string(name='name'),
              value?: string(name='value'),
            }
          ](name='data'),
          name?: string(name='name'),
          roseType?: string(name='roseType'),
        }
      ](name='series'),
    }(name='highRiskIPCity'),
    highRiskIPProvince?: {
      animation?: boolean(name='animation'),
      grid?: {
        show?: boolean(name='show'),
      }(name='grid'),
      series?: [ 
        {
          data?: [ 
            {
              name?: string(name='name'),
              value?: string(name='value'),
            }
          ](name='data'),
          name?: string(name='name'),
          roseType?: string(name='roseType'),
        }
      ](name='series'),
    }(name='highRiskIPProvince'),
    highRiskMobileCity?: {
      animation?: boolean(name='animation'),
      grid?: {
        show?: boolean(name='show'),
      }(name='grid'),
      series?: [ 
        {
          data?: [ 
            {
              name?: string(name='name'),
              value?: string(name='value'),
            }
          ](name='data'),
          name?: string(name='name'),
          roseType?: string(name='roseType'),
        }
      ](name='series'),
    }(name='highRiskMobileCity'),
    highRiskMobileProvince?: {
      animation?: boolean(name='animation'),
      grid?: {
        show?: boolean(name='show'),
      }(name='grid'),
      series?: [ 
        {
          data?: [ 
            {
              name?: string(name='name'),
              value?: string(name='value'),
            }
          ](name='data'),
          name?: string(name='name'),
          roseType?: string(name='roseType'),
        }
      ](name='series'),
    }(name='highRiskMobileProvince'),
  }(name='resultObject'),
  success?: boolean(name='success'),
}

model DescribeHighRiskPieChartResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeHighRiskPieChartResponseBody(name='body'),
}

async function describeHighRiskPieChart(request: DescribeHighRiskPieChartRequest): DescribeHighRiskPieChartResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHighRiskPieChart', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHitRuleFluctuationRequest {
  lang?: string(name='Lang', position='Query'),
  eventCodes?: string(name='eventCodes', position='Query'),
  regId?: string(name='regId', position='Query'),
  ruleStatus?: string(name='ruleStatus', position='Query'),
}

model DescribeHitRuleFluctuationResponseBody = {
  code?: string(name='code'),
  httpStatusCode?: string(name='httpStatusCode'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  resultObject?: [ 
    {
      ruleId?: string(name='ruleId'),
      ruleName?: string(name='ruleName'),
      todayNum?: long(name='todayNum'),
      withinSevenDayNum?: string(name='withinSevenDayNum'),
      withinThirtyDayNum?: string(name='withinThirtyDayNum'),
      withinThreeDayNum?: string(name='withinThreeDayNum'),
      yesterdayNum?: long(name='yesterdayNum'),
    }
  ](name='resultObject'),
  success?: boolean(name='success'),
}

model DescribeHitRuleFluctuationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeHitRuleFluctuationResponseBody(name='body'),
}

async function describeHitRuleFluctuation(request: DescribeHitRuleFluctuationRequest): DescribeHitRuleFluctuationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHitRuleFluctuation', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHitRuleListRequest {
  lang?: string(name='Lang', position='Query'),
  beginTime?: long(name='beginTime', position='Query'),
  endTime?: long(name='endTime', position='Query'),
  eventCodes?: string(name='eventCodes', position='Query'),
  eventType?: string(name='eventType', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeHitRuleListResponseBody = {
  requestId?: string(name='requestId'),
  resultObject?: [ 
    {
      hitCount?: int32(name='hitCount'),
      ruleName?: string(name='ruleName'),
    }
  ](name='resultObject'),
}

model DescribeHitRuleListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeHitRuleListResponseBody(name='body'),
}

async function describeHitRuleList(request: DescribeHitRuleListRequest): DescribeHitRuleListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHitRuleList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHitRuleTrendRequest {
  lang?: string(name='Lang', position='Query'),
  beginTime?: long(name='beginTime', position='Query'),
  endTime?: long(name='endTime', position='Query'),
  eventCodes?: string(name='eventCodes', position='Query'),
  regId?: string(name='regId', position='Query'),
  ruleStatus?: string(name='ruleStatus', position='Query'),
}

model DescribeHitRuleTrendResponseBody = {
  code?: string(name='code'),
  httpStatusCode?: string(name='httpStatusCode'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  resultObject?: {
    series?: [ 
      {
        data?: [ 
          {
            num?: long(name='num'),
            scale?: string(name='scale'),
          }
        ](name='data'),
        name?: string(name='name'),
      }
    ](name='series'),
    xaxis?: {
      data?: [ string ](name='data'),
    }(name='xaxis'),
  }(name='resultObject'),
  success?: boolean(name='success'),
}

model DescribeHitRuleTrendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeHitRuleTrendResponseBody(name='body'),
}

async function describeHitRuleTrend(request: DescribeHitRuleTrendRequest): DescribeHitRuleTrendResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHitRuleTrend', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInputFeildCountByEventCodeRequest {
  lang?: string(name='Lang', position='Query'),
  createType?: string(name='createType', position='Query'),
  eventCode?: string(name='eventCode', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeInputFeildCountByEventCodeResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: {
    limit?: boolean(name='limit'),
    maxTotalItem?: int32(name='maxTotalItem'),
    totalItem?: int32(name='totalItem'),
  }(name='resultObject'),
}

model DescribeInputFeildCountByEventCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInputFeildCountByEventCodeResponseBody(name='body'),
}

async function describeInputFeildCountByEventCode(request: DescribeInputFeildCountByEventCodeRequest): DescribeInputFeildCountByEventCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInputFeildCountByEventCode', 'POST', '/', 'json', false, 'json', request);
}

model DescribeListPocRequest {
  currentPage?: long(name='CurrentPage', position='Query'),
  lang?: string(name='Lang', position='Query'),
  pageSize?: long(name='PageSize', position='Query'),
  regId?: string(name='RegId', position='Query'),
  type?: string(name='Type', position='Query'),
}

model DescribeListPocResponseBody = {
  code?: string(name='Code'),
  currentPage?: string(name='CurrentPage'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  pageSize?: string(name='PageSize'),
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='ResultObject'),
  totalItem?: string(name='TotalItem'),
  totalPage?: string(name='TotalPage'),
}

model DescribeListPocResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeListPocResponseBody(name='body'),
}

async function describeListPoc(request: DescribeListPocRequest): DescribeListPocResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeListPoc', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLoanExecListRequest {
  lang?: string(name='Lang', position='Query'),
  batchNo?: string(name='batchNo', position='Query'),
  currentPage?: string(name='currentPage', position='Query'),
  monitorObj?: string(name='monitorObj', position='Query'),
  monitorStatus?: string(name='monitorStatus', position='Query'),
  pageSize?: string(name='pageSize', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeLoanExecListResponseBody = {
  requestId?: string(name='RequestId'),
  currentPage?: int32(name='currentPage'),
  pageSize?: int32(name='pageSize'),
  resultObject?: boolean(name='resultObject'),
  totalItem?: int32(name='totalItem'),
  totalPage?: int32(name='totalPage'),
}

model DescribeLoanExecListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeLoanExecListResponseBody(name='body'),
}

async function describeLoanExecList(request: DescribeLoanExecListRequest): DescribeLoanExecListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLoanExecList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLoanTaskListRequest {
  lang?: string(name='Lang', position='Query'),
  batchNo?: string(name='batchNo', position='Query'),
  currentPage?: string(name='currentPage', position='Query'),
  monitorStatus?: string(name='monitorStatus', position='Query'),
  pageSize?: string(name='pageSize', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeLoanTaskListResponseBody = {
  requestId?: string(name='RequestId'),
  currentPage?: int32(name='currentPage'),
  pageSize?: int32(name='pageSize'),
  resultObject?: boolean(name='resultObject'),
  totalItem?: int32(name='totalItem'),
  totalPage?: int32(name='totalPage'),
}

model DescribeLoanTaskListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeLoanTaskListResponseBody(name='body'),
}

async function describeLoanTaskList(request: DescribeLoanTaskListRequest): DescribeLoanTaskListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLoanTaskList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMarkPageRequest {
  lang?: string(name='Lang', position='Query'),
  currentPage?: string(name='currentPage', position='Query'),
  direction?: string(name='direction', position='Query'),
  isPage?: boolean(name='isPage', position='Query'),
  order?: string(name='order', position='Query'),
  pageSize?: string(name='pageSize', position='Query'),
  regId?: string(name='regId', position='Query'),
  taskLogId?: string(name='taskLogId', position='Query'),
}

model DescribeMarkPageResponseBody = {
  requestId?: string(name='RequestId'),
  currentPage?: int32(name='currentPage'),
  pageSize?: int32(name='pageSize'),
  resultObject?: [ 
    {
      fieldName?: string(name='fieldName'),
      fieldValue?: string(name='fieldValue'),
      id?: long(name='id'),
      markType?: string(name='markType'),
    }
  ](name='resultObject'),
  totalItem?: int32(name='totalItem'),
  totalPage?: int32(name='totalPage'),
}

model DescribeMarkPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMarkPageResponseBody(name='body'),
}

async function describeMarkPage(request: DescribeMarkPageRequest): DescribeMarkPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMarkPage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMenuPermissionRequest {
  lang?: string(name='Lang', position='Query'),
  permissionType?: string(name='permissionType', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeMenuPermissionResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model DescribeMenuPermissionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMenuPermissionResponseBody(name='body'),
}

async function describeMenuPermission(request: DescribeMenuPermissionRequest): DescribeMenuPermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMenuPermission', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMonitorTaskLimitRequest {
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeMonitorTaskLimitResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: {
    limit?: boolean(name='limit'),
    maxTotalItem?: int32(name='maxTotalItem'),
    totalItem?: int32(name='totalItem'),
  }(name='resultObject'),
}

model DescribeMonitorTaskLimitResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMonitorTaskLimitResponseBody(name='body'),
}

async function describeMonitorTaskLimit(request: DescribeMonitorTaskLimitRequest): DescribeMonitorTaskLimitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMonitorTaskLimit', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNameListRequest {
  lang?: string(name='Lang', position='Query'),
  createType?: string(name='createType', position='Query'),
  currentPage?: string(name='currentPage', position='Query'),
  pageSize?: string(name='pageSize', position='Query'),
  regId?: string(name='regId', position='Query'),
  value?: string(name='value', position='Query'),
  variableId?: string(name='variableId', position='Query'),
}

model DescribeNameListResponseBody = {
  requestId?: string(name='RequestId'),
  currentPage?: int32(name='currentPage'),
  pageSize?: int32(name='pageSize'),
  resultObject?: [ 
    {
      gmtCreate?: long(name='gmtCreate'),
      gmtModified?: long(name='gmtModified'),
      id?: long(name='id'),
      identifier?: string(name='identifier'),
      title?: string(name='title'),
      value?: string(name='value'),
      variableId?: long(name='variableId'),
    }
  ](name='resultObject'),
  totalItem?: int32(name='totalItem'),
  totalPage?: int32(name='totalPage'),
}

model DescribeNameListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNameListResponseBody(name='body'),
}

async function describeNameList(request: DescribeNameListRequest): DescribeNameListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNameList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNameListDownloadUrlRequest {
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='regId', position='Query'),
  variableId: long(name='variableId', position='Query'),
}

model DescribeNameListDownloadUrlResponseBody = {
  requestId?: string(name='requestId'),
  resultObject?: {
    downloadFileUrl?: string(name='downloadFileUrl'),
  }(name='resultObject'),
}

model DescribeNameListDownloadUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNameListDownloadUrlResponseBody(name='body'),
}

async function describeNameListDownloadUrl(request: DescribeNameListDownloadUrlRequest): DescribeNameListDownloadUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNameListDownloadUrl', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNameListLimitRequest {
  lang?: string(name='Lang', position='Query'),
  createType?: string(name='createType', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeNameListLimitResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: {
    limit?: boolean(name='limit'),
    maxTotalItem?: long(name='maxTotalItem'),
    totalItem?: long(name='totalItem'),
  }(name='resultObject'),
}

model DescribeNameListLimitResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNameListLimitResponseBody(name='body'),
}

async function describeNameListLimit(request: DescribeNameListLimitRequest): DescribeNameListLimitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNameListLimit', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNameListPageListRequest {
  lang?: string(name='Lang', position='Query'),
  currentPage?: int32(name='currentPage', position='Query'),
  pageSize?: int32(name='pageSize', position='Query'),
  regId?: string(name='regId', position='Query'),
  updateBeginTime?: long(name='updateBeginTime', position='Query'),
  updateEndTime?: long(name='updateEndTime', position='Query'),
  value?: string(name='value', position='Query'),
  variableId: long(name='variableId', position='Query'),
}

model DescribeNameListPageListResponseBody = {
  currentPage?: string(name='currentPage'),
  pageSize?: string(name='pageSize'),
  requestId?: string(name='requestId'),
  resultObject?: [ 
    {
      gmtCreate?: long(name='gmtCreate'),
      gmtModified?: long(name='gmtModified'),
      id?: long(name='id'),
      name?: string(name='name'),
      nameListType?: string(name='nameListType'),
      title?: string(name='title'),
      userId?: string(name='userId'),
      value?: string(name='value'),
      variableId?: long(name='variableId'),
    }
  ](name='resultObject'),
  totalItem?: string(name='totalItem'),
  totalPage?: string(name='totalPage'),
}

model DescribeNameListPageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNameListPageListResponseBody(name='body'),
}

async function describeNameListPageList(request: DescribeNameListPageListRequest): DescribeNameListPageListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNameListPageList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNameListTypeListRequest {
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeNameListTypeListResponseBody = {
  requestId?: string(name='requestId'),
  resultObject?: [ 
    {
      key?: string(name='key'),
      value?: string(name='value'),
    }
  ](name='resultObject'),
}

model DescribeNameListTypeListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNameListTypeListResponseBody(name='body'),
}

async function describeNameListTypeList(request: DescribeNameListTypeListRequest): DescribeNameListTypeListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNameListTypeList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNameListVariablePageListRequest {
  lang?: string(name='Lang', position='Query'),
  currentPage?: int32(name='currentPage', position='Query'),
  name?: string(name='name', position='Query'),
  nameListType?: string(name='nameListType', position='Query'),
  pageSize?: int32(name='pageSize', position='Query'),
  regId?: string(name='regId', position='Query'),
  value?: string(name='value', position='Query'),
}

model DescribeNameListVariablePageListResponseBody = {
  currentPage?: int32(name='currentPage'),
  pageSize?: int32(name='pageSize'),
  requestId?: string(name='requestId'),
  resultObject?: [ 
    {
      capacity?: long(name='capacity'),
      description?: string(name='description'),
      gmtCreate?: long(name='gmtCreate'),
      gmtModified?: long(name='gmtModified'),
      id?: long(name='id'),
      leftCapacity?: long(name='leftCapacity'),
      name?: string(name='name'),
      nameListType?: string(name='nameListType'),
      refObjId?: string(name='refObjId'),
      refObjType?: long(name='refObjType'),
      sourceType?: string(name='sourceType'),
      title?: string(name='title'),
      type?: string(name='type'),
      userId?: long(name='userId'),
    }
  ](name='resultObject'),
  totalItem?: int32(name='totalItem'),
  totalPage?: int32(name='totalPage'),
}

model DescribeNameListVariablePageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNameListVariablePageListResponseBody(name='body'),
}

async function describeNameListVariablePageList(request: DescribeNameListVariablePageListRequest): DescribeNameListVariablePageListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNameListVariablePageList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOperationLogPageListRequest {
  lang?: string(name='Lang', position='Query'),
  currentPage?: int32(name='currentPage', position='Query'),
  endDate?: long(name='endDate', position='Query'),
  pageSize?: int32(name='pageSize', position='Query'),
  regId?: string(name='regId', position='Query'),
  startDate?: long(name='startDate', position='Query'),
}

model DescribeOperationLogPageListResponseBody = {
  requestId?: string(name='RequestId'),
  currentPage?: int32(name='currentPage'),
  pageSize?: int32(name='pageSize'),
  resultObject?: [ 
    {
      clientIp?: string(name='clientIp'),
      gmtCreate?: long(name='gmtCreate'),
      newContent?: string(name='newContent'),
      oldContent?: string(name='oldContent'),
      operationSummary?: string(name='operationSummary'),
      operationType?: string(name='operationType'),
      userName?: string(name='userName'),
    }
  ](name='resultObject'),
  totalItem?: int32(name='totalItem'),
  totalPage?: int32(name='totalPage'),
}

model DescribeOperationLogPageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOperationLogPageListResponseBody(name='body'),
}

async function describeOperationLogPageList(request: DescribeOperationLogPageListRequest): DescribeOperationLogPageListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOperationLogPageList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOperatorListRequest {
  lang?: string(name='Lang', position='Query'),
  regId: string(name='regId', position='Query'),
}

model DescribeOperatorListResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: [ 
    {
      fieldType?: string(name='fieldType'),
      operators?: [ 
        {
          code?: string(name='code'),
          hasRightVariable?: boolean(name='hasRightVariable'),
          memo?: string(name='memo'),
          name?: string(name='name'),
          rightVariables?: [ 
            {
              fieldName?: string(name='fieldName'),
              fieldType?: string(name='fieldType'),
              fieldValue?: string(name='fieldValue'),
            }
          ](name='rightVariables'),
        }
      ](name='operators'),
    }
  ](name='resultObject'),
}

model DescribeOperatorListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOperatorListResponseBody(name='body'),
}

async function describeOperatorList(request: DescribeOperatorListRequest): DescribeOperatorListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOperatorList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOperatorListBySceneRequest {
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='regId', position='Query'),
  scene?: string(name='scene', position='Query'),
}

model DescribeOperatorListBySceneResponseBody = {
  requestId?: string(name='requestId'),
  resultObject?: [ 
    {
      fieldType?: string(name='fieldType'),
      operators?: [ 
        {
          code?: string(name='code'),
          hasRightVariable?: boolean(name='hasRightVariable'),
          memo?: string(name='memo'),
          name?: string(name='name'),
          rightVariables?: [ 
            {
              fieldName?: string(name='fieldName'),
              fieldType?: string(name='fieldType'),
              fieldValue?: string(name='fieldValue'),
            }
          ](name='rightVariables'),
        }
      ](name='operators'),
    }
  ](name='resultObject'),
}

model DescribeOperatorListBySceneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOperatorListBySceneResponseBody(name='body'),
}

async function describeOperatorListByScene(request: DescribeOperatorListBySceneRequest): DescribeOperatorListBySceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOperatorListByScene', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOperatorListByTypeRequest {
  lang?: string(name='Lang', position='Query'),
  regId: string(name='regId', position='Query'),
}

model DescribeOperatorListByTypeResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: [ 
    {
      fieldType?: string(name='fieldType'),
      operators?: [ 
        {
          code?: string(name='code'),
          hasRightVariable?: boolean(name='hasRightVariable'),
          name?: string(name='name'),
        }
      ](name='operators'),
    }
  ](name='resultObject'),
}

model DescribeOperatorListByTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOperatorListByTypeResponseBody(name='body'),
}

async function describeOperatorListByType(request: DescribeOperatorListByTypeRequest): DescribeOperatorListByTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOperatorListByType', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOssAuthStatusRequest {
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeOssAuthStatusResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: string(name='resultObject'),
}

model DescribeOssAuthStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOssAuthStatusResponseBody(name='body'),
}

async function describeOssAuthStatus(request: DescribeOssAuthStatusRequest): DescribeOssAuthStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOssAuthStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOssPolicyRequest {
  lang?: string(name='Lang', position='Query'),
  regId: string(name='regId', position='Query'),
  scene: string(name='scene', position='Query'),
}

model DescribeOssPolicyResponseBody = {
  accessId?: string(name='AccessId'),
  host?: string(name='Host'),
  key?: string(name='Key'),
  policy?: string(name='Policy'),
  signature?: string(name='Signature'),
  requestId?: string(name='requestId'),
}

model DescribeOssPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOssPolicyResponseBody(name='body'),
}

async function describeOssPolicy(request: DescribeOssPolicyRequest): DescribeOssPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOssPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOssTokenRequest {
  lang?: string(name='Lang', position='Query'),
  fileName?: string(name='fileName', position='Query'),
  regId?: string(name='regId', position='Query'),
  uploadType?: string(name='uploadType', position='Query'),
}

model DescribeOssTokenResponseBody = {
  accessId?: string(name='AccessId'),
  host?: string(name='Host'),
  key?: string(name='Key'),
  policy?: string(name='Policy'),
  requestId?: string(name='RequestId'),
  signature?: string(name='Signature'),
  stsToken?: string(name='StsToken'),
}

model DescribeOssTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOssTokenResponseBody(name='body'),
}

async function describeOssToken(request: DescribeOssTokenRequest): DescribeOssTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOssToken', 'POST', '/', 'json', false, 'json', request);
}

model DescribeParamByEventCodesRequest {
  lang?: string(name='Lang', position='Query'),
  eventCodes: string(name='eventCodes', position='Query'),
  parma?: string(name='parma', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeParamByEventCodesResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: [ 
    {
      code?: string(name='code'),
      name?: string(name='name'),
    }
  ](name='resultObject'),
}

model DescribeParamByEventCodesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeParamByEventCodesResponseBody(name='body'),
}

async function describeParamByEventCodes(request: DescribeParamByEventCodesRequest): DescribeParamByEventCodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeParamByEventCodes', 'POST', '/', 'json', false, 'json', request);
}

model DescribeParamListRequest {
  lang?: string(name='Lang', position='Query'),
  fileUrl?: string(name='fileUrl', position='Query'),
  regId?: string(name='regId', position='Query'),
  serviceCode?: string(name='serviceCode', position='Query'),
}

model DescribeParamListResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model DescribeParamListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeParamListResponseBody(name='body'),
}

async function describeParamList(request: DescribeParamListRequest): DescribeParamListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeParamList', 'POST', '/', 'json', false, 'json', request);
}

model DescribePocDetailRequest {
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='regId', position='Query'),
  taskId?: string(name='taskId', position='Query'),
  type?: string(name='type', position='Query'),
}

model DescribePocDetailResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model DescribePocDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePocDetailResponseBody(name='body'),
}

async function describePocDetail(request: DescribePocDetailRequest): DescribePocDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePocDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribePocOssTokenRequest {
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribePocOssTokenResponseBody = {
  accessId?: string(name='AccessId'),
  host?: string(name='Host'),
  key?: string(name='Key'),
  policy?: string(name='Policy'),
  requestId?: string(name='RequestId'),
  signature?: string(name='Signature'),
  resultObject?: boolean(name='resultObject'),
}

model DescribePocOssTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePocOssTokenResponseBody(name='body'),
}

async function describePocOssToken(request: DescribePocOssTokenRequest): DescribePocOssTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePocOssToken', 'POST', '/', 'json', false, 'json', request);
}

model DescribePocTaskListRequest {
  lang?: string(name='Lang', position='Query'),
  currentPage?: int32(name='currentPage', position='Query'),
  pageSize?: int32(name='pageSize', position='Query'),
  regId?: string(name='regId', position='Query'),
  type?: string(name='type', position='Query'),
}

model DescribePocTaskListResponseBody = {
  requestId?: string(name='RequestId'),
  currentPage?: int32(name='currentPage'),
  pageSize?: int32(name='pageSize'),
  resultObject?: [ 
    {
      createTime?: string(name='createTime'),
      downloadUrl?: string(name='downloadUrl'),
      fileType?: string(name='fileType'),
      serviceName?: string(name='serviceName'),
      status?: string(name='status'),
      taskId?: string(name='taskId'),
      taskName?: string(name='taskName'),
      updateTime?: string(name='updateTime'),
    }
  ](name='resultObject'),
  totalItem?: int32(name='totalItem'),
  totalPage?: int32(name='totalPage'),
}

model DescribePocTaskListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePocTaskListResponseBody(name='body'),
}

async function describePocTaskList(request: DescribePocTaskListRequest): DescribePocTaskListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePocTaskList', 'POST', '/', 'json', false, 'json', request);
}

model DescribePrivateStackRequest {
  regId?: string(name='regId', position='Query'),
}

model DescribePrivateStackResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model DescribePrivateStackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePrivateStackResponseBody(name='body'),
}

async function describePrivateStack(request: DescribePrivateStackRequest): DescribePrivateStackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePrivateStack', 'POST', '/', 'json', false, 'json', request);
}

model DescribeQueryVariableDetailRequest {
  lang?: string(name='Lang', position='Query'),
  id: long(name='id', position='Query'),
  regId: string(name='regId', position='Query'),
}

model DescribeQueryVariableDetailResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: {
    dataSourceCode?: long(name='dataSourceCode'),
    dataSourceName?: string(name='dataSourceName'),
    description?: string(name='description'),
    eventCode?: string(name='eventCode'),
    expression?: string(name='expression'),
    expressionTitle?: string(name='expressionTitle'),
    expressionVariable?: string(name='expressionVariable'),
    id?: long(name='id'),
    outlier?: string(name='outlier'),
    outputs?: string(name='outputs'),
    title?: string(name='title'),
  }(name='resultObject'),
}

model DescribeQueryVariableDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeQueryVariableDetailResponseBody(name='body'),
}

async function describeQueryVariableDetail(request: DescribeQueryVariableDetailRequest): DescribeQueryVariableDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeQueryVariableDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeQueryVariablePageListRequest {
  lang?: string(name='Lang', position='Query'),
  currentPage?: long(name='currentPage', position='Query'),
  dataSourceCode?: string(name='dataSourceCode', position='Query'),
  eventCode?: string(name='eventCode', position='Query'),
  name?: string(name='name', position='Query'),
  pageSize?: long(name='pageSize', position='Query'),
  regId: string(name='regId', position='Query'),
}

model DescribeQueryVariablePageListResponseBody = {
  requestId?: string(name='RequestId'),
  currentPage?: long(name='currentPage'),
  pageSize?: long(name='pageSize'),
  resultObject?: [ 
    {
      dataSourceCode?: long(name='dataSourceCode'),
      dataSourceName?: string(name='dataSourceName'),
      description?: string(name='description'),
      eventName?: string(name='eventName'),
      fieldType?: string(name='fieldType'),
      gmtCreate?: long(name='gmtCreate'),
      gmtModified?: long(name='gmtModified'),
      id?: long(name='id'),
      name?: string(name='name'),
      status?: string(name='status'),
      total?: long(name='total'),
      version?: long(name='version'),
    }
  ](name='resultObject'),
  totalItem?: long(name='totalItem'),
  totalPage?: long(name='totalPage'),
}

model DescribeQueryVariablePageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeQueryVariablePageListResponseBody(name='body'),
}

async function describeQueryVariablePageList(request: DescribeQueryVariablePageListRequest): DescribeQueryVariablePageListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeQueryVariablePageList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRecommendSceneVariablesRequest {
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='regId', position='Query'),
  sampleId: long(name='sampleId', position='Query'),
}

model DescribeRecommendSceneVariablesResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model DescribeRecommendSceneVariablesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRecommendSceneVariablesResponseBody(name='body'),
}

async function describeRecommendSceneVariables(request: DescribeRecommendSceneVariablesRequest): DescribeRecommendSceneVariablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRecommendSceneVariables', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRecommendTaskDetailRequest {
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='regId', position='Query'),
  taskId?: long(name='taskId', position='Query'),
}

model DescribeRecommendTaskDetailResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: {
    eventCode?: string(name='eventCode'),
    eventName?: string(name='eventName'),
    expectVelocities?: [ string ](name='expectVelocities'),
    gmtCreate?: long(name='gmtCreate'),
    normalSize?: long(name='normalSize'),
    recommendRuleDTOs?: [ 
      {
        computeExpression?: string(name='computeExpression'),
        hitSample?: long(name='hitSample'),
        id?: long(name='id'),
        notHitSample?: long(name='notHitSample'),
        recommendRules?: [ 
          {
            left?: string(name='left'),
            operator?: string(name='operator'),
            right?: string(name='right'),
          }
        ](name='recommendRules'),
        ruleId?: string(name='ruleId'),
        ruleName?: string(name='ruleName'),
        status?: string(name='status'),
        velocities?: string(name='velocities'),
      }
    ](name='recommendRuleDTOs'),
    recommendVariableDTOs?: [ 
      {
        id?: long(name='id'),
        title?: string(name='title'),
      }
    ](name='recommendVariableDTOs'),
    riskSize?: long(name='riskSize'),
    sampleName?: string(name='sampleName'),
    sampleScene?: string(name='sampleScene'),
    sampleSceneName?: string(name='sampleSceneName'),
    taskId?: long(name='taskId'),
    taskName?: string(name='taskName'),
    taskStatus?: string(name='taskStatus'),
  }(name='resultObject'),
}

model DescribeRecommendTaskDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRecommendTaskDetailResponseBody(name='body'),
}

async function describeRecommendTaskDetail(request: DescribeRecommendTaskDetailRequest): DescribeRecommendTaskDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRecommendTaskDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRecommendTaskPageListRequest {
  lang?: string(name='Lang', position='Query'),
  currentPage?: string(name='currentPage', position='Query'),
  pageSize?: string(name='pageSize', position='Query'),
  regId?: string(name='regId', position='Query'),
  taskName?: string(name='taskName', position='Query'),
}

model DescribeRecommendTaskPageListResponseBody = {
  requestId?: string(name='RequestId'),
  currentPage?: int32(name='currentPage'),
  pageSize?: int32(name='pageSize'),
  resultObject?: [ 
    {
      expectVelocities?: [ string ](name='expectVelocities'),
      gmtCreate?: long(name='gmtCreate'),
      normalCount?: long(name='normalCount'),
      normalSize?: long(name='normalSize'),
      riskCount?: long(name='riskCount'),
      riskSize?: long(name='riskSize'),
      sampleName?: string(name='sampleName'),
      sampleScene?: string(name='sampleScene'),
      taskId?: long(name='taskId'),
      taskName?: string(name='taskName'),
      taskStatus?: string(name='taskStatus'),
    }
  ](name='resultObject'),
  totalItem?: int32(name='totalItem'),
  totalPage?: int32(name='totalPage'),
}

model DescribeRecommendTaskPageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRecommendTaskPageListResponseBody(name='body'),
}

async function describeRecommendTaskPageList(request: DescribeRecommendTaskPageListRequest): DescribeRecommendTaskPageListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRecommendTaskPageList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRecommendVariablesVelocityRequest {
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='regId', position='Query'),
  taskId: long(name='taskId', position='Query'),
  variableIdsStr?: string(name='variableIdsStr', position='Query'),
}

model DescribeRecommendVariablesVelocityResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model DescribeRecommendVariablesVelocityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRecommendVariablesVelocityResponseBody(name='body'),
}

async function describeRecommendVariablesVelocity(request: DescribeRecommendVariablesVelocityRequest): DescribeRecommendVariablesVelocityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRecommendVariablesVelocity', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRecommendVelocitiesRequest {
  lang?: string(name='Lang', position='Query'),
  code?: string(name='code', position='Query'),
  regId?: string(name='regId', position='Query'),
  type?: string(name='type', position='Query'),
}

model DescribeRecommendVelocitiesResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model DescribeRecommendVelocitiesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRecommendVelocitiesResponseBody(name='body'),
}

async function describeRecommendVelocities(request: DescribeRecommendVelocitiesRequest): DescribeRecommendVelocitiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRecommendVelocities', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeRegionsResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model DescribeRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRequestHitRequest {
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='regId', position='Query'),
  sRequestId: string(name='sRequestId', position='Query'),
}

model DescribeRequestHitResponseBody = {
  requestId?: string(name='requestId'),
  resultObject?: {
    eventCode?: string(name='eventCode'),
    eventName?: string(name='eventName'),
    inputs?: string(name='inputs'),
    outputs?: string(name='outputs'),
    requestTime?: long(name='requestTime'),
    ruleHitRecords?: [ 
      {
        cost?: int32(name='cost'),
        hitSuccessful?: boolean(name='hitSuccessful'),
        isShowDetail?: boolean(name='isShowDetail'),
        order?: int32(name='order'),
        ruleId?: string(name='ruleId'),
        ruleName?: string(name='ruleName'),
        ruleSnapshotId?: string(name='ruleSnapshotId'),
        ruleStatus?: string(name='ruleStatus'),
      }
    ](name='ruleHitRecords'),
    sRequestId?: string(name='sRequestId'),
    totalCost?: long(name='totalCost'),
  }(name='resultObject'),
}

model DescribeRequestHitResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRequestHitResponseBody(name='body'),
}

async function describeRequestHit(request: DescribeRequestHitRequest): DescribeRequestHitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRequestHit', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRequestPeakReportRequest {
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeRequestPeakReportResponseBody = {
  code?: string(name='code'),
  httpStatusCode?: string(name='httpStatusCode'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  resultObject?: [ 
    {
      ratio?: string(name='ratio'),
      value?: string(name='value'),
    }
  ](name='resultObject'),
  success?: boolean(name='success'),
}

model DescribeRequestPeakReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRequestPeakReportResponseBody(name='body'),
}

async function describeRequestPeakReport(request: DescribeRequestPeakReportRequest): DescribeRequestPeakReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRequestPeakReport', 'POST', '/', 'json', false, 'json', request);
}

model DescribeResultCountRequest {
  lang?: string(name='Lang', position='Query'),
  beginTime: long(name='beginTime', position='Query'),
  endTime: long(name='endTime', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeResultCountResponseBody = {
  code?: string(name='code'),
  httpStatusCode?: string(name='httpStatusCode'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  resultObject?: [ 
    {
      result?: string(name='result'),
      total?: string(name='total'),
    }
  ](name='resultObject'),
  success?: boolean(name='success'),
}

model DescribeResultCountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeResultCountResponseBody(name='body'),
}

async function describeResultCount(request: DescribeResultCountRequest): DescribeResultCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeResultCount', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRiskLineChartRequest {
  lang?: string(name='Lang', position='Query'),
  beginTime: long(name='beginTime', position='Query'),
  endTime: long(name='endTime', position='Query'),
  eventCodes?: string(name='eventCodes', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeRiskLineChartResponseBody = {
  code?: string(name='code'),
  httpStatusCode?: string(name='httpStatusCode'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  resultObject?: {
    series?: [ 
      {
        data?: [ string ](name='data'),
        name?: string(name='name'),
      }
    ](name='series'),
    xaxis?: {
      data?: [ string ](name='data'),
    }(name='xaxis'),
  }(name='resultObject'),
  success?: boolean(name='success'),
}

model DescribeRiskLineChartResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRiskLineChartResponseBody(name='body'),
}

async function describeRiskLineChart(request: DescribeRiskLineChartRequest): DescribeRiskLineChartResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRiskLineChart', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRuleBarChartRequest {
  lang?: string(name='Lang', position='Query'),
  beginTime: long(name='beginTime', position='Query'),
  endTime: long(name='endTime', position='Query'),
  eventCodes?: string(name='eventCodes', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeRuleBarChartResponseBody = {
  code?: string(name='code'),
  httpStatusCode?: string(name='httpStatusCode'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  resultObject?: {
    series?: [ 
      {
        data?: [ 
          {
            eventName?: string(name='eventName'),
            num?: long(name='num'),
            ruleName?: string(name='ruleName'),
            status?: string(name='status'),
          }
        ](name='data'),
        type?: string(name='type'),
      }
    ](name='series'),
    yaxis?: {
      data?: [ string ](name='data'),
    }(name='yaxis'),
  }(name='resultObject'),
  success?: boolean(name='success'),
}

model DescribeRuleBarChartResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRuleBarChartResponseBody(name='body'),
}

async function describeRuleBarChart(request: DescribeRuleBarChartRequest): DescribeRuleBarChartResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRuleBarChart', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRuleCountByUserIdRequest {
  lang?: string(name='Lang', position='Query'),
  createType?: string(name='createType', position='Query'),
  regId: string(name='regId', position='Query'),
}

model DescribeRuleCountByUserIdResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: {
    limit?: boolean(name='limit'),
    maxTotalItem?: int32(name='maxTotalItem'),
    totalItem?: int32(name='totalItem'),
  }(name='resultObject'),
}

model DescribeRuleCountByUserIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRuleCountByUserIdResponseBody(name='body'),
}

async function describeRuleCountByUserId(request: DescribeRuleCountByUserIdRequest): DescribeRuleCountByUserIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRuleCountByUserId', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRuleDetailByRuleIdRequest {
  lang?: string(name='Lang', position='Query'),
  consoleRuleId?: long(name='consoleRuleId', position='Query'),
  regId?: string(name='regId', position='Query'),
  ruleId?: string(name='ruleId', position='Query'),
  ruleVersionId?: long(name='ruleVersionId', position='Query'),
}

model DescribeRuleDetailByRuleIdResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: {
    bizVersion?: string(name='bizVersion'),
    consoleRuleId?: long(name='consoleRuleId'),
    eventCode?: string(name='eventCode'),
    eventName?: string(name='eventName'),
    gmtCreate?: long(name='gmtCreate'),
    gmtModified?: long(name='gmtModified'),
    logicExpression?: string(name='logicExpression'),
    mainEventCode?: string(name='mainEventCode'),
    memo?: string(name='memo'),
    ruleActionMap?: map[string]any(name='ruleActionMap'),
    ruleActions?: string(name='ruleActions'),
    ruleExpressions?: string(name='ruleExpressions'),
    ruleId?: string(name='ruleId'),
    ruleName?: string(name='ruleName'),
    ruleStatus?: string(name='ruleStatus'),
    ruleVersionId?: long(name='ruleVersionId'),
  }(name='resultObject'),
}

model DescribeRuleDetailByRuleIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRuleDetailByRuleIdResponseBody(name='body'),
}

async function describeRuleDetailByRuleId(request: DescribeRuleDetailByRuleIdRequest): DescribeRuleDetailByRuleIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRuleDetailByRuleId', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRuleHitRequest {
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='regId', position='Query'),
  ruleId?: string(name='ruleId', position='Query'),
  ruleSnapshotId?: string(name='ruleSnapshotId', position='Query'),
  sRequestId?: string(name='sRequestId', position='Query'),
}

model DescribeRuleHitResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: map[string]any(name='resultObject'),
}

model DescribeRuleHitResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRuleHitResponseBody(name='body'),
}

async function describeRuleHit(request: DescribeRuleHitRequest): DescribeRuleHitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRuleHit', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRuleListByEventCodesListRequest {
  lang?: string(name='Lang', position='Query'),
  eventCodes: string(name='eventCodes', position='Query'),
  regId: string(name='regId', position='Query'),
}

model DescribeRuleListByEventCodesListResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: [ 
    {
      ruleId?: string(name='ruleId'),
      ruleName?: string(name='ruleName'),
    }
  ](name='resultObject'),
}

model DescribeRuleListByEventCodesListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRuleListByEventCodesListResponseBody(name='body'),
}

async function describeRuleListByEventCodesList(request: DescribeRuleListByEventCodesListRequest): DescribeRuleListByEventCodesListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRuleListByEventCodesList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRulePageListRequest {
  lang?: string(name='Lang', position='Query'),
  createType?: string(name='createType', position='Query'),
  currentPage?: string(name='currentPage', position='Query'),
  eventCode?: string(name='eventCode', position='Query'),
  pageSize?: string(name='pageSize', position='Query'),
  regId?: string(name='regId', position='Query'),
  ruleAuthType?: string(name='ruleAuthType', position='Query'),
  ruleName?: string(name='ruleName', position='Query'),
  ruleStatus?: string(name='ruleStatus', position='Query'),
}

model DescribeRulePageListResponseBody = {
  currentPage?: int32(name='currentPage'),
  pageSize?: int32(name='pageSize'),
  requestId?: string(name='requestId'),
  resultObject?: [ 
    {
      authType?: string(name='authType'),
      consoleAudit?: {
        applyUserId?: string(name='applyUserId'),
        applyUserName?: string(name='applyUserName'),
        auditMsg?: string(name='auditMsg'),
        auditRealUserId?: string(name='auditRealUserId'),
        auditRealUserName?: string(name='auditRealUserName'),
        auditRemark?: string(name='auditRemark'),
        auditStatus?: string(name='auditStatus'),
        auditTime?: long(name='auditTime'),
        auditUserId?: string(name='auditUserId'),
        auditUserName?: string(name='auditUserName'),
        gmtCreate?: long(name='gmtCreate'),
        id?: long(name='id'),
        relationExt?: string(name='relationExt'),
        relationId?: long(name='relationId'),
        relationName?: string(name='relationName'),
        relationType?: string(name='relationType'),
      }(name='consoleAudit'),
      eventCode?: string(name='eventCode'),
      eventName?: string(name='eventName'),
      eventType?: string(name='eventType'),
      externalRuleName?: string(name='externalRuleName'),
      gmtCreate?: long(name='gmtCreate'),
      gmtModified?: long(name='gmtModified'),
      id?: long(name='id'),
      mainRuleId?: string(name='mainRuleId'),
      priority?: long(name='priority'),
      ruleAuthType?: string(name='ruleAuthType'),
      ruleId?: string(name='ruleId'),
      ruleMemo?: string(name='ruleMemo'),
      ruleName?: string(name='ruleName'),
      ruleStatus?: string(name='ruleStatus'),
      ruleVersionId?: long(name='ruleVersionId'),
      templateId?: long(name='templateId'),
      version?: int32(name='version'),
    }
  ](name='resultObject'),
  totalItem?: int32(name='totalItem'),
  totalPage?: int32(name='totalPage'),
}

model DescribeRulePageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRulePageListResponseBody(name='body'),
}

async function describeRulePageList(request: DescribeRulePageListRequest): DescribeRulePageListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRulePageList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRuleSnapshotRequest {
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='regId', position='Query'),
  ruleId?: string(name='ruleId', position='Query'),
  snapshotVersion?: string(name='snapshotVersion', position='Query'),
}

model DescribeRuleSnapshotResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: {
    bizVersion?: string(name='bizVersion'),
    eventCode?: string(name='eventCode'),
    eventName?: string(name='eventName'),
    gmtCreate?: long(name='gmtCreate'),
    gmtModified?: long(name='gmtModified'),
    logicExpression?: string(name='logicExpression'),
    memo?: string(name='memo'),
    ruleActions?: string(name='ruleActions'),
    ruleExpressions?: string(name='ruleExpressions'),
    ruleId?: string(name='ruleId'),
    ruleName?: string(name='ruleName'),
    ruleStatus?: string(name='ruleStatus'),
  }(name='resultObject'),
}

model DescribeRuleSnapshotResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRuleSnapshotResponseBody(name='body'),
}

async function describeRuleSnapshot(request: DescribeRuleSnapshotRequest): DescribeRuleSnapshotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRuleSnapshot', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRuleVersionListRequest {
  lang?: string(name='Lang', position='Query'),
  consoleRuleId?: long(name='consoleRuleId', position='Query'),
  regId?: string(name='regId', position='Query'),
  ruleId?: string(name='ruleId', position='Query'),
}

model DescribeRuleVersionListResponseBody = {
  requestId?: string(name='requestId'),
  resultObject?: [ 
    {
      consoleAudit?: {
        applyUserId?: string(name='applyUserId'),
        applyUserName?: string(name='applyUserName'),
        auditMsg?: string(name='auditMsg'),
        auditRealUserId?: string(name='auditRealUserId'),
        auditRealUserName?: string(name='auditRealUserName'),
        auditRemark?: string(name='auditRemark'),
        auditStatus?: string(name='auditStatus'),
        auditTime?: long(name='auditTime'),
        auditUserId?: string(name='auditUserId'),
        auditUserName?: string(name='auditUserName'),
        gmtCreate?: long(name='gmtCreate'),
        id?: long(name='id'),
        relationExt?: string(name='relationExt'),
        relationId?: long(name='relationId'),
        relationName?: string(name='relationName'),
        relationType?: string(name='relationType'),
      }(name='consoleAudit'),
      consoleRuleId?: long(name='consoleRuleId'),
      consoleRuleMemo?: string(name='consoleRuleMemo'),
      consoleRuleName?: string(name='consoleRuleName'),
      eventCode?: string(name='eventCode'),
      eventType?: string(name='eventType'),
      gmtCreate?: long(name='gmtCreate'),
      gmtModified?: long(name='gmtModified'),
      id?: long(name='id'),
      lastOperator?: string(name='lastOperator'),
      priority?: long(name='priority'),
      ruleId?: string(name='ruleId'),
      ruleStatus?: string(name='ruleStatus'),
      version?: long(name='version'),
    }
  ](name='resultObject'),
}

model DescribeRuleVersionListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRuleVersionListResponseBody(name='body'),
}

async function describeRuleVersionList(request: DescribeRuleVersionListRequest): DescribeRuleVersionListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRuleVersionList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSDKDownloadListRequest {
  lang?: string(name='Lang', position='Query'),
  deviceType?: string(name='deviceType', position='Query'),
  listType?: string(name='listType', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeSDKDownloadListResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: [ 
    {
      description?: string(name='description'),
      developer?: string(name='developer'),
      deviceType?: string(name='deviceType'),
      downloadUrl?: string(name='downloadUrl'),
      md5?: string(name='md5'),
      packageName?: string(name='packageName'),
      privacyLink?: string(name='privacyLink'),
      pushTime?: string(name='pushTime'),
      sdkVersion?: string(name='sdkVersion'),
      size?: string(name='size'),
    }
  ](name='resultObject'),
}

model DescribeSDKDownloadListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSDKDownloadListResponseBody(name='body'),
}

async function describeSDKDownloadList(request: DescribeSDKDownloadListRequest): DescribeSDKDownloadListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSDKDownloadList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSafConsoleRequest {
  lang?: string(name='Lang', position='Query'),
  content?: string(name='content', position='Query'),
  service: string(name='service', position='Query'),
}

model DescribeSafConsoleResponseBody = {
  requestId?: string(name='RequestId'),
  bizData?: [ string ](name='bizData'),
}

model DescribeSafConsoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSafConsoleResponseBody(name='body'),
}

async function describeSafConsole(request: DescribeSafConsoleRequest): DescribeSafConsoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSafConsole', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSafDeOrderRequest {
  lang?: string(name='Lang', position='Query'),
  currentPage?: int32(name='currentPage', position='Query'),
  endDate?: string(name='endDate', position='Query'),
  pageSize?: int32(name='pageSize', position='Query'),
  regId?: string(name='regId', position='Query'),
  startDate?: string(name='startDate', position='Query'),
}

model DescribeSafDeOrderResponseBody = {
  requestId?: string(name='requestId'),
  resultObject?: {
    expirationDate?: long(name='expirationDate'),
    openUserType?: int32(name='openUserType'),
  }(name='resultObject'),
}

model DescribeSafDeOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSafDeOrderResponseBody(name='body'),
}

async function describeSafDeOrder(request: DescribeSafDeOrderRequest): DescribeSafDeOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSafDeOrder', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSafOrderRequest {
  lang?: string(name='Lang', position='Query'),
  currentPage?: int32(name='currentPage', position='Query'),
  endDate?: string(name='endDate', position='Query'),
  exactProductCode?: string(name='exactProductCode', position='Query'),
  pageSize?: int32(name='pageSize', position='Query'),
  regId?: string(name='regId', position='Query'),
  startDate?: string(name='startDate', position='Query'),
}

model DescribeSafOrderResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: {
    expirationDate?: long(name='expirationDate'),
  }(name='resultObject'),
}

model DescribeSafOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSafOrderResponseBody(name='body'),
}

async function describeSafOrder(request: DescribeSafOrderRequest): DescribeSafOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSafOrder', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSafStartConfigRequest {
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeSafStartConfigResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: {
    deviceTypes?: [ string ](name='deviceTypes'),
    eventCodes?: [ string ](name='eventCodes'),
    languages?: [ string ](name='languages'),
    serverRegions?: [ string ](name='serverRegions'),
  }(name='resultObject'),
}

model DescribeSafStartConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSafStartConfigResponseBody(name='body'),
}

async function describeSafStartConfig(request: DescribeSafStartConfigRequest): DescribeSafStartConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSafStartConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSafStartStepsRequest {
  lang?: string(name='Lang', position='Query'),
  aliyunServer?: boolean(name='aliyunServer', position='Query'),
  deviceTypesStr?: string(name='deviceTypesStr', position='Query'),
  eventCode?: string(name='eventCode', position='Query'),
  language?: string(name='language', position='Query'),
  regId?: string(name='regId', position='Query'),
  serverRegion?: string(name='serverRegion', position='Query'),
}

model DescribeSafStartStepsResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: [ 
    {
      content?: string(name='content'),
      id?: string(name='id'),
      type?: string(name='type'),
    }
  ](name='resultObject'),
}

model DescribeSafStartStepsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSafStartStepsResponseBody(name='body'),
}

async function describeSafStartSteps(request: DescribeSafStartStepsRequest): DescribeSafStartStepsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSafStartSteps', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSafTagListRequest {
  lang?: string(name='Lang', position='Query'),
  apiId?: string(name='apiId', position='Query'),
  currentPage?: string(name='currentPage', position='Query'),
  pageSize?: string(name='pageSize', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeSafTagListResponseBody = {
  requestId?: string(name='RequestId'),
  currentPage?: int32(name='currentPage'),
  pageSize?: int32(name='pageSize'),
  resultObject?: [ 
    {
      tagDesc?: string(name='tagDesc'),
      tagMean?: string(name='tagMean'),
      tagName?: string(name='tagName'),
      tagState?: string(name='tagState'),
      tagType?: string(name='tagType'),
      tagUid?: string(name='tagUid'),
      updateTime?: string(name='updateTime'),
    }
  ](name='resultObject'),
  totalItem?: int32(name='totalItem'),
  totalPage?: int32(name='totalPage'),
}

model DescribeSafTagListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSafTagListResponseBody(name='body'),
}

async function describeSafTagList(request: DescribeSafTagListRequest): DescribeSafTagListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSafTagList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSampleDataListRequest {
  lang?: string(name='Lang', position='Query'),
  currentPage?: string(name='currentPage', position='Query'),
  deleteTag?: string(name='deleteTag', position='Query'),
  pageSize?: string(name='pageSize', position='Query'),
  queryContent?: string(name='queryContent', position='Query'),
  regId?: string(name='regId', position='Query'),
  sampleId?: long(name='sampleId', position='Query'),
  scene?: string(name='scene', position='Query'),
  status?: string(name='status', position='Query'),
}

model DescribeSampleDataListResponseBody = {
  requestId?: string(name='RequestId'),
  currentPage?: int32(name='currentPage'),
  pageSize?: int32(name='pageSize'),
  resultObject?: [ 
    {
      classificationType?: string(name='classificationType'),
      dataDistributed?: string(name='dataDistributed'),
      dataTitle?: string(name='dataTitle'),
      deleteTag?: string(name='deleteTag'),
      description?: string(name='description'),
      gmtCreate?: long(name='gmtCreate'),
      gmtModified?: long(name='gmtModified'),
      id?: long(name='id'),
      name?: string(name='name'),
      normalSize?: long(name='normalSize'),
      recallConfig?: string(name='recallConfig'),
      riskSize?: long(name='riskSize'),
      riskValue?: string(name='riskValue'),
      sampleLabelDetail?: string(name='sampleLabelDetail'),
      sampleSize?: long(name='sampleSize'),
      scene?: string(name='scene'),
      status?: string(name='status'),
      storePath?: string(name='storePath'),
      storeType?: string(name='storeType'),
      supportRecall?: string(name='supportRecall'),
      userId?: long(name='userId'),
      version?: int32(name='version'),
    }
  ](name='resultObject'),
  totalItem?: int32(name='totalItem'),
  totalPage?: int32(name='totalPage'),
}

model DescribeSampleDataListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSampleDataListResponseBody(name='body'),
}

async function describeSampleDataList(request: DescribeSampleDataListRequest): DescribeSampleDataListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSampleDataList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSampleDemoDownloadUrlRequest {
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='regId', position='Query'),
  scene: string(name='scene', position='Query'),
}

model DescribeSampleDemoDownloadUrlResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model DescribeSampleDemoDownloadUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSampleDemoDownloadUrlResponseBody(name='body'),
}

async function describeSampleDemoDownloadUrl(request: DescribeSampleDemoDownloadUrlRequest): DescribeSampleDemoDownloadUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSampleDemoDownloadUrl', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSampleDownloadUrlRequest {
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='regId', position='Query'),
  sampleId: long(name='sampleId', position='Query'),
}

model DescribeSampleDownloadUrlResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model DescribeSampleDownloadUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSampleDownloadUrlResponseBody(name='body'),
}

async function describeSampleDownloadUrl(request: DescribeSampleDownloadUrlRequest): DescribeSampleDownloadUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSampleDownloadUrl', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSampleInfoRequest {
  lang?: string(name='Lang', position='Query'),
  id?: long(name='id', position='Query'),
  regId?: string(name='regId', position='Query'),
  versions?: int32(name='versions', position='Query'),
}

model DescribeSampleInfoResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: {
    id?: long(name='id'),
    sampleTags?: string(name='sampleTags'),
    sampleType?: string(name='sampleType'),
    sampleValue?: string(name='sampleValue'),
    updateTime?: string(name='updateTime'),
    version?: int32(name='version'),
  }(name='resultObject'),
}

model DescribeSampleInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSampleInfoResponseBody(name='body'),
}

async function describeSampleInfo(request: DescribeSampleInfoRequest): DescribeSampleInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSampleInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSampleListRequest {
  lang?: string(name='Lang', position='Query'),
  currentPage?: int32(name='currentPage', position='Query'),
  pageSize?: int32(name='pageSize', position='Query'),
  regId?: string(name='regId', position='Query'),
  sampleType?: string(name='sampleType', position='Query'),
  sampleValue?: string(name='sampleValue', position='Query'),
}

model DescribeSampleListResponseBody = {
  requestId?: string(name='RequestId'),
  currentPage?: int32(name='currentPage'),
  pageSize?: int32(name='pageSize'),
  resultObject?: [ 
    {
      id?: long(name='id'),
      sampleTags?: string(name='sampleTags'),
      sampleType?: int32(name='sampleType'),
      sampleValue?: string(name='sampleValue'),
      updateTime?: long(name='updateTime'),
      version?: int32(name='version'),
    }
  ](name='resultObject'),
  totalItem?: int32(name='totalItem'),
  totalPage?: int32(name='totalPage'),
}

model DescribeSampleListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSampleListResponseBody(name='body'),
}

async function describeSampleList(request: DescribeSampleListRequest): DescribeSampleListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSampleList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSampleSceneListRequest {
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeSampleSceneListResponseBody = {
  requestId?: string(name='RequestId'),
  currentPage?: int32(name='currentPage'),
  pageSize?: int32(name='pageSize'),
  resultObject?: [ 
    {
      bizType?: string(name='bizType'),
      configKey?: string(name='configKey'),
      configValue?: string(name='configValue'),
      creator?: string(name='creator'),
      description?: string(name='description'),
      gmtCreate?: long(name='gmtCreate'),
      gmtModified?: long(name='gmtModified'),
      id?: long(name='id'),
      lastModifiedOperator?: string(name='lastModifiedOperator'),
      status?: string(name='status'),
    }
  ](name='resultObject'),
  totalItem?: int32(name='totalItem'),
  totalPage?: int32(name='totalPage'),
}

model DescribeSampleSceneListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSampleSceneListResponseBody(name='body'),
}

async function describeSampleSceneList(request: DescribeSampleSceneListRequest): DescribeSampleSceneListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSampleSceneList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSampleTagListRequest {
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeSampleTagListResponseBody = {
  requestId?: string(name='requestId'),
  resultObject?: boolean(name='resultObject'),
}

model DescribeSampleTagListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSampleTagListResponseBody(name='body'),
}

async function describeSampleTagList(request: DescribeSampleTagListRequest): DescribeSampleTagListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSampleTagList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSampleUploadPolicyRequest {
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeSampleUploadPolicyResponseBody = {
  accessId?: string(name='AccessId'),
  host?: string(name='Host'),
  key?: string(name='Key'),
  policy?: string(name='Policy'),
  requestId?: string(name='RequestId'),
  signature?: string(name='Signature'),
  stsToken?: string(name='StsToken'),
}

model DescribeSampleUploadPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSampleUploadPolicyResponseBody(name='body'),
}

async function describeSampleUploadPolicy(request: DescribeSampleUploadPolicyRequest): DescribeSampleUploadPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSampleUploadPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSceneAllEventNameCodeListRequest {
  lang?: string(name='Lang', example='zh', position='Query'),
  createType?: string(name='createType', example='NORMAL', position='Query'),
  regId?: string(name='regId', example='cn-hangzhou', position='Query'),
}

model DescribeSceneAllEventNameCodeListResponseBody = {
  code?: string(name='code', example='200'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
  message?: string(name='message', example='The input parameter data is not valid. order_storage_company_num component not found'),
  requestId?: string(name='requestId', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: [ 
    {
      children?: [ 
        {
          createType?: string(name='createType', example='NORMAL'),
          eventCode?: string(name='eventCode', example='de_aamexg3015'),
          eventName?: string(name='eventName'),
          eventType?: string(name='eventType', example='BYPASS'),
        }
      ](name='children'),
      createType?: string(name='createType', example='MORMAL'),
      eventCode?: string(name='eventCode', example='de_aszbjb7236'),
      eventName?: string(name='eventName'),
      eventType?: string(name='eventType', example='MAIN'),
    }
  ](name='resultObject'),
  success?: boolean(name='success', example='true'),
}

model DescribeSceneAllEventNameCodeListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSceneAllEventNameCodeListResponseBody(name='body'),
}

async function describeSceneAllEventNameCodeList(request: DescribeSceneAllEventNameCodeListRequest): DescribeSceneAllEventNameCodeListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSceneAllEventNameCodeList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSceneEventPageListRequest {
  lang?: string(name='Lang', example='zh', position='Query'),
  currentPage?: string(name='currentPage', example='1', position='Query'),
  nameOrCode?: string(name='nameOrCode', example='servicer_code', position='Query'),
  pageSize?: string(name='pageSize', example='10', position='Query'),
  regId?: string(name='regId', example='cn-hangzhou', position='Query'),
}

model DescribeSceneEventPageListResponseBody = {
  currentPage?: int32(name='currentPage', example='1'),
  pageSize?: int32(name='pageSize', example='20'),
  requestId?: string(name='requestId', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: [ 
    {
      commonRuleCount?: string(name='commonRuleCount', example='10'),
      customRuleCount?: string(name='customRuleCount', example='10'),
      eventCode?: string(name='eventCode', example='de_aszbjb7236'),
      eventName?: string(name='eventName'),
      gmtModified?: string(name='gmtModified', example='1565701886000'),
      modifier?: string(name='modifier'),
      normalRuleCount?: string(name='normalRuleCount', example='10'),
      service?: string(name='service', example='device_risk'),
      useStatus?: string(name='useStatus'),
      whiteBoxRuleCount?: string(name='whiteBoxRuleCount', example='10'),
    }
  ](name='resultObject'),
  totalItem?: int32(name='totalItem', example='3'),
  totalPage?: int32(name='totalPage', example='9'),
}

model DescribeSceneEventPageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSceneEventPageListResponseBody(name='body'),
}

async function describeSceneEventPageList(request: DescribeSceneEventPageListRequest): DescribeSceneEventPageListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSceneEventPageList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSceneRulePageListRequest {
  lang?: string(name='Lang', example='zh', position='Query'),
  createType?: string(name='createType', example='NOMAL', position='Query'),
  currentPage?: string(name='currentPage', example='1', position='Query'),
  eventCode?: string(name='eventCode', example='de_ahgctb7098', position='Query'),
  pageSize?: string(name='pageSize', example='20', position='Query'),
  regId?: string(name='regId', example='cn-hangzhou', position='Query'),
  ruleAuthType?: string(name='ruleAuthType', example='CUSTMER', position='Query'),
  ruleName?: string(name='ruleName', position='Query'),
  ruleStatus?: string(name='ruleStatus', example='RUNNING', position='Query'),
}

model DescribeSceneRulePageListResponseBody = {
  currentPage?: int32(name='currentPage', example='1'),
  pageSize?: int32(name='pageSize', example='20'),
  requestId?: string(name='requestId', example='AE7E6105-7DEB-5125-9B24-DCBC139F6CD2'),
  resultObject?: [ 
    {
      authType?: string(name='authType', example='admin'),
      consoleAudit?: {
        applyUserId?: string(name='applyUserId', example='1234567890999'),
        applyUserName?: string(name='applyUserName'),
        auditMsg?: string(name='auditMsg'),
        auditRealUserId?: string(name='auditRealUserId', example='1234567890'),
        auditRealUserName?: string(name='auditRealUserName'),
        auditRemark?: string(name='auditRemark'),
        auditStatus?: string(name='auditStatus', example='AGREE'),
        auditTime?: long(name='auditTime', example='1545726028000'),
        auditUserId?: string(name='auditUserId', example='123'),
        auditUserName?: string(name='auditUserName'),
        gmtCreate?: long(name='gmtCreate', example='1545726028000'),
        id?: long(name='id', example='1728'),
        relationExt?: string(name='relationExt', example='{}'),
        relationId?: long(name='relationId', example='123'),
        relationName?: string(name='relationName', example='t'),
        relationType?: string(name='relationType', example='RULE'),
      }(name='consoleAudit'),
      eventCode?: string(name='eventCode', example='de_aszbjb7236'),
      eventName?: string(name='eventName'),
      eventType?: string(name='eventType', example='MAIN'),
      externalRuleName?: string(name='externalRuleName'),
      gmtCreate?: long(name='gmtCreate', example='1621578648000'),
      gmtModified?: long(name='gmtModified', example='1565701886000'),
      id?: long(name='id', example='497'),
      mainRuleId?: string(name='mainRuleId', example='4399'),
      priority?: long(name='priority', example='10'),
      ruleAuthType?: string(name='ruleAuthType', example='CUSTMER'),
      ruleId?: string(name='ruleId', example='4730'),
      ruleMemo?: string(name='ruleMemo'),
      ruleName?: string(name='ruleName'),
      ruleStatus?: string(name='ruleStatus', example='RUNNING'),
      ruleVersionId?: long(name='ruleVersionId', example='3823'),
      templateId?: long(name='templateId', example='6'),
      version?: int32(name='version', example='1.0'),
    }
  ](name='resultObject'),
  totalItem?: int32(name='totalItem', example='3'),
  totalPage?: int32(name='totalPage', example='9'),
}

model DescribeSceneRulePageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSceneRulePageListResponseBody(name='body'),
}

async function describeSceneRulePageList(request: DescribeSceneRulePageListRequest): DescribeSceneRulePageListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSceneRulePageList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScoreSectionNumLineChartRequest {
  lang?: string(name='Lang', position='Query'),
  beginTime: string(name='beginTime', position='Query'),
  byPassEventCodes?: string(name='byPassEventCodes', position='Query'),
  endTime: string(name='endTime', position='Query'),
  mainEventCodes?: string(name='mainEventCodes', position='Query'),
  regId?: string(name='regId', position='Query'),
  shuntEventCodes?: string(name='shuntEventCodes', position='Query'),
}

model DescribeScoreSectionNumLineChartResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: {
    series?: [ 
      {
        data?: [ string ](name='data'),
        name?: string(name='name'),
      }
    ](name='series'),
    xaxis?: {
      data?: [ string ](name='data'),
    }(name='xaxis'),
  }(name='resultObject'),
}

model DescribeScoreSectionNumLineChartResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeScoreSectionNumLineChartResponseBody(name='body'),
}

async function describeScoreSectionNumLineChart(request: DescribeScoreSectionNumLineChartRequest): DescribeScoreSectionNumLineChartResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScoreSectionNumLineChart', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScoreSectionPieChartRequest {
  lang?: string(name='Lang', position='Query'),
  beginTime?: long(name='beginTime', position='Query'),
  endTime?: long(name='endTime', position='Query'),
  eventCodes?: string(name='eventCodes', position='Query'),
  eventType?: string(name='eventType', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeScoreSectionPieChartResponseBody = {
  requestId?: string(name='requestId'),
  resultObject?: {
    animation?: boolean(name='animation'),
    grid?: {
      show?: boolean(name='show'),
    }(name='grid'),
    series?: [ 
      {
        data?: [ 
          {
            name?: string(name='name'),
            value?: string(name='value'),
          }
        ](name='data'),
        name?: string(name='name'),
        roseType?: boolean(name='roseType'),
      }
    ](name='series'),
  }(name='resultObject'),
}

model DescribeScoreSectionPieChartResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeScoreSectionPieChartResponseBody(name='body'),
}

async function describeScoreSectionPieChart(request: DescribeScoreSectionPieChartRequest): DescribeScoreSectionPieChartResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScoreSectionPieChart', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScoreSectionRatioLineChartRequest {
  lang?: string(name='Lang', position='Query'),
  beginTime: string(name='beginTime', position='Query'),
  byPassEventCodes?: string(name='byPassEventCodes', position='Query'),
  endTime: string(name='endTime', position='Query'),
  mainEventCodes?: string(name='mainEventCodes', position='Query'),
  regId?: string(name='regId', position='Query'),
  shuntEventCodes?: string(name='shuntEventCodes', position='Query'),
}

model DescribeScoreSectionRatioLineChartResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: {
    series?: [ 
      {
        data?: [ string ](name='data'),
        name?: string(name='name'),
      }
    ](name='series'),
    xaxis?: {
      data?: [ string ](name='data'),
    }(name='xaxis'),
  }(name='resultObject'),
}

model DescribeScoreSectionRatioLineChartResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeScoreSectionRatioLineChartResponseBody(name='body'),
}

async function describeScoreSectionRatioLineChart(request: DescribeScoreSectionRatioLineChartRequest): DescribeScoreSectionRatioLineChartResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScoreSectionRatioLineChart', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSelectItemRequest {
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeSelectItemResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: {
    monitorStatusList?: [ string ](name='monitorStatusList'),
    taskIdList?: [ string ](name='taskIdList'),
  }(name='resultObject'),
}

model DescribeSelectItemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSelectItemResponseBody(name='body'),
}

async function describeSelectItem(request: DescribeSelectItemRequest): DescribeSelectItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSelectItem', 'POST', '/', 'json', false, 'json', request);
}

model DescribeServiceAppKeyRequest {
  regId?: string(name='regId', position='Query'),
}

model DescribeServiceAppKeyResponseBody = {
  code?: string(name='code'),
  httpStatusCode?: string(name='httpStatusCode'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  resultObject?: boolean(name='resultObject'),
  uccess?: boolean(name='uccess'),
}

model DescribeServiceAppKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeServiceAppKeyResponseBody(name='body'),
}

async function describeServiceAppKey(request: DescribeServiceAppKeyRequest): DescribeServiceAppKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeServiceAppKey', 'POST', '/', 'json', false, 'json', request);
}

model DescribeServiceConsumeRequest {
  lang?: string(name='Lang', position='Query'),
  currentPage?: string(name='currentPage', position='Query'),
  endDate: string(name='endDate', position='Query'),
  pageSize?: string(name='pageSize', position='Query'),
  regId?: string(name='regId', position='Query'),
  serviceCode: string(name='serviceCode', position='Query'),
  startDate: string(name='startDate', position='Query'),
}

model DescribeServiceConsumeResponseBody = {
  requestId?: string(name='RequestId'),
  consumeRecords?: [ 
    {
      date?: string(name='date'),
      records?: [ 
        {
          count?: int32(name='count'),
          serviceCode?: string(name='serviceCode'),
        }
      ](name='records'),
    }
  ](name='consumeRecords'),
  currentPage?: int32(name='currentPage'),
  pageSize?: int32(name='pageSize'),
  totalItem?: int32(name='totalItem'),
  totalPage?: int32(name='totalPage'),
}

model DescribeServiceConsumeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeServiceConsumeResponseBody(name='body'),
}

async function describeServiceConsume(request: DescribeServiceConsumeRequest): DescribeServiceConsumeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeServiceConsume', 'POST', '/', 'json', false, 'json', request);
}

model DescribeServiceConsumeDownloadUrlRequest {
  lang?: string(name='Lang', position='Query'),
  endDate: string(name='endDate', position='Query'),
  regId?: string(name='regId', position='Query'),
  serviceCode: string(name='serviceCode', position='Query'),
  startDate: string(name='startDate', position='Query'),
}

model DescribeServiceConsumeDownloadUrlResponseBody = {
  requestId?: string(name='RequestId'),
  downloadFileUrl?: string(name='downloadFileUrl'),
}

model DescribeServiceConsumeDownloadUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeServiceConsumeDownloadUrlResponseBody(name='body'),
}

async function describeServiceConsumeDownloadUrl(request: DescribeServiceConsumeDownloadUrlRequest): DescribeServiceConsumeDownloadUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeServiceConsumeDownloadUrl', 'POST', '/', 'json', false, 'json', request);
}

model DescribeServiceListRequest {
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeServiceListResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: [ 
    {
      serviceCode?: string(name='serviceCode'),
      serviceName?: string(name='serviceName'),
    }
  ](name='resultObject'),
}

model DescribeServiceListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeServiceListResponseBody(name='body'),
}

async function describeServiceList(request: DescribeServiceListRequest): DescribeServiceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeServiceList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSimulationPreditInfoRequest {
  lang?: string(name='Lang', position='Query'),
  eventCode: string(name='eventCode', position='Query'),
  regId?: string(name='regId', position='Query'),
  rulesStr: string(name='rulesStr', position='Query'),
}

model DescribeSimulationPreditInfoResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model DescribeSimulationPreditInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSimulationPreditInfoResponseBody(name='body'),
}

async function describeSimulationPreditInfo(request: DescribeSimulationPreditInfoRequest): DescribeSimulationPreditInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSimulationPreditInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSimulationTaskCountRequest {
  lang?: string(name='Lang', position='Query'),
  dataSourceConfig?: string(name='dataSourceConfig', position='Query'),
  dataSourceType?: string(name='dataSourceType', position='Query'),
  endTime: long(name='endTime', position='Query'),
  eventCode: string(name='eventCode', position='Query'),
  filtersStr?: string(name='filtersStr', position='Query'),
  regId?: string(name='regId', position='Query'),
  startTime: long(name='startTime', position='Query'),
}

model DescribeSimulationTaskCountResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model DescribeSimulationTaskCountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSimulationTaskCountResponseBody(name='body'),
}

async function describeSimulationTaskCount(request: DescribeSimulationTaskCountRequest): DescribeSimulationTaskCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSimulationTaskCount', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSimulationTaskListRequest {
  lang?: string(name='Lang', position='Query'),
  currentPage?: string(name='currentPage', position='Query'),
  id?: string(name='id', position='Query'),
  name?: string(name='name', position='Query'),
  pageSize?: string(name='pageSize', position='Query'),
  regId?: string(name='regId', position='Query'),
  title?: string(name='title', position='Query'),
}

model DescribeSimulationTaskListResponseBody = {
  requestId?: string(name='RequestId'),
  currentPage?: int32(name='currentPage'),
  pageSize?: int32(name='pageSize'),
  resultObject?: boolean(name='resultObject'),
  totalItem?: int32(name='totalItem'),
  totalPage?: int32(name='totalPage'),
}

model DescribeSimulationTaskListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSimulationTaskListResponseBody(name='body'),
}

async function describeSimulationTaskList(request: DescribeSimulationTaskListRequest): DescribeSimulationTaskListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSimulationTaskList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSlsUrlConfigRequest {
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeSlsUrlConfigResponseBody = {
  requestId?: string(name='requestId'),
  resultObject?: string(name='resultObject'),
}

model DescribeSlsUrlConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSlsUrlConfigResponseBody(name='body'),
}

async function describeSlsUrlConfig(request: DescribeSlsUrlConfigRequest): DescribeSlsUrlConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSlsUrlConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSupportRuleListRequest {
  lang?: string(name='Lang', position='Query'),
  eventCode: string(name='eventCode', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeSupportRuleListResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model DescribeSupportRuleListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSupportRuleListResponseBody(name='body'),
}

async function describeSupportRuleList(request: DescribeSupportRuleListRequest): DescribeSupportRuleListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSupportRuleList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTagListRequest {
  id?: string(name='Id', position='Query'),
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='RegId', position='Query'),
}

model DescribeTagListResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  resultObject?: string(name='ResultObject'),
}

model DescribeTagListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTagListResponseBody(name='body'),
}

async function describeTagList(request: DescribeTagListRequest): DescribeTagListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTagList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTagsBarChartRequest {
  lang?: string(name='Lang', position='Query'),
  beginTime: long(name='beginTime', position='Query'),
  endTime: long(name='endTime', position='Query'),
  eventCodes?: string(name='eventCodes', position='Query'),
  regId?: string(name='regId', position='Query'),
  result?: string(name='result', position='Query'),
}

model DescribeTagsBarChartResponseBody = {
  code?: string(name='code'),
  httpStatusCode?: string(name='httpStatusCode'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  resultObject?: {
    series?: [ 
      {
        data?: [ 
          {
            num?: long(name='num'),
            scale?: string(name='scale'),
          }
        ](name='data'),
        name?: string(name='name'),
        stack?: string(name='stack'),
      }
    ](name='series'),
    xaxis?: {
      data?: [ string ](name='data'),
    }(name='xaxis'),
  }(name='resultObject'),
  success?: boolean(name='success'),
}

model DescribeTagsBarChartResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTagsBarChartResponseBody(name='body'),
}

async function describeTagsBarChart(request: DescribeTagsBarChartRequest): DescribeTagsBarChartResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTagsBarChart', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTagsFluctuationRequest {
  lang?: string(name='Lang', position='Query'),
  eventCodes?: string(name='eventCodes', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeTagsFluctuationResponseBody = {
  code?: string(name='code'),
  httpStatusCode?: string(name='httpStatusCode'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  resultObject?: [ 
    {
      tableName?: string(name='tableName'),
      todayNum?: long(name='todayNum'),
      withinSevenDayNum?: string(name='withinSevenDayNum'),
      withinThirtyDayNum?: string(name='withinThirtyDayNum'),
      withinThreeDayNum?: string(name='withinThreeDayNum'),
      yesterdayNum?: long(name='yesterdayNum'),
    }
  ](name='resultObject'),
  success?: boolean(name='success'),
}

model DescribeTagsFluctuationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTagsFluctuationResponseBody(name='body'),
}

async function describeTagsFluctuation(request: DescribeTagsFluctuationRequest): DescribeTagsFluctuationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTagsFluctuation', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTagsListRequest {
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeTagsListResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model DescribeTagsListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTagsListResponseBody(name='body'),
}

async function describeTagsList(request: DescribeTagsListRequest): DescribeTagsListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTagsList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTagsNumLineChartRequest {
  lang?: string(name='Lang', position='Query'),
  beginTime: string(name='beginTime', position='Query'),
  byPassEventCodes?: string(name='byPassEventCodes', position='Query'),
  endTime: string(name='endTime', position='Query'),
  mainEventCodes?: string(name='mainEventCodes', position='Query'),
  regId?: string(name='regId', position='Query'),
  shuntEventCodes?: string(name='shuntEventCodes', position='Query'),
}

model DescribeTagsNumLineChartResponseBody = {
  requestId?: string(name='requestId'),
  resultObject?: {
    series?: [ 
      {
        data?: [ string ](name='data'),
        name?: string(name='name'),
      }
    ](name='series'),
    xaxis?: {
      data?: [ string ](name='data'),
    }(name='xaxis'),
  }(name='resultObject'),
}

model DescribeTagsNumLineChartResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTagsNumLineChartResponseBody(name='body'),
}

async function describeTagsNumLineChart(request: DescribeTagsNumLineChartRequest): DescribeTagsNumLineChartResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTagsNumLineChart', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTagsRatioLineChartRequest {
  lang?: string(name='Lang', position='Query'),
  beginTime: long(name='beginTime', position='Query'),
  byPassEventCodes?: string(name='byPassEventCodes', position='Query'),
  endTime: long(name='endTime', position='Query'),
  mainEventCodes?: string(name='mainEventCodes', position='Query'),
  regId: string(name='regId', position='Query'),
  shuntEventCodes?: string(name='shuntEventCodes', position='Query'),
}

model DescribeTagsRatioLineChartResponseBody = {
  requestId?: string(name='requestId'),
  resultObject?: {
    series?: [ 
      {
        data?: [ string ](name='data'),
        name?: string(name='name'),
      }
    ](name='series'),
    xaxis?: {
      data?: [ string ](name='data'),
    }(name='xaxis'),
  }(name='resultObject'),
}

model DescribeTagsRatioLineChartResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTagsRatioLineChartResponseBody(name='body'),
}

async function describeTagsRatioLineChart(request: DescribeTagsRatioLineChartRequest): DescribeTagsRatioLineChartResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTagsRatioLineChart', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTagsTrendRequest {
  lang?: string(name='Lang', position='Query'),
  beginTime?: long(name='beginTime', position='Query'),
  endTime?: long(name='endTime', position='Query'),
  eventCodes?: string(name='eventCodes', position='Query'),
  regId?: string(name='regId', position='Query'),
  result?: string(name='result', position='Query'),
}

model DescribeTagsTrendResponseBody = {
  code?: string(name='code'),
  httpStatusCode?: string(name='httpStatusCode'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  resultObject?: {
    series?: [ 
      {
        data?: [ 
          {
            num?: long(name='num'),
            scale?: string(name='scale'),
          }
        ](name='data'),
        name?: string(name='name'),
      }
    ](name='series'),
    xaxis?: {
      data?: [ string ](name='data'),
    }(name='xaxis'),
  }(name='resultObject'),
  success?: boolean(name='success'),
}

model DescribeTagsTrendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTagsTrendResponseBody(name='body'),
}

async function describeTagsTrend(request: DescribeTagsTrendRequest): DescribeTagsTrendResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTagsTrend', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTaskListRequest {
  currentPage?: string(name='CurrentPage', position='Query'),
  isPage?: boolean(name='IsPage', position='Query'),
  lang?: string(name='Lang', position='Query'),
  pageSize?: string(name='PageSize', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeTaskListResponseBody = {
  requestId?: string(name='RequestId'),
  currentPage?: int32(name='currentPage'),
  pageSize?: int32(name='pageSize'),
  resultObject?: [ 
    {
      completionTime?: long(name='completionTime'),
      createTime?: long(name='createTime'),
      id?: long(name='id'),
      mark?: int32(name='mark'),
      remark?: string(name='remark'),
      sceneName?: string(name='sceneName'),
      status?: string(name='status'),
      taskLogId?: long(name='taskLogId'),
      taskType?: string(name='taskType'),
    }
  ](name='resultObject'),
  totalItem?: int32(name='totalItem'),
  totalPage?: int32(name='totalPage'),
}

model DescribeTaskListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTaskListResponseBody(name='body'),
}

async function describeTaskList(request: DescribeTaskListRequest): DescribeTaskListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTaskList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTaskLogListRequest {
  currentPage?: string(name='CurrentPage', position='Query'),
  isPage?: boolean(name='IsPage', position='Query'),
  lang?: string(name='Lang', position='Query'),
  pageSize?: string(name='PageSize', position='Query'),
  taskId?: string(name='TaskId', position='Query'),
  taskLogId?: string(name='TaskLogId', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeTaskLogListResponseBody = {
  requestId?: string(name='RequestId'),
  currentPage?: int32(name='currentPage'),
  pageSize?: int32(name='pageSize'),
  resultObject?: [ 
    {
      completionTime?: long(name='completionTime'),
      createTime?: long(name='createTime'),
      id?: long(name='id'),
      remark?: string(name='remark'),
      sceneName?: string(name='sceneName'),
      status?: string(name='status'),
      taskType?: string(name='taskType'),
    }
  ](name='resultObject'),
  totalItem?: int32(name='totalItem'),
  totalPage?: int32(name='totalPage'),
}

model DescribeTaskLogListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTaskLogListResponseBody(name='body'),
}

async function describeTaskLogList(request: DescribeTaskLogListRequest): DescribeTaskLogListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTaskLogList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTemplateBaseInfoByTemplateIdRequest {
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='regId', position='Query'),
  templateId?: long(name='templateId', position='Query'),
}

model DescribeTemplateBaseInfoByTemplateIdResponseBody = {
  requestId?: string(name='requestId'),
  resultObject?: {
    description?: string(name='description'),
    eventCode?: string(name='eventCode'),
    eventName?: string(name='eventName'),
    eventStauts?: string(name='eventStauts'),
    inputFields?: [ 
      {
        description?: string(name='description'),
        fieldCode?: string(name='fieldCode'),
        fieldRank?: string(name='fieldRank'),
        fieldSource?: string(name='fieldSource'),
        fieldType?: string(name='fieldType'),
        title?: string(name='title'),
      }
    ](name='inputFields'),
    ruleDetails?: [ 
      {
        logicExpression?: string(name='logicExpression'),
        memo?: string(name='memo'),
        ruleActions?: string(name='ruleActions'),
        ruleExpressions?: string(name='ruleExpressions'),
        ruleId?: string(name='ruleId'),
        ruleName?: string(name='ruleName'),
        ruleStatus?: string(name='ruleStatus'),
      }
    ](name='ruleDetails'),
    templateCode?: string(name='templateCode'),
    templateName?: string(name='templateName'),
    templateType?: string(name='templateType'),
    version?: int32(name='version'),
  }(name='resultObject'),
}

model DescribeTemplateBaseInfoByTemplateIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTemplateBaseInfoByTemplateIdResponseBody(name='body'),
}

async function describeTemplateBaseInfoByTemplateId(request: DescribeTemplateBaseInfoByTemplateIdRequest): DescribeTemplateBaseInfoByTemplateIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTemplateBaseInfoByTemplateId', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTemplateCountRequest {
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeTemplateCountResponseBody = {
  requestId?: string(name='requestId'),
  resultObject?: {
    limit?: boolean(name='limit'),
    maxTotalItem?: int32(name='maxTotalItem'),
    totalItem?: int32(name='totalItem'),
  }(name='resultObject'),
}

model DescribeTemplateCountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTemplateCountResponseBody(name='body'),
}

async function describeTemplateCount(request: DescribeTemplateCountRequest): DescribeTemplateCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTemplateCount', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTemplateDownloadRequest {
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeTemplateDownloadResponseBody = {
  requestId?: string(name='RequestId'),
  data?: boolean(name='data'),
}

model DescribeTemplateDownloadResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTemplateDownloadResponseBody(name='body'),
}

async function describeTemplateDownload(request: DescribeTemplateDownloadRequest): DescribeTemplateDownloadResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTemplateDownload', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTemplatePageListRequest {
  lang?: string(name='Lang', position='Query'),
  currentPage?: string(name='currentPage', position='Query'),
  eventCodes?: string(name='eventCodes', position='Query'),
  pageSize?: string(name='pageSize', position='Query'),
  regId?: string(name='regId', position='Query'),
  templateName?: string(name='templateName', position='Query'),
  templateSearchItem?: string(name='templateSearchItem', position='Query'),
  templateStatus?: string(name='templateStatus', position='Query'),
  templateType?: string(name='templateType', position='Query'),
}

model DescribeTemplatePageListResponseBody = {
  currentPage?: int32(name='currentPage'),
  pageSize?: int32(name='pageSize'),
  requestId?: string(name='requestId'),
  resultObject?: [ 
    {
      description?: string(name='description'),
      eventCode?: string(name='eventCode'),
      eventName?: string(name='eventName'),
      gmtCreate?: long(name='gmtCreate'),
      gmtModified?: long(name='gmtModified'),
      id?: long(name='id'),
      ruleCount?: int32(name='ruleCount'),
      templateCode?: string(name='templateCode'),
      templateName?: string(name='templateName'),
      templateStatus?: string(name='templateStatus'),
      templateType?: string(name='templateType'),
      userCount?: int32(name='userCount'),
      version?: int32(name='version'),
    }
  ](name='resultObject'),
  totalItem?: int32(name='totalItem'),
  totalPage?: int32(name='totalPage'),
}

model DescribeTemplatePageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTemplatePageListResponseBody(name='body'),
}

async function describeTemplatePageList(request: DescribeTemplatePageListRequest): DescribeTemplatePageListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTemplatePageList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUsedServiceRequest {
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeUsedServiceResponseBody = {
  requestId?: string(name='RequestId'),
  records?: [ 
    {
      enName?: string(name='enName'),
      name?: string(name='name'),
      serviceCode?: string(name='serviceCode'),
    }
  ](name='records'),
}

model DescribeUsedServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeUsedServiceResponseBody(name='body'),
}

async function describeUsedService(request: DescribeUsedServiceRequest): DescribeUsedServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUsedService', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUserInfoRequest {
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeUserInfoResponseBody = {
  code?: string(name='code'),
  httpStatusCode?: string(name='httpStatusCode'),
  message?: string(name='message'),
  resultObject?: {
    clientIp?: string(name='clientIp'),
    subId?: string(name='subId'),
    userId?: long(name='userId'),
    userName?: string(name='userName'),
  }(name='resultObject'),
  success?: boolean(name='success'),
}

model DescribeUserInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeUserInfoResponseBody(name='body'),
}

async function describeUserInfo(request: DescribeUserInfoRequest): DescribeUserInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUserInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVariableBindDetailRequest {
  lang?: string(name='Lang', position='Query'),
  defineId?: long(name='defineId', position='Query'),
  id?: long(name='id', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeVariableBindDetailResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: {
    allowModify?: boolean(name='allowModify'),
    defineId?: long(name='defineId'),
    defineTitle?: string(name='defineTitle'),
    description?: string(name='description'),
    eventCode?: string(name='eventCode'),
    id?: long(name='id'),
    params?: [ 
      {
        eventFieldName?: string(name='eventFieldName'),
        required?: boolean(name='required'),
        variableName?: string(name='variableName'),
      }
    ](name='params'),
    relationRules?: [ 
      {
        key?: string(name='key'),
        value?: string(name='value'),
      }
    ](name='relationRules'),
    title?: string(name='title'),
  }(name='resultObject'),
}

model DescribeVariableBindDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVariableBindDetailResponseBody(name='body'),
}

async function describeVariableBindDetail(request: DescribeVariableBindDetailRequest): DescribeVariableBindDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVariableBindDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVariableDetailRequest {
  lang?: string(name='Lang', position='Query'),
  id: long(name='id', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeVariableDetailResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: {
    baseInfo?: {
      allowBind?: string(name='allowBind'),
      chargingMode?: string(name='chargingMode'),
      chargingModeDesc?: string(name='chargingModeDesc'),
      creator?: string(name='creator'),
      dataDisplay?: string(name='dataDisplay'),
      dataThreshold?: string(name='dataThreshold'),
      deductionFactor?: int32(name='deductionFactor'),
      description?: string(name='description'),
      frontAllowBind?: string(name='frontAllowBind'),
      gmtCreate?: long(name='gmtCreate'),
      gmtModified?: long(name='gmtModified'),
      id?: long(name='id'),
      inputRequired?: string(name='inputRequired'),
      inputs?: string(name='inputs'),
      inputsDesc?: string(name='inputsDesc'),
      invokeKey?: string(name='invokeKey'),
      invokeRt?: int32(name='invokeRt'),
      invokeSuccessRate?: string(name='invokeSuccessRate'),
      invokeTimes?: long(name='invokeTimes'),
      lastModifiedOperator?: string(name='lastModifiedOperator'),
      name?: string(name='name'),
      outputs?: string(name='outputs'),
      outputsDesc?: string(name='outputsDesc'),
      scene?: [ string ](name='scene'),
      sceneDesc?: [ string ](name='sceneDesc'),
      showOrder?: string(name='showOrder'),
      source?: string(name='source'),
      sourceDesc?: string(name='sourceDesc'),
      status?: string(name='status'),
      supportRegions?: [ string ](name='supportRegions'),
      title?: string(name='title'),
      type?: string(name='type'),
      typeDesc?: string(name='typeDesc'),
      xLabel?: string(name='xLabel'),
      yLabel?: string(name='yLabel'),
    }(name='baseInfo'),
  }(name='resultObject'),
}

model DescribeVariableDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVariableDetailResponseBody(name='body'),
}

async function describeVariableDetail(request: DescribeVariableDetailRequest): DescribeVariableDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVariableDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVariableFeeRequest {
  lang?: string(name='Lang', position='Query'),
  ids: [ long ](name='ids', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeVariableFeeResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model DescribeVariableFeeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVariableFeeResponseBody(name='body'),
}

async function describeVariableFee(request: DescribeVariableFeeRequest): DescribeVariableFeeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVariableFee', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVariableListRequest {
  lang?: string(name='Lang', position='Query'),
  createType?: string(name='createType', position='Query'),
  currentPage?: string(name='currentPage', position='Query'),
  pageSize?: string(name='pageSize', position='Query'),
  refObjId?: string(name='refObjId', position='Query'),
  regId?: string(name='regId', position='Query'),
  sourceType?: string(name='sourceType', position='Query'),
  type?: string(name='type', position='Query'),
  typesStr?: string(name='typesStr', position='Query'),
  value?: string(name='value', position='Query'),
}

model DescribeVariableListResponseBody = {
  requestId?: string(name='RequestId'),
  currentPage?: int32(name='currentPage'),
  pageSize?: int32(name='pageSize'),
  resultObject?: [ 
    {
      capacity?: long(name='capacity'),
      defineId?: string(name='defineId'),
      description?: string(name='description'),
      extendInfo?: map[string]any(name='extendInfo'),
      gmtCreate?: long(name='gmtCreate'),
      gmtModified?: long(name='gmtModified'),
      id?: long(name='id'),
      leftCapacity?: long(name='leftCapacity'),
      name?: string(name='name'),
      outputsType?: string(name='outputsType'),
      refObjId?: string(name='refObjId'),
      refObjName?: string(name='refObjName'),
      refObjType?: string(name='refObjType'),
      sourceType?: string(name='sourceType'),
      title?: string(name='title'),
      type?: string(name='type'),
      userId?: long(name='userId'),
    }
  ](name='resultObject'),
  totalItem?: int32(name='totalItem'),
  totalPage?: int32(name='totalPage'),
}

model DescribeVariableListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVariableListResponseBody(name='body'),
}

async function describeVariableList(request: DescribeVariableListRequest): DescribeVariableListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVariableList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVariableMarketListRequest {
  lang?: string(name='Lang', position='Query'),
  chargingMode?: string(name='chargingMode', position='Query'),
  currentPage?: int32(name='currentPage', position='Query'),
  pageSize?: int32(name='pageSize', position='Query'),
  paging?: string(name='paging', position='Query'),
  queryContent?: string(name='queryContent', position='Query'),
  regId?: string(name='regId', position='Query'),
  scenesStr?: string(name='scenesStr', position='Query'),
  source?: string(name='source', position='Query'),
  title?: string(name='title', position='Query'),
}

model DescribeVariableMarketListResponseBody = {
  requestId?: string(name='RequestId'),
  currentPage?: int32(name='currentPage'),
  pageSize?: int32(name='pageSize'),
  resultObject?: boolean(name='resultObject'),
  totalItem?: int32(name='totalItem'),
  totalPage?: int32(name='totalPage'),
}

model DescribeVariableMarketListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVariableMarketListResponseBody(name='body'),
}

async function describeVariableMarketList(request: DescribeVariableMarketListRequest): DescribeVariableMarketListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVariableMarketList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVariableSceneListRequest {
  lang?: string(name='Lang', position='Query'),
  bizType: string(name='bizType', position='Query'),
  configKey?: string(name='configKey', position='Query'),
  currentPage?: string(name='currentPage', position='Query'),
  pageSize?: string(name='pageSize', position='Query'),
  paging: boolean(name='paging', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model DescribeVariableSceneListResponseBody = {
  requestId?: string(name='RequestId'),
  currentPage?: int32(name='currentPage'),
  pageSize?: int32(name='pageSize'),
  resultObject?: [ 
    {
      bizType?: string(name='bizType'),
      configKey?: string(name='configKey'),
      configValue?: string(name='configValue'),
      creator?: string(name='creator'),
      description?: string(name='description'),
      gmtCreate?: long(name='gmtCreate'),
      gmtModified?: long(name='gmtModified'),
      id?: long(name='id'),
      lastModifiedOperator?: string(name='lastModifiedOperator'),
      status?: string(name='status'),
    }
  ](name='resultObject'),
  totalItem?: int32(name='totalItem'),
  totalPage?: int32(name='totalPage'),
}

model DescribeVariableSceneListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVariableSceneListResponseBody(name='body'),
}

async function describeVariableSceneList(request: DescribeVariableSceneListRequest): DescribeVariableSceneListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVariableSceneList', 'POST', '/', 'json', false, 'json', request);
}

model ExpressionTestRequest {
  lang?: string(name='Lang', position='Query'),
  expression: string(name='expression', position='Query'),
  expressionVariable: string(name='expressionVariable', position='Query'),
  expressionVariableIds?: string(name='expressionVariableIds', position='Query'),
  id?: long(name='id', position='Query'),
  regId: string(name='regId', position='Query'),
  scene: string(name='scene', position='Query'),
}

model ExpressionTestResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model ExpressionTestResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExpressionTestResponseBody(name='body'),
}

async function expressionTest(request: ExpressionTestRequest): ExpressionTestResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExpressionTest', 'POST', '/', 'json', false, 'json', request);
}

model FileUploadRequest {
  fileName?: string(name='FileName', position='Query'),
  fileUrl?: string(name='FileUrl', position='Query'),
  lang?: string(name='Lang', position='Query'),
  tab?: string(name='Tab', position='Query'),
}

model FileUploadResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  resultObject?: string(name='ResultObject'),
}

model FileUploadResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FileUploadResponseBody(name='body'),
}

async function fileUpload(request: FileUploadRequest): FileUploadResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FileUpload', 'POST', '/', 'json', false, 'json', request);
}

model ImportNameListRequest {
  lang?: string(name='Lang', position='Query'),
  createType?: string(name='createType', position='Query'),
  data?: string(name='data', position='Query'),
  description?: string(name='description', position='Query'),
  importType: string(name='importType', position='Query'),
  nameListType?: string(name='nameListType', position='Query'),
  regId?: string(name='regId', position='Query'),
  title: string(name='title', position='Query'),
  variableId?: long(name='variableId', position='Query'),
}

model ImportNameListResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model ImportNameListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ImportNameListResponseBody(name='body'),
}

async function importNameList(request: ImportNameListRequest): ImportNameListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportNameList', 'POST', '/', 'json', false, 'json', request);
}

model ImportTemplateEventRequest {
  lang?: string(name='Lang', position='Query'),
  eventTemplateIds?: string(name='eventTemplateIds', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model ImportTemplateEventResponseBody = {
  requestId?: string(name='RequestId'),
  data?: boolean(name='data'),
}

model ImportTemplateEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ImportTemplateEventResponseBody(name='body'),
}

async function importTemplateEvent(request: ImportTemplateEventRequest): ImportTemplateEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportTemplateEvent', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAppKeyRequest {
  lang?: string(name='Lang', position='Query'),
  appKey?: string(name='appKey', position='Query'),
  memo?: string(name='memo', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model ModifyAppKeyResponseBody = {
  requestId?: string(name='RequestId'),
  data?: boolean(name='data'),
}

model ModifyAppKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAppKeyResponseBody(name='body'),
}

async function modifyAppKey(request: ModifyAppKeyRequest): ModifyAppKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAppKey', 'POST', '/', 'json', false, 'json', request);
}

model ModifyCustVariableRequest {
  lang?: string(name='Lang', position='Query'),
  condition?: string(name='condition', position='Query'),
  dataVersion: long(name='dataVersion', position='Query'),
  description?: string(name='description', position='Query'),
  eventCodes?: string(name='eventCodes', position='Query'),
  id: long(name='id', position='Query'),
  name: string(name='name', position='Query'),
  outputs?: string(name='outputs', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model ModifyCustVariableResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: [ 
    {
      failType?: string(name='failType'),
      message?: string(name='message'),
      success?: boolean(name='success'),
    }
  ](name='resultObject'),
}

model ModifyCustVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyCustVariableResponseBody(name='body'),
}

async function modifyCustVariable(request: ModifyCustVariableRequest): ModifyCustVariableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyCustVariable', 'POST', '/', 'json', false, 'json', request);
}

model ModifyEventRequest {
  lang?: string(name='Lang', position='Query'),
  bizVersion?: int32(name='bizVersion', position='Query'),
  createType?: string(name='createType', position='Query'),
  eventCode?: string(name='eventCode', position='Query'),
  inputFieldsStr?: string(name='inputFieldsStr', position='Query'),
  memo?: string(name='memo', position='Query'),
  regId?: string(name='regId', position='Query'),
  templateType?: string(name='templateType', position='Query'),
}

model ModifyEventResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model ModifyEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyEventResponseBody(name='body'),
}

async function modifyEvent(request: ModifyEventRequest): ModifyEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyEvent', 'POST', '/', 'json', false, 'json', request);
}

model ModifyEventStatusRequest {
  lang?: string(name='Lang', position='Query'),
  createType?: string(name='createType', position='Query'),
  eventCode?: string(name='eventCode', position='Query'),
  fromEventSatus?: string(name='fromEventSatus', position='Query'),
  regId?: string(name='regId', position='Query'),
  toEventSatus?: string(name='toEventSatus', position='Query'),
}

model ModifyEventStatusResponseBody = {
  requestId?: string(name='requestId'),
  resultObject?: boolean(name='resultObject'),
}

model ModifyEventStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyEventStatusResponseBody(name='body'),
}

async function modifyEventStatus(request: ModifyEventStatusRequest): ModifyEventStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyEventStatus', 'POST', '/', 'json', false, 'json', request);
}

model ModifyExpressionVariableRequest {
  lang?: string(name='Lang', position='Query'),
  dataVersion: long(name='dataVersion', position='Query'),
  description?: string(name='description', position='Query'),
  eventCode: string(name='eventCode', position='Query'),
  expression: string(name='expression', position='Query'),
  expressionTitle: string(name='expressionTitle', position='Query'),
  expressionVariable?: string(name='expressionVariable', position='Query'),
  id: long(name='id', position='Query'),
  outlier: string(name='outlier', position='Query'),
  outputs: string(name='outputs', position='Query'),
  regId: string(name='regId', position='Query'),
  title: string(name='title', position='Query'),
}

model ModifyExpressionVariableResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model ModifyExpressionVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyExpressionVariableResponseBody(name='body'),
}

async function modifyExpressionVariable(request: ModifyExpressionVariableRequest): ModifyExpressionVariableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyExpressionVariable', 'POST', '/', 'json', false, 'json', request);
}

model ModifyFieldRequest {
  lang?: string(name='Lang', position='Query'),
  classify?: string(name='classify', position='Query'),
  description?: string(name='description', position='Query'),
  enumData?: string(name='enumData', position='Query'),
  id?: long(name='id', position='Query'),
  name?: string(name='name', position='Query'),
  regId: string(name='regId', position='Query'),
  title?: string(name='title', position='Query'),
}

model ModifyFieldResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model ModifyFieldResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyFieldResponseBody(name='body'),
}

async function modifyField(request: ModifyFieldRequest): ModifyFieldResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyField', 'POST', '/', 'json', false, 'json', request);
}

model ModifyPocTaskRequest {
  lang?: string(name='Lang', position='Query'),
  accessType?: string(name='accessType', position='Query'),
  config?: string(name='config', position='Query'),
  fileName?: string(name='fileName', position='Query'),
  fileType?: string(name='fileType', position='Query'),
  fileUrl?: string(name='fileUrl', position='Query'),
  reason?: string(name='reason', position='Query'),
  regId?: string(name='regId', position='Query'),
  serviceCode?: string(name='serviceCode', position='Query'),
  serviceName?: string(name='serviceName', position='Query'),
  taskId?: string(name='taskId', position='Query'),
  taskName?: string(name='taskName', position='Query'),
  type?: string(name='type', position='Query'),
}

model ModifyPocTaskResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model ModifyPocTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyPocTaskResponseBody(name='body'),
}

async function modifyPocTask(request: ModifyPocTaskRequest): ModifyPocTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyPocTask', 'POST', '/', 'json', false, 'json', request);
}

model ModifyRulePriorityRequest {
  lang?: string(name='Lang', position='Query'),
  consoleRuleId?: long(name='consoleRuleId', position='Query'),
  priority?: int32(name='priority', position='Query'),
  regId?: string(name='regId', position='Query'),
  ruleId?: long(name='ruleId', position='Query'),
}

model ModifyRulePriorityResponseBody = {
  requestId?: string(name='requestId'),
  resultObject?: boolean(name='resultObject'),
}

model ModifyRulePriorityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyRulePriorityResponseBody(name='body'),
}

async function modifyRulePriority(request: ModifyRulePriorityRequest): ModifyRulePriorityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyRulePriority', 'POST', '/', 'json', false, 'json', request);
}

model ModifyRuleStatusRequest {
  lang?: string(name='Lang', position='Query'),
  applyUserId?: string(name='applyUserId', position='Query'),
  applyUserName?: string(name='applyUserName', position='Query'),
  auditRemark?: string(name='auditRemark', position='Query'),
  auditUserId?: string(name='auditUserId', position='Query'),
  auditUserName?: string(name='auditUserName', position='Query'),
  consoleRuleId?: long(name='consoleRuleId', position='Query'),
  eventType?: string(name='eventType', position='Query'),
  regId?: string(name='regId', position='Query'),
  ruleAuditType?: string(name='ruleAuditType', position='Query'),
  ruleId?: string(name='ruleId', position='Query'),
  ruleVersionId?: long(name='ruleVersionId', position='Query'),
}

model ModifyRuleStatusResponseBody = {
  requestId?: string(name='requestId'),
  resultObject?: boolean(name='resultObject'),
}

model ModifyRuleStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyRuleStatusResponseBody(name='body'),
}

async function modifyRuleStatus(request: ModifyRuleStatusRequest): ModifyRuleStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyRuleStatus', 'POST', '/', 'json', false, 'json', request);
}

model ModifyTemplateRequest {
  lang?: string(name='Lang', position='Query'),
  description?: string(name='description', position='Query'),
  eventCode?: string(name='eventCode', position='Query'),
  inputFields?: {
    description?: string(name='description'),
    fieldCode?: string(name='fieldCode'),
    fieldRank?: int32(name='fieldRank'),
    fieldSource?: string(name='fieldSource'),
    fieldType?: string(name='fieldType'),
    title?: string(name='title'),
  }(name='inputFields', position='Query'),
  regId?: string(name='regId', position='Query'),
  templateId?: long(name='templateId', position='Query'),
  templateType?: string(name='templateType', position='Query'),
  version?: int32(name='version', position='Query'),
}

model ModifyTemplateResponseBody = {
  requestId?: string(name='requestId'),
  resultObject?: boolean(name='resultObject'),
}

model ModifyTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyTemplateResponseBody(name='body'),
}

async function modifyTemplate(request: ModifyTemplateRequest): ModifyTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyTemplate', 'POST', '/', 'json', false, 'json', request);
}

model ModifyTemplateStatusRequest {
  lang?: string(name='Lang', position='Query'),
  fromTemplateSatus?: string(name='fromTemplateSatus', position='Query'),
  regId?: string(name='regId', position='Query'),
  templateId?: long(name='templateId', position='Query'),
  toTemplateSatus?: string(name='toTemplateSatus', position='Query'),
}

model ModifyTemplateStatusResponseBody = {
  requestId?: string(name='requestId'),
  resultObject?: boolean(name='resultObject'),
}

model ModifyTemplateStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyTemplateStatusResponseBody(name='body'),
}

async function modifyTemplateStatus(request: ModifyTemplateStatusRequest): ModifyTemplateStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyTemplateStatus', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVariableRequest {
  lang?: string(name='Lang', position='Query'),
  description?: string(name='description', position='Query'),
  id: long(name='id', position='Query'),
  regId?: string(name='regId', position='Query'),
  title: string(name='title', position='Query'),
}

model ModifyVariableResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model ModifyVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyVariableResponseBody(name='body'),
}

async function modifyVariable(request: ModifyVariableRequest): ModifyVariableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVariable', 'POST', '/', 'json', false, 'json', request);
}

model OpenConsoleSlsRequest {
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='regId', position='Query'),
  scene?: string(name='scene', position='Query'),
}

model OpenConsoleSlsResponseBody = {
  requestId?: string(name='requestId'),
  resultObject?: string(name='resultObject'),
}

model OpenConsoleSlsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OpenConsoleSlsResponseBody(name='body'),
}

async function openConsoleSls(request: OpenConsoleSlsRequest): OpenConsoleSlsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenConsoleSls', 'POST', '/', 'json', false, 'json', request);
}

model OperateFavoriteVariableRequest {
  lang?: string(name='Lang', position='Query'),
  id: long(name='id', position='Query'),
  operate: string(name='operate', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model OperateFavoriteVariableResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model OperateFavoriteVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OperateFavoriteVariableResponseBody(name='body'),
}

async function operateFavoriteVariable(request: OperateFavoriteVariableRequest): OperateFavoriteVariableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OperateFavoriteVariable', 'POST', '/', 'json', false, 'json', request);
}

model PermissionCheckRequest {
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='RegId', position='Query'),
}

model PermissionCheckResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  resultObject?: string(name='ResultObject'),
}

model PermissionCheckResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PermissionCheckResponseBody(name='body'),
}

async function permissionCheck(request: PermissionCheckRequest): PermissionCheckResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PermissionCheck', 'POST', '/', 'json', false, 'json', request);
}

model QueryAuthRuleDetailByRuleIdRequest {
  lang?: string(name='Lang', position='Query'),
  consoleRuleId?: long(name='consoleRuleId', position='Query'),
  regId: string(name='regId', position='Query'),
  ruleId?: string(name='ruleId', position='Query'),
  ruleVersionId?: long(name='ruleVersionId', position='Query'),
}

model QueryAuthRuleDetailByRuleIdResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: {
    auditId?: long(name='auditId'),
    authType?: string(name='authType'),
    authUsers?: string(name='authUsers'),
    consoleRuleId?: long(name='consoleRuleId'),
    eventCode?: string(name='eventCode'),
    eventName?: string(name='eventName'),
    gmtCreate?: long(name='gmtCreate'),
    gmtModified?: long(name='gmtModified'),
    logicExpression?: string(name='logicExpression'),
    memo?: string(name='memo'),
    priority?: long(name='priority'),
    ruleActionMap?: map[string]string(name='ruleActionMap'),
    ruleActions?: string(name='ruleActions'),
    ruleAuthType?: string(name='ruleAuthType'),
    ruleExpressions?: string(name='ruleExpressions'),
    ruleId?: string(name='ruleId'),
    ruleName?: string(name='ruleName'),
    ruleStatus?: string(name='ruleStatus'),
    ruleVersionId?: long(name='ruleVersionId'),
    templateType?: string(name='templateType'),
    version?: long(name='version'),
  }(name='resultObject'),
}

model QueryAuthRuleDetailByRuleIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAuthRuleDetailByRuleIdResponseBody(name='body'),
}

async function queryAuthRuleDetailByRuleId(request: QueryAuthRuleDetailByRuleIdRequest): QueryAuthRuleDetailByRuleIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAuthRuleDetailByRuleId', 'POST', '/', 'json', false, 'json', request);
}

model QueryAuthUserNameRequest {
  lang?: string(name='Lang', position='Query'),
  bindId?: long(name='bindId', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model QueryAuthUserNameResponseBody = {
  requestId?: string(name='requestId'),
  resultObject?: {
    company?: string(name='company'),
    userId?: long(name='userId'),
  }(name='resultObject'),
}

model QueryAuthUserNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAuthUserNameResponseBody(name='body'),
}

async function queryAuthUserName(request: QueryAuthUserNameRequest): QueryAuthUserNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAuthUserName', 'POST', '/', 'json', false, 'json', request);
}

model QueryAuthorizationUserListRequest {
  lang?: string(name='Lang', position='Query'),
  createType?: string(name='createType', position='Query'),
  eventCode?: string(name='eventCode', position='Query'),
  id?: long(name='id', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model QueryAuthorizationUserListResponseBody = {
  requestId?: string(name='requestId'),
  resultObject?: [ 
    {
      company?: string(name='company'),
      id?: long(name='id'),
      uid?: string(name='uid'),
      userId?: long(name='userId'),
    }
  ](name='resultObject'),
}

model QueryAuthorizationUserListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAuthorizationUserListResponseBody(name='body'),
}

async function queryAuthorizationUserList(request: QueryAuthorizationUserListRequest): QueryAuthorizationUserListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAuthorizationUserList', 'POST', '/', 'json', false, 'json', request);
}

model RecallRuleAuditRequest {
  id: long(name='id', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model RecallRuleAuditResponseBody = {
  requestId?: string(name='requestId'),
  resultObject?: boolean(name='resultObject'),
}

model RecallRuleAuditResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RecallRuleAuditResponseBody(name='body'),
}

async function recallRuleAudit(request: RecallRuleAuditRequest): RecallRuleAuditResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecallRuleAudit', 'POST', '/', 'json', false, 'json', request);
}

model RemoveEventRequest {
  lang?: string(name='Lang', position='Query'),
  createType?: string(name='createType', position='Query'),
  eventCode?: string(name='eventCode', position='Query'),
  id?: long(name='id', position='Query'),
  regId?: string(name='regId', position='Query'),
  templateCode?: string(name='templateCode', position='Query'),
}

model RemoveEventResponseBody = {
  requestId?: string(name='requestId'),
  resultObject?: boolean(name='resultObject'),
}

model RemoveEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveEventResponseBody(name='body'),
}

async function removeEvent(request: RemoveEventRequest): RemoveEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveEvent', 'POST', '/', 'json', false, 'json', request);
}

model RemoveTemplateRequest {
  lang?: string(name='Lang', position='Query'),
  eventCode?: string(name='eventCode', position='Query'),
  regId?: string(name='regId', position='Query'),
  templateId?: long(name='templateId', position='Query'),
  version?: int32(name='version', position='Query'),
}

model RemoveTemplateResponseBody = {
  requestId?: string(name='requestId'),
  resultObject?: boolean(name='resultObject'),
}

model RemoveTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveTemplateResponseBody(name='body'),
}

async function removeTemplate(request: RemoveTemplateRequest): RemoveTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveTemplate', 'POST', '/', 'json', false, 'json', request);
}

model SampleFileDownloadRequest {
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='RegId', position='Query'),
  tab?: string(name='Tab', position='Query'),
}

model SampleFileDownloadResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  resultObject?: string(name='ResultObject'),
}

model SampleFileDownloadResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SampleFileDownloadResponseBody(name='body'),
}

async function sampleFileDownload(request: SampleFileDownloadRequest): SampleFileDownloadResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SampleFileDownload', 'POST', '/', 'json', false, 'json', request);
}

model SaveAnalysisColumnRequest {
  lang?: string(name='Lang', position='Query'),
  columns: string(name='columns', position='Query'),
  regId: string(name='regId', position='Query'),
}

model SaveAnalysisColumnResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model SaveAnalysisColumnResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SaveAnalysisColumnResponseBody(name='body'),
}

async function saveAnalysisColumn(request: SaveAnalysisColumnRequest): SaveAnalysisColumnResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveAnalysisColumn', 'POST', '/', 'json', false, 'json', request);
}

model SaveByPassOrShuntEventRequest {
  lang?: string(name='Lang', position='Query'),
  eventId?: long(name='eventId', position='Query'),
  eventName?: string(name='eventName', position='Query'),
  eventType?: string(name='eventType', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model SaveByPassOrShuntEventResponseBody = {
  code?: string(name='code'),
  httpStatusCode?: string(name='httpStatusCode'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  resultObject?: boolean(name='resultObject'),
  success?: boolean(name='success'),
}

model SaveByPassOrShuntEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SaveByPassOrShuntEventResponseBody(name='body'),
}

async function saveByPassOrShuntEvent(request: SaveByPassOrShuntEventRequest): SaveByPassOrShuntEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveByPassOrShuntEvent', 'POST', '/', 'json', false, 'json', request);
}

model StartOrStopByPassShuntEventRequest {
  lang?: string(name='Lang', position='Query'),
  eventId?: long(name='eventId', position='Query'),
  regId?: string(name='regId', position='Query'),
  status?: string(name='status', position='Query'),
}

model StartOrStopByPassShuntEventResponseBody = {
  code?: string(name='code'),
  httpStatusCode?: string(name='httpStatusCode'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  resultObject?: boolean(name='resultObject'),
  success?: boolean(name='success'),
}

model StartOrStopByPassShuntEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartOrStopByPassShuntEventResponseBody(name='body'),
}

async function startOrStopByPassShuntEvent(request: StartOrStopByPassShuntEventRequest): StartOrStopByPassShuntEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartOrStopByPassShuntEvent', 'POST', '/', 'json', false, 'json', request);
}

model StartSimulationTaskRequest {
  lang?: string(name='Lang', position='Query'),
  id: string(name='id', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model StartSimulationTaskResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model StartSimulationTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartSimulationTaskResponseBody(name='body'),
}

async function startSimulationTask(request: StartSimulationTaskRequest): StartSimulationTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartSimulationTask', 'POST', '/', 'json', false, 'json', request);
}

model StopSimulationTaskRequest {
  lang?: string(name='Lang', position='Query'),
  id: string(name='id', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model StopSimulationTaskResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model StopSimulationTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopSimulationTaskResponseBody(name='body'),
}

async function stopSimulationTask(request: StopSimulationTaskRequest): StopSimulationTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopSimulationTask', 'POST', '/', 'json', false, 'json', request);
}

model SubmitImportTaskRequest {
  lang?: string(name='Lang', position='Query'),
  fileName?: string(name='fileName', position='Query'),
  regId?: string(name='regId', position='Query'),
  url?: string(name='url', position='Query'),
}

model SubmitImportTaskResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model SubmitImportTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitImportTaskResponseBody(name='body'),
}

async function submitImportTask(request: SubmitImportTaskRequest): SubmitImportTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitImportTask', 'POST', '/', 'json', false, 'json', request);
}

model SwitchExpressionVariableRequest {
  lang?: string(name='Lang', position='Query'),
  dataVersion: long(name='dataVersion', position='Query'),
  id: long(name='id', position='Query'),
  regId: string(name='regId', position='Query'),
  status: string(name='status', position='Query'),
}

model SwitchExpressionVariableResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model SwitchExpressionVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SwitchExpressionVariableResponseBody(name='body'),
}

async function switchExpressionVariable(request: SwitchExpressionVariableRequest): SwitchExpressionVariableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SwitchExpressionVariable', 'POST', '/', 'json', false, 'json', request);
}

model SwitchFieldRequest {
  lang?: string(name='Lang', position='Query'),
  id?: long(name='id', position='Query'),
  name?: string(name='name', position='Query'),
  regId: string(name='regId', position='Query'),
  source?: string(name='source', position='Query'),
  status?: string(name='status', position='Query'),
}

model SwitchFieldResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model SwitchFieldResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SwitchFieldResponseBody(name='body'),
}

async function switchField(request: SwitchFieldRequest): SwitchFieldResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SwitchField', 'POST', '/', 'json', false, 'json', request);
}

model SwitchQueryVariableRequest {
  lang?: string(name='Lang', position='Query'),
  id: long(name='id', position='Query'),
  regId: string(name='regId', position='Query'),
  status?: string(name='status', position='Query'),
}

model SwitchQueryVariableResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model SwitchQueryVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SwitchQueryVariableResponseBody(name='body'),
}

async function switchQueryVariable(request: SwitchQueryVariableRequest): SwitchQueryVariableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SwitchQueryVariable', 'POST', '/', 'json', false, 'json', request);
}

model SwitchToOnlineRequest {
  lang?: string(name='Lang', position='Query'),
  eventId: long(name='eventId', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model SwitchToOnlineResponseBody = {
  code?: string(name='code'),
  httpStatusCode?: string(name='httpStatusCode'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  resultObject?: boolean(name='resultObject'),
  success?: boolean(name='success'),
}

model SwitchToOnlineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SwitchToOnlineResponseBody(name='body'),
}

async function switchToOnline(request: SwitchToOnlineRequest): SwitchToOnlineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SwitchToOnline', 'POST', '/', 'json', false, 'json', request);
}

model SwitchVariableRequest {
  lang?: string(name='Lang', position='Query'),
  dataVersion?: long(name='dataVersion', position='Query'),
  id?: long(name='id', position='Query'),
  name?: string(name='name', position='Query'),
  regId?: string(name='regId', position='Query'),
  status?: string(name='status', position='Query'),
}

model SwitchVariableResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model SwitchVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SwitchVariableResponseBody(name='body'),
}

async function switchVariable(request: SwitchVariableRequest): SwitchVariableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SwitchVariable', 'POST', '/', 'json', false, 'json', request);
}

model TaskNameByUserIdRequest {
  lang?: string(name='Lang', position='Query'),
  regId?: string(name='RegId', position='Query'),
  taskName?: string(name='TaskName', position='Query'),
}

model TaskNameByUserIdResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='ResultObject'),
}

model TaskNameByUserIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TaskNameByUserIdResponseBody(name='body'),
}

async function taskNameByUserId(request: TaskNameByUserIdRequest): TaskNameByUserIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TaskNameByUserId', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAnalysisConditionFavoriteRequest {
  lang?: string(name='Lang', position='Query'),
  condition?: string(name='condition', position='Query'),
  eventBeginTime?: long(name='eventBeginTime', position='Query'),
  eventCode?: string(name='eventCode', position='Query'),
  eventEndTime?: long(name='eventEndTime', position='Query'),
  fieldName?: string(name='fieldName', position='Query'),
  fieldValue?: string(name='fieldValue', position='Query'),
  id: long(name='id', position='Query'),
  name?: string(name='name', position='Query'),
  regId: string(name='regId', position='Query'),
  type?: string(name='type', position='Query'),
}

model UpdateAnalysisConditionFavoriteResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model UpdateAnalysisConditionFavoriteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAnalysisConditionFavoriteResponseBody(name='body'),
}

async function updateAnalysisConditionFavorite(request: UpdateAnalysisConditionFavoriteRequest): UpdateAnalysisConditionFavoriteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAnalysisConditionFavorite', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAuditRequest {
  lang?: string(name='Lang', position='Query'),
  auditMsg?: string(name='auditMsg', position='Query'),
  auditRelationType?: string(name='auditRelationType', position='Query'),
  auditStatus?: string(name='auditStatus', position='Query'),
  id?: long(name='id', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model UpdateAuditResponseBody = {
  code?: string(name='code'),
  httpStatusCode?: string(name='httpStatusCode'),
  message?: string(name='message'),
  resultObject?: boolean(name='resultObject'),
  success?: boolean(name='success'),
}

model UpdateAuditResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAuditResponseBody(name='body'),
}

async function updateAudit(request: UpdateAuditRequest): UpdateAuditResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAudit', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAuthRuleRequest {
  lang?: string(name='Lang', position='Query'),
  consoleRuleId?: long(name='consoleRuleId', position='Query'),
  eventCode?: string(name='eventCode', position='Query'),
  regId: string(name='regId', position='Query'),
  ruleActions?: string(name='ruleActions', position='Query'),
  ruleExpressions: string(name='ruleExpressions', position='Query'),
  ruleId: string(name='ruleId', position='Query'),
  ruleVersionId?: long(name='ruleVersionId', position='Query'),
}

model UpdateAuthRuleResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model UpdateAuthRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAuthRuleResponseBody(name='body'),
}

async function updateAuthRule(request: UpdateAuthRuleRequest): UpdateAuthRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAuthRule', 'POST', '/', 'json', false, 'json', request);
}

model UpdateByPassShuntEventRequest {
  lang?: string(name='Lang', position='Query'),
  eventId?: long(name='eventId', position='Query'),
  eventName?: string(name='eventName', position='Query'),
  regId?: string(name='regId', position='Query'),
}

model UpdateByPassShuntEventResponseBody = {
  code?: string(name='code'),
  httpStatusCode?: string(name='httpStatusCode'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  resultObject?: boolean(name='resultObject'),
  success?: boolean(name='success'),
}

model UpdateByPassShuntEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateByPassShuntEventResponseBody(name='body'),
}

async function updateByPassShuntEvent(request: UpdateByPassShuntEventRequest): UpdateByPassShuntEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateByPassShuntEvent', 'POST', '/', 'json', false, 'json', request);
}

model UpdateDataSourceRequest {
  lang?: string(name='Lang', position='Query'),
  description?: string(name='description', position='Query'),
  id: long(name='id', position='Query'),
  name?: string(name='name', position='Query'),
  ossKey?: string(name='ossKey', position='Query'),
  regId: string(name='regId', position='Query'),
  type?: string(name='type', position='Query'),
}

model UpdateDataSourceResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model UpdateDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataSourceResponseBody(name='body'),
}

async function updateDataSource(request: UpdateDataSourceRequest): UpdateDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDataSource', 'POST', '/', 'json', false, 'json', request);
}

model UpdateQueryVariableRequest {
  lang?: string(name='Lang', position='Query'),
  dataSourceCode: string(name='dataSourceCode', position='Query'),
  description?: string(name='description', position='Query'),
  eventCode: string(name='eventCode', position='Query'),
  expression: string(name='expression', position='Query'),
  expressionTitle: string(name='expressionTitle', position='Query'),
  expressionVariable: string(name='expressionVariable', position='Query'),
  id: long(name='id', position='Query'),
  outlier: string(name='outlier', position='Query'),
  outputs: string(name='outputs', position='Query'),
  regId: string(name='regId', position='Query'),
  title: string(name='title', position='Query'),
}

model UpdateQueryVariableResponseBody = {
  requestId?: string(name='RequestId'),
  resultObject?: boolean(name='resultObject'),
}

model UpdateQueryVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateQueryVariableResponseBody(name='body'),
}

async function updateQueryVariable(request: UpdateQueryVariableRequest): UpdateQueryVariableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateQueryVariable', 'POST', '/', 'json', false, 'json', request);
}

model UpdateRuleRequest {
  lang?: string(name='Lang', position='Query'),
  consoleRuleId?: long(name='consoleRuleId', position='Query'),
  eventCode?: string(name='eventCode', position='Query'),
  logicExpression?: string(name='logicExpression', position='Query'),
  memo?: string(name='memo', position='Query'),
  regId?: string(name='regId', position='Query'),
  ruleActions?: string(name='ruleActions', position='Query'),
  ruleExpressions?: string(name='ruleExpressions', position='Query'),
  ruleId?: string(name='ruleId', position='Query'),
  ruleName?: string(name='ruleName', position='Query'),
  ruleStatus?: string(name='ruleStatus', position='Query'),
  ruleVersionId?: long(name='ruleVersionId', position='Query'),
}

model UpdateRuleResponseBody = {
  requestId?: string(name='requestId'),
  resultObject?: boolean(name='resultObject'),
}

model UpdateRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateRuleResponseBody(name='body'),
}

async function updateRule(request: UpdateRuleRequest): UpdateRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateRule', 'POST', '/', 'json', false, 'json', request);
}

model UpdateRuleBaseRequest {
  lang?: string(name='Lang', position='Query'),
  consoleRuleId?: long(name='consoleRuleId', position='Query'),
  eventCode?: string(name='eventCode', position='Query'),
  memo?: string(name='memo', position='Query'),
  regId?: string(name='regId', position='Query'),
  ruleId?: string(name='ruleId', position='Query'),
  ruleName?: string(name='ruleName', position='Query'),
}

model UpdateRuleBaseResponseBody = {
  requestId?: string(name='requestId'),
  resultObject?: boolean(name='resultObject'),
}

model UpdateRuleBaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateRuleBaseResponseBody(name='body'),
}

async function updateRuleBase(request: UpdateRuleBaseRequest): UpdateRuleBaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateRuleBase', 'POST', '/', 'json', false, 'json', request);
}

model UpdateSampleBatchRequest {
  lang?: string(name='Lang', position='Query'),
  ids?: string(name='ids', position='Query'),
  regId?: string(name='regId', position='Query'),
  tags?: string(name='tags', position='Query'),
  versions?: string(name='versions', position='Query'),
}

model UpdateSampleBatchResponseBody = {
  requestId?: string(name='RequestId'),
  data?: boolean(name='data'),
}

model UpdateSampleBatchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSampleBatchResponseBody(name='body'),
}

async function updateSampleBatch(request: UpdateSampleBatchRequest): UpdateSampleBatchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSampleBatch', 'POST', '/', 'json', false, 'json', request);
}

model UploadSampleApiRequest {
  dataType: string(name='DataType', example='ip', position='Query'),
  dataValue: string(name='DataValue', example='["123.124.125.126","123.124.125.127"]', position='Query'),
  sampleType: string(name='SampleType', example='block', position='Query'),
  service: string(name='Service', example='account_abuse,coupon_abuse,account_takeover', position='Query'),
}

model UploadSampleApiResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='4A91D2D1-AEC9-1658-ABCE-5A39DE66A5C2'),
}

model UploadSampleApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UploadSampleApiResponseBody(name='body'),
}

async function uploadSampleApi(request: UploadSampleApiRequest): UploadSampleApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UploadSampleApi', 'POST', '/', 'json', false, 'json', request);
}

