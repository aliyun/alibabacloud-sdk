/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('privatelink', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddUserToVpcEndpointServiceRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate a value, but you must make sure that the value is unique among different requests. The token can contain only ASCII characters.', example='0c593ea1-3bea-11e9-b96b-88e9fe637760'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to check the request without performing the operation. Valid values:

*   **true**: sends a request for check purposes only. If you select this option, the account ID is not added to the whitelist after the request passes the check. The system checks the required parameters, request syntax, and limits. If the request fails to pass the check, the corresponding error message is returned. If the request passes the check, the `DryRunOperation` error code is returned.
*   **false**: sends a common request. If the request passes the check, a 2xx HTTP status code is returned, and the operation is performed. This is the default value.', example='false'),
  regionId?: string(name='RegionId', description='The ID of the region where the endpoint service is deployed. You can call the [DescribeRegions](~~120468~~) operation to query the most recent region list.', example='eu-west-1'),
  serviceId?: string(name='ServiceId', description='The ID of the endpoint service.', example='epsrv-hp3vpx8yqxblby3i****'),
  userARN?: string(name='UserARN', description='The whitelist in the format of Aliyun Resource Name (ARN).', example='acs:ram:*:<account-id>:*'),
  userId?: long(name='UserId', description='The account ID that you want to add to the whitelist.', example='132193271328****'),
}

model AddUserToVpcEndpointServiceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model AddUserToVpcEndpointServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddUserToVpcEndpointServiceResponseBody(name='body'),
}

/**
  * You cannot use the **AddUserToVpcEndpointService** operation to add an Alibaba Cloud account to multiple service whitelists at the same time.
  *
  * @param request AddUserToVpcEndpointServiceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return AddUserToVpcEndpointServiceResponse
 */
async function addUserToVpcEndpointServiceWithOptions(request: AddUserToVpcEndpointServiceRequest, runtime: Util.RuntimeOptions): AddUserToVpcEndpointServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.serviceId)) {
    query['ServiceId'] = request.serviceId;
  }
  if (!Util.isUnset(request.userARN)) {
    query['UserARN'] = request.userARN;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddUserToVpcEndpointService',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You cannot use the **AddUserToVpcEndpointService** operation to add an Alibaba Cloud account to multiple service whitelists at the same time.
  *
  * @param request AddUserToVpcEndpointServiceRequest
  * @return AddUserToVpcEndpointServiceResponse
 */
async function addUserToVpcEndpointService(request: AddUserToVpcEndpointServiceRequest): AddUserToVpcEndpointServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return addUserToVpcEndpointServiceWithOptions(request, runtime);
}

model AddZoneToVpcEndpointRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='0c593ea1-3bea-11e9-b96b-88e9fe637760'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to only precheck this request. Valid values:

*   **true**: only prechecks the API request without performing the operation. The system prechecks whether your AccessKey pair is valid, whether the Resource Access Management (RAM) user is authorized, and whether required parameters are set. If the request fails to pass the precheck, an error code is returned. If the request passes the precheck, the `DryRunOperation` error code is returned.
*   **false** (default): sends the API request. If the request passes the precheck, a 2xx HTTP status code is returned and the operation is performed.', example='false'),
  endpointId?: string(name='EndpointId', description='The ID of the endpoint for which you want to add a zone.', example='ep-hp33b2e43fays7s8****'),
  regionId?: string(name='RegionId', description='The ID of the region where the endpoint is created.

You can call the [DescribeRegions](~~120468~~) operation to query the most recent region list.', example='cn-hangzhou'),
  vSwitchId?: string(name='VSwitchId', description='The vSwitch in the zone to be added. The system automatically creates an endpoint elastic network interface (ENI) in the vSwitch.', example='vsw-hjkshjvdkdvd****'),
  zoneId?: string(name='ZoneId', description='The ID of the zone to be added.', example='cn-hangzhou-b'),
  ip?: string(name='ip', description='The IP address of the endpoint ENI in the zone to be added.', example='192.XX.XX.32'),
}

model AddZoneToVpcEndpointResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0c593ea1-3bea-11e9-b96b-88e9fe637760'),
}

model AddZoneToVpcEndpointResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddZoneToVpcEndpointResponseBody(name='body'),
}

/**
  * - **AddZoneToVpcEndpoint** is an asynchronous operation. After you send a request, the system returns a request ID. However, the operation is still being performed in the system background. You can call the [ListVpcEndpointZones](https://www.alibabacloud.com/help/en/privatelink/latest/listvpcendpointzones) operation to query the state of the zones of the endpoint.   - If a zone of the endpoint is in the **Creating** state, it indicates that the zone is being added.
  *   - If the zone is in the zone list of the endpoint, it indicates that the zone is added.
  * - You cannot call the **AddZoneToVpcEndpoint** operation to add multiple zones to an endpoint at the same time.
  *
  * @param request AddZoneToVpcEndpointRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return AddZoneToVpcEndpointResponse
 */
async function addZoneToVpcEndpointWithOptions(request: AddZoneToVpcEndpointRequest, runtime: Util.RuntimeOptions): AddZoneToVpcEndpointResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.endpointId)) {
    query['EndpointId'] = request.endpointId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  if (!Util.isUnset(request.ip)) {
    query['ip'] = request.ip;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddZoneToVpcEndpoint',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * - **AddZoneToVpcEndpoint** is an asynchronous operation. After you send a request, the system returns a request ID. However, the operation is still being performed in the system background. You can call the [ListVpcEndpointZones](https://www.alibabacloud.com/help/en/privatelink/latest/listvpcendpointzones) operation to query the state of the zones of the endpoint.   - If a zone of the endpoint is in the **Creating** state, it indicates that the zone is being added.
  *   - If the zone is in the zone list of the endpoint, it indicates that the zone is added.
  * - You cannot call the **AddZoneToVpcEndpoint** operation to add multiple zones to an endpoint at the same time.
  *
  * @param request AddZoneToVpcEndpointRequest
  * @return AddZoneToVpcEndpointResponse
 */
async function addZoneToVpcEndpoint(request: AddZoneToVpcEndpointRequest): AddZoneToVpcEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  return addZoneToVpcEndpointWithOptions(request, runtime);
}

model AttachResourceToVpcEndpointServiceRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that the value is unique among different requests. The client token can contain only ASCII characters and cannot exceed 64 characters in length.', example='0c593ea1-3bea-11e9-b96b-88e9fe637760'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to check the request without performing the operation. Valid values:

*   **true**: checks the request without performing the operation. The service resource is not added. The system checks whether your AccessKey pair is valid, whether the Resource Access Management (RAM) user is authorized, and whether required parameters are set. If the request fails the check, an error message is returned. If the request passes the check, the `DryRunOperation` error code is returned.
*   **false**: sends the request. If the request passes the check, a 2xx HTTP status code is returned and the operation is performed. This is the default value.', example='false'),
  regionId?: string(name='RegionId', description='The ID of the region where the endpoint service is created.

You can call the [DescribeRegions](~~120468~~) operation to query the available regions.', example='cn-hangzhou'),
  resourceId?: string(name='ResourceId', description='The ID of the service resource.', example='lb-hp32z1wp5peaoox2q****'),
  resourceType?: string(name='ResourceType', description='The type of the service resource. Valid values:

*   **slb**: specifies that the service resource is a Classic Load Balancer (CLB) instance that supports PrivateLink. In addition, the CLB instance is deployed in a virtual private cloud (VPC).
*   **alb**: specifies that the service resource is an Application Load Balancer (ALB) instance that supports PrivateLink. In addition, the ALB instance is deployed in a VPC.', example='slb'),
  serviceId?: string(name='ServiceId', description='The endpoint service to which you want to add the service resource.', example='epsrv-hp3vpx8yqxblby3i****'),
}

model AttachResourceToVpcEndpointServiceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model AttachResourceToVpcEndpointServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AttachResourceToVpcEndpointServiceResponseBody(name='body'),
}

async function attachResourceToVpcEndpointServiceWithOptions(request: AttachResourceToVpcEndpointServiceRequest, runtime: Util.RuntimeOptions): AttachResourceToVpcEndpointServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.serviceId)) {
    query['ServiceId'] = request.serviceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AttachResourceToVpcEndpointService',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function attachResourceToVpcEndpointService(request: AttachResourceToVpcEndpointServiceRequest): AttachResourceToVpcEndpointServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachResourceToVpcEndpointServiceWithOptions(request, runtime);
}

model AttachSecurityGroupToVpcEndpointRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate a value that is unique among different requests. **ClientToken** can contain only ASCII characters and cannot exceed 64 characters in length.', example='0c593ea1-3bea-11e9-b96b-88e9fe637760'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to only check the API request. Valid values:

**true**: only checks the API request. If you select this option, the endpoint is not associated with the security group after the request passes the check. Check items include whether the AccessKey pair is valid, whether the RAM user is authorized, and whether the required parameters are specified. If the request fails to meet the requirements in the check items, an error message is returned. If the request meets the requirements in the check items, the `DryRunOperation` error code is returned.

**false** (default): checks the API request. After the request passes the check, the 2XX HTTP status code is returned, and the endpoint is associated with the security group.', example='false'),
  endpointId?: string(name='EndpointId', description='The ID of the endpoint that you want to associate with the security group.', example='ep-hp33b2e43fays7s8****'),
  regionId?: string(name='RegionId', description='The ID of the region where the endpoint is created. You can call the [DescribeRegions](~~120468~~) operation to query region IDs.', example='eu-west-1'),
  securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group with which you want to associate the endpoint.', example='sg-hp3c8qj1tyct90ej****'),
}

model AttachSecurityGroupToVpcEndpointResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='8D778FF9-7640-4C13-BCD6-9265CA9A2F81'),
}

model AttachSecurityGroupToVpcEndpointResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AttachSecurityGroupToVpcEndpointResponseBody(name='body'),
}

async function attachSecurityGroupToVpcEndpointWithOptions(request: AttachSecurityGroupToVpcEndpointRequest, runtime: Util.RuntimeOptions): AttachSecurityGroupToVpcEndpointResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.endpointId)) {
    query['EndpointId'] = request.endpointId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AttachSecurityGroupToVpcEndpoint',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function attachSecurityGroupToVpcEndpoint(request: AttachSecurityGroupToVpcEndpointRequest): AttachSecurityGroupToVpcEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachSecurityGroupToVpcEndpointWithOptions(request, runtime);
}

model CheckProductOpenResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='8D8992C1-6712-423C-BAC5-E5E817484C6B'),
  success?: boolean(name='Success', description='Indicates whether PrivateLink is activated.

Only **true** is returned, which indicates that PrivateLink is activated.', example='true'),
}

model CheckProductOpenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckProductOpenResponseBody(name='body'),
}

async function checkProductOpenWithOptions(runtime: Util.RuntimeOptions): CheckProductOpenResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'CheckProductOpen',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkProductOpen(): CheckProductOpenResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkProductOpenWithOptions(runtime);
}

model CheckResourceSupportOperateRequest {
  resourceId?: string(name='ResourceId', description='The ID of the resource.', example='lb-hp32z1wp5peaoox2q****'),
  resourceType?: string(name='ResourceType', description='The type of the service resource. Valid values:

*   **NLB**: Network Load Balancer.
*   **CLB**: Classic Load Balancer.
*   **ALB**: Application Load Balancer.', example='NLB'),
  zoneId?: string(name='ZoneId', description='The ID of the zone.

You can call the [DescribeZones](~~120502~~) operation to query the most recent zone list.', example='cn-hangzhou-b'),
}

model CheckResourceSupportOperateResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='8D8992C1-6712-423C-BAC5-E5E817484C6B'),
  resourceCanBeDowngraded?: boolean(name='ResourceCanBeDowngraded', description='Indicates whether the service resource can be downgraded. Valid values:

*   **true**: The service resource can be downgraded.
*   **false**: The service resource cannot be downgraded.', example='false'),
  resourceZoneCanBeDeleted?: boolean(name='ResourceZoneCanBeDeleted', description='Indicates whether the zone to which the service resource belongs can be deleted. Valid values:

*   **true**: The zone can be deleted.
*   **false**: The zone cannot be deleted.', example='false'),
}

model CheckResourceSupportOperateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckResourceSupportOperateResponseBody(name='body'),
}

async function checkResourceSupportOperateWithOptions(request: CheckResourceSupportOperateRequest, runtime: Util.RuntimeOptions): CheckResourceSupportOperateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckResourceSupportOperate',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkResourceSupportOperate(request: CheckResourceSupportOperateRequest): CheckResourceSupportOperateResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkResourceSupportOperateWithOptions(request, runtime);
}

model CreateVpcEndpointRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate a value, but you must make sure that the value is unique among different requests. The client token can contain only ASCII characters.', example='0c593ea1-3bea-11e9-b96b-88e9fe637760'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to check a request without performing the operation. Valid values:

*   **true**: sends a request for check purpose only. If you select this option, the endpoint is not created after the request passes the check. The system checks the required parameters, request syntax, and limits. If the request fails to pass the check, the corresponding error message is returned. If the request passes the check, the `DryRunOperation` error code is returned.
*   **false** (default): sends a common request. If the request passes the check, the 2xx HTTP status code is returned, and the operation is performed.', example='false'),
  endpointDescription?: string(name='EndpointDescription', description='The description of the endpoint.

The description must be 2 to 256 characters in length, and cannot start with `http://` or `https://`.', example='This is my Endpoint.'),
  endpointName?: string(name='EndpointName', description='The name of the endpoint.

The name must be 2 to 128 characters in length, and can contain digits, underscores (\\_), and hyphens (-). The name must start with a letter.', example='test'),
  endpointType?: string(name='EndpointType', description='The type of the endpoint.

Set the value to **Interface**. Then, you can specify Application Load Balancer (ALB) and Classic Load Balancer (CLB) instances as service resources for endpoint services.', example='Interface'),
  protectedEnabled?: boolean(name='ProtectedEnabled', description='Specifies whether to enable user authentication. This parameter is available in Security Token Service (STS) mode. Valid values:

*   **true**: enables user authentication. After user authentication is enabled, only the user who creates the endpoint can modify or delete the endpoint in STS mode.
*   **false** (default): disables user authentication.', example='false'),
  regionId?: string(name='RegionId', description='The region ID of the endpoint.

You can call the [DescribeRegions](~~120468~~) operation to query the most recent region list.', example='cn-huhehaote'),
  resourceGroupId?: string(name='ResourceGroupId', description='Specifies the ID of the resource group.', example='rg-acfmy*****'),
  securityGroupId?: [ string ](name='SecurityGroupId', example='sg-hp33bw6ynvm2yb0e****'),
  serviceId?: string(name='ServiceId', description='The endpoint service with which the endpoint is associated.', example='epsrv-hp3xdsq46ael67lo****'),
  serviceName?: string(name='ServiceName', description='The name of the endpoint service with which the endpoint is associated.', example='com.aliyuncs.privatelink.cn-huhehaote.epsrv-hp3vpx8yqxblby3i****'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag that is attached to the resource.

The tag key cannot be an empty string. The tag key can be up to 64 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='env'),
      value?: string(name='Value', description='The value of the tag that is attached to the resource.

The tag values can be 0 to 128 characters in length, and cannot start with `aliyun` or `acs:`. It cannot contain `http://` or `https://`.', example='prod'),
    }
  ](name='Tag', description='The list of tags. You can specify a maximum of 20 tags.'),
  vpcId?: string(name='VpcId', description='The virtual private cloud (VPC) to which the endpoint belongs.', example='vpc-hp356stwkxg3fn2xe****'),
  zone?: [ 
    {
      vSwitchId?: string(name='VSwitchId', description='The vSwitch where you want to create the ENI in the zone.

You can specify up to 10 vSwitches.', example='vsw-hp3uf6045ljdhd5zr****'),
      zoneId?: string(name='ZoneId', description='The zone of the endpoint service.

You can specify up to 10 zones.', example='cn-huhehaote-b'),
      ip?: string(name='ip', description='The IP address of the zone in which the endpoint is deployed.

You can specify up to 10 IP addresses.', example='192.168.XX.XX'),
    }
  ](name='Zone'),
  zonePrivateIpAddressCount?: long(name='ZonePrivateIpAddressCount', description='The number of private IP addresses that are assigned to an elastic network interface (ENI) in each zone. Set the value to **1**.', example='1'),
}

model CreateVpcEndpointResponseBody = {
  bandwidth?: long(name='Bandwidth', description='The maximum bandwidth of the endpoint connection. Unit: Mbit/s.', example='200'),
  connectionStatus?: string(name='ConnectionStatus', description='The state of the endpoint connection. Valid values:

*   **Pending**: The connection is being modified.
*   **Connecting**: The connection is being established.
*   **Connected**: The connection is established.
*   **Disconnecting**: The endpoint is being disconnected from the endpoint service.
*   **Disconnected**: The endpoint is disconnected from the endpoint service.
*   **Deleting**: The connection is being deleted.', example='Disconnected'),
  createTime?: string(name='CreateTime', description='The time when the endpoint was created.', example='2022-01-02T19:11:12Z'),
  endpointBusinessStatus?: string(name='EndpointBusinessStatus', description='The business state of the endpoint. Valid values:

*   **Normal**: The endpoint runs as expected.
*   **FinacialLocked**: The endpoint is locked due to overdue payments.', example='Normal'),
  endpointDescription?: string(name='EndpointDescription', description='The description of the endpoint.', example='This is my Endpoint.'),
  endpointDomain?: string(name='EndpointDomain', description='The domain name of the endpoint.', example='ep-hp33b2e43fays7s8****.epsrv-hp3xdsq46ael67lo****.cn-huhehaote.privatelink.aliyuncs.com'),
  endpointId?: string(name='EndpointId', description='The ID of the endpoint.', example='ep-hp33b2e43fays7s8****'),
  endpointName?: string(name='EndpointName', description='The name of the endpoint.', example='test'),
  endpointStatus?: string(name='EndpointStatus', description='The state of the endpoint. Valid values:

*   **Creating**: The endpoint is being created.
*   **Active**: The endpoint is available.
*   **Pending**: The endpoint is being modified.
*   **Deleting**: The endpoint is being deleted.', example='Active'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
  serviceId?: string(name='ServiceId', description='The ID of the endpoint service with which the endpoint is associated.', example='epsrv-hp3vpx8yqxblby3i****'),
  serviceName?: string(name='ServiceName', description='The name of the endpoint service with which the endpoint is associated.', example='com.aliyuncs.privatelink.cn-huhehaote.epsrv-hp3xdsq46ael67lo****'),
  vpcId?: string(name='VpcId', description='The VPC to which the endpoint belongs.', example='vpc-hp356stwkxg3fn2xe****'),
}

model CreateVpcEndpointResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateVpcEndpointResponseBody(name='body'),
}

/**
  * **CreateVpcEndpoint** is an asynchronous operation. After you send a request, the system returns a request ID. However, the operation is still being performed in the system background. You can call the [GetVpcEndpointAttribute](~~183568~~) operation to query the creation state of the endpoint.
  * *   If the endpoint is in the **Creating** state, it indicates that the endpoint is being created.
  * *   If the endpoint is in the **Active** state, it indicates that the endpoint is created.
  *
  * @param request CreateVpcEndpointRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateVpcEndpointResponse
 */
async function createVpcEndpointWithOptions(request: CreateVpcEndpointRequest, runtime: Util.RuntimeOptions): CreateVpcEndpointResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.endpointDescription)) {
    query['EndpointDescription'] = request.endpointDescription;
  }
  if (!Util.isUnset(request.endpointName)) {
    query['EndpointName'] = request.endpointName;
  }
  if (!Util.isUnset(request.endpointType)) {
    query['EndpointType'] = request.endpointType;
  }
  if (!Util.isUnset(request.protectedEnabled)) {
    query['ProtectedEnabled'] = request.protectedEnabled;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.serviceId)) {
    query['ServiceId'] = request.serviceId;
  }
  if (!Util.isUnset(request.serviceName)) {
    query['ServiceName'] = request.serviceName;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.zone)) {
    query['Zone'] = request.zone;
  }
  if (!Util.isUnset(request.zonePrivateIpAddressCount)) {
    query['ZonePrivateIpAddressCount'] = request.zonePrivateIpAddressCount;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateVpcEndpoint',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * **CreateVpcEndpoint** is an asynchronous operation. After you send a request, the system returns a request ID. However, the operation is still being performed in the system background. You can call the [GetVpcEndpointAttribute](~~183568~~) operation to query the creation state of the endpoint.
  * *   If the endpoint is in the **Creating** state, it indicates that the endpoint is being created.
  * *   If the endpoint is in the **Active** state, it indicates that the endpoint is created.
  *
  * @param request CreateVpcEndpointRequest
  * @return CreateVpcEndpointResponse
 */
async function createVpcEndpoint(request: CreateVpcEndpointRequest): CreateVpcEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVpcEndpointWithOptions(request, runtime);
}

model CreateVpcEndpointServiceRequest {
  autoAcceptEnabled?: boolean(name='AutoAcceptEnabled', description='Specifies whether to automatically accept endpoint connection requests. Valid values:

*   **true**: automatically accepts endpoint connection requests.
*   **false**: does not automatically accept endpoint connection requests. This is the default value.', example='false'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The client token can contain only ASCII characters.', example='0c593ea1-3bea-11e9-b96b-88e9fe637760'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to only precheck this request. Valid values:

*   **true**: prechecks the request without creating an endpoint service. The system checks the required parameters, request syntax, and limits. If the request fails to pass the precheck, an error code is returned. If the request passes the precheck, the `DryRunOperation` error code is returned.
*   **false**: sends the request. This is the default value. If the request passes the precheck, a 2xx HTTP status code is returned and the operation is performed.', example='false'),
  payer?: string(name='Payer', description='The payer of the endpoint service. Valid values:

*   **Endpoint**: the service consumer.
*   **EndpointService**: the service provider.', example='Endpoint'),
  regionId?: string(name='RegionId', description='The ID of the region in which you want to create an endpoint service.

You can call the [DescribeRegions](~~120468~~) operation to query the available regions.', example='cn-huhehaote'),
  resource?: [ 
    {
      resourceId?: string(name='ResourceId', description='The ID of the service resource that is added to the endpoint service.', example='lb-hp32z1wp5peaoox2q****'),
      resourceType?: string(name='ResourceType', description='The type of the service resource that is added to the endpoint service. Valid values:

*   **slb**: The service resource type is CLB.
*   **alb**: The service resource type is ALB.

>  By default, the feature to specify ALB instances as the service resources of endpoint services is unavailable. If you need to use the feature,[submit a ticket](https://workorder-intl.console.aliyun.com/#/ticket/crea).

In regions in which PrivateLink is supported, CLB instances in virtual private clouds (VPCs) can serve as service resources of the endpoint service. For more information, see [Internal-facing CLB supports PrivateLink](~~301724~~).', example='slb'),
      zoneId?: string(name='ZoneId', description='The ID of the zone.', example='cn-huhehaote-a'),
    }
  ](name='Resource', description='The list of the service resource that is added to the endpoint service.

You can specify up to 20 service resources.'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmy*****'),
  serviceDescription?: string(name='ServiceDescription', description='The description of the endpoint service.', example='This is my EndpointService.'),
  serviceResourceType?: string(name='ServiceResourceType', description='The type of the service resource. Valid values:

*   **slb**: The service resource type is Classic Load Balancer (CLB).
*   **alb**: The service resource type is Application Load Balancer (ALB).

>  By default, the feature to specify ALB instances as the service resources of endpoint services is unavailable. If you need to use the feature,[submit a ticket](https://workorderintl.console.aliyun.com/#/ticket/crea).', example='slb'),
  serviceSupportIPv6?: boolean(name='ServiceSupportIPv6', description='Specifies whether to enable IPv6 for the endpoint service. Valid values:

*   **true**: enables IPv6 for the endpoint service.
*   **false**: does not enable IPv6 for the endpoint service. This is the default value.', example='false'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag.

The key cannot exceed 64 characters in length, and cannot start with `aliyun` or `acs:`. It cannot contain `http://` or `https://`.', example='env'),
      value?: string(name='Value', description='The tag value.

The value cannot exceed 128 characters in length, and cannot start with `aliyun` or `acs:`. It cannot contain `http://` or `https://`.', example='prod'),
    }
  ](name='Tag', description='The tags. Up to 20 tags are allowed.'),
  zoneAffinityEnabled?: boolean(name='ZoneAffinityEnabled', description='Specifies whether to enable zone affinity. Valid values:

*   **true**: enables zone affinity.
*   **false**: does not enable zone affinity. This is the default value.', example='false'),
}

model CreateVpcEndpointServiceResponseBody = {
  autoAcceptEnabled?: boolean(name='AutoAcceptEnabled', description='Indicates whether endpoint connection requests are automatically accepted. Valid values:

*   **true**: Endpoint connection requests are automatically accepted.
*   **false**: Endpoint connection requests are not automatically accepted.', example='false'),
  createTime?: string(name='CreateTime', description='The time when the endpoint service was created.', example='2022-01-02T19:11:12Z'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8D8992C1-6712-423C-BAC5-E5E817484C6B'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmy*****'),
  serviceBusinessStatus?: string(name='ServiceBusinessStatus', description='The status of the endpoint service feature. Valid values:

*   **Normal**: The feature is normal.
*   **FinacialLocked**: The feature is locked due to overdue payments.', example='Normal'),
  serviceDescription?: string(name='ServiceDescription', description='The description of the endpoint service.', example='This is my EndpointService.'),
  serviceDomain?: string(name='ServiceDomain', description='The domain name of the endpoint service.', example='epsrv-hp3vpx8yqxblby3i****.cn-huhehaote.privatelink.aliyuncs.com'),
  serviceId?: string(name='ServiceId', description='The ID of the endpoint service.', example='epsrv-hp3vpx8yqxblby3i****'),
  serviceName?: string(name='ServiceName', description='The name of the endpoint service.', example='com.aliyuncs.privatelink.cn-huhehaote.epsrv-hp3vpx8yqxblby3i****'),
  serviceStatus?: string(name='ServiceStatus', description='The status of the endpoint service. Valid values:

*   **Creating**: The endpoint service is being created.
*   **Pending**: The endpoint service is being modified.
*   **Active**: The endpoint service is available.
*   **Deleting**: The endpoint service is being deleted.
*   **Inactive**: The endpoint service is unavailable.', example='Active'),
  serviceSupportIPv6?: boolean(name='ServiceSupportIPv6', description='Indicates whether the endpoint service supports IPv6. Valid values:

*   **true**: The endpoint service supports IPv6.
*   **false**: The endpoint service does not support IPv6.', example='false'),
  zoneAffinityEnabled?: boolean(name='ZoneAffinityEnabled', description='Indicates whether zone affinity is enabled. Valid values:

*   **true**: Zone affinity is enabled.
*   **false**: Zone affinity is disabled.', example='false'),
}

model CreateVpcEndpointServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateVpcEndpointServiceResponseBody(name='body'),
}

/**
  * **CreateVpcEndpointService** is an asynchronous operation. After you send a request to call this operation, the system returns a service ID. However, the endpoint service is still being created in the background. You can call the [GetVpcEndpointServiceAttribute](~~183542~~) operation to query the status of an endpoint service.
  * *   If the endpoint service is in the **Creating** state, the endpoint service is being created.
  * *   If the endpoint service is in the **Active** state, the endpoint service is created.
  *
  * @param request CreateVpcEndpointServiceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateVpcEndpointServiceResponse
 */
async function createVpcEndpointServiceWithOptions(request: CreateVpcEndpointServiceRequest, runtime: Util.RuntimeOptions): CreateVpcEndpointServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoAcceptEnabled)) {
    query['AutoAcceptEnabled'] = request.autoAcceptEnabled;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.payer)) {
    query['Payer'] = request.payer;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.serviceDescription)) {
    query['ServiceDescription'] = request.serviceDescription;
  }
  if (!Util.isUnset(request.serviceResourceType)) {
    query['ServiceResourceType'] = request.serviceResourceType;
  }
  if (!Util.isUnset(request.serviceSupportIPv6)) {
    query['ServiceSupportIPv6'] = request.serviceSupportIPv6;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.zoneAffinityEnabled)) {
    query['ZoneAffinityEnabled'] = request.zoneAffinityEnabled;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateVpcEndpointService',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * **CreateVpcEndpointService** is an asynchronous operation. After you send a request to call this operation, the system returns a service ID. However, the endpoint service is still being created in the background. You can call the [GetVpcEndpointServiceAttribute](~~183542~~) operation to query the status of an endpoint service.
  * *   If the endpoint service is in the **Creating** state, the endpoint service is being created.
  * *   If the endpoint service is in the **Active** state, the endpoint service is created.
  *
  * @param request CreateVpcEndpointServiceRequest
  * @return CreateVpcEndpointServiceResponse
 */
async function createVpcEndpointService(request: CreateVpcEndpointServiceRequest): CreateVpcEndpointServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVpcEndpointServiceWithOptions(request, runtime);
}

model DeleteVpcEndpointRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate a value, but you must make sure that the value is unique among different requests. The token can contain only ASCII characters.', example='0c593ea1-3bea-11e9-b96b-88e9fe637760'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to check the request without performing the operation. Default values:

*   **true**: sends a request for check purposes only. If you select this option, the endpoint is not deleted after the request passes the check. The system checks the required parameters, request syntax, and limits. If the request fails to pass the check, the corresponding error message is returned. If the request passes the check, the `DryRunOperation` error code is returned.
*   **false**: sends a common request. If the request passes the check, a 2xx HTTP status code is returned, and the operation is performed. This is the default value.', example='false'),
  endpointId?: string(name='EndpointId', description='The ID of the endpoint that you want to delete.', example='ep-hp33b2e43fays7s8****'),
  regionId?: string(name='RegionId', description='The ID of the region where the endpoint is deployed. You can call the [DescribeRegions](~~120468~~) operation to obtain the region ID.', example='eu-west-1'),
}

model DeleteVpcEndpointResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='8D8992C1-6712-423C-BAC5-E5E817484C6B'),
}

model DeleteVpcEndpointResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteVpcEndpointResponseBody(name='body'),
}

/**
  * **DeleteVpcEndpoint** is an asynchronous operation. After you send a request, the system returns a request ID. However, the operation is still being performed in the system background. You can call the [GetVpcEndpointAttribute](~~183568~~) operation to query whether the endpoint is deleted.
  * *   If the endpoint is in the **Deleting** state, it indicates that the endpoint is being deleted.
  * *   If the specified endpoint cannot be queried, it indicates that the endpoint is deleted.
  *
  * @param request DeleteVpcEndpointRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteVpcEndpointResponse
 */
async function deleteVpcEndpointWithOptions(request: DeleteVpcEndpointRequest, runtime: Util.RuntimeOptions): DeleteVpcEndpointResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.endpointId)) {
    query['EndpointId'] = request.endpointId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteVpcEndpoint',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * **DeleteVpcEndpoint** is an asynchronous operation. After you send a request, the system returns a request ID. However, the operation is still being performed in the system background. You can call the [GetVpcEndpointAttribute](~~183568~~) operation to query whether the endpoint is deleted.
  * *   If the endpoint is in the **Deleting** state, it indicates that the endpoint is being deleted.
  * *   If the specified endpoint cannot be queried, it indicates that the endpoint is deleted.
  *
  * @param request DeleteVpcEndpointRequest
  * @return DeleteVpcEndpointResponse
 */
async function deleteVpcEndpoint(request: DeleteVpcEndpointRequest): DeleteVpcEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVpcEndpointWithOptions(request, runtime);
}

model DeleteVpcEndpointServiceRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate a value, but you must make sure that the value is unique among different requests. The token can contain only ASCII characters.', example='0c593ea1-3bea-11e9-b96b-88e9fe637760'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to check a request without performing the operation. Valid values:

*   **true**: sends a request for check purposes only. If you select this option, the endpoint service is not deleted after the request passes the check. The system checks the required parameters, request syntax, and limits. If the request fails to pass the check, the corresponding error message is returned. If the request passes the check, the `DryRunOperation` error code is returned.
*   **false** (default): sends a common request. If the request passes the check, the 2xx HTTP status code is returned, and the operation is performed.', example='false'),
  regionId?: string(name='RegionId', description='The ID of the region to which the endpoint service belongs. You can call the [DescribeRegions](~~120468~~) operation to query the most recent region list.', example='eu-west-1'),
  serviceId?: string(name='ServiceId', description='The ID of the endpoint service that you want to delete.', example='epsrv-hp3vpx8yqxblby3i****'),
}

model DeleteVpcEndpointServiceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model DeleteVpcEndpointServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteVpcEndpointServiceResponseBody(name='body'),
}

/**
  * *   **DeleteVpcEndpointService** is an asynchronous operation. After you send a request, the system returns a request ID. However, the operation is still being performed in the system background. You can call the [GetVpcEndpointServiceAttribute](~~183542~~) operation to query whether the endpoint service is deleted.
  *     *   If the endpoint service is in the **Deleting** state, it indicates that the endpoint service is being deleted.
  *     *   If the endpoint service is in the **Deleted** state, it indicates that the endpoint service is deleted.
  * *   You cannot use the **DeleteVpcEndpointService** operation to delete multiple endpoint services of an Alibaba Cloud account at the same time.
  *
  * @param request DeleteVpcEndpointServiceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteVpcEndpointServiceResponse
 */
async function deleteVpcEndpointServiceWithOptions(request: DeleteVpcEndpointServiceRequest, runtime: Util.RuntimeOptions): DeleteVpcEndpointServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.serviceId)) {
    query['ServiceId'] = request.serviceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteVpcEndpointService',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   **DeleteVpcEndpointService** is an asynchronous operation. After you send a request, the system returns a request ID. However, the operation is still being performed in the system background. You can call the [GetVpcEndpointServiceAttribute](~~183542~~) operation to query whether the endpoint service is deleted.
  *     *   If the endpoint service is in the **Deleting** state, it indicates that the endpoint service is being deleted.
  *     *   If the endpoint service is in the **Deleted** state, it indicates that the endpoint service is deleted.
  * *   You cannot use the **DeleteVpcEndpointService** operation to delete multiple endpoint services of an Alibaba Cloud account at the same time.
  *
  * @param request DeleteVpcEndpointServiceRequest
  * @return DeleteVpcEndpointServiceResponse
 */
async function deleteVpcEndpointService(request: DeleteVpcEndpointServiceRequest): DeleteVpcEndpointServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVpcEndpointServiceWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      localName?: string(name='LocalName', description='The name of the region.', example='China (Hangzhou)'),
      regionEndpoint?: string(name='RegionEndpoint', description='The endpoint of the region.', example='privatelink.cn-hangzhou.aliyuncs.com'),
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
    }
  ](name='Region')
  }(name='Regions', description='The list of regions.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='611CB80C-B6A9-43DB-9E38-0B0AC3D9B58F'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRegions',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeZonesRequest {
  regionId?: string(name='RegionId', description='The ID of the region where you want to query zones. You can call the [DescribeRegions](~~120468~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model DescribeZonesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='611CB80C-B6A9-43DB-9E38-0B0AC3D9B58F'),
  zones?: {
    zone?: [ 
    {
      localName?: string(name='LocalName', description='The name of the zone.', example='Hangzhou Zone B'),
      zoneId?: string(name='ZoneId', description='The ID of the zone.', example='cn-hangzhou-b'),
    }
  ](name='Zone')
  }(name='Zones', description='The zones that are returned.'),
}

model DescribeZonesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeZonesResponseBody(name='body'),
}

async function describeZonesWithOptions(request: DescribeZonesRequest, runtime: Util.RuntimeOptions): DescribeZonesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeZones',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeZones(request: DescribeZonesRequest): DescribeZonesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeZonesWithOptions(request, runtime);
}

model DetachResourceFromVpcEndpointServiceRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate a value, but you must make sure that the value is unique among different requests. The token can contain only ASCII characters.', example='0c593ea1-3bea-11e9-b96b-88e9fe637760'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to check the request without performing the operation. Valid values:

*   **true**: sends a request for check purposes only. If you select this option, the service resource is not removed after the request passes the check. The system checks the required parameters, request syntax, and limits. If the request fails to pass the check, the corresponding error message is returned. If the request passes the check, the `DryRunOperation` error code is returned.
*   **false**: sends a common request. If the request passes the check, an 2xx HTTP status code is returned, and the operation is performed. This is the default value.', example='false'),
  regionId?: string(name='RegionId', description='The ID of the region where the endpoint service is deployed. You can call the [DescribeRegions](~~120468~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceId?: string(name='ResourceId', description='The ID of the service resource.', example='lb-hp32z1wp5peaoox2q****'),
  resourceType?: string(name='ResourceType', description='The type of the service resource. Valid values:

*   **slb**: specifies that the service resource is a Classic Load Balancer (CLB) instance that supports PrivateLink. In addition, the CLB instance is deployed in a virtual private cloud (VPC).
*   **alb**: specifies that the service resource is an Application Load Balancer (ALB) instance that supports PrivateLink. In addition, the ALB instance is deployed in a VPC.

>  By default, the feature to specify ALB instances as the service resources of endpoint services is unavailable. If you need to use the feature, [submit a ticket](https://workorder-intl.console.aliyun.com/#/ticket/crea).', example='slb'),
  serviceId?: string(name='ServiceId', description='The ID of the endpoint service from which you want to remove the service resource.', example='epsrv-hp3vpx8yqxblby3i****'),
}

model DetachResourceFromVpcEndpointServiceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model DetachResourceFromVpcEndpointServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DetachResourceFromVpcEndpointServiceResponseBody(name='body'),
}

/**
  * You cannot use the **DetachResourceFromVpcEndpointService** operation to remove multiple service resources from an endpoint service at the same time.
  *
  * @param request DetachResourceFromVpcEndpointServiceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DetachResourceFromVpcEndpointServiceResponse
 */
async function detachResourceFromVpcEndpointServiceWithOptions(request: DetachResourceFromVpcEndpointServiceRequest, runtime: Util.RuntimeOptions): DetachResourceFromVpcEndpointServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.serviceId)) {
    query['ServiceId'] = request.serviceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetachResourceFromVpcEndpointService',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You cannot use the **DetachResourceFromVpcEndpointService** operation to remove multiple service resources from an endpoint service at the same time.
  *
  * @param request DetachResourceFromVpcEndpointServiceRequest
  * @return DetachResourceFromVpcEndpointServiceResponse
 */
async function detachResourceFromVpcEndpointService(request: DetachResourceFromVpcEndpointServiceRequest): DetachResourceFromVpcEndpointServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachResourceFromVpcEndpointServiceWithOptions(request, runtime);
}

model DetachSecurityGroupFromVpcEndpointRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate a value, but you must make sure that the value is unique among different requests. The client token can contain only ASCII characters.', example='0c593ea1-3bea-11e9-b96b-88e9fe637760'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to check the request without performing the operation. Valid values:

*   **true**: sends a request for check purpose only. If you select this option, the endpoint is still associated with the security group after the request passes the check. The system checks whether your AccessKey pair is valid, whether RAM users are granted required permissions, and whether the required parameters are set. If the request fails to pass the check, the corresponding error message is returned. If the request passes the check, the `DryRunOperation` error code is returned.
*   **false** (default): sends a common request. If the request passes the check, the 2xx HTTP status code is returned, and the operation is performed.', example='false'),
  endpointId?: string(name='EndpointId', description='The ID of the endpoint that you want to disassociate from the security group.', example='ep-hp33b2e43fays7s8****'),
  regionId?: string(name='RegionId', description='The ID of the region to which the endpoint belongs. You can call the [DescribeRegions](~~120468#doc-api-Privatelink-DescribeRegions~~) operation to query the most recent region list.', example='eu-west-1'),
  securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group from which you want to disassociate the endpoint.', example='sg-hp3c8qj1tyct90ej****'),
}

model DetachSecurityGroupFromVpcEndpointResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='8D778FF9-7640-4C13-BCD6-9265CA9A2F81'),
}

model DetachSecurityGroupFromVpcEndpointResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DetachSecurityGroupFromVpcEndpointResponseBody(name='body'),
}

/**
  * *   **DetachSecurityGroupFromVpcEndpoint** is an asynchronous operation. After you send a request, the system returns a request ID. However, the operation is still being performed in the system background. You can call the [ListVpcEndpoints](~~183558#doc-api-Privatelink-ListVpcEndpoints~~) operation to query whether the endpoint is disassociated from the security group.
  *     *   If the endpoint is in the **Pending** state, it indicates that the endpoint is being disassociated from the security group.
  *     *   If the endpoint is in the **Active** state, it indicates that the endpoint is disassociated from the security group.
  * *   You cannot use the **DetachSecurityGroupFromVpcEndpoint** operation to disassociate an endpoint from multiple security groups at the same time.
  *
  * @param request DetachSecurityGroupFromVpcEndpointRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DetachSecurityGroupFromVpcEndpointResponse
 */
async function detachSecurityGroupFromVpcEndpointWithOptions(request: DetachSecurityGroupFromVpcEndpointRequest, runtime: Util.RuntimeOptions): DetachSecurityGroupFromVpcEndpointResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.endpointId)) {
    query['EndpointId'] = request.endpointId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetachSecurityGroupFromVpcEndpoint',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   **DetachSecurityGroupFromVpcEndpoint** is an asynchronous operation. After you send a request, the system returns a request ID. However, the operation is still being performed in the system background. You can call the [ListVpcEndpoints](~~183558#doc-api-Privatelink-ListVpcEndpoints~~) operation to query whether the endpoint is disassociated from the security group.
  *     *   If the endpoint is in the **Pending** state, it indicates that the endpoint is being disassociated from the security group.
  *     *   If the endpoint is in the **Active** state, it indicates that the endpoint is disassociated from the security group.
  * *   You cannot use the **DetachSecurityGroupFromVpcEndpoint** operation to disassociate an endpoint from multiple security groups at the same time.
  *
  * @param request DetachSecurityGroupFromVpcEndpointRequest
  * @return DetachSecurityGroupFromVpcEndpointResponse
 */
async function detachSecurityGroupFromVpcEndpoint(request: DetachSecurityGroupFromVpcEndpointRequest): DetachSecurityGroupFromVpcEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachSecurityGroupFromVpcEndpointWithOptions(request, runtime);
}

model DisableVpcEndpointConnectionRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate a value, but you must make sure that the value is unique among different requests. The token can contain only ASCII characters.', example='0c593ea1-3bea-11e9-b96b-88e9fe637760'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to check the request without performing the operation. Valid values:

*   **true**: sends a request for check purposes only. If you select this option, the connection request is not rejected after the request passes the check. The system checks the required parameters, request syntax, and limits. If the request fails to pass the check, the corresponding error message is returned. If the request passes the check, the `DryRunOperation` error code is returned.
*   **false**: sends a common request. If the request passes the check, a 2xx HTTP status code is returned, and the operation is performed. This is the default value.', example='false'),
  endpointId?: string(name='EndpointId', description='The ID of the endpoint.', example='ep-hp33b2e43fays7s8****'),
  regionId?: string(name='RegionId', description='The region ID where the connection request from the endpoint is rejected

You can call the [DescribeRegions](~~120468~~) operation to obtain the region ID.', example='eu-west-1'),
  serviceId?: string(name='ServiceId', description='The ID of the endpoint service.', example='epsrv-hp3vpx8yqxblby3i****'),
}

model DisableVpcEndpointConnectionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model DisableVpcEndpointConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableVpcEndpointConnectionResponseBody(name='body'),
}

/**
  * *   **DisableVpcEndpointConnection** is an asynchronous operation. After you send a request, the system returns a request ID. However, the operation is still being performed in the system background. You can call the [GetVpcEndpointAttribute](~~183568~~) operation to query the connection state of an endpoint.
  *     *   If the endpoint connection is in the **Disconnecting** state, it indicates that the endpoint is being disconnected from the endpoint service.
  *     *   If the endpoint connection is in the **Disconnected** state, it indicates that the endpoint is disconnected from the endpoint service.
  * *   The **DisableVpcEndpointConnection** operation does not allow an endpoint service of the same Alibaba Cloud account to reject connection requests from multiple endpoints at the same time.
  *
  * @param request DisableVpcEndpointConnectionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DisableVpcEndpointConnectionResponse
 */
async function disableVpcEndpointConnectionWithOptions(request: DisableVpcEndpointConnectionRequest, runtime: Util.RuntimeOptions): DisableVpcEndpointConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.endpointId)) {
    query['EndpointId'] = request.endpointId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.serviceId)) {
    query['ServiceId'] = request.serviceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableVpcEndpointConnection',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   **DisableVpcEndpointConnection** is an asynchronous operation. After you send a request, the system returns a request ID. However, the operation is still being performed in the system background. You can call the [GetVpcEndpointAttribute](~~183568~~) operation to query the connection state of an endpoint.
  *     *   If the endpoint connection is in the **Disconnecting** state, it indicates that the endpoint is being disconnected from the endpoint service.
  *     *   If the endpoint connection is in the **Disconnected** state, it indicates that the endpoint is disconnected from the endpoint service.
  * *   The **DisableVpcEndpointConnection** operation does not allow an endpoint service of the same Alibaba Cloud account to reject connection requests from multiple endpoints at the same time.
  *
  * @param request DisableVpcEndpointConnectionRequest
  * @return DisableVpcEndpointConnectionResponse
 */
async function disableVpcEndpointConnection(request: DisableVpcEndpointConnectionRequest): DisableVpcEndpointConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableVpcEndpointConnectionWithOptions(request, runtime);
}

model DisableVpcEndpointZoneConnectionRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='0c593ea1-3bea-11e9-b96b-88e9fe637760'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to only precheck the request. Valid values:

*   **true**: only prechecks the API request without performing the operation. The system checks whether your AccessKey pair is valid, whether the Resource Access Management (RAM) user is authorized, and whether required parameters are set. If the request fails to pass the precheck, an error code is returned. If the request passes the check, the `DryRunOperation` error code is returned.
*   **false** (default): sends the request. If the request passes the precheck, a 2xx HTTP status code is returned and the operation is performed.', example='false'),
  endpointId?: string(name='EndpointId', description='The ID of the endpoint.', example='ep-hp33b2e43fays7s8****'),
  regionId?: string(name='RegionId', description='The region ID of the endpoint from which you want to reject connection requests.

You can call the [DescribeRegions](~~120468~~) operation to query the most recent region list.', example='cn-hangzhou'),
  replacedResource?: boolean(name='ReplacedResource', description='Specifies whether to disconnect the endpoint from previous connections after migration. Valid values:

*   **true**: yes
*   **false** (default): no

>  Set the value to true if you want to disconnect the endpoint from the previous connections in the zone after migration.', example='false'),
  serviceId?: string(name='ServiceId', description='The ID of the endpoint service.', example='epsrv-hp3vpx8yqxblby3i****'),
  zoneId?: string(name='ZoneId', description='The ID of the zone associated with the endpoint.', example='cn-hangzhou-b'),
}

model DisableVpcEndpointZoneConnectionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model DisableVpcEndpointZoneConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableVpcEndpointZoneConnectionResponseBody(name='body'),
}

/**
  * >  You can call this operation only when the status of the endpoint is **Connected** and the status of the zone associated with the endpoint is **Connected** or **Migrated**.
  *
  * @param request DisableVpcEndpointZoneConnectionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DisableVpcEndpointZoneConnectionResponse
 */
async function disableVpcEndpointZoneConnectionWithOptions(request: DisableVpcEndpointZoneConnectionRequest, runtime: Util.RuntimeOptions): DisableVpcEndpointZoneConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.endpointId)) {
    query['EndpointId'] = request.endpointId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.replacedResource)) {
    query['ReplacedResource'] = request.replacedResource;
  }
  if (!Util.isUnset(request.serviceId)) {
    query['ServiceId'] = request.serviceId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableVpcEndpointZoneConnection',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  You can call this operation only when the status of the endpoint is **Connected** and the status of the zone associated with the endpoint is **Connected** or **Migrated**.
  *
  * @param request DisableVpcEndpointZoneConnectionRequest
  * @return DisableVpcEndpointZoneConnectionResponse
 */
async function disableVpcEndpointZoneConnection(request: DisableVpcEndpointZoneConnectionRequest): DisableVpcEndpointZoneConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableVpcEndpointZoneConnectionWithOptions(request, runtime);
}

model EnableVpcEndpointConnectionRequest {
  bandwidth?: int32(name='Bandwidth', description='The bandwidth of the endpoint connection. Valid values: **1024‒10240**. Unit: Mbit/s.

>  The value range of this parameter is **100‒10240** Mbit/s. The default value of this parameter is **1024** Mbit/s. When the endpoint is connected with the endpoint service, the value of this parameter indicates the minimum bandwidth. When the default value of this parameter is used, the connection bandwidth range is **1024‒10240** Mbit/s.', example='1024'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate a value, but you must ensure that the value is unique among all requests. The token can contain only ASCII characters.', example='0c593ea1-3bea-11e9-b96b-88e9fe637760'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to check the request without performing the operation. Valid values:

*   **true**: sends a request for check purposes only. If you select this option, the connection requests are not accepted after the request passes the check. The system checks the required parameters, request syntax, and limits. If the request fails to pass the check, the corresponding error message is returned. If the request passes the check, the `DryRunOperation` error code is returned.
*   **false**: sends a common request. If the request passes the check, a 2xx HTTP status code is returned, and the operation is performed. This is the default value.', example='false'),
  endpointId?: string(name='EndpointId', description='The ID of the endpoint.', example='ep-hp33b2e43fays7s8****'),
  regionId?: string(name='RegionId', description='The ID of the region where the connection requests are accepted.

You can call the [DescribeRegions](~~120468~~) operation to query the most recent region list.', example='cn-huhehaote'),
  serviceId?: string(name='ServiceId', description='The ID of the endpoint service.', example='epsrv-hp3vpx8yqxblby3i****'),
}

model EnableVpcEndpointConnectionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model EnableVpcEndpointConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableVpcEndpointConnectionResponseBody(name='body'),
}

/**
  * *   **EnableVpcEndpointConnection** is an asynchronous operation. After you send a request, the system returns a request ID. However, the operation is still being performed in the system background. You can call the [GetVpcEndpointAttribute](~~183568~~) operation to query the state of the endpoint connection.
  *     *   If the state is **Connecting**, it indicates that the endpoint connection is being established.
  *     *   If the state is **Connected**, it indicates that the endpoint connection is established.
  * *   The **EnableVpcEndpointConnection** operation does not allow an endpoint service of an Alibaba Cloud account to accept connection requests from multiple endpoints at the same time.
  *
  * @param request EnableVpcEndpointConnectionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return EnableVpcEndpointConnectionResponse
 */
async function enableVpcEndpointConnectionWithOptions(request: EnableVpcEndpointConnectionRequest, runtime: Util.RuntimeOptions): EnableVpcEndpointConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.endpointId)) {
    query['EndpointId'] = request.endpointId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.serviceId)) {
    query['ServiceId'] = request.serviceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableVpcEndpointConnection',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   **EnableVpcEndpointConnection** is an asynchronous operation. After you send a request, the system returns a request ID. However, the operation is still being performed in the system background. You can call the [GetVpcEndpointAttribute](~~183568~~) operation to query the state of the endpoint connection.
  *     *   If the state is **Connecting**, it indicates that the endpoint connection is being established.
  *     *   If the state is **Connected**, it indicates that the endpoint connection is established.
  * *   The **EnableVpcEndpointConnection** operation does not allow an endpoint service of an Alibaba Cloud account to accept connection requests from multiple endpoints at the same time.
  *
  * @param request EnableVpcEndpointConnectionRequest
  * @return EnableVpcEndpointConnectionResponse
 */
async function enableVpcEndpointConnection(request: EnableVpcEndpointConnectionRequest): EnableVpcEndpointConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableVpcEndpointConnectionWithOptions(request, runtime);
}

model EnableVpcEndpointZoneConnectionRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate a value, but you must make sure that the value is unique among different requests. The client token can contain only ASCII characters.', example='0c593ea1-3bea-11e9-b96b-88e9fe637760'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to check the request without performing the operation. Default values:

*   **true**: sends a request for check purposes only. If you select this option, the connection request is not accepted after the request passes the check. The system checks the required parameters, request syntax, and limits. If the request fails to pass the check, the corresponding error message is returned. If the request passes the check, the `DryRunOperation` error code is returned.
*   **false**: sends a common request. If the request passes the check, a 2xx HTTP status code is returned, and the operation is performed. This is the default value.', example='false'),
  endpointId?: string(name='EndpointId', description='The ID of the endpoint.', example='ep-hp33b2e43fays7s8****'),
  regionId?: string(name='RegionId', description='The ID of the region where the endpoint connection request is accepted. You can call the [DescribeRegions](~~120468~~) operation to obtain the region ID.', example='cn-hangzhou'),
  serviceId?: string(name='ServiceId', description='The ID of the endpoint service.', example='epsrv-hp3vpx8yqxblby3i****'),
  zoneId?: string(name='ZoneId', description='The ID of the zone associated with the endpoint.', example='cn-hangzhou-b'),
}

model EnableVpcEndpointZoneConnectionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model EnableVpcEndpointZoneConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableVpcEndpointZoneConnectionResponseBody(name='body'),
}

/**
  * *   You can call this operation only when the state of the endpoint is **Connected** and the state of the associated zone is **Disconnected**.
  * *   **EnableVpcEndpointZoneConnection** is an asynchronous operation. After you send a request, the system returns a request ID. However, the operation is still being performed in the system background. You can call the [ListVpcEndpointZones](~~183560~~) operation to query whether the endpoint service accepts a connection request from an endpoint in the associated zone.
  *     *   If the zone is in the **Connecting** state, it indicates that the endpoint service is accepting the connection request from the endpoint.
  *     *   If the zone is in the **Connected** state, it indicates that the endpoint service accepts the connection request from the endpoint.
  * *   You cannot use the **EnableVpcEndpointZoneConnection** operation to allow an endpoint service to accept multiple connection requests from the same endpoint in the associated zone at the same time.
  *
  * @param request EnableVpcEndpointZoneConnectionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return EnableVpcEndpointZoneConnectionResponse
 */
async function enableVpcEndpointZoneConnectionWithOptions(request: EnableVpcEndpointZoneConnectionRequest, runtime: Util.RuntimeOptions): EnableVpcEndpointZoneConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.endpointId)) {
    query['EndpointId'] = request.endpointId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.serviceId)) {
    query['ServiceId'] = request.serviceId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableVpcEndpointZoneConnection',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   You can call this operation only when the state of the endpoint is **Connected** and the state of the associated zone is **Disconnected**.
  * *   **EnableVpcEndpointZoneConnection** is an asynchronous operation. After you send a request, the system returns a request ID. However, the operation is still being performed in the system background. You can call the [ListVpcEndpointZones](~~183560~~) operation to query whether the endpoint service accepts a connection request from an endpoint in the associated zone.
  *     *   If the zone is in the **Connecting** state, it indicates that the endpoint service is accepting the connection request from the endpoint.
  *     *   If the zone is in the **Connected** state, it indicates that the endpoint service accepts the connection request from the endpoint.
  * *   You cannot use the **EnableVpcEndpointZoneConnection** operation to allow an endpoint service to accept multiple connection requests from the same endpoint in the associated zone at the same time.
  *
  * @param request EnableVpcEndpointZoneConnectionRequest
  * @return EnableVpcEndpointZoneConnectionResponse
 */
async function enableVpcEndpointZoneConnection(request: EnableVpcEndpointZoneConnectionRequest): EnableVpcEndpointZoneConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableVpcEndpointZoneConnectionWithOptions(request, runtime);
}

model GetEndpointAttributeByNsiAndServiceIdRequest {
  aliUid?: long(name='AliUid'),
  dryRun?: boolean(name='DryRun'),
  nextToken?: string(name='NextToken'),
  nsiIndex?: string(name='NsiIndex'),
  regionId?: string(name='RegionId'),
  serviceId?: string(name='ServiceId'),
}

model GetEndpointAttributeByNsiAndServiceIdResponseBody = {
  bandwidth?: int32(name='Bandwidth'),
  connectionStatus?: string(name='ConnectionStatus'),
  endpointId?: string(name='EndpointId'),
  endpointName?: string(name='EndpointName'),
  endpointStatus?: string(name='EndpointStatus'),
  endpointType?: string(name='EndpointType'),
  payer?: string(name='Payer'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
  resourceOwner?: boolean(name='ResourceOwner'),
  serviceId?: string(name='ServiceId'),
  serviceName?: string(name='ServiceName'),
  vpcId?: string(name='VpcId'),
  zoneAffinityEnabled?: boolean(name='ZoneAffinityEnabled'),
  zonePrivateIpAddressCount?: long(name='ZonePrivateIpAddressCount'),
}

model GetEndpointAttributeByNsiAndServiceIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetEndpointAttributeByNsiAndServiceIdResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request GetEndpointAttributeByNsiAndServiceIdRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetEndpointAttributeByNsiAndServiceIdResponse
 */
// Deprecated
async function getEndpointAttributeByNsiAndServiceIdWithOptions(request: GetEndpointAttributeByNsiAndServiceIdRequest, runtime: Util.RuntimeOptions): GetEndpointAttributeByNsiAndServiceIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliUid)) {
    query['AliUid'] = request.aliUid;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.nsiIndex)) {
    query['NsiIndex'] = request.nsiIndex;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.serviceId)) {
    query['ServiceId'] = request.serviceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetEndpointAttributeByNsiAndServiceId',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request GetEndpointAttributeByNsiAndServiceIdRequest
  * @return GetEndpointAttributeByNsiAndServiceIdResponse
 */
// Deprecated
async function getEndpointAttributeByNsiAndServiceId(request: GetEndpointAttributeByNsiAndServiceIdRequest): GetEndpointAttributeByNsiAndServiceIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEndpointAttributeByNsiAndServiceIdWithOptions(request, runtime);
}

model GetVpcEndpointAttributeRequest {
  endpointId?: string(name='EndpointId', description='The ID of the endpoint that you want to query.', example='ep-hp33b2e43fays7s8****'),
  regionId?: string(name='RegionId', description='The region ID of the endpoint.

You can call the [DescribeRegions](~~120468~~) operation to query the most recent region list.', example='cn-huhehaote'),
}

model GetVpcEndpointAttributeResponseBody = {
  bandwidth?: int32(name='Bandwidth', description='The bandwidth of the endpoint connection. Unit: Mbit/s.', example='1024'),
  connectionStatus?: string(name='ConnectionStatus', description='The status of the endpoint connection. Valid values:

*   **Pending**: being modified
*   **Connecting**: connecting
*   **Connected**: connected
*   **Disconnecting**: disconnecting
*   **Disconnected**: disconnected
*   **Deleting**: being deleted', example='Connected'),
  createTime?: string(name='CreateTime', description='The time when the endpoint was created.', example='2021-09-24T18:00:07Z'),
  endpointBusinessStatus?: string(name='EndpointBusinessStatus', description='The business status of the endpoint. Valid values:

*   **Normal**: normal
*   **FinacialLocked**: locked due to overdue payments', example='Normal'),
  endpointDescription?: string(name='EndpointDescription', description='The description of the endpoint.', example='This is my Endpoint.'),
  endpointDomain?: string(name='EndpointDomain', description='The domain name of the endpoint.', example='ep-hp33b2e43fays7s8****.epsrv-hp3xdsq46ael67lo****.cn-huhehaote.privatelink.aliyuncs.com'),
  endpointId?: string(name='EndpointId', description='The ID of the endpoint.', example='ep-hp33b2e43fays7s8****'),
  endpointName?: string(name='EndpointName', description='The name of the endpoint.', example='test'),
  endpointStatus?: string(name='EndpointStatus', description='The status of the endpoint. Valid values:

*   **Creating**: being created
*   **Active**: available
*   **Pending**: being modified
*   **Deleting**: being deleted', example='Active'),
  endpointType?: string(name='EndpointType', description='The type of the endpoint.

The value is set to **Interface**, which indicates that the resource type of **ServiceId** is Classic Load Balancer (CLB).', example='Interface'),
  payer?: string(name='Payer', description='The payer. Valid values:

*   **Endpoint**: the service consumer
*   **EndpointService**: the service provider', example='Endpoint'),
  regionId?: string(name='RegionId', description='The region ID of the endpoint.', example='cn-huhehaote'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8D8992C1-6712-423C-BAC5-E5E817484C6B'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmz7nocpei***'),
  resourceOwner?: boolean(name='ResourceOwner', description='Indicates whether the endpoint and the endpoint service belong to the same Alibaba Cloud account. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
  serviceId?: string(name='ServiceId', description='The ID of the endpoint service with which the endpoint is associated.', example='epsrv-hp3vpx8yqxblby3i****'),
  serviceName?: string(name='ServiceName', description='The name of the endpoint service that is associated with the endpoint.', example='com.aliyuncs.privatelink.cn-huhehaote.epsrv-hp3xdsq46ael67lo****'),
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC) to which the endpoint belongs.', example='vpc-fdfhkjafhjvcvdjf****'),
  zoneAffinityEnabled?: boolean(name='ZoneAffinityEnabled', description='Indicates whether zone affinity is enabled. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
  zonePrivateIpAddressCount?: long(name='ZonePrivateIpAddressCount', description='The number of private IP addresses that can be used by an elastic network interface (ENI) in each zone. The value is set to **1**.', example='1'),
}

model GetVpcEndpointAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetVpcEndpointAttributeResponseBody(name='body'),
}

async function getVpcEndpointAttributeWithOptions(request: GetVpcEndpointAttributeRequest, runtime: Util.RuntimeOptions): GetVpcEndpointAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endpointId)) {
    query['EndpointId'] = request.endpointId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetVpcEndpointAttribute',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getVpcEndpointAttribute(request: GetVpcEndpointAttributeRequest): GetVpcEndpointAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getVpcEndpointAttributeWithOptions(request, runtime);
}

model GetVpcEndpointServiceAttributeRequest {
  regionId?: string(name='RegionId', description='The ID of the region to which the endpoint service belongs.

You can call the [DescribeRegions](~~120468~~) operation to query the available regions.', example='cn-hangzhou'),
  serviceId?: string(name='ServiceId', description='The ID of the endpoint service.', example='epsrv-hp3vpx8yqxblby3i****'),
}

model GetVpcEndpointServiceAttributeResponseBody = {
  autoAcceptEnabled?: boolean(name='AutoAcceptEnabled', description='Indicates whether endpoint connection requests are automatically accepted. Valid values:

*   **true**: automatically accepts endpoint connection requests.
*   **false**: does not automatically accept endpoint connection requests.', example='true'),
  connectBandwidth?: int32(name='ConnectBandwidth', description='The default maximum bandwidth of the endpoint connection. Unit: Mbit/s. Valid values: **100** to 10240.', example='1024'),
  createTime?: string(name='CreateTime', description='The time when the endpoint service was created.', example='2020-01-02T19:11:12Z'),
  maxBandwidth?: int32(name='MaxBandwidth', description='The maximum bandwidth of the endpoint connection. Unit: Mbit/s.', example='1024'),
  minBandwidth?: int32(name='MinBandwidth', description='The minimum bandwidth of the endpoint connection. Unit: Mbit/s.', example='100'),
  payer?: string(name='Payer', description='The payer of the endpoint service. Valid values:

*   **Endpoint**: the service consumer.
*   **EndpointService**: the service provider.', example='Endpoint'),
  regionId?: string(name='RegionId', description='The region to which the endpoint service belongs.', example='cn-huhehaote'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8D8992C1-6712-423C-BAC5-E5E817484C6B'),
  resourceGroupId?: string(name='ResourceGroupId', description='Specifies the ID of the resource group.', example='rg-acfmy*****'),
  serviceBusinessStatus?: string(name='ServiceBusinessStatus', description='The business status of the endpoint service. Valid values:

*   **Normal**: The endpoint service runs as expected.
*   **FinacialLocked**: The endpoint service is locked due to overdue payments.', example='Normal'),
  serviceDescription?: string(name='ServiceDescription', description='The description of the endpoint service.', example='This is my EndpointService.'),
  serviceDomain?: string(name='ServiceDomain', description='The domain name of the endpoint service.', example='epsrv-hp3vpx8yqxblby3i****.cn-huhehaote.privatelink.aliyuncs.com'),
  serviceId?: string(name='ServiceId', description='The ID of the endpoint service.', example='epsrv-hp3vpx8yqxblby3i****'),
  serviceName?: string(name='ServiceName', description='The name of the endpoint service.', example='com.aliyuncs.privatelink.cn-huhehaote.epsrv-hp3vpx8yqxblby3i****'),
  serviceResourceType?: string(name='ServiceResourceType', description='The type of the service resource.

The value is set to **slb**, which indicates CLB.', example='slb'),
  serviceStatus?: string(name='ServiceStatus', description='The state of the endpoint service. Valid values:

*   **Creating**: The endpoint service is being created.
*   **Pending**: The endpoint service is being modified.
*   **Active**: The endpoint service is available.
*   **Deleting**: The endpoint service is being deleted.
*   **Inactive**: The endpoint service is unavailable.', example='Active'),
  serviceSupportIPv6?: boolean(name='ServiceSupportIPv6', description='Indicates whether the endpoint service supports IPv6. Valid values:

*   **true**: The endpoint service supports IPv6.
*   **false**: The endpoint service does not support IPv6. This is the default value.', example='false'),
  serviceType?: string(name='ServiceType', description='The type of the endpoint service.

The value is set to **Interface**. This value is used when **ServiceResourceType** is set to **slb**. The value indicates the Classic Load Balancer (CLB) type.', example='Interface'),
  zoneAffinityEnabled?: boolean(name='ZoneAffinityEnabled', description='Specifies whether to enable zone affinity. Valid values:

*   **true**: enables zone affinity.
*   **false**: disables zone affinity.', example='true'),
  zones?: [ string ](name='Zones', description='The zones to which the service resource belongs.'),
}

model GetVpcEndpointServiceAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetVpcEndpointServiceAttributeResponseBody(name='body'),
}

async function getVpcEndpointServiceAttributeWithOptions(request: GetVpcEndpointServiceAttributeRequest, runtime: Util.RuntimeOptions): GetVpcEndpointServiceAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.serviceId)) {
    query['ServiceId'] = request.serviceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetVpcEndpointServiceAttribute',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getVpcEndpointServiceAttribute(request: GetVpcEndpointServiceAttributeRequest): GetVpcEndpointServiceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getVpcEndpointServiceAttributeWithOptions(request, runtime);
}

model ListVpcEndpointConnectionsRequest {
  connectionId?: long(name='ConnectionId', description='The ID of the endpoint connection.

>  This parameter is required only when a gateway is used for load balancing.', example='123'),
  connectionStatus?: string(name='ConnectionStatus', description='The status of the endpoint connection. Valid values:

*   **Pending**: being modified.
*   **Connecting**: connecting.
*   **Connected**: connected.
*   **Disconnecting**: disconnecting.
*   **Disconnected**: disconnected.
*   **Deleting**: being deleted.
*   **ServiceDeleted**: The corresponding endpoint service is deleted.', example='Disconnected'),
  endpointId?: string(name='EndpointId', description='The ID of the endpoint.', example='ep-hp33b2e43fays7s8****'),
  endpointOwnerId?: long(name='EndpointOwnerId', description='The ID of the Alibaba Cloud account to which the endpoint belongs.', example='25346073170691****'),
  eniId?: string(name='EniId', description='The ID of the endpoint elastic network interface (ENI).', example='eni-hp32lk0pyv6o94hs****'),
  maxResults?: int32(name='MaxResults', description='The number of entries returned per page. Valid values: **1** to **50**. Default value: **50**.', example='50'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. Valid values:

*   If this is your first query or no next query is to be sent, ignore this parameter.
*   If a next query is to be sent, set the value to the value of **NextToken** that is returned from the last call.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  regionId?: string(name='RegionId', description='The region ID of the endpoint connection.

You can call the [DescribeRegions](~~120468~~) operation to query the most recent region list.', example='cn-huhehaote'),
  replacedResourceId?: string(name='ReplacedResourceId', description='The ID of the replaced service resource in smooth migration scenarios.', example='lb-hp32z1wp5peaoox2q****'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmy*****'),
  resourceId?: string(name='ResourceId', description='The ID of the service resource.', example='lb-hp32z1wp5peaoox2q****'),
  serviceId?: string(name='ServiceId', description='The ID of the endpoint service.', example='epsrv-hp3vpx8yqxblby3i****'),
}

model ListVpcEndpointConnectionsResponseBody = {
  connections?: [ 
    {
      bandwidth?: int32(name='Bandwidth', description='The bandwidth of the endpoint connection. Unit: Mbit/s. Valid values: **1024 to 10240**.', example='1024'),
      connectionStatus?: string(name='ConnectionStatus', description='The status of the endpoint connection. Valid values:

*   **Pending**: being modified.
*   **Connecting**: connecting.
*   **Connected**: connected.
*   **Disconnecting**: disconnecting.
*   **Disconnected**: disconnected.
*   **Deleting**: being deleted.
*   **ServiceDeleted**: The corresponding endpoint service is deleted.', example='Disconnected'),
      endpointId?: string(name='EndpointId', description='The ID of the endpoint.', example='ep-hp33b2e43fays7s8****'),
      endpointOwnerId?: long(name='EndpointOwnerId', description='The ID of the Alibaba Cloud account to which the endpoint belongs.', example='25346073170691****'),
      endpointVpcId?: string(name='EndpointVpcId', description='The virtual private cloud (VPC) to which the endpoint belongs.', example='vpc-hp356stwkxg3fn2xe****'),
      modifiedTime?: string(name='ModifiedTime', description='The time when the endpoint connection was modified.', example='2021-09-28T10:34:46Z'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the endpoint belongs.', example='rg-acfmw353z35v***'),
      resourceOwner?: boolean(name='ResourceOwner', description='Indicates whether the endpoint and the endpoint service belong to the same Alibaba Cloud account. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
      serviceId?: string(name='ServiceId', description='The ID of the endpoint service.', example='epsrv-hp3vpx8yqxblby3i****'),
      zones?: [ 
        {
          connectionId?: long(name='ConnectionId', description='The ID of the endpoint connection.

>  This parameter is returned only when a gateway is used for load balancing.', example='123'),
          connectionStringId?: string(name='ConnectionStringId', description='The ID of the endpoint connection.

>  This parameter is returned only when a gateway is used for load balancing. This parameter returns the value of the **ConnectionId** parameter as a **string**.', example='12345'),
          eniId?: string(name='EniId', description='The ID of the endpoint elastic network interface (ENI).', example='eni-hp32lk0pyv6o94hs****'),
          replacedEniId?: string(name='ReplacedEniId', description='The ID of the replaced endpoint ENI in smooth migration scenarios.', example='eni-hp32lk0pyv6o94hs****'),
          replacedResourceId?: string(name='ReplacedResourceId', description='The ID of the replaced service resource in smooth migration scenarios.', example='lb-hp32z1wp5peaoox2q****'),
          resourceId?: string(name='ResourceId', description='The ID of the service resource.', example='lb-hp32z1wp5peaoox2q****'),
          vSwitchId?: string(name='VSwitchId', description='The vSwitch to which the endpoint belongs.', example='vsw-hp3uf6045ljdhd5zr****'),
          zoneDomain?: string(name='ZoneDomain', description='The domain name of the zone.', example='ep-hp34jaz8ykl0exwt****-cn-huhehaote.epsrv-hp3vpx8yqxblby3i****.cn-huhehaote-b.privatelink.aliyuncs.com'),
          zoneId?: string(name='ZoneId', description='The ID of the zone.', example='cn-huhehaote-b'),
          zoneStatus?: string(name='ZoneStatus', description='The status of the zone. Valid values:

*   **Creating**: being created.
*   **Wait**: to be connected.
*   **Connected**: connected.
*   **Deleting**: being deleted.
*   **Disconnecting**: disconnecting.
*   **Disconnected**: disconnected.
*   **Connecting**: connecting.
*   **Migrating**: being migrated.
*   **Migrated**: migrated.', example='Connected'),
        }
      ](name='Zones', description='The information about the zones.'),
    }
  ](name='Connections', description='The information about the endpoint connections.'),
  maxResults?: int32(name='MaxResults', description='The number of entries returned per page.', example='50'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. Valid values:

*   If **NextToken** is empty, no next query is to be sent.
*   If a value of **NextToken** is returned, the value is the token that is used for the next query.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model ListVpcEndpointConnectionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListVpcEndpointConnectionsResponseBody(name='body'),
}

async function listVpcEndpointConnectionsWithOptions(request: ListVpcEndpointConnectionsRequest, runtime: Util.RuntimeOptions): ListVpcEndpointConnectionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionId)) {
    query['ConnectionId'] = request.connectionId;
  }
  if (!Util.isUnset(request.connectionStatus)) {
    query['ConnectionStatus'] = request.connectionStatus;
  }
  if (!Util.isUnset(request.endpointId)) {
    query['EndpointId'] = request.endpointId;
  }
  if (!Util.isUnset(request.endpointOwnerId)) {
    query['EndpointOwnerId'] = request.endpointOwnerId;
  }
  if (!Util.isUnset(request.eniId)) {
    query['EniId'] = request.eniId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.replacedResourceId)) {
    query['ReplacedResourceId'] = request.replacedResourceId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.serviceId)) {
    query['ServiceId'] = request.serviceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListVpcEndpointConnections',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listVpcEndpointConnections(request: ListVpcEndpointConnectionsRequest): ListVpcEndpointConnectionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVpcEndpointConnectionsWithOptions(request, runtime);
}

model ListVpcEndpointSecurityGroupsRequest {
  endpointId?: string(name='EndpointId', description='The ID of the endpoint.', example='ep-hp33b2e43fays7s8****'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page. Valid values:**1** to **50**. Default value: **50**.', example='50'),
  nextToken?: string(name='NextToken', description='The query token. Set this parameter to the NextToken parameter value that is returned in the last API call. If no subsequent queries are to be sent, you can leave the parameter empty.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  regionId?: string(name='RegionId', description='The ID of the region where the endpoint is created. You can call the [DescribeRegions](~~120468~~) operation to query region IDs.', example='cn-huhehaote'),
}

model ListVpcEndpointSecurityGroupsResponseBody = {
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.', example='50'),
  nextToken?: string(name='NextToken', description='The token required by the next query. If the NextToken parameter is empty, this indicates that no subsequent query will be sent.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
  securityGroups?: [ 
    {
      securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group that is associated with the endpoint.', example='sg-hp33bw6ynvm2yb0e****'),
    }
  ](name='SecurityGroups', description='The information about the security group.'),
}

model ListVpcEndpointSecurityGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListVpcEndpointSecurityGroupsResponseBody(name='body'),
}

async function listVpcEndpointSecurityGroupsWithOptions(request: ListVpcEndpointSecurityGroupsRequest, runtime: Util.RuntimeOptions): ListVpcEndpointSecurityGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endpointId)) {
    query['EndpointId'] = request.endpointId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListVpcEndpointSecurityGroups',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listVpcEndpointSecurityGroups(request: ListVpcEndpointSecurityGroupsRequest): ListVpcEndpointSecurityGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVpcEndpointSecurityGroupsWithOptions(request, runtime);
}

model ListVpcEndpointServiceResourcesRequest {
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page. Valid values: **1** to **50**. Default value: **50**.', example='50'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. Valid values:

*   If this is your first query or no next query is to be sent, ignore this parameter.
*   If a next query is to be sent, set the value to the value of NextToken that is returned from the last call.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  regionId?: string(name='RegionId', description='The ID of the region where the service resources that you want to query are deployed.

You can call the [DescribeRegions](~~120468~~) operation to query the most recent region list.', example='cn-huhehaote'),
  serviceId?: string(name='ServiceId', description='The ID of the endpoint service.', example='epsrv-hp3vpx8yqxblby3i****'),
}

model ListVpcEndpointServiceResourcesResponseBody = {
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.', example='50'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. Valid values:

*   If **NextToken** is empty, no next query is to be sent.
*   If a value of **NextToken** is returned, the value is the token that is used for the next query.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
  resources?: [ 
    {
      autoAllocatedEnabled?: boolean(name='AutoAllocatedEnabled', description='Indicates whether automatic resource allocation is allowed. Valid values:

*   **true**: yes
*   **false**: no', example='false'),
      ip?: string(name='Ip', description='The IP address of the service resource.', example='192.168.10.23'),
      regionId?: string(name='RegionId', description='The ID of the region where the service resource is deployed.', example='cn-huhehaote'),
      relatedDeprecatedEndpointCount?: long(name='RelatedDeprecatedEndpointCount', description='The number of replaced connections to the endpoint associated with the endpoint service in smooth migration scenarios.', example='10'),
      relatedEndpointCount?: long(name='RelatedEndpointCount', description='The number of connections to the endpoint associated with the service resource.', example='10'),
      resourceId?: string(name='ResourceId', description='The ID of the service resource.', example='lb-hp32z1wp5peaoox2q****'),
      resourceSupportIPv6?: boolean(name='ResourceSupportIPv6', description='Indicates whether the endpoint service supports IPv6. Valid values:

*   **true**: yes
*   **false**: no', example='false'),
      resourceType?: string(name='ResourceType', description='The type of the service resource.

The value is set to **slb**, which indicates Classic Load Balancer (CLB).', example='slb'),
      vSwitchId?: string(name='VSwitchId', description='The vSwitch to which the service resource belongs.', example='vsw-hp3uf6045ljdhd5zr****'),
      vpcId?: string(name='VpcId', description='The virtual private cloud (VPC) to which the service resource belongs.', example='vpc-hp356stwkxg3fn2xe****'),
      zoneId?: string(name='ZoneId', description='The ID of the zone where the service resource is deployed.', example='cn-huhehaote-b'),
    }
  ](name='Resources', description='The list of service resources.'),
}

model ListVpcEndpointServiceResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListVpcEndpointServiceResourcesResponseBody(name='body'),
}

async function listVpcEndpointServiceResourcesWithOptions(request: ListVpcEndpointServiceResourcesRequest, runtime: Util.RuntimeOptions): ListVpcEndpointServiceResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.serviceId)) {
    query['ServiceId'] = request.serviceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListVpcEndpointServiceResources',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listVpcEndpointServiceResources(request: ListVpcEndpointServiceResourcesRequest): ListVpcEndpointServiceResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVpcEndpointServiceResourcesWithOptions(request, runtime);
}

model ListVpcEndpointServiceUsersRequest {
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page. Valid values: **1 to 50**. Default value: **50**.', example='50'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. Valid values:

*   If this is your first query or no next query is to be sent, ignore this parameter.
*   If a next query is to be sent, set the value to the value of **NextToken** that is returned from the last call.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  regionId?: string(name='RegionId', description='The ID of the region in which the endpoint service that you want to query resides.

You can call the [DescribeRegions](~~120468~~) operation to query the most recent region list.', example='cn-huhehaote'),
  serviceId?: string(name='ServiceId', description='The ID of the endpoint service.', example='epsrv-hp3vpx8yqxblby3i****'),
  userId?: long(name='UserId', description='The ID of the Alibaba Cloud account in the whitelist of the endpoint service.', example='12345678'),
  userListType?: string(name='UserListType', example='Users'),
}

model ListVpcEndpointServiceUsersResponseBody = {
  maxResults?: int32(name='MaxResults', description='The number of entries returned per page.', example='50'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. Valid values:

*   If **NextToken** is empty, it indicates that no next query is to be sent.
*   If a value of **NextToken** is returned, the value is the token that is used for the next query.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
  userARNs?: [ 
    {
      userARN?: string(name='UserARN'),
    }
  ](name='UserARNs'),
  users?: [ 
    {
      userId?: long(name='UserId', description='The ID of the Alibaba Cloud account in the whitelist of the endpoint service.', example='12345678'),
    }
  ](name='Users', description='The Alibaba Cloud accounts in the whitelist of the endpoint service.'),
}

model ListVpcEndpointServiceUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListVpcEndpointServiceUsersResponseBody(name='body'),
}

async function listVpcEndpointServiceUsersWithOptions(request: ListVpcEndpointServiceUsersRequest, runtime: Util.RuntimeOptions): ListVpcEndpointServiceUsersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.serviceId)) {
    query['ServiceId'] = request.serviceId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  if (!Util.isUnset(request.userListType)) {
    query['UserListType'] = request.userListType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListVpcEndpointServiceUsers',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listVpcEndpointServiceUsers(request: ListVpcEndpointServiceUsersRequest): ListVpcEndpointServiceUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVpcEndpointServiceUsersWithOptions(request, runtime);
}

model ListVpcEndpointServicesRequest {
  autoAcceptEnabled?: boolean(name='AutoAcceptEnabled', description='Specifies whether endpoint connection requests are automatically accepted. Valid values:

*   **true**: yes
*   **false** (default): no', example='false'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page. Valid values: **1** to **50**. Default value: **50**.', example='50'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. Valid values:

*   If this is your first query or no next query is to be sent, ignore this parameter.
*   If a next query is to be sent, set the value to the value of NextToken that is returned from the last call.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  regionId?: string(name='RegionId', description='The region ID of the endpoint service.

You can call the [DescribeRegions](~~120468~~) operation to query the most recent region list.', example='cn-huhehaote'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmy*****'),
  resourceId?: string(name='ResourceId', description='The ID of the service resource.', example='lb-hp32z1wp5peaoox2q****'),
  serviceBusinessStatus?: string(name='ServiceBusinessStatus', description='The business status of the endpoint service. Valid values:

*   **Normal**: running as expected.
*   **FinacialLocked**: locked due to overdue payments.', example='Normal'),
  serviceId?: string(name='ServiceId', description='The ID of the endpoint service.', example='epsrv-hp3vpx8yqxblby3i****'),
  serviceName?: string(name='ServiceName', description='The name of the endpoint service.', example='com.aliyuncs.privatelink.cn-huhehaote.epsrv-hp3vpx8yqxblby3i****'),
  serviceResourceType?: string(name='ServiceResourceType', description='The type of the service resource.

Set the value to **slb**, which specifies Classic Load Balancer (CLB).', example='slb'),
  serviceStatus?: string(name='ServiceStatus', description='The status of the endpoint service. Valid values:

*   **Creating**: being created.
*   **Pending**: being modified.
*   **Active**: available.
*   **Deleting**: being deleted.', example='Active'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag.', example='FinanceDept'),
      value?: string(name='Value', description='The value of the tag.', example='FinanceJoshua'),
    }
  ](name='Tag', description='The tags of the instances you want to query. You can specify up to 20 tags.'),
  zoneAffinityEnabled?: boolean(name='ZoneAffinityEnabled', description='Specifies whether to enable zone affinity. Valid values:

*   **true**: yes
*   **false** (default): no', example='true'),
}

model ListVpcEndpointServicesResponseBody = {
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.', example='50'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. Valid values:

*   If **NextToken** is empty, no next query is to be sent.
*   If a value of **NextToken** is returned, the value is the token that is used for the next query.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
  services?: [ 
    {
      autoAcceptEnabled?: boolean(name='AutoAcceptEnabled', description='Specifies whether endpoint connection requests are automatically accepted. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
      connectBandwidth?: int32(name='ConnectBandwidth', description='The default maximum bandwidth of the endpoint connection. Unit: Mbit/s.', example='1024'),
      createTime?: string(name='CreateTime', description='The time when the endpoint service was created.', example='2021-09-24T17:15:10Z'),
      maxBandwidth?: int32(name='MaxBandwidth', description='The maximum bandwidth of the endpoint connection. Unit: Mbit/s.', example='1024'),
      minBandwidth?: int32(name='MinBandwidth', description='The minimum bandwidth of the endpoint connection. Unit: Mbit/s.', example='100'),
      payer?: string(name='Payer', description='The payer of the endpoint service. Valid values:

*   **Endpoint**: the service consumer.
*   **EndpointService**: the service provider.', example='Endpoint'),
      regionId?: string(name='RegionId', description='The ID of the region to which the endpoint service belongs.', example='cn-huhehaote'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmy*****'),
      serviceBusinessStatus?: string(name='ServiceBusinessStatus', description='The business status of the endpoint service. Valid values:

*   **Normal**: running as expected.
*   **FinacialLocked**: locked due to overdue payments.', example='Normal'),
      serviceDescription?: string(name='ServiceDescription', description='The description of the endpoint service.', example='This is my EndpointService.'),
      serviceDomain?: string(name='ServiceDomain', description='The domain name of the endpoint service.', example='epsrv-hp3vpx8yqxblby3i****.cn-huhehaote.privatelink.aliyuncs.com'),
      serviceId?: string(name='ServiceId', description='The ID of the endpoint service.', example='epsrv-hp3vpx8yqxblby3i****'),
      serviceName?: string(name='ServiceName', description='The name of the endpoint service.', example='com.aliyuncs.privatelink.cn-huhehaote.epsrv-hp3vpx8yqxblby3i****'),
      serviceResourceType?: string(name='ServiceResourceType', description='The type of the service resource.

Set the value to **slb**, which specifies Classic Load Balancer (CLB).', example='slb'),
      serviceStatus?: string(name='ServiceStatus', description='The status of the endpoint service. Valid values:

*   **Creating**: being created.
*   **Pending**: being modified.
*   **Active**: available.
*   **Deleting**: being deleted.', example='Active'),
      serviceSupportIPv6?: boolean(name='ServiceSupportIPv6', description='Indicates whether the endpoint service supports IPv6. Valid values:

*   **true**: yes
*   **false**: no', example='false'),
      serviceType?: string(name='ServiceType', description='The type of the endpoint service.

The value is set to **Interface**. This value is used when **ServiceResourceType** is set to **slb**. The value slb indicates the CLB endpoint type.', example='Interface'),
      tags?: [ 
        {
          key?: string(name='Key', description='The key of the tag.', example='FinanceDept'),
          value?: string(name='Value', description='The value of the tag.', example='FinanceJoshua'),
        }
      ](name='Tags', description='The tags of the resource.'),
      zoneAffinityEnabled?: boolean(name='ZoneAffinityEnabled', description='Specifies whether to enable zone affinity. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
    }
  ](name='Services', description='The list of endpoint services.'),
}

model ListVpcEndpointServicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListVpcEndpointServicesResponseBody(name='body'),
}

async function listVpcEndpointServicesWithOptions(request: ListVpcEndpointServicesRequest, runtime: Util.RuntimeOptions): ListVpcEndpointServicesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoAcceptEnabled)) {
    query['AutoAcceptEnabled'] = request.autoAcceptEnabled;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.serviceBusinessStatus)) {
    query['ServiceBusinessStatus'] = request.serviceBusinessStatus;
  }
  if (!Util.isUnset(request.serviceId)) {
    query['ServiceId'] = request.serviceId;
  }
  if (!Util.isUnset(request.serviceName)) {
    query['ServiceName'] = request.serviceName;
  }
  if (!Util.isUnset(request.serviceResourceType)) {
    query['ServiceResourceType'] = request.serviceResourceType;
  }
  if (!Util.isUnset(request.serviceStatus)) {
    query['ServiceStatus'] = request.serviceStatus;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.zoneAffinityEnabled)) {
    query['ZoneAffinityEnabled'] = request.zoneAffinityEnabled;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListVpcEndpointServices',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listVpcEndpointServices(request: ListVpcEndpointServicesRequest): ListVpcEndpointServicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVpcEndpointServicesWithOptions(request, runtime);
}

model ListVpcEndpointServicesByEndUserRequest {
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page. Valid values: **1** to **50**. Default value: **50**.', example='50'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. Valid values:

*   If this is your first query or no next query is to be sent, ignore this parameter.
*   If a next query is to be sent, set the value to the value of **NextToken** that is returned from the last call.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  regionId?: string(name='RegionId', description='The region ID of the endpoint service that you want to query.

You can call the [DescribeRegions](~~120468~~) operation to query the most recent region list.', example='cn-huhehaote'),
  resourceGroupId?: string(name='ResourceGroupId', description='Specifies the ID of the resource group.', example='rg-acfmy*****'),
  serviceId?: string(name='ServiceId', description='The ID of the endpoint service that you want to query.', example='epsrv-hp3vpx8yqxblby3i****'),
  serviceName?: string(name='ServiceName', description='The name of the endpoint service that you want to query.', example='com.aliyuncs.privatelink.cn-huhehaote.epsrv-hp3xdsq46ael67lo****'),
  serviceType?: string(name='ServiceType', description='The type of the endpoint service.

Set the value to **Interface**, which specifies **slb** for the **ServiceResourceType** parameter. The value slb specifies the Classic Load Balancer (CLB) endpoint type.', example='Interface'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag.', example='FinanceDept'),
      value?: string(name='Value', description='The value of the tag.', example='FinanceJoshua'),
    }
  ](name='Tag', description='The list of tags. You can specify a maximum of 20 tags.'),
}

model ListVpcEndpointServicesByEndUserResponseBody = {
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.', example='50'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. Valid values:

*   If **NextToken** is empty, no next query is to be sent.
*   If a value of **NextToken** is returned, the value is the token that is used for the next query.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
  services?: [ 
    {
      payer?: string(name='Payer', description='The payer of the endpoint service. Valid values:

*   **Endpoint**: the service consumer.
*   **EndpointService**: the service provider.', example='Endpoint'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the resource belong.', example='rg-acfmy*****'),
      serviceDomain?: string(name='ServiceDomain', description='The domain name of the endpoint service that can be associated with the endpoints when you create endpoints.', example='epsrv-hp3vpx8yqxblby3i****.cn-huhehaote.privatelink.aliyuncs.com'),
      serviceId?: string(name='ServiceId', description='The ID of the endpoint service that can be associated with the endpoints when you create endpoints.', example='epsrv-hp3vpx8yqxblby3i****'),
      serviceName?: string(name='ServiceName', description='The name of the endpoint service that can be associated with the endpoints when you create endpoints.', example='com.aliyuncs.privatelink.cn-huhehaote.epsrv-hp3vpx8yqxblby3i****'),
      serviceSupportIPv6?: boolean(name='ServiceSupportIPv6', description='Indicates whether the endpoint service supports IPv6. Valid values:

*   **true**: supports IPv6.
*   **false**: does not support IPv6.', example='false'),
      serviceType?: string(name='ServiceType', description='The type of the endpoint service.

Set the value to **Interface**, which specifies **slb** for the **ServiceResourceType** parameter. The value slb specifies the Classic Load Balancer (CLB) endpoint type.', example='Interface'),
      tags?: [ 
        {
          key?: string(name='Key', description='The key of the tag.', example='FinanceDept'),
          value?: string(name='Value', description='The value of the tag.', example='FinanceJoshua'),
        }
      ](name='Tags', description='The tags of the endpoint service.'),
      zones?: [ string ](name='Zones', description='The zone of the endpoint service that can be associated with the endpoints when you create endpoints.'),
    }
  ](name='Services', description='The list of endpoint services.'),
}

model ListVpcEndpointServicesByEndUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListVpcEndpointServicesByEndUserResponseBody(name='body'),
}

async function listVpcEndpointServicesByEndUserWithOptions(request: ListVpcEndpointServicesByEndUserRequest, runtime: Util.RuntimeOptions): ListVpcEndpointServicesByEndUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.serviceId)) {
    query['ServiceId'] = request.serviceId;
  }
  if (!Util.isUnset(request.serviceName)) {
    query['ServiceName'] = request.serviceName;
  }
  if (!Util.isUnset(request.serviceType)) {
    query['ServiceType'] = request.serviceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListVpcEndpointServicesByEndUser',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listVpcEndpointServicesByEndUser(request: ListVpcEndpointServicesByEndUserRequest): ListVpcEndpointServicesByEndUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVpcEndpointServicesByEndUserWithOptions(request, runtime);
}

model ListVpcEndpointZonesRequest {
  endpointId?: string(name='EndpointId', description='The ID of the endpoint for which you want to query zones.

After you specify an endpoint ID, the system queries the zones of the specified endpoint.', example='ep-hp33b2e43fays7s8****'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page. Valid values: **1** to **50**. Default value: **50**.', example='50'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. Valid values:

*   If this is your first query or no next query is to be sent, ignore this parameter.
*   If a next query is to be sent, set the value to the value of **NextToken** that is returned from the last call.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  regionId?: string(name='RegionId', description='The ID of the region in which you want to query the zones of an endpoint.

You can call the [DescribeRegions](~~120468~~) operation to query the most recent region list.', example='cn-huhehaote'),
}

model ListVpcEndpointZonesResponseBody = {
  maxResults?: int32(name='MaxResults', description='The number of entries returned per page.', example='50'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. Valid values:

*   If **NextToken** is empty, it indicates that no next query is to be sent.
*   If a value of **NextToken** is returned, the value is the token that is used for the next query.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
  zones?: [ 
    {
      eniId?: string(name='EniId', description='The ID of the endpoint ENI.', example='eni-hp3c8qj1tyct8aqy****'),
      eniIp?: string(name='EniIp', description='The IP address of the endpoint ENI.', example='192.168.2.23'),
      regionId?: string(name='RegionId', description='The ID of the region to which the endpoint belongs.', example='cn-huhehaote'),
      serviceStatus?: string(name='ServiceStatus', description='The status of the endpoint service. Valid values:

*   **Creating**: The endpoint service is being created.
*   **Pending**: The endpoint service is being modified.
*   **Active**: The endpoint service is available.
*   **Deleting**: The endpoint service is being deleted.', example='Active'),
      vSwitchId?: string(name='VSwitchId', description='The vSwitch of the zone. The system automatically creates an endpoint elastic network interface (ENI) in the vSwitch.', example='vsw-hjkshjvdkdvd****'),
      zoneDomain?: string(name='ZoneDomain', description='The domain name of the zone.

After an endpoint is connected to an endpoint service, you can access the service resources in the endpoint service by using the domain name of the zone.', example='ep-hp3f033dp24c5yc9****-cn-huhehaote.epsrv-hp3itcpowf37m3d5****.cn-huhehaote-a.privatelink.aliyuncs.com'),
      zoneId?: string(name='ZoneId', description='The ID of the zone.', example='cn-huhehaote-a'),
      zoneIpv6Address?: string(name='ZoneIpv6Address', description='Indicates whether the endpoint service supports IPv6. Valid values:

*   **true**: The endpoint supports IPv6.
*   **false**: The endpoint does not support IPv6. This is the default value.', example='false'),
      zoneStatus?: string(name='ZoneStatus', description='The status of the zone. Valid values:

*   **Creating**: The zone is being created.
*   **Wait**: The zone is to be connected.
*   **Connected**: The zone is connected.
*   **Deleting**: The zone is being deleted.
*   **Disconnecting**: The zone is being disconnected.
*   **Disconnected**: The zone is disconnected.
*   **Connecting**: The zone is being connected.', example='Wait'),
    }
  ](name='Zones', description='The information about the zones.'),
}

model ListVpcEndpointZonesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListVpcEndpointZonesResponseBody(name='body'),
}

async function listVpcEndpointZonesWithOptions(request: ListVpcEndpointZonesRequest, runtime: Util.RuntimeOptions): ListVpcEndpointZonesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endpointId)) {
    query['EndpointId'] = request.endpointId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListVpcEndpointZones',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listVpcEndpointZones(request: ListVpcEndpointZonesRequest): ListVpcEndpointZonesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVpcEndpointZonesWithOptions(request, runtime);
}

model ListVpcEndpointsRequest {
  connectionStatus?: string(name='ConnectionStatus', description='The status of the endpoint connection. Valid values:

*   **Pending**: being modified
*   **Connecting**: connecting
*   **Connected**: connected
*   **Disconnecting**: disconnecting
*   **Disconnected**: disconnected
*   **Deleting**: being deleted
*   **ServiceDeleted**: The corresponding service is deleted.', example='Disconnected'),
  endpointId?: string(name='EndpointId', description='The ID of the endpoint that you want to query.', example='ep-hp33b2e43fays7s8****'),
  endpointName?: string(name='EndpointName', description='The name of the endpoint.', example='test'),
  endpointStatus?: string(name='EndpointStatus', description='The status of the endpoint. Valid values:

*   **Creating**: being created
*   **Active**: available
*   **Pending**: being modified
*   **Deleting**: being deleted', example='Active'),
  endpointType?: string(name='EndpointType', description='The type of the endpoint.

Set the value to **Interface**, which specifies **slb** for the **ServiceId** parameter. The value slb specifies the Classic Load Balancer (CLB) endpoint type.', example='Interface'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page. Valid values: **1** to **50**. Default value: **50**.', example='50'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. Valid values:

*   If this is your first query or no next query is to be sent, ignore this parameter.
*   If a next query is to be sent, set the value to the value of NextToken that is returned from the last call.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  regionId?: string(name='RegionId', description='The region ID of the endpoints.

You can call the [DescribeRegions](~~120468~~) operation to query the most recent region list.', example='cn-huhehaote'),
  resourceGroupId?: string(name='ResourceGroupId', description='Specifies the ID of the resource group.', example='1'),
  serviceName?: string(name='ServiceName', description='The name of the endpoint service that is associated with the endpoint to be queried.', example='com.aliyuncs.privatelink.cn-huhehaote.epsrv-hp3vpx8yqxblby3i****'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag.', example='FinanceDept'),
      value?: string(name='Value', description='The value of the tag.', example='FinanceJoshua'),
    }
  ](name='Tag', description='The tags of the instances you want to query. You can specify up to 20 tags.'),
  vpcId?: string(name='VpcId', description='The virtual private cloud (VPC) to which the endpoint belongs.', example='vpc-fdjkf789dfdfdfde****'),
}

model ListVpcEndpointsResponseBody = {
  endpoints?: [ 
    {
      bandwidth?: long(name='Bandwidth', description='The maximum bandwidth of the endpoint connection. Unit: Mbit/s.', example='1024'),
      connectionStatus?: string(name='ConnectionStatus', description='The status of the endpoint connection. Valid values:

*   **Pending**: being modified
*   **Connecting**: connecting
*   **Connected**: connected
*   **Disconnecting**: disconnecting
*   **Disconnected**: disconnected
*   **Deleting**: being deleted
*   **ServiceDeleted**: The corresponding service is deleted.', example='Disconnected'),
      createTime?: string(name='CreateTime', description='The time when the endpoint was created.', example='2021-09-24T18:00:07Z'),
      endpointBusinessStatus?: string(name='EndpointBusinessStatus', description='The business status of the endpoint. Valid values:

*   **Normal**: normal
*   **FinacialLocked**: locked due to overdue payments', example='Normal'),
      endpointDescription?: string(name='EndpointDescription', description='The description of the endpoint.', example='This is my Endpoint.'),
      endpointDomain?: string(name='EndpointDomain', description='The domain name of the endpoint.', example='ep-hp33b2e43fays7s8****.epsrv-hp3xdsq46ael67lo****.cn-huhehaote.privatelink.aliyuncs.com'),
      endpointId?: string(name='EndpointId', description='The ID of the endpoint.', example='ep-hp33b2e43fays7s8****'),
      endpointName?: string(name='EndpointName', description='The name of the endpoint.', example='test'),
      endpointStatus?: string(name='EndpointStatus', description='The status of the endpoint. Valid values:

*   **Creating**: being created
*   **Active**: available
*   **Pending**: being modified
*   **Deleting**: being deleted', example='Active'),
      endpointType?: string(name='EndpointType', description='The type of the endpoint.

Set the value to **Interface**, which indicates that **slb** is set for the **ServiceId** parameter. The value slb indicates the CLB endpoint type.', example='Interface'),
      regionId?: string(name='RegionId', description='The region ID of the endpoint.', example='cn-huhehaote'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='1'),
      resourceOwner?: boolean(name='ResourceOwner', description='Indicates whether the endpoint and the endpoint service belong to the same Alibaba Cloud account. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
      serviceId?: string(name='ServiceId', description='The ID of the endpoint service that is associated with the endpoint.', example='epsrv-hp3vpx8yqxblby3i****'),
      serviceName?: string(name='ServiceName', description='The name of the endpoint service that is associated with the endpoint.', example='com.aliyuncs.privatelink.cn-huhehaote.epsrv-hp3xdsq46ael67lo****'),
      tags?: [ 
        {
          key?: string(name='Key', example='FinanceDept'),
          value?: string(name='Value', example='FinanceJoshua'),
        }
      ](name='Tags'),
      vpcId?: string(name='VpcId', description='The VPC to which the endpoint belongs.', example='vpc-hp356stwkxg3fn2xe****'),
      zoneAffinityEnabled?: boolean(name='ZoneAffinityEnabled', description='Indicates whether zone affinity is enabled. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
    }
  ](name='Endpoints', description='The list of endpoints.'),
  maxResults?: int32(name='MaxResults', description='The number of entries returned per page.', example='50'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. Valid values:

*   If the value returned of **NextToken** is empty, it indicates that no next query is to be sent.
*   If the value returned of **NextToken** is not empty, the value indicates the token that is used for the next query.', example='caeba0bbb2be03f84eb48b699f0a****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model ListVpcEndpointsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListVpcEndpointsResponseBody(name='body'),
}

async function listVpcEndpointsWithOptions(request: ListVpcEndpointsRequest, runtime: Util.RuntimeOptions): ListVpcEndpointsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionStatus)) {
    query['ConnectionStatus'] = request.connectionStatus;
  }
  if (!Util.isUnset(request.endpointId)) {
    query['EndpointId'] = request.endpointId;
  }
  if (!Util.isUnset(request.endpointName)) {
    query['EndpointName'] = request.endpointName;
  }
  if (!Util.isUnset(request.endpointStatus)) {
    query['EndpointStatus'] = request.endpointStatus;
  }
  if (!Util.isUnset(request.endpointType)) {
    query['EndpointType'] = request.endpointType;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.serviceName)) {
    query['ServiceName'] = request.serviceName;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListVpcEndpoints',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listVpcEndpoints(request: ListVpcEndpointsRequest): ListVpcEndpointsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVpcEndpointsWithOptions(request, runtime);
}

model NotifyResourceAddressFamilyRequest {
  addressFamily?: string(name='AddressFamily', description='The type of the IP address. Valid values:

*   **ipv4**: IPv4. This is the default value.
*   **DualStack**: dual stack.

>  Application Load Balancer (ALB) instances and Classic Load Balancer (CLB) instances support only **IPv4** addresses. Network Load Balancer (NLB) instances support **IPv4** and **dual stack** addresses.', example='ipv4'),
  ipv6Address?: string(name='Ipv6Address', description='The IPv6 address.', example='2408:4321:180:1701:94c7:bc38:3bfa:XXXX'),
  resourceId?: string(name='ResourceId', description='The ID of the service resource that is added to the endpoint service.', example='lb-hp32z1wp5peaoox2q****'),
  resourceType?: string(name='ResourceType', description='The type of the service resource. Valid values:

*   **NLB**: specifies that the service resource is an NLB instance.

*   **CLB**: specifies that the service resource is a CLB instance.

*   **ALB**: specifies that the service resource is an ALB instance.



    >  The feature that allows you to specify an ALB instance or an NLB instance as the PrivateLink service resource is not supported by default. If you need this feature, [submit a ticket](https://workorder-intl.console.aliyun.com/#/ticket/crea).', example='NLB'),
}

model NotifyResourceAddressFamilyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model NotifyResourceAddressFamilyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: NotifyResourceAddressFamilyResponseBody(name='body'),
}

/**
  * You cannot use the **NotifyResourceAddressFamily** operation to notify the types of IP addresses that are supported by multiple PrivateLink service resources of an Alibaba Cloud account at the same time.
  *
  * @param request NotifyResourceAddressFamilyRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return NotifyResourceAddressFamilyResponse
 */
async function notifyResourceAddressFamilyWithOptions(request: NotifyResourceAddressFamilyRequest, runtime: Util.RuntimeOptions): NotifyResourceAddressFamilyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.addressFamily)) {
    query['AddressFamily'] = request.addressFamily;
  }
  if (!Util.isUnset(request.ipv6Address)) {
    query['Ipv6Address'] = request.ipv6Address;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'NotifyResourceAddressFamily',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You cannot use the **NotifyResourceAddressFamily** operation to notify the types of IP addresses that are supported by multiple PrivateLink service resources of an Alibaba Cloud account at the same time.
  *
  * @param request NotifyResourceAddressFamilyRequest
  * @return NotifyResourceAddressFamilyResponse
 */
async function notifyResourceAddressFamily(request: NotifyResourceAddressFamilyRequest): NotifyResourceAddressFamilyResponse {
  var runtime = new Util.RuntimeOptions{};
  return notifyResourceAddressFamilyWithOptions(request, runtime);
}

model OpenPrivateLinkServiceRequest {
  ownerId?: long(name='OwnerId'),
}

model OpenPrivateLinkServiceResponseBody = {
  orderId?: string(name='OrderId', description='The ID of the order.', example='3245****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='427688B8-ADFB-4C4E-9D45-EF5C1FD6E23D'),
}

model OpenPrivateLinkServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OpenPrivateLinkServiceResponseBody(name='body'),
}

async function openPrivateLinkServiceWithOptions(request: OpenPrivateLinkServiceRequest, runtime: Util.RuntimeOptions): OpenPrivateLinkServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OpenPrivateLinkService',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function openPrivateLinkService(request: OpenPrivateLinkServiceRequest): OpenPrivateLinkServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return openPrivateLinkServiceWithOptions(request, runtime);
}

model RemoveUserFromVpcEndpointServiceRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate a value, but you must make sure that the value is unique among different requests. The client token can contain only ASCII characters.', example='0c593ea1-3bea-11e9-b96b-88e9fe637760'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to check the request without performing the operation. Valid values:

*   **true**: sends a request for check purpose only. If you select this option, the account ID is not removed from the whitelist after the request passes the check. The system checks whether your AccessKey pair is valid, whether RAM users are granted required permissions, and whether the required parameters are set. If the request fails to pass the check, the corresponding error message is returned. If the request passes the check, the `DryRunOperation` error code is returned.
*   **false** (default): sends a common request. If the request passes the check, the 2xx HTTP status code is returned, and the operation is performed.', example='false'),
  regionId?: string(name='RegionId', description='The region ID of the endpoint service for which you want to remove the account ID from the whitelist. You can call the [DescribeRegions](~~120468~~) operation to query the most recent region list.', example='eu-west-1'),
  serviceId?: string(name='ServiceId', description='The ID of the endpoint service.', example='epsrv-hp3vpx8yqxblby3i****'),
  userARN?: string(name='UserARN', description='The account ID whitelist in the format of Aliyun Resource Name (ARN).', example='acs:ram:*:<account-id>:*'),
  userId?: long(name='UserId', description='The account ID that you want to remove from the whitelist.', example='12345678'),
}

model RemoveUserFromVpcEndpointServiceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model RemoveUserFromVpcEndpointServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveUserFromVpcEndpointServiceResponseBody(name='body'),
}

/**
  * You cannot use the **RemoveUserFromVpcEndpointService** operation to remove multiple account IDs from the whitelist of an endpoint service at the same time.
  *
  * @param request RemoveUserFromVpcEndpointServiceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RemoveUserFromVpcEndpointServiceResponse
 */
async function removeUserFromVpcEndpointServiceWithOptions(request: RemoveUserFromVpcEndpointServiceRequest, runtime: Util.RuntimeOptions): RemoveUserFromVpcEndpointServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.serviceId)) {
    query['ServiceId'] = request.serviceId;
  }
  if (!Util.isUnset(request.userARN)) {
    query['UserARN'] = request.userARN;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveUserFromVpcEndpointService',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You cannot use the **RemoveUserFromVpcEndpointService** operation to remove multiple account IDs from the whitelist of an endpoint service at the same time.
  *
  * @param request RemoveUserFromVpcEndpointServiceRequest
  * @return RemoveUserFromVpcEndpointServiceResponse
 */
async function removeUserFromVpcEndpointService(request: RemoveUserFromVpcEndpointServiceRequest): RemoveUserFromVpcEndpointServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeUserFromVpcEndpointServiceWithOptions(request, runtime);
}

model RemoveZoneFromVpcEndpointRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate a value, but you must make sure that the value is unique among different requests. The token can contain only ASCII characters.', example='0c593ea1-3bea-11e9-b96b-88e9fe637760'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to check the request without performing the operation. Valid values:

*   **true**: sends a request for check purposes only. If you select this option, the zone is not removed after the request passes the check. The system checks the required parameters, request syntax, and limits. If the request fails to pass the check, the corresponding error message is returned. If the request passes the check, the `DryRunOperation` error code is returned.
*   **false**: sends a common request. If the request passes the check, a 2xx HTTP status code is returned, and the operation is performed. This is the default value.', example='false'),
  endpointId?: string(name='EndpointId', description='The ID of the endpoint from which you want to remove the zone.', example='ep-hp33b2e43fays7s8****'),
  regionId?: string(name='RegionId', description='The region ID of the endpoint from which you want to remove the zone.

You can call the [DescribeRegions](~~120468~~) operation to obtain the region ID.', example='eu-west-1'),
  zoneId?: string(name='ZoneId', description='The ID of the zone that you want to remove.', example='eu-west-1a'),
}

model RemoveZoneFromVpcEndpointResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0c593ea1-3bea-11e9-b96b-88e9fe637760'),
}

model RemoveZoneFromVpcEndpointResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveZoneFromVpcEndpointResponseBody(name='body'),
}

/**
  * *   **RemoveZoneFromVpcEndpoint** is an asynchronous operation. After you send a request, the system returns a request ID. However, the operation is still being performed in the system background. You can call the [ListVpcEndpointZones](~~183560~~) operation to query whether a zone of an endpoint is removed.
  *     *   If the zone of the endpoint is in the **Deleting** state, it indicates that the zone is being removed.
  *     *   If the zone is not in the zone list of the endpoint, it indicates that the zone is removed.
  * *   You cannot call the **RemoveZoneFromVpcEndpoint** operation to remove multiple zones from an endpoint at the same time.
  *
  * @param request RemoveZoneFromVpcEndpointRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RemoveZoneFromVpcEndpointResponse
 */
async function removeZoneFromVpcEndpointWithOptions(request: RemoveZoneFromVpcEndpointRequest, runtime: Util.RuntimeOptions): RemoveZoneFromVpcEndpointResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.endpointId)) {
    query['EndpointId'] = request.endpointId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveZoneFromVpcEndpoint',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   **RemoveZoneFromVpcEndpoint** is an asynchronous operation. After you send a request, the system returns a request ID. However, the operation is still being performed in the system background. You can call the [ListVpcEndpointZones](~~183560~~) operation to query whether a zone of an endpoint is removed.
  *     *   If the zone of the endpoint is in the **Deleting** state, it indicates that the zone is being removed.
  *     *   If the zone is not in the zone list of the endpoint, it indicates that the zone is removed.
  * *   You cannot call the **RemoveZoneFromVpcEndpoint** operation to remove multiple zones from an endpoint at the same time.
  *
  * @param request RemoveZoneFromVpcEndpointRequest
  * @return RemoveZoneFromVpcEndpointResponse
 */
async function removeZoneFromVpcEndpoint(request: RemoveZoneFromVpcEndpointRequest): RemoveZoneFromVpcEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeZoneFromVpcEndpointWithOptions(request, runtime);
}

model TagResourcesRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that the value is unique among different requests. The client token can contain only ASCII characters and cannot exceed 64 characters in length.', example='123e4567-e89b-12d3-a456-426655440000'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to only precheck this request. Valid values:

*   **true**: only prechecks the API request without performing the operation. The system checks whether your AccessKey pair is valid, whether the Resource Access Management (RAM) user is authorized, and whether required parameters are set. If the request fails to pass the precheck, an error code is returned. If the request passes the precheck, the `DryRunOperation` error code is returned.
*   **false** (default): sends the request. If the request passes the precheck, a 2xx HTTP status code is returned and the service resource is modified.', example='false'),
  regionId?: string(name='RegionId', description='The ID of the region where the endpoint service is created.

You can call the [DescribeRegions](~~120468~~) operation to query the available regions.', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId', description='The resource IDs.'),
  resourceType?: string(name='ResourceType', description='The type of the service resource. Valid values:

*   **NLB**: specifies that the service resource is an NLB instance.

*   **CLB**: specifies that the service resource is a CLB instance.

*   **ALB**: specifies that the service resource is an ALB instance.



    >  The feature that allows you to specify an ALB instance or an NLB instance as the PrivateLink service resource is not supported by default. If you need this feature, [submit a ticket](https://workorder-intl.console.aliyun.com/#/ticket/crea).', example='1'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag that is attached to the resource.

The tag key cannot be an empty string. The tag key can be up to 64 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='FinanceDept'),
      value?: string(name='Value', description='The value of the tag that is attached to the resource.

The tag values can be 0 to 128 characters in length, and cannot start with `aliyun` or `acs:`. It cannot contain `http://` or `https://`.', example='FinanceJoshua'),
    }
  ](name='Tag', description='The list of tags. You can specify a maximum of 20 tags.'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='C46FF5A8-C5F0-4024-8262-B16B639225A0'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    body['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var bodyFlat : map[string]any = {};
  if (!Util.isUnset(request.resourceId)) {
    bodyFlat['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    body['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    bodyFlat['Tag'] = request.tag;
  }
  body = {
    ...body,
    ...OpenApiUtil.query(bodyFlat),
  };

  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TagResources',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UpdateVpcEndpointAttributeRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate a value, but you must make sure that the value is unique among different requests. The token can contain only ASCII characters.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to check the request without performing the operation. Valid values:

*   **true**: sends a request for check purposes only. If you select this option, the attributes of the endpoint are not modified after the request passes the check. The system checks the required parameters, request syntax, and limits. If the request fails to pass the check, the corresponding error message is returned. If the request passes the check, the `DryRunOperation` error code is returned.
*   **false**: sends a common request. If the request passes the check, a 2xx HTTP status code is returned, and the operation is performed. This is the default value.', example='true'),
  endpointDescription?: string(name='EndpointDescription', description='The description of the endpoint.

The description must be 2 to 256 characters in length. It cannot start with `http://` or `https://`.', example='This is my Endpoint.'),
  endpointId?: string(name='EndpointId', description='The ID of the endpoint.', example='ep-hp33b2e43fays7s8****'),
  endpointName?: string(name='EndpointName', description='The name of the endpoint.

The name must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). The name must start with a letter.', example='test'),
  regionId?: string(name='RegionId', description='The ID of the region where the endpoint is deployed. You can call the [DescribeRegions](~~120468~~) operation to query the most recent region list.', example='eu-west-1'),
}

model UpdateVpcEndpointAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model UpdateVpcEndpointAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateVpcEndpointAttributeResponseBody(name='body'),
}

/**
  * You cannot use the **UpdateVpcEndpointAttribute** operation to modify the attributes of multiple endpoints that belong to the same Alibaba Cloud account at the same time.
  *
  * @param request UpdateVpcEndpointAttributeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateVpcEndpointAttributeResponse
 */
async function updateVpcEndpointAttributeWithOptions(request: UpdateVpcEndpointAttributeRequest, runtime: Util.RuntimeOptions): UpdateVpcEndpointAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.endpointDescription)) {
    query['EndpointDescription'] = request.endpointDescription;
  }
  if (!Util.isUnset(request.endpointId)) {
    query['EndpointId'] = request.endpointId;
  }
  if (!Util.isUnset(request.endpointName)) {
    query['EndpointName'] = request.endpointName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateVpcEndpointAttribute',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You cannot use the **UpdateVpcEndpointAttribute** operation to modify the attributes of multiple endpoints that belong to the same Alibaba Cloud account at the same time.
  *
  * @param request UpdateVpcEndpointAttributeRequest
  * @return UpdateVpcEndpointAttributeResponse
 */
async function updateVpcEndpointAttribute(request: UpdateVpcEndpointAttributeRequest): UpdateVpcEndpointAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateVpcEndpointAttributeWithOptions(request, runtime);
}

model UpdateVpcEndpointConnectionAttributeRequest {
  bandwidth?: int32(name='Bandwidth', description='The bandwidth of the endpoint connection that you want to modify. Unit: Mbit/s.', example='1000'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate a value, but you must make sure that the value is unique among different requests. The token can contain only ASCII characters.', example='0c593ea1-3bea-11e9-b96b-88e9fe637760'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to check the request without performing the operation. Default values:

*   **true**: sends a request for check purposes only. If you select this option, the bandwidth of the endpoint connection is not modified after the request passes the check. The system checks the required parameters, request syntax, and limits. If the request fails to pass the check, the corresponding error message is returned. If the request passes the check, the `DryRunOperation` error code is returned.
*   **false**: sends a common request. If the request passes the check, a 2xx HTTP status code is returned, and the operation is performed. This is the default value.', example='false'),
  endpointId?: string(name='EndpointId', description='The ID of the endpoint.', example='ep-hp33b2e43fays7s8****'),
  regionId?: string(name='RegionId', description='The ID of the region where you want to modify the bandwidth of the endpoint connection.

You can call the [DescribeRegions](~~120468~~) operation to obtain the region ID.', example='eu-west-1'),
  serviceId?: string(name='ServiceId', description='The ID of the endpoint service.', example='epsrv-hp3vpx8yqxblby3i****'),
}

model UpdateVpcEndpointConnectionAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model UpdateVpcEndpointConnectionAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateVpcEndpointConnectionAttributeResponseBody(name='body'),
}

/**
  * You cannot use the **UpdateVpcEndpointConnectionAttribute** operation to modify the bandwidths of multiple endpoint connections that belong to an Alibaba Cloud account at the same time.
  *
  * @param request UpdateVpcEndpointConnectionAttributeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateVpcEndpointConnectionAttributeResponse
 */
async function updateVpcEndpointConnectionAttributeWithOptions(request: UpdateVpcEndpointConnectionAttributeRequest, runtime: Util.RuntimeOptions): UpdateVpcEndpointConnectionAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.endpointId)) {
    query['EndpointId'] = request.endpointId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.serviceId)) {
    query['ServiceId'] = request.serviceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateVpcEndpointConnectionAttribute',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You cannot use the **UpdateVpcEndpointConnectionAttribute** operation to modify the bandwidths of multiple endpoint connections that belong to an Alibaba Cloud account at the same time.
  *
  * @param request UpdateVpcEndpointConnectionAttributeRequest
  * @return UpdateVpcEndpointConnectionAttributeResponse
 */
async function updateVpcEndpointConnectionAttribute(request: UpdateVpcEndpointConnectionAttributeRequest): UpdateVpcEndpointConnectionAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateVpcEndpointConnectionAttributeWithOptions(request, runtime);
}

model UpdateVpcEndpointServiceAttributeRequest {
  autoAcceptEnabled?: boolean(name='AutoAcceptEnabled', description='Specifies whether to automatically accept endpoint connection requests. Valid values:

*   **true**: automatically accepts endpoint connection requests.
*   **false**: does not automatically accept endpoint connection requests.', example='false'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate a value, but you must make sure that the value is unique among different requests. The token can contain only ASCII characters.', example='0c593ea1-3bea-11e9-b96b-88e9fe637760'),
  connectBandwidth?: int32(name='ConnectBandwidth', description='The default bandwidth of the endpoint connection. Valid values: **100** to **10240**. Unit: Mbit/s.', example='200'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to check the request without performing the operation. Valid values:

*   **true**: sends a request for check purposes only. If you select this option, the attributes of the endpoint service are not modified after the request passes the check. The system checks the required parameters, request syntax, and limits. If the request fails to pass the check, the corresponding error message is returned. If the request passes the check, the `DryRunOperation` error code is returned.
*   **false**: sends a common request. If the request passes the check, a 2xx HTTP status code is returned, and the operation is performed. This is the default value.', example='false'),
  regionId?: string(name='RegionId', description='The region ID of the endpoint service.

You can call the [DescribeRegions](~~120468~~) operation to query the most recent region list.', example='cn-hangzhou'),
  serviceDescription?: string(name='ServiceDescription', description='The description of the endpoint service.', example='This is my EndpointService.'),
  serviceId?: string(name='ServiceId', description='The ID of the endpoint service.', example='epsrv-hp3vpx8yqxblby3i****'),
  serviceSupportIPv6?: boolean(name='ServiceSupportIPv6', description='Specifies whether to enable IPv6. Valid values:

*   **true**: enables IPv6.
*   **false**: disables IPv6. This is the default value.', example='false'),
  zoneAffinityEnabled?: boolean(name='ZoneAffinityEnabled', description='Specifies whether to enable zone affinity. Valid values:

*   **true**: enables zone affinity.
*   **false**: disables zone affinity. This is the default value.', example='true'),
}

model UpdateVpcEndpointServiceAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='8D8992C1-6712-423C-BAC5-E5E817484C6B'),
}

model UpdateVpcEndpointServiceAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateVpcEndpointServiceAttributeResponseBody(name='body'),
}

/**
  * You cannot use the **UpdateVpcEndpointServiceAttribute** operation to modify the attributes of multiple endpoint services that belong to the same Alibaba Cloud account at the same time.
  *
  * @param request UpdateVpcEndpointServiceAttributeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateVpcEndpointServiceAttributeResponse
 */
async function updateVpcEndpointServiceAttributeWithOptions(request: UpdateVpcEndpointServiceAttributeRequest, runtime: Util.RuntimeOptions): UpdateVpcEndpointServiceAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoAcceptEnabled)) {
    query['AutoAcceptEnabled'] = request.autoAcceptEnabled;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.connectBandwidth)) {
    query['ConnectBandwidth'] = request.connectBandwidth;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.serviceDescription)) {
    query['ServiceDescription'] = request.serviceDescription;
  }
  if (!Util.isUnset(request.serviceId)) {
    query['ServiceId'] = request.serviceId;
  }
  if (!Util.isUnset(request.serviceSupportIPv6)) {
    query['ServiceSupportIPv6'] = request.serviceSupportIPv6;
  }
  if (!Util.isUnset(request.zoneAffinityEnabled)) {
    query['ZoneAffinityEnabled'] = request.zoneAffinityEnabled;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateVpcEndpointServiceAttribute',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You cannot use the **UpdateVpcEndpointServiceAttribute** operation to modify the attributes of multiple endpoint services that belong to the same Alibaba Cloud account at the same time.
  *
  * @param request UpdateVpcEndpointServiceAttributeRequest
  * @return UpdateVpcEndpointServiceAttributeResponse
 */
async function updateVpcEndpointServiceAttribute(request: UpdateVpcEndpointServiceAttributeRequest): UpdateVpcEndpointServiceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateVpcEndpointServiceAttributeWithOptions(request, runtime);
}

model UpdateVpcEndpointServiceResourceAttributeRequest {
  autoAllocatedEnabled?: boolean(name='AutoAllocatedEnabled', description='Specifies whether to allow automatic resource allocation. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='0c593ea1-3bea-11e9-b96b-88e9fe637760'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to only precheck this request. Valid values:

*   **true**: only prechecks the API request without performing the operation. The system checks whether your AccessKey pair is valid, whether the Resource Access Management (RAM) user is authorized, and whether required parameters are set. If the request fails to pass the precheck, an error code is returned. If the request passes the precheck, the `DryRunOperation` error code is returned.
*   **false** (default): sends the request. If the request passes the precheck, a 2xx HTTP status code is returned and the service resource is modified.', example='false'),
  regionId?: string(name='RegionId', description='The ID of the region where the service resource that you want to modify is deployed.

You can call the [DescribeRegions](~~120468~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceId?: string(name='ResourceId', description='The ID of the service resource.', example='lb-hp32z1wp5peaoox2q****'),
  serviceId?: string(name='ServiceId', description='The ID of the endpoint service.', example='epsrv-hp3vpx8yqxblby3i****'),
}

model UpdateVpcEndpointServiceResourceAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model UpdateVpcEndpointServiceResourceAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateVpcEndpointServiceResourceAttributeResponseBody(name='body'),
}

async function updateVpcEndpointServiceResourceAttributeWithOptions(request: UpdateVpcEndpointServiceResourceAttributeRequest, runtime: Util.RuntimeOptions): UpdateVpcEndpointServiceResourceAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoAllocatedEnabled)) {
    query['AutoAllocatedEnabled'] = request.autoAllocatedEnabled;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.serviceId)) {
    query['ServiceId'] = request.serviceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateVpcEndpointServiceResourceAttribute',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateVpcEndpointServiceResourceAttribute(request: UpdateVpcEndpointServiceResourceAttributeRequest): UpdateVpcEndpointServiceResourceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateVpcEndpointServiceResourceAttributeWithOptions(request, runtime);
}

model UpdateVpcEndpointZoneConnectionResourceAttributeRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='0c593ea1-3bea-11e9-b96b-88e9fe637760'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to only precheck the request. Valid values:

*   **true**: only prechecks the request without performing the operation. The system prechecks whether your AccessKey pair is valid, whether the Resource Access Management (RAM) user is authorized, and whether required parameters are set. If the request fails to pass the precheck, the corresponding error message is returned. If the request passes the precheck, the `DryRunOperation` error code is returned.
*   **false** (default): sends the request. If the request passes the precheck, a 2xx HTTP status code is returned and the operation is performed.', example='false'),
  endpointId?: string(name='EndpointId', description='The ID of the endpoint.', example='epsrv-hp3vpx8yqxblby3i****'),
  regionId?: string(name='RegionId', description='The region ID of the endpoint connection bandwidth that you want to modify.

You can call the [DescribeRegions](~~120468~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceAllocateMode?: string(name='ResourceAllocateMode', description='The resource allocation mode. You can adjust the resource allocation mode only if the endpoint connection is in the **Disconnected** state. Valid values:

*   **Auto**: automatically and randomly allocates service resources. In this mode, the specified service resource is deleted.
*   **Mannual**: manually allocates service resources. If you set the value to Mannual, you must also set **ResourceId** and **ResourceType**.', example='Auto'),
  resourceId?: string(name='ResourceId', description='The ID of the service resource that you want to manually allocate or migrate in the zone of the endpoint connection.

>  If **ResourceAllocateMode** is set to **Manual**, or **ResourceReplaceMode** is set, this parameter is required.', example='lb-hp32z1wp5peaoox2q****'),
  resourceReplaceMode?: string(name='ResourceReplaceMode', description='The migration mode of service resources. Valid values:

*   **Graceful**: smooth migration. Service resources in the zone are smoothly migrated.
*   **Force**: forced migration. Service resources in the zone are forcefully migrated.

>  If you want to migrate service resources, you can set this parameter. This parameter is available only if the endpoint connection is in the **Connected** state. If you set this parameter, you must also set **ResourceId** and **ResourceType**.', example='Graceful'),
  resourceType?: string(name='ResourceType', description='The type of the service resource.

Set the value to **slb**, which specifies that the service resource is a Classic Load Balancer (CLB) instance that supports PrivateLink. In addition, the CLB instance is deployed in a virtual private cloud (VPC).

>  If **ResourceAllocateMode** is set to **Manual**, or **ResourceReplaceMode** is set, this parameter is required.', example='slb'),
  serviceId?: string(name='ServiceId', description='The ID of the endpoint service.', example='epsrv-hp3vpx8yqxblby3i****'),
  zoneId?: string(name='ZoneId', description='The ID of the zone.', example='cn-hangzhou-b'),
}

model UpdateVpcEndpointZoneConnectionResourceAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model UpdateVpcEndpointZoneConnectionResourceAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateVpcEndpointZoneConnectionResourceAttributeResponseBody(name='body'),
}

/**
  * *   If an endpoint connection is in the **Disconnected** state, you can manually allocate the service resources in the zone.
  * *   If an endpoint connection is in the **Connected** state, you can manually migrate the service resources in the zone. In this case, the connection may be interrupted.
  *
  * @param request UpdateVpcEndpointZoneConnectionResourceAttributeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateVpcEndpointZoneConnectionResourceAttributeResponse
 */
async function updateVpcEndpointZoneConnectionResourceAttributeWithOptions(request: UpdateVpcEndpointZoneConnectionResourceAttributeRequest, runtime: Util.RuntimeOptions): UpdateVpcEndpointZoneConnectionResourceAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.endpointId)) {
    query['EndpointId'] = request.endpointId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceAllocateMode)) {
    query['ResourceAllocateMode'] = request.resourceAllocateMode;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceReplaceMode)) {
    query['ResourceReplaceMode'] = request.resourceReplaceMode;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.serviceId)) {
    query['ServiceId'] = request.serviceId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateVpcEndpointZoneConnectionResourceAttribute',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   If an endpoint connection is in the **Disconnected** state, you can manually allocate the service resources in the zone.
  * *   If an endpoint connection is in the **Connected** state, you can manually migrate the service resources in the zone. In this case, the connection may be interrupted.
  *
  * @param request UpdateVpcEndpointZoneConnectionResourceAttributeRequest
  * @return UpdateVpcEndpointZoneConnectionResourceAttributeResponse
 */
async function updateVpcEndpointZoneConnectionResourceAttribute(request: UpdateVpcEndpointZoneConnectionResourceAttributeRequest): UpdateVpcEndpointZoneConnectionResourceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateVpcEndpointZoneConnectionResourceAttributeWithOptions(request, runtime);
}

