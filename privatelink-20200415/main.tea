/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('privatelink', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddUserToVpcEndpointServiceRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  regionId?: string(name='RegionId'),
  serviceId?: string(name='ServiceId'),
  userId?: long(name='UserId'),
}

model AddUserToVpcEndpointServiceResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddUserToVpcEndpointServiceResponse = {
  headers: map[string]string(name='headers'),
  body: AddUserToVpcEndpointServiceResponseBody(name='body'),
}

async function addUserToVpcEndpointServiceWithOptions(request: AddUserToVpcEndpointServiceRequest, runtime: Util.RuntimeOptions): AddUserToVpcEndpointServiceResponse {
  Util.validateModel(request);
  var query = {};
  query['ClientToken'] = request.clientToken;
  query['DryRun'] = request.dryRun;
  query['RegionId'] = request.regionId;
  query['RegionId'] = request.regionId;
  query['ServiceId'] = request.serviceId;
  query['UserId'] = request.userId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddUserToVpcEndpointService',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addUserToVpcEndpointService(request: AddUserToVpcEndpointServiceRequest): AddUserToVpcEndpointServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return addUserToVpcEndpointServiceWithOptions(request, runtime);
}

model AddZoneToVpcEndpointRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  endpointId?: string(name='EndpointId'),
  regionId?: string(name='RegionId'),
  vSwitchId?: string(name='VSwitchId'),
  zoneId?: string(name='ZoneId'),
  ip?: string(name='ip'),
}

model AddZoneToVpcEndpointResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddZoneToVpcEndpointResponse = {
  headers: map[string]string(name='headers'),
  body: AddZoneToVpcEndpointResponseBody(name='body'),
}

async function addZoneToVpcEndpointWithOptions(request: AddZoneToVpcEndpointRequest, runtime: Util.RuntimeOptions): AddZoneToVpcEndpointResponse {
  Util.validateModel(request);
  var query = {};
  query['ClientToken'] = request.clientToken;
  query['DryRun'] = request.dryRun;
  query['EndpointId'] = request.endpointId;
  query['RegionId'] = request.regionId;
  query['RegionId'] = request.regionId;
  query['VSwitchId'] = request.vSwitchId;
  query['ZoneId'] = request.zoneId;
  query['ip'] = request.ip;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddZoneToVpcEndpoint',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addZoneToVpcEndpoint(request: AddZoneToVpcEndpointRequest): AddZoneToVpcEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  return addZoneToVpcEndpointWithOptions(request, runtime);
}

model AttachResourceToVpcEndpointServiceRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  regionId?: string(name='RegionId'),
  resourceId?: string(name='ResourceId'),
  resourceType?: string(name='ResourceType'),
  serviceId?: string(name='ServiceId'),
}

model AttachResourceToVpcEndpointServiceResponseBody = {
  requestId?: string(name='RequestId'),
}

model AttachResourceToVpcEndpointServiceResponse = {
  headers: map[string]string(name='headers'),
  body: AttachResourceToVpcEndpointServiceResponseBody(name='body'),
}

async function attachResourceToVpcEndpointServiceWithOptions(request: AttachResourceToVpcEndpointServiceRequest, runtime: Util.RuntimeOptions): AttachResourceToVpcEndpointServiceResponse {
  Util.validateModel(request);
  var query = {};
  query['ClientToken'] = request.clientToken;
  query['DryRun'] = request.dryRun;
  query['RegionId'] = request.regionId;
  query['RegionId'] = request.regionId;
  query['ResourceId'] = request.resourceId;
  query['ResourceType'] = request.resourceType;
  query['ServiceId'] = request.serviceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AttachResourceToVpcEndpointService',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function attachResourceToVpcEndpointService(request: AttachResourceToVpcEndpointServiceRequest): AttachResourceToVpcEndpointServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachResourceToVpcEndpointServiceWithOptions(request, runtime);
}

model AttachSecurityGroupToVpcEndpointRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  endpointId?: string(name='EndpointId'),
  regionId?: string(name='RegionId'),
  securityGroupId?: string(name='SecurityGroupId'),
}

model AttachSecurityGroupToVpcEndpointResponseBody = {
  requestId?: string(name='RequestId'),
}

model AttachSecurityGroupToVpcEndpointResponse = {
  headers: map[string]string(name='headers'),
  body: AttachSecurityGroupToVpcEndpointResponseBody(name='body'),
}

async function attachSecurityGroupToVpcEndpointWithOptions(request: AttachSecurityGroupToVpcEndpointRequest, runtime: Util.RuntimeOptions): AttachSecurityGroupToVpcEndpointResponse {
  Util.validateModel(request);
  var query = {};
  query['ClientToken'] = request.clientToken;
  query['DryRun'] = request.dryRun;
  query['EndpointId'] = request.endpointId;
  query['RegionId'] = request.regionId;
  query['RegionId'] = request.regionId;
  query['SecurityGroupId'] = request.securityGroupId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AttachSecurityGroupToVpcEndpoint',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function attachSecurityGroupToVpcEndpoint(request: AttachSecurityGroupToVpcEndpointRequest): AttachSecurityGroupToVpcEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachSecurityGroupToVpcEndpointWithOptions(request, runtime);
}

model CheckProductOpenResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CheckProductOpenResponse = {
  headers: map[string]string(name='headers'),
  body: CheckProductOpenResponseBody(name='body'),
}

async function checkProductOpenWithOptions(runtime: Util.RuntimeOptions): CheckProductOpenResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'CheckProductOpen',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkProductOpen(): CheckProductOpenResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkProductOpenWithOptions(runtime);
}

model CreateVpcEndpointRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  endpointDescription?: string(name='EndpointDescription'),
  endpointName?: string(name='EndpointName'),
  endpointType?: string(name='EndpointType'),
  protectedEnabled?: boolean(name='ProtectedEnabled'),
  regionId?: string(name='RegionId'),
  securityGroupId?: [ string ](name='SecurityGroupId'),
  serviceId?: string(name='ServiceId'),
  serviceName?: string(name='ServiceName'),
  vpcId?: string(name='VpcId'),
  zone?: [ 
    {
      vSwitchId?: string(name='VSwitchId'),
      zoneId?: string(name='ZoneId'),
      ip?: string(name='ip'),
    }
  ](name='Zone'),
  zonePrivateIpAddressCount?: long(name='ZonePrivateIpAddressCount'),
}

model CreateVpcEndpointResponseBody = {
  bandwidth?: long(name='Bandwidth'),
  connectionStatus?: string(name='ConnectionStatus'),
  createTime?: string(name='CreateTime'),
  endpointBusinessStatus?: string(name='EndpointBusinessStatus'),
  endpointDescription?: string(name='EndpointDescription'),
  endpointDomain?: string(name='EndpointDomain'),
  endpointId?: string(name='EndpointId'),
  endpointName?: string(name='EndpointName'),
  endpointStatus?: string(name='EndpointStatus'),
  requestId?: string(name='RequestId'),
  serviceId?: string(name='ServiceId'),
  serviceName?: string(name='ServiceName'),
  vpcId?: string(name='VpcId'),
}

model CreateVpcEndpointResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVpcEndpointResponseBody(name='body'),
}

async function createVpcEndpointWithOptions(request: CreateVpcEndpointRequest, runtime: Util.RuntimeOptions): CreateVpcEndpointResponse {
  Util.validateModel(request);
  var query = {};
  query['ClientToken'] = request.clientToken;
  query['DryRun'] = request.dryRun;
  query['EndpointDescription'] = request.endpointDescription;
  query['EndpointName'] = request.endpointName;
  query['EndpointType'] = request.endpointType;
  query['ProtectedEnabled'] = request.protectedEnabled;
  query['RegionId'] = request.regionId;
  query['RegionId'] = request.regionId;
  query['SecurityGroupId'] = request.securityGroupId;
  query['ServiceId'] = request.serviceId;
  query['ServiceName'] = request.serviceName;
  query['VpcId'] = request.vpcId;
  query['Zone'] = request.zone;
  query['ZonePrivateIpAddressCount'] = request.zonePrivateIpAddressCount;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateVpcEndpoint',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createVpcEndpoint(request: CreateVpcEndpointRequest): CreateVpcEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVpcEndpointWithOptions(request, runtime);
}

model CreateVpcEndpointServiceRequest {
  autoAcceptEnabled?: boolean(name='AutoAcceptEnabled'),
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  payer?: string(name='Payer'),
  regionId?: string(name='RegionId'),
  resource?: [ 
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
    }
  ](name='Resource'),
  serviceDescription?: string(name='ServiceDescription'),
  serviceResourceType?: string(name='ServiceResourceType'),
  zoneAffinityEnabled?: boolean(name='ZoneAffinityEnabled'),
}

model CreateVpcEndpointServiceResponseBody = {
  autoAcceptEnabled?: boolean(name='AutoAcceptEnabled'),
  createTime?: string(name='CreateTime'),
  requestId?: string(name='RequestId'),
  serviceBusinessStatus?: string(name='ServiceBusinessStatus'),
  serviceDescription?: string(name='ServiceDescription'),
  serviceDomain?: string(name='ServiceDomain'),
  serviceId?: string(name='ServiceId'),
  serviceName?: string(name='ServiceName'),
  serviceStatus?: string(name='ServiceStatus'),
  zoneAffinityEnabled?: boolean(name='ZoneAffinityEnabled'),
}

model CreateVpcEndpointServiceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVpcEndpointServiceResponseBody(name='body'),
}

async function createVpcEndpointServiceWithOptions(request: CreateVpcEndpointServiceRequest, runtime: Util.RuntimeOptions): CreateVpcEndpointServiceResponse {
  Util.validateModel(request);
  var query = {};
  query['AutoAcceptEnabled'] = request.autoAcceptEnabled;
  query['ClientToken'] = request.clientToken;
  query['DryRun'] = request.dryRun;
  query['Payer'] = request.payer;
  query['RegionId'] = request.regionId;
  query['RegionId'] = request.regionId;
  query['Resource'] = request.resource;
  query['ServiceDescription'] = request.serviceDescription;
  query['ServiceResourceType'] = request.serviceResourceType;
  query['ZoneAffinityEnabled'] = request.zoneAffinityEnabled;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateVpcEndpointService',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createVpcEndpointService(request: CreateVpcEndpointServiceRequest): CreateVpcEndpointServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVpcEndpointServiceWithOptions(request, runtime);
}

model DeleteVpcEndpointRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  endpointId?: string(name='EndpointId'),
  regionId?: string(name='RegionId'),
}

model DeleteVpcEndpointResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVpcEndpointResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVpcEndpointResponseBody(name='body'),
}

async function deleteVpcEndpointWithOptions(request: DeleteVpcEndpointRequest, runtime: Util.RuntimeOptions): DeleteVpcEndpointResponse {
  Util.validateModel(request);
  var query = {};
  query['ClientToken'] = request.clientToken;
  query['DryRun'] = request.dryRun;
  query['EndpointId'] = request.endpointId;
  query['RegionId'] = request.regionId;
  query['RegionId'] = request.regionId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteVpcEndpoint',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteVpcEndpoint(request: DeleteVpcEndpointRequest): DeleteVpcEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVpcEndpointWithOptions(request, runtime);
}

model DeleteVpcEndpointServiceRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  regionId?: string(name='RegionId'),
  serviceId?: string(name='ServiceId'),
}

model DeleteVpcEndpointServiceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVpcEndpointServiceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVpcEndpointServiceResponseBody(name='body'),
}

async function deleteVpcEndpointServiceWithOptions(request: DeleteVpcEndpointServiceRequest, runtime: Util.RuntimeOptions): DeleteVpcEndpointServiceResponse {
  Util.validateModel(request);
  var query = {};
  query['ClientToken'] = request.clientToken;
  query['DryRun'] = request.dryRun;
  query['RegionId'] = request.regionId;
  query['RegionId'] = request.regionId;
  query['ServiceId'] = request.serviceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteVpcEndpointService',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteVpcEndpointService(request: DeleteVpcEndpointServiceRequest): DeleteVpcEndpointServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVpcEndpointServiceWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  regionId?: string(name='RegionId'),
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
    }
  ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var query = {};
  query['RegionId'] = request.regionId;
  query['RegionId'] = request.regionId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRegions',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeZonesRequest {
  regionId?: string(name='RegionId'),
}

model DescribeZonesResponseBody = {
  requestId?: string(name='RequestId'),
  zones?: {
    zone?: [ 
    {
      localName?: string(name='LocalName'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='Zone')
  }(name='Zones'),
}

model DescribeZonesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeZonesResponseBody(name='body'),
}

async function describeZonesWithOptions(request: DescribeZonesRequest, runtime: Util.RuntimeOptions): DescribeZonesResponse {
  Util.validateModel(request);
  var query = {};
  query['RegionId'] = request.regionId;
  query['RegionId'] = request.regionId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeZones',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeZones(request: DescribeZonesRequest): DescribeZonesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeZonesWithOptions(request, runtime);
}

model DetachResourceFromVpcEndpointServiceRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  regionId?: string(name='RegionId'),
  resourceId?: string(name='ResourceId'),
  resourceType?: string(name='ResourceType'),
  serviceId?: string(name='ServiceId'),
}

model DetachResourceFromVpcEndpointServiceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DetachResourceFromVpcEndpointServiceResponse = {
  headers: map[string]string(name='headers'),
  body: DetachResourceFromVpcEndpointServiceResponseBody(name='body'),
}

async function detachResourceFromVpcEndpointServiceWithOptions(request: DetachResourceFromVpcEndpointServiceRequest, runtime: Util.RuntimeOptions): DetachResourceFromVpcEndpointServiceResponse {
  Util.validateModel(request);
  var query = {};
  query['ClientToken'] = request.clientToken;
  query['DryRun'] = request.dryRun;
  query['RegionId'] = request.regionId;
  query['RegionId'] = request.regionId;
  query['ResourceId'] = request.resourceId;
  query['ResourceType'] = request.resourceType;
  query['ServiceId'] = request.serviceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetachResourceFromVpcEndpointService',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function detachResourceFromVpcEndpointService(request: DetachResourceFromVpcEndpointServiceRequest): DetachResourceFromVpcEndpointServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachResourceFromVpcEndpointServiceWithOptions(request, runtime);
}

model DetachSecurityGroupFromVpcEndpointRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  endpointId?: string(name='EndpointId'),
  regionId?: string(name='RegionId'),
  securityGroupId?: string(name='SecurityGroupId'),
}

model DetachSecurityGroupFromVpcEndpointResponseBody = {
  requestId?: string(name='RequestId'),
}

model DetachSecurityGroupFromVpcEndpointResponse = {
  headers: map[string]string(name='headers'),
  body: DetachSecurityGroupFromVpcEndpointResponseBody(name='body'),
}

async function detachSecurityGroupFromVpcEndpointWithOptions(request: DetachSecurityGroupFromVpcEndpointRequest, runtime: Util.RuntimeOptions): DetachSecurityGroupFromVpcEndpointResponse {
  Util.validateModel(request);
  var query = {};
  query['ClientToken'] = request.clientToken;
  query['DryRun'] = request.dryRun;
  query['EndpointId'] = request.endpointId;
  query['RegionId'] = request.regionId;
  query['RegionId'] = request.regionId;
  query['SecurityGroupId'] = request.securityGroupId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetachSecurityGroupFromVpcEndpoint',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function detachSecurityGroupFromVpcEndpoint(request: DetachSecurityGroupFromVpcEndpointRequest): DetachSecurityGroupFromVpcEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachSecurityGroupFromVpcEndpointWithOptions(request, runtime);
}

model DisableVpcEndpointConnectionRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  endpointId?: string(name='EndpointId'),
  regionId?: string(name='RegionId'),
  serviceId?: string(name='ServiceId'),
}

model DisableVpcEndpointConnectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisableVpcEndpointConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: DisableVpcEndpointConnectionResponseBody(name='body'),
}

async function disableVpcEndpointConnectionWithOptions(request: DisableVpcEndpointConnectionRequest, runtime: Util.RuntimeOptions): DisableVpcEndpointConnectionResponse {
  Util.validateModel(request);
  var query = {};
  query['ClientToken'] = request.clientToken;
  query['DryRun'] = request.dryRun;
  query['EndpointId'] = request.endpointId;
  query['RegionId'] = request.regionId;
  query['RegionId'] = request.regionId;
  query['ServiceId'] = request.serviceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableVpcEndpointConnection',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableVpcEndpointConnection(request: DisableVpcEndpointConnectionRequest): DisableVpcEndpointConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableVpcEndpointConnectionWithOptions(request, runtime);
}

model EnableVpcEndpointConnectionRequest {
  bandwidth?: int32(name='Bandwidth'),
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  endpointId?: string(name='EndpointId'),
  regionId?: string(name='RegionId'),
  serviceId?: string(name='ServiceId'),
}

model EnableVpcEndpointConnectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnableVpcEndpointConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: EnableVpcEndpointConnectionResponseBody(name='body'),
}

async function enableVpcEndpointConnectionWithOptions(request: EnableVpcEndpointConnectionRequest, runtime: Util.RuntimeOptions): EnableVpcEndpointConnectionResponse {
  Util.validateModel(request);
  var query = {};
  query['Bandwidth'] = request.bandwidth;
  query['ClientToken'] = request.clientToken;
  query['DryRun'] = request.dryRun;
  query['EndpointId'] = request.endpointId;
  query['RegionId'] = request.regionId;
  query['RegionId'] = request.regionId;
  query['ServiceId'] = request.serviceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableVpcEndpointConnection',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableVpcEndpointConnection(request: EnableVpcEndpointConnectionRequest): EnableVpcEndpointConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableVpcEndpointConnectionWithOptions(request, runtime);
}

model GetVpcEndpointAttributeRequest {
  endpointId?: string(name='EndpointId'),
  regionId?: string(name='RegionId'),
}

model GetVpcEndpointAttributeResponseBody = {
  bandwidth?: int32(name='Bandwidth'),
  connectionStatus?: string(name='ConnectionStatus'),
  createTime?: string(name='CreateTime'),
  endpointBusinessStatus?: string(name='EndpointBusinessStatus'),
  endpointDescription?: string(name='EndpointDescription'),
  endpointDomain?: string(name='EndpointDomain'),
  endpointId?: string(name='EndpointId'),
  endpointName?: string(name='EndpointName'),
  endpointStatus?: string(name='EndpointStatus'),
  endpointType?: string(name='EndpointType'),
  payer?: string(name='Payer'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
  resourceOwner?: boolean(name='ResourceOwner'),
  serviceId?: string(name='ServiceId'),
  serviceName?: string(name='ServiceName'),
  vpcId?: string(name='VpcId'),
  zoneAffinityEnabled?: boolean(name='ZoneAffinityEnabled'),
  zonePrivateIpAddressCount?: long(name='ZonePrivateIpAddressCount'),
}

model GetVpcEndpointAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: GetVpcEndpointAttributeResponseBody(name='body'),
}

async function getVpcEndpointAttributeWithOptions(request: GetVpcEndpointAttributeRequest, runtime: Util.RuntimeOptions): GetVpcEndpointAttributeResponse {
  Util.validateModel(request);
  var query = {};
  query['EndpointId'] = request.endpointId;
  query['RegionId'] = request.regionId;
  query['RegionId'] = request.regionId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetVpcEndpointAttribute',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getVpcEndpointAttribute(request: GetVpcEndpointAttributeRequest): GetVpcEndpointAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getVpcEndpointAttributeWithOptions(request, runtime);
}

model GetVpcEndpointServiceAttributeRequest {
  regionId?: string(name='RegionId'),
  serviceId?: string(name='ServiceId'),
}

model GetVpcEndpointServiceAttributeResponseBody = {
  autoAcceptEnabled?: boolean(name='AutoAcceptEnabled'),
  connectBandwidth?: int32(name='ConnectBandwidth'),
  createTime?: string(name='CreateTime'),
  maxBandwidth?: int32(name='MaxBandwidth'),
  minBandwidth?: int32(name='MinBandwidth'),
  payer?: string(name='Payer'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
  serviceBusinessStatus?: string(name='ServiceBusinessStatus'),
  serviceDescription?: string(name='ServiceDescription'),
  serviceDomain?: string(name='ServiceDomain'),
  serviceId?: string(name='ServiceId'),
  serviceName?: string(name='ServiceName'),
  serviceResourceType?: string(name='ServiceResourceType'),
  serviceStatus?: string(name='ServiceStatus'),
  serviceType?: string(name='ServiceType'),
  zoneAffinityEnabled?: boolean(name='ZoneAffinityEnabled'),
  zones?: [ string ](name='Zones'),
}

model GetVpcEndpointServiceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: GetVpcEndpointServiceAttributeResponseBody(name='body'),
}

async function getVpcEndpointServiceAttributeWithOptions(request: GetVpcEndpointServiceAttributeRequest, runtime: Util.RuntimeOptions): GetVpcEndpointServiceAttributeResponse {
  Util.validateModel(request);
  var query = {};
  query['RegionId'] = request.regionId;
  query['RegionId'] = request.regionId;
  query['ServiceId'] = request.serviceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetVpcEndpointServiceAttribute',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getVpcEndpointServiceAttribute(request: GetVpcEndpointServiceAttributeRequest): GetVpcEndpointServiceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getVpcEndpointServiceAttributeWithOptions(request, runtime);
}

model ListVpcEndpointConnectionsRequest {
  connectionStatus?: string(name='ConnectionStatus'),
  endpointId?: string(name='EndpointId'),
  endpointOwnerId?: long(name='EndpointOwnerId'),
  eniId?: string(name='EniId'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
  serviceId?: string(name='ServiceId'),
}

model ListVpcEndpointConnectionsResponseBody = {
  connections?: [ 
    {
      bandwidth?: int32(name='Bandwidth'),
      connectionStatus?: string(name='ConnectionStatus'),
      endpointId?: string(name='EndpointId'),
      endpointOwnerId?: long(name='EndpointOwnerId'),
      endpointVpcId?: string(name='EndpointVpcId'),
      modifiedTime?: string(name='ModifiedTime'),
      resourceOwner?: boolean(name='ResourceOwner'),
      serviceId?: string(name='ServiceId'),
      zones?: [ 
        {
          eniId?: string(name='EniId'),
          resourceId?: string(name='ResourceId'),
          vSwitchId?: string(name='VSwitchId'),
          zoneDomain?: string(name='ZoneDomain'),
          zoneId?: string(name='ZoneId'),
        }
      ](name='Zones'),
    }
  ](name='Connections'),
  maxResults?: string(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model ListVpcEndpointConnectionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListVpcEndpointConnectionsResponseBody(name='body'),
}

async function listVpcEndpointConnectionsWithOptions(request: ListVpcEndpointConnectionsRequest, runtime: Util.RuntimeOptions): ListVpcEndpointConnectionsResponse {
  Util.validateModel(request);
  var query = {};
  query['ConnectionStatus'] = request.connectionStatus;
  query['EndpointId'] = request.endpointId;
  query['EndpointOwnerId'] = request.endpointOwnerId;
  query['EniId'] = request.eniId;
  query['MaxResults'] = request.maxResults;
  query['NextToken'] = request.nextToken;
  query['RegionId'] = request.regionId;
  query['RegionId'] = request.regionId;
  query['ServiceId'] = request.serviceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListVpcEndpointConnections',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listVpcEndpointConnections(request: ListVpcEndpointConnectionsRequest): ListVpcEndpointConnectionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVpcEndpointConnectionsWithOptions(request, runtime);
}

model ListVpcEndpointSecurityGroupsRequest {
  endpointId?: string(name='EndpointId'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
}

model ListVpcEndpointSecurityGroupsResponseBody = {
  maxResults?: string(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  securityGroups?: [ 
    {
      securityGroupId?: string(name='SecurityGroupId'),
    }
  ](name='SecurityGroups'),
}

model ListVpcEndpointSecurityGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListVpcEndpointSecurityGroupsResponseBody(name='body'),
}

async function listVpcEndpointSecurityGroupsWithOptions(request: ListVpcEndpointSecurityGroupsRequest, runtime: Util.RuntimeOptions): ListVpcEndpointSecurityGroupsResponse {
  Util.validateModel(request);
  var query = {};
  query['EndpointId'] = request.endpointId;
  query['MaxResults'] = request.maxResults;
  query['NextToken'] = request.nextToken;
  query['RegionId'] = request.regionId;
  query['RegionId'] = request.regionId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListVpcEndpointSecurityGroups',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listVpcEndpointSecurityGroups(request: ListVpcEndpointSecurityGroupsRequest): ListVpcEndpointSecurityGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVpcEndpointSecurityGroupsWithOptions(request, runtime);
}

model ListVpcEndpointServiceResourcesRequest {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
  serviceId?: string(name='ServiceId'),
}

model ListVpcEndpointServiceResourcesResponseBody = {
  maxResults?: string(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  resources?: [ 
    {
      ip?: string(name='Ip'),
      regionId?: string(name='RegionId'),
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      vSwitchId?: string(name='VSwitchId'),
      vpcId?: string(name='VpcId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='Resources'),
}

model ListVpcEndpointServiceResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListVpcEndpointServiceResourcesResponseBody(name='body'),
}

async function listVpcEndpointServiceResourcesWithOptions(request: ListVpcEndpointServiceResourcesRequest, runtime: Util.RuntimeOptions): ListVpcEndpointServiceResourcesResponse {
  Util.validateModel(request);
  var query = {};
  query['MaxResults'] = request.maxResults;
  query['NextToken'] = request.nextToken;
  query['RegionId'] = request.regionId;
  query['RegionId'] = request.regionId;
  query['ServiceId'] = request.serviceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListVpcEndpointServiceResources',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listVpcEndpointServiceResources(request: ListVpcEndpointServiceResourcesRequest): ListVpcEndpointServiceResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVpcEndpointServiceResourcesWithOptions(request, runtime);
}

model ListVpcEndpointServiceUsersRequest {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
  serviceId?: string(name='ServiceId'),
  userId?: long(name='UserId'),
}

model ListVpcEndpointServiceUsersResponseBody = {
  maxResults?: string(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  users?: [ 
    {
      userId?: long(name='UserId'),
    }
  ](name='Users'),
}

model ListVpcEndpointServiceUsersResponse = {
  headers: map[string]string(name='headers'),
  body: ListVpcEndpointServiceUsersResponseBody(name='body'),
}

async function listVpcEndpointServiceUsersWithOptions(request: ListVpcEndpointServiceUsersRequest, runtime: Util.RuntimeOptions): ListVpcEndpointServiceUsersResponse {
  Util.validateModel(request);
  var query = {};
  query['MaxResults'] = request.maxResults;
  query['NextToken'] = request.nextToken;
  query['RegionId'] = request.regionId;
  query['RegionId'] = request.regionId;
  query['ServiceId'] = request.serviceId;
  query['UserId'] = request.userId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListVpcEndpointServiceUsers',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listVpcEndpointServiceUsers(request: ListVpcEndpointServiceUsersRequest): ListVpcEndpointServiceUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVpcEndpointServiceUsersWithOptions(request, runtime);
}

model ListVpcEndpointServicesRequest {
  autoAcceptEnabled?: boolean(name='AutoAcceptEnabled'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
  serviceBusinessStatus?: string(name='ServiceBusinessStatus'),
  serviceId?: string(name='ServiceId'),
  serviceName?: string(name='ServiceName'),
  serviceResourceType?: string(name='ServiceResourceType'),
  serviceStatus?: string(name='ServiceStatus'),
  zoneAffinityEnabled?: boolean(name='ZoneAffinityEnabled'),
}

model ListVpcEndpointServicesResponseBody = {
  maxResults?: string(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  services?: [ 
    {
      autoAcceptEnabled?: boolean(name='AutoAcceptEnabled'),
      connectBandwidth?: int32(name='ConnectBandwidth'),
      createTime?: string(name='CreateTime'),
      maxBandwidth?: int32(name='MaxBandwidth'),
      minBandwidth?: int32(name='MinBandwidth'),
      payer?: string(name='Payer'),
      regionId?: string(name='RegionId'),
      serviceBusinessStatus?: string(name='ServiceBusinessStatus'),
      serviceDescription?: string(name='ServiceDescription'),
      serviceDomain?: string(name='ServiceDomain'),
      serviceId?: string(name='ServiceId'),
      serviceName?: string(name='ServiceName'),
      serviceResourceType?: string(name='ServiceResourceType'),
      serviceStatus?: string(name='ServiceStatus'),
      serviceType?: string(name='ServiceType'),
      zoneAffinityEnabled?: boolean(name='ZoneAffinityEnabled'),
    }
  ](name='Services'),
}

model ListVpcEndpointServicesResponse = {
  headers: map[string]string(name='headers'),
  body: ListVpcEndpointServicesResponseBody(name='body'),
}

async function listVpcEndpointServicesWithOptions(request: ListVpcEndpointServicesRequest, runtime: Util.RuntimeOptions): ListVpcEndpointServicesResponse {
  Util.validateModel(request);
  var query = {};
  query['AutoAcceptEnabled'] = request.autoAcceptEnabled;
  query['MaxResults'] = request.maxResults;
  query['NextToken'] = request.nextToken;
  query['RegionId'] = request.regionId;
  query['RegionId'] = request.regionId;
  query['ServiceBusinessStatus'] = request.serviceBusinessStatus;
  query['ServiceId'] = request.serviceId;
  query['ServiceName'] = request.serviceName;
  query['ServiceResourceType'] = request.serviceResourceType;
  query['ServiceStatus'] = request.serviceStatus;
  query['ZoneAffinityEnabled'] = request.zoneAffinityEnabled;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListVpcEndpointServices',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listVpcEndpointServices(request: ListVpcEndpointServicesRequest): ListVpcEndpointServicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVpcEndpointServicesWithOptions(request, runtime);
}

model ListVpcEndpointServicesByEndUserRequest {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
  serviceId?: string(name='ServiceId'),
  serviceName?: string(name='ServiceName'),
  serviceType?: string(name='ServiceType'),
}

model ListVpcEndpointServicesByEndUserResponseBody = {
  maxResults?: string(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  services?: [ 
    {
      payer?: string(name='Payer'),
      serviceDomain?: string(name='ServiceDomain'),
      serviceId?: string(name='ServiceId'),
      serviceName?: string(name='ServiceName'),
      serviceType?: string(name='ServiceType'),
      zones?: [ string ](name='Zones'),
    }
  ](name='Services'),
}

model ListVpcEndpointServicesByEndUserResponse = {
  headers: map[string]string(name='headers'),
  body: ListVpcEndpointServicesByEndUserResponseBody(name='body'),
}

async function listVpcEndpointServicesByEndUserWithOptions(request: ListVpcEndpointServicesByEndUserRequest, runtime: Util.RuntimeOptions): ListVpcEndpointServicesByEndUserResponse {
  Util.validateModel(request);
  var query = {};
  query['MaxResults'] = request.maxResults;
  query['NextToken'] = request.nextToken;
  query['RegionId'] = request.regionId;
  query['RegionId'] = request.regionId;
  query['ServiceId'] = request.serviceId;
  query['ServiceName'] = request.serviceName;
  query['ServiceType'] = request.serviceType;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListVpcEndpointServicesByEndUser',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listVpcEndpointServicesByEndUser(request: ListVpcEndpointServicesByEndUserRequest): ListVpcEndpointServicesByEndUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVpcEndpointServicesByEndUserWithOptions(request, runtime);
}

model ListVpcEndpointZonesRequest {
  endpointId?: string(name='EndpointId'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
}

model ListVpcEndpointZonesResponseBody = {
  maxResults?: string(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  zones?: [ 
    {
      eniId?: string(name='EniId'),
      eniIp?: string(name='EniIp'),
      regionId?: string(name='RegionId'),
      serviceStatus?: string(name='ServiceStatus'),
      vSwitchId?: string(name='VSwitchId'),
      zoneDomain?: string(name='ZoneDomain'),
      zoneId?: string(name='ZoneId'),
      zoneStatus?: string(name='ZoneStatus'),
    }
  ](name='Zones'),
}

model ListVpcEndpointZonesResponse = {
  headers: map[string]string(name='headers'),
  body: ListVpcEndpointZonesResponseBody(name='body'),
}

async function listVpcEndpointZonesWithOptions(request: ListVpcEndpointZonesRequest, runtime: Util.RuntimeOptions): ListVpcEndpointZonesResponse {
  Util.validateModel(request);
  var query = {};
  query['EndpointId'] = request.endpointId;
  query['MaxResults'] = request.maxResults;
  query['NextToken'] = request.nextToken;
  query['RegionId'] = request.regionId;
  query['RegionId'] = request.regionId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListVpcEndpointZones',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listVpcEndpointZones(request: ListVpcEndpointZonesRequest): ListVpcEndpointZonesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVpcEndpointZonesWithOptions(request, runtime);
}

model ListVpcEndpointsRequest {
  connectionStatus?: string(name='ConnectionStatus'),
  endpointId?: string(name='EndpointId'),
  endpointName?: string(name='EndpointName'),
  endpointStatus?: string(name='EndpointStatus'),
  endpointType?: string(name='EndpointType'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
  serviceName?: string(name='ServiceName'),
  vpcId?: string(name='VpcId'),
}

model ListVpcEndpointsResponseBody = {
  endpoints?: [ 
    {
      bandwidth?: long(name='Bandwidth'),
      connectionStatus?: string(name='ConnectionStatus'),
      createTime?: string(name='CreateTime'),
      endpointBusinessStatus?: string(name='EndpointBusinessStatus'),
      endpointDescription?: string(name='EndpointDescription'),
      endpointDomain?: string(name='EndpointDomain'),
      endpointId?: string(name='EndpointId'),
      endpointName?: string(name='EndpointName'),
      endpointStatus?: string(name='EndpointStatus'),
      endpointType?: string(name='EndpointType'),
      regionId?: string(name='RegionId'),
      resourceOwner?: boolean(name='ResourceOwner'),
      serviceId?: string(name='ServiceId'),
      serviceName?: string(name='ServiceName'),
      vpcId?: string(name='VpcId'),
      zoneAffinityEnabled?: boolean(name='ZoneAffinityEnabled'),
    }
  ](name='Endpoints'),
  maxResults?: string(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model ListVpcEndpointsResponse = {
  headers: map[string]string(name='headers'),
  body: ListVpcEndpointsResponseBody(name='body'),
}

async function listVpcEndpointsWithOptions(request: ListVpcEndpointsRequest, runtime: Util.RuntimeOptions): ListVpcEndpointsResponse {
  Util.validateModel(request);
  var query = {};
  query['ConnectionStatus'] = request.connectionStatus;
  query['EndpointId'] = request.endpointId;
  query['EndpointName'] = request.endpointName;
  query['EndpointStatus'] = request.endpointStatus;
  query['EndpointType'] = request.endpointType;
  query['MaxResults'] = request.maxResults;
  query['NextToken'] = request.nextToken;
  query['RegionId'] = request.regionId;
  query['RegionId'] = request.regionId;
  query['ServiceName'] = request.serviceName;
  query['VpcId'] = request.vpcId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListVpcEndpoints',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listVpcEndpoints(request: ListVpcEndpointsRequest): ListVpcEndpointsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVpcEndpointsWithOptions(request, runtime);
}

model OpenPrivateLinkServiceRequest {
  ownerId?: long(name='OwnerId'),
}

model OpenPrivateLinkServiceResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model OpenPrivateLinkServiceResponse = {
  headers: map[string]string(name='headers'),
  body: OpenPrivateLinkServiceResponseBody(name='body'),
}

async function openPrivateLinkServiceWithOptions(request: OpenPrivateLinkServiceRequest, runtime: Util.RuntimeOptions): OpenPrivateLinkServiceResponse {
  Util.validateModel(request);
  var query = {};
  query['OwnerId'] = request.ownerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OpenPrivateLinkService',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function openPrivateLinkService(request: OpenPrivateLinkServiceRequest): OpenPrivateLinkServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return openPrivateLinkServiceWithOptions(request, runtime);
}

model RemoveUserFromVpcEndpointServiceRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  regionId?: string(name='RegionId'),
  serviceId?: string(name='ServiceId'),
  userId?: long(name='UserId'),
}

model RemoveUserFromVpcEndpointServiceResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveUserFromVpcEndpointServiceResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveUserFromVpcEndpointServiceResponseBody(name='body'),
}

async function removeUserFromVpcEndpointServiceWithOptions(request: RemoveUserFromVpcEndpointServiceRequest, runtime: Util.RuntimeOptions): RemoveUserFromVpcEndpointServiceResponse {
  Util.validateModel(request);
  var query = {};
  query['ClientToken'] = request.clientToken;
  query['DryRun'] = request.dryRun;
  query['RegionId'] = request.regionId;
  query['RegionId'] = request.regionId;
  query['ServiceId'] = request.serviceId;
  query['UserId'] = request.userId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveUserFromVpcEndpointService',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeUserFromVpcEndpointService(request: RemoveUserFromVpcEndpointServiceRequest): RemoveUserFromVpcEndpointServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeUserFromVpcEndpointServiceWithOptions(request, runtime);
}

model RemoveZoneFromVpcEndpointRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  endpointId?: string(name='EndpointId'),
  regionId?: string(name='RegionId'),
  zoneId?: string(name='ZoneId'),
}

model RemoveZoneFromVpcEndpointResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveZoneFromVpcEndpointResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveZoneFromVpcEndpointResponseBody(name='body'),
}

async function removeZoneFromVpcEndpointWithOptions(request: RemoveZoneFromVpcEndpointRequest, runtime: Util.RuntimeOptions): RemoveZoneFromVpcEndpointResponse {
  Util.validateModel(request);
  var query = {};
  query['ClientToken'] = request.clientToken;
  query['DryRun'] = request.dryRun;
  query['EndpointId'] = request.endpointId;
  query['RegionId'] = request.regionId;
  query['RegionId'] = request.regionId;
  query['ZoneId'] = request.zoneId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveZoneFromVpcEndpoint',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeZoneFromVpcEndpoint(request: RemoveZoneFromVpcEndpointRequest): RemoveZoneFromVpcEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeZoneFromVpcEndpointWithOptions(request, runtime);
}

model UpdateVpcEndpointAttributeRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  endpointDescription?: string(name='EndpointDescription'),
  endpointId?: string(name='EndpointId'),
  endpointName?: string(name='EndpointName'),
  regionId?: string(name='RegionId'),
}

model UpdateVpcEndpointAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateVpcEndpointAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateVpcEndpointAttributeResponseBody(name='body'),
}

async function updateVpcEndpointAttributeWithOptions(request: UpdateVpcEndpointAttributeRequest, runtime: Util.RuntimeOptions): UpdateVpcEndpointAttributeResponse {
  Util.validateModel(request);
  var query = {};
  query['ClientToken'] = request.clientToken;
  query['DryRun'] = request.dryRun;
  query['EndpointDescription'] = request.endpointDescription;
  query['EndpointId'] = request.endpointId;
  query['EndpointName'] = request.endpointName;
  query['RegionId'] = request.regionId;
  query['RegionId'] = request.regionId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateVpcEndpointAttribute',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateVpcEndpointAttribute(request: UpdateVpcEndpointAttributeRequest): UpdateVpcEndpointAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateVpcEndpointAttributeWithOptions(request, runtime);
}

model UpdateVpcEndpointConnectionAttributeRequest {
  bandwidth?: int32(name='Bandwidth'),
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  endpointId?: string(name='EndpointId'),
  regionId?: string(name='RegionId'),
  serviceId?: string(name='ServiceId'),
}

model UpdateVpcEndpointConnectionAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateVpcEndpointConnectionAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateVpcEndpointConnectionAttributeResponseBody(name='body'),
}

async function updateVpcEndpointConnectionAttributeWithOptions(request: UpdateVpcEndpointConnectionAttributeRequest, runtime: Util.RuntimeOptions): UpdateVpcEndpointConnectionAttributeResponse {
  Util.validateModel(request);
  var query = {};
  query['Bandwidth'] = request.bandwidth;
  query['ClientToken'] = request.clientToken;
  query['DryRun'] = request.dryRun;
  query['EndpointId'] = request.endpointId;
  query['RegionId'] = request.regionId;
  query['RegionId'] = request.regionId;
  query['ServiceId'] = request.serviceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateVpcEndpointConnectionAttribute',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateVpcEndpointConnectionAttribute(request: UpdateVpcEndpointConnectionAttributeRequest): UpdateVpcEndpointConnectionAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateVpcEndpointConnectionAttributeWithOptions(request, runtime);
}

model UpdateVpcEndpointServiceAttributeRequest {
  autoAcceptEnabled?: boolean(name='AutoAcceptEnabled'),
  clientToken?: string(name='ClientToken'),
  connectBandwidth?: int32(name='ConnectBandwidth'),
  dryRun?: boolean(name='DryRun'),
  regionId?: string(name='RegionId'),
  serviceDescription?: string(name='ServiceDescription'),
  serviceId?: string(name='ServiceId'),
  zoneAffinityEnabled?: boolean(name='ZoneAffinityEnabled'),
}

model UpdateVpcEndpointServiceAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateVpcEndpointServiceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateVpcEndpointServiceAttributeResponseBody(name='body'),
}

async function updateVpcEndpointServiceAttributeWithOptions(request: UpdateVpcEndpointServiceAttributeRequest, runtime: Util.RuntimeOptions): UpdateVpcEndpointServiceAttributeResponse {
  Util.validateModel(request);
  var query = {};
  query['AutoAcceptEnabled'] = request.autoAcceptEnabled;
  query['ClientToken'] = request.clientToken;
  query['ConnectBandwidth'] = request.connectBandwidth;
  query['DryRun'] = request.dryRun;
  query['RegionId'] = request.regionId;
  query['RegionId'] = request.regionId;
  query['ServiceDescription'] = request.serviceDescription;
  query['ServiceId'] = request.serviceId;
  query['ZoneAffinityEnabled'] = request.zoneAffinityEnabled;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateVpcEndpointServiceAttribute',
    version = '2020-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateVpcEndpointServiceAttribute(request: UpdateVpcEndpointServiceAttributeRequest): UpdateVpcEndpointServiceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateVpcEndpointServiceAttributeWithOptions(request, runtime);
}

