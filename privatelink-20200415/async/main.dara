/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Privatelink';
  @version = '2020-04-15';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddUserToVpcEndpointServiceRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  serviceId: string(name='ServiceId', position='Query'),
  userId: long(name='UserId', minimum=0, maximum=9223372036854775807, position='Query'),
}

model AddUserToVpcEndpointServiceResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddUserToVpcEndpointServiceResponse = {
  headers: map[string]string(name='headers'),
  body: AddUserToVpcEndpointServiceResponseBody(name='body'),
}

async function addUserToVpcEndpointService(request: AddUserToVpcEndpointServiceRequest): AddUserToVpcEndpointServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddUserToVpcEndpointService', 'POST', '/', 'json', false, 'json', request);
}

model AddZoneToVpcEndpointRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  endpointId: string(name='EndpointId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  vSwitchId: string(name='VSwitchId', position='Query'),
  zoneId: string(name='ZoneId', position='Query'),
  ip?: string(name='ip', position='Query'),
}

model AddZoneToVpcEndpointResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddZoneToVpcEndpointResponse = {
  headers: map[string]string(name='headers'),
  body: AddZoneToVpcEndpointResponseBody(name='body'),
}

async function addZoneToVpcEndpoint(request: AddZoneToVpcEndpointRequest): AddZoneToVpcEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddZoneToVpcEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model AttachResourceToVpcEndpointServiceRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceId: string(name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  serviceId: string(name='ServiceId', position='Query'),
}

model AttachResourceToVpcEndpointServiceResponseBody = {
  requestId?: string(name='RequestId'),
}

model AttachResourceToVpcEndpointServiceResponse = {
  headers: map[string]string(name='headers'),
  body: AttachResourceToVpcEndpointServiceResponseBody(name='body'),
}

async function attachResourceToVpcEndpointService(request: AttachResourceToVpcEndpointServiceRequest): AttachResourceToVpcEndpointServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachResourceToVpcEndpointService', 'POST', '/', 'json', false, 'json', request);
}

model AttachSecurityGroupToVpcEndpointRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  endpointId: string(name='EndpointId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  securityGroupId: string(name='SecurityGroupId', position='Query'),
}

model AttachSecurityGroupToVpcEndpointResponseBody = {
  requestId?: string(name='RequestId'),
}

model AttachSecurityGroupToVpcEndpointResponse = {
  headers: map[string]string(name='headers'),
  body: AttachSecurityGroupToVpcEndpointResponseBody(name='body'),
}

async function attachSecurityGroupToVpcEndpoint(request: AttachSecurityGroupToVpcEndpointRequest): AttachSecurityGroupToVpcEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachSecurityGroupToVpcEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model CheckProductOpenRequest {
}

model CheckProductOpenResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CheckProductOpenResponse = {
  headers: map[string]string(name='headers'),
  body: CheckProductOpenResponseBody(name='body'),
}

async function checkProductOpen(request: CheckProductOpenRequest): CheckProductOpenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckProductOpen', 'POST', '/', 'json', false, 'json', request);
}

model CreateVpcEndpointRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  endpointDescription?: string(name='EndpointDescription', position='Query'),
  endpointName?: string(name='EndpointName', position='Query'),
  endpointType?: string(name='EndpointType', position='Query'),
  protectedEnabled?: boolean(name='ProtectedEnabled', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  securityGroupId: [ string ](name='SecurityGroupId', position='Query'),
  serviceId?: string(name='ServiceId', position='Query'),
  serviceName?: string(name='ServiceName', position='Query'),
  vpcId: string(name='VpcId', position='Query'),
  zone?: [ 
    {
      vSwitchId?: string(name='VSwitchId'),
      zoneId?: string(name='ZoneId'),
      ip?: string(name='ip'),
    }
  ](name='Zone', position='Query'),
  zonePrivateIpAddressCount?: long(name='ZonePrivateIpAddressCount', position='Query'),
}

model CreateVpcEndpointResponseBody = {
  bandwidth?: long(name='Bandwidth'),
  connectionStatus?: string(name='ConnectionStatus'),
  createTime?: string(name='CreateTime'),
  endpointBusinessStatus?: string(name='EndpointBusinessStatus'),
  endpointDescription?: string(name='EndpointDescription'),
  endpointDomain?: string(name='EndpointDomain'),
  endpointId?: string(name='EndpointId'),
  endpointName?: string(name='EndpointName'),
  endpointStatus?: string(name='EndpointStatus'),
  requestId?: string(name='RequestId'),
  serviceId?: string(name='ServiceId'),
  serviceName?: string(name='ServiceName'),
  vpcId?: string(name='VpcId'),
}

model CreateVpcEndpointResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVpcEndpointResponseBody(name='body'),
}

async function createVpcEndpoint(request: CreateVpcEndpointRequest): CreateVpcEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVpcEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model CreateVpcEndpointServiceRequest {
  autoAcceptEnabled?: boolean(name='AutoAcceptEnabled', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  payer?: string(name='Payer', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resource?: [ 
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
    }
  ](name='Resource', position='Query'),
  serviceDescription?: string(name='ServiceDescription', position='Query'),
  serviceResourceType?: string(name='ServiceResourceType', position='Query'),
  zoneAffinityEnabled?: boolean(name='ZoneAffinityEnabled', position='Query'),
}

model CreateVpcEndpointServiceResponseBody = {
  autoAcceptEnabled?: boolean(name='AutoAcceptEnabled'),
  createTime?: string(name='CreateTime'),
  requestId?: string(name='RequestId'),
  serviceBusinessStatus?: string(name='ServiceBusinessStatus'),
  serviceDescription?: string(name='ServiceDescription'),
  serviceDomain?: string(name='ServiceDomain'),
  serviceId?: string(name='ServiceId'),
  serviceName?: string(name='ServiceName'),
  serviceStatus?: string(name='ServiceStatus'),
  zoneAffinityEnabled?: boolean(name='ZoneAffinityEnabled'),
}

model CreateVpcEndpointServiceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVpcEndpointServiceResponseBody(name='body'),
}

async function createVpcEndpointService(request: CreateVpcEndpointServiceRequest): CreateVpcEndpointServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVpcEndpointService', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVpcEndpointRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  endpointId: string(name='EndpointId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model DeleteVpcEndpointResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVpcEndpointResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVpcEndpointResponseBody(name='body'),
}

async function deleteVpcEndpoint(request: DeleteVpcEndpointRequest): DeleteVpcEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVpcEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVpcEndpointServiceRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  serviceId: string(name='ServiceId', position='Query'),
}

model DeleteVpcEndpointServiceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVpcEndpointServiceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVpcEndpointServiceResponseBody(name='body'),
}

async function deleteVpcEndpointService(request: DeleteVpcEndpointServiceRequest): DeleteVpcEndpointServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVpcEndpointService', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  regionId?: string(name='RegionId', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
    }
  ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeZonesRequest {
  regionId: string(name='RegionId', position='Query'),
}

model DescribeZonesResponseBody = {
  requestId?: string(name='RequestId'),
  zones?: {
    zone?: [ 
    {
      localName?: string(name='LocalName'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='Zone')
  }(name='Zones'),
}

model DescribeZonesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeZonesResponseBody(name='body'),
}

async function describeZones(request: DescribeZonesRequest): DescribeZonesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeZones', 'POST', '/', 'json', false, 'json', request);
}

model DetachResourceFromVpcEndpointServiceRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceId: string(name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  serviceId: string(name='ServiceId', position='Query'),
}

model DetachResourceFromVpcEndpointServiceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DetachResourceFromVpcEndpointServiceResponse = {
  headers: map[string]string(name='headers'),
  body: DetachResourceFromVpcEndpointServiceResponseBody(name='body'),
}

async function detachResourceFromVpcEndpointService(request: DetachResourceFromVpcEndpointServiceRequest): DetachResourceFromVpcEndpointServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachResourceFromVpcEndpointService', 'POST', '/', 'json', false, 'json', request);
}

model DetachSecurityGroupFromVpcEndpointRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  endpointId: string(name='EndpointId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  securityGroupId: string(name='SecurityGroupId', position='Query'),
}

model DetachSecurityGroupFromVpcEndpointResponseBody = {
  requestId?: string(name='RequestId'),
}

model DetachSecurityGroupFromVpcEndpointResponse = {
  headers: map[string]string(name='headers'),
  body: DetachSecurityGroupFromVpcEndpointResponseBody(name='body'),
}

async function detachSecurityGroupFromVpcEndpoint(request: DetachSecurityGroupFromVpcEndpointRequest): DetachSecurityGroupFromVpcEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachSecurityGroupFromVpcEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model DisableVpcEndpointConnectionRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  endpointId: string(name='EndpointId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  serviceId: string(name='ServiceId', position='Query'),
}

model DisableVpcEndpointConnectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisableVpcEndpointConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: DisableVpcEndpointConnectionResponseBody(name='body'),
}

async function disableVpcEndpointConnection(request: DisableVpcEndpointConnectionRequest): DisableVpcEndpointConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableVpcEndpointConnection', 'POST', '/', 'json', false, 'json', request);
}

model DisableVpcEndpointZoneConnectionRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  endpointId: string(name='EndpointId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  replacedResource?: boolean(name='ReplacedResource', position='Query'),
  serviceId: string(name='ServiceId', position='Query'),
  zoneId: string(name='ZoneId', position='Query'),
}

model DisableVpcEndpointZoneConnectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisableVpcEndpointZoneConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: DisableVpcEndpointZoneConnectionResponseBody(name='body'),
}

async function disableVpcEndpointZoneConnection(request: DisableVpcEndpointZoneConnectionRequest): DisableVpcEndpointZoneConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableVpcEndpointZoneConnection', 'POST', '/', 'json', false, 'json', request);
}

model EnableVpcEndpointConnectionRequest {
  bandwidth?: int32(name='Bandwidth', minimum=0, maximum=2147483647, position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  endpointId: string(name='EndpointId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  serviceId: string(name='ServiceId', position='Query'),
}

model EnableVpcEndpointConnectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnableVpcEndpointConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: EnableVpcEndpointConnectionResponseBody(name='body'),
}

async function enableVpcEndpointConnection(request: EnableVpcEndpointConnectionRequest): EnableVpcEndpointConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableVpcEndpointConnection', 'POST', '/', 'json', false, 'json', request);
}

model EnableVpcEndpointZoneConnectionRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  endpointId: string(name='EndpointId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  serviceId: string(name='ServiceId', position='Query'),
  zoneId: string(name='ZoneId', position='Query'),
}

model EnableVpcEndpointZoneConnectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnableVpcEndpointZoneConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: EnableVpcEndpointZoneConnectionResponseBody(name='body'),
}

async function enableVpcEndpointZoneConnection(request: EnableVpcEndpointZoneConnectionRequest): EnableVpcEndpointZoneConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableVpcEndpointZoneConnection', 'POST', '/', 'json', false, 'json', request);
}

model GetVpcEndpointAttributeRequest {
  endpointId: string(name='EndpointId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model GetVpcEndpointAttributeResponseBody = {
  bandwidth?: int32(name='Bandwidth'),
  connectionStatus?: string(name='ConnectionStatus'),
  createTime?: string(name='CreateTime'),
  endpointBusinessStatus?: string(name='EndpointBusinessStatus'),
  endpointDescription?: string(name='EndpointDescription'),
  endpointDomain?: string(name='EndpointDomain'),
  endpointId?: string(name='EndpointId'),
  endpointName?: string(name='EndpointName'),
  endpointStatus?: string(name='EndpointStatus'),
  endpointType?: string(name='EndpointType'),
  payer?: string(name='Payer'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
  resourceOwner?: boolean(name='ResourceOwner'),
  serviceId?: string(name='ServiceId'),
  serviceName?: string(name='ServiceName'),
  vpcId?: string(name='VpcId'),
  zoneAffinityEnabled?: boolean(name='ZoneAffinityEnabled'),
  zonePrivateIpAddressCount?: long(name='ZonePrivateIpAddressCount'),
}

model GetVpcEndpointAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: GetVpcEndpointAttributeResponseBody(name='body'),
}

async function getVpcEndpointAttribute(request: GetVpcEndpointAttributeRequest): GetVpcEndpointAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVpcEndpointAttribute', 'POST', '/', 'json', false, 'json', request);
}

model GetVpcEndpointServiceAttributeRequest {
  regionId: string(name='RegionId', position='Query'),
  serviceId: string(name='ServiceId', position='Query'),
}

model GetVpcEndpointServiceAttributeResponseBody = {
  autoAcceptEnabled?: boolean(name='AutoAcceptEnabled'),
  connectBandwidth?: int32(name='ConnectBandwidth'),
  createTime?: string(name='CreateTime'),
  maxBandwidth?: int32(name='MaxBandwidth'),
  minBandwidth?: int32(name='MinBandwidth'),
  payer?: string(name='Payer'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
  serviceBusinessStatus?: string(name='ServiceBusinessStatus'),
  serviceDescription?: string(name='ServiceDescription'),
  serviceDomain?: string(name='ServiceDomain'),
  serviceId?: string(name='ServiceId'),
  serviceName?: string(name='ServiceName'),
  serviceResourceType?: string(name='ServiceResourceType'),
  serviceStatus?: string(name='ServiceStatus'),
  serviceType?: string(name='ServiceType'),
  zoneAffinityEnabled?: boolean(name='ZoneAffinityEnabled'),
  zones?: [ string ](name='Zones'),
}

model GetVpcEndpointServiceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: GetVpcEndpointServiceAttributeResponseBody(name='body'),
}

async function getVpcEndpointServiceAttribute(request: GetVpcEndpointServiceAttributeRequest): GetVpcEndpointServiceAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVpcEndpointServiceAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ListVpcEndpointConnectionsRequest {
  connectionStatus?: string(name='ConnectionStatus', position='Query'),
  endpointId?: string(name='EndpointId', position='Query'),
  endpointOwnerId?: long(name='EndpointOwnerId', minimum=0, maximum=9223372036854775807, position='Query'),
  eniId?: string(name='EniId', position='Query'),
  maxResults?: int32(name='MaxResults', minimum=1, maximum=1000, position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  replacedResourceId?: string(name='ReplacedResourceId', position='Query'),
  resourceId?: string(name='ResourceId', position='Query'),
  serviceId?: string(name='ServiceId', position='Query'),
}

model ListVpcEndpointConnectionsResponseBody = {
  connections?: [ 
    {
      bandwidth?: int32(name='Bandwidth'),
      connectionStatus?: string(name='ConnectionStatus'),
      endpointId?: string(name='EndpointId'),
      endpointOwnerId?: long(name='EndpointOwnerId'),
      endpointVpcId?: string(name='EndpointVpcId'),
      modifiedTime?: string(name='ModifiedTime'),
      resourceOwner?: boolean(name='ResourceOwner'),
      serviceId?: string(name='ServiceId'),
      zones?: [ 
        {
          eniId?: string(name='EniId'),
          replacedEniId?: string(name='ReplacedEniId'),
          replacedResourceId?: string(name='ReplacedResourceId'),
          resourceId?: string(name='ResourceId'),
          vSwitchId?: string(name='VSwitchId'),
          zoneDomain?: string(name='ZoneDomain'),
          zoneId?: string(name='ZoneId'),
          zoneStatus?: string(name='ZoneStatus'),
        }
      ](name='Zones'),
    }
  ](name='Connections'),
  maxResults?: string(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model ListVpcEndpointConnectionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListVpcEndpointConnectionsResponseBody(name='body'),
}

async function listVpcEndpointConnections(request: ListVpcEndpointConnectionsRequest): ListVpcEndpointConnectionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVpcEndpointConnections', 'POST', '/', 'json', false, 'json', request);
}

model ListVpcEndpointSecurityGroupsRequest {
  endpointId: string(name='EndpointId', position='Query'),
  maxResults?: int32(name='MaxResults', minimum=0, maximum=50, position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model ListVpcEndpointSecurityGroupsResponseBody = {
  maxResults?: string(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  securityGroups?: [ 
    {
      securityGroupId?: string(name='SecurityGroupId'),
    }
  ](name='SecurityGroups'),
}

model ListVpcEndpointSecurityGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListVpcEndpointSecurityGroupsResponseBody(name='body'),
}

async function listVpcEndpointSecurityGroups(request: ListVpcEndpointSecurityGroupsRequest): ListVpcEndpointSecurityGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVpcEndpointSecurityGroups', 'POST', '/', 'json', false, 'json', request);
}

model ListVpcEndpointServiceResourcesRequest {
  maxResults?: int32(name='MaxResults', minimum=0, maximum=1000, position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  serviceId: string(name='ServiceId', position='Query'),
}

model ListVpcEndpointServiceResourcesResponseBody = {
  maxResults?: string(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  resources?: [ 
    {
      autoAllocatedEnabled?: boolean(name='AutoAllocatedEnabled'),
      ip?: string(name='Ip'),
      regionId?: string(name='RegionId'),
      relatedDeprecatedEndpointCount?: long(name='RelatedDeprecatedEndpointCount'),
      relatedEndpointCount?: long(name='RelatedEndpointCount'),
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      vSwitchId?: string(name='VSwitchId'),
      vpcId?: string(name='VpcId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='Resources'),
}

model ListVpcEndpointServiceResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListVpcEndpointServiceResourcesResponseBody(name='body'),
}

async function listVpcEndpointServiceResources(request: ListVpcEndpointServiceResourcesRequest): ListVpcEndpointServiceResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVpcEndpointServiceResources', 'POST', '/', 'json', false, 'json', request);
}

model ListVpcEndpointServiceUsersRequest {
  maxResults?: int32(name='MaxResults', minimum=0, maximum=1000, position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  serviceId: string(name='ServiceId', position='Query'),
  userId?: long(name='UserId', minimum=0, maximum=9223372036854775807, position='Query'),
}

model ListVpcEndpointServiceUsersResponseBody = {
  maxResults?: string(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  users?: [ 
    {
      userId?: long(name='UserId'),
    }
  ](name='Users'),
}

model ListVpcEndpointServiceUsersResponse = {
  headers: map[string]string(name='headers'),
  body: ListVpcEndpointServiceUsersResponseBody(name='body'),
}

async function listVpcEndpointServiceUsers(request: ListVpcEndpointServiceUsersRequest): ListVpcEndpointServiceUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVpcEndpointServiceUsers', 'POST', '/', 'json', false, 'json', request);
}

model ListVpcEndpointServicesRequest {
  autoAcceptEnabled?: boolean(name='AutoAcceptEnabled', position='Query'),
  maxResults?: int32(name='MaxResults', minimum=0, maximum=1000, position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  serviceBusinessStatus?: string(name='ServiceBusinessStatus', position='Query'),
  serviceId?: string(name='ServiceId', position='Query'),
  serviceName?: string(name='ServiceName', position='Query'),
  serviceResourceType?: string(name='ServiceResourceType', position='Query'),
  serviceStatus?: string(name='ServiceStatus', position='Query'),
  zoneAffinityEnabled?: boolean(name='ZoneAffinityEnabled', position='Query'),
}

model ListVpcEndpointServicesResponseBody = {
  maxResults?: string(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  services?: [ 
    {
      autoAcceptEnabled?: boolean(name='AutoAcceptEnabled'),
      connectBandwidth?: int32(name='ConnectBandwidth'),
      createTime?: string(name='CreateTime'),
      maxBandwidth?: int32(name='MaxBandwidth'),
      minBandwidth?: int32(name='MinBandwidth'),
      payer?: string(name='Payer'),
      regionId?: string(name='RegionId'),
      serviceBusinessStatus?: string(name='ServiceBusinessStatus'),
      serviceDescription?: string(name='ServiceDescription'),
      serviceDomain?: string(name='ServiceDomain'),
      serviceId?: string(name='ServiceId'),
      serviceName?: string(name='ServiceName'),
      serviceResourceType?: string(name='ServiceResourceType'),
      serviceStatus?: string(name='ServiceStatus'),
      serviceType?: string(name='ServiceType'),
      zoneAffinityEnabled?: boolean(name='ZoneAffinityEnabled'),
    }
  ](name='Services'),
}

model ListVpcEndpointServicesResponse = {
  headers: map[string]string(name='headers'),
  body: ListVpcEndpointServicesResponseBody(name='body'),
}

async function listVpcEndpointServices(request: ListVpcEndpointServicesRequest): ListVpcEndpointServicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVpcEndpointServices', 'POST', '/', 'json', false, 'json', request);
}

model ListVpcEndpointServicesByEndUserRequest {
  maxResults?: int32(name='MaxResults', minimum=0, maximum=1000, position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  serviceId?: string(name='ServiceId', position='Query'),
  serviceName?: string(name='ServiceName', position='Query'),
  serviceType?: string(name='ServiceType', position='Query'),
}

model ListVpcEndpointServicesByEndUserResponseBody = {
  maxResults?: string(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  services?: [ 
    {
      payer?: string(name='Payer'),
      serviceDomain?: string(name='ServiceDomain'),
      serviceId?: string(name='ServiceId'),
      serviceName?: string(name='ServiceName'),
      serviceType?: string(name='ServiceType'),
      zones?: [ string ](name='Zones'),
    }
  ](name='Services'),
}

model ListVpcEndpointServicesByEndUserResponse = {
  headers: map[string]string(name='headers'),
  body: ListVpcEndpointServicesByEndUserResponseBody(name='body'),
}

async function listVpcEndpointServicesByEndUser(request: ListVpcEndpointServicesByEndUserRequest): ListVpcEndpointServicesByEndUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVpcEndpointServicesByEndUser', 'POST', '/', 'json', false, 'json', request);
}

model ListVpcEndpointZonesRequest {
  endpointId: string(name='EndpointId', position='Query'),
  maxResults?: int32(name='MaxResults', minimum=0, maximum=1000, position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model ListVpcEndpointZonesResponseBody = {
  maxResults?: string(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  zones?: [ 
    {
      eniId?: string(name='EniId'),
      eniIp?: string(name='EniIp'),
      regionId?: string(name='RegionId'),
      serviceStatus?: string(name='ServiceStatus'),
      vSwitchId?: string(name='VSwitchId'),
      zoneDomain?: string(name='ZoneDomain'),
      zoneId?: string(name='ZoneId'),
      zoneStatus?: string(name='ZoneStatus'),
    }
  ](name='Zones'),
}

model ListVpcEndpointZonesResponse = {
  headers: map[string]string(name='headers'),
  body: ListVpcEndpointZonesResponseBody(name='body'),
}

async function listVpcEndpointZones(request: ListVpcEndpointZonesRequest): ListVpcEndpointZonesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVpcEndpointZones', 'POST', '/', 'json', false, 'json', request);
}

model ListVpcEndpointsRequest {
  connectionStatus?: string(name='ConnectionStatus', position='Query'),
  endpointId?: string(name='EndpointId', position='Query'),
  endpointName?: string(name='EndpointName', position='Query'),
  endpointStatus?: string(name='EndpointStatus', position='Query'),
  endpointType?: string(name='EndpointType', position='Query'),
  maxResults?: int32(name='MaxResults', minimum=0, maximum=1000, position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  serviceName?: string(name='ServiceName', position='Query'),
  vpcId?: string(name='VpcId', position='Query'),
}

model ListVpcEndpointsResponseBody = {
  endpoints?: [ 
    {
      bandwidth?: long(name='Bandwidth'),
      connectionStatus?: string(name='ConnectionStatus'),
      createTime?: string(name='CreateTime'),
      endpointBusinessStatus?: string(name='EndpointBusinessStatus'),
      endpointDescription?: string(name='EndpointDescription'),
      endpointDomain?: string(name='EndpointDomain'),
      endpointId?: string(name='EndpointId'),
      endpointName?: string(name='EndpointName'),
      endpointStatus?: string(name='EndpointStatus'),
      endpointType?: string(name='EndpointType'),
      regionId?: string(name='RegionId'),
      resourceOwner?: boolean(name='ResourceOwner'),
      serviceId?: string(name='ServiceId'),
      serviceName?: string(name='ServiceName'),
      vpcId?: string(name='VpcId'),
      zoneAffinityEnabled?: boolean(name='ZoneAffinityEnabled'),
    }
  ](name='Endpoints'),
  maxResults?: string(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model ListVpcEndpointsResponse = {
  headers: map[string]string(name='headers'),
  body: ListVpcEndpointsResponseBody(name='body'),
}

async function listVpcEndpoints(request: ListVpcEndpointsRequest): ListVpcEndpointsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVpcEndpoints', 'POST', '/', 'json', false, 'json', request);
}

model OpenPrivateLinkServiceRequest {
  ownerId?: long(name='OwnerId', position='Query'),
}

model OpenPrivateLinkServiceResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model OpenPrivateLinkServiceResponse = {
  headers: map[string]string(name='headers'),
  body: OpenPrivateLinkServiceResponseBody(name='body'),
}

async function openPrivateLinkService(request: OpenPrivateLinkServiceRequest): OpenPrivateLinkServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenPrivateLinkService', 'POST', '/', 'json', false, 'json', request);
}

model RemoveUserFromVpcEndpointServiceRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  serviceId: string(name='ServiceId', position='Query'),
  userId: long(name='UserId', minimum=0, maximum=9223372036854775807, position='Query'),
}

model RemoveUserFromVpcEndpointServiceResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveUserFromVpcEndpointServiceResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveUserFromVpcEndpointServiceResponseBody(name='body'),
}

async function removeUserFromVpcEndpointService(request: RemoveUserFromVpcEndpointServiceRequest): RemoveUserFromVpcEndpointServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveUserFromVpcEndpointService', 'POST', '/', 'json', false, 'json', request);
}

model RemoveZoneFromVpcEndpointRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  endpointId: string(name='EndpointId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  zoneId: string(name='ZoneId', position='Query'),
}

model RemoveZoneFromVpcEndpointResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveZoneFromVpcEndpointResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveZoneFromVpcEndpointResponseBody(name='body'),
}

async function removeZoneFromVpcEndpoint(request: RemoveZoneFromVpcEndpointRequest): RemoveZoneFromVpcEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveZoneFromVpcEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model UpdateVpcEndpointAttributeRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  endpointDescription?: string(name='EndpointDescription', position='Query'),
  endpointId: string(name='EndpointId', position='Query'),
  endpointName?: string(name='EndpointName', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model UpdateVpcEndpointAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateVpcEndpointAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateVpcEndpointAttributeResponseBody(name='body'),
}

async function updateVpcEndpointAttribute(request: UpdateVpcEndpointAttributeRequest): UpdateVpcEndpointAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateVpcEndpointAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateVpcEndpointConnectionAttributeRequest {
  bandwidth?: int32(name='Bandwidth', minimum=0, maximum=2147483647, position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  endpointId: string(name='EndpointId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  serviceId: string(name='ServiceId', position='Query'),
}

model UpdateVpcEndpointConnectionAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateVpcEndpointConnectionAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateVpcEndpointConnectionAttributeResponseBody(name='body'),
}

async function updateVpcEndpointConnectionAttribute(request: UpdateVpcEndpointConnectionAttributeRequest): UpdateVpcEndpointConnectionAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateVpcEndpointConnectionAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateVpcEndpointServiceAttributeRequest {
  autoAcceptEnabled?: boolean(name='AutoAcceptEnabled', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  connectBandwidth?: int32(name='ConnectBandwidth', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  serviceDescription?: string(name='ServiceDescription', position='Query'),
  serviceId: string(name='ServiceId', position='Query'),
  zoneAffinityEnabled?: boolean(name='ZoneAffinityEnabled', position='Query'),
}

model UpdateVpcEndpointServiceAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateVpcEndpointServiceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateVpcEndpointServiceAttributeResponseBody(name='body'),
}

async function updateVpcEndpointServiceAttribute(request: UpdateVpcEndpointServiceAttributeRequest): UpdateVpcEndpointServiceAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateVpcEndpointServiceAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateVpcEndpointServiceResourceAttributeRequest {
  autoAllocatedEnabled: boolean(name='AutoAllocatedEnabled', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceId: string(name='ResourceId', position='Query'),
  serviceId: string(name='ServiceId', position='Query'),
}

model UpdateVpcEndpointServiceResourceAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateVpcEndpointServiceResourceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateVpcEndpointServiceResourceAttributeResponseBody(name='body'),
}

async function updateVpcEndpointServiceResourceAttribute(request: UpdateVpcEndpointServiceResourceAttributeRequest): UpdateVpcEndpointServiceResourceAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateVpcEndpointServiceResourceAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateVpcEndpointZoneConnectionResourceAttributeRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  endpointId: string(name='EndpointId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceAllocateMode?: string(name='ResourceAllocateMode', position='Query'),
  resourceId?: string(name='ResourceId', position='Query'),
  resourceReplaceMode?: string(name='ResourceReplaceMode', position='Query'),
  resourceType?: string(name='ResourceType', position='Query'),
  serviceId: string(name='ServiceId', position='Query'),
  zoneId: string(name='ZoneId', minimum=0, maximum=2147483647, position='Query'),
}

model UpdateVpcEndpointZoneConnectionResourceAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateVpcEndpointZoneConnectionResourceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateVpcEndpointZoneConnectionResourceAttributeResponseBody(name='body'),
}

async function updateVpcEndpointZoneConnectionResourceAttribute(request: UpdateVpcEndpointZoneConnectionResourceAttributeRequest): UpdateVpcEndpointZoneConnectionResourceAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateVpcEndpointZoneConnectionResourceAttribute', 'POST', '/', 'json', false, 'json', request);
}

