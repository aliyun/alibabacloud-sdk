/**
 *
 */
import OpenApi;
import OpenApi.OpenApiUtil;

extends OpenApi;


init(config: OpenApiUtil.Config){
  super(config);
  @endpointRule = 'central';
  @endpointMap = {
    'ap-southeast-1' = 'oms.ap-southeast-1.aliyuncs.com',
    'cn-hangzhou' = 'pre-oms.cn-hangzhou.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('oms', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!$isNull(endpoint)) {
    return endpoint;
  }
  
  if (!$isNull(endpointMap) && !$isNull(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return OpenApiUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model DeleteDomainPartRequest {
  dataType?: string(name='DataType'),
  domainCode?: string(name='DomainCode', description='This parameter is required.'),
  part?: string(name='Part', description='This parameter is required.'),
}

model DeleteDomainPartResponseBody = {
  dataType?: string(name='DataType'),
  domainCode?: string(name='DomainCode'),
  requestId?: string(name='RequestId'),
}

model DeleteDomainPartResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDomainPartResponseBody(name='body'),
}

/**
 * @summary 删除domainPart
 *
 * @param request DeleteDomainPartRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDomainPartResponse
 */
async function deleteDomainPartWithOptions(request: DeleteDomainPartRequest, runtime: $RuntimeOptions): DeleteDomainPartResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.dataType)) {
    query['DataType'] = request.dataType;
  }
  if (!$isNull(request.domainCode)) {
    query['DomainCode'] = request.domainCode;
  }
  if (!$isNull(request.part)) {
    query['Part'] = request.part;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteDomainPart',
    version = '2016-06-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除domainPart
 *
 * @param request DeleteDomainPartRequest
 * @return DeleteDomainPartResponse
 */
async function deleteDomainPart(request: DeleteDomainPartRequest): DeleteDomainPartResponse {
  var runtime = new $RuntimeOptions{};
  return deleteDomainPartWithOptions(request, runtime);
}

model DeleteDomainPartByProxyRequest {
  dataType?: string(name='DataType'),
  domainCode?: string(name='DomainCode', description='This parameter is required.'),
  part?: string(name='Part', description='This parameter is required.'),
}

model DeleteDomainPartByProxyResponseBody = {
  dataType?: string(name='DataType'),
  domainCode?: string(name='DomainCode'),
  requestId?: string(name='RequestId'),
}

model DeleteDomainPartByProxyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDomainPartByProxyResponseBody(name='body'),
}

/**
 * @param request DeleteDomainPartByProxyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDomainPartByProxyResponse
 */
async function deleteDomainPartByProxyWithOptions(request: DeleteDomainPartByProxyRequest, runtime: $RuntimeOptions): DeleteDomainPartByProxyResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.dataType)) {
    query['DataType'] = request.dataType;
  }
  if (!$isNull(request.domainCode)) {
    query['DomainCode'] = request.domainCode;
  }
  if (!$isNull(request.part)) {
    query['Part'] = request.part;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteDomainPartByProxy',
    version = '2016-06-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request DeleteDomainPartByProxyRequest
 * @return DeleteDomainPartByProxyResponse
 */
async function deleteDomainPartByProxy(request: DeleteDomainPartByProxyRequest): DeleteDomainPartByProxyResponse {
  var runtime = new $RuntimeOptions{};
  return deleteDomainPartByProxyWithOptions(request, runtime);
}

model DeleteMeasureDataRequest {
  apiType?: string(name='ApiType', example='Full'),
  compressed?: boolean(name='Compressed', example='false'),
  data?: string(name='Data', example='[{"UserId":"1192922887522200","ProductId":"VM","StartTime":"1556640000","EndTime":"1556726400","Region":"cn-hangzhou","InstanceId":"test1","CPU":"4"}]'),
  dataType?: string(name='DataType', example='raw'),
  domainCode?: string(name='DomainCode', description='OMS Domain', example='VM'),
  filter?: string(name='Filter', example='StartTime>1469980800;StartTime<1469984400'),
}

model DeleteMeasureDataResponseBody = {
  apiType?: string(name='ApiType', example='Full'),
  dataType?: string(name='DataType', example='raw'),
  domainCode?: string(name='DomainCode', description='OMS Domain', example='VM'),
  requestId?: string(name='RequestId', description='Id of the request', example='1111-1111-1111'),
  total?: long(name='Total', example='100'),
}

model DeleteMeasureDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMeasureDataResponseBody(name='body'),
}

/**
 * @summary 删除记录数据
 *
 * @param request DeleteMeasureDataRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteMeasureDataResponse
 */
async function deleteMeasureDataWithOptions(request: DeleteMeasureDataRequest, runtime: $RuntimeOptions): DeleteMeasureDataResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.apiType)) {
    query['ApiType'] = request.apiType;
  }
  if (!$isNull(request.compressed)) {
    query['Compressed'] = request.compressed;
  }
  if (!$isNull(request.data)) {
    query['Data'] = request.data;
  }
  if (!$isNull(request.dataType)) {
    query['DataType'] = request.dataType;
  }
  if (!$isNull(request.domainCode)) {
    query['DomainCode'] = request.domainCode;
  }
  if (!$isNull(request.filter)) {
    query['Filter'] = request.filter;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteMeasureData',
    version = '2016-06-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除记录数据
 *
 * @param request DeleteMeasureDataRequest
 * @return DeleteMeasureDataResponse
 */
async function deleteMeasureData(request: DeleteMeasureDataRequest): DeleteMeasureDataResponse {
  var runtime = new $RuntimeOptions{};
  return deleteMeasureDataWithOptions(request, runtime);
}

model GetDomainPartRequest {
  compressEnable?: boolean(name='CompressEnable'),
  dataType?: string(name='DataType'),
  domainCode?: string(name='DomainCode', description='This parameter is required.'),
  part?: string(name='Part', description='This parameter is required.'),
}

model GetDomainPartResponseBody = {
  compressed?: boolean(name='Compressed'),
  data?: string(name='Data'),
  dataType?: string(name='DataType'),
  domainCode?: string(name='DomainCode'),
  requestId?: string(name='RequestId'),
}

model GetDomainPartResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDomainPartResponseBody(name='body'),
}

/**
 * @summary 获取domainPart
 *
 * @param request GetDomainPartRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDomainPartResponse
 */
async function getDomainPartWithOptions(request: GetDomainPartRequest, runtime: $RuntimeOptions): GetDomainPartResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetDomainPart',
    version = '2016-06-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取domainPart
 *
 * @param request GetDomainPartRequest
 * @return GetDomainPartResponse
 */
async function getDomainPart(request: GetDomainPartRequest): GetDomainPartResponse {
  var runtime = new $RuntimeOptions{};
  return getDomainPartWithOptions(request, runtime);
}

model GetDomainPartByProxyRequest {
  compressEnable?: boolean(name='CompressEnable'),
  dataType?: string(name='DataType'),
  domainCode?: string(name='DomainCode', description='This parameter is required.'),
  part?: string(name='Part', description='This parameter is required.'),
}

model GetDomainPartByProxyResponseBody = {
  compressed?: boolean(name='Compressed'),
  data?: string(name='Data'),
  dataType?: string(name='DataType'),
  domainCode?: string(name='DomainCode'),
  requestId?: string(name='RequestId'),
}

model GetDomainPartByProxyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDomainPartByProxyResponseBody(name='body'),
}

/**
 * @param request GetDomainPartByProxyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDomainPartByProxyResponse
 */
async function getDomainPartByProxyWithOptions(request: GetDomainPartByProxyRequest, runtime: $RuntimeOptions): GetDomainPartByProxyResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.compressEnable)) {
    query['CompressEnable'] = request.compressEnable;
  }
  if (!$isNull(request.dataType)) {
    query['DataType'] = request.dataType;
  }
  if (!$isNull(request.domainCode)) {
    query['DomainCode'] = request.domainCode;
  }
  if (!$isNull(request.part)) {
    query['Part'] = request.part;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetDomainPartByProxy',
    version = '2016-06-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request GetDomainPartByProxyRequest
 * @return GetDomainPartByProxyResponse
 */
async function getDomainPartByProxy(request: GetDomainPartByProxyRequest): GetDomainPartByProxyResponse {
  var runtime = new $RuntimeOptions{};
  return getDomainPartByProxyWithOptions(request, runtime);
}

model GetIncrementMeasureDataByProxyRequest {
  compressEnable?: boolean(name='CompressEnable', example='false'),
  dataType?: string(name='DataType', example='hour'),
  domainCode?: string(name='DomainCode', description='This parameter is required.', example='XXDEMO'),
  modifyEndTime?: long(name='ModifyEndTime', example='1700634930'),
  modifyStartTime?: long(name='ModifyStartTime', example='1700634920'),
  rowKeyMapStr?: string(name='RowKeyMapStr', description='This parameter is required.', example='{\\\\"ProviderId\\\\":\\\\"26842\\\\",\\\\"InstanceId\\\\":\\\\"XXX\\\\",\\\\"UserId\\\\":123,\\\\"ProductId\\\\":\\\\"XX\\\\"}'),
}

model GetIncrementMeasureDataByProxyResponseBody = {
  compressed?: string(name='Compressed', example='false'),
  data?: string(name='Data', example='"[{\\\\"meteringData\\\\":{\\\\"ProviderId\\\\":\\\\"26842\\\\",\\\\"InstanceId\\\\":\\\\"XXX\\\\",\\\\"Size\\\\":\\\\"123\\\\",\\\\"UserId\\\\":\\\\"123\\\\",\\\\"ProductId\\\\":\\\\"XX\\\\"},\\\\"modifyTime\\\\":1700634920,\\\\"status\\\\":\\\\"Stop\\\\"}]"'),
  dataType?: string(name='DataType', example='hour'),
  domainCode?: string(name='DomainCode', example='XXDEMO'),
  requestId?: string(name='RequestId', description='Id of the request', example='645B25AB-4E09-5DCA-8443-A7A58138690B'),
}

model GetIncrementMeasureDataByProxyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetIncrementMeasureDataByProxyResponseBody(name='body'),
}

/**
 * @summary 查询增量表的原始计量数据
 *
 * @param request GetIncrementMeasureDataByProxyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetIncrementMeasureDataByProxyResponse
 */
async function getIncrementMeasureDataByProxyWithOptions(request: GetIncrementMeasureDataByProxyRequest, runtime: $RuntimeOptions): GetIncrementMeasureDataByProxyResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetIncrementMeasureDataByProxy',
    version = '2016-06-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询增量表的原始计量数据
 *
 * @param request GetIncrementMeasureDataByProxyRequest
 * @return GetIncrementMeasureDataByProxyResponse
 */
async function getIncrementMeasureDataByProxy(request: GetIncrementMeasureDataByProxyRequest): GetIncrementMeasureDataByProxyResponse {
  var runtime = new $RuntimeOptions{};
  return getIncrementMeasureDataByProxyWithOptions(request, runtime);
}

model GetMeasureDataRequest {
  apiType?: string(name='ApiType', description='This parameter is required.'),
  compressEnable?: boolean(name='CompressEnable'),
  dataType?: string(name='DataType'),
  domainCode?: string(name='DomainCode', description='This parameter is required.'),
  filter?: string(name='Filter', description='This parameter is required.'),
  maxResult?: int32(name='MaxResult', description='This parameter is required.'),
  nextToken?: string(name='NextToken'),
  queryField?: string(name='QueryField', description='This parameter is required.'),
}

model GetMeasureDataResponseBody = {
  apiType?: string(name='ApiType'),
  compressed?: boolean(name='Compressed'),
  data?: string(name='Data'),
  dataType?: string(name='DataType'),
  domainCode?: string(name='DomainCode'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model GetMeasureDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMeasureDataResponseBody(name='body'),
}

/**
 * @summary 查询计量数据
 *
 * @param request GetMeasureDataRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetMeasureDataResponse
 */
async function getMeasureDataWithOptions(request: GetMeasureDataRequest, runtime: $RuntimeOptions): GetMeasureDataResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.apiType)) {
    query['ApiType'] = request.apiType;
  }
  if (!$isNull(request.compressEnable)) {
    query['CompressEnable'] = request.compressEnable;
  }
  if (!$isNull(request.dataType)) {
    query['DataType'] = request.dataType;
  }
  if (!$isNull(request.domainCode)) {
    query['DomainCode'] = request.domainCode;
  }
  if (!$isNull(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!$isNull(request.maxResult)) {
    query['MaxResult'] = request.maxResult;
  }
  if (!$isNull(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!$isNull(request.queryField)) {
    query['QueryField'] = request.queryField;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetMeasureData',
    version = '2016-06-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询计量数据
 *
 * @param request GetMeasureDataRequest
 * @return GetMeasureDataResponse
 */
async function getMeasureData(request: GetMeasureDataRequest): GetMeasureDataResponse {
  var runtime = new $RuntimeOptions{};
  return getMeasureDataWithOptions(request, runtime);
}

model GetReadyFlagRequest {
  apiType?: string(name='ApiType', description='This parameter is required.'),
  compressEnable?: boolean(name='CompressEnable'),
  dataType?: string(name='DataType'),
  domainCode?: string(name='DomainCode', description='This parameter is required.'),
  filter?: string(name='Filter', description='This parameter is required.'),
  maxResult?: int32(name='MaxResult', description='This parameter is required.'),
  nextToken?: string(name='NextToken'),
}

model GetReadyFlagResponseBody = {
  apiType?: string(name='ApiType'),
  compressed?: boolean(name='Compressed'),
  data?: string(name='Data'),
  dataType?: string(name='DataType'),
  domainCode?: string(name='DomainCode'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model GetReadyFlagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetReadyFlagResponseBody(name='body'),
}

/**
 * @summary 查询readyflag
 *
 * @param request GetReadyFlagRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetReadyFlagResponse
 */
async function getReadyFlagWithOptions(request: GetReadyFlagRequest, runtime: $RuntimeOptions): GetReadyFlagResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetReadyFlag',
    version = '2016-06-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询readyflag
 *
 * @param request GetReadyFlagRequest
 * @return GetReadyFlagResponse
 */
async function getReadyFlag(request: GetReadyFlagRequest): GetReadyFlagResponse {
  var runtime = new $RuntimeOptions{};
  return getReadyFlagWithOptions(request, runtime);
}

model GetReadyFlagByProxyRequest {
  apiType?: string(name='ApiType', description='This parameter is required.'),
  compressEnable?: boolean(name='CompressEnable'),
  dataType?: string(name='DataType'),
  domainCode?: string(name='DomainCode', description='This parameter is required.'),
  filter?: string(name='Filter', description='This parameter is required.'),
  maxResult?: int32(name='MaxResult', description='This parameter is required.'),
  nextToken?: string(name='NextToken'),
}

model GetReadyFlagByProxyResponseBody = {
  apiType?: string(name='ApiType'),
  compressed?: boolean(name='Compressed'),
  data?: string(name='Data'),
  dataType?: string(name='DataType'),
  domainCode?: string(name='DomainCode'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model GetReadyFlagByProxyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetReadyFlagByProxyResponseBody(name='body'),
}

/**
 * @param request GetReadyFlagByProxyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetReadyFlagByProxyResponse
 */
async function getReadyFlagByProxyWithOptions(request: GetReadyFlagByProxyRequest, runtime: $RuntimeOptions): GetReadyFlagByProxyResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.apiType)) {
    query['ApiType'] = request.apiType;
  }
  if (!$isNull(request.compressEnable)) {
    query['CompressEnable'] = request.compressEnable;
  }
  if (!$isNull(request.dataType)) {
    query['DataType'] = request.dataType;
  }
  if (!$isNull(request.domainCode)) {
    query['DomainCode'] = request.domainCode;
  }
  if (!$isNull(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!$isNull(request.maxResult)) {
    query['MaxResult'] = request.maxResult;
  }
  if (!$isNull(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetReadyFlagByProxy',
    version = '2016-06-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request GetReadyFlagByProxyRequest
 * @return GetReadyFlagByProxyResponse
 */
async function getReadyFlagByProxy(request: GetReadyFlagByProxyRequest): GetReadyFlagByProxyResponse {
  var runtime = new $RuntimeOptions{};
  return getReadyFlagByProxyWithOptions(request, runtime);
}

model PutDomainPartRequest {
  compressed?: boolean(name='Compressed'),
  data?: string(name='Data', description='This parameter is required.'),
  dataType?: string(name='DataType'),
  domainCode?: string(name='DomainCode', description='This parameter is required.'),
}

model PutDomainPartResponseBody = {
  dataType?: string(name='DataType'),
  domainCode?: string(name='DomainCode'),
  requestId?: string(name='RequestId'),
}

model PutDomainPartResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PutDomainPartResponseBody(name='body'),
}

/**
 * @summary 设置domainPart
 *
 * @param request PutDomainPartRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PutDomainPartResponse
 */
async function putDomainPartWithOptions(request: PutDomainPartRequest, runtime: $RuntimeOptions): PutDomainPartResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.compressed)) {
    query['Compressed'] = request.compressed;
  }
  if (!$isNull(request.data)) {
    query['Data'] = request.data;
  }
  if (!$isNull(request.dataType)) {
    query['DataType'] = request.dataType;
  }
  if (!$isNull(request.domainCode)) {
    query['DomainCode'] = request.domainCode;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'PutDomainPart',
    version = '2016-06-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 设置domainPart
 *
 * @param request PutDomainPartRequest
 * @return PutDomainPartResponse
 */
async function putDomainPart(request: PutDomainPartRequest): PutDomainPartResponse {
  var runtime = new $RuntimeOptions{};
  return putDomainPartWithOptions(request, runtime);
}

model PutDomainPartByProxyRequest {
  compressed?: boolean(name='Compressed'),
  data?: string(name='Data', description='This parameter is required.'),
  dataType?: string(name='DataType'),
  domainCode?: string(name='DomainCode', description='This parameter is required.'),
}

model PutDomainPartByProxyResponseBody = {
  dataType?: string(name='DataType'),
  domainCode?: string(name='DomainCode'),
  requestId?: string(name='RequestId'),
}

model PutDomainPartByProxyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PutDomainPartByProxyResponseBody(name='body'),
}

/**
 * @param request PutDomainPartByProxyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PutDomainPartByProxyResponse
 */
async function putDomainPartByProxyWithOptions(request: PutDomainPartByProxyRequest, runtime: $RuntimeOptions): PutDomainPartByProxyResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.compressed)) {
    query['Compressed'] = request.compressed;
  }
  if (!$isNull(request.data)) {
    query['Data'] = request.data;
  }
  if (!$isNull(request.dataType)) {
    query['DataType'] = request.dataType;
  }
  if (!$isNull(request.domainCode)) {
    query['DomainCode'] = request.domainCode;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'PutDomainPartByProxy',
    version = '2016-06-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request PutDomainPartByProxyRequest
 * @return PutDomainPartByProxyResponse
 */
async function putDomainPartByProxy(request: PutDomainPartByProxyRequest): PutDomainPartByProxyResponse {
  var runtime = new $RuntimeOptions{};
  return putDomainPartByProxyWithOptions(request, runtime);
}

model PutMeasureDataRequest {
  apiType?: string(name='ApiType', description='This parameter is required.'),
  compressed?: boolean(name='Compressed'),
  data?: string(name='Data', description='This parameter is required.'),
  dataType?: string(name='DataType'),
  domainCode?: string(name='DomainCode', description='This parameter is required.'),
  filter?: string(name='Filter'),
  sourceRequestId?: string(name='SourceRequestId'),
}

model PutMeasureDataResponseBody = {
  apiType?: string(name='ApiType'),
  dataType?: string(name='DataType'),
  domainCode?: string(name='DomainCode'),
  requestId?: string(name='RequestId'),
  sourceRequestId?: string(name='SourceRequestId'),
}

model PutMeasureDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PutMeasureDataResponseBody(name='body'),
}

/**
 * @summary 推送计量数据
 *
 * @param request PutMeasureDataRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PutMeasureDataResponse
 */
async function putMeasureDataWithOptions(request: PutMeasureDataRequest, runtime: $RuntimeOptions): PutMeasureDataResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.apiType)) {
    query['ApiType'] = request.apiType;
  }
  if (!$isNull(request.compressed)) {
    query['Compressed'] = request.compressed;
  }
  if (!$isNull(request.data)) {
    query['Data'] = request.data;
  }
  if (!$isNull(request.dataType)) {
    query['DataType'] = request.dataType;
  }
  if (!$isNull(request.domainCode)) {
    query['DomainCode'] = request.domainCode;
  }
  if (!$isNull(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!$isNull(request.sourceRequestId)) {
    query['SourceRequestId'] = request.sourceRequestId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'PutMeasureData',
    version = '2016-06-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 推送计量数据
 *
 * @param request PutMeasureDataRequest
 * @return PutMeasureDataResponse
 */
async function putMeasureData(request: PutMeasureDataRequest): PutMeasureDataResponse {
  var runtime = new $RuntimeOptions{};
  return putMeasureDataWithOptions(request, runtime);
}

model PutMeasureDataByProxyRequest {
  apiType?: string(name='ApiType', description='This parameter is required.'),
  compressed?: boolean(name='Compressed'),
  data?: string(name='Data', description='This parameter is required.'),
  dataType?: string(name='DataType'),
  domainCode?: string(name='DomainCode', description='This parameter is required.'),
  filter?: string(name='Filter'),
}

model PutMeasureDataByProxyResponseBody = {
  apiType?: string(name='ApiType'),
  dataType?: string(name='DataType'),
  domainCode?: string(name='DomainCode'),
  requestId?: string(name='RequestId'),
}

model PutMeasureDataByProxyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PutMeasureDataByProxyResponseBody(name='body'),
}

/**
 * @param request PutMeasureDataByProxyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PutMeasureDataByProxyResponse
 */
async function putMeasureDataByProxyWithOptions(request: PutMeasureDataByProxyRequest, runtime: $RuntimeOptions): PutMeasureDataByProxyResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.apiType)) {
    query['ApiType'] = request.apiType;
  }
  if (!$isNull(request.compressed)) {
    query['Compressed'] = request.compressed;
  }
  if (!$isNull(request.data)) {
    query['Data'] = request.data;
  }
  if (!$isNull(request.dataType)) {
    query['DataType'] = request.dataType;
  }
  if (!$isNull(request.domainCode)) {
    query['DomainCode'] = request.domainCode;
  }
  if (!$isNull(request.filter)) {
    query['Filter'] = request.filter;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'PutMeasureDataByProxy',
    version = '2016-06-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request PutMeasureDataByProxyRequest
 * @return PutMeasureDataByProxyResponse
 */
async function putMeasureDataByProxy(request: PutMeasureDataByProxyRequest): PutMeasureDataByProxyResponse {
  var runtime = new $RuntimeOptions{};
  return putMeasureDataByProxyWithOptions(request, runtime);
}

model PutReadyFlagRequest {
  apiType?: string(name='ApiType', description='This parameter is required.'),
  compressed?: boolean(name='Compressed'),
  data?: string(name='Data', description='This parameter is required.'),
  dataType?: string(name='DataType'),
  domainCode?: string(name='DomainCode', description='This parameter is required.'),
  sourceRequestId?: string(name='SourceRequestId'),
}

model PutReadyFlagResponseBody = {
  apiType?: string(name='ApiType'),
  dataType?: string(name='DataType'),
  domainCode?: string(name='DomainCode'),
  requestId?: string(name='RequestId'),
  sourceRequestId?: string(name='SourceRequestId'),
}

model PutReadyFlagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PutReadyFlagResponseBody(name='body'),
}

/**
 * @summary 推送readyflag
 *
 * @param request PutReadyFlagRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PutReadyFlagResponse
 */
async function putReadyFlagWithOptions(request: PutReadyFlagRequest, runtime: $RuntimeOptions): PutReadyFlagResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.apiType)) {
    query['ApiType'] = request.apiType;
  }
  if (!$isNull(request.compressed)) {
    query['Compressed'] = request.compressed;
  }
  if (!$isNull(request.data)) {
    query['Data'] = request.data;
  }
  if (!$isNull(request.dataType)) {
    query['DataType'] = request.dataType;
  }
  if (!$isNull(request.domainCode)) {
    query['DomainCode'] = request.domainCode;
  }
  if (!$isNull(request.sourceRequestId)) {
    query['SourceRequestId'] = request.sourceRequestId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'PutReadyFlag',
    version = '2016-06-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 推送readyflag
 *
 * @param request PutReadyFlagRequest
 * @return PutReadyFlagResponse
 */
async function putReadyFlag(request: PutReadyFlagRequest): PutReadyFlagResponse {
  var runtime = new $RuntimeOptions{};
  return putReadyFlagWithOptions(request, runtime);
}

model PutReadyFlagByProxyRequest {
  apiType?: string(name='ApiType', description='This parameter is required.'),
  compressed?: boolean(name='Compressed'),
  data?: string(name='Data', description='This parameter is required.'),
  dataType?: string(name='DataType'),
  domainCode?: string(name='DomainCode', description='This parameter is required.'),
}

model PutReadyFlagByProxyResponseBody = {
  apiType?: string(name='ApiType'),
  dataType?: string(name='DataType'),
  domainCode?: string(name='DomainCode'),
  requestId?: string(name='RequestId'),
}

model PutReadyFlagByProxyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PutReadyFlagByProxyResponseBody(name='body'),
}

/**
 * @param request PutReadyFlagByProxyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PutReadyFlagByProxyResponse
 */
async function putReadyFlagByProxyWithOptions(request: PutReadyFlagByProxyRequest, runtime: $RuntimeOptions): PutReadyFlagByProxyResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.apiType)) {
    query['ApiType'] = request.apiType;
  }
  if (!$isNull(request.compressed)) {
    query['Compressed'] = request.compressed;
  }
  if (!$isNull(request.data)) {
    query['Data'] = request.data;
  }
  if (!$isNull(request.dataType)) {
    query['DataType'] = request.dataType;
  }
  if (!$isNull(request.domainCode)) {
    query['DomainCode'] = request.domainCode;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'PutReadyFlagByProxy',
    version = '2016-06-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request PutReadyFlagByProxyRequest
 * @return PutReadyFlagByProxyResponse
 */
async function putReadyFlagByProxy(request: PutReadyFlagByProxyRequest): PutReadyFlagByProxyResponse {
  var runtime = new $RuntimeOptions{};
  return putReadyFlagByProxyWithOptions(request, runtime);
}

