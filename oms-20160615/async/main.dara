/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Oms';
  @version = '2016-06-15';
  @endpointRule = 'central';
  @endpointMap = {
    'ap-southeast-1' = 'oms.ap-southeast-1.aliyuncs.com',
    'cn-hangzhou' = 'pre-oms.cn-hangzhou.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model DeleteDomainPartRequest {
  dataType?: string(name='DataType', position='Query'),
  domainCode: string(name='DomainCode', description='This parameter is required.', position='Query'),
  part: string(name='Part', description='This parameter is required.', position='Query'),
}

model DeleteDomainPartResponseBody = {
  dataType?: string(name='DataType'),
  domainCode?: string(name='DomainCode'),
  requestId?: string(name='RequestId'),
}

model DeleteDomainPartResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDomainPartResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDomainPart  DeleteDomainPartRequest
  * @return DeleteDomainPartResponse
 */
async function deleteDomainPart(request: DeleteDomainPartRequest): DeleteDomainPartResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDomainPart', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDomainPartByProxyRequest {
  dataType?: string(name='DataType', position='Query'),
  domainCode: string(name='DomainCode', description='This parameter is required.', position='Query'),
  part: string(name='Part', description='This parameter is required.', position='Query'),
}

model DeleteDomainPartByProxyResponseBody = {
  dataType?: string(name='DataType'),
  domainCode?: string(name='DomainCode'),
  requestId?: string(name='RequestId'),
}

model DeleteDomainPartByProxyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDomainPartByProxyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDomainPartByProxy  DeleteDomainPartByProxyRequest
  * @return DeleteDomainPartByProxyResponse
 */
async function deleteDomainPartByProxy(request: DeleteDomainPartByProxyRequest): DeleteDomainPartByProxyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDomainPartByProxy', 'POST', '/', 'json', false, 'json', request);
}

model DeleteMeasureDataRequest {
  apiType?: string(name='ApiType', example='Full', position='Query'),
  compressed?: boolean(name='Compressed', example='false', position='Query'),
  data?: string(name='Data', example='[{"UserId":"1192922887522200","ProductId":"VM","StartTime":"1556640000","EndTime":"1556726400","Region":"cn-hangzhou","InstanceId":"test1","CPU":"4"}]', position='Query'),
  dataType?: string(name='DataType', example='raw', position='Query'),
  domainCode?: string(name='DomainCode', description='OMS Domain', example='VM', position='Query'),
  filter?: string(name='Filter', example='StartTime>1469980800;StartTime<1469984400', position='Query'),
}

model DeleteMeasureDataResponseBody = {
  apiType?: string(name='ApiType', example='Full'),
  dataType?: string(name='DataType', example='raw'),
  domainCode?: string(name='DomainCode', description='OMS Domain', example='VM'),
  requestId?: string(name='RequestId', description='Id of the request', example='1111-1111-1111'),
  total?: long(name='Total', example='100'),
}

model DeleteMeasureDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMeasureDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteMeasureData  DeleteMeasureDataRequest
  * @return DeleteMeasureDataResponse
 */
async function deleteMeasureData(request: DeleteMeasureDataRequest): DeleteMeasureDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteMeasureData', 'POST', '/', 'json', false, 'json', request);
}

model GetDomainPartRequest {
  compressEnable?: boolean(name='CompressEnable', position='Query'),
  dataType?: string(name='DataType', position='Query'),
  domainCode: string(name='DomainCode', description='This parameter is required.', position='Query'),
  part: string(name='Part', description='This parameter is required.', position='Query'),
}

model GetDomainPartResponseBody = {
  compressed?: boolean(name='Compressed'),
  data?: string(name='Data'),
  dataType?: string(name='DataType'),
  domainCode?: string(name='DomainCode'),
  requestId?: string(name='RequestId'),
}

model GetDomainPartResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDomainPartResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDomainPart  GetDomainPartRequest
  * @return GetDomainPartResponse
 */
async function getDomainPart(request: GetDomainPartRequest): GetDomainPartResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDomainPart', 'GET', '/', 'json', false, 'json', request);
}

model GetDomainPartByProxyRequest {
  compressEnable?: boolean(name='CompressEnable', position='Query'),
  dataType?: string(name='DataType', position='Query'),
  domainCode: string(name='DomainCode', description='This parameter is required.', position='Query'),
  part: string(name='Part', description='This parameter is required.', position='Query'),
}

model GetDomainPartByProxyResponseBody = {
  compressed?: boolean(name='Compressed'),
  data?: string(name='Data'),
  dataType?: string(name='DataType'),
  domainCode?: string(name='DomainCode'),
  requestId?: string(name='RequestId'),
}

model GetDomainPartByProxyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDomainPartByProxyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDomainPartByProxy  GetDomainPartByProxyRequest
  * @return GetDomainPartByProxyResponse
 */
async function getDomainPartByProxy(request: GetDomainPartByProxyRequest): GetDomainPartByProxyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDomainPartByProxy', 'POST', '/', 'json', false, 'json', request);
}

model GetIncrementMeasureDataByProxyRequest {
  compressEnable?: boolean(name='CompressEnable', example='false', position='Query'),
  dataType?: string(name='DataType', example='hour', position='Query'),
  domainCode: string(name='DomainCode', description='This parameter is required.', example='XXDEMO', position='Query'),
  modifyEndTime?: long(name='ModifyEndTime', example='1700634930', position='Query'),
  modifyStartTime?: long(name='ModifyStartTime', example='1700634920', position='Query'),
  rowKeyMapStr: string(name='RowKeyMapStr', description='This parameter is required.', example='{\\"ProviderId\\":\\"26842\\",\\"InstanceId\\":\\"XXX\\",\\"UserId\\":123,\\"ProductId\\":\\"XX\\"}', position='Query'),
}

model GetIncrementMeasureDataByProxyResponseBody = {
  compressed?: string(name='Compressed', example='false'),
  data?: string(name='Data', example='"[{\\"meteringData\\":{\\"ProviderId\\":\\"26842\\",\\"InstanceId\\":\\"XXX\\",\\"Size\\":\\"123\\",\\"UserId\\":\\"123\\",\\"ProductId\\":\\"XX\\"},\\"modifyTime\\":1700634920,\\"status\\":\\"Stop\\"}]"'),
  dataType?: string(name='DataType', example='hour'),
  domainCode?: string(name='DomainCode', example='XXDEMO'),
  requestId?: string(name='RequestId', description='Id of the request', example='645B25AB-4E09-5DCA-8443-A7A58138690B'),
}

model GetIncrementMeasureDataByProxyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetIncrementMeasureDataByProxyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetIncrementMeasureDataByProxy  GetIncrementMeasureDataByProxyRequest
  * @return GetIncrementMeasureDataByProxyResponse
 */
async function getIncrementMeasureDataByProxy(request: GetIncrementMeasureDataByProxyRequest): GetIncrementMeasureDataByProxyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetIncrementMeasureDataByProxy', 'GET', '/', 'json', false, 'json', request);
}

model GetMeasureDataRequest {
  apiType: string(name='ApiType', description='This parameter is required.', position='Query'),
  compressEnable?: boolean(name='CompressEnable', position='Query'),
  dataType?: string(name='DataType', position='Query'),
  domainCode: string(name='DomainCode', description='This parameter is required.', position='Query'),
  filter: string(name='Filter', description='This parameter is required.', position='Query'),
  maxResult: int32(name='MaxResult', description='This parameter is required.', minimum=1, maximum=500, position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  queryField: string(name='QueryField', description='This parameter is required.', position='Query'),
}

model GetMeasureDataResponseBody = {
  apiType?: string(name='ApiType'),
  compressed?: boolean(name='Compressed'),
  data?: string(name='Data'),
  dataType?: string(name='DataType'),
  domainCode?: string(name='DomainCode'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model GetMeasureDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMeasureDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetMeasureData  GetMeasureDataRequest
  * @return GetMeasureDataResponse
 */
async function getMeasureData(request: GetMeasureDataRequest): GetMeasureDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMeasureData', 'POST', '/', 'json', false, 'json', request);
}

model GetReadyFlagRequest {
  apiType: string(name='ApiType', description='This parameter is required.', position='Query'),
  compressEnable?: boolean(name='CompressEnable', position='Query'),
  dataType?: string(name='DataType', position='Query'),
  domainCode: string(name='DomainCode', description='This parameter is required.', position='Query'),
  filter: string(name='Filter', description='This parameter is required.', position='Query'),
  maxResult: int32(name='MaxResult', description='This parameter is required.', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
}

model GetReadyFlagResponseBody = {
  apiType?: string(name='ApiType'),
  compressed?: boolean(name='Compressed'),
  data?: string(name='Data'),
  dataType?: string(name='DataType'),
  domainCode?: string(name='DomainCode'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model GetReadyFlagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetReadyFlagResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetReadyFlag  GetReadyFlagRequest
  * @return GetReadyFlagResponse
 */
async function getReadyFlag(request: GetReadyFlagRequest): GetReadyFlagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetReadyFlag', 'GET', '/', 'json', false, 'json', request);
}

model GetReadyFlagByProxyRequest {
  apiType: string(name='ApiType', description='This parameter is required.', position='Query'),
  compressEnable?: boolean(name='CompressEnable', position='Query'),
  dataType?: string(name='DataType', position='Query'),
  domainCode: string(name='DomainCode', description='This parameter is required.', position='Query'),
  filter: string(name='Filter', description='This parameter is required.', position='Query'),
  maxResult: int32(name='MaxResult', description='This parameter is required.', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
}

model GetReadyFlagByProxyResponseBody = {
  apiType?: string(name='ApiType'),
  compressed?: boolean(name='Compressed'),
  data?: string(name='Data'),
  dataType?: string(name='DataType'),
  domainCode?: string(name='DomainCode'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model GetReadyFlagByProxyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetReadyFlagByProxyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetReadyFlagByProxy  GetReadyFlagByProxyRequest
  * @return GetReadyFlagByProxyResponse
 */
async function getReadyFlagByProxy(request: GetReadyFlagByProxyRequest): GetReadyFlagByProxyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetReadyFlagByProxy', 'POST', '/', 'json', false, 'json', request);
}

model PutDomainPartRequest {
  compressed?: boolean(name='Compressed', position='Query'),
  data: string(name='Data', description='This parameter is required.', position='Query'),
  dataType?: string(name='DataType', position='Query'),
  domainCode: string(name='DomainCode', description='This parameter is required.', position='Query'),
}

model PutDomainPartResponseBody = {
  dataType?: string(name='DataType'),
  domainCode?: string(name='DomainCode'),
  requestId?: string(name='RequestId'),
}

model PutDomainPartResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PutDomainPartResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PutDomainPart  PutDomainPartRequest
  * @return PutDomainPartResponse
 */
async function putDomainPart(request: PutDomainPartRequest): PutDomainPartResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutDomainPart', 'POST', '/', 'json', false, 'json', request);
}

model PutDomainPartByProxyRequest {
  compressed?: boolean(name='Compressed', position='Query'),
  data: string(name='Data', description='This parameter is required.', position='Query'),
  dataType?: string(name='DataType', position='Query'),
  domainCode: string(name='DomainCode', description='This parameter is required.', position='Query'),
}

model PutDomainPartByProxyResponseBody = {
  dataType?: string(name='DataType'),
  domainCode?: string(name='DomainCode'),
  requestId?: string(name='RequestId'),
}

model PutDomainPartByProxyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PutDomainPartByProxyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PutDomainPartByProxy  PutDomainPartByProxyRequest
  * @return PutDomainPartByProxyResponse
 */
async function putDomainPartByProxy(request: PutDomainPartByProxyRequest): PutDomainPartByProxyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutDomainPartByProxy', 'POST', '/', 'json', false, 'json', request);
}

model PutMeasureDataRequest {
  apiType: string(name='ApiType', description='This parameter is required.', position='Query'),
  compressed?: boolean(name='Compressed', position='Query'),
  data: string(name='Data', description='This parameter is required.', position='Query'),
  dataType?: string(name='DataType', position='Query'),
  domainCode: string(name='DomainCode', description='This parameter is required.', position='Query'),
  filter?: string(name='Filter', position='Query'),
  sourceRequestId?: string(name='SourceRequestId', position='Query'),
}

model PutMeasureDataResponseBody = {
  apiType?: string(name='ApiType'),
  dataType?: string(name='DataType'),
  domainCode?: string(name='DomainCode'),
  requestId?: string(name='RequestId'),
  sourceRequestId?: string(name='SourceRequestId'),
}

model PutMeasureDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PutMeasureDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PutMeasureData  PutMeasureDataRequest
  * @return PutMeasureDataResponse
 */
async function putMeasureData(request: PutMeasureDataRequest): PutMeasureDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutMeasureData', 'POST', '/', 'json', false, 'json', request);
}

model PutMeasureDataByProxyRequest {
  apiType: string(name='ApiType', description='This parameter is required.', position='Query'),
  compressed?: boolean(name='Compressed', position='Query'),
  data: string(name='Data', description='This parameter is required.', position='Query'),
  dataType?: string(name='DataType', position='Query'),
  domainCode: string(name='DomainCode', description='This parameter is required.', position='Query'),
  filter?: string(name='Filter', position='Query'),
}

model PutMeasureDataByProxyResponseBody = {
  apiType?: string(name='ApiType'),
  dataType?: string(name='DataType'),
  domainCode?: string(name='DomainCode'),
  requestId?: string(name='RequestId'),
}

model PutMeasureDataByProxyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PutMeasureDataByProxyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PutMeasureDataByProxy  PutMeasureDataByProxyRequest
  * @return PutMeasureDataByProxyResponse
 */
async function putMeasureDataByProxy(request: PutMeasureDataByProxyRequest): PutMeasureDataByProxyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutMeasureDataByProxy', 'POST', '/', 'json', false, 'json', request);
}

model PutReadyFlagRequest {
  apiType: string(name='ApiType', description='This parameter is required.', position='Query'),
  compressed?: boolean(name='Compressed', position='Query'),
  data: string(name='Data', description='This parameter is required.', position='Query'),
  dataType?: string(name='DataType', position='Query'),
  domainCode: string(name='DomainCode', description='This parameter is required.', position='Query'),
  sourceRequestId?: string(name='SourceRequestId', position='Query'),
}

model PutReadyFlagResponseBody = {
  apiType?: string(name='ApiType'),
  dataType?: string(name='DataType'),
  domainCode?: string(name='DomainCode'),
  requestId?: string(name='RequestId'),
  sourceRequestId?: string(name='SourceRequestId'),
}

model PutReadyFlagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PutReadyFlagResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PutReadyFlag  PutReadyFlagRequest
  * @return PutReadyFlagResponse
 */
async function putReadyFlag(request: PutReadyFlagRequest): PutReadyFlagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutReadyFlag', 'POST', '/', 'json', false, 'json', request);
}

model PutReadyFlagByProxyRequest {
  apiType: string(name='ApiType', description='This parameter is required.', position='Query'),
  compressed?: boolean(name='Compressed', position='Query'),
  data: string(name='Data', description='This parameter is required.', position='Query'),
  dataType?: string(name='DataType', position='Query'),
  domainCode: string(name='DomainCode', description='This parameter is required.', position='Query'),
}

model PutReadyFlagByProxyResponseBody = {
  apiType?: string(name='ApiType'),
  dataType?: string(name='DataType'),
  domainCode?: string(name='DomainCode'),
  requestId?: string(name='RequestId'),
}

model PutReadyFlagByProxyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PutReadyFlagByProxyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PutReadyFlagByProxy  PutReadyFlagByProxyRequest
  * @return PutReadyFlagByProxyResponse
 */
async function putReadyFlagByProxy(request: PutReadyFlagByProxyRequest): PutReadyFlagByProxyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutReadyFlagByProxy', 'POST', '/', 'json', false, 'json', request);
}

