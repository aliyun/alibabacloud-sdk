/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'cloudesl';
  @version = '2019-08-01';
  @endpointRule = 'regional';
  @endpointMap = {
    'ap-northeast-1' = 'cloudesl.aliyuncs.com',
    'ap-northeast-2-pop' = 'cloudesl.aliyuncs.com',
    'ap-south-1' = 'cloudesl.aliyuncs.com',
    'ap-southeast-1' = 'cloudesl.aliyuncs.com',
    'ap-southeast-2' = 'cloudesl.aliyuncs.com',
    'ap-southeast-3' = 'cloudesl.aliyuncs.com',
    'ap-southeast-5' = 'cloudesl.aliyuncs.com',
    'cn-beijing' = 'cloudesl.aliyuncs.com',
    'cn-beijing-finance-1' = 'cloudesl.aliyuncs.com',
    'cn-beijing-finance-pop' = 'cloudesl.aliyuncs.com',
    'cn-beijing-gov-1' = 'cloudesl.aliyuncs.com',
    'cn-beijing-nu16-b01' = 'cloudesl.aliyuncs.com',
    'cn-chengdu' = 'cloudesl.aliyuncs.com',
    'cn-edge-1' = 'cloudesl.aliyuncs.com',
    'cn-fujian' = 'cloudesl.aliyuncs.com',
    'cn-haidian-cm12-c01' = 'cloudesl.aliyuncs.com',
    'cn-hangzhou-bj-b01' = 'cloudesl.aliyuncs.com',
    'cn-hangzhou-finance' = 'cloudesl.aliyuncs.com',
    'cn-hangzhou-internal-prod-1' = 'cloudesl.aliyuncs.com',
    'cn-hangzhou-internal-test-1' = 'cloudesl.aliyuncs.com',
    'cn-hangzhou-internal-test-2' = 'cloudesl.aliyuncs.com',
    'cn-hangzhou-internal-test-3' = 'cloudesl.aliyuncs.com',
    'cn-hangzhou-test-306' = 'cloudesl.aliyuncs.com',
    'cn-hongkong' = 'cloudesl.aliyuncs.com',
    'cn-hongkong-finance-pop' = 'cloudesl.aliyuncs.com',
    'cn-huhehaote' = 'cloudesl.aliyuncs.com',
    'cn-north-2-gov-1' = 'cloudesl.aliyuncs.com',
    'cn-qingdao' = 'cloudesl.aliyuncs.com',
    'cn-qingdao-nebula' = 'cloudesl.aliyuncs.com',
    'cn-shanghai' = 'cloudesl.aliyuncs.com',
    'cn-shanghai-et15-b01' = 'cloudesl.aliyuncs.com',
    'cn-shanghai-et2-b01' = 'cloudesl.aliyuncs.com',
    'cn-shanghai-finance-1' = 'cloudesl.aliyuncs.com',
    'cn-shanghai-inner' = 'cloudesl.aliyuncs.com',
    'cn-shanghai-internal-test-1' = 'cloudesl.aliyuncs.com',
    'cn-shenzhen' = 'cloudesl.aliyuncs.com',
    'cn-shenzhen-finance-1' = 'cloudesl.aliyuncs.com',
    'cn-shenzhen-inner' = 'cloudesl.aliyuncs.com',
    'cn-shenzhen-st4-d01' = 'cloudesl.aliyuncs.com',
    'cn-shenzhen-su18-b01' = 'cloudesl.aliyuncs.com',
    'cn-wuhan' = 'cloudesl.aliyuncs.com',
    'cn-yushanfang' = 'cloudesl.aliyuncs.com',
    'cn-zhangbei-na61-b01' = 'cloudesl.aliyuncs.com',
    'cn-zhangjiakou' = 'cloudesl.aliyuncs.com',
    'cn-zhangjiakou-na62-a01' = 'cloudesl.aliyuncs.com',
    'cn-zhengzhou-nebula-1' = 'cloudesl.aliyuncs.com',
    'eu-central-1' = 'cloudesl.aliyuncs.com',
    'eu-west-1' = 'cloudesl.aliyuncs.com',
    'eu-west-1-oxs' = 'cloudesl.aliyuncs.com',
    'me-east-1' = 'cloudesl.aliyuncs.com',
    'rus-west-1-pop' = 'cloudesl.aliyuncs.com',
    'us-east-1' = 'cloudesl.aliyuncs.com',
    'us-west-1' = 'cloudesl.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model ActivateApDeviceRequest {
  apMac: string(name='ApMac', position='Body'),
  storeId: string(name='StoreId', position='Body'),
}

model ActivateApDeviceResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ActivateApDeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ActivateApDeviceResponseBody(name='body'),
}

async function activateApDevice(request: ActivateApDeviceRequest): ActivateApDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ActivateApDevice', 'POST', '/', 'json', true, 'form', request);
}

model AddApDeviceRequest {
  apMac: string(name='ApMac', position='Body'),
  storeId: string(name='StoreId', position='Body'),
}

model AddApDeviceResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddApDeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddApDeviceResponseBody(name='body'),
}

async function addApDevice(request: AddApDeviceRequest): AddApDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddApDevice', 'POST', '/', 'json', true, 'form', request);
}

model AddEslDeviceRequest {
  eslBarCode: string(name='EslBarCode', position='Body'),
  storeId: string(name='StoreId', position='Body'),
}

model AddEslDeviceResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddEslDeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddEslDeviceResponseBody(name='body'),
}

async function addEslDevice(request: AddEslDeviceRequest): AddEslDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddEslDevice', 'POST', '/', 'json', true, 'form', request);
}

model AddUserRequest {
  userId: string(name='UserId', example='user1', position='Body'),
}

model AddUserResponseBody = {
  code?: string(name='Code', example='-1001'),
  dynamicCode?: string(name='DynamicCode', example='PlatformResponseError.%s'),
  dynamicMessage?: string(name='DynamicMessage', example='The specified store %s does not exist.'),
  errorCode?: string(name='ErrorCode', example='MandatoryParameters'),
  errorMessage?: string(name='ErrorMessage', example='The specified resource type is invalid.'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='E69C8998-1787-4999-8C75-D663FF1173CF'),
  success?: boolean(name='Success', example='true'),
}

model AddUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddUserResponseBody(name='body'),
}

async function addUser(request: AddUserRequest): AddUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddUser', 'POST', '/', 'json', true, 'form', request);
}

model AssignUserRequest {
  stores?: string(name='Stores', position='Body'),
  userId: string(name='UserId', position='Body'),
  userType: string(name='UserType', position='Body'),
}

model AssignUserResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AssignUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AssignUserResponseBody(name='body'),
}

async function assignUser(request: AssignUserRequest): AssignUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssignUser', 'POST', '/', 'json', true, 'form', request);
}

model BatchInsertItemsRequest {
  itemInfo: [ 
    {
      actionPrice?: int32(name='ActionPrice'),
      bePromotion?: boolean(name='BePromotion'),
      beSourceCode?: boolean(name='BeSourceCode'),
      brandName?: string(name='BrandName'),
      categoryName?: string(name='CategoryName'),
      companyId?: string(name='CompanyId'),
      customizeFeatureA?: string(name='CustomizeFeatureA'),
      customizeFeatureB?: string(name='CustomizeFeatureB'),
      customizeFeatureC?: string(name='CustomizeFeatureC'),
      customizeFeatureD?: string(name='CustomizeFeatureD'),
      customizeFeatureE?: string(name='CustomizeFeatureE'),
      customizeFeatureF?: string(name='CustomizeFeatureF'),
      customizeFeatureG?: string(name='CustomizeFeatureG'),
      customizeFeatureH?: string(name='CustomizeFeatureH'),
      customizeFeatureI?: string(name='CustomizeFeatureI'),
      customizeFeatureJ?: string(name='CustomizeFeatureJ'),
      energyEfficiency?: string(name='EnergyEfficiency'),
      extraAttribute?: string(name='ExtraAttribute'),
      forestFirstId?: string(name='ForestFirstId'),
      forestSecondId?: string(name='ForestSecondId'),
      itemBarCode?: string(name='ItemBarCode'),
      itemId?: long(name='ItemId'),
      itemInfoIndex?: int32(name='ItemInfoIndex'),
      itemQrCode?: string(name='ItemQrCode'),
      itemShortTitle?: string(name='ItemShortTitle'),
      itemTitle?: string(name='ItemTitle'),
      memberPrice?: int32(name='MemberPrice'),
      modelNumber?: string(name='ModelNumber'),
      optionGroups?: string(name='OptionGroups'),
      originalPrice?: int32(name='OriginalPrice'),
      priceUnit?: string(name='PriceUnit'),
      productionPlace?: string(name='ProductionPlace'),
      promotionEnd?: string(name='PromotionEnd'),
      promotionReason?: string(name='PromotionReason'),
      promotionStart?: string(name='PromotionStart'),
      promotionText?: string(name='PromotionText'),
      rank?: string(name='Rank'),
      saleSpec?: string(name='SaleSpec'),
      skuId?: string(name='SkuId'),
      sourceCode?: string(name='SourceCode'),
      storeId?: string(name='StoreId'),
      suggestPrice?: int32(name='SuggestPrice'),
    }
  ](name='ItemInfo', position='Body'),
  storeId: string(name='StoreId', position='Body'),
}

model BatchInsertItemsResponseBody = {
  batchResults?: {
    batchResult?: [ 
    {
      errorCode?: string(name='ErrorCode'),
      index?: int32(name='Index'),
      message?: string(name='Message'),
      success?: boolean(name='Success'),
    }
  ](name='BatchResult')
  }(name='BatchResults'),
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BatchInsertItemsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchInsertItemsResponseBody(name='body'),
}

async function batchInsertItems(request: BatchInsertItemsRequest): BatchInsertItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchInsertItems', 'POST', '/', 'json', true, 'form', request);
}

model BindEslDeviceRequest {
  eslBarCode: string(name='EslBarCode', position='Body'),
  itemBarCode: string(name='ItemBarCode', position='Body'),
  storeId: string(name='StoreId', position='Body'),
}

model BindEslDeviceResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BindEslDeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BindEslDeviceResponseBody(name='body'),
}

async function bindEslDevice(request: BindEslDeviceRequest): BindEslDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindEslDevice', 'POST', '/', 'json', true, 'form', request);
}

model BindEslDeviceShelfRequest {
  eslBarCode: string(name='EslBarCode', position='Body'),
  shelfCode: string(name='ShelfCode', position='Body'),
  storeId: string(name='StoreId', position='Body'),
}

model BindEslDeviceShelfResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BindEslDeviceShelfResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BindEslDeviceShelfResponseBody(name='body'),
}

async function bindEslDeviceShelf(request: BindEslDeviceShelfRequest): BindEslDeviceShelfResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindEslDeviceShelf', 'POST', '/', 'json', true, 'form', request);
}

model ConfirmLogisticsRequest {
  logisticsDocuments?: string(name='LogisticsDocuments', position='Body'),
  poNumber: string(name='PoNumber', position='Body'),
  prNumber: string(name='PrNumber', position='Body'),
  status?: string(name='Status', position='Body'),
}

model ConfirmLogisticsResponseBody = {
  acceptance?: string(name='Acceptance'),
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ConfirmLogisticsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfirmLogisticsResponseBody(name='body'),
}

async function confirmLogistics(request: ConfirmLogisticsRequest): ConfirmLogisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfirmLogistics', 'POST', '/', 'json', true, 'form', request);
}

model CreateStoreRequest {
  brand?: string(name='Brand', position='Body'),
  comments?: string(name='Comments', position='Body'),
  companyId: string(name='CompanyId', position='Body'),
  groups?: string(name='Groups', position='Body'),
  outId?: string(name='OutId', position='Body'),
  parentId?: string(name='ParentId', position='Body'),
  phone: string(name='Phone', position='Body'),
  storeName: string(name='StoreName', position='Body'),
}

model CreateStoreResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  storeId?: string(name='StoreId'),
  success?: boolean(name='Success'),
}

model CreateStoreResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateStoreResponseBody(name='body'),
}

async function createStore(request: CreateStoreRequest): CreateStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateStore', 'POST', '/', 'json', true, 'form', request);
}

model DeleteApDeviceRequest {
  apMac: string(name='ApMac', position='Body'),
  storeId: string(name='StoreId', position='Body'),
}

model DeleteApDeviceResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteApDeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteApDeviceResponseBody(name='body'),
}

async function deleteApDevice(request: DeleteApDeviceRequest): DeleteApDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteApDevice', 'POST', '/', 'json', true, 'form', request);
}

model DeleteEslDeviceRequest {
  eslBarCode: string(name='EslBarCode', position='Body'),
  storeId: string(name='StoreId', position='Body'),
}

model DeleteEslDeviceResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteEslDeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEslDeviceResponseBody(name='body'),
}

async function deleteEslDevice(request: DeleteEslDeviceRequest): DeleteEslDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEslDevice', 'POST', '/', 'json', true, 'form', request);
}

model DeleteItemRequest {
  itemBarCode: string(name='ItemBarCode', position='Body'),
  storeId: string(name='StoreId', position='Body'),
}

model DeleteItemResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteItemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteItemResponseBody(name='body'),
}

async function deleteItem(request: DeleteItemRequest): DeleteItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteItem', 'POST', '/', 'json', true, 'form', request);
}

model DeleteItemBySkuIdRequest {
  skuId: string(name='SkuId', position='Body'),
  storeId: string(name='StoreId', position='Body'),
}

model DeleteItemBySkuIdResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteItemBySkuIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteItemBySkuIdResponseBody(name='body'),
}

async function deleteItemBySkuId(request: DeleteItemBySkuIdRequest): DeleteItemBySkuIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteItemBySkuId', 'POST', '/', 'json', true, 'form', request);
}

model DeleteStoreRequest {
  storeId: string(name='StoreId', position='Body'),
}

model DeleteStoreResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteStoreResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteStoreResponseBody(name='body'),
}

async function deleteStore(request: DeleteStoreRequest): DeleteStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteStore', 'POST', '/', 'json', true, 'form', request);
}

model DeleteUserRequest {
  userId: string(name='UserId', position='Body'),
}

model DeleteUserResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteUserResponseBody(name='body'),
}

async function deleteUser(request: DeleteUserRequest): DeleteUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUser', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAlarmsRequest {
  alarmId?: string(name='AlarmId', position='Body'),
  alarmStatus?: string(name='AlarmStatus', position='Body'),
  alarmType?: string(name='AlarmType', position='Body'),
  errorType?: string(name='ErrorType', position='Body'),
  fromAlarmTime?: string(name='FromAlarmTime', position='Body'),
  pageNumber?: int32(name='PageNumber', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  storeId: string(name='StoreId', position='Body'),
  toAlarmTime?: string(name='ToAlarmTime', position='Body'),
}

model DescribeAlarmsResponseBody = {
  alarms?: {
    alarmInfo?: [ 
    {
      alarmId?: string(name='AlarmId'),
      alarmStatus?: string(name='AlarmStatus'),
      alarmTime?: string(name='AlarmTime'),
      alarmType?: string(name='AlarmType'),
      companyId?: string(name='CompanyId'),
      dealTime?: string(name='DealTime'),
      dealUserId?: long(name='DealUserId'),
      deviceBarCode?: string(name='DeviceBarCode'),
      deviceMac?: string(name='DeviceMac'),
      deviceType?: string(name='DeviceType'),
      errorType?: string(name='ErrorType'),
      itemBarCode?: string(name='ItemBarCode'),
      itemTitle?: string(name='ItemTitle'),
      model?: string(name='Model'),
      storeId?: string(name='StoreId'),
      vendor?: string(name='Vendor'),
    }
  ](name='AlarmInfo')
  }(name='Alarms'),
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeAlarmsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAlarmsResponseBody(name='body'),
}

async function describeAlarms(request: DescribeAlarmsRequest): DescribeAlarmsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAlarms', 'POST', '/', 'json', true, 'form', request);
}

model DescribeApDevicesRequest {
  activated?: boolean(name='Activated', position='Body'),
  apMac?: string(name='ApMac', position='Body'),
  pageNumber?: int32(name='PageNumber', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  storeId: string(name='StoreId', position='Body'),
}

model DescribeApDevicesResponseBody = {
  apDevices?: {
    apInfo?: [ 
    {
      isActivate?: boolean(name='IsActivate'),
      mac?: string(name='Mac'),
      model?: string(name='Model'),
      status?: boolean(name='Status'),
    }
  ](name='ApInfo')
  }(name='ApDevices'),
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeApDevicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApDevicesResponseBody(name='body'),
}

async function describeApDevices(request: DescribeApDevicesRequest): DescribeApDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApDevices', 'POST', '/', 'json', true, 'form', request);
}

model DescribeEslDevicesRequest {
  beBind?: boolean(name='BeBind', position='Body'),
  eslBarCode?: string(name='EslBarCode', position='Body'),
  eslStatus?: string(name='EslStatus', position='Body'),
  fromBatteryLevel?: int32(name='FromBatteryLevel', position='Body'),
  itemBarCode?: string(name='ItemBarCode', position='Body'),
  mac?: string(name='Mac', position='Body'),
  pageNumber?: int32(name='PageNumber', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  shelfCode?: string(name='ShelfCode', position='Body'),
  storeId: string(name='StoreId', position='Body'),
  toBatteryLevel?: int32(name='ToBatteryLevel', position='Body'),
  type?: string(name='Type', position='Body'),
  vendor?: string(name='Vendor', position='Body'),
}

model DescribeEslDevicesResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  eslDevices?: {
    eslDeviceInfo?: [ 
    {
      batteryLevel?: int32(name='BatteryLevel'),
      beBind?: boolean(name='BeBind'),
      companyId?: string(name='CompanyId'),
      connectAp?: string(name='ConnectAp'),
      eslBarCode?: string(name='EslBarCode'),
      eslStatus?: string(name='EslStatus'),
      itemActionPrice?: int32(name='ItemActionPrice'),
      itemBarCode?: string(name='ItemBarCode'),
      itemId?: long(name='ItemId'),
      itemPriceUnit?: string(name='ItemPriceUnit'),
      itemTitle?: string(name='ItemTitle'),
      lastCommunicateTime?: string(name='LastCommunicateTime'),
      mac?: string(name='Mac'),
      model?: string(name='Model'),
      positionCode?: string(name='PositionCode'),
      screenHeight?: int32(name='ScreenHeight'),
      screenWidth?: int32(name='ScreenWidth'),
      shelfCode?: string(name='ShelfCode'),
      storeId?: string(name='StoreId'),
      type?: string(name='Type'),
      vendor?: string(name='Vendor'),
    }
  ](name='EslDeviceInfo')
  }(name='EslDevices'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeEslDevicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEslDevicesResponseBody(name='body'),
}

async function describeEslDevices(request: DescribeEslDevicesRequest): DescribeEslDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEslDevices', 'POST', '/', 'json', true, 'form', request);
}

model DescribeItemsRequest {
  bePromotion?: boolean(name='BePromotion', position='Body'),
  itemBarCode?: string(name='ItemBarCode', position='Body'),
  itemId?: long(name='ItemId', position='Body'),
  itemTitle?: string(name='ItemTitle', position='Body'),
  pageNumber?: int32(name='PageNumber', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  skuId?: string(name='SkuId', position='Body'),
  storeId: string(name='StoreId', position='Body'),
}

model DescribeItemsResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  items?: {
    itemInfo?: [ 
    {
      actionPrice?: int32(name='ActionPrice'),
      bePromotion?: boolean(name='BePromotion'),
      beSourceCode?: boolean(name='BeSourceCode'),
      brandName?: string(name='BrandName'),
      categoryName?: string(name='CategoryName'),
      companyId?: string(name='CompanyId'),
      customizeFeatureA?: string(name='CustomizeFeatureA'),
      customizeFeatureB?: string(name='CustomizeFeatureB'),
      customizeFeatureC?: string(name='CustomizeFeatureC'),
      customizeFeatureD?: string(name='CustomizeFeatureD'),
      customizeFeatureE?: string(name='CustomizeFeatureE'),
      customizeFeatureF?: string(name='CustomizeFeatureF'),
      customizeFeatureG?: string(name='CustomizeFeatureG'),
      customizeFeatureH?: string(name='CustomizeFeatureH'),
      customizeFeatureI?: string(name='CustomizeFeatureI'),
      customizeFeatureJ?: string(name='CustomizeFeatureJ'),
      energyEfficiency?: string(name='EnergyEfficiency'),
      extraAttribute?: string(name='ExtraAttribute'),
      forestFirstId?: string(name='ForestFirstId'),
      forestSecondId?: string(name='ForestSecondId'),
      itemBarCode?: string(name='ItemBarCode'),
      itemId?: long(name='ItemId'),
      itemInfoIndex?: int32(name='ItemInfoIndex'),
      itemQrCode?: string(name='ItemQrCode'),
      itemShortTitle?: string(name='ItemShortTitle'),
      itemTitle?: string(name='ItemTitle'),
      memberPrice?: int32(name='MemberPrice'),
      modelNumber?: string(name='ModelNumber'),
      optionGroups?: string(name='OptionGroups'),
      originalPrice?: int32(name='OriginalPrice'),
      priceUnit?: string(name='PriceUnit'),
      productionPlace?: string(name='ProductionPlace'),
      promotionEnd?: string(name='PromotionEnd'),
      promotionReason?: string(name='PromotionReason'),
      promotionStart?: string(name='PromotionStart'),
      promotionText?: string(name='PromotionText'),
      rank?: string(name='Rank'),
      saleSpec?: string(name='SaleSpec'),
      skuId?: string(name='SkuId'),
      sourceCode?: string(name='SourceCode'),
      storeId?: string(name='StoreId'),
      suggestPrice?: int32(name='SuggestPrice'),
    }
  ](name='ItemInfo')
  }(name='Items'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeItemsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeItemsResponseBody(name='body'),
}

async function describeItems(request: DescribeItemsRequest): DescribeItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeItems', 'POST', '/', 'json', true, 'form', request);
}

model DescribeLogisticsRequest {
  orderId: string(name='OrderId', position='Body'),
}

model DescribeLogisticsResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  logistics?: {
    logisticsInfo?: [ 
    {
      acceptStatus?: boolean(name='AcceptStatus'),
      apMacList?: string(name='ApMacList'),
      description?: string(name='Description'),
      eslMacList?: string(name='EslMacList'),
      hasSend?: string(name='HasSend'),
      logisticsDocuments?: string(name='LogisticsDocuments'),
      orderId?: string(name='OrderId'),
      poNumber?: string(name='PoNumber'),
      prNumber?: string(name='PrNumber'),
    }
  ](name='LogisticsInfo')
  }(name='Logistics'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeLogisticsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeLogisticsResponseBody(name='body'),
}

async function describeLogistics(request: DescribeLogisticsRequest): DescribeLogisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLogistics', 'POST', '/', 'json', true, 'form', request);
}

model DescribePayOrdersRequest {
  fromDate?: string(name='FromDate', position='Body'),
  orderId?: string(name='OrderId', position='Body'),
  pageNumber?: int32(name='PageNumber', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  toDate?: string(name='ToDate', position='Body'),
}

model DescribePayOrdersResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  payOrders?: {
    payOrderInfo?: [ 
    {
      commodityCode?: string(name='CommodityCode'),
      commodityName?: string(name='CommodityName'),
      detailName?: string(name='DetailName'),
      gmtCreate?: string(name='GmtCreate'),
      gmtPay?: string(name='GmtPay'),
      isAccepted?: boolean(name='IsAccepted'),
      orderId?: string(name='OrderId'),
      orderStatus?: string(name='OrderStatus'),
      orderType?: string(name='OrderType'),
      originalAmount?: float(name='OriginalAmount'),
      payAmount?: float(name='PayAmount'),
      quantity?: int32(name='Quantity'),
    }
  ](name='PayOrderInfo')
  }(name='PayOrders'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model DescribePayOrdersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePayOrdersResponseBody(name='body'),
}

async function describePayOrders(request: DescribePayOrdersRequest): DescribePayOrdersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePayOrders', 'POST', '/', 'json', true, 'form', request);
}

model DescribePlanogramRailsRequest {
  layer?: string(name='Layer', position='Body'),
  pageNumber?: int32(name='PageNumber', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  railCode?: string(name='RailCode', position='Body'),
  shelf?: string(name='Shelf', position='Body'),
  storeId: string(name='StoreId', position='Body'),
}

model DescribePlanogramRailsResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  planogramRailInfos?: [ 
    {
      gapUnit?: int32(name='GapUnit'),
      layer?: string(name='Layer'),
      railCode?: string(name='RailCode'),
      shelf?: string(name='Shelf'),
    }
  ](name='PlanogramRailInfos'),
  requestId?: string(name='RequestId'),
  storeId?: string(name='StoreId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model DescribePlanogramRailsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePlanogramRailsResponseBody(name='body'),
}

async function describePlanogramRails(request: DescribePlanogramRailsRequest): DescribePlanogramRailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePlanogramRails', 'POST', '/', 'json', true, 'form', request);
}

model DescribeStoresRequest {
  brand?: string(name='Brand', position='Body'),
  companyId?: string(name='CompanyId', position='Body'),
  fromDate?: string(name='FromDate', position='Body'),
  pageNumber?: int32(name='PageNumber', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  storeId?: string(name='StoreId', position='Body'),
  storeName?: string(name='StoreName', position='Body'),
  toDate?: string(name='ToDate', position='Body'),
}

model DescribeStoresResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  stores?: {
    storeInfo?: [ 
    {
      brand?: string(name='Brand'),
      comments?: string(name='Comments'),
      companyId?: string(name='CompanyId'),
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
      groups?: string(name='Groups'),
      level?: string(name='Level'),
      outId?: string(name='OutId'),
      parentId?: string(name='ParentId'),
      phone?: string(name='Phone'),
      storeId?: string(name='StoreId'),
      storeName?: string(name='StoreName'),
    }
  ](name='StoreInfo')
  }(name='Stores'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeStoresResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeStoresResponseBody(name='body'),
}

async function describeStores(request: DescribeStoresRequest): DescribeStoresResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeStores', 'POST', '/', 'json', true, 'form', request);
}

model DescribeUserLogRequest {
  eslBarCode?: string(name='EslBarCode', position='Body'),
  fromDate?: string(name='FromDate', position='Body'),
  itemBarCode?: string(name='ItemBarCode', position='Body'),
  itemId?: long(name='ItemId', position='Body'),
  itemTitle?: string(name='ItemTitle', position='Body'),
  operateStatus?: string(name='OperateStatus', position='Body'),
  operateType?: string(name='OperateType', position='Body'),
  operateUserId?: long(name='OperateUserId', position='Body'),
  pageNumber?: int32(name='PageNumber', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  reverse?: boolean(name='Reverse', position='Body'),
  storeId: string(name='StoreId', position='Body'),
  toDate?: string(name='ToDate', position='Body'),
}

model DescribeUserLogResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
  userLogs?: {
    userLogInfo?: [ 
    {
      eslBarCode?: string(name='EslBarCode'),
      itemActionPrice?: int32(name='ItemActionPrice'),
      itemBarCode?: string(name='ItemBarCode'),
      itemId?: long(name='ItemId'),
      itemTitle?: string(name='ItemTitle'),
      mac?: string(name='Mac'),
      operateStatus?: string(name='OperateStatus'),
      operateTime?: string(name='OperateTime'),
      operateType?: string(name='OperateType'),
      operateUserId?: long(name='OperateUserId'),
      shelfCode?: string(name='ShelfCode'),
      storeId?: string(name='StoreId'),
    }
  ](name='UserLogInfo')
  }(name='UserLogs'),
}

model DescribeUserLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeUserLogResponseBody(name='body'),
}

async function describeUserLog(request: DescribeUserLogRequest): DescribeUserLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUserLog', 'POST', '/', 'json', true, 'form', request);
}

model DescribeUsersRequest {
  pageNumber?: int32(name='PageNumber', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  userId?: string(name='UserId', position='Body'),
  userName?: string(name='UserName', position='Body'),
  userType?: string(name='UserType', position='Body'),
}

model DescribeUsersResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
  users?: {
    userInfo?: [ 
    {
      stores?: string(name='Stores'),
      userId?: string(name='UserId'),
      userName?: string(name='UserName'),
      userType?: string(name='UserType'),
    }
  ](name='UserInfo')
  }(name='Users'),
}

model DescribeUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeUsersResponseBody(name='body'),
}

async function describeUsers(request: DescribeUsersRequest): DescribeUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUsers', 'POST', '/', 'json', true, 'form', request);
}

model GetCompanyRequest {
}

model GetCompanyResponseBody = {
  bid?: long(name='Bid'),
  code?: string(name='Code'),
  companyId?: string(name='CompanyId'),
  companyType?: string(name='CompanyType'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  ownerId?: long(name='OwnerId'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  success?: boolean(name='Success'),
}

model GetCompanyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCompanyResponseBody(name='body'),
}

async function getCompany(request: GetCompanyRequest): GetCompanyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCompany', 'POST', '/', 'json', false, 'json', request);
}

model GetUserRequest {
  userId?: string(name='UserId', position='Body'),
}

model GetUserResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  user?: {
    stores?: string(name='Stores'),
    userId?: string(name='UserId'),
    userName?: string(name='UserName'),
    userType?: string(name='UserType'),
  }(name='User'),
}

model GetUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserResponseBody(name='body'),
}

async function getUser(request: GetUserRequest): GetUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUser', 'POST', '/', 'json', true, 'form', request);
}

model MapPlanogramRailRequest {
  layer: string(name='Layer', position='Body'),
  railCode: string(name='RailCode', position='Body'),
  shelf: string(name='Shelf', position='Body'),
  storeId: string(name='StoreId', position='Body'),
}

model MapPlanogramRailResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model MapPlanogramRailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MapPlanogramRailResponseBody(name='body'),
}

async function mapPlanogramRail(request: MapPlanogramRailRequest): MapPlanogramRailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MapPlanogramRail', 'POST', '/', 'json', true, 'form', request);
}

model RefreshTaobaoItemRequest {
  outerId?: string(name='OuterId', position='Body'),
  skuId?: string(name='SkuId', position='Body'),
  storeId: string(name='StoreId', position='Body'),
  taobaoItemId?: string(name='TaobaoItemId', position='Body'),
}

model RefreshTaobaoItemResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RefreshTaobaoItemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RefreshTaobaoItemResponseBody(name='body'),
}

async function refreshTaobaoItem(request: RefreshTaobaoItemRequest): RefreshTaobaoItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefreshTaobaoItem', 'POST', '/', 'json', true, 'form', request);
}

model UnassignUserRequest {
  userId: string(name='UserId', position='Body'),
}

model UnassignUserResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UnassignUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnassignUserResponseBody(name='body'),
}

async function unassignUser(request: UnassignUserRequest): UnassignUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnassignUser', 'POST', '/', 'json', true, 'form', request);
}

model UnbindEslDeviceRequest {
  eslBarCode: string(name='EslBarCode', position='Body'),
  itemBarCode?: string(name='ItemBarCode', position='Body'),
  storeId: string(name='StoreId', position='Body'),
}

model UnbindEslDeviceResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UnbindEslDeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnbindEslDeviceResponseBody(name='body'),
}

async function unbindEslDevice(request: UnbindEslDeviceRequest): UnbindEslDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindEslDevice', 'POST', '/', 'json', true, 'form', request);
}

model UnbindEslDeviceShelfRequest {
  eslBarCode?: string(name='EslBarCode', position='Body'),
  storeId: string(name='StoreId', position='Body'),
}

model UnbindEslDeviceShelfResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UnbindEslDeviceShelfResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnbindEslDeviceShelfResponseBody(name='body'),
}

async function unbindEslDeviceShelf(request: UnbindEslDeviceShelfRequest): UnbindEslDeviceShelfResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindEslDeviceShelf', 'POST', '/', 'json', true, 'form', request);
}

model UnmapPlanogramRailRequest {
  railCode: string(name='RailCode', position='Body'),
  storeId: string(name='StoreId', position='Body'),
}

model UnmapPlanogramRailResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UnmapPlanogramRailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnmapPlanogramRailResponseBody(name='body'),
}

async function unmapPlanogramRail(request: UnmapPlanogramRailRequest): UnmapPlanogramRailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnmapPlanogramRail', 'POST', '/', 'json', true, 'form', request);
}

model UpdateEslDeviceLightRequest {
  eslBarCode?: string(name='EslBarCode', position='Body'),
  frequency: string(name='Frequency', position='Body'),
  itemBarCode?: string(name='ItemBarCode', position='Body'),
  ledColor: string(name='LedColor', position='Body'),
  lightUpTime: int32(name='LightUpTime', position='Body'),
  storeId: string(name='StoreId', position='Body'),
}

model UpdateEslDeviceLightResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  failCount?: long(name='FailCount'),
  failEslBarCodes?: string(name='FailEslBarCodes'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  successCount?: long(name='SuccessCount'),
}

model UpdateEslDeviceLightResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateEslDeviceLightResponseBody(name='body'),
}

async function updateEslDeviceLight(request: UpdateEslDeviceLightRequest): UpdateEslDeviceLightResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateEslDeviceLight', 'POST', '/', 'json', true, 'form', request);
}

model UpdateStoreRequest {
  brand?: string(name='Brand', position='Body'),
  comments?: string(name='Comments', position='Body'),
  groups?: string(name='Groups', position='Body'),
  outId?: string(name='OutId', position='Body'),
  phone?: string(name='Phone', position='Body'),
  storeId: string(name='StoreId', position='Body'),
  storeName?: string(name='StoreName', position='Body'),
}

model UpdateStoreResponseBody = {
  code?: string(name='Code'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateStoreResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateStoreResponseBody(name='body'),
}

async function updateStore(request: UpdateStoreRequest): UpdateStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateStore', 'POST', '/', 'json', true, 'form', request);
}

