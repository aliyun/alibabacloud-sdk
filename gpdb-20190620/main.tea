/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-beijing = 'gpdb.aliyuncs.com',
    cn-hangzhou = 'gpdb.aliyuncs.com',
    cn-shanghai = 'gpdb.aliyuncs.com',
    cn-shenzhen = 'gpdb.aliyuncs.com',
    cn-hongkong = 'gpdb.aliyuncs.com',
    ap-southeast-1 = 'gpdb.aliyuncs.com',
    us-west-1 = 'gpdb.aliyuncs.com',
    us-east-1 = 'gpdb.aliyuncs.com',
    cn-hangzhou-finance = 'gpdb.aliyuncs.com',
    cn-shanghai-finance-1 = 'gpdb.aliyuncs.com',
    cn-shenzhen-finance-1 = 'gpdb.aliyuncs.com',
    cn-qingdao = 'gpdb.aliyuncs.com',
    cn-north-2-gov-1 = 'gpdb.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('gpdb', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model DescribeDBInstanceForDmsRequest {
  host?: string(name='Host'),
  port?: long(name='Port'),
}

model DescribeDBInstanceForDmsResponseBody = {
  code?: string(name='Code'),
  count?: long(name='Count'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  instance?: {
    aliUid?: string(name='AliUid'),
    bid?: string(name='Bid'),
    connectionString?: string(name='ConnectionString'),
    dbInstanceName?: string(name='DbInstanceName'),
    dbType?: string(name='DbType'),
    description?: string(name='Description'),
    instanceNetworkType?: string(name='InstanceNetworkType'),
    port?: string(name='Port'),
    region?: string(name='Region'),
    vSwitchId?: string(name='VSwitchId'),
    version?: string(name='Version'),
    vpcCloudInstanceId?: string(name='VpcCloudInstanceId'),
    vpcId?: string(name='VpcId'),
    vpcIp?: string(name='VpcIp'),
  }(name='Instance'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDBInstanceForDmsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstanceForDmsResponseBody(name='body'),
}

async function describeDBInstanceForDmsWithOptions(request: DescribeDBInstanceForDmsRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceForDmsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.host)) {
    query['Host'] = request.host;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstanceForDms',
    version = '2019-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBInstanceForDms(request: DescribeDBInstanceForDmsRequest): DescribeDBInstanceForDmsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceForDmsWithOptions(request, runtime);
}

model DescribeDBInstanceSecurityIpsRequest {
  instanceId?: string(name='InstanceId'),
}

model DescribeDBInstanceSecurityIpsResponseBody = {
  code?: string(name='Code'),
  count?: long(name='Count'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      groupName?: string(name='GroupName'),
      whiteList?: [ string ](name='WhiteList'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeDBInstanceSecurityIpsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstanceSecurityIpsResponseBody(name='body'),
}

async function describeDBInstanceSecurityIpsWithOptions(request: DescribeDBInstanceSecurityIpsRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceSecurityIpsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstanceSecurityIps',
    version = '2019-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBInstanceSecurityIps(request: DescribeDBInstanceSecurityIpsRequest): DescribeDBInstanceSecurityIpsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceSecurityIpsWithOptions(request, runtime);
}

model DescribeDBInstancesForDmsRequest {
  aliUid?: long(name='AliUid'),
}

model DescribeDBInstancesForDmsResponseBody = {
  code?: string(name='Code'),
  count?: long(name='Count'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  instances?: [ 
    {
      aliUid?: string(name='AliUid'),
      bid?: string(name='Bid'),
      connectionString?: string(name='ConnectionString'),
      dbInstanceName?: string(name='DbInstanceName'),
      dbType?: string(name='DbType'),
      description?: string(name='Description'),
      instanceNetworkType?: string(name='InstanceNetworkType'),
      port?: string(name='Port'),
      region?: string(name='Region'),
      vSwitchId?: string(name='VSwitchId'),
      version?: string(name='Version'),
      vpcCloudInstanceId?: string(name='VpcCloudInstanceId'),
      vpcId?: string(name='VpcId'),
      vpcIp?: string(name='VpcIp'),
    }
  ](name='Instances'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDBInstancesForDmsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstancesForDmsResponseBody(name='body'),
}

async function describeDBInstancesForDmsWithOptions(request: DescribeDBInstancesForDmsRequest, runtime: Util.RuntimeOptions): DescribeDBInstancesForDmsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliUid)) {
    query['AliUid'] = request.aliUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstancesForDms',
    version = '2019-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBInstancesForDms(request: DescribeDBInstancesForDmsRequest): DescribeDBInstancesForDmsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstancesForDmsWithOptions(request, runtime);
}

model ModifyDBInstanceSecurityIpsRequest {
  aliUid?: long(name='AliUid'),
  groupName?: string(name='GroupName'),
  instanceId?: string(name='InstanceId'),
  whileList?: string(name='WhileList'),
}

model ModifyDBInstanceSecurityIpsResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyDBInstanceSecurityIpsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDBInstanceSecurityIpsResponseBody(name='body'),
}

async function modifyDBInstanceSecurityIpsWithOptions(request: ModifyDBInstanceSecurityIpsRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceSecurityIpsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliUid)) {
    query['AliUid'] = request.aliUid;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.whileList)) {
    query['WhileList'] = request.whileList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDBInstanceSecurityIps',
    version = '2019-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDBInstanceSecurityIps(request: ModifyDBInstanceSecurityIpsRequest): ModifyDBInstanceSecurityIpsResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceSecurityIpsWithOptions(request, runtime);
}

