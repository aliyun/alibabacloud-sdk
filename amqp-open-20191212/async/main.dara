/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'amqp-open';
  @version = '2019-12-12';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CreateAccountRequest {
  regionId?: string(name='RegionId', position='Host'),
  accountAccessKey: string(name='accountAccessKey', example='LTAI5t8be*******tEJ6vfo', position='Query'),
  createTimestamp: long(name='createTimestamp', example='1671175303522', position='Query'),
  instanceId: string(name='instanceId', example='amqp-cn-*********', position='Query'),
  secretSign: string(name='secretSign', example='4c1a6367ce4c4255e9617326f9133ac6359533f6', position='Query'),
  signature: string(name='signature', example='22c2d7d1769cb53c5a6d9213248e2de524c4f799', position='Query'),
  userName: string(name='userName', example='MjphbXFwLWNuLXp***********************Q4YmVNbVZNMWVSWnRFSjZ2Zm8=', position='Query'),
}

model CreateAccountResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    accessKey?: string(name='AccessKey', description='AccessKey IDã€‚', example='LTAI5***********eRZtEJ6vfo'),
    createTimeStamp?: long(name='CreateTimeStamp', example='1671175303522'),
    instanceId?: string(name='InstanceId', example='amqp-cn-*********'),
    masterUId?: long(name='MasterUId', example='15657*********01'),
    password?: string(name='Password', example='NEMxQTYzNjdDRTVDNDI1NUU5NjE3**************1MzNGODoxNjcxMTc1MzEzNTIy'),
    userName?: string(name='UserName', example='MjphbXFwLWNuLXVxbTJ6cjc2djAwMzpMVEFJNX*******ZNMWVSWnRFSjZ2Zm8='),
  }(name='Data'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='92385FD2-624A-48C9-8FB5-753F2AFA***'),
  success?: boolean(name='Success', example='true'),
}

model CreateAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAccountResponseBody(name='body'),
}

async function createAccount(request: CreateAccountRequest): CreateAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAccount', 'POST', '/', 'json', false, 'json', request);
}

model CreateBindingRequest {
  regionId: string(name='RegionId', example='cn-hangzhou', position='Host'),
  argument?: string(name='Argument', example='x-match:all;type:report;format:pdf', position='Body'),
  bindingKey: string(name='BindingKey', example='.test', position='Body'),
  bindingType: string(name='BindingType', example='0', position='Body'),
  destinationName: string(name='DestinationName', example='DemoQueue', position='Body'),
  instanceId: string(name='InstanceId', example='amqp-cn-v0h1kb9nu***', position='Body'),
  sourceExchange: string(name='SourceExchange', example='NormalEX', position='Body'),
  virtualHost: string(name='VirtualHost', example='test', position='Body'),
}

model CreateBindingResponseBody = {
  requestId?: string(name='RequestId', example='09768C14-E51C-4F4A-8077-30810032C***'),
}

model CreateBindingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateBindingResponseBody(name='body'),
}

async function createBinding(request: CreateBindingRequest): CreateBindingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateBinding', 'POST', '/', 'json', true, 'form', request);
}

model CreateExchangeRequest {
  regionId: string(name='RegionId', example='cn-hanghzou', position='Host'),
  alternateExchange?: string(name='AlternateExchange', example='DemoAE', position='Body'),
  autoDeleteState: boolean(name='AutoDeleteState', example='false', position='Body'),
  exchangeName: string(name='ExchangeName', example='DemoExchange', position='Body'),
  exchangeType: string(name='ExchangeType', example='DIRECT', position='Body'),
  instanceId: string(name='InstanceId', example='amqp-cn-v0h1kb9nu***', position='Body'),
  internal: boolean(name='Internal', example='false', position='Body'),
  virtualHost: string(name='VirtualHost', example='test', position='Body'),
}

model CreateExchangeResponseBody = {
  requestId?: string(name='RequestId', example='021788F6-E50C-4BD6-9F80-66B0A19A6***'),
}

model CreateExchangeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateExchangeResponseBody(name='body'),
}

async function createExchange(request: CreateExchangeRequest): CreateExchangeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateExchange', 'POST', '/', 'json', true, 'form', request);
}

model CreateInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  autoRenew?: boolean(name='AutoRenew', example='AutoRenewal', position='Query'),
  autoRenewPeriod?: int32(name='AutoRenewPeriod', example='1', position='Query'),
  clientToken?: string(name='ClientToken', example='c2c5d1274axxxxxxxx', position='Query'),
  instanceType: string(name='InstanceType', example='professional', position='Query'),
  maxConnections?: int32(name='MaxConnections', example='50000', position='Query'),
  maxEipTps?: long(name='MaxEipTps', example='128', position='Query'),
  maxPrivateTps: long(name='MaxPrivateTps', example='1000', position='Query'),
  paymentType: string(name='PaymentType', example='Subscription', position='Query'),
  period?: int32(name='Period', example='1', position='Query'),
  periodCycle?: string(name='PeriodCycle', example='Month', position='Query'),
  queueCapacity: int32(name='QueueCapacity', example='1000', position='Query'),
  storageSize?: int32(name='StorageSize', example='7', position='Query'),
  supportEip?: boolean(name='SupportEip', example='true', position='Query'),
  supportTracing?: boolean(name='SupportTracing', example='true', position='Query'),
  tracingStorageTime?: int32(name='TracingStorageTime', example='3', position='Query'),
}

model CreateInstanceResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: any(name='Data', example='amqp-cn-xxxxx'),
  message?: string(name='Message', example='xxx failed,xxxx'),
  requestId?: string(name='RequestId', example='CCBB1225-C392-480E-8C7F-D09AB2CD2***'),
  success?: boolean(name='Success', example='true'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateInstanceResponseBody(name='body'),
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreateQueueRequest {
  regionId: string(name='RegionId', position='Host'),
  autoDeleteState?: boolean(name='AutoDeleteState', example='false', position='Body'),
  autoExpireState?: long(name='AutoExpireState', example='10000', position='Body'),
  deadLetterExchange?: string(name='DeadLetterExchange', example='DLExchange', position='Body'),
  deadLetterRoutingKey?: string(name='DeadLetterRoutingKey', example='test.dl', position='Body'),
  exclusiveState?: boolean(name='ExclusiveState', example='false', position='Body'),
  instanceId: string(name='InstanceId', example='amqp-cn-v0h1kb9nu***', position='Body'),
  maxLength?: long(name='MaxLength', example='1000', position='Body'),
  maximumPriority?: int32(name='MaximumPriority', example='10', position='Body'),
  messageTTL?: long(name='MessageTTL', example='1000', position='Body'),
  queueName: string(name='QueueName', example='DemoQueue', position='Body'),
  virtualHost: string(name='VirtualHost', example='test', position='Body'),
}

model CreateQueueResponseBody = {
  requestId?: string(name='RequestId', example='59B52E2C-0B8E-44EC-A314-D0314A50***'),
}

model CreateQueueResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateQueueResponseBody(name='body'),
}

async function createQueue(request: CreateQueueRequest): CreateQueueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateQueue', 'POST', '/', 'json', true, 'form', request);
}

model CreateVirtualHostRequest {
  regionId: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', example='amqp-cn-v0h1kb9n***', position='Body'),
  virtualHost: string(name='VirtualHost', example='Demo', position='Body'),
}

model CreateVirtualHostResponseBody = {
  requestId?: string(name='RequestId', example='628705FD-03EE-4ABE-BB21-E1672960***'),
}

model CreateVirtualHostResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateVirtualHostResponseBody(name='body'),
}

async function createVirtualHost(request: CreateVirtualHostRequest): CreateVirtualHostResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVirtualHost', 'POST', '/', 'json', true, 'form', request);
}

model DeleteAccountRequest {
  regionId?: string(name='RegionId', position='Host'),
  createTimestamp: long(name='CreateTimestamp', example='1671175303522', position='Query'),
  userName: string(name='UserName', example='MjphbXFwLWNuLXVxbTJ5cjc3djAwMzpMVEFJNXQ4YmVNbVZNMWVSWnRFSjZ2Zm1=', position='Query'),
}

model DeleteAccountResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='021788F6-E50C-4BD6-9F80-66B0A19A6***'),
  success?: boolean(name='Success', example='true'),
}

model DeleteAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAccountResponseBody(name='body'),
}

async function deleteAccount(request: DeleteAccountRequest): DeleteAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAccount', 'POST', '/', 'json', false, 'json', request);
}

model DeleteBindingRequest {
  regionId: string(name='RegionId', position='Host'),
  bindingKey: string(name='BindingKey', example='.test.', position='Body'),
  bindingType: string(name='BindingType', example='QUEUE', position='Body'),
  destinationName: string(name='DestinationName', example='DemoQueue', position='Body'),
  instanceId: string(name='InstanceId', example='amqp-cn-v0h1kb9nu***', position='Body'),
  sourceExchange: string(name='SourceExchange', example='NormalEX', position='Body'),
  virtualHost: string(name='VirtualHost', example='test', position='Body'),
}

model DeleteBindingResponseBody = {
  requestId?: string(name='RequestId', example='021788F6-E50C-4BD6-9F80-66B0A19A6***'),
}

model DeleteBindingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteBindingResponseBody(name='body'),
}

async function deleteBinding(request: DeleteBindingRequest): DeleteBindingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteBinding', 'POST', '/', 'json', true, 'form', request);
}

model DeleteExchangeRequest {
  regionId: string(name='RegionId', example='cn-hangzhou', position='Host'),
  exchangeName: string(name='ExchangeName', example='DemoExchange', position='Body'),
  instanceId: string(name='InstanceId', example='amqp-cn-v0h1kb9nu***', position='Body'),
  virtualHost: string(name='VirtualHost', example='test', position='Body'),
}

model DeleteExchangeResponseBody = {
  requestId?: string(name='RequestId', example='6961FFB8-6358-4EDC-9E3C-4A0C56CE6***'),
}

model DeleteExchangeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteExchangeResponseBody(name='body'),
}

async function deleteExchange(request: DeleteExchangeRequest): DeleteExchangeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteExchange', 'POST', '/', 'json', true, 'form', request);
}

model DeleteQueueRequest {
  regionId: string(name='RegionId', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', example='1880770869023***', position='Body'),
  queueName: string(name='QueueName', example='DemoQueue', position='Body'),
  virtualHost: string(name='VirtualHost', example='Test', position='Body'),
}

model DeleteQueueResponseBody = {
  requestId?: string(name='RequestId', example='92385FD2-624A-48C9-8FB5-753F2AFA***'),
}

model DeleteQueueResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteQueueResponseBody(name='body'),
}

async function deleteQueue(request: DeleteQueueRequest): DeleteQueueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteQueue', 'POST', '/', 'json', true, 'form', request);
}

model DeleteVirtualHostRequest {
  regionId: string(name='RegionId', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', example='amqp-cn-v0h1kb9nu***', position='Body'),
  virtualHost: string(name='VirtualHost', example='test', position='Body'),
}

model DeleteVirtualHostResponseBody = {
  requestId?: string(name='RequestId', example='4311050D-BD63-48F9-822B-947A75A1***'),
}

model DeleteVirtualHostResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteVirtualHostResponseBody(name='body'),
}

async function deleteVirtualHost(request: DeleteVirtualHostRequest): DeleteVirtualHostResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVirtualHost', 'POST', '/', 'json', true, 'form', request);
}

model GetMetadataAmountRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  instanceId?: string(name='InstanceId', example='amqp-cn-v0h1kb9n***', position='Query'),
}

model GetMetadataAmountResponseBody = {
  data?: {
    currentExchanges?: int32(name='CurrentExchanges', example='7'),
    currentQueues?: int32(name='CurrentQueues', example='1'),
    currentVirtualHosts?: int32(name='CurrentVirtualHosts', example='1'),
    maxExchanges?: int32(name='MaxExchanges', example='20'),
    maxQueues?: int32(name='MaxQueues', example='20'),
    maxVirtualHosts?: int32(name='MaxVirtualHosts', example='10'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='B75ACF23-2BEB-44AC-A0B6-AE14EDCA***'),
}

model GetMetadataAmountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetadataAmountResponseBody(name='body'),
}

async function getMetadataAmount(request: GetMetadataAmountRequest): GetMetadataAmountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMetadataAmount', 'GET', '/', 'json', false, 'json', request);
}

model ListAccountsRequest {
  regionId: string(name='RegionId', position='Host'),
  instanceId?: string(name='InstanceId', example='amqp-cn-20p****04', position='Query'),
}

model ListAccountsResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: map[string][ DataValue   ](name='Data'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='549A5A97-FE61-5A23-8126-3A11929C1EC4'),
  success?: boolean(name='Success', example='True'),
}

model ListAccountsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAccountsResponseBody(name='body'),
}

async function listAccounts(request: ListAccountsRequest): ListAccountsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAccounts', 'POST', '/', 'json', false, 'json', request);
}

model ListBindingsRequest {
  regionId: string(name='RegionId', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', example='1880770869023***', position='Query'),
  maxResults: int32(name='MaxResults', example='1', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a****', minLength=1, position='Query'),
  virtualHost: string(name='VirtualHost', example='Test', position='Query'),
}

model ListBindingsResponseBody = {
  data?: {
    bindings?: [ 
      {
        argument?: string(name='Argument', example='all'),
        bindingKey?: string(name='BindingKey', example='amq.test'),
        bindingType?: string(name='BindingType', example='QUEUE'),
        destinationName?: string(name='DestinationName', example='QueueTest'),
        sourceExchange?: string(name='SourceExchange', example='test'),
      }
    ](name='Bindings'),
    maxResults?: int32(name='MaxResults', example='1'),
    nextToken?: string(name='NextToken', example='caebacccb2be03f84eb48b699f0a****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='E0A71208-3E87-4732-81CC-B18E0B4B1***'),
}

model ListBindingsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListBindingsResponseBody(name='body'),
}

async function listBindings(request: ListBindingsRequest): ListBindingsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListBindings', 'GET', '/', 'json', false, 'json', request);
}

model ListDownStreamBindingsRequest {
  regionId: string(name='RegionId', example='cn-hangzhou', position='Host'),
  exchangeName: string(name='ExchangeName', example='test', position='Query'),
  instanceId: string(name='InstanceId', example='1880770869023***', position='Query'),
  maxResults: int32(name='MaxResults', example='1', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a****', position='Query'),
  virtualHost: string(name='VirtualHost', example='test', position='Query'),
}

model ListDownStreamBindingsResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    bindings?: [ 
      {
        argument?: string(name='Argument', example='test'),
        bindingKey?: string(name='BindingKey', example='amq.test'),
        bindingType?: string(name='BindingType', example='QUEUE'),
        destinationName?: string(name='DestinationName', example='QueueTest'),
        sourceExchange?: string(name='SourceExchange', example='test'),
      }
    ](name='Bindings'),
    maxResults?: int32(name='MaxResults', example='1'),
    nextToken?: string(name='NextToken', example='caebacccb2be03f84eb48b699f0a****'),
  }(name='Data'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='9C1E0502-0790-4FDB-8C96-6D5C8D9B7***'),
  success?: boolean(name='Success', example='true'),
}

model ListDownStreamBindingsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDownStreamBindingsResponseBody(name='body'),
}

async function listDownStreamBindings(request: ListDownStreamBindingsRequest): ListDownStreamBindingsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDownStreamBindings', 'GET', '/', 'json', false, 'json', request);
}

model ListExchangeUpStreamBindingsRequest {
  regionId: string(name='RegionId', example='cn-hangzhou', position='Host'),
  exchangeName: string(name='ExchangeName', example='test', position='Query'),
  instanceId: string(name='InstanceId', example='1880770869023***', position='Query'),
  maxResults: int32(name='MaxResults', example='1', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a****', position='Query'),
  virtualHost: string(name='VirtualHost', example='test', position='Query'),
}

model ListExchangeUpStreamBindingsResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    bindings?: [ 
      {
        argument?: string(name='Argument', example='all'),
        bindingKey?: string(name='BindingKey', example='amq.dle.test'),
        bindingType?: string(name='BindingType', example='EXCHANGE'),
        destinationName?: string(name='DestinationName', example='test'),
        sourceExchange?: string(name='SourceExchange', example='dle'),
      }
    ](name='Bindings'),
    maxResults?: int32(name='MaxResults', example='1'),
    nextToken?: string(name='NextToken', example='caebacccb2be03f84eb48b699f0a****'),
  }(name='Data'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='2DCCCE88-BC82-4A4F-AF5E-9A759672B***'),
  success?: boolean(name='Success', example='true'),
}

model ListExchangeUpStreamBindingsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListExchangeUpStreamBindingsResponseBody(name='body'),
}

async function listExchangeUpStreamBindings(request: ListExchangeUpStreamBindingsRequest): ListExchangeUpStreamBindingsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListExchangeUpStreamBindings', 'GET', '/', 'json', false, 'json', request);
}

model ListExchangesRequest {
  regionId: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', example='amqp-cn-7pp2mwbc****', position='Query'),
  maxResults: int32(name='MaxResults', example='1', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', example='AAAANDQBYW1xcC1jbi03cHAybXdiY3AwMGEBdmhvc3QBAXNkZndhYWJhATE2NDkzMTM4OTU5NDIB4o3z1pPwWzk4aYuiRffi8R6-****', position='Query'),
  virtualHost: string(name='VirtualHost', example='test', position='Query'),
}

model ListExchangesResponseBody = {
  data?: {
    exchanges?: [ 
      {
        attributes?: map[string]any(name='Attributes', example='test'),
        autoDeleteState?: boolean(name='AutoDeleteState', example='false'),
        createTime?: long(name='CreateTime', example='1580886216000'),
        exchangeType?: string(name='ExchangeType', example='DIRECT'),
        name?: string(name='Name', example='amq.direct'),
        vHostName?: string(name='VHostName', example='test'),
      }
    ](name='Exchanges', description='Exchangeã€‚'),
    maxResults?: int32(name='MaxResults', example='1'),
    nextToken?: string(name='NextToken', example='AAAANDQBYW1xcC1jbi03cHAybXdiY3AwMGEBdmhvc3QBAXNkZndhYWJhATE2NDkzMTM4OTU5NDIB4o3z1pPwWzk4aYuiRffi8R6-****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='FEBA5E0C-50D0-4FA6-A794-4901E5465***'),
}

model ListExchangesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListExchangesResponseBody(name='body'),
}

async function listExchanges(request: ListExchangesRequest): ListExchangesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListExchanges', 'GET', '/', 'json', false, 'json', request);
}

model ListInstancesRequest {
  regionId: string(name='RegionId', example='cn-hangzhou', position='Host'),
  maxResults: int32(name='MaxResults', example='1', minimum=1, maximum=200, position='Query'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a****', position='Query'),
}

model ListInstancesResponseBody = {
  data?: {
    instances?: [ 
      {
        autoRenewInstance?: boolean(name='AutoRenewInstance', example='false'),
        classicEndpoint?: string(name='ClassicEndpoint', example='amqp-cn-st21x7kv****.not-support'),
        expireTime?: long(name='ExpireTime', example='1651507200000'),
        instanceId?: string(name='InstanceId', example='amqp-cn-st21x7kv****'),
        instanceName?: string(name='InstanceName', example='amqp-cn-st21x7kv****'),
        instanceType?: string(name='InstanceType', example='professional'),
        maxEipTps?: int32(name='MaxEipTps', example='24832'),
        maxQueue?: int32(name='MaxQueue', example='50'),
        maxTps?: int32(name='MaxTps', example='5000'),
        maxVhost?: int32(name='MaxVhost', example='50'),
        orderCreateTime?: long(name='OrderCreateTime', example='1572441939000'),
        orderType?: string(name='OrderType', example='PRE_PAID'),
        privateEndpoint?: string(name='PrivateEndpoint', example='amqp-cn-st21x7kv****.mq-amqp.cn-hangzhou-a.aliyuncs.com'),
        publicEndpoint?: string(name='PublicEndpoint', example='amqp-cn-st21x7kv****.mq-amqp.cn-hangzhou-a.aliyuncs.com'),
        status?: string(name='Status', example='SERVING'),
        storageSize?: int32(name='StorageSize', example='200'),
        supportEIP?: boolean(name='SupportEIP', example='true'),
        tags?: [ 
          {
            key?: string(name='Key'),
            value?: string(name='Value'),
          }
        ](name='Tags'),
      }
    ](name='Instances'),
    maxResults?: int32(name='MaxResults', example='1'),
    nextToken?: string(name='NextToken', example='caebacccb2be03f84eb48b699f0a****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='CCBB1225-C392-480E-8C7F-D09AB2CD2***'),
}

model ListInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstancesResponseBody(name='body'),
}

async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstances', 'GET', '/', 'json', false, 'json', request);
}

model ListQueueConsumersRequest {
  regionId: string(name='RegionId', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', example='188077086902***', position='Query'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a****', position='Query'),
  queryCount?: int32(name='QueryCount', example='1', minimum=1, maximum=100, position='Query'),
  queue: string(name='Queue', example='queue-rabbit-springboot-advance5', position='Query'),
  virtualHost: string(name='VirtualHost', example='test', position='Query'),
}

model ListQueueConsumersResponseBody = {
  data?: {
    consumers?: [ 
      {
        consumerTag?: string(name='ConsumerTag', example='sgen-1'),
      }
    ](name='Consumers'),
    maxResults?: int32(name='MaxResults', example='1'),
    nextToken?: string(name='NextToken', example='caebacccb2be03f84eb48b699f0a****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='4409B7D5-E4EC-4EB5-804A-385DCDFCD***'),
}

model ListQueueConsumersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListQueueConsumersResponseBody(name='body'),
}

async function listQueueConsumers(request: ListQueueConsumersRequest): ListQueueConsumersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListQueueConsumers', 'GET', '/', 'json', false, 'json', request);
}

model ListQueueUpStreamBindingsRequest {
  regionId: string(name='RegionId', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', example='1880770869023***', position='Query'),
  maxResults: int32(name='MaxResults', example='1', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a****', position='Query'),
  queueName: string(name='QueueName', example='QueueTest', position='Query'),
  virtualHost: string(name='VirtualHost', example='test', position='Query'),
}

model ListQueueUpStreamBindingsResponseBody = {
  data?: {
    bindings?: [ 
      {
        argument?: string(name='Argument', example='all'),
        bindingKey?: string(name='BindingKey', example='amq.test'),
        bindingType?: string(name='BindingType', example='QUEUE'),
        destinationName?: string(name='DestinationName', example='QueueTest'),
        sourceExchange?: string(name='SourceExchange', example='test'),
      }
    ](name='Bindings'),
    maxResults?: string(name='MaxResults', example='1'),
    nextToken?: string(name='NextToken', example='caebacccb2be03f84eb48b699f0a****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='8BFB1C9D-08A2-4859-A47C-403C9EFA2***'),
}

model ListQueueUpStreamBindingsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListQueueUpStreamBindingsResponseBody(name='body'),
}

async function listQueueUpStreamBindings(request: ListQueueUpStreamBindingsRequest): ListQueueUpStreamBindingsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListQueueUpStreamBindings', 'GET', '/', 'json', false, 'json', request);
}

model ListQueuesRequest {
  regionId: string(name='RegionId', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', example='1880770869023***', position='Query'),
  maxResults: int32(name='MaxResults', example='1', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a****', minLength=1, position='Query'),
  virtualHost: string(name='VirtualHost', example='test', position='Query'),
}

model ListQueuesResponseBody = {
  data?: {
    maxResults?: int32(name='MaxResults', example='1'),
    nextToken?: string(name='NextToken', example='caebacccb2be03f84eb48b699f0a****'),
    queues?: [ 
      {
        attributes?: map[string]any(name='Attributes', example='test'),
        autoDeleteState?: boolean(name='AutoDeleteState', example='false'),
        createTime?: long(name='CreateTime', example='1580887085240'),
        exclusiveState?: boolean(name='ExclusiveState', example='false'),
        lastConsumeTime?: long(name='LastConsumeTime', example='1680887085240'),
        name?: string(name='Name', example='QueueTest'),
        ownerId?: string(name='OwnerId', example='1880770869023***'),
        vHostName?: string(name='VHostName', example='test'),
      }
    ](name='Queues', description='Queueã€‚'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='CE811989-9F02-42CE-97A6-2239CB5C2***'),
}

model ListQueuesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListQueuesResponseBody(name='body'),
}

async function listQueues(request: ListQueuesRequest): ListQueuesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListQueues', 'GET', '/', 'json', false, 'json', request);
}

model ListVirtualHostsRequest {
  regionId: string(name='RegionId', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', example='1880770869023***', position='Query'),
  maxResults: int32(name='MaxResults', example='2', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a****', position='Query'),
}

model ListVirtualHostsResponseBody = {
  data?: {
    maxResults?: int32(name='MaxResults', example='2'),
    nextToken?: string(name='NextToken', example='caebacccb2be03f84eb48b699f0a****'),
    virtualHosts?: [ 
      {
        name?: string(name='Name', example='test'),
      }
    ](name='VirtualHosts', description='Vhostã€‚'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='EF4DB019-DA4A-4CE3-B220-223BBC93F***'),
}

model ListVirtualHostsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListVirtualHostsResponseBody(name='body'),
}

async function listVirtualHosts(request: ListVirtualHostsRequest): ListVirtualHostsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVirtualHosts', 'GET', '/', 'json', false, 'json', request);
}

model UpdateInstanceNameRequest {
  regionId: string(name='RegionId', example='cn-hangzhou', position='Host'),
  instanceId: string(name='InstanceId', example='amqp-cn-zvp2ajsj****', position='Query'),
  instanceName: string(name='InstanceName', example='amqp-cn-ZVp2ajsj****', position='Query'),
}

model UpdateInstanceNameResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', example='true'),
  message?: string(name='Message', example='InstanceNotExist'),
  requestId?: string(name='RequestId', example='6DC68EC9-0E76-5435-B8C0-FF9492B4****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateInstanceNameResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateInstanceNameResponseBody(name='body'),
}

async function updateInstanceName(request: UpdateInstanceNameRequest): UpdateInstanceNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateInstanceName', 'POST', '/', 'json', false, 'json', request);
}

model DataValue = {
  masterUid?: long(name='masterUid', example='1565*******973901'),
  cInstanceId?: string(name='cInstanceId', example='amqp-cn-uqm******03'),
  accessKey?: string(name='accessKey', example='LTAI5***********eRZtEJ6vfo'),
  userName?: string(name='userName', example='MjphbXFwLWNuLXVxbTJ6cjc2djAwMzpMVEFJNX*******ZNMWVSWnRFSjZ2Zm8='),
  password?: string(name='password', example='OUYwQzM2QjZBRkUxNDRFM***************MzZCNzdDQzoxNjcxNDMwMzkyODI1'),
  deleted?: long(name='deleted', example='1671175303522'),
  createTimestamp?: long(name='createTimestamp', example='1671175303522'),
}

