/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('amqp-open', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model DataValue = {
  masterUid?: long(name='masterUid', example='1565*******973901'),
  cInstanceId?: string(name='cInstanceId', example='amqp-cn-uqm******03'),
  accessKey?: string(name='accessKey', example='LTAI5***********eRZtEJ6vfo'),
  userName?: string(name='userName', example='MjphbXFwLWNuLXVxbTJ6cjc2djAwMzpMVEFJNX*******ZNMWVSWnRFSjZ2Zm8='),
  password?: string(name='password', example='OUYwQzM2QjZBRkUxNDRFM***************MzZCNzdDQzoxNjcxNDMwMzkyODI1'),
  deleted?: long(name='deleted', example='1671175303522'),
  createTimestamp?: long(name='createTimestamp', example='1671175303522'),
}

model CreateAccountRequest {
  accountAccessKey?: string(name='accountAccessKey', example='LTAI5t8be*******tEJ6vfo'),
  createTimestamp?: long(name='createTimestamp', example='1671175303522'),
  instanceId?: string(name='instanceId', example='amqp-cn-*********'),
  secretSign?: string(name='secretSign', example='4c1a6367ce4c4255e9617326f9133ac6359533f6'),
  signature?: string(name='signature', example='22c2d7d1769cb53c5a6d9213248e2de524c4f799'),
  userName?: string(name='userName', example='MjphbXFwLWNuLXp***********************Q4YmVNbVZNMWVSWnRFSjZ2Zm8='),
}

model CreateAccountResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    accessKey?: string(name='AccessKey', description='AccessKey IDã€‚', example='LTAI5***********eRZtEJ6vfo'),
    createTimeStamp?: long(name='CreateTimeStamp', example='1671175303522'),
    instanceId?: string(name='InstanceId', example='amqp-cn-*********'),
    masterUId?: long(name='MasterUId', example='15657*********01'),
    password?: string(name='Password', example='NEMxQTYzNjdDRTVDNDI1NUU5NjE3**************1MzNGODoxNjcxMTc1MzEzNTIy'),
    userName?: string(name='UserName', example='MjphbXFwLWNuLXVxbTJ6cjc2djAwMzpMVEFJNX*******ZNMWVSWnRFSjZ2Zm8='),
  }(name='Data'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='92385FD2-624A-48C9-8FB5-753F2AFA***'),
  success?: boolean(name='Success', example='true'),
}

model CreateAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAccountResponseBody(name='body'),
}

async function createAccountWithOptions(request: CreateAccountRequest, runtime: Util.RuntimeOptions): CreateAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountAccessKey)) {
    query['accountAccessKey'] = request.accountAccessKey;
  }
  if (!Util.isUnset(request.createTimestamp)) {
    query['createTimestamp'] = request.createTimestamp;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['instanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.secretSign)) {
    query['secretSign'] = request.secretSign;
  }
  if (!Util.isUnset(request.signature)) {
    query['signature'] = request.signature;
  }
  if (!Util.isUnset(request.userName)) {
    query['userName'] = request.userName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAccount',
    version = '2019-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAccount(request: CreateAccountRequest): CreateAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAccountWithOptions(request, runtime);
}

model CreateBindingRequest {
  argument?: string(name='Argument', example='x-match:all;type:report;format:pdf'),
  bindingKey?: string(name='BindingKey', example='.test'),
  bindingType?: string(name='BindingType', example='0'),
  destinationName?: string(name='DestinationName', example='DemoQueue'),
  instanceId?: string(name='InstanceId', example='amqp-cn-v0h1kb9nu***'),
  sourceExchange?: string(name='SourceExchange', example='NormalEX'),
  virtualHost?: string(name='VirtualHost', example='test'),
}

model CreateBindingResponseBody = {
  requestId?: string(name='RequestId', example='09768C14-E51C-4F4A-8077-30810032C***'),
}

model CreateBindingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateBindingResponseBody(name='body'),
}

async function createBindingWithOptions(request: CreateBindingRequest, runtime: Util.RuntimeOptions): CreateBindingResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.argument)) {
    body['Argument'] = request.argument;
  }
  if (!Util.isUnset(request.bindingKey)) {
    body['BindingKey'] = request.bindingKey;
  }
  if (!Util.isUnset(request.bindingType)) {
    body['BindingType'] = request.bindingType;
  }
  if (!Util.isUnset(request.destinationName)) {
    body['DestinationName'] = request.destinationName;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.sourceExchange)) {
    body['SourceExchange'] = request.sourceExchange;
  }
  if (!Util.isUnset(request.virtualHost)) {
    body['VirtualHost'] = request.virtualHost;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateBinding',
    version = '2019-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createBinding(request: CreateBindingRequest): CreateBindingResponse {
  var runtime = new Util.RuntimeOptions{};
  return createBindingWithOptions(request, runtime);
}

model CreateExchangeRequest {
  alternateExchange?: string(name='AlternateExchange', example='DemoAE'),
  autoDeleteState?: boolean(name='AutoDeleteState', example='false'),
  exchangeName?: string(name='ExchangeName', example='DemoExchange'),
  exchangeType?: string(name='ExchangeType', example='DIRECT'),
  instanceId?: string(name='InstanceId', example='amqp-cn-v0h1kb9nu***'),
  internal?: boolean(name='Internal', example='false'),
  virtualHost?: string(name='VirtualHost', example='test'),
}

model CreateExchangeResponseBody = {
  requestId?: string(name='RequestId', example='021788F6-E50C-4BD6-9F80-66B0A19A6***'),
}

model CreateExchangeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateExchangeResponseBody(name='body'),
}

async function createExchangeWithOptions(request: CreateExchangeRequest, runtime: Util.RuntimeOptions): CreateExchangeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alternateExchange)) {
    body['AlternateExchange'] = request.alternateExchange;
  }
  if (!Util.isUnset(request.autoDeleteState)) {
    body['AutoDeleteState'] = request.autoDeleteState;
  }
  if (!Util.isUnset(request.exchangeName)) {
    body['ExchangeName'] = request.exchangeName;
  }
  if (!Util.isUnset(request.exchangeType)) {
    body['ExchangeType'] = request.exchangeType;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.internal)) {
    body['Internal'] = request.internal;
  }
  if (!Util.isUnset(request.virtualHost)) {
    body['VirtualHost'] = request.virtualHost;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateExchange',
    version = '2019-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createExchange(request: CreateExchangeRequest): CreateExchangeResponse {
  var runtime = new Util.RuntimeOptions{};
  return createExchangeWithOptions(request, runtime);
}

model CreateQueueRequest {
  autoDeleteState?: boolean(name='AutoDeleteState', example='false'),
  autoExpireState?: long(name='AutoExpireState', example='10000'),
  deadLetterExchange?: string(name='DeadLetterExchange', example='DLExchange'),
  deadLetterRoutingKey?: string(name='DeadLetterRoutingKey', example='test.dl'),
  exclusiveState?: boolean(name='ExclusiveState', example='false'),
  instanceId?: string(name='InstanceId', example='amqp-cn-v0h1kb9nu***'),
  maxLength?: long(name='MaxLength', example='1000'),
  maximumPriority?: int32(name='MaximumPriority', example='10'),
  messageTTL?: long(name='MessageTTL', example='1000'),
  queueName?: string(name='QueueName', example='DemoQueue'),
  virtualHost?: string(name='VirtualHost', example='test'),
}

model CreateQueueResponseBody = {
  requestId?: string(name='RequestId', example='59B52E2C-0B8E-44EC-A314-D0314A50***'),
}

model CreateQueueResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateQueueResponseBody(name='body'),
}

async function createQueueWithOptions(request: CreateQueueRequest, runtime: Util.RuntimeOptions): CreateQueueResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.autoDeleteState)) {
    body['AutoDeleteState'] = request.autoDeleteState;
  }
  if (!Util.isUnset(request.autoExpireState)) {
    body['AutoExpireState'] = request.autoExpireState;
  }
  if (!Util.isUnset(request.deadLetterExchange)) {
    body['DeadLetterExchange'] = request.deadLetterExchange;
  }
  if (!Util.isUnset(request.deadLetterRoutingKey)) {
    body['DeadLetterRoutingKey'] = request.deadLetterRoutingKey;
  }
  if (!Util.isUnset(request.exclusiveState)) {
    body['ExclusiveState'] = request.exclusiveState;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.maxLength)) {
    body['MaxLength'] = request.maxLength;
  }
  if (!Util.isUnset(request.maximumPriority)) {
    body['MaximumPriority'] = request.maximumPriority;
  }
  if (!Util.isUnset(request.messageTTL)) {
    body['MessageTTL'] = request.messageTTL;
  }
  if (!Util.isUnset(request.queueName)) {
    body['QueueName'] = request.queueName;
  }
  if (!Util.isUnset(request.virtualHost)) {
    body['VirtualHost'] = request.virtualHost;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateQueue',
    version = '2019-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createQueue(request: CreateQueueRequest): CreateQueueResponse {
  var runtime = new Util.RuntimeOptions{};
  return createQueueWithOptions(request, runtime);
}

model CreateVirtualHostRequest {
  instanceId?: string(name='InstanceId', example='amqp-cn-v0h1kb9n***'),
  virtualHost?: string(name='VirtualHost', example='Demo'),
}

model CreateVirtualHostResponseBody = {
  requestId?: string(name='RequestId', example='628705FD-03EE-4ABE-BB21-E1672960***'),
}

model CreateVirtualHostResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateVirtualHostResponseBody(name='body'),
}

async function createVirtualHostWithOptions(request: CreateVirtualHostRequest, runtime: Util.RuntimeOptions): CreateVirtualHostResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.virtualHost)) {
    body['VirtualHost'] = request.virtualHost;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateVirtualHost',
    version = '2019-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createVirtualHost(request: CreateVirtualHostRequest): CreateVirtualHostResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVirtualHostWithOptions(request, runtime);
}

model DeleteAccountRequest {
  createTimestamp?: long(name='CreateTimestamp', example='1671175303522'),
  userName?: string(name='UserName', example='MjphbXFwLWNuLXVxbTJ5cjc3djAwMzpMVEFJNXQ4YmVNbVZNMWVSWnRFSjZ2Zm1='),
}

model DeleteAccountResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='021788F6-E50C-4BD6-9F80-66B0A19A6***'),
  success?: boolean(name='Success', example='true'),
}

model DeleteAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAccountResponseBody(name='body'),
}

async function deleteAccountWithOptions(request: DeleteAccountRequest, runtime: Util.RuntimeOptions): DeleteAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.createTimestamp)) {
    query['CreateTimestamp'] = request.createTimestamp;
  }
  if (!Util.isUnset(request.userName)) {
    query['UserName'] = request.userName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAccount',
    version = '2019-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAccount(request: DeleteAccountRequest): DeleteAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAccountWithOptions(request, runtime);
}

model DeleteBindingRequest {
  bindingKey?: string(name='BindingKey', example='.test.'),
  bindingType?: string(name='BindingType', example='QUEUE'),
  destinationName?: string(name='DestinationName', example='DemoQueue'),
  instanceId?: string(name='InstanceId', example='amqp-cn-v0h1kb9nu***'),
  sourceExchange?: string(name='SourceExchange', example='NormalEX'),
  virtualHost?: string(name='VirtualHost', example='test'),
}

model DeleteBindingResponseBody = {
  requestId?: string(name='RequestId', example='021788F6-E50C-4BD6-9F80-66B0A19A6***'),
}

model DeleteBindingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteBindingResponseBody(name='body'),
}

async function deleteBindingWithOptions(request: DeleteBindingRequest, runtime: Util.RuntimeOptions): DeleteBindingResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.bindingKey)) {
    body['BindingKey'] = request.bindingKey;
  }
  if (!Util.isUnset(request.bindingType)) {
    body['BindingType'] = request.bindingType;
  }
  if (!Util.isUnset(request.destinationName)) {
    body['DestinationName'] = request.destinationName;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.sourceExchange)) {
    body['SourceExchange'] = request.sourceExchange;
  }
  if (!Util.isUnset(request.virtualHost)) {
    body['VirtualHost'] = request.virtualHost;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteBinding',
    version = '2019-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteBinding(request: DeleteBindingRequest): DeleteBindingResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBindingWithOptions(request, runtime);
}

model DeleteExchangeRequest {
  exchangeName?: string(name='ExchangeName', example='DemoExchange'),
  instanceId?: string(name='InstanceId', example='amqp-cn-v0h1kb9nu***'),
  virtualHost?: string(name='VirtualHost', example='test'),
}

model DeleteExchangeResponseBody = {
  requestId?: string(name='RequestId', example='6961FFB8-6358-4EDC-9E3C-4A0C56CE6***'),
}

model DeleteExchangeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteExchangeResponseBody(name='body'),
}

async function deleteExchangeWithOptions(request: DeleteExchangeRequest, runtime: Util.RuntimeOptions): DeleteExchangeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.exchangeName)) {
    body['ExchangeName'] = request.exchangeName;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.virtualHost)) {
    body['VirtualHost'] = request.virtualHost;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteExchange',
    version = '2019-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteExchange(request: DeleteExchangeRequest): DeleteExchangeResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteExchangeWithOptions(request, runtime);
}

model DeleteQueueRequest {
  instanceId?: string(name='InstanceId', example='1880770869023***'),
  queueName?: string(name='QueueName', example='DemoQueue'),
  virtualHost?: string(name='VirtualHost', example='Test'),
}

model DeleteQueueResponseBody = {
  requestId?: string(name='RequestId', example='92385FD2-624A-48C9-8FB5-753F2AFA***'),
}

model DeleteQueueResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteQueueResponseBody(name='body'),
}

async function deleteQueueWithOptions(request: DeleteQueueRequest, runtime: Util.RuntimeOptions): DeleteQueueResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.queueName)) {
    body['QueueName'] = request.queueName;
  }
  if (!Util.isUnset(request.virtualHost)) {
    body['VirtualHost'] = request.virtualHost;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteQueue',
    version = '2019-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteQueue(request: DeleteQueueRequest): DeleteQueueResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteQueueWithOptions(request, runtime);
}

model DeleteVirtualHostRequest {
  instanceId?: string(name='InstanceId', example='amqp-cn-v0h1kb9nu***'),
  virtualHost?: string(name='VirtualHost', example='test'),
}

model DeleteVirtualHostResponseBody = {
  requestId?: string(name='RequestId', example='4311050D-BD63-48F9-822B-947A75A1***'),
}

model DeleteVirtualHostResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteVirtualHostResponseBody(name='body'),
}

async function deleteVirtualHostWithOptions(request: DeleteVirtualHostRequest, runtime: Util.RuntimeOptions): DeleteVirtualHostResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.virtualHost)) {
    body['VirtualHost'] = request.virtualHost;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteVirtualHost',
    version = '2019-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteVirtualHost(request: DeleteVirtualHostRequest): DeleteVirtualHostResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVirtualHostWithOptions(request, runtime);
}

model GetMetadataAmountRequest {
  instanceId?: string(name='InstanceId', example='amqp-cn-v0h1kb9n***'),
}

model GetMetadataAmountResponseBody = {
  data?: {
    currentExchanges?: int32(name='CurrentExchanges', example='7'),
    currentQueues?: int32(name='CurrentQueues', example='1'),
    currentVirtualHosts?: int32(name='CurrentVirtualHosts', example='1'),
    maxExchanges?: int32(name='MaxExchanges', example='20'),
    maxQueues?: int32(name='MaxQueues', example='20'),
    maxVirtualHosts?: int32(name='MaxVirtualHosts', example='10'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='B75ACF23-2BEB-44AC-A0B6-AE14EDCA***'),
}

model GetMetadataAmountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetadataAmountResponseBody(name='body'),
}

async function getMetadataAmountWithOptions(request: GetMetadataAmountRequest, runtime: Util.RuntimeOptions): GetMetadataAmountResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetadataAmount',
    version = '2019-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMetadataAmount(request: GetMetadataAmountRequest): GetMetadataAmountResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetadataAmountWithOptions(request, runtime);
}

model ListAccountsRequest {
  instanceId?: string(name='InstanceId', example='amqp-cn-20p****04'),
}

model ListAccountsResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: map[string][ DataValue   ](name='Data'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='549A5A97-FE61-5A23-8126-3A11929C1EC4'),
  success?: boolean(name='Success', example='True'),
}

model ListAccountsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAccountsResponseBody(name='body'),
}

async function listAccountsWithOptions(request: ListAccountsRequest, runtime: Util.RuntimeOptions): ListAccountsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAccounts',
    version = '2019-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAccounts(request: ListAccountsRequest): ListAccountsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAccountsWithOptions(request, runtime);
}

model ListBindingsRequest {
  instanceId?: string(name='InstanceId', example='1880770869023***'),
  maxResults?: int32(name='MaxResults', example='1'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a****'),
  virtualHost?: string(name='VirtualHost', example='Test'),
}

model ListBindingsResponseBody = {
  data?: {
    bindings?: [ 
      {
        argument?: string(name='Argument', example='all'),
        bindingKey?: string(name='BindingKey', example='amq.test'),
        bindingType?: string(name='BindingType', example='QUEUE'),
        destinationName?: string(name='DestinationName', example='QueueTest'),
        sourceExchange?: string(name='SourceExchange', example='test'),
      }
    ](name='Bindings'),
    maxResults?: int32(name='MaxResults', example='1'),
    nextToken?: string(name='NextToken', example='caebacccb2be03f84eb48b699f0a****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='E0A71208-3E87-4732-81CC-B18E0B4B1***'),
}

model ListBindingsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListBindingsResponseBody(name='body'),
}

async function listBindingsWithOptions(request: ListBindingsRequest, runtime: Util.RuntimeOptions): ListBindingsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListBindings',
    version = '2019-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listBindings(request: ListBindingsRequest): ListBindingsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listBindingsWithOptions(request, runtime);
}

model ListDownStreamBindingsRequest {
  exchangeName?: string(name='ExchangeName', example='test'),
  instanceId?: string(name='InstanceId', example='1880770869023***'),
  maxResults?: int32(name='MaxResults', example='1'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a****'),
  virtualHost?: string(name='VirtualHost', example='test'),
}

model ListDownStreamBindingsResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    bindings?: [ 
      {
        argument?: string(name='Argument', example='test'),
        bindingKey?: string(name='BindingKey', example='amq.test'),
        bindingType?: string(name='BindingType', example='QUEUE'),
        destinationName?: string(name='DestinationName', example='QueueTest'),
        sourceExchange?: string(name='SourceExchange', example='test'),
      }
    ](name='Bindings'),
    maxResults?: int32(name='MaxResults', example='1'),
    nextToken?: string(name='NextToken', example='caebacccb2be03f84eb48b699f0a****'),
  }(name='Data'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='9C1E0502-0790-4FDB-8C96-6D5C8D9B7***'),
  success?: boolean(name='Success', example='true'),
}

model ListDownStreamBindingsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDownStreamBindingsResponseBody(name='body'),
}

async function listDownStreamBindingsWithOptions(request: ListDownStreamBindingsRequest, runtime: Util.RuntimeOptions): ListDownStreamBindingsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDownStreamBindings',
    version = '2019-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDownStreamBindings(request: ListDownStreamBindingsRequest): ListDownStreamBindingsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDownStreamBindingsWithOptions(request, runtime);
}

model ListExchangeUpStreamBindingsRequest {
  exchangeName?: string(name='ExchangeName', example='test'),
  instanceId?: string(name='InstanceId', example='1880770869023***'),
  maxResults?: int32(name='MaxResults', example='1'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a****'),
  virtualHost?: string(name='VirtualHost', example='test'),
}

model ListExchangeUpStreamBindingsResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    bindings?: [ 
      {
        argument?: string(name='Argument', example='all'),
        bindingKey?: string(name='BindingKey', example='amq.dle.test'),
        bindingType?: string(name='BindingType', example='EXCHANGE'),
        destinationName?: string(name='DestinationName', example='test'),
        sourceExchange?: string(name='SourceExchange', example='dle'),
      }
    ](name='Bindings'),
    maxResults?: int32(name='MaxResults', example='1'),
    nextToken?: string(name='NextToken', example='caebacccb2be03f84eb48b699f0a****'),
  }(name='Data'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='2DCCCE88-BC82-4A4F-AF5E-9A759672B***'),
  success?: boolean(name='Success', example='true'),
}

model ListExchangeUpStreamBindingsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListExchangeUpStreamBindingsResponseBody(name='body'),
}

async function listExchangeUpStreamBindingsWithOptions(request: ListExchangeUpStreamBindingsRequest, runtime: Util.RuntimeOptions): ListExchangeUpStreamBindingsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListExchangeUpStreamBindings',
    version = '2019-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listExchangeUpStreamBindings(request: ListExchangeUpStreamBindingsRequest): ListExchangeUpStreamBindingsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listExchangeUpStreamBindingsWithOptions(request, runtime);
}

model ListExchangesRequest {
  instanceId?: string(name='InstanceId', example='amqp-cn-7pp2mwbc****'),
  maxResults?: int32(name='MaxResults', example='1'),
  nextToken?: string(name='NextToken', example='AAAANDQBYW1xcC1jbi03cHAybXdiY3AwMGEBdmhvc3QBAXNkZndhYWJhATE2NDkzMTM4OTU5NDIB4o3z1pPwWzk4aYuiRffi8R6-****'),
  virtualHost?: string(name='VirtualHost', example='test'),
}

model ListExchangesResponseBody = {
  data?: {
    exchanges?: [ 
      {
        attributes?: map[string]any(name='Attributes', example='test'),
        autoDeleteState?: boolean(name='AutoDeleteState', example='false'),
        createTime?: long(name='CreateTime', example='1580886216000'),
        exchangeType?: string(name='ExchangeType', example='DIRECT'),
        name?: string(name='Name', example='amq.direct'),
        VHostName?: string(name='VHostName', example='test'),
      }
    ](name='Exchanges', description='Exchangeã€‚'),
    maxResults?: int32(name='MaxResults', example='1'),
    nextToken?: string(name='NextToken', example='AAAANDQBYW1xcC1jbi03cHAybXdiY3AwMGEBdmhvc3QBAXNkZndhYWJhATE2NDkzMTM4OTU5NDIB4o3z1pPwWzk4aYuiRffi8R6-****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='FEBA5E0C-50D0-4FA6-A794-4901E5465***'),
}

model ListExchangesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListExchangesResponseBody(name='body'),
}

async function listExchangesWithOptions(request: ListExchangesRequest, runtime: Util.RuntimeOptions): ListExchangesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListExchanges',
    version = '2019-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listExchanges(request: ListExchangesRequest): ListExchangesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listExchangesWithOptions(request, runtime);
}

model ListInstancesRequest {
  maxResults?: int32(name='MaxResults', example='1'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a****'),
}

model ListInstancesResponseBody = {
  data?: {
    instances?: [ 
      {
        autoRenewInstance?: boolean(name='AutoRenewInstance', example='false'),
        classicEndpoint?: string(name='ClassicEndpoint', example='amqp-cn-st21x7kv****.not-support'),
        expireTime?: long(name='ExpireTime', example='1651507200000'),
        instanceId?: string(name='InstanceId', example='amqp-cn-st21x7kv****'),
        instanceName?: string(name='InstanceName', example='amqp-cn-st21x7kv****'),
        instanceType?: string(name='InstanceType', example='professional'),
        maxEipTps?: int32(name='MaxEipTps', example='24832'),
        maxQueue?: int32(name='MaxQueue', example='50'),
        maxTps?: int32(name='MaxTps', example='5000'),
        maxVhost?: int32(name='MaxVhost', example='50'),
        orderCreateTime?: long(name='OrderCreateTime', example='1572441939000'),
        orderType?: string(name='OrderType', example='PRE_PAID'),
        privateEndpoint?: string(name='PrivateEndpoint', example='amqp-cn-st21x7kv****.mq-amqp.cn-hangzhou-a.aliyuncs.com'),
        publicEndpoint?: string(name='PublicEndpoint', example='amqp-cn-st21x7kv****.mq-amqp.cn-hangzhou-a.aliyuncs.com'),
        status?: string(name='Status', example='SERVING'),
        storageSize?: int32(name='StorageSize', example='200'),
        supportEIP?: boolean(name='SupportEIP', example='true'),
      }
    ](name='Instances'),
    maxResults?: int32(name='MaxResults', example='1'),
    nextToken?: string(name='NextToken', example='caebacccb2be03f84eb48b699f0a****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='CCBB1225-C392-480E-8C7F-D09AB2CD2***'),
}

model ListInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstancesResponseBody(name='body'),
}

async function listInstancesWithOptions(request: ListInstancesRequest, runtime: Util.RuntimeOptions): ListInstancesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListInstances',
    version = '2019-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInstancesWithOptions(request, runtime);
}

model ListQueueConsumersRequest {
  instanceId?: string(name='InstanceId', example='188077086902***'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a****'),
  queryCount?: int32(name='QueryCount', example='1'),
  queue?: string(name='Queue', example='queue-rabbit-springboot-advance5'),
  virtualHost?: string(name='VirtualHost', example='test'),
}

model ListQueueConsumersResponseBody = {
  data?: {
    consumers?: [ 
      {
        consumerTag?: string(name='ConsumerTag', example='sgen-1'),
      }
    ](name='Consumers'),
    maxResults?: int32(name='MaxResults', example='1'),
    nextToken?: string(name='NextToken', example='caebacccb2be03f84eb48b699f0a****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='4409B7D5-E4EC-4EB5-804A-385DCDFCD***'),
}

model ListQueueConsumersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListQueueConsumersResponseBody(name='body'),
}

async function listQueueConsumersWithOptions(request: ListQueueConsumersRequest, runtime: Util.RuntimeOptions): ListQueueConsumersResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListQueueConsumers',
    version = '2019-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listQueueConsumers(request: ListQueueConsumersRequest): ListQueueConsumersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listQueueConsumersWithOptions(request, runtime);
}

model ListQueueUpStreamBindingsRequest {
  instanceId?: string(name='InstanceId', example='1880770869023***'),
  maxResults?: int32(name='MaxResults', example='1'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a****'),
  queueName?: string(name='QueueName', example='QueueTest'),
  virtualHost?: string(name='VirtualHost', example='test'),
}

model ListQueueUpStreamBindingsResponseBody = {
  data?: {
    bindings?: [ 
      {
        argument?: string(name='Argument', example='all'),
        bindingKey?: string(name='BindingKey', example='amq.test'),
        bindingType?: string(name='BindingType', example='QUEUE'),
        destinationName?: string(name='DestinationName', example='QueueTest'),
        sourceExchange?: string(name='SourceExchange', example='test'),
      }
    ](name='Bindings'),
    maxResults?: string(name='MaxResults', example='1'),
    nextToken?: string(name='NextToken', example='caebacccb2be03f84eb48b699f0a****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='8BFB1C9D-08A2-4859-A47C-403C9EFA2***'),
}

model ListQueueUpStreamBindingsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListQueueUpStreamBindingsResponseBody(name='body'),
}

async function listQueueUpStreamBindingsWithOptions(request: ListQueueUpStreamBindingsRequest, runtime: Util.RuntimeOptions): ListQueueUpStreamBindingsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListQueueUpStreamBindings',
    version = '2019-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listQueueUpStreamBindings(request: ListQueueUpStreamBindingsRequest): ListQueueUpStreamBindingsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listQueueUpStreamBindingsWithOptions(request, runtime);
}

model ListQueuesRequest {
  instanceId?: string(name='InstanceId', example='1880770869023***'),
  maxResults?: int32(name='MaxResults', example='1'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a****'),
  virtualHost?: string(name='VirtualHost', example='test'),
}

model ListQueuesResponseBody = {
  data?: {
    maxResults?: int32(name='MaxResults', example='1'),
    nextToken?: string(name='NextToken', example='caebacccb2be03f84eb48b699f0a****'),
    queues?: [ 
      {
        attributes?: map[string]any(name='Attributes', example='test'),
        autoDeleteState?: boolean(name='AutoDeleteState', example='false'),
        createTime?: long(name='CreateTime', example='1580887085240'),
        exclusiveState?: boolean(name='ExclusiveState', example='false'),
        lastConsumeTime?: long(name='LastConsumeTime', example='1680887085240'),
        name?: string(name='Name', example='QueueTest'),
        ownerId?: string(name='OwnerId', example='1880770869023***'),
        VHostName?: string(name='VHostName', example='test'),
      }
    ](name='Queues', description='Queueã€‚'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='CE811989-9F02-42CE-97A6-2239CB5C2***'),
}

model ListQueuesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListQueuesResponseBody(name='body'),
}

async function listQueuesWithOptions(request: ListQueuesRequest, runtime: Util.RuntimeOptions): ListQueuesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListQueues',
    version = '2019-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listQueues(request: ListQueuesRequest): ListQueuesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listQueuesWithOptions(request, runtime);
}

model ListVirtualHostsRequest {
  instanceId?: string(name='InstanceId', example='1880770869023***'),
  maxResults?: int32(name='MaxResults', example='2'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a****'),
}

model ListVirtualHostsResponseBody = {
  data?: {
    maxResults?: int32(name='MaxResults', example='2'),
    nextToken?: string(name='NextToken', example='caebacccb2be03f84eb48b699f0a****'),
    virtualHosts?: [ 
      {
        name?: string(name='Name', example='test'),
      }
    ](name='VirtualHosts', description='Vhostã€‚'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='EF4DB019-DA4A-4CE3-B220-223BBC93F***'),
}

model ListVirtualHostsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListVirtualHostsResponseBody(name='body'),
}

async function listVirtualHostsWithOptions(request: ListVirtualHostsRequest, runtime: Util.RuntimeOptions): ListVirtualHostsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListVirtualHosts',
    version = '2019-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listVirtualHosts(request: ListVirtualHostsRequest): ListVirtualHostsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVirtualHostsWithOptions(request, runtime);
}

model UpdateInstanceNameRequest {
  instanceId?: string(name='InstanceId', example='amqp-cn-zvp2ajsj****'),
  instanceName?: string(name='InstanceName', example='amqp-cn-ZVp2ajsj****'),
}

model UpdateInstanceNameResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', example='true'),
  message?: string(name='Message', example='InstanceNotExist'),
  requestId?: string(name='RequestId', example='6DC68EC9-0E76-5435-B8C0-FF9492B4****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateInstanceNameResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateInstanceNameResponseBody(name='body'),
}

async function updateInstanceNameWithOptions(request: UpdateInstanceNameRequest, runtime: Util.RuntimeOptions): UpdateInstanceNameResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateInstanceName',
    version = '2019-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateInstanceName(request: UpdateInstanceNameRequest): UpdateInstanceNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateInstanceNameWithOptions(request, runtime);
}

