/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-qingdao = 'ddosbgp.aliyuncs.com',
    cn-beijing = 'ddosbgp.aliyuncs.com',
    cn-zhangjiakou = 'ddosbgp.aliyuncs.com',
    cn-huhehaote = 'ddosbgp.aliyuncs.com',
    cn-hangzhou = 'ddosbgp.aliyuncs.com',
    cn-shanghai = 'ddosbgp.aliyuncs.com',
    cn-shenzhen = 'ddosbgp.aliyuncs.com',
    ap-northeast-1 = 'ddosbgp.ap-southeast-1.aliyuncs.com',
    ap-south-1 = 'ddosbgp.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'ddosbgp.ap-southeast-1.aliyuncs.com',
    ap-southeast-3 = 'ddosbgp.ap-southeast-1.aliyuncs.com',
    ap-southeast-5 = 'ddosbgp.ap-southeast-1.aliyuncs.com',
    cn-chengdu = 'ddosbgp.aliyuncs.com',
    eu-central-1 = 'ddosbgp.ap-southeast-1.aliyuncs.com',
    eu-west-1 = 'ddosbgp.ap-southeast-1.aliyuncs.com',
    me-east-1 = 'ddosbgp.ap-southeast-1.aliyuncs.com',
    cn-hangzhou-finance = 'ddosbgp.aliyuncs.com',
    cn-shenzhen-finance-1 = 'ddosbgp.aliyuncs.com',
    cn-shanghai-finance-1 = 'ddosbgp.aliyuncs.com',
    cn-north-2-gov-1 = 'ddosbgp.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('ddosbgp', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model ReleaseInstanceRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
}

model ReleaseInstanceResponseBody = {
  code?: string(name='Code'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReleaseInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleaseInstanceResponseBody(name='body'),
}

async function releaseInstanceWithOptions(request: ReleaseInstanceRequest, runtime: Util.RuntimeOptions): ReleaseInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReleaseInstance',
    version = '2018-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function releaseInstance(request: ReleaseInstanceRequest): ReleaseInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseInstanceWithOptions(request, runtime);
}

