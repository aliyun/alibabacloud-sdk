/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Workorder';
  @version = '2021-06-10';
  @endpointRule = 'central';
  @endpointMap = {
    ap-northeast-1 = 'workorder.ap-northeast-1.aliyuncs.com',
    ap-southeast-1 = 'workorder.ap-southeast-1.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model CloseTicketRequest {
  ticketId: string(name='TicketId', position='Body'),
}

model CloseTicketResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CloseTicketResponse = {
  headers: map[string]string(name='headers'),
  body: CloseTicketResponseBody(name='body'),
}

async function closeTicket(request: CloseTicketRequest): CloseTicketResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CloseTicket', 'POST', '/', 'json', true, 'form', request);
}

model CreateTicketRequest {
  categoryId: string(name='CategoryId', position='Body'),
  description: string(name='Description', position='Body'),
  severity: int32(name='Severity', minimum=0, maximum=1000, position='Body'),
}

model CreateTicketResponseBody = {
  code?: int32(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateTicketResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTicketResponseBody(name='body'),
}

async function createTicket(request: CreateTicketRequest): CreateTicketResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTicket', 'POST', '/', 'json', true, 'form', request);
}

model EvaluateTicketRequest {
  content?: string(name='Content', position='Body'),
  score: string(name='Score', position='Body'),
  solved: boolean(name='Solved', position='Body'),
  ticketId: string(name='TicketId', position='Body'),
}

model EvaluateTicketResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EvaluateTicketResponse = {
  headers: map[string]string(name='headers'),
  body: EvaluateTicketResponseBody(name='body'),
}

async function evaluateTicket(request: EvaluateTicketRequest): EvaluateTicketResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EvaluateTicket', 'POST', '/', 'json', true, 'form', request);
}

model GetMqConsumerTagRequest {
}

model GetMqConsumerTagResponseBody = {
  code?: int32(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetMqConsumerTagResponse = {
  headers: map[string]string(name='headers'),
  body: GetMqConsumerTagResponseBody(name='body'),
}

async function getMqConsumerTag(request: GetMqConsumerTagRequest): GetMqConsumerTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMqConsumerTag', 'POST', '/', 'json', false, 'json', request);
}

model ListCategoriesRequest {
  name?: string(name='Name', position='Body'),
  productId: long(name='ProductId', minimum=0, maximum=99999999999, position='Body'),
}

model ListCategoriesResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      categoryId?: long(name='CategoryId'),
      categoryName?: string(name='CategoryName'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListCategoriesResponse = {
  headers: map[string]string(name='headers'),
  body: ListCategoriesResponseBody(name='body'),
}

async function listCategories(request: ListCategoriesRequest): ListCategoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCategories', 'POST', '/', 'json', true, 'form', request);
}

model ListProductsRequest {
  name?: string(name='Name', position='Query'),
}

model ListProductsResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      directoryId?: long(name='DirectoryId'),
      directoryName?: string(name='DirectoryName'),
      productList?: [ 
        {
          productId?: long(name='ProductId'),
          productName?: string(name='ProductName'),
        }
      ](name='ProductList'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListProductsResponse = {
  headers: map[string]string(name='headers'),
  body: ListProductsResponseBody(name='body'),
}

async function listProducts(request: ListProductsRequest): ListProductsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListProducts', 'POST', '/', 'json', false, 'json', request);
}

model ListTicketNotesRequest {
  ticketId: string(name='TicketId', position='Query'),
}

model ListTicketNotesResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      createTime?: long(name='CreateTime'),
      dialog?: {
        content?: string(name='Content'),
        schema?: string(name='Schema'),
      }(name='Dialog'),
      dialogId?: long(name='DialogId'),
      status?: int32(name='Status'),
      tip?: string(name='Tip'),
      type?: int32(name='Type'),
      user?: {
        name?: string(name='Name'),
        role?: int32(name='Role'),
      }(name='User'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListTicketNotesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTicketNotesResponseBody(name='body'),
}

async function listTicketNotes(request: ListTicketNotesRequest): ListTicketNotesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTicketNotes', 'POST', '/', 'json', false, 'json', request);
}

model ListTicketsRequest {
  endDate?: long(name='EndDate', position='Body'),
  keyword?: string(name='Keyword', position='Body'),
  pageNumber: int32(name='PageNumber', minimum=1, maximum=9999999, position='Query'),
  pageSize: int32(name='PageSize', minimum=10, maximum=100, position='Query'),
  startDate?: long(name='StartDate', position='Body'),
  statusList?: [ string ](name='StatusList', position='Body'),
  ticketId?: string(name='TicketId', position='Body'),
}

model ListTicketsResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      status?: {
        label?: string(name='Label'),
        value?: string(name='Value'),
      }(name='Status'),
      ticketId?: string(name='TicketId'),
      title?: string(name='Title'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model ListTicketsResponse = {
  headers: map[string]string(name='headers'),
  body: ListTicketsResponseBody(name='body'),
}

async function listTickets(request: ListTicketsRequest): ListTicketsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTickets', 'POST', '/', 'json', true, 'form', request);
}

model ReplyTicketRequest {
  content: string(name='Content', position='Body'),
  encrypt: boolean(name='Encrypt', position='Body'),
  ticketId: string(name='TicketId', position='Body'),
}

model ReplyTicketResponseBody = {
  code?: int32(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReplyTicketResponse = {
  headers: map[string]string(name='headers'),
  body: ReplyTicketResponseBody(name='body'),
}

async function replyTicket(request: ReplyTicketRequest): ReplyTicketResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReplyTicket', 'POST', '/', 'json', true, 'form', request);
}

