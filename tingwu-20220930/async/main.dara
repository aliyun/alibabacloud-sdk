/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'tingwu';
  @version = '2022-09-30';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CreateFileTransRequest {
  abilityParams?: map[string]any(name='AbilityParams', position='Body'),
  appKey: string(name='AppKey', description='管控台创建的项目AppKey。', example='JV1sRTisRMi****', position='Body'),
  asrParams?: map[string]any(name='AsrParams', position='Body'),
  audioLanguage: string(name='AudioLanguage', description='音频转写使用的语言模型。
cn：中文。
en：英文。
yue：粤语。
fspk：中英文自由说。', example='cn', position='Body'),
  audioOssBucket?: string(name='AudioOssBucket', description='需要转写音频所在的OSS Bucket。', example='bucket', position='Body'),
  audioOssPath: string(name='AudioOssPath', description='需要转写音频所在的OSS文件路径或者自定义可下载文件地址（http|https）。如果AudioOssBucket非空，则需要赋值OSS文件路径（/...../*.mp3）；如果AudioOssBucket为空，则需要赋值自定义可下载文件地址（http://……/*.mp3）。', example='dir1/dir2/filename', position='Body'),
  audioOutputEnabled?: boolean(name='AudioOutputEnabled', description='是否开启mp3格式音频转码，默认是false。', example='false', position='Body'),
  audioOutputOssBucket?: string(name='AudioOutputOssBucket', description='开启音频转码时，转码音频写入到的OSS Bucket。', example='bucket', position='Body'),
  audioOutputOssPath?: string(name='AudioOutputOssPath', description='开启音频转码时，转码音频写入到的OSS文件路径。', example='tingwu/dir/filename', position='Body'),
  audioRoleNum?: string(name='AudioRoleNum', description='是否开启说话人角色区分。注，只对16K及以上采样率生效
不设置：不使用说话人角色区分。
0：说话人角色区分结果为不定人数。
2：说话人角色区分结果为2人。', example='2', position='Body'),
  audioSegmentsEnabled?: boolean(name='AudioSegmentsEnabled', description='是否开启有效音频片断检测结果写入，默认是false。', example='false', position='Body'),
  labParams?: map[string]any(name='LabParams', position='Body'),
  tags?: map[string]any(name='Tags', position='Body'),
  transKey?: string(name='TransKey', description='用户设置的任务标识，在任务查询或任务结束回调时会原样返回。', example='trans_123', position='Body'),
  transResultOssBucket: string(name='TransResultOssBucket', description='识别及智能提取结果写入到的OSS Bucket。', example='bucket', position='Body'),
  transResultOssPath: string(name='TransResultOssPath', description='识别及智能提取结果写入到的OSS文件路径。
示例：目录/文件名', example='tingwu/dir/filename', position='Body'),
}

model CreateFileTransResponseBody = {
  code?: string(name='Code', description='状态码。', example='0'),
  data?: {
    transId?: string(name='TransId', description='任务ID。', example='f7de74778d94422283534102dfc0****'),
    transKey?: string(name='TransKey', description='用户创建任务时设置的任务标识。', example='trans_123'),
  }(name='Data', description='返回对象。'),
  message?: string(name='Message', description='状态说明。', example='Success.'),
  requestId?: string(name='RequestId', description='请求ID，仅用于联调。', example='35124E1C-AE99-5D6C-A52E-BD689D8D****'),
}

model CreateFileTransResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFileTransResponseBody(name='body'),
}

async function createFileTrans(request: CreateFileTransRequest): CreateFileTransResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateFileTrans', 'PUT', '/openapi/file-trans', 'json', false, 'json', request);
}

model CreateMeetingTransRequest {
  abilityParams?: map[string]any(name='AbilityParams', position='Body'),
  appKey: string(name='AppKey', description='管控台创建的项目AppKey。', example='JV1sRTisRMi****', position='Body'),
  asrParams?: map[string]any(name='AsrParams', position='Body'),
  audioBitRate: int32(name='AudioBitRate', description='会议上传音频采样位数，当前支持：16。', example='16', position='Body'),
  audioFormat: string(name='AudioFormat', description='音频编码格式，PCM（无压缩的PCM文件或WAV文件）或OPUS（压缩的OPUS文件）。', example='pcm', position='Body'),
  audioLanguage: string(name='AudioLanguage', description='音频转写使用的语言模型。
cn：中文。
en：英文。
yue：粤语。
fspk：中英文自由说。
multi：动态语言切换。', example='cn', position='Body'),
  audioOutputEnabled?: boolean(name='AudioOutputEnabled', description='是否开启mp3格式音频同步转码，默认是false。', example='false', position='Body'),
  audioOutputOssBucket?: string(name='AudioOutputOssBucket', description='开启音频同步转码时，转码音频写入到的OSS Bucket，需要与管控台项目配置的OSS Bucket一致。', example='bucket', position='Body'),
  audioOutputOssPath?: string(name='AudioOutputOssPath', description='开启音频同步转码时，转码音频写入到的OSS文件路径，需要以"tingwu/"为前缀。', example='tingwu/dir/filename', position='Body'),
  audioPackage?: string(name='AudioPackage', description='音频打包方式，基于听悟约定的Protobuf格式封装多路音频流时设置为multi。', example='multi', position='Body'),
  audioSampleRate: int32(name='AudioSampleRate', description='音频采样率，当前支持：16000。', example='16000', position='Body'),
  audioSegmentsEnabled?: boolean(name='AudioSegmentsEnabled', description='开启会后智能提取时，是否开启有效音频片断检测结果写入，默认是false。', example='false', position='Body'),
  docResultEnabled?: boolean(name='DocResultEnabled', description='开启会后智能提取时，是否会中识别结果写入，默认是false。', example='false', position='Body'),
  labParams?: map[string]any(name='LabParams', position='Body'),
  meetingKey?: string(name='MeetingKey', description='用户设置的会议标识，在会中查询或会后结束回调时会原样返回。', example='meeting_123', position='Body'),
  meetingResultEnabled?: boolean(name='MeetingResultEnabled', description='是否开启会后智能提取，默认是false。', example='false', position='Body'),
  meetingResultOssBucket?: string(name='MeetingResultOssBucket', description='开启会后智能提取时，提取结果写入到的OSS Bucket，需要与管控台项目配置的OSS Bucket一致。', example='bucket', position='Body'),
  meetingResultOssPath?: string(name='MeetingResultOssPath', description='开启会后智能提取时，提取结果写入到的OSS文件路径，需要以"tingwu/"为前缀。', example='tingwu/dir/filename', position='Body'),
  realtimeActiveResultLevel?: int32(name='RealtimeActiveResultLevel', description='开启会中实时结果返回且音频打包方式为multi时，设置发言人识别结果返回等级，默认是1。
0：不返回识别结果。
1：识别出完整句子时返回识别结果。
2：识别出中间结果及完整句子时返回识别结果。', example='2', position='Body'),
  realtimeResultEnabled?: boolean(name='RealtimeResultEnabled', description='是否开启会中实时结果返回，默认是true。', example='true', position='Body'),
  realtimeResultLevel?: int32(name='RealtimeResultLevel', description='开启会中实时结果返回时，设置识别结果返回等级，默认是1。
0：不返回识别结果。
1：识别出完整句子时返回识别结果。
2：识别出中间结果及完整句子时返回识别结果。', example='2', position='Body'),
  realtimeResultMeetingInfoEnabled?: boolean(name='RealtimeResultMeetingInfoEnabled', description='会中识别消息结果header中是否包含MeetingKey、MeetingId，默认是false。', example='true', position='Body'),
  realtimeResultWordsEnabled?: boolean(name='RealtimeResultWordsEnabled', description='会中识别消息是否包含words信息，默认是true。', example='true', position='Body'),
  tags?: map[string]any(name='Tags', position='Body'),
  translateActiveResultLevel?: int32(name='TranslateActiveResultLevel', description='多通道Active流识别结果翻译等级。0：不返回翻译结果。 1：识别出完整句子时返回翻译结果。 2：识别出中间结果及完整句子时返回翻译结果。默认是1。', example='2', position='Body'),
  translateLanguages?: string(name='TranslateLanguages', description='翻译目标语言集合，多个语言间用英文逗号","分隔，当前支持cn、en。', example='cn,en', position='Body'),
  translateResultEnabled?: boolean(name='TranslateResultEnabled', description='是否开启会中翻译，默认是false。', example='false', position='Body'),
  translateResultLevel?: int32(name='TranslateResultLevel', description='单通道识别或多通道mix流识别结果翻译等级。0：不返回翻译结果。 1：识别出完整句子时返回翻译结果。 2：识别出中间结果及完整句子时返回翻译结果。默认是1。', example='2', position='Body'),
}

model CreateMeetingTransResponseBody = {
  code?: string(name='Code', description='状态码。', example='0'),
  data?: {
    meetingId?: string(name='MeetingId', description='会议ID。', example='f7de74778d94422283534102dfc0****'),
    meetingJoinUrl?: string(name='MeetingJoinUrl', description='会议语音推流地址。', example='wss://tingwu-realtime-cn-beijing.aliyuncs.com/api/ws/v1?mc=****'),
    meetingKey?: string(name='MeetingKey', description='用户创建会议时设置的会议标识。', example='meeting_123'),
  }(name='Data', description='返回对象。'),
  message?: string(name='Message', description='状态说明。', example='Success.'),
  requestId?: string(name='RequestId', description='请求ID，仅用于联调。', example='35124E1C-AE99-5D6C-A52E-BD689D8D****'),
}

model CreateMeetingTransResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMeetingTransResponseBody(name='body'),
}

async function createMeetingTrans(request: CreateMeetingTransRequest): CreateMeetingTransResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateMeetingTrans', 'PUT', '/openapi/meeting-trans', 'json', false, 'json', request);
}

model GetFileTransRequest {
  transId: string(name='TransId', description='任务ID。', example='trans_123', position='Path'),
}

model GetFileTransResponseBody = {
  code?: string(name='Code', description='状态码。', example='0'),
  data?: {
    transId?: string(name='TransId', description='任务ID。', example='f7de74778d94422283534102dfc0****'),
    transKey?: string(name='TransKey', description='用户创建任务时设置的任务标识。', example='trans_123'),
    transStatus?: string(name='TransStatus', description='任务状态。
ONGOING：任务进行中。
COMPLETED：任务完成。
FAILED：任务失败
INVALID：无效任务。', example='ONGOING'),
  }(name='Data', description='返回对象。'),
  message?: string(name='Message', description='状态说明。', example='Success.'),
  requestId?: string(name='RequestId', description='请求ID，仅用于联调。', example='35124E1C-AE99-5D6C-A52E-BD689D8D****'),
}

model GetFileTransResponse = {
  headers: map[string]string(name='headers'),
  body: GetFileTransResponseBody(name='body'),
}

async function getFileTrans(request: GetFileTransRequest): GetFileTransResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetFileTrans', 'GET', '/openapi/file-trans/{TransId}', 'json', false, 'json', request);
}

model GetMeetingTransRequest {
  meetingId: string(name='MeetingId', description='会议ID。', example='meeting_123', position='Path'),
}

model GetMeetingTransResponseBody = {
  code?: string(name='Code', description='状态码。', example='0'),
  data?: {
    meetingId?: string(name='MeetingId', description='会议ID。', example='f7de74778d94422283534102dfc0****'),
    meetingKey?: string(name='MeetingKey', description='用户创建会议时设置的会议标识。', example='meeting_123'),
    meetingStatus?: string(name='MeetingStatus', description='会议状态。
NEW：新会议。
ONGOING：会议转写中。
PAUSED：会议转写暂停。
PRE_COMPLETE：会议转写结束后，进行会后智能提取。
COMPLETED：会议完成。
FAILED：会议转写结束后，会后智能提取失败。
INVALID：无效会议。', example='COMPLETED'),
  }(name='Data', description='返回对象。'),
  message?: string(name='Message', description='状态说明。', example='Success.'),
  requestId?: string(name='RequestId', description='请求ID，仅用于联调。', example='35124E1C-AE99-5D6C-A52E-BD689D8D****'),
}

model GetMeetingTransResponse = {
  headers: map[string]string(name='headers'),
  body: GetMeetingTransResponseBody(name='body'),
}

async function getMeetingTrans(request: GetMeetingTransRequest): GetMeetingTransResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetMeetingTrans', 'GET', '/openapi/meeting-trans/{MeetingId}', 'json', false, 'json', request);
}

model StopMeetingTransRequest {
  meetingId: string(name='MeetingId', description='会议ID。', example='meeting_123', position='Path'),
  meetingRoleNum?: int32(name='MeetingRoleNum', description='会后进行识别结果角色区分人数，在AudioOutputEnabled=true、MeetingResultEnabled=true且DocResultEnabled=true 时生效，默认是1。
0：按多人进行角色区分。
1：按1人进行角色区分，即不区分。
2：按2人进行角色区分。', example='1', position='Body'),
  onlyRoleSplitResult?: boolean(name='OnlyRoleSplitResult', description='会后结果中docResult字段是否只存储角色时间戳映射信息，即不带转写文字结果，默认是false。', example='false', position='Body'),
}

model StopMeetingTransResponseBody = {
  code?: string(name='Code', description='状态码。', example='0'),
  data?: {
    meetingId?: string(name='MeetingId', description='会议ID。', example='f7de74778d94422283534102dfc0****'),
    meetingKey?: string(name='MeetingKey', description='用户创建会议时设置的会议标识。', example='meeting_123'),
    meetingStatus?: string(name='MeetingStatus', description='会议状态。
NEW：新会议。
ONGOING：会议转写中。
PAUSED：会议转写暂停。
PRE_COMPLETE：会议转写结束后，进行会后智能提取。
COMPLETED：会议完成。
FAILED：会议转写结束后，会后智能提取失败。
INVALID：无效会议。', example='PRE_COMPLETE'),
  }(name='Data', description='返回对象。'),
  message?: string(name='Message', description='状态说明。', example='Success.'),
  requestId?: string(name='RequestId', description='请求ID，仅用于联调。', example='35124E1C-AE99-5D6C-A52E-BD689D8D****'),
}

model StopMeetingTransResponse = {
  headers: map[string]string(name='headers'),
  body: StopMeetingTransResponseBody(name='body'),
}

async function stopMeetingTrans(request: StopMeetingTransRequest): StopMeetingTransResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopMeetingTrans', 'POST', '/openapi/meeting-trans/{MeetingId}/stop', 'json', false, 'json', request);
}

