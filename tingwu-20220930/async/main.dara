/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'tingwu';
  @version = '2022-09-30';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CreateFileTransRequest {
  abilityParams?: map[string]any(name='AbilityParams', position='Body'),
  appKey: string(name='AppKey', example='JV1sRTisRMi****', position='Body'),
  asrParams?: map[string]any(name='AsrParams', position='Body'),
  audioLanguage: string(name='AudioLanguage', example='cn', position='Body'),
  audioOssBucket?: string(name='AudioOssBucket', example='bucket', position='Body'),
  audioOssPath: string(name='AudioOssPath', example='dir1/dir2/filename', position='Body'),
  audioOutputEnabled?: boolean(name='AudioOutputEnabled', example='false', position='Body'),
  audioOutputOssBucket?: string(name='AudioOutputOssBucket', example='bucket', position='Body'),
  audioOutputOssPath?: string(name='AudioOutputOssPath', example='tingwu/dir/filename', position='Body'),
  audioRoleNum?: string(name='AudioRoleNum', example='2', position='Body'),
  audioSegmentsEnabled?: boolean(name='AudioSegmentsEnabled', example='false', position='Body'),
  labParams?: map[string]any(name='LabParams', position='Body'),
  tags?: map[string]any(name='Tags', position='Body'),
  transKey?: string(name='TransKey', example='trans_123', position='Body'),
  transResultOssBucket: string(name='TransResultOssBucket', example='bucket', position='Body'),
  transResultOssPath: string(name='TransResultOssPath', example='tingwu/dir/filename', position='Body'),
  videoOutputEnabled?: boolean(name='VideoOutputEnabled', position='Body'),
  videoOutputOssBucket?: string(name='VideoOutputOssBucket', example='bucket', position='Body'),
  videoOutputOssPath?: string(name='VideoOutputOssPath', example='tingwu/dir/filename', position='Body'),
}

model CreateFileTransResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    transId?: string(name='TransId', example='f7de74778d94422283534102dfc0****'),
    transKey?: string(name='TransKey', example='trans_123'),
  }(name='Data'),
  message?: string(name='Message', example='Success.'),
  requestId?: string(name='RequestId', example='35124E1C-AE99-5D6C-A52E-BD689D8D****'),
}

model CreateFileTransResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFileTransResponseBody(name='body'),
}

async function createFileTrans(request: CreateFileTransRequest): CreateFileTransResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateFileTrans', 'PUT', '/openapi/file-trans', 'json', false, 'json', request);
}

model CreateMeetingTransRequest {
  abilityParams?: map[string]any(name='AbilityParams', position='Body'),
  appKey: string(name='AppKey', example='JV1sRTisRMi****', position='Body'),
  asrParams?: map[string]any(name='AsrParams', position='Body'),
  audioBitRate: int32(name='AudioBitRate', example='16', position='Body'),
  audioFormat: string(name='AudioFormat', example='pcm', position='Body'),
  audioLanguage: string(name='AudioLanguage', example='cn', position='Body'),
  audioOutputEnabled?: boolean(name='AudioOutputEnabled', example='false', position='Body'),
  audioOutputOssBucket?: string(name='AudioOutputOssBucket', example='bucket', position='Body'),
  audioOutputOssPath?: string(name='AudioOutputOssPath', example='tingwu/dir/filename', position='Body'),
  audioPackage?: string(name='AudioPackage', example='multi', position='Body'),
  audioSampleRate: int32(name='AudioSampleRate', example='16000', position='Body'),
  audioSegmentsEnabled?: boolean(name='AudioSegmentsEnabled', example='false', position='Body'),
  docResultEnabled?: boolean(name='DocResultEnabled', example='false', position='Body'),
  labParams?: map[string]any(name='LabParams', position='Body'),
  meetingKey?: string(name='MeetingKey', example='meeting_123', position='Body'),
  meetingResultEnabled?: boolean(name='MeetingResultEnabled', example='false', position='Body'),
  meetingResultOssBucket?: string(name='MeetingResultOssBucket', example='bucket', position='Body'),
  meetingResultOssPath?: string(name='MeetingResultOssPath', example='tingwu/dir/filename', position='Body'),
  realtimeActiveResultLevel?: int32(name='RealtimeActiveResultLevel', example='2', position='Body'),
  realtimeResultEnabled?: boolean(name='RealtimeResultEnabled', example='true', position='Body'),
  realtimeResultLevel?: int32(name='RealtimeResultLevel', example='2', position='Body'),
  realtimeResultMeetingInfoEnabled?: boolean(name='RealtimeResultMeetingInfoEnabled', example='true', position='Body'),
  realtimeResultWordsEnabled?: boolean(name='RealtimeResultWordsEnabled', example='true', position='Body'),
  tags?: map[string]any(name='Tags', position='Body'),
  translateActiveResultLevel?: int32(name='TranslateActiveResultLevel', example='2', position='Body'),
  translateLanguages?: string(name='TranslateLanguages', example='cn,en', position='Body'),
  translateResultEnabled?: boolean(name='TranslateResultEnabled', example='false', position='Body'),
  translateResultLevel?: int32(name='TranslateResultLevel', example='2', position='Body'),
}

model CreateMeetingTransResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    meetingId?: string(name='MeetingId', example='f7de74778d94422283534102dfc0****'),
    meetingJoinUrl?: string(name='MeetingJoinUrl', example='wss://tingwu-realtime-cn-beijing.aliyuncs.com/api/ws/v1?mc=****'),
    meetingKey?: string(name='MeetingKey', example='meeting_123'),
  }(name='Data'),
  message?: string(name='Message', example='Success.'),
  requestId?: string(name='RequestId', example='35124E1C-AE99-5D6C-A52E-BD689D8D****'),
}

model CreateMeetingTransResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMeetingTransResponseBody(name='body'),
}

async function createMeetingTrans(request: CreateMeetingTransRequest): CreateMeetingTransResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateMeetingTrans', 'PUT', '/openapi/meeting-trans', 'json', false, 'json', request);
}

model GetFileTransRequest {
  transId: string(name='TransId', example='trans_123', position='Path'),
}

model GetFileTransResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    transId?: string(name='TransId', example='f7de74778d94422283534102dfc0****'),
    transKey?: string(name='TransKey', example='trans_123'),
    transStatus?: string(name='TransStatus', example='ONGOING'),
  }(name='Data'),
  message?: string(name='Message', example='Success.'),
  requestId?: string(name='RequestId', example='35124E1C-AE99-5D6C-A52E-BD689D8D****'),
}

model GetFileTransResponse = {
  headers: map[string]string(name='headers'),
  body: GetFileTransResponseBody(name='body'),
}

async function getFileTrans(request: GetFileTransRequest): GetFileTransResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetFileTrans', 'GET', '/openapi/file-trans/{TransId}', 'json', false, 'json', request);
}

model GetMeetingTransRequest {
  meetingId: string(name='MeetingId', example='meeting_123', position='Path'),
}

model GetMeetingTransResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    meetingId?: string(name='MeetingId', example='f7de74778d94422283534102dfc0****'),
    meetingKey?: string(name='MeetingKey', example='meeting_123'),
    meetingStatus?: string(name='MeetingStatus', example='COMPLETED'),
  }(name='Data'),
  message?: string(name='Message', example='Success.'),
  requestId?: string(name='RequestId', example='35124E1C-AE99-5D6C-A52E-BD689D8D****'),
}

model GetMeetingTransResponse = {
  headers: map[string]string(name='headers'),
  body: GetMeetingTransResponseBody(name='body'),
}

async function getMeetingTrans(request: GetMeetingTransRequest): GetMeetingTransResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetMeetingTrans', 'GET', '/openapi/meeting-trans/{MeetingId}', 'json', false, 'json', request);
}

model StopMeetingTransRequest {
  meetingId: string(name='MeetingId', example='meeting_123', position='Path'),
  meetingRoleNum?: int32(name='MeetingRoleNum', example='1', position='Body'),
  onlyRoleSplitResult?: boolean(name='OnlyRoleSplitResult', example='false', position='Body'),
}

model StopMeetingTransResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    meetingId?: string(name='MeetingId', example='f7de74778d94422283534102dfc0****'),
    meetingKey?: string(name='MeetingKey', example='meeting_123'),
    meetingStatus?: string(name='MeetingStatus', example='PRE_COMPLETE'),
  }(name='Data'),
  message?: string(name='Message', example='Success.'),
  requestId?: string(name='RequestId', example='35124E1C-AE99-5D6C-A52E-BD689D8D****'),
}

model StopMeetingTransResponse = {
  headers: map[string]string(name='headers'),
  body: StopMeetingTransResponseBody(name='body'),
}

async function stopMeetingTrans(request: StopMeetingTransRequest): StopMeetingTransResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopMeetingTrans', 'POST', '/openapi/meeting-trans/{MeetingId}/stop', 'json', false, 'json', request);
}

