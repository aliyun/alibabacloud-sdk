/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('tingwu', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateFileTransRequest {
  appKey?: string(name='AppKey'),
  audioLanguage?: string(name='AudioLanguage'),
  audioOssBucket?: string(name='AudioOssBucket'),
  audioOssPath?: string(name='AudioOssPath'),
  audioOutputEnabled?: string(name='AudioOutputEnabled'),
  audioOutputOssBucket?: string(name='AudioOutputOssBucket'),
  audioOutputOssPath?: string(name='AudioOutputOssPath'),
  audioRoleNum?: string(name='AudioRoleNum'),
  audioSegmentsEnabled?: string(name='AudioSegmentsEnabled'),
  transKey?: string(name='TransKey'),
  transResultOssBucket?: string(name='TransResultOssBucket'),
  transResultOssPath?: string(name='TransResultOssPath'),
}

model CreateFileTransResponseBody = {
  code?: string(name='Code'),
  data?: {
    transId?: string(name='TransId'),
    transKey?: string(name='TransKey'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CreateFileTransResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFileTransResponseBody(name='body'),
}

async function createFileTrans(request: CreateFileTransRequest): CreateFileTransResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createFileTransWithOptions(request, headers, runtime);
}

async function createFileTransWithOptions(request: CreateFileTransRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateFileTransResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appKey)) {
    body['AppKey'] = request.appKey;
  }
  if (!Util.isUnset(request.audioLanguage)) {
    body['AudioLanguage'] = request.audioLanguage;
  }
  if (!Util.isUnset(request.audioOssBucket)) {
    body['AudioOssBucket'] = request.audioOssBucket;
  }
  if (!Util.isUnset(request.audioOssPath)) {
    body['AudioOssPath'] = request.audioOssPath;
  }
  if (!Util.isUnset(request.audioOutputEnabled)) {
    body['AudioOutputEnabled'] = request.audioOutputEnabled;
  }
  if (!Util.isUnset(request.audioOutputOssBucket)) {
    body['AudioOutputOssBucket'] = request.audioOutputOssBucket;
  }
  if (!Util.isUnset(request.audioOutputOssPath)) {
    body['AudioOutputOssPath'] = request.audioOutputOssPath;
  }
  if (!Util.isUnset(request.audioRoleNum)) {
    body['AudioRoleNum'] = request.audioRoleNum;
  }
  if (!Util.isUnset(request.audioSegmentsEnabled)) {
    body['AudioSegmentsEnabled'] = request.audioSegmentsEnabled;
  }
  if (!Util.isUnset(request.transKey)) {
    body['TransKey'] = request.transKey;
  }
  if (!Util.isUnset(request.transResultOssBucket)) {
    body['TransResultOssBucket'] = request.transResultOssBucket;
  }
  if (!Util.isUnset(request.transResultOssPath)) {
    body['TransResultOssPath'] = request.transResultOssPath;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateFileTrans',
    version = '2022-09-30',
    protocol = 'HTTPS',
    pathname = `/openapi/file-trans`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateMeetingTransRequest {
  appKey?: string(name='AppKey'),
  audioBitRate?: int32(name='AudioBitRate'),
  audioFormat?: string(name='AudioFormat'),
  audioLanguage?: string(name='AudioLanguage'),
  audioOutputEnabled?: boolean(name='AudioOutputEnabled'),
  audioOutputOssBucket?: string(name='AudioOutputOssBucket'),
  audioOutputOssPath?: string(name='AudioOutputOssPath'),
  audioPackage?: string(name='AudioPackage'),
  audioSampleRate?: int32(name='AudioSampleRate'),
  audioSegmentsEnabled?: boolean(name='AudioSegmentsEnabled'),
  docResultEnabled?: boolean(name='DocResultEnabled'),
  meetingKey?: string(name='MeetingKey'),
  meetingResultEnabled?: boolean(name='MeetingResultEnabled'),
  meetingResultOssBucket?: string(name='MeetingResultOssBucket'),
  meetingResultOssPath?: string(name='MeetingResultOssPath'),
  realtimeActiveResultLevel?: int32(name='RealtimeActiveResultLevel'),
  realtimeResultEnabled?: boolean(name='RealtimeResultEnabled'),
  realtimeResultLevel?: int32(name='RealtimeResultLevel'),
}

model CreateMeetingTransResponseBody = {
  code?: string(name='Code'),
  data?: {
    meetingId?: string(name='MeetingId'),
    meetingJoinUrl?: string(name='MeetingJoinUrl'),
    meetingKey?: string(name='MeetingKey'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CreateMeetingTransResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateMeetingTransResponseBody(name='body'),
}

async function createMeetingTrans(request: CreateMeetingTransRequest): CreateMeetingTransResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createMeetingTransWithOptions(request, headers, runtime);
}

async function createMeetingTransWithOptions(request: CreateMeetingTransRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateMeetingTransResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appKey)) {
    body['AppKey'] = request.appKey;
  }
  if (!Util.isUnset(request.audioBitRate)) {
    body['AudioBitRate'] = request.audioBitRate;
  }
  if (!Util.isUnset(request.audioFormat)) {
    body['AudioFormat'] = request.audioFormat;
  }
  if (!Util.isUnset(request.audioLanguage)) {
    body['AudioLanguage'] = request.audioLanguage;
  }
  if (!Util.isUnset(request.audioOutputEnabled)) {
    body['AudioOutputEnabled'] = request.audioOutputEnabled;
  }
  if (!Util.isUnset(request.audioOutputOssBucket)) {
    body['AudioOutputOssBucket'] = request.audioOutputOssBucket;
  }
  if (!Util.isUnset(request.audioOutputOssPath)) {
    body['AudioOutputOssPath'] = request.audioOutputOssPath;
  }
  if (!Util.isUnset(request.audioPackage)) {
    body['AudioPackage'] = request.audioPackage;
  }
  if (!Util.isUnset(request.audioSampleRate)) {
    body['AudioSampleRate'] = request.audioSampleRate;
  }
  if (!Util.isUnset(request.audioSegmentsEnabled)) {
    body['AudioSegmentsEnabled'] = request.audioSegmentsEnabled;
  }
  if (!Util.isUnset(request.docResultEnabled)) {
    body['DocResultEnabled'] = request.docResultEnabled;
  }
  if (!Util.isUnset(request.meetingKey)) {
    body['MeetingKey'] = request.meetingKey;
  }
  if (!Util.isUnset(request.meetingResultEnabled)) {
    body['MeetingResultEnabled'] = request.meetingResultEnabled;
  }
  if (!Util.isUnset(request.meetingResultOssBucket)) {
    body['MeetingResultOssBucket'] = request.meetingResultOssBucket;
  }
  if (!Util.isUnset(request.meetingResultOssPath)) {
    body['MeetingResultOssPath'] = request.meetingResultOssPath;
  }
  if (!Util.isUnset(request.realtimeActiveResultLevel)) {
    body['RealtimeActiveResultLevel'] = request.realtimeActiveResultLevel;
  }
  if (!Util.isUnset(request.realtimeResultEnabled)) {
    body['RealtimeResultEnabled'] = request.realtimeResultEnabled;
  }
  if (!Util.isUnset(request.realtimeResultLevel)) {
    body['RealtimeResultLevel'] = request.realtimeResultLevel;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateMeetingTrans',
    version = '2022-09-30',
    protocol = 'HTTPS',
    pathname = `/openapi/meeting-trans`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetFileTransResponseBody = {
  code?: string(name='Code'),
  data?: {
    transId?: string(name='TransId'),
    transKey?: string(name='TransKey'),
    transStatus?: string(name='TransStatus'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetFileTransResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFileTransResponseBody(name='body'),
}

async function getFileTrans(TransId: string): GetFileTransResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getFileTransWithOptions(TransId, headers, runtime);
}

async function getFileTransWithOptions(TransId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetFileTransResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetFileTrans',
    version = '2022-09-30',
    protocol = 'HTTPS',
    pathname = `/openapi/file-trans/${OpenApiUtil.getEncodeParam(TransId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetMeetingTransResponseBody = {
  code?: string(name='Code'),
  data?: {
    meetingId?: string(name='MeetingId'),
    meetingKey?: string(name='MeetingKey'),
    meetingStatus?: string(name='MeetingStatus'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetMeetingTransResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMeetingTransResponseBody(name='body'),
}

async function getMeetingTrans(MeetingId: string): GetMeetingTransResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getMeetingTransWithOptions(MeetingId, headers, runtime);
}

async function getMeetingTransWithOptions(MeetingId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetMeetingTransResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetMeetingTrans',
    version = '2022-09-30',
    protocol = 'HTTPS',
    pathname = `/openapi/meeting-trans/${OpenApiUtil.getEncodeParam(MeetingId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model StopMeetingTransResponseBody = {
  code?: string(name='Code'),
  data?: {
    meetingId?: string(name='MeetingId'),
    meetingKey?: string(name='MeetingKey'),
    meetingStatus?: string(name='MeetingStatus'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model StopMeetingTransResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopMeetingTransResponseBody(name='body'),
}

async function stopMeetingTrans(MeetingId: string): StopMeetingTransResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return stopMeetingTransWithOptions(MeetingId, headers, runtime);
}

async function stopMeetingTransWithOptions(MeetingId: string, headers: map[string]string, runtime: Util.RuntimeOptions): StopMeetingTransResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'StopMeetingTrans',
    version = '2022-09-30',
    protocol = 'HTTPS',
    pathname = `/openapi/meeting-trans/${OpenApiUtil.getEncodeParam(MeetingId)}/stop`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

