/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'quickbi-public';
  @version = '2020-08-08';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AuthorizeMenuRequest {
  authPointsValue?: int32(name='AuthPointsValue', example='3', position='Query'),
  dataPortalId: string(name='DataPortalId', example='0d173abb53e84c8ca7495429163b****', position='Query'),
  menuIds: string(name='MenuIds', example='54kqgoa****,pg1n135****', position='Query'),
  userGroupIds?: string(name='UserGroupIds', example='34fd141d-4598-4093-8c33-8e066dcb****,3d2c23d4-2b41-4af8-a1f5-f6390f32****', position='Query'),
  userIds?: string(name='UserIds', example='204627493484****,121344444790****', position='Query'),
}

model AuthorizeMenuResponseBody = {
  requestId?: string(name='RequestId', example='188F0B12-00EF-41B3-944A-FB7EF06C9F43'),
  result?: int32(name='Result', example='2'),
  success?: boolean(name='Success', example='true'),
}

model AuthorizeMenuResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AuthorizeMenuResponseBody(name='body'),
}

async function authorizeMenu(request: AuthorizeMenuRequest): AuthorizeMenuResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AuthorizeMenu', 'POST', '/', 'json', false, 'json', request);
}

model CancelAuthorizationMenuRequest {
  dataPortalId: string(name='DataPortalId', example='0d173abb53e84c8ca7495429163b****', position='Query'),
  menuIds: string(name='MenuIds', example='54kqgoa****,pg1n135****', position='Query'),
  userGroupIds?: string(name='UserGroupIds', example='34fd141d-4598-4093-8c33-8e066dcb****,3d2c23d4-2b41-4af8-a1f5-f6390f32****', position='Query'),
  userIds?: string(name='UserIds', example='204627493484****,121344444790****', position='Query'),
}

model CancelAuthorizationMenuResponseBody = {
  requestId?: string(name='RequestId', example='D8749D65-E80A-433C-AF1B-CE9C180FF3B4'),
  result?: int32(name='Result', example='2'),
  success?: boolean(name='Success', example='true'),
}

model CancelAuthorizationMenuResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelAuthorizationMenuResponseBody(name='body'),
}

async function cancelAuthorizationMenu(request: CancelAuthorizationMenuRequest): CancelAuthorizationMenuResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelAuthorizationMenu', 'POST', '/', 'json', false, 'json', request);
}

model ChangeVisibilityModelRequest {
  dataPortalId: string(name='DataPortalId', example='0d173abb53e84c8ca7495429163b****', position='Query'),
  menuIds: string(name='MenuIds', example='54kqgoa****,pg1n135****', position='Query'),
  showOnlyWithAccess: boolean(name='ShowOnlyWithAccess', example='true', position='Query'),
}

model ChangeVisibilityModelResponseBody = {
  requestId?: string(name='RequestId', example='75912036-5527-4B7E-9265-B481D6651AC2'),
  result?: int32(name='Result', example='1'),
  success?: boolean(name='Success', example='true'),
}

model ChangeVisibilityModelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChangeVisibilityModelResponseBody(name='body'),
}

async function changeVisibilityModel(request: ChangeVisibilityModelRequest): ChangeVisibilityModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeVisibilityModel', 'POST', '/', 'json', false, 'json', request);
}

model ListPortalMenuAuthorizationRequest {
  dataPortalId: string(name='DataPortalId', example='0d173abb53e84c8ca7495429163b****', position='Query'),
}

model ListPortalMenuAuthorizationResponseBody = {
  requestId?: string(name='RequestId', example='D8749D65-E80A-433C-AF1B-CE9C180FF3B4'),
  result?: [ 
    {
      menuId?: string(name='MenuId', example='54kqgoa****'),
      receivers?: [ 
        {
          receiverId?: string(name='ReceiverId', example='121344444790****'),
          receiverType?: int32(name='ReceiverType', example='0'),
        }
      ](name='Receivers'),
      showOnlyWithAccess?: boolean(name='ShowOnlyWithAccess', example='true'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model ListPortalMenuAuthorizationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPortalMenuAuthorizationResponseBody(name='body'),
}

async function listPortalMenuAuthorization(request: ListPortalMenuAuthorizationRequest): ListPortalMenuAuthorizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPortalMenuAuthorization', 'POST', '/', 'json', false, 'json', request);
}

model ListPortalMenusRequest {
  dataPortalId: string(name='DataPortalId', example='0d173abb53e84c8ca7495429163b****', position='Query'),
  userId?: string(name='UserId', example='1234567***', position='Query'),
}

model ListPortalMenusResponseBody = {
  requestId?: string(name='RequestId', example='75912036-5527-4B7E-9265-B481D6651AC2'),
  result?: string(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model ListPortalMenusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPortalMenusResponseBody(name='body'),
}

async function listPortalMenus(request: ListPortalMenusRequest): ListPortalMenusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPortalMenus', 'POST', '/', 'json', false, 'json', request);
}

