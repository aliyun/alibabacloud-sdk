/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('bailian', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddCategoryRequest {
  categoryName?: string(name='CategoryName', description='This parameter is required.'),
  categoryType?: string(name='CategoryType', description='This parameter is required.', example='UNSTRUCTURED'),
  parentCategoryId?: string(name='ParentCategoryId', example='cate_cdd11b1b79a74e8bbd675c356a91ee3XXXXXXXX'),
}

model AddCategoryResponseBody = {
  code?: string(name='Code', example='success'),
  data?: {
    categoryId?: string(name='CategoryId', example='cate_cdd11b1b79a74e8bbd675c356a91ee3XXXXXXXX'),
    categoryName?: string(name='CategoryName'),
  }(name='Data'),
  message?: string(name='Message', example='Requests throttling triggered.'),
  requestId?: string(name='RequestId', description='Id of the request', example='778C0B3B-03C1-5FC1-A947-36EDD13606AB'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model AddCategoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddCategoryResponseBody(name='body'),
}

/**
 * @param request AddCategoryRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddCategoryResponse
 */
async function addCategoryWithOptions(WorkspaceId: string, request: AddCategoryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddCategoryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.categoryName)) {
    body['CategoryName'] = request.categoryName;
  }
  if (!Util.isUnset(request.categoryType)) {
    body['CategoryType'] = request.categoryType;
  }
  if (!Util.isUnset(request.parentCategoryId)) {
    body['ParentCategoryId'] = request.parentCategoryId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddCategory',
    version = '2023-12-29',
    protocol = 'HTTPS',
    pathname = `/${OpenApiUtil.getEncodeParam(WorkspaceId)}/datacenter/category/`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request AddCategoryRequest
 * @return AddCategoryResponse
 */
async function addCategory(WorkspaceId: string, request: AddCategoryRequest): AddCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return addCategoryWithOptions(WorkspaceId, request, headers, runtime);
}

model AddFileRequest {
  categoryId?: string(name='CategoryId', description='This parameter is required.', example='cate_cdd11b1b79a74e8bbd675c356a91ee3510024405'),
  leaseId?: string(name='LeaseId', description='This parameter is required.', example='68abd1dea7b6404d8f7d7b9f7fbd332d.1716698936847'),
  parser?: string(name='Parser', description='This parameter is required.', example='DASHSCOPE_DOCMIND'),
}

model AddFileResponseBody = {
  code?: string(name='Code', example='DataCenter.FileTooLarge'),
  data?: {
    fileId?: string(name='FileId', example='file_9a65732555b54d5ea10796ca5742ba22_XXXXXXXX'),
    parser?: string(name='Parser', example='DASHSCOPE_DOCMIND'),
  }(name='Data'),
  message?: string(name='Message', example='User not authorized to operate on the specified resource.'),
  requestId?: string(name='RequestId', example='778C0B3B-xxxx-5FC1-A947-36EDD13606AB'),
  status?: string(name='Status', example='200'),
  success?: string(name='Success', example='true'),
}

model AddFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddFileResponseBody(name='body'),
}

/**
 * @summary 将临时上传的文档导入百炼数据中心，导入成功之后会自动触发文档解析。
 *
 * @param request AddFileRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddFileResponse
 */
async function addFileWithOptions(WorkspaceId: string, request: AddFileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.categoryId)) {
    body['CategoryId'] = request.categoryId;
  }
  if (!Util.isUnset(request.leaseId)) {
    body['LeaseId'] = request.leaseId;
  }
  if (!Util.isUnset(request.parser)) {
    body['Parser'] = request.parser;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddFile',
    version = '2023-12-29',
    protocol = 'HTTPS',
    pathname = `/${OpenApiUtil.getEncodeParam(WorkspaceId)}/datacenter/file`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 将临时上传的文档导入百炼数据中心，导入成功之后会自动触发文档解析。
 *
 * @param request AddFileRequest
 * @return AddFileResponse
 */
async function addFile(WorkspaceId: string, request: AddFileRequest): AddFileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return addFileWithOptions(WorkspaceId, request, headers, runtime);
}

model ApplyFileUploadLeaseRequest {
  fileName?: string(name='FileName', description='This parameter is required.'),
  md5?: string(name='Md5', description='This parameter is required.', example='19657c391f6c70bcea63c154d8606bb3'),
  sizeInBytes?: string(name='SizeInBytes', description='This parameter is required.', example='1000'),
}

model ApplyFileUploadLeaseResponseBody = {
  code?: string(name='Code', example='DataCenter.FileTooLarge'),
  data?: {
    fileUploadLeaseId?: string(name='FileUploadLeaseId', example='1e6a159107384782be5e45ac4759b247.1719325231035'),
    param?: {
      headers?: any(name='Headers', example='"X-bailian-extra": "MTAwNTQyNjQ5NTE2OTE3OA==",
        "Content-Type": "application/pdf"'),
      method?: string(name='Method', example='PUT'),
      url?: string(name='Url', example='https://bailian-datahub-data-origin-prod.oss-cn-hangzhou.aliyuncs.com/1005426495169178/10024405/68abd1dea7b6404d8f7d7b9f7fbd332d.1716698936847.pdf?Expires=1716699536&OSSAccessKeyId=TestID&Signature=HfwPUZo4pR6DatSDym0zFKVh9Wg%3D'),
    }(name='Param'),
    type?: string(name='Type', example='HTTP'),
  }(name='Data'),
  message?: string(name='Message', example='User not authorized to operate on the specified resource'),
  requestId?: string(name='RequestId', example='778C0B3B-xxxx-5FC1-A947-36EDD13606AB'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model ApplyFileUploadLeaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApplyFileUploadLeaseResponseBody(name='body'),
}

/**
 * @summary 请求文档上传租约，进行文档上传。
 *
 * @param request ApplyFileUploadLeaseRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ApplyFileUploadLeaseResponse
 */
async function applyFileUploadLeaseWithOptions(CategoryId: string, WorkspaceId: string, request: ApplyFileUploadLeaseRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyFileUploadLeaseResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.fileName)) {
    body['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.md5)) {
    body['Md5'] = request.md5;
  }
  if (!Util.isUnset(request.sizeInBytes)) {
    body['SizeInBytes'] = request.sizeInBytes;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ApplyFileUploadLease',
    version = '2023-12-29',
    protocol = 'HTTPS',
    pathname = `/${OpenApiUtil.getEncodeParam(WorkspaceId)}/datacenter/category/${OpenApiUtil.getEncodeParam(CategoryId)}`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 请求文档上传租约，进行文档上传。
 *
 * @param request ApplyFileUploadLeaseRequest
 * @return ApplyFileUploadLeaseResponse
 */
async function applyFileUploadLease(CategoryId: string, WorkspaceId: string, request: ApplyFileUploadLeaseRequest): ApplyFileUploadLeaseResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return applyFileUploadLeaseWithOptions(CategoryId, WorkspaceId, request, headers, runtime);
}

model CreateAndPulishAgentRequest {
  applicationConfig?: {
    historyConfig?: {
      enableAdbRecord?: boolean(name='enableAdbRecord'),
      enableRecord?: boolean(name='enableRecord'),
      instanceId?: string(name='instanceId'),
      region?: string(name='region'),
      storeCode?: string(name='storeCode'),
    }(name='historyConfig'),
    longTermMemory?: {
      enable?: boolean(name='enable'),
    }(name='longTermMemory'),
    parameters?: {
      dialogRound?: int32(name='dialogRound'),
      maxTokens?: int32(name='maxTokens'),
      temperature?: double(name='temperature'),
    }(name='parameters'),
    ragConfig?: {
      enableCitation?: boolean(name='enableCitation'),
      enableSearch?: boolean(name='enableSearch'),
      knowledgeBaseCodeList?: [ string ](name='knowledgeBaseCodeList'),
      topK?: int32(name='topK'),
    }(name='ragConfig'),
    securityConfig?: {
      processingStrategy?: string(name='processingStrategy'),
    }(name='securityConfig'),
    tools?: [ 
      {
        type?: string(name='type'),
      }
    ](name='tools'),
    workFlows?: [ 
      {
        type?: string(name='type'),
      }
    ](name='workFlows'),
  }(name='applicationConfig'),
  instructions?: string(name='instructions'),
  modelId?: string(name='modelId'),
  name?: string(name='name'),
}

model CreateAndPulishAgentShrinkRequest {
  applicationConfigShrink?: string(name='applicationConfig'),
  instructions?: string(name='instructions'),
  modelId?: string(name='modelId'),
  name?: string(name='name'),
}

model CreateAndPulishAgentResponseBody = {
  code?: string(name='code'),
  data?: string(name='data'),
  httpStatusCode?: int32(name='httpStatusCode'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
}

model CreateAndPulishAgentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAndPulishAgentResponseBody(name='body'),
}

/**
 * @summary 创建并发布智能体应用
 *
 * @param tmpReq CreateAndPulishAgentRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateAndPulishAgentResponse
 */
async function createAndPulishAgentWithOptions(workspaceId: string, tmpReq: CreateAndPulishAgentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAndPulishAgentResponse {
  Util.validateModel(tmpReq);
  var request = new CreateAndPulishAgentShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.applicationConfig)) {
    request.applicationConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.applicationConfig, 'applicationConfig', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.applicationConfigShrink)) {
    body['applicationConfig'] = request.applicationConfigShrink;
  }
  if (!Util.isUnset(request.instructions)) {
    body['instructions'] = request.instructions;
  }
  if (!Util.isUnset(request.modelId)) {
    body['modelId'] = request.modelId;
  }
  if (!Util.isUnset(request.name)) {
    body['name'] = request.name;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateAndPulishAgent',
    version = '2023-12-29',
    protocol = 'HTTPS',
    pathname = `/${OpenApiUtil.getEncodeParam(workspaceId)}/application/agents`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建并发布智能体应用
 *
 * @param request CreateAndPulishAgentRequest
 * @return CreateAndPulishAgentResponse
 */
async function createAndPulishAgent(workspaceId: string, request: CreateAndPulishAgentRequest): CreateAndPulishAgentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createAndPulishAgentWithOptions(workspaceId, request, headers, runtime);
}

model CreateIndexRequest {
  categoryIds?: [ string ](name='CategoryIds'),
  chunkSize?: int32(name='ChunkSize', example='128'),
  columns?: [ 
    {
      column?: string(name='Column'),
      isRecall?: boolean(name='IsRecall'),
      isSearch?: boolean(name='IsSearch'),
      name?: string(name='Name'),
      type?: string(name='Type'),
    }
  ](name='Columns'),
  description?: string(name='Description'),
  documentIds?: [ string ](name='DocumentIds'),
  embeddingModelName?: string(name='EmbeddingModelName', example='text-embedding-v2'),
  name?: string(name='Name', description='This parameter is required.'),
  overlapSize?: int32(name='OverlapSize', example='16'),
  rerankMinScore?: double(name='RerankMinScore', example='0.20'),
  rerankModelName?: string(name='RerankModelName', example='gte-rerank-hybrid'),
  separator?: string(name='Separator', example=','),
  sinkInstanceId?: string(name='SinkInstanceId', example='gp-bp321093j84'),
  sinkRegion?: string(name='SinkRegion', example='cn-hangzhou'),
  sinkType?: string(name='SinkType', description='This parameter is required.', example='DEFAULT'),
  sourceType?: string(name='SourceType', description='This parameter is required.', example='DATA_CENTER_FILE', nullable=false),
  structureType?: string(name='StructureType', description='This parameter is required.', example='structured'),
}

model CreateIndexShrinkRequest {
  categoryIdsShrink?: string(name='CategoryIds'),
  chunkSize?: int32(name='ChunkSize', example='128'),
  columnsShrink?: string(name='Columns'),
  description?: string(name='Description'),
  documentIdsShrink?: string(name='DocumentIds'),
  embeddingModelName?: string(name='EmbeddingModelName', example='text-embedding-v2'),
  name?: string(name='Name', description='This parameter is required.'),
  overlapSize?: int32(name='OverlapSize', example='16'),
  rerankMinScore?: double(name='RerankMinScore', example='0.20'),
  rerankModelName?: string(name='RerankModelName', example='gte-rerank-hybrid'),
  separator?: string(name='Separator', example=','),
  sinkInstanceId?: string(name='SinkInstanceId', example='gp-bp321093j84'),
  sinkRegion?: string(name='SinkRegion', example='cn-hangzhou'),
  sinkType?: string(name='SinkType', description='This parameter is required.', example='DEFAULT'),
  sourceType?: string(name='SourceType', description='This parameter is required.', example='DATA_CENTER_FILE', nullable=false),
  structureType?: string(name='StructureType', description='This parameter is required.', example='structured'),
}

model CreateIndexResponseBody = {
  code?: string(name='Code', example='Forbidden'),
  data?: {
    id?: string(name='Id', example='jkurxhju6b'),
  }(name='Data'),
  message?: string(name='Message', example='Invalid input, variable name is missing'),
  requestId?: string(name='RequestId', description='Id of the request', example='17204B98-7734-4F9A-8464-2446A84821CA'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model CreateIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateIndexResponseBody(name='body'),
}

/**
 * @summary 创建并运行pipeline
 *
 * @param tmpReq CreateIndexRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateIndexResponse
 */
async function createIndexWithOptions(WorkspaceId: string, tmpReq: CreateIndexRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateIndexResponse {
  Util.validateModel(tmpReq);
  var request = new CreateIndexShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.categoryIds)) {
    request.categoryIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.categoryIds, 'CategoryIds', 'json');
  }
  if (!Util.isUnset(tmpReq.columns)) {
    request.columnsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.columns, 'Columns', 'json');
  }
  if (!Util.isUnset(tmpReq.documentIds)) {
    request.documentIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.documentIds, 'DocumentIds', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.categoryIdsShrink)) {
    query['CategoryIds'] = request.categoryIdsShrink;
  }
  if (!Util.isUnset(request.chunkSize)) {
    query['ChunkSize'] = request.chunkSize;
  }
  if (!Util.isUnset(request.columnsShrink)) {
    query['Columns'] = request.columnsShrink;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.documentIdsShrink)) {
    query['DocumentIds'] = request.documentIdsShrink;
  }
  if (!Util.isUnset(request.embeddingModelName)) {
    query['EmbeddingModelName'] = request.embeddingModelName;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.overlapSize)) {
    query['OverlapSize'] = request.overlapSize;
  }
  if (!Util.isUnset(request.rerankMinScore)) {
    query['RerankMinScore'] = request.rerankMinScore;
  }
  if (!Util.isUnset(request.rerankModelName)) {
    query['RerankModelName'] = request.rerankModelName;
  }
  if (!Util.isUnset(request.separator)) {
    query['Separator'] = request.separator;
  }
  if (!Util.isUnset(request.sinkInstanceId)) {
    query['SinkInstanceId'] = request.sinkInstanceId;
  }
  if (!Util.isUnset(request.sinkRegion)) {
    query['SinkRegion'] = request.sinkRegion;
  }
  if (!Util.isUnset(request.sinkType)) {
    query['SinkType'] = request.sinkType;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.structureType)) {
    query['StructureType'] = request.structureType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateIndex',
    version = '2023-12-29',
    protocol = 'HTTPS',
    pathname = `/${OpenApiUtil.getEncodeParam(WorkspaceId)}/index/create`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建并运行pipeline
 *
 * @param request CreateIndexRequest
 * @return CreateIndexResponse
 */
async function createIndex(WorkspaceId: string, request: CreateIndexRequest): CreateIndexResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createIndexWithOptions(WorkspaceId, request, headers, runtime);
}

model CreateMemoryRequest {
  description?: string(name='description'),
}

model CreateMemoryResponseBody = {
  memoryId?: string(name='memoryId', example='6bff4f317a14442fbc9f73d29dbd5fc3'),
  requestId?: string(name='requestId', example='6a71f2d9-f1c9-913b-818b-114029103cad'),
}

model CreateMemoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMemoryResponseBody(name='body'),
}

/**
 * @summary 创建Memory
 *
 * @param request CreateMemoryRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateMemoryResponse
 */
async function createMemoryWithOptions(workspaceId: string, request: CreateMemoryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateMemoryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    query['description'] = request.description;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateMemory',
    version = '2023-12-29',
    protocol = 'HTTPS',
    pathname = `/${OpenApiUtil.getEncodeParam(workspaceId)}/memories`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建Memory
 *
 * @param request CreateMemoryRequest
 * @return CreateMemoryResponse
 */
async function createMemory(workspaceId: string, request: CreateMemoryRequest): CreateMemoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createMemoryWithOptions(workspaceId, request, headers, runtime);
}

model CreateMemoryNodeRequest {
  content?: string(name='content', description='This parameter is required.'),
}

model CreateMemoryNodeResponseBody = {
  memoryNodeId?: string(name='memoryNodeId', example='68de06c95368463a8be4a84efc872cc5'),
  requestId?: string(name='requestId', example='8C56C7AF-6573-19CE-B018-E05E1EDCF4C5'),
}

model CreateMemoryNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMemoryNodeResponseBody(name='body'),
}

/**
 * @summary 创建记忆Node
 *
 * @param request CreateMemoryNodeRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateMemoryNodeResponse
 */
async function createMemoryNodeWithOptions(workspaceId: string, memoryId: string, request: CreateMemoryNodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateMemoryNodeResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.content)) {
    query['content'] = request.content;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateMemoryNode',
    version = '2023-12-29',
    protocol = 'HTTPS',
    pathname = `/${OpenApiUtil.getEncodeParam(workspaceId)}/memories/${OpenApiUtil.getEncodeParam(memoryId)}/memoryNodes`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建记忆Node
 *
 * @param request CreateMemoryNodeRequest
 * @return CreateMemoryNodeResponse
 */
async function createMemoryNode(workspaceId: string, memoryId: string, request: CreateMemoryNodeRequest): CreateMemoryNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createMemoryNodeWithOptions(workspaceId, memoryId, request, headers, runtime);
}

model DeleteAgentResponseBody = {
  code?: string(name='code'),
  data?: string(name='data'),
  httpStatusCode?: int32(name='httpStatusCode'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
}

model DeleteAgentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAgentResponseBody(name='body'),
}

/**
 * @summary 删除智能体
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteAgentResponse
 */
async function deleteAgentWithOptions(workspaceId: string, appCode: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteAgentResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteAgent',
    version = '2023-12-29',
    protocol = 'HTTPS',
    pathname = `/${OpenApiUtil.getEncodeParam(workspaceId)}/application/agents/${OpenApiUtil.getEncodeParam(appCode)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除智能体
 *
 * @return DeleteAgentResponse
 */
async function deleteAgent(workspaceId: string, appCode: string): DeleteAgentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteAgentWithOptions(workspaceId, appCode, headers, runtime);
}

model DeleteCategoryResponseBody = {
  code?: string(name='Code', example='success'),
  data?: {
    categoryId?: string(name='CategoryId', example='cate_cdd11b1b79a74e8bbd675c356a91ee3XXXXXXXX'),
  }(name='Data', description='data'),
  message?: string(name='Message', example='workspace id is null or invalid.'),
  requestId?: string(name='RequestId', description='Id of the request', example='17204B98-xxxx-4F9A-8464-2446A84821CA'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model DeleteCategoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCategoryResponseBody(name='body'),
}

/**
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteCategoryResponse
 */
async function deleteCategoryWithOptions(CategoryId: string, WorkspaceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteCategoryResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteCategory',
    version = '2023-12-29',
    protocol = 'HTTPS',
    pathname = `/${OpenApiUtil.getEncodeParam(WorkspaceId)}/datacenter/category/${OpenApiUtil.getEncodeParam(CategoryId)}/`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @return DeleteCategoryResponse
 */
async function deleteCategory(CategoryId: string, WorkspaceId: string): DeleteCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteCategoryWithOptions(CategoryId, WorkspaceId, headers, runtime);
}

model DeleteFileResponseBody = {
  code?: string(name='Code', example='InvalidParameter'),
  data?: {
    fileId?: string(name='FileId', example='file_9a65732555b54d5ea10796ca5742ba22_XXXXXXXX'),
  }(name='Data'),
  message?: string(name='Message', example='Current file status does not support delete.'),
  requestId?: string(name='RequestId', description='Id of the request', example='17204B98-xxxx-4F9A-8464-2446A84821CA'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model DeleteFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFileResponseBody(name='body'),
}

/**
 * @summary 删除文档
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteFileResponse
 */
async function deleteFileWithOptions(FileId: string, WorkspaceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteFileResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteFile',
    version = '2023-12-29',
    protocol = 'HTTPS',
    pathname = `/${OpenApiUtil.getEncodeParam(WorkspaceId)}/datacenter/file/${OpenApiUtil.getEncodeParam(FileId)}/`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除文档
 *
 * @return DeleteFileResponse
 */
async function deleteFile(FileId: string, WorkspaceId: string): DeleteFileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteFileWithOptions(FileId, WorkspaceId, headers, runtime);
}

model DeleteIndexRequest {
  indexId?: string(name='IndexId', description='This parameter is required.', example='f89ie0fj5a'),
}

model DeleteIndexResponseBody = {
  code?: string(name='Code', example='Index.InvalidParameter'),
  message?: string(name='Message', example='Required parameter(%s) missing or invalid, please check the request parameters.'),
  requestId?: string(name='RequestId', description='Id of the request', example='17204B98-xxxx-4F9A-8464-2446A84821CA'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model DeleteIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIndexResponseBody(name='body'),
}

/**
 * @summary 删除Index
 *
 * @param request DeleteIndexRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteIndexResponse
 */
async function deleteIndexWithOptions(WorkspaceId: string, request: DeleteIndexRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteIndexResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.indexId)) {
    query['IndexId'] = request.indexId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteIndex',
    version = '2023-12-29',
    protocol = 'HTTPS',
    pathname = `/${OpenApiUtil.getEncodeParam(WorkspaceId)}/index/delete`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除Index
 *
 * @param request DeleteIndexRequest
 * @return DeleteIndexResponse
 */
async function deleteIndex(WorkspaceId: string, request: DeleteIndexRequest): DeleteIndexResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteIndexWithOptions(WorkspaceId, request, headers, runtime);
}

model DeleteIndexDocumentRequest {
  documentIds?: [ string ](name='DocumentIds', description='This parameter is required.'),
  indexId?: string(name='IndexId', description='This parameter is required.', example='79c0aly8zw'),
}

model DeleteIndexDocumentShrinkRequest {
  documentIdsShrink?: string(name='DocumentIds', description='This parameter is required.'),
  indexId?: string(name='IndexId', description='This parameter is required.', example='79c0aly8zw'),
}

model DeleteIndexDocumentResponseBody = {
  code?: string(name='Code', example='Index.InvalidParameter'),
  data?: {
    deletedDocument?: [ string ](name='DeletedDocument'),
  }(name='Data'),
  message?: string(name='Message', example='Required parameter(%s) missing or invalid, please check the request parameters.'),
  requestId?: string(name='RequestId', description='Id of the request', example='17204B98-xxxx-4F9A-8464-2446A84821CA'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model DeleteIndexDocumentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIndexDocumentResponseBody(name='body'),
}

/**
 * @summary 删除index doc
 *
 * @param tmpReq DeleteIndexDocumentRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteIndexDocumentResponse
 */
async function deleteIndexDocumentWithOptions(WorkspaceId: string, tmpReq: DeleteIndexDocumentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteIndexDocumentResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteIndexDocumentShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.documentIds)) {
    request.documentIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.documentIds, 'DocumentIds', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.documentIdsShrink)) {
    query['DocumentIds'] = request.documentIdsShrink;
  }
  if (!Util.isUnset(request.indexId)) {
    query['IndexId'] = request.indexId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteIndexDocument',
    version = '2023-12-29',
    protocol = 'HTTPS',
    pathname = `/${OpenApiUtil.getEncodeParam(WorkspaceId)}/index/delete_index_document`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除index doc
 *
 * @param request DeleteIndexDocumentRequest
 * @return DeleteIndexDocumentResponse
 */
async function deleteIndexDocument(WorkspaceId: string, request: DeleteIndexDocumentRequest): DeleteIndexDocumentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteIndexDocumentWithOptions(WorkspaceId, request, headers, runtime);
}

model DeleteMemoryResponseBody = {
  requestId?: string(name='requestId', example='6a71f2d9-f1c9-913b-818b-114029103cad'),
}

model DeleteMemoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMemoryResponseBody(name='body'),
}

/**
 * @summary 删除memory
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteMemoryResponse
 */
async function deleteMemoryWithOptions(workspaceId: string, memoryId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteMemoryResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteMemory',
    version = '2023-12-29',
    protocol = 'HTTPS',
    pathname = `/${OpenApiUtil.getEncodeParam(workspaceId)}/memories/${OpenApiUtil.getEncodeParam(memoryId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除memory
 *
 * @return DeleteMemoryResponse
 */
async function deleteMemory(workspaceId: string, memoryId: string): DeleteMemoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteMemoryWithOptions(workspaceId, memoryId, headers, runtime);
}

model DeleteMemoryNodeResponseBody = {
  requestId?: string(name='requestId', example='8C56C7AF-6573-19CE-B018-E05E1EDCF4C5'),
}

model DeleteMemoryNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMemoryNodeResponseBody(name='body'),
}

/**
 * @summary 删除记忆Node
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteMemoryNodeResponse
 */
async function deleteMemoryNodeWithOptions(workspaceId: string, memoryId: string, memoryNodeId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteMemoryNodeResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteMemoryNode',
    version = '2023-12-29',
    protocol = 'HTTPS',
    pathname = `/${OpenApiUtil.getEncodeParam(workspaceId)}/memories/${OpenApiUtil.getEncodeParam(memoryId)}/memoryNodes/${OpenApiUtil.getEncodeParam(memoryNodeId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除记忆Node
 *
 * @return DeleteMemoryNodeResponse
 */
async function deleteMemoryNode(workspaceId: string, memoryId: string, memoryNodeId: string): DeleteMemoryNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteMemoryNodeWithOptions(workspaceId, memoryId, memoryNodeId, headers, runtime);
}

model DescribeFileResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    categoryId?: string(name='CategoryId', example='cate_cdd11b1b79a74e8bbd675c356a91ee3XXXXXXXX'),
    createTime?: string(name='CreateTime', example='2024-05-26 12:45:43'),
    fileId?: string(name='FileId', example='file_9a65732555b54d5ea10796ca5742ba22_XXXXXXXX'),
    fileName?: string(name='FileName', example='test.pdf'),
    fileType?: string(name='FileType', example='pdf'),
    parser?: string(name='Parser', example='DASHSCOPE_DOCMIND'),
    sizeInBytes?: long(name='SizeInBytes', example='1234'),
    status?: string(name='Status', example='PARSE_SUCCESS'),
  }(name='Data'),
  message?: string(name='Message', example='Requests throttling triggered.'),
  requestId?: string(name='RequestId', example='17204B98-xxxx-4F9A-8464-2446A84821CA'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model DescribeFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFileResponseBody(name='body'),
}

/**
 * @summary 获取文档基本信息，包括文档名称、类型、状态等。
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeFileResponse
 */
async function describeFileWithOptions(WorkspaceId: string, FileId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeFileResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeFile',
    version = '2023-12-29',
    protocol = 'HTTPS',
    pathname = `/${OpenApiUtil.getEncodeParam(WorkspaceId)}/datacenter/file/${OpenApiUtil.getEncodeParam(FileId)}/`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取文档基本信息，包括文档名称、类型、状态等。
 *
 * @return DescribeFileResponse
 */
async function describeFile(WorkspaceId: string, FileId: string): DescribeFileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeFileWithOptions(WorkspaceId, FileId, headers, runtime);
}

model GetIndexJobStatusRequest {
  indexId?: string(name='IndexId', description='This parameter is required.', example='79c0aly8zw'),
  jobId?: string(name='JobId', description='This parameter is required.', example='20230718xxxx-146c93bf'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='pageSize'),
}

model GetIndexJobStatusResponseBody = {
  code?: string(name='Code', example='Index.Forbidden'),
  data?: {
    documents?: [ 
      {
        code?: string(name='Code', example='Index.Document.ChunkError'),
        docId?: string(name='DocId', example='file_9a65732555b54d5ea10796ca5742ba22_XXXXXXXX'),
        docName?: string(name='DocName'),
        message?: string(name='Message', example='document parse error'),
        status?: string(name='Status', example='RUNNING'),
      }
    ](name='Documents'),
    jobId?: string(name='JobId', example='66122af12a4e45ddae6bd6c845556647'),
    status?: string(name='Status', example='PENDING'),
  }(name='Data'),
  message?: string(name='Message', example='User not authorized to operate on the specified resource.'),
  requestId?: string(name='RequestId', example='17204B98-xxxx-4F9A-8464-2446A84821CA'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model GetIndexJobStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetIndexJobStatusResponseBody(name='body'),
}

/**
 * @summary 获取Index运行状态
 *
 * @param request GetIndexJobStatusRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetIndexJobStatusResponse
 */
async function getIndexJobStatusWithOptions(WorkspaceId: string, request: GetIndexJobStatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetIndexJobStatusResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.indexId)) {
    query['IndexId'] = request.indexId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetIndexJobStatus',
    version = '2023-12-29',
    protocol = 'HTTPS',
    pathname = `/${OpenApiUtil.getEncodeParam(WorkspaceId)}/index/job/status`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取Index运行状态
 *
 * @param request GetIndexJobStatusRequest
 * @return GetIndexJobStatusResponse
 */
async function getIndexJobStatus(WorkspaceId: string, request: GetIndexJobStatusRequest): GetIndexJobStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getIndexJobStatusWithOptions(WorkspaceId, request, headers, runtime);
}

model GetMemoryResponseBody = {
  description?: string(name='description'),
  memoryId?: string(name='memoryId', example='6bff4f317a14442fbc9f73d29dbd5fc3'),
  requestId?: string(name='requestId', example='6a71f2d9-f1c9-913b-818b-114029103cad'),
  workspaceId?: string(name='workspaceId', example='llm-us9hjmt32nysdm5v'),
}

model GetMemoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMemoryResponseBody(name='body'),
}

/**
 * @summary 获取memory
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetMemoryResponse
 */
async function getMemoryWithOptions(workspaceId: string, memoryId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetMemoryResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetMemory',
    version = '2023-12-29',
    protocol = 'HTTPS',
    pathname = `/${OpenApiUtil.getEncodeParam(workspaceId)}/memories/${OpenApiUtil.getEncodeParam(memoryId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取memory
 *
 * @return GetMemoryResponse
 */
async function getMemory(workspaceId: string, memoryId: string): GetMemoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getMemoryWithOptions(workspaceId, memoryId, headers, runtime);
}

model GetMemoryNodeResponseBody = {
  content?: string(name='content'),
  memoryId?: string(name='memoryId', example='6bff4f317a14442fbc9f73d29dbd5fc3'),
  memoryNodeId?: string(name='memoryNodeId', example='68de06c95368463a8be4a84efc872cc5'),
  requestId?: string(name='requestId', example='8C56C7AF-6573-19CE-B018-E05E1EDCF4C5'),
  workspaceId?: string(name='workspaceId', example='llm-us9hjmt32nysdm5v'),
}

model GetMemoryNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMemoryNodeResponseBody(name='body'),
}

/**
 * @summary 获取记忆Node
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetMemoryNodeResponse
 */
async function getMemoryNodeWithOptions(workspaceId: string, memoryId: string, memoryNodeId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetMemoryNodeResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetMemoryNode',
    version = '2023-12-29',
    protocol = 'HTTPS',
    pathname = `/${OpenApiUtil.getEncodeParam(workspaceId)}/memories/${OpenApiUtil.getEncodeParam(memoryId)}/memoryNodes/${OpenApiUtil.getEncodeParam(memoryNodeId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取记忆Node
 *
 * @return GetMemoryNodeResponse
 */
async function getMemoryNode(workspaceId: string, memoryId: string, memoryNodeId: string): GetMemoryNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getMemoryNodeWithOptions(workspaceId, memoryId, memoryNodeId, headers, runtime);
}

model GetPublishedAgentResponseBody = {
  code?: string(name='code'),
  data?: {
    applicationConfig?: {
      historyConfig?: {
        enableAdbRecord?: boolean(name='enableAdbRecord'),
        enableRecord?: boolean(name='enableRecord'),
        instanceId?: string(name='instanceId'),
        region?: string(name='region'),
        storeCode?: string(name='storeCode'),
      }(name='historyConfig'),
      longTermMemory?: {
        enable?: boolean(name='enable'),
      }(name='longTermMemory'),
      parameters?: {
        dialogRound?: int32(name='dialogRound'),
        maxTokens?: int32(name='maxTokens'),
        temperature?: double(name='temperature'),
      }(name='parameters'),
      ragConfig?: {
        enableCitation?: boolean(name='enableCitation'),
        enableSearch?: boolean(name='enableSearch'),
        knowledgeBaseCodeList?: [ string ](name='knowledgeBaseCodeList'),
        topK?: int32(name='topK'),
      }(name='ragConfig'),
      security?: {
        processingStrategy?: string(name='processingStrategy'),
      }(name='security'),
      tools?: [ 
        {
          type?: string(name='type'),
        }
      ](name='tools'),
      workFlows?: [ 
        {
          type?: string(name='type'),
        }
      ](name='workFlows'),
    }(name='applicationConfig'),
    code?: string(name='code'),
    instructions?: string(name='instructions'),
    modelId?: string(name='modelId'),
    name?: string(name='name'),
  }(name='data'),
  httpStatusCode?: int32(name='httpStatusCode'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
}

model GetPublishedAgentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPublishedAgentResponseBody(name='body'),
}

/**
 * @summary 获取发布态智能体应用
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetPublishedAgentResponse
 */
async function getPublishedAgentWithOptions(workspaceId: string, appCode: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetPublishedAgentResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetPublishedAgent',
    version = '2023-12-29',
    protocol = 'HTTPS',
    pathname = `/${OpenApiUtil.getEncodeParam(workspaceId)}/application/agents/${OpenApiUtil.getEncodeParam(appCode)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取发布态智能体应用
 *
 * @return GetPublishedAgentResponse
 */
async function getPublishedAgent(workspaceId: string, appCode: string): GetPublishedAgentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getPublishedAgentWithOptions(workspaceId, appCode, headers, runtime);
}

model ListCategoryRequest {
  categoryType?: string(name='CategoryType', description='This parameter is required.', example='UNSTRUCTURED'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='AAAAAdH70eOCSCKtacdomNzak4U='),
  parentCategoryId?: string(name='ParentCategoryId', example='cate_cdd11b1b79a74e8bbd675c356a91ee3XXXXXXXX'),
}

model ListCategoryResponseBody = {
  code?: string(name='Code', example='success'),
  data?: {
    categoryList?: [ 
      {
        categoryId?: string(name='CategoryId', example='cate_cdd11b1b79a74e8bbd675c356a91ee3XXXXXXXX'),
        categoryName?: string(name='CategoryName'),
        categoryType?: string(name='CategoryType', example='UNSTRUCTURED'),
        isDefault?: boolean(name='IsDefault', example='true'),
        parentCategoryId?: string(name='ParentCategoryId', example='cate_addd11b1b79a74e8bbd675c356a91ee3XXXXXXXX'),
      }
    ](name='CategoryList'),
    hasNext?: boolean(name='HasNext', example='true'),
    maxResults?: int32(name='MaxResults', example='20'),
    nextToken?: string(name='NextToken', example='AAAAALHWGpGoYCcYMxiFfmlhvh7Z4G8jiXR6IjHYd+M9WQVJ'),
    totalCount?: int32(name='TotalCount', example='20'),
  }(name='Data'),
  message?: string(name='Message', example='workspace id is null or invalid.'),
  requestId?: string(name='RequestId', description='Id of the request', example='17204B98-xxxx-4F9A-8464-2446A84821CA'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model ListCategoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCategoryResponseBody(name='body'),
}

/**
 * @summary ListCategory
 *
 * @param request ListCategoryRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListCategoryResponse
 */
async function listCategoryWithOptions(WorkspaceId: string, request: ListCategoryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListCategoryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.categoryType)) {
    body['CategoryType'] = request.categoryType;
  }
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.parentCategoryId)) {
    body['ParentCategoryId'] = request.parentCategoryId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListCategory',
    version = '2023-12-29',
    protocol = 'HTTPS',
    pathname = `/${OpenApiUtil.getEncodeParam(WorkspaceId)}/datacenter/categories`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary ListCategory
 *
 * @param request ListCategoryRequest
 * @return ListCategoryResponse
 */
async function listCategory(WorkspaceId: string, request: ListCategoryRequest): ListCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listCategoryWithOptions(WorkspaceId, request, headers, runtime);
}

model ListChunksRequest {
  fields?: [ string ](name='Fields'),
  filed?: string(name='Filed', example='file_5f03dfea56da4050ab68d61871fc4cb3_10151493'),
  indexId?: string(name='IndexId', description='This parameter is required.', example='otoru9en4v'),
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
}

model ListChunksResponseBody = {
  code?: string(name='Code', example='Index.InvalidParameter'),
  data?: {
    nodes?: [ 
      {
        metadata?: any(name='Metadata'),
        score?: double(name='Score', example='0.3'),
        text?: string(name='Text'),
      }
    ](name='Nodes'),
    total?: long(name='Total', example='16'),
  }(name='Data'),
  message?: string(name='Message', example='Required parameter(%s) missing or invalid, please check the request parameters.'),
  requestId?: string(name='RequestId', description='Id of the request', example='8F97A63B-55F1-527F-9D6E-467B6A7E8CF1'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model ListChunksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListChunksResponseBody(name='body'),
}

/**
 * @summary Chunk
 *
 * @param request ListChunksRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListChunksResponse
 */
async function listChunksWithOptions(WorkspaceId: string, request: ListChunksRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListChunksResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.fields)) {
    body['Fields'] = request.fields;
  }
  if (!Util.isUnset(request.filed)) {
    body['Filed'] = request.filed;
  }
  if (!Util.isUnset(request.indexId)) {
    body['IndexId'] = request.indexId;
  }
  if (!Util.isUnset(request.pageNum)) {
    body['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListChunks',
    version = '2023-12-29',
    protocol = 'HTTPS',
    pathname = `/${OpenApiUtil.getEncodeParam(WorkspaceId)}/index/list_chunks`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Chunk
 *
 * @param request ListChunksRequest
 * @return ListChunksResponse
 */
async function listChunks(WorkspaceId: string, request: ListChunksRequest): ListChunksResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listChunksWithOptions(WorkspaceId, request, headers, runtime);
}

model ListFileRequest {
  categoryId?: string(name='CategoryId', description='This parameter is required.', example='cate_cdd11b1b79a74e8bbd675c356a91ee3510024405'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='AAAAAdH70eOCSCKtacdomNzak4U='),
}

model ListFileResponseBody = {
  code?: string(name='Code', example='success'),
  data?: {
    fileList?: [ 
      {
        categoryId?: string(name='CategoryId', example='cate_cdd11b1b79a74e8bbd675c356a91ee3510024405'),
        createTime?: string(name='CreateTime', example='2023-08-18 11:03:35'),
        fileId?: string(name='FileId', example='file_5ff599b3455a45db8c41b0054b361518_10098576'),
        fileName?: string(name='FileName', example='auto-test-1721096109278.pdf'),
        fileType?: string(name='FileType', example='docx'),
        parser?: string(name='Parser', example='DASHSCOPE_DOCMIND'),
        sizeInBytes?: long(name='SizeInBytes', example='512'),
        status?: string(name='Status', example='200'),
      }
    ](name='FileList'),
    hasNext?: boolean(name='HasNext', example='true'),
    maxResults?: int32(name='MaxResults', example='20'),
    nextToken?: string(name='NextToken', example='4jzbJk9J6lNeuXD9hP0viA=='),
    totalCount?: int32(name='TotalCount', example='48'),
  }(name='Data'),
  message?: string(name='Message', example='Requests throttling triggered.'),
  requestId?: string(name='RequestId', description='Id of the request', example='8F97A63B-55F1-527F-9D6E-467B6A7E8CF1'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model ListFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFileResponseBody(name='body'),
}

/**
 * @summary 获取文档列表
 *
 * @param request ListFileRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListFileResponse
 */
async function listFileWithOptions(WorkspaceId: string, request: ListFileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListFileResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.categoryId)) {
    query['CategoryId'] = request.categoryId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListFile',
    version = '2023-12-29',
    protocol = 'HTTPS',
    pathname = `/${OpenApiUtil.getEncodeParam(WorkspaceId)}/datacenter/files`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取文档列表
 *
 * @param request ListFileRequest
 * @return ListFileResponse
 */
async function listFile(WorkspaceId: string, request: ListFileRequest): ListFileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listFileWithOptions(WorkspaceId, request, headers, runtime);
}

model ListIndexDocumentsRequest {
  documentName?: string(name='DocumentName'),
  documentStatus?: string(name='DocumentStatus', example='FINISH'),
  indexId?: string(name='IndexId', description='This parameter is required.', example='79c0aly8zw'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
}

model ListIndexDocumentsResponseBody = {
  code?: string(name='Code', example='InvalidParameter'),
  data?: {
    documents?: [ 
      {
        code?: string(name='Code', example='110002'),
        documentType?: string(name='DocumentType', example='pdf'),
        id?: string(name='Id', example='doc_c134aa2073204a5d936d870bf960f56a10024701'),
        message?: string(name='Message', example='check fileUrlKey[file_path] / fileNameKey[null] / fileExtensionKey[file_extension] is invalid'),
        name?: string(name='Name'),
        size?: int32(name='Size', example='996764'),
        sourceId?: string(name='SourceId', example='cate_21a407a3372c4ba7aedc649709143f0c10021401'),
        status?: string(name='Status', example='RUNNING'),
      }
    ](name='Documents'),
    indexId?: string(name='IndexId', example='pno97tn8iu'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: long(name='TotalCount', example='2437'),
  }(name='Data'),
  message?: string(name='Message', example='Required parameter(%s) missing or invalid, please check the request parameters.'),
  requestId?: string(name='RequestId', description='Id of the request', example='35A267BF-xxxx-54DB-8394-AA3B0742D833'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model ListIndexDocumentsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIndexDocumentsResponseBody(name='body'),
}

/**
 * @summary 查询Index文件
 *
 * @param request ListIndexDocumentsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListIndexDocumentsResponse
 */
async function listIndexDocumentsWithOptions(WorkspaceId: string, request: ListIndexDocumentsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListIndexDocumentsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.documentName)) {
    query['DocumentName'] = request.documentName;
  }
  if (!Util.isUnset(request.documentStatus)) {
    query['DocumentStatus'] = request.documentStatus;
  }
  if (!Util.isUnset(request.indexId)) {
    query['IndexId'] = request.indexId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListIndexDocuments',
    version = '2023-12-29',
    protocol = 'HTTPS',
    pathname = `/${OpenApiUtil.getEncodeParam(WorkspaceId)}/index/list_index_documents`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询Index文件
 *
 * @param request ListIndexDocumentsRequest
 * @return ListIndexDocumentsResponse
 */
async function listIndexDocuments(WorkspaceId: string, request: ListIndexDocumentsRequest): ListIndexDocumentsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listIndexDocumentsWithOptions(WorkspaceId, request, headers, runtime);
}

model ListIndicesRequest {
  indexName?: string(name='IndexName', example='idx_status_score'),
  pageNumber?: string(name='PageNumber', example='1'),
  pageSize?: string(name='PageSize', example='10'),
}

model ListIndicesResponseBody = {
  code?: string(name='Code', example='Index.InvalidParameter'),
  data?: {
    indices?: [ 
      {
        chunkSize?: int32(name='ChunkSize', example='5'),
        description?: string(name='Description', example='If each RAM user belongs to a RAM group, the configuration is considered compliant.'),
        documentIds?: [ string ](name='DocumentIds'),
        embeddingModelName?: string(name='EmbeddingModelName', example='conv-rewrite-qwen-1.8b'),
        id?: string(name='Id', example='259899'),
        name?: string(name='Name', example='temp_mUB4j'),
        overlapSize?: int32(name='OverlapSize', example='10'),
        rerankMinScore?: string(name='RerankMinScore', example='0.01'),
        rerankModelName?: string(name='RerankModelName', example='gte-rerank-hybrid'),
        separator?: string(name='Separator', example='\\\\n'),
        sinkInstanceId?: string(name='SinkInstanceId', example='gp-bp1gq62t1788yw2ol'),
        sinkRegion?: string(name='SinkRegion', example='cn-hangzhou'),
        sinkType?: string(name='SinkType', example='es'),
        sourceType?: string(name='SourceType', example='DATA_CENTER_FILE'),
        structureType?: string(name='StructureType', example='structured'),
      }
    ](name='Indices'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='48'),
  }(name='Data'),
  message?: string(name='Message', example='Required parameter(%s) missing or invalid, please check the request parameters.'),
  requestId?: string(name='RequestId', description='Id of the request', example='17204B98-xxxx-4F9A-8464-2446A84821CA'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model ListIndicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIndicesResponseBody(name='body'),
}

/**
 * @summary 查询pipeline
 *
 * @param request ListIndicesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListIndicesResponse
 */
async function listIndicesWithOptions(WorkspaceId: string, request: ListIndicesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListIndicesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.indexName)) {
    query['IndexName'] = request.indexName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListIndices',
    version = '2023-12-29',
    protocol = 'HTTPS',
    pathname = `/${OpenApiUtil.getEncodeParam(WorkspaceId)}/index/list_indices`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询pipeline
 *
 * @param request ListIndicesRequest
 * @return ListIndicesResponse
 */
async function listIndices(WorkspaceId: string, request: ListIndicesRequest): ListIndicesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listIndicesWithOptions(WorkspaceId, request, headers, runtime);
}

model ListMemoriesRequest {
  maxResults?: int32(name='maxResults', example='10'),
  nextToken?: string(name='nextToken', example='dc270401186b433f975d7e1faaa34e0e'),
}

model ListMemoriesResponseBody = {
  maxResults?: int32(name='maxResults', example='10'),
  memories?: [ 
    {
      description?: string(name='description'),
      memoryId?: string(name='memoryId', example='3fc531f4519444beaafffa4538f60667'),
    }
  ](name='memories'),
  nextToken?: string(name='nextToken', example='dc270401186b433f975d7e1faaa34e0e'),
  requestId?: string(name='requestId', example='6a71f2d9-f1c9-913b-818b-114029103cad'),
  totalCount?: int32(name='totalCount', example='105'),
  workspaceId?: string(name='workspaceId', example='llm-us9hjmt32nysdm5v'),
}

model ListMemoriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMemoriesResponseBody(name='body'),
}

/**
 * @summary 获取memory
 *
 * @param request ListMemoriesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListMemoriesResponse
 */
async function listMemoriesWithOptions(workspaceId: string, request: ListMemoriesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListMemoriesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['nextToken'] = request.nextToken;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListMemories',
    version = '2023-12-29',
    protocol = 'HTTPS',
    pathname = `/${OpenApiUtil.getEncodeParam(workspaceId)}/memories`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取memory
 *
 * @param request ListMemoriesRequest
 * @return ListMemoriesResponse
 */
async function listMemories(workspaceId: string, request: ListMemoriesRequest): ListMemoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listMemoriesWithOptions(workspaceId, request, headers, runtime);
}

model ListMemoryNodesRequest {
  maxResults?: int32(name='maxResults', example='20'),
  nextToken?: string(name='nextToken', example='dc270401186b433f975d7e1faaa34e0e'),
}

model ListMemoryNodesResponseBody = {
  maxResults?: int32(name='maxResults', example='20'),
  memoryNodes?: [ 
    {
      content?: string(name='content'),
      memoryNodeId?: string(name='memoryNodeId', example='68de06c95368463a8be4a84efc872cc5'),
    }
  ](name='memoryNodes'),
  nextToken?: string(name='nextToken', example='dc270401186b433f975d7e1faaa34e0e'),
  requestId?: string(name='requestId', example='6a71f2d9-f1c9-913b-818b-114029103cad'),
  totalCount?: int32(name='totalCount', example='100'),
}

model ListMemoryNodesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMemoryNodesResponseBody(name='body'),
}

/**
 * @summary 获取记忆Node列表
 *
 * @param request ListMemoryNodesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListMemoryNodesResponse
 */
async function listMemoryNodesWithOptions(workspaceId: string, memoryId: string, request: ListMemoryNodesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListMemoryNodesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['nextToken'] = request.nextToken;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListMemoryNodes',
    version = '2023-12-29',
    protocol = 'HTTPS',
    pathname = `/${OpenApiUtil.getEncodeParam(workspaceId)}/memories/${OpenApiUtil.getEncodeParam(memoryId)}/memoryNodes`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取记忆Node列表
 *
 * @param request ListMemoryNodesRequest
 * @return ListMemoryNodesResponse
 */
async function listMemoryNodes(workspaceId: string, memoryId: string, request: ListMemoryNodesRequest): ListMemoryNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listMemoryNodesWithOptions(workspaceId, memoryId, request, headers, runtime);
}

model ListPublishedAgentRequest {
  pageNo?: int32(name='pageNo'),
  pageSize?: int32(name='pageSize'),
}

model ListPublishedAgentResponseBody = {
  code?: string(name='code'),
  data?: {
    list?: [ 
      {
        applicationConfig?: {
          historyConfig?: {
            enableAdbRecord?: boolean(name='enableAdbRecord'),
            enableRecord?: boolean(name='enableRecord'),
            instanceId?: string(name='instanceId'),
            region?: string(name='region'),
            storeCode?: string(name='storeCode'),
          }(name='historyConfig'),
          longTermMemory?: {
            enable?: boolean(name='enable'),
          }(name='longTermMemory'),
          parameters?: {
            dialogRound?: int32(name='dialogRound'),
            maxTokens?: int32(name='maxTokens'),
            temperature?: double(name='temperature'),
          }(name='parameters'),
          ragConfig?: {
            enableCitation?: boolean(name='enableCitation'),
            enableSearch?: boolean(name='enableSearch'),
            knowledgeBaseCodeList?: [ string ](name='knowledgeBaseCodeList'),
            topK?: int32(name='topK'),
          }(name='ragConfig'),
          security?: {
            processingStrategy?: string(name='processingStrategy'),
          }(name='security'),
          tools?: [ 
            {
              type?: string(name='type'),
            }
          ](name='tools'),
          workFlows?: [ 
            {
              type?: string(name='type'),
            }
          ](name='workFlows'),
        }(name='applicationConfig'),
        code?: string(name='code'),
        instructions?: string(name='instructions'),
        modelId?: string(name='modelId'),
        name?: string(name='name'),
      }
    ](name='list'),
    pageNo?: int32(name='pageNo'),
    pageSize?: int32(name='pageSize'),
    total?: int32(name='total'),
  }(name='data'),
  httpStatusCode?: int32(name='httpStatusCode'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  success?: string(name='success'),
}

model ListPublishedAgentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPublishedAgentResponseBody(name='body'),
}

/**
 * @summary 查询已发布的智能体应用列表
 *
 * @param request ListPublishedAgentRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListPublishedAgentResponse
 */
async function listPublishedAgentWithOptions(workspaceId: string, request: ListPublishedAgentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListPublishedAgentResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.pageNo)) {
    query['pageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPublishedAgent',
    version = '2023-12-29',
    protocol = 'HTTPS',
    pathname = `/${OpenApiUtil.getEncodeParam(workspaceId)}/application/agents`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询已发布的智能体应用列表
 *
 * @param request ListPublishedAgentRequest
 * @return ListPublishedAgentResponse
 */
async function listPublishedAgent(workspaceId: string, request: ListPublishedAgentRequest): ListPublishedAgentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listPublishedAgentWithOptions(workspaceId, request, headers, runtime);
}

model RetrieveRequest {
  denseSimilarityTopK?: int32(name='DenseSimilarityTopK', example='100'),
  enableReranking?: boolean(name='EnableReranking', example='true'),
  enableRewrite?: boolean(name='EnableRewrite', example='false'),
  indexId?: string(name='IndexId', description='This parameter is required.', example='5pwe0m2g6t'),
  query?: string(name='Query'),
  rerank?: [ 
    {
      modelName?: string(name='ModelName', example='gte-rerank-hybrid'),
    }
  ](name='Rerank'),
  rerankMinScore?: float(name='RerankMinScore', example='0.20'),
  rerankTopN?: int32(name='RerankTopN', example='5'),
  rewrite?: [ 
    {
      modelName?: string(name='ModelName'),
    }
  ](name='Rewrite'),
  saveRetrieverHistory?: boolean(name='SaveRetrieverHistory', example='false'),
  searchFilters?: [ map[string]string ](name='SearchFilters'),
  sparseSimilarityTopK?: int32(name='SparseSimilarityTopK', example='100'),
}

model RetrieveShrinkRequest {
  denseSimilarityTopK?: int32(name='DenseSimilarityTopK', example='100'),
  enableReranking?: boolean(name='EnableReranking', example='true'),
  enableRewrite?: boolean(name='EnableRewrite', example='false'),
  indexId?: string(name='IndexId', description='This parameter is required.', example='5pwe0m2g6t'),
  query?: string(name='Query'),
  rerankShrink?: string(name='Rerank'),
  rerankMinScore?: float(name='RerankMinScore', example='0.20'),
  rerankTopN?: int32(name='RerankTopN', example='5'),
  rewriteShrink?: string(name='Rewrite'),
  saveRetrieverHistory?: boolean(name='SaveRetrieverHistory', example='false'),
  searchFiltersShrink?: string(name='SearchFilters'),
  sparseSimilarityTopK?: int32(name='SparseSimilarityTopK', example='100'),
}

model RetrieveResponseBody = {
  code?: string(name='Code', example='Index.InvalidParameter'),
  data?: {
    nodes?: [ 
      {
        metadata?: any(name='Metadata'),
        score?: double(name='Score', example='0.3'),
        text?: string(name='Text'),
      }
    ](name='Nodes'),
  }(name='Data'),
  message?: string(name='Message', example='Required parameter(%s) missing or invalid, please check the request parameters.'),
  requestId?: string(name='RequestId', description='Id of the request', example='17204B98-7734-4F9A-8464-2446A84821CA'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model RetrieveResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RetrieveResponseBody(name='body'),
}

/**
 * @summary 召回测试
 *
 * @param tmpReq RetrieveRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return RetrieveResponse
 */
async function retrieveWithOptions(WorkspaceId: string, tmpReq: RetrieveRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RetrieveResponse {
  Util.validateModel(tmpReq);
  var request = new RetrieveShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.rerank)) {
    request.rerankShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.rerank, 'Rerank', 'json');
  }
  if (!Util.isUnset(tmpReq.rewrite)) {
    request.rewriteShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.rewrite, 'Rewrite', 'json');
  }
  if (!Util.isUnset(tmpReq.searchFilters)) {
    request.searchFiltersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.searchFilters, 'SearchFilters', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.denseSimilarityTopK)) {
    query['DenseSimilarityTopK'] = request.denseSimilarityTopK;
  }
  if (!Util.isUnset(request.enableReranking)) {
    query['EnableReranking'] = request.enableReranking;
  }
  if (!Util.isUnset(request.enableRewrite)) {
    query['EnableRewrite'] = request.enableRewrite;
  }
  if (!Util.isUnset(request.indexId)) {
    query['IndexId'] = request.indexId;
  }
  if (!Util.isUnset(request.query)) {
    query['Query'] = request.query;
  }
  if (!Util.isUnset(request.rerankShrink)) {
    query['Rerank'] = request.rerankShrink;
  }
  if (!Util.isUnset(request.rerankMinScore)) {
    query['RerankMinScore'] = request.rerankMinScore;
  }
  if (!Util.isUnset(request.rerankTopN)) {
    query['RerankTopN'] = request.rerankTopN;
  }
  if (!Util.isUnset(request.rewriteShrink)) {
    query['Rewrite'] = request.rewriteShrink;
  }
  if (!Util.isUnset(request.saveRetrieverHistory)) {
    query['SaveRetrieverHistory'] = request.saveRetrieverHistory;
  }
  if (!Util.isUnset(request.searchFiltersShrink)) {
    query['SearchFilters'] = request.searchFiltersShrink;
  }
  if (!Util.isUnset(request.sparseSimilarityTopK)) {
    query['SparseSimilarityTopK'] = request.sparseSimilarityTopK;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'Retrieve',
    version = '2023-12-29',
    protocol = 'HTTPS',
    pathname = `/${OpenApiUtil.getEncodeParam(WorkspaceId)}/index/retrieve`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 召回测试
 *
 * @param request RetrieveRequest
 * @return RetrieveResponse
 */
async function retrieve(WorkspaceId: string, request: RetrieveRequest): RetrieveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return retrieveWithOptions(WorkspaceId, request, headers, runtime);
}

model SubmitIndexAddDocumentsJobRequest {
  categoryIds?: [ string ](name='CategoryIds'),
  documentIds?: [ string ](name='DocumentIds'),
  indexId?: string(name='IndexId', description='This parameter is required.', example='79c0aly8zw'),
  sourceType?: string(name='SourceType', description='This parameter is required.', example='DATA_CENTER_FILE'),
}

model SubmitIndexAddDocumentsJobShrinkRequest {
  categoryIdsShrink?: string(name='CategoryIds'),
  documentIdsShrink?: string(name='DocumentIds'),
  indexId?: string(name='IndexId', description='This parameter is required.', example='79c0aly8zw'),
  sourceType?: string(name='SourceType', description='This parameter is required.', example='DATA_CENTER_FILE'),
}

model SubmitIndexAddDocumentsJobResponseBody = {
  code?: string(name='Code', example='Index.InvalidParameter'),
  data?: {
    id?: string(name='Id', example='42687eb254a34802bed398357f5498ae'),
  }(name='Data'),
  message?: string(name='Message', example='Required parameter(%s) missing or invalid, please check the request parameters.'),
  requestId?: string(name='RequestId', description='Id of the request', example='778C0B3B-03C1-5FC1-A947-36EDD13606AB'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model SubmitIndexAddDocumentsJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitIndexAddDocumentsJobResponseBody(name='body'),
}

/**
 * @summary 知识索引
 *
 * @param tmpReq SubmitIndexAddDocumentsJobRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitIndexAddDocumentsJobResponse
 */
async function submitIndexAddDocumentsJobWithOptions(WorkspaceId: string, tmpReq: SubmitIndexAddDocumentsJobRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SubmitIndexAddDocumentsJobResponse {
  Util.validateModel(tmpReq);
  var request = new SubmitIndexAddDocumentsJobShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.categoryIds)) {
    request.categoryIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.categoryIds, 'CategoryIds', 'json');
  }
  if (!Util.isUnset(tmpReq.documentIds)) {
    request.documentIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.documentIds, 'DocumentIds', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.categoryIdsShrink)) {
    query['CategoryIds'] = request.categoryIdsShrink;
  }
  if (!Util.isUnset(request.documentIdsShrink)) {
    query['DocumentIds'] = request.documentIdsShrink;
  }
  if (!Util.isUnset(request.indexId)) {
    query['IndexId'] = request.indexId;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitIndexAddDocumentsJob',
    version = '2023-12-29',
    protocol = 'HTTPS',
    pathname = `/${OpenApiUtil.getEncodeParam(WorkspaceId)}/index/add_documents_to_index`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 知识索引
 *
 * @param request SubmitIndexAddDocumentsJobRequest
 * @return SubmitIndexAddDocumentsJobResponse
 */
async function submitIndexAddDocumentsJob(WorkspaceId: string, request: SubmitIndexAddDocumentsJobRequest): SubmitIndexAddDocumentsJobResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return submitIndexAddDocumentsJobWithOptions(WorkspaceId, request, headers, runtime);
}

model SubmitIndexJobRequest {
  indexId?: string(name='IndexId', description='This parameter is required.', example='79c0aly8zw'),
}

model SubmitIndexJobResponseBody = {
  code?: string(name='Code', example='InvalidParameter'),
  data?: {
    id?: string(name='Id', example='eFDr2fGRzP9gdDZWAdo3YQ=='),
    indexId?: string(name='IndexId', example='khdyak1uuj'),
  }(name='Data'),
  message?: string(name='Message', example='Required parameter(%s) missing or invalid, please check the request parameters.'),
  requestId?: string(name='RequestId', description='Id of the request', example='17204B98-xxxx-4F9A-8464-2446A84821CA'),
  status?: string(name='Status', example='Success'),
  success?: boolean(name='Success', example='True'),
}

model SubmitIndexJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitIndexJobResponseBody(name='body'),
}

/**
 * @summary 提交索引任务
 *
 * @param request SubmitIndexJobRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitIndexJobResponse
 */
async function submitIndexJobWithOptions(WorkspaceId: string, request: SubmitIndexJobRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SubmitIndexJobResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.indexId)) {
    query['IndexId'] = request.indexId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitIndexJob',
    version = '2023-12-29',
    protocol = 'HTTPS',
    pathname = `/${OpenApiUtil.getEncodeParam(WorkspaceId)}/index/submit_index_job`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 提交索引任务
 *
 * @param request SubmitIndexJobRequest
 * @return SubmitIndexJobResponse
 */
async function submitIndexJob(WorkspaceId: string, request: SubmitIndexJobRequest): SubmitIndexJobResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return submitIndexJobWithOptions(WorkspaceId, request, headers, runtime);
}

model UpdateAndPublishAgentRequest {
  applicationConfig?: {
    historyConfig?: {
      enableAdbRecord?: boolean(name='enableAdbRecord'),
      enableRecord?: boolean(name='enableRecord'),
      instanceId?: string(name='instanceId'),
      region?: string(name='region'),
      storeCode?: string(name='storeCode'),
    }(name='historyConfig'),
    longTermMemory?: {
      enable?: boolean(name='enable'),
    }(name='longTermMemory'),
    parameters?: {
      dialogRound?: int32(name='dialogRound'),
      maxTokens?: int32(name='maxTokens'),
      temperature?: double(name='temperature'),
    }(name='parameters'),
    ragConfig?: {
      enableCitation?: boolean(name='enableCitation'),
      enableSearch?: boolean(name='enableSearch'),
      knowledgeBaseCodeList?: [ string ](name='knowledgeBaseCodeList'),
      topK?: int32(name='topK'),
    }(name='ragConfig'),
    security?: {
      processingStrategy?: string(name='processingStrategy'),
    }(name='security'),
    tools?: [ 
      {
        type?: string(name='type'),
      }
    ](name='tools'),
    workFlows?: [ 
      {
        type?: string(name='type'),
      }
    ](name='workFlows'),
  }(name='applicationConfig'),
  instructions?: string(name='instructions'),
  modelId?: string(name='modelId'),
  name?: string(name='name'),
}

model UpdateAndPublishAgentShrinkRequest {
  applicationConfigShrink?: string(name='applicationConfig'),
  instructions?: string(name='instructions'),
  modelId?: string(name='modelId'),
  name?: string(name='name'),
}

model UpdateAndPublishAgentResponseBody = {
  code?: string(name='code'),
  data?: string(name='data'),
  httpStatusCode?: int32(name='httpStatusCode'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
}

model UpdateAndPublishAgentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAndPublishAgentResponseBody(name='body'),
}

/**
 * @summary 更新并发布智能体应用
 *
 * @param tmpReq UpdateAndPublishAgentRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateAndPublishAgentResponse
 */
async function updateAndPublishAgentWithOptions(workspaceId: string, appCode: string, tmpReq: UpdateAndPublishAgentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateAndPublishAgentResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateAndPublishAgentShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.applicationConfig)) {
    request.applicationConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.applicationConfig, 'applicationConfig', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.applicationConfigShrink)) {
    body['applicationConfig'] = request.applicationConfigShrink;
  }
  if (!Util.isUnset(request.instructions)) {
    body['instructions'] = request.instructions;
  }
  if (!Util.isUnset(request.modelId)) {
    body['modelId'] = request.modelId;
  }
  if (!Util.isUnset(request.name)) {
    body['name'] = request.name;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAndPublishAgent',
    version = '2023-12-29',
    protocol = 'HTTPS',
    pathname = `/${OpenApiUtil.getEncodeParam(workspaceId)}/application/agents/${OpenApiUtil.getEncodeParam(appCode)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新并发布智能体应用
 *
 * @param request UpdateAndPublishAgentRequest
 * @return UpdateAndPublishAgentResponse
 */
async function updateAndPublishAgent(workspaceId: string, appCode: string, request: UpdateAndPublishAgentRequest): UpdateAndPublishAgentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateAndPublishAgentWithOptions(workspaceId, appCode, request, headers, runtime);
}

model UpdateMemoryRequest {
  description?: string(name='description'),
}

model UpdateMemoryResponseBody = {
  requestId?: string(name='requestId', example='6a71f2d9-f1c9-913b-818b-114029103cad'),
}

model UpdateMemoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateMemoryResponseBody(name='body'),
}

/**
 * @summary 更新memory
 *
 * @param request UpdateMemoryRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateMemoryResponse
 */
async function updateMemoryWithOptions(workspaceId: string, memoryId: string, request: UpdateMemoryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateMemoryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    query['description'] = request.description;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMemory',
    version = '2023-12-29',
    protocol = 'HTTPS',
    pathname = `/${OpenApiUtil.getEncodeParam(workspaceId)}/memories/${OpenApiUtil.getEncodeParam(memoryId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新memory
 *
 * @param request UpdateMemoryRequest
 * @return UpdateMemoryResponse
 */
async function updateMemory(workspaceId: string, memoryId: string, request: UpdateMemoryRequest): UpdateMemoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateMemoryWithOptions(workspaceId, memoryId, request, headers, runtime);
}

model UpdateMemoryNodeRequest {
  content?: string(name='content', description='This parameter is required.'),
}

model UpdateMemoryNodeResponseBody = {
  requestId?: string(name='requestId', example='8C56C7AF-6573-19CE-B018-E05E1EDCF4C5'),
}

model UpdateMemoryNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateMemoryNodeResponseBody(name='body'),
}

/**
 * @summary 更新记忆Node
 *
 * @param request UpdateMemoryNodeRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateMemoryNodeResponse
 */
async function updateMemoryNodeWithOptions(workspaceId: string, memoryId: string, memoryNodeId: string, request: UpdateMemoryNodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateMemoryNodeResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.content)) {
    query['content'] = request.content;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMemoryNode',
    version = '2023-12-29',
    protocol = 'HTTPS',
    pathname = `/${OpenApiUtil.getEncodeParam(workspaceId)}/memories/${OpenApiUtil.getEncodeParam(memoryId)}/memoryNodes/${OpenApiUtil.getEncodeParam(memoryNodeId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新记忆Node
 *
 * @param request UpdateMemoryNodeRequest
 * @return UpdateMemoryNodeResponse
 */
async function updateMemoryNode(workspaceId: string, memoryId: string, memoryNodeId: string, request: UpdateMemoryNodeRequest): UpdateMemoryNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateMemoryNodeWithOptions(workspaceId, memoryId, memoryNodeId, request, headers, runtime);
}

