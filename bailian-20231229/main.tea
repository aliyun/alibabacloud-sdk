/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('bailian', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddFileRequest {
  categoryId?: string(name='CategoryId', description='This parameter is required.', example='cate_cdd11b1b79a74e8bbd675c356a91ee3510024405'),
  leaseId?: string(name='LeaseId', description='This parameter is required.', example='68abd1dea7b6404d8f7d7b9f7fbd332d.1716698936847'),
  parser?: string(name='Parser', description='This parameter is required.', example='DASHSCOPE_DOCMIND'),
}

model AddFileResponseBody = {
  code?: string(name='Code', example='DataCenter.FileTooLarge'),
  data?: {
    fileId?: string(name='FileId', example='file_9a65732555b54d5ea10796ca5742ba22_XXXXXXXX'),
    parser?: string(name='Parser', example='DASHSCOPE_DOCMIND'),
  }(name='Data'),
  message?: string(name='Message', example='User not authorized to operate on the specified resource.'),
  requestId?: string(name='RequestId', example='778C0B3B-xxxx-5FC1-A947-36EDD13606AB'),
  status?: string(name='Status', example='200'),
  success?: string(name='Success', example='true'),
}

model AddFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddFileResponseBody(name='body'),
}

/**
 * @summary 将临时上传的文档导入百炼数据中心，导入成功之后会自动触发文档解析。
 *
 * @param request AddFileRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddFileResponse
 */
async function addFileWithOptions(WorkspaceId: string, request: AddFileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.categoryId)) {
    body['CategoryId'] = request.categoryId;
  }
  if (!Util.isUnset(request.leaseId)) {
    body['LeaseId'] = request.leaseId;
  }
  if (!Util.isUnset(request.parser)) {
    body['Parser'] = request.parser;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddFile',
    version = '2023-12-29',
    protocol = 'HTTPS',
    pathname = `/${OpenApiUtil.getEncodeParam(WorkspaceId)}/datacenter/file`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 将临时上传的文档导入百炼数据中心，导入成功之后会自动触发文档解析。
 *
 * @param request AddFileRequest
 * @return AddFileResponse
 */
async function addFile(WorkspaceId: string, request: AddFileRequest): AddFileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return addFileWithOptions(WorkspaceId, request, headers, runtime);
}

model ApplyFileUploadLeaseRequest {
  fileName?: string(name='FileName', description='This parameter is required.'),
  md5?: string(name='Md5', description='This parameter is required.', example='19657c391f6c70bcea63c154d8606bb3'),
  sizeInBytes?: string(name='SizeInBytes', description='This parameter is required.', example='1000'),
}

model ApplyFileUploadLeaseResponseBody = {
  code?: string(name='Code', example='DataCenter.FileTooLarge'),
  data?: {
    fileUploadLeaseId?: string(name='FileUploadLeaseId', example='1e6a159107384782be5e45ac4759b247.1719325231035'),
    param?: {
      headers?: any(name='Headers', example='"X-bailian-extra": "MTAwNTQyNjQ5NTE2OTE3OA==",
        "Content-Type": "application/pdf"'),
      method?: string(name='Method', example='PUT'),
      url?: string(name='Url', example='https://bailian-datahub-data-origin-prod.oss-cn-hangzhou.aliyuncs.com/1005426495169178/10024405/68abd1dea7b6404d8f7d7b9f7fbd332d.1716698936847.pdf?Expires=1716699536&OSSAccessKeyId=TestID&Signature=HfwPUZo4pR6DatSDym0zFKVh9Wg%3D'),
    }(name='Param'),
    type?: string(name='Type', example='HTTP'),
  }(name='Data'),
  message?: string(name='Message', example='User not authorized to operate on the specified resource'),
  requestId?: string(name='RequestId', example='778C0B3B-xxxx-5FC1-A947-36EDD13606AB'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model ApplyFileUploadLeaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApplyFileUploadLeaseResponseBody(name='body'),
}

/**
 * @summary 请求文档上传租约，进行文档上传。
 *
 * @param request ApplyFileUploadLeaseRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ApplyFileUploadLeaseResponse
 */
async function applyFileUploadLeaseWithOptions(CategoryId: string, WorkspaceId: string, request: ApplyFileUploadLeaseRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyFileUploadLeaseResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.fileName)) {
    body['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.md5)) {
    body['Md5'] = request.md5;
  }
  if (!Util.isUnset(request.sizeInBytes)) {
    body['SizeInBytes'] = request.sizeInBytes;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ApplyFileUploadLease',
    version = '2023-12-29',
    protocol = 'HTTPS',
    pathname = `/${OpenApiUtil.getEncodeParam(WorkspaceId)}/datacenter/category/${OpenApiUtil.getEncodeParam(CategoryId)}`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 请求文档上传租约，进行文档上传。
 *
 * @param request ApplyFileUploadLeaseRequest
 * @return ApplyFileUploadLeaseResponse
 */
async function applyFileUploadLease(CategoryId: string, WorkspaceId: string, request: ApplyFileUploadLeaseRequest): ApplyFileUploadLeaseResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return applyFileUploadLeaseWithOptions(CategoryId, WorkspaceId, request, headers, runtime);
}

model CreateIndexRequest {
  categoryIds?: [ string ](name='CategoryIds'),
  chunkSize?: int32(name='ChunkSize', example='128'),
  columns?: [ 
    {
      column?: string(name='Column'),
      isRecall?: boolean(name='IsRecall'),
      isSearch?: boolean(name='IsSearch'),
      name?: string(name='Name'),
      type?: string(name='Type'),
    }
  ](name='Columns'),
  description?: string(name='Description'),
  documentIds?: [ string ](name='DocumentIds'),
  embeddingModelName?: string(name='EmbeddingModelName', example='text-embedding-v2'),
  name?: string(name='Name', description='This parameter is required.'),
  overlapSize?: int32(name='OverlapSize', example='16'),
  rerankMinScore?: double(name='RerankMinScore', example='0.20'),
  rerankModelName?: string(name='RerankModelName', example='gte-rerank-hybrid'),
  separator?: string(name='Separator', example=','),
  sinkInstanceId?: string(name='SinkInstanceId', example='gp-bp321093j84'),
  sinkRegion?: string(name='SinkRegion', example='cn-hangzhou'),
  sinkType?: string(name='SinkType', description='This parameter is required.', example='DEFAULT'),
  sourceType?: string(name='SourceType', description='This parameter is required.', example='DATA_CENTER_FILE', nullable=false),
  structureType?: string(name='StructureType', description='This parameter is required.', example='structured'),
}

model CreateIndexShrinkRequest {
  categoryIdsShrink?: string(name='CategoryIds'),
  chunkSize?: int32(name='ChunkSize', example='128'),
  columnsShrink?: string(name='Columns'),
  description?: string(name='Description'),
  documentIdsShrink?: string(name='DocumentIds'),
  embeddingModelName?: string(name='EmbeddingModelName', example='text-embedding-v2'),
  name?: string(name='Name', description='This parameter is required.'),
  overlapSize?: int32(name='OverlapSize', example='16'),
  rerankMinScore?: double(name='RerankMinScore', example='0.20'),
  rerankModelName?: string(name='RerankModelName', example='gte-rerank-hybrid'),
  separator?: string(name='Separator', example=','),
  sinkInstanceId?: string(name='SinkInstanceId', example='gp-bp321093j84'),
  sinkRegion?: string(name='SinkRegion', example='cn-hangzhou'),
  sinkType?: string(name='SinkType', description='This parameter is required.', example='DEFAULT'),
  sourceType?: string(name='SourceType', description='This parameter is required.', example='DATA_CENTER_FILE', nullable=false),
  structureType?: string(name='StructureType', description='This parameter is required.', example='structured'),
}

model CreateIndexResponseBody = {
  code?: string(name='Code', example='Forbidden'),
  data?: {
    id?: string(name='Id', example='jkurxhju6b'),
  }(name='Data'),
  message?: string(name='Message', example='Invalid input, variable name is missing'),
  requestId?: string(name='RequestId', description='Id of the request', example='17204B98-7734-4F9A-8464-2446A84821CA'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model CreateIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateIndexResponseBody(name='body'),
}

/**
 * @summary 创建并运行pipeline
 *
 * @param tmpReq CreateIndexRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateIndexResponse
 */
async function createIndexWithOptions(WorkspaceId: string, tmpReq: CreateIndexRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateIndexResponse {
  Util.validateModel(tmpReq);
  var request = new CreateIndexShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.categoryIds)) {
    request.categoryIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.categoryIds, 'CategoryIds', 'json');
  }
  if (!Util.isUnset(tmpReq.columns)) {
    request.columnsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.columns, 'Columns', 'json');
  }
  if (!Util.isUnset(tmpReq.documentIds)) {
    request.documentIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.documentIds, 'DocumentIds', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.categoryIdsShrink)) {
    query['CategoryIds'] = request.categoryIdsShrink;
  }
  if (!Util.isUnset(request.chunkSize)) {
    query['ChunkSize'] = request.chunkSize;
  }
  if (!Util.isUnset(request.columnsShrink)) {
    query['Columns'] = request.columnsShrink;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.documentIdsShrink)) {
    query['DocumentIds'] = request.documentIdsShrink;
  }
  if (!Util.isUnset(request.embeddingModelName)) {
    query['EmbeddingModelName'] = request.embeddingModelName;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.overlapSize)) {
    query['OverlapSize'] = request.overlapSize;
  }
  if (!Util.isUnset(request.rerankMinScore)) {
    query['RerankMinScore'] = request.rerankMinScore;
  }
  if (!Util.isUnset(request.rerankModelName)) {
    query['RerankModelName'] = request.rerankModelName;
  }
  if (!Util.isUnset(request.separator)) {
    query['Separator'] = request.separator;
  }
  if (!Util.isUnset(request.sinkInstanceId)) {
    query['SinkInstanceId'] = request.sinkInstanceId;
  }
  if (!Util.isUnset(request.sinkRegion)) {
    query['SinkRegion'] = request.sinkRegion;
  }
  if (!Util.isUnset(request.sinkType)) {
    query['SinkType'] = request.sinkType;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.structureType)) {
    query['StructureType'] = request.structureType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateIndex',
    version = '2023-12-29',
    protocol = 'HTTPS',
    pathname = `/${OpenApiUtil.getEncodeParam(WorkspaceId)}/index/create`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建并运行pipeline
 *
 * @param request CreateIndexRequest
 * @return CreateIndexResponse
 */
async function createIndex(WorkspaceId: string, request: CreateIndexRequest): CreateIndexResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createIndexWithOptions(WorkspaceId, request, headers, runtime);
}

model DescribeFileResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    categoryId?: string(name='CategoryId', example='cate_cdd11b1b79a74e8bbd675c356a91ee3XXXXXXXX'),
    createTime?: string(name='CreateTime', example='2024-05-26 12:45:43'),
    fileId?: string(name='FileId', example='file_9a65732555b54d5ea10796ca5742ba22_XXXXXXXX'),
    fileName?: string(name='FileName', example='test.pdf'),
    fileType?: string(name='FileType', example='pdf'),
    parser?: string(name='Parser', example='DASHSCOPE_DOCMIND'),
    sizeInBytes?: long(name='SizeInBytes', example='1234'),
    status?: string(name='Status', example='PARSE_SUCCESS'),
  }(name='Data'),
  message?: string(name='Message', example='Requests throttling triggered.'),
  requestId?: string(name='RequestId', example='17204B98-xxxx-4F9A-8464-2446A84821CA'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model DescribeFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFileResponseBody(name='body'),
}

/**
 * @summary 获取文档基本信息，包括文档名称、类型、状态等。
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeFileResponse
 */
async function describeFileWithOptions(WorkspaceId: string, FileId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeFileResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeFile',
    version = '2023-12-29',
    protocol = 'HTTPS',
    pathname = `/${OpenApiUtil.getEncodeParam(WorkspaceId)}/datacenter/file/${OpenApiUtil.getEncodeParam(FileId)}/`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取文档基本信息，包括文档名称、类型、状态等。
 *
 * @return DescribeFileResponse
 */
async function describeFile(WorkspaceId: string, FileId: string): DescribeFileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeFileWithOptions(WorkspaceId, FileId, headers, runtime);
}

model GetIndexJobStatusRequest {
  indexId?: string(name='IndexId', description='This parameter is required.', example='79c0aly8zw'),
  jobId?: string(name='JobId', description='This parameter is required.', example='20230718xxxx-146c93bf'),
}

model GetIndexJobStatusResponseBody = {
  code?: string(name='Code', example='Index.Forbidden'),
  data?: {
    documents?: [ 
      {
        code?: string(name='Code', example='Index.Document.ChunkError'),
        docId?: string(name='DocId', example='file_9a65732555b54d5ea10796ca5742ba22_XXXXXXXX'),
        docName?: string(name='DocName'),
        message?: string(name='Message', example='document parse error'),
        status?: string(name='Status', example='RUNNING'),
      }
    ](name='Documents'),
    jobId?: string(name='JobId', example='66122af12a4e45ddae6bd6c845556647'),
    status?: string(name='Status', example='PENDING'),
  }(name='Data'),
  message?: string(name='Message', example='User not authorized to operate on the specified resource.'),
  requestId?: string(name='RequestId', example='17204B98-xxxx-4F9A-8464-2446A84821CA'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model GetIndexJobStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetIndexJobStatusResponseBody(name='body'),
}

/**
 * @summary 获取Index运行状态
 *
 * @param request GetIndexJobStatusRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetIndexJobStatusResponse
 */
async function getIndexJobStatusWithOptions(WorkspaceId: string, request: GetIndexJobStatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetIndexJobStatusResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.indexId)) {
    query['IndexId'] = request.indexId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetIndexJobStatus',
    version = '2023-12-29',
    protocol = 'HTTPS',
    pathname = `/${OpenApiUtil.getEncodeParam(WorkspaceId)}/index/job/status`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取Index运行状态
 *
 * @param request GetIndexJobStatusRequest
 * @return GetIndexJobStatusResponse
 */
async function getIndexJobStatus(WorkspaceId: string, request: GetIndexJobStatusRequest): GetIndexJobStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getIndexJobStatusWithOptions(WorkspaceId, request, headers, runtime);
}

model RetrieveRequest {
  denseSimilarityTopK?: int32(name='DenseSimilarityTopK', example='100'),
  enableReranking?: boolean(name='EnableReranking', example='true'),
  enableRewrite?: boolean(name='EnableRewrite', example='false'),
  indexId?: string(name='IndexId', description='This parameter is required.', example='5pwe0m2g6t'),
  query?: string(name='Query'),
  rerank?: [ 
    {
      modelName?: string(name='ModelName', example='gte-rerank-hybrid'),
    }
  ](name='Rerank'),
  rerankMinScore?: float(name='RerankMinScore', example='0.20'),
  rerankTopN?: int32(name='RerankTopN', example='5'),
  rewrite?: [ 
    {
      modelName?: string(name='ModelName'),
    }
  ](name='Rewrite'),
  saveRetrieverHistory?: boolean(name='SaveRetrieverHistory', example='false'),
  sparseSimilarityTopK?: int32(name='SparseSimilarityTopK', example='100'),
}

model RetrieveShrinkRequest {
  denseSimilarityTopK?: int32(name='DenseSimilarityTopK', example='100'),
  enableReranking?: boolean(name='EnableReranking', example='true'),
  enableRewrite?: boolean(name='EnableRewrite', example='false'),
  indexId?: string(name='IndexId', description='This parameter is required.', example='5pwe0m2g6t'),
  query?: string(name='Query'),
  rerankShrink?: string(name='Rerank'),
  rerankMinScore?: float(name='RerankMinScore', example='0.20'),
  rerankTopN?: int32(name='RerankTopN', example='5'),
  rewriteShrink?: string(name='Rewrite'),
  saveRetrieverHistory?: boolean(name='SaveRetrieverHistory', example='false'),
  sparseSimilarityTopK?: int32(name='SparseSimilarityTopK', example='100'),
}

model RetrieveResponseBody = {
  code?: string(name='Code', example='Index.InvalidParameter'),
  data?: {
    nodes?: [ 
      {
        metadata?: any(name='Metadata'),
        score?: double(name='Score', example='0.3'),
        text?: string(name='Text'),
      }
    ](name='Nodes'),
  }(name='Data'),
  message?: string(name='Message', example='Required parameter(%s) missing or invalid, please check the request parameters.'),
  requestId?: string(name='RequestId', description='Id of the request', example='17204B98-7734-4F9A-8464-2446A84821CA'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model RetrieveResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RetrieveResponseBody(name='body'),
}

/**
 * @summary 召回测试
 *
 * @param tmpReq RetrieveRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return RetrieveResponse
 */
async function retrieveWithOptions(WorkspaceId: string, tmpReq: RetrieveRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RetrieveResponse {
  Util.validateModel(tmpReq);
  var request = new RetrieveShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.rerank)) {
    request.rerankShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.rerank, 'Rerank', 'json');
  }
  if (!Util.isUnset(tmpReq.rewrite)) {
    request.rewriteShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.rewrite, 'Rewrite', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.denseSimilarityTopK)) {
    query['DenseSimilarityTopK'] = request.denseSimilarityTopK;
  }
  if (!Util.isUnset(request.enableReranking)) {
    query['EnableReranking'] = request.enableReranking;
  }
  if (!Util.isUnset(request.enableRewrite)) {
    query['EnableRewrite'] = request.enableRewrite;
  }
  if (!Util.isUnset(request.indexId)) {
    query['IndexId'] = request.indexId;
  }
  if (!Util.isUnset(request.query)) {
    query['Query'] = request.query;
  }
  if (!Util.isUnset(request.rerankShrink)) {
    query['Rerank'] = request.rerankShrink;
  }
  if (!Util.isUnset(request.rerankMinScore)) {
    query['RerankMinScore'] = request.rerankMinScore;
  }
  if (!Util.isUnset(request.rerankTopN)) {
    query['RerankTopN'] = request.rerankTopN;
  }
  if (!Util.isUnset(request.rewriteShrink)) {
    query['Rewrite'] = request.rewriteShrink;
  }
  if (!Util.isUnset(request.saveRetrieverHistory)) {
    query['SaveRetrieverHistory'] = request.saveRetrieverHistory;
  }
  if (!Util.isUnset(request.sparseSimilarityTopK)) {
    query['SparseSimilarityTopK'] = request.sparseSimilarityTopK;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'Retrieve',
    version = '2023-12-29',
    protocol = 'HTTPS',
    pathname = `/${OpenApiUtil.getEncodeParam(WorkspaceId)}/index/retrieve`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 召回测试
 *
 * @param request RetrieveRequest
 * @return RetrieveResponse
 */
async function retrieve(WorkspaceId: string, request: RetrieveRequest): RetrieveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return retrieveWithOptions(WorkspaceId, request, headers, runtime);
}

model SubmitIndexJobRequest {
  indexId?: string(name='IndexId', description='This parameter is required.', example='79c0aly8zw'),
}

model SubmitIndexJobResponseBody = {
  code?: string(name='Code', example='InvalidParameter'),
  data?: {
    id?: string(name='Id', example='eFDr2fGRzP9gdDZWAdo3YQ=='),
    indexId?: string(name='IndexId', example='khdyak1uuj'),
  }(name='Data'),
  message?: string(name='Message', example='Required parameter(%s) missing or invalid, please check the request parameters.'),
  requestId?: string(name='RequestId', description='Id of the request', example='17204B98-xxxx-4F9A-8464-2446A84821CA'),
  status?: string(name='Status', example='Success'),
  success?: boolean(name='Success', example='True'),
}

model SubmitIndexJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitIndexJobResponseBody(name='body'),
}

/**
 * @summary 提交索引任务
 *
 * @param request SubmitIndexJobRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitIndexJobResponse
 */
async function submitIndexJobWithOptions(WorkspaceId: string, request: SubmitIndexJobRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SubmitIndexJobResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.indexId)) {
    query['IndexId'] = request.indexId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitIndexJob',
    version = '2023-12-29',
    protocol = 'HTTPS',
    pathname = `/${OpenApiUtil.getEncodeParam(WorkspaceId)}/index/submit_index_job`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 提交索引任务
 *
 * @param request SubmitIndexJobRequest
 * @return SubmitIndexJobResponse
 */
async function submitIndexJob(WorkspaceId: string, request: SubmitIndexJobRequest): SubmitIndexJobResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return submitIndexJobWithOptions(WorkspaceId, request, headers, runtime);
}

