/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'bailian';
  @version = '2023-12-29';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddFileRequest {
  workspaceId: string(name='WorkspaceId', example='ws_3AXoiweeTyTd03IN', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  categoryId: string(name='CategoryId', example='cate_cdd11b1b79a74e8bbd675c356a91ee3510024405', position='Body'),
  leaseId: string(name='LeaseId', example='68abd1dea7b6404d8f7d7b9f7fbd332d.1716698936847', position='Body'),
  parser: string(name='Parser', example='DASHSCOPE_DOCMIND', position='Body'),
}

model AddFileResponseBody = {
  code?: string(name='Code', example='DataCenter.FileTooLarge'),
  data?: {
    fileId?: string(name='FileId', example='file_9a65732555b54d5ea10796ca5742ba22_XXXXXXXX'),
    parser?: string(name='Parser', example='DASHSCOPE_DOCMIND'),
  }(name='Data'),
  message?: string(name='Message', example='User not authorized to operate on the specified resource.'),
  requestId?: string(name='RequestId', example='778C0B3B-xxxx-5FC1-A947-36EDD13606AB'),
  status?: string(name='Status', example='200'),
  success?: string(name='Success', example='true'),
}

model AddFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddFileResponseBody(name='body'),
}

async function addFile(request: AddFileRequest): AddFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddFile', 'PUT', '/{WorkspaceId}/datacenter/file', 'json', true, 'form', request);
}

model ApplyFileUploadLeaseRequest {
  categoryId: string(name='CategoryId', example='cate_cdd11b1b79a74e8bbd675c356a91ee3510024405', position='Path'),
  workspaceId: string(name='WorkspaceId', example='ws_3AXoiweeTyTd03IN', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  fileName: string(name='FileName', position='Body'),
  md5: string(name='Md5', example='19657c391f6c70bcea63c154d8606bb3', position='Body'),
  sizeInBytes: string(name='SizeInBytes', example='1000', position='Body'),
}

model ApplyFileUploadLeaseResponseBody = {
  code?: string(name='Code', example='DataCenter.FileTooLarge'),
  data?: {
    fileUploadLeaseId?: string(name='FileUploadLeaseId', example='1e6a159107384782be5e45ac4759b247.1719325231035'),
    param?: {
      headers?: any(name='Headers', example='"X-bailian-extra": "MTAwNTQyNjQ5NTE2OTE3OA==",
        "Content-Type": "application/pdf"'),
      method?: string(name='Method', example='PUT'),
      url?: string(name='Url', example='https://bailian-datahub-data-origin-prod.oss-cn-hangzhou.aliyuncs.com/1005426495169178/10024405/68abd1dea7b6404d8f7d7b9f7fbd332d.1716698936847.pdf?Expires=1716699536&OSSAccessKeyId=TestID&Signature=HfwPUZo4pR6DatSDym0zFKVh9Wg%3D'),
    }(name='Param'),
    type?: string(name='Type', example='HTTP'),
  }(name='Data'),
  message?: string(name='Message', example='User not authorized to operate on the specified resource'),
  requestId?: string(name='RequestId', example='778C0B3B-xxxx-5FC1-A947-36EDD13606AB'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model ApplyFileUploadLeaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApplyFileUploadLeaseResponseBody(name='body'),
}

async function applyFileUploadLease(request: ApplyFileUploadLeaseRequest): ApplyFileUploadLeaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ApplyFileUploadLease', 'POST', '/{WorkspaceId}/datacenter/category/{CategoryId}', 'json', true, 'form', request);
}

model CreateIndexRequest {
  workspaceId: string(name='WorkspaceId', example='ws_3Nt27MYcoK191ISp', position='Path'),
  categoryIds?: [ string ](name='CategoryIds', shrink='json', position='Query'),
  chunkSize?: int32(name='ChunkSize', example='128', position='Query'),
  columns?: [ 
    {
      column?: string(name='Column'),
      isRecall?: boolean(name='IsRecall'),
      isSearch?: boolean(name='IsSearch'),
      name?: string(name='Name'),
      type?: string(name='Type'),
    }
  ](name='Columns', shrink='json', position='Query'),
  description?: string(name='Description', position='Query'),
  documentIds?: [ string ](name='DocumentIds', shrink='json', position='Query'),
  embeddingModelName?: string(name='EmbeddingModelName', example='text-embedding-v2', position='Query'),
  name: string(name='Name', position='Query'),
  overlapSize?: int32(name='OverlapSize', example='16', position='Query'),
  rerankMinScore?: double(name='RerankMinScore', example='0.20', position='Query'),
  rerankModelName?: string(name='RerankModelName', example='gte-rerank-hybrid', position='Query'),
  separator?: string(name='Separator', example=',', position='Query'),
  sinkInstanceId?: string(name='SinkInstanceId', example='gp-bp321093j84', position='Query'),
  sinkRegion?: string(name='SinkRegion', example='cn-hangzhou', position='Query'),
  sinkType: string(name='SinkType', example='DEFAULT', position='Query'),
  sourceType: string(name='SourceType', example='DATA_CENTER_FILE', position='Query'),
  structureType: string(name='StructureType', example='structured', position='Query'),
}

model CreateIndexResponseBody = {
  code?: string(name='Code', example='Forbidden'),
  data?: {
    id?: string(name='Id', example='jkurxhju6b'),
  }(name='Data'),
  message?: string(name='Message', example='Invalid input, variable name is missing'),
  requestId?: string(name='RequestId', description='Id of the request', example='17204B98-7734-4F9A-8464-2446A84821CA'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model CreateIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateIndexResponseBody(name='body'),
}

async function createIndex(request: CreateIndexRequest): CreateIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateIndex', 'POST', '/{WorkspaceId}/index/create', 'json', false, 'json', request);
}

model DescribeFileRequest {
  workspaceId: string(name='WorkspaceId', example='ws_3AXoiweeTyTd03IN', position='Path'),
  fileId: string(name='FileId', example='file_9a65732555b54d5ea10796ca5742ba22_XXXXXXXX', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeFileResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    categoryId?: string(name='CategoryId', example='cate_cdd11b1b79a74e8bbd675c356a91ee3XXXXXXXX'),
    createTime?: string(name='CreateTime', example='2024-05-26 12:45:43'),
    fileId?: string(name='FileId', example='file_9a65732555b54d5ea10796ca5742ba22_XXXXXXXX'),
    fileName?: string(name='FileName', example='test.pdf'),
    fileType?: string(name='FileType', example='pdf'),
    parser?: string(name='Parser', example='DASHSCOPE_DOCMIND'),
    sizeInBytes?: long(name='SizeInBytes', example='1234'),
    status?: string(name='Status', example='PARSE_SUCCESS'),
  }(name='Data'),
  message?: string(name='Message', example='Requests throttling triggered.'),
  requestId?: string(name='RequestId', example='17204B98-xxxx-4F9A-8464-2446A84821CA'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model DescribeFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFileResponseBody(name='body'),
}

async function describeFile(request: DescribeFileRequest): DescribeFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeFile', 'GET', '/{WorkspaceId}/datacenter/file/{FileId}/', 'json', false, 'json', request);
}

model GetIndexJobStatusRequest {
  workspaceId: string(name='WorkspaceId', example='ws_3Nt27MYcoK191ISp', position='Path'),
  indexId: string(name='IndexId', example='79c0aly8zw', position='Query'),
  jobId: string(name='JobId', example='20230718xxxx-146c93bf', position='Query'),
}

model GetIndexJobStatusResponseBody = {
  code?: string(name='Code', example='Index.Forbidden'),
  data?: {
    documents?: [ 
      {
        code?: string(name='Code', example='Index.Document.ChunkError'),
        docId?: string(name='DocId', example='file_9a65732555b54d5ea10796ca5742ba22_XXXXXXXX'),
        docName?: string(name='DocName'),
        message?: string(name='Message', example='document parse error'),
        status?: string(name='Status', example='RUNNING'),
      }
    ](name='Documents'),
    jobId?: string(name='JobId', example='66122af12a4e45ddae6bd6c845556647'),
    status?: string(name='Status', example='PENDING'),
  }(name='Data'),
  message?: string(name='Message', example='User not authorized to operate on the specified resource.'),
  requestId?: string(name='RequestId', example='17204B98-xxxx-4F9A-8464-2446A84821CA'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model GetIndexJobStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetIndexJobStatusResponseBody(name='body'),
}

async function getIndexJobStatus(request: GetIndexJobStatusRequest): GetIndexJobStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetIndexJobStatus', 'GET', '/{WorkspaceId}/index/job/status', 'json', false, 'json', request);
}

model RetrieveRequest {
  workspaceId: string(name='WorkspaceId', example='ws_3Nt27MYcoK191ISp', position='Path'),
  denseSimilarityTopK?: int32(name='DenseSimilarityTopK', example='100', position='Query'),
  enableReranking?: boolean(name='EnableReranking', example='true', position='Query'),
  enableRewrite?: boolean(name='EnableRewrite', example='false', position='Query'),
  indexId: string(name='IndexId', example='5pwe0m2g6t', position='Query'),
  query?: string(name='Query', position='Query'),
  rerank?: [ 
    {
      modelName?: string(name='ModelName', example='gte-rerank-hybrid'),
    }
  ](name='Rerank', shrink='json', position='Query'),
  rerankMinScore?: float(name='RerankMinScore', example='0.20', position='Query'),
  rerankTopN?: int32(name='RerankTopN', example='5', position='Query'),
  rewrite?: [ 
    {
      modelName?: string(name='ModelName'),
    }
  ](name='Rewrite', shrink='json', position='Query'),
  saveRetrieverHistory?: boolean(name='SaveRetrieverHistory', example='false', position='Query'),
  sparseSimilarityTopK?: int32(name='SparseSimilarityTopK', example='100', position='Query'),
}

model RetrieveResponseBody = {
  code?: string(name='Code', example='Index.InvalidParameter'),
  data?: {
    nodes?: [ 
      {
        metadata?: any(name='Metadata'),
        score?: double(name='Score', example='0.3'),
        text?: string(name='Text'),
      }
    ](name='Nodes'),
  }(name='Data'),
  message?: string(name='Message', example='Required parameter(%s) missing or invalid, please check the request parameters.'),
  requestId?: string(name='RequestId', description='Id of the request', example='17204B98-7734-4F9A-8464-2446A84821CA'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model RetrieveResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RetrieveResponseBody(name='body'),
}

async function retrieve(request: RetrieveRequest): RetrieveResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'Retrieve', 'POST', '/{WorkspaceId}/index/retrieve', 'json', false, 'json', request);
}

model SubmitIndexAddDocumentsJobRequest {
  workspaceId: string(name='WorkspaceId', example='ws_3Nt27MYcoK191ISp', position='Path'),
  categoryIds?: [ string ](name='CategoryIds', shrink='json', position='Query'),
  documentIds?: [ string ](name='DocumentIds', shrink='json', position='Query'),
  indexId: string(name='IndexId', example='79c0aly8zw', position='Query'),
  sourceType: string(name='SourceType', example='DATA_CENTER_FILE', position='Query'),
}

model SubmitIndexAddDocumentsJobResponseBody = {
  code?: string(name='Code', example='Index.InvalidParameter'),
  data?: {
    id?: string(name='Id', example='42687eb254a34802bed398357f5498ae'),
  }(name='Data'),
  message?: string(name='Message', example='Required parameter(%s) missing or invalid, please check the request parameters.'),
  requestId?: string(name='RequestId', description='Id of the request', example='778C0B3B-03C1-5FC1-A947-36EDD13606AB'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model SubmitIndexAddDocumentsJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitIndexAddDocumentsJobResponseBody(name='body'),
}

async function submitIndexAddDocumentsJob(request: SubmitIndexAddDocumentsJobRequest): SubmitIndexAddDocumentsJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SubmitIndexAddDocumentsJob', 'POST', '/{WorkspaceId}/index/add_documents_to_index', 'json', false, 'json', request);
}

model SubmitIndexJobRequest {
  workspaceId: string(name='WorkspaceId', example='ws_3Nt27MYcoK191ISp', position='Path'),
  indexId: string(name='IndexId', example='79c0aly8zw', position='Query'),
}

model SubmitIndexJobResponseBody = {
  code?: string(name='Code', example='InvalidParameter'),
  data?: {
    id?: string(name='Id', example='eFDr2fGRzP9gdDZWAdo3YQ=='),
    indexId?: string(name='IndexId', example='khdyak1uuj'),
  }(name='Data'),
  message?: string(name='Message', example='Required parameter(%s) missing or invalid, please check the request parameters.'),
  requestId?: string(name='RequestId', description='Id of the request', example='17204B98-xxxx-4F9A-8464-2446A84821CA'),
  status?: string(name='Status', example='Success'),
  success?: boolean(name='Success', example='True'),
}

model SubmitIndexJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitIndexJobResponseBody(name='body'),
}

async function submitIndexJob(request: SubmitIndexJobRequest): SubmitIndexJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SubmitIndexJob', 'POST', '/{WorkspaceId}/index/submit_index_job', 'json', false, 'json', request);
}

