/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'bailian';
  @version = '2023-12-29';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddCategoryRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='ws_3AXoiweeTyTd03IN', position='Path'),
  categoryName: string(name='CategoryName', description='This parameter is required.', position='Body'),
  categoryType: string(name='CategoryType', description='This parameter is required.', example='UNSTRUCTURED', position='Body'),
  parentCategoryId?: string(name='ParentCategoryId', example='cate_cdd11b1b79a74e8bbd675c356a91ee3XXXXXXXX', position='Body'),
}

model AddCategoryResponseBody = {
  code?: string(name='Code', example='success'),
  data?: {
    categoryId?: string(name='CategoryId', example='cate_cdd11b1b79a74e8bbd675c356a91ee3XXXXXXXX'),
    categoryName?: string(name='CategoryName'),
  }(name='Data'),
  message?: string(name='Message', example='Requests throttling triggered.'),
  requestId?: string(name='RequestId', description='Id of the request', example='778C0B3B-03C1-5FC1-A947-36EDD13606AB'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model AddCategoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddCategoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddCategory  AddCategoryRequest
  * @return AddCategoryResponse
 */
async function addCategory(request: AddCategoryRequest): AddCategoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddCategory', 'POST', '/{WorkspaceId}/datacenter/category/', 'json', true, 'form', request);
}

model AddFileRequest {
  workspaceId: string(name='WorkspaceId', description='The ID of the workspace to which the document is uploaded. On the [homepage](https://modelstudio.console.alibabacloud.com/?tab=playground#/efm/prompt) of the console, click the workspace Details icon in the upper-left corner to view the workspace ID.

This parameter is required.', example='ws_3AXoiweeTyTd03IN', position='Path'),
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  categoryId: string(name='CategoryId', description='The primary key ID of the category to which the document is uploaded. This parameter corresponds to the `CategoryId` returned by the [AddCategory](https://www.alibabacloud.com/help/eh/model-studio/developer-reference/api-bailian-2023-12-29-addcategory) operation. You can also click the ID icon next to the category name on the Unstructured Data tab of the [Application Data](https://modelstudio.console.alibabacloud.com/#/data-center) page to view the ID. You can set the parameter to default, which specifies the Default Category created by the system.

This parameter is required.', example='cate_cdd11b1b79a74e8bbd675c356a91ee3510024405', position='Body'),
  categoryType?: string(name='CategoryType', description='The type of the category. Valid values:
- UNSTRUCTURED
- SESSION_FILE', example='UNSTRUCTURED', position='Body'),
  leaseId: string(name='LeaseId', description='The lease ID, which corresponds to the `FileUploadLeaseId` parameter returned by the [ApplyFileUploadLease](https://www.alibabacloud.com/help/en/model-studio/developer-reference/api-bailian-2023-12-29-applyfileuploadlease) operation.

This parameter is required.', example='68abd1dea7b6404d8f7d7b9f7fbd332d.1716698936847', position='Body'),
  originalFileUrl?: string(name='OriginalFileUrl', example='https://thisistest.com/abc.pdf', position='Body'),
  parser: string(name='Parser', description='The parser. Valid value:

*   DASHSCOPE_DOCMIND: Intelligent document parsing by Alibaba Cloud.

This parameter is required.', example='DASHSCOPE_DOCMIND', position='Body'),
  tags?: [ string ](name='Tags', description='A list of tags associated with the document. The default value is null, which means no tags. You can specify up to 10 tags.', shrink='json', position='Body'),
}

model AddFileResponseBody = {
  code?: string(name='Code', description='The status code.', example='DataCenter.FileTooLarge'),
  data?: {
    fileId?: string(name='FileId', description='The primary key ID of the document. We recommend that you store the ID because it is required for all subsequent API operations related to this document.', example='file_9a65732555b54d5ea10796ca5742ba22_XXXXXXXX'),
    parser?: string(name='Parser', description='The parser that is used to parse the document. Valid value:

*   DASHSCOPE_DOCMIND: Intelligent document parsing by Alibaba Cloud.', example='DASHSCOPE_DOCMIND'),
  }(name='Data', description='The returned data fields.'),
  message?: string(name='Message', description='The error message.', example='User not authorized to operate on the specified resource.'),
  requestId?: string(name='RequestId', description='The request ID.', example='778C0B3B-xxxx-5FC1-A947-36EDD13606AB'),
  status?: string(name='Status', description='The HTTP status code.', example='200'),
  success?: string(name='Success', description='Indications whether the call is successful. Valid values:

*   true
*   false', example='true'),
}

model AddFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddFileResponseBody(name='body'),
}

/**
  * @description *   Before you call this operation, make sure that you have obtained the lease and uploaded the document to the temporary storage space by using the [ApplyFileUploadLease](https://www.alibabacloud.com/help/en/model-studio/developer-reference/api-bailian-2023-12-29-applyfileuploadlease) operation. For more information, see [Upload files by calling API](https://www.alibabacloud.com/help/en/model-studio/developer-reference/upload-files-by-calling-api).
  * >  After you call this operation, the used lease ID expires immediately. Do not use the same lease ID to submit new requests.
  * *   You must call this operation within 12 hours after you call the [ApplyFileUploadLease](https://www.alibabacloud.com/help/en/model-studio/developer-reference/api-bailian-2023-12-29-applyfileuploadlease) operation. Otherwise, the lease expires and the request fails.
  * *   After you call this operation, the system parses and imports your document. The process takes some time.
  * *   This interface is not idempotent.
  * @param request  the request parameters of AddFile  AddFileRequest
  * @return AddFileResponse
 */
async function addFile(request: AddFileRequest): AddFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddFile', 'PUT', '/{WorkspaceId}/datacenter/file', 'json', true, 'form', request);
}

model AddFilesFromAuthorizedOssRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='llm-3z7uw7fwz0vxxxx', position='Path'),
  categoryId: string(name='CategoryId', description='This parameter is required.', example='cate_cdd11b1b79a74e8bbd675c356a91ee35xxxxxxxx', position='Body'),
  categoryType: string(name='CategoryType', description='This parameter is required.', example='UNSTRUCTURED', position='Body'),
  fileDetails: [ 
    {
      fileName: string(name='FileName', description='This parameter is required.', example='this_is_temp_xxxx.pdf', minLength=1, maxLength=123),
      ossKey: string(name='OssKey', description='This parameter is required.', example='root/path/this_is_temp_xxxx.pdf', minLength=1, maxLength=256),
    }
  ](name='FileDetails', description='This parameter is required.', shrink='json', position='Body'),
  ossBucketName: string(name='OssBucketName', description='This parameter is required.', example='bucketNamexxxxx', position='Body'),
  ossRegionId: string(name='OssRegionId', description='This parameter is required.', example='cn-beijing', position='Body'),
  tags?: [ string ](name='Tags', shrink='json', position='Body'),
}

model AddFilesFromAuthorizedOssResponseBody = {
  code?: string(name='Code', example='success'),
  data?: {
    addFileResultList?: [ 
      {
        fileId?: string(name='FileId', example='file_809f469a59ac449586ec692576xxxxx_102248XXX'),
        msg?: string(name='Msg', example='size too large'),
        ossKey?: string(name='OssKey', example='root/path/this_is_temp_xxxx.pdf'),
        status?: string(name='Status', example='success'),
      }
    ](name='AddFileResultList'),
  }(name='Data'),
  message?: string(name='Message', example='Cant find out category for category_id param.'),
  requestId?: string(name='RequestId', description='Id of the request', example='17204B98-xxxx-4F9A-8464-2446A84821CA'),
  status?: string(name='Status', example='200'),
  success?: string(name='Success', example='true'),
}

model AddFilesFromAuthorizedOssResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddFilesFromAuthorizedOssResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddFilesFromAuthorizedOss  AddFilesFromAuthorizedOssRequest
  * @return AddFilesFromAuthorizedOssResponse
 */
async function addFilesFromAuthorizedOss(request: AddFilesFromAuthorizedOssRequest): AddFilesFromAuthorizedOssResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddFilesFromAuthorizedOss', 'POST', '/{WorkspaceId}/datacenter/file/fromoss', 'json', true, 'form', request);
}

model ApplyFileUploadLeaseRequest {
  categoryId: string(name='CategoryId', description='The primary key ID of the category to which the uploaded document belongs. You can click the ID icon next to the category name on the Unstructured Data tab of the [Data Management](https://bailian.console.aliyun.com/#/data-center) page to view the ID. You can set the parameter to default, which specifies the Default Category created by the system.

This parameter is required.', example='cate_cdd11b1b79a74e8bbd675c356a91ee3510024405', position='Path'),
  workspaceId: string(name='WorkspaceId', description='The ID of the workspace to which the uploaded document belongs. On the [homepage](https://bailian.console.aliyun.com/knowledge-base#/home) of the console, click the workspace Details icon in the upper-left corner to view the workspace ID.

This parameter is required.', example='ws_3AXoiweeTyTd03IN', position='Path'),
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  categoryType?: string(name='CategoryType', position='Body'),
  fileName: string(name='FileName', description='The name of the uploaded document, including the extension. Supported formats: pdf, doc, docx, md, txt, ppt, and pptx. The document name must be 4 to 128 characters in length.

This parameter is required.', position='Body'),
  md5: string(name='Md5', description='The MD5 value of the uploaded document. This parameter is verified by the server (not in the current version).

This parameter is required.', example='19657c391f6c70bcea63c154d8606bb3', minLength=1, maxLength=64, position='Body'),
  sizeInBytes: string(name='SizeInBytes', description='The size of the uploaded document, in bytes. This parameter is verified by the server (not in the current version). Valid values: 1 to 100000000.

This parameter is required.', example='1000', position='Body'),
  useInternalEndpoint?: boolean(name='UseInternalEndpoint', position='Body'),
}

model ApplyFileUploadLeaseResponseBody = {
  code?: string(name='Code', description='The status code.', example='DataCenter.FileTooLarge'),
  data?: {
    fileUploadLeaseId?: string(name='FileUploadLeaseId', description='The unique ID of the lease.', example='1e6a159107384782be5e45ac4759b247.1719325231035'),
    param?: {
      headers?: any(name='Headers', description='The key-value pair to be placed in the Header. Both the key and the value are strings.', example='"X-bailian-extra": "MTAwNTQyNjQ5NTE2OTE3OA==",
        "Content-Type": "application/pdf"'),
      method?: string(name='Method', description='The HTTP call method. Valid values:

*   PUT
*   POST', example='PUT'),
      url?: string(name='Url', description='The upload URL of the document.', example='https://bailian-datahub-data-origin-prod.oss-cn-hangzhou.aliyuncs.com/1005426495169178/10024405/68abd1dea7b6404d8f7d7b9f7fbd332d.1716698936847.pdf?Expires=1716699536&OSSAccessKeyId=TestID&Signature=HfwPUZo4pR6DatSDym0zFKVh9Wg%3D'),
    }(name='Param', description='The HTTP request parameters used to upload the document.'),
    type?: string(name='Type', description='The upload method of the document. Valid values:

*   OSS.PreSignedURL
*   HTTP', example='HTTP'),
  }(name='Data', description='The returned data fields.'),
  message?: string(name='Message', description='The error message.', example='User not authorized to operate on the specified resource'),
  requestId?: string(name='RequestId', description='The request ID.', example='778C0B3B-xxxx-5FC1-A947-36EDD13606AB'),
  status?: string(name='Status', description='The HTTP status code.', example='200'),
  success?: boolean(name='Success', description='Indications whether the call is successful. Valid values:

*   true
*   false', example='true'),
}

model ApplyFileUploadLeaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApplyFileUploadLeaseResponseBody(name='body'),
}

/**
  * @description *   This operation returns an HTTP URL that can be used to upload an unstructured document (the lease) and parameters required for the upload. Structured documents are not supported.
  * *   The HTTP URL returned by this operation is valid only for minutes. Upload the document before the URL expires.
  * *   After you apply for a lease and upload a document, the document is stored in a temporary storage space for 12 hours. 
  * *   This interface is not idempotent.
  * @param request  the request parameters of ApplyFileUploadLease  ApplyFileUploadLeaseRequest
  * @return ApplyFileUploadLeaseResponse
 */
async function applyFileUploadLease(request: ApplyFileUploadLeaseRequest): ApplyFileUploadLeaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ApplyFileUploadLease', 'POST', '/{WorkspaceId}/datacenter/category/{CategoryId}', 'json', true, 'form', request);
}

model CreateAndPulishAgentRequest {
  workspaceId?: string(name='workspaceId', position='Path'),
  applicationConfig?: {
    historyConfig?: {
      enableAdbRecord?: boolean(name='enableAdbRecord'),
      enableRecord?: boolean(name='enableRecord'),
      instanceId?: string(name='instanceId'),
      region?: string(name='region'),
      storeCode?: string(name='storeCode'),
    }(name='historyConfig'),
    longTermMemory?: {
      enable?: boolean(name='enable'),
    }(name='longTermMemory'),
    parameters?: {
      dialogRound?: int32(name='dialogRound'),
      maxTokens?: int32(name='maxTokens'),
      temperature?: double(name='temperature'),
    }(name='parameters'),
    ragConfig?: {
      answerScope?: string(name='answerScope'),
      enableCitation?: boolean(name='enableCitation'),
      enableSearch?: boolean(name='enableSearch'),
      enableWebSearch?: boolean(name='enableWebSearch'),
      fixedReplyDetail?: string(name='fixedReplyDetail'),
      knowledgeBaseCodeList?: [ string ](name='knowledgeBaseCodeList'),
      promptStrategy?: string(name='promptStrategy'),
      ragRejectType?: string(name='ragRejectType'),
      rejectFilterPrompt?: string(name='rejectFilterPrompt'),
      rejectFilterType?: string(name='rejectFilterType'),
      retrieveMaxLength?: int32(name='retrieveMaxLength'),
      topK?: int32(name='topK'),
    }(name='ragConfig'),
    securityConfig?: {
      processingStrategy?: string(name='processingStrategy'),
    }(name='securityConfig'),
    tools?: [ 
      {
        type?: string(name='type'),
      }
    ](name='tools'),
    workFlows?: [ 
      {
        type?: string(name='type'),
      }
    ](name='workFlows'),
  }(name='applicationConfig', shrink='json', position='Body'),
  instructions?: string(name='instructions', position='Body'),
  modelId?: string(name='modelId', position='Body'),
  name?: string(name='name', position='Body'),
  sampleLibrary?: {
    enableSample?: boolean(name='enableSample'),
    sampleLibraryIdList?: [ string ](name='sampleLibraryIdList'),
    topK?: int32(name='topK'),
  }(name='sampleLibrary', shrink='json', position='Body'),
}

model CreateAndPulishAgentResponseBody = {
  code?: string(name='code'),
  data?: string(name='data'),
  httpStatusCode?: int32(name='httpStatusCode'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
}

model CreateAndPulishAgentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAndPulishAgentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateAndPulishAgent  CreateAndPulishAgentRequest
  * @return CreateAndPulishAgentResponse
 */
async function createAndPulishAgent(request: CreateAndPulishAgentRequest): CreateAndPulishAgentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateAndPulishAgent', 'POST', '/{workspaceId}/application/agents', 'json', true, 'form', request);
}

model CreateIndexRequest {
  workspaceId: string(name='WorkspaceId', description='The ID of the workspace to which the knowledge base belongs. To view the workspace ID, you can click the Workspace Details icon in the upper-left corner on the [homepage](https://bailian.console.aliyun.com/#/home) of the console.

This parameter is required.', example='ws_3Nt27MYcoK191ISp', position='Path'),
  categoryIds?: [ string ](name='CategoryIds', description='The list of primary key IDs of the categories to be imported into the knowledge base.', shrink='json', position='Query'),
  chunkSize?: int32(name='ChunkSize', description='The estimated length of chunks. The maximum number of characters for a chunk. Texts exceeding this limit are splited. For more information, see [Create a knowledge base](https://www.alibabacloud.com/help/en/model-studio/user-guide/rag-knowledge-base). Valid values: [1-2048].

The default value is empty, which means using the intelligent splitting method.

>  If you specify the `ChunkSize` parameter, you must also specify the `OverlapSize` and `Separator` parameters. If you do not specify these three parameters, the system uses the intelligent splitting method by default.', example='128', position='Query'),
  columns?: [ 
    {
      column?: string(name='Column'),
      isRecall?: boolean(name='IsRecall'),
      isSearch?: boolean(name='IsSearch'),
      name?: string(name='Name'),
      type?: string(name='Type'),
    }
  ](name='Columns', shrink='json', position='Query'),
  createIndexType?: string(name='CreateIndexType', position='Query'),
  dataSource?: {
    credentialId?: string(name='CredentialId', description='>  This parameter is not available. Do not specify this parameter.'),
    credentialKey?: string(name='CredentialKey', description='>  This parameter is not available. Do not specify this parameter.'),
    database?: string(name='Database', description='>  This parameter is not available. Do not specify this parameter.'),
    endpoint?: string(name='Endpoint', description='>  This parameter is not available. Do not specify this parameter.'),
    isPrivateLink?: boolean(name='IsPrivateLink', description='>  This parameter is not available. Do not specify this parameter.'),
    region?: string(name='Region', description='>  This parameter is not available. Do not specify this parameter.'),
    subPath?: string(name='SubPath', description='>  This parameter is not available. Do not specify this parameter.'),
    subType?: string(name='SubType', description='>  This parameter is not available. Do not specify this parameter.'),
    table?: string(name='Table', description='>  This parameter is not available. Do not specify this parameter.'),
    type?: string(name='Type', description='>  This parameter is not available. Do not specify this parameter.'),
  }(name='DataSource', description='>  This parameter is not available. Do not specify this parameter.', shrink='json', position='Query'),
  description?: string(name='Description', description='The description of the knowledge base. The description must be 0 to 1,000 characters in length. This parameter is empty by default.', position='Query'),
  documentIds?: [ string ](name='DocumentIds', description='The list of primary key IDs of the documents to be imported into the knowledge base.', shrink='json', position='Query'),
  embeddingModelName?: string(name='EmbeddingModelName', description='The name of the embedding model. The embedding model converts the original input prompt and knowledge text into numerical vectors for similarity comparison. The default and only model available is DashScope text-embedding-v2. It supports multiple languages including Chinese and English and normalizes the vector results. For more information, see [Create a knowledge base](https://www.alibabacloud.com/help/en/model-studio/user-guide/rag-knowledge-base). Valid value:

*   text-embedding-v2

The default value is null, which means using the text-embedding-v2 model.', example='text-embedding-v2', position='Query'),
  enableRewrite?: boolean(name='EnableRewrite', position='Query'),
  name: string(name='Name', description='The name of the knowledge base. The name must be 1 to 20 characters in length and can contain characters classified as letter in Unicode, including English letters, Chinese characters, digits, among others. The name can also contain colons (:), underscores (_), periods (.), and hyphens (-).

This parameter is required.', position='Query'),
  overlapSize?: int32(name='OverlapSize', description='The overlap length. The number of overlapping characters between two consecutive chunks. For more information, see [Create a knowledge base](https://www.alibabacloud.com/help/en/model-studio/user-guide/rag-knowledge-base). Valid values: 0 to 1024.

The default value is empty, which means using the intelligent splitting method.', example='16', position='Query'),
  rerankMinScore?: double(name='RerankMinScore', description='Similarity Threshold. The lowest similarity score of chunks that can be returned. This parameter is used to filter text chunks returned by the rank model. For more information, see [Create a knowledge base](https://www.alibabacloud.com/help/en/model-studio/user-guide/rag-knowledge-base). Valid values: [0.01-1.00].

Default value: 0.20.', example='0.20', position='Query'),
  rerankModelName?: string(name='RerankModelName', description='The name of the rank model. The rank model is a scoring system outside the knowledge base. It calculates the similarity score of each text chunk in the input question and knowledge base and ranks them in descending order. Then, the model returns the top K chunks with the highest scores. For more information, see [Create a knowledge base](https://www.alibabacloud.com/help/en/model-studio/user-guide/rag-knowledge-base). Valid values:

*   gte-rerank-hybrid
*   gte-rerank

The default value is empty, which means using the official gte-rerank-hybrid model.

>  If you need only semantic ranking, we recommend that you use gte-rerank. If you need both semantic ranking and text matching features to ensure relevance, we recommend that you use gte-rerank-hybrid.', example='gte-rerank-hybrid', position='Query'),
  separator?: string(name='Separator', description='The clause identifier. The document is split into chunks based on this identifier. For more information, see [Create a knowledge base](https://www.alibabacloud.com/help/en/model-studio/user-guide/rag-knowledge-base). You can specify multiple identifiers and do not need to add any other characters to separate them. For example: !,\\\\\\n. Valid values:

*   \\n: line break
*   ，: Chinese comma
*   ,: English comma
*   。 : Chinese full stop
*   .: English full stop
*   ！ : Chinese exclamation point
*   ! : English exclamation point
*   ；: Chinese semicolon
*   ;: English semicolon
*   ？: Chinese question mark
*   ?: English question mark

The default value is empty, which means using the intelligent splitting method.', example=',', position='Query'),
  sinkInstanceId?: string(name='SinkInstanceId', description='The ID of the vector storage instance. This parameter is available only when SinkType is set to ADB. You can view the ID on the [Instances](https://gpdbnext.console.aliyun.com/gpdb/list) page of AnalyticDB for PostgreSQL.', example='gp-bp321093j84', position='Query'),
  sinkRegion?: string(name='SinkRegion', description='The region of the vector storage instance. This parameter is available only when SinkType is set to ADB. You can call the [DescribeRegions](https://www.alibabacloud.com/help/en/analyticdb/analyticdb-for-postgresql/developer-reference/api-gpdb-2016-05-03-describeregions) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  sinkType: string(name='SinkType', description='The vector storage type of the knowledge base. For more information, see [Create a knowledge base](https://www.alibabacloud.com/help/en/model-studio/user-guide/rag-knowledge-base). Valid values:

*   DEFAULT: The built-in vector database.
*   ADB: AnalyticDB for PostgreSQL database. If you need advanced features, such as managing, auditing, and monitoring, we recommend that you specify ADB.

>  If you have not used AnalyticDB for AnalyticDB in Model Studio before, go to the [Create Knowledge Base](https://bailian.console.aliyun.com/#/knowledge-base/create) page, select ADB-PG as Vector Storage Type, and follow the instructions to grant permissions. If you specify ADB, you must also specify the `SinkInstanceId` and `SinkRegion` parameters.

This parameter is required.', example='DEFAULT', position='Query'),
  sourceType?: string(name='SourceType', description='The data type of [Data Management](https://bailian.console.aliyun.com/#/data-center). For more information, see [Create a knowledge base](https://www.alibabacloud.com/help/en/model-studio/user-guide/rag-knowledge-base). Valid values:

*   DATA_CENTER_CATEGORY: The category type. Import all documents from one or more categories in Data Center.
*   DATA_CENTER_FILE: The document type. Import one or more documents from Data Center.

>  If this parameter is set to DATA_CENTER_CATEGORY, you must specify the `CategoryIds` parameter. If this parameter is set to DATA_CENTER_FILE, you must specify the `DocumentIds` parameter.

>  If you want to create an empty knowledge base, you can use an empty category. Set this parameter to DATA_CENTER_CATEGORY. And specify the ID of an empty category for the `CategoryIds` parameter.', example='DATA_CENTER_FILE', position='Query'),
  structureType: string(name='StructureType', description='The data type of the knowledge base. For more information, see [Create a knowledge base](https://www.alibabacloud.com/help/en/model-studio/user-guide/rag-knowledge-base). Valid value:

*   unstructured

>  After a knowledge base is created, its data type cannot be changed. You cannot create a structured knowledge base by calling an API operation. Use the console instead.

This parameter is required.', example='structured', position='Query'),
  tableIds?: [ string ](name='TableIds', shrink='json', position='Query'),
  chunkMode?: string(name='chunkMode', position='Query'),
  enableHeaders?: boolean(name='enableHeaders', position='Query'),
  metaExtractColumns?: [ 
    {
      desc?: string(name='Desc'),
      enableLlm?: boolean(name='EnableLlm'),
      enableSearch?: boolean(name='EnableSearch'),
      key?: string(name='Key'),
      type?: string(name='Type'),
      value?: string(name='Value'),
    }
  ](name='metaExtractColumns', shrink='json', position='Query'),
}

model CreateIndexResponseBody = {
  code?: string(name='Code', description='HTTP status code', example='Forbidden'),
  data?: {
    id?: string(name='Id', description='The primary key ID of the knowledge base, `IndexId`.

>  We recommend that you store this ID. It is required for all subsequent API operations related to this knowledge base.', example='jkurxhju6b'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message.', example='Invalid input, variable name is missing'),
  requestId?: string(name='RequestId', description='The request ID.', example='17204B98-7734-4F9A-8464-2446A84821CA'),
  status?: string(name='Status', description='The status code.', example='200'),
  success?: boolean(name='Success', description='Indications whether the API call is successful. Valid values:

*   true
*   false', example='true'),
}

model CreateIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateIndexResponseBody(name='body'),
}

/**
  * @description 1.  You must first upload documents to [Data Management](https://bailian.console.aliyun.com/#/data-center) and obtain the `FileId`. The documents are the knowledge source of the knowledge base. For more information, see [Import Data](https://www.alibabacloud.com/help/en/model-studio/user-guide/data-import-instructions).
  * 2.  This operation only initializes a knowledge base creation job. You must also call the [SubmitIndexJob](https://www.alibabacloud.com/help/en/model-studio/developer-reference/api-bailian-2023-12-29-submitindexjob) operation to complete the job.
  * 3.  This interface is not idempotent.
  * @param request  the request parameters of CreateIndex  CreateIndexRequest
  * @return CreateIndexResponse
 */
async function createIndex(request: CreateIndexRequest): CreateIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateIndex', 'POST', '/{WorkspaceId}/index/create', 'json', false, 'json', request);
}

model CreateMemoryRequest {
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-us9hjmt32nysdm5v', position='Path'),
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  description?: string(name='description', position='Query'),
}

model CreateMemoryResponseBody = {
  memoryId?: string(name='memoryId', example='6bff4f317a14442fbc9f73d29dbd5fc3'),
  requestId?: string(name='requestId', example='6a71f2d9-f1c9-913b-818b-114029103cad'),
}

model CreateMemoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMemoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateMemory  CreateMemoryRequest
  * @return CreateMemoryResponse
 */
async function createMemory(request: CreateMemoryRequest): CreateMemoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateMemory', 'POST', '/{workspaceId}/memories', 'json', false, 'json', request);
}

model CreateMemoryNodeRequest {
  workspaceId?: string(name='workspaceId', example='llm-us9hjmt32nysdm5v', position='Path'),
  memoryId: string(name='memoryId', description='This parameter is required.', example='6bff4f317a14442fbc9f73d29dbd5fc3', position='Path'),
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  content: string(name='content', description='This parameter is required.', position='Query'),
}

model CreateMemoryNodeResponseBody = {
  memoryNodeId?: string(name='memoryNodeId', example='68de06c95368463a8be4a84efc872cc5'),
  requestId?: string(name='requestId', example='8C56C7AF-6573-19CE-B018-E05E1EDCF4C5'),
}

model CreateMemoryNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMemoryNodeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateMemoryNode  CreateMemoryNodeRequest
  * @return CreateMemoryNodeResponse
 */
async function createMemoryNode(request: CreateMemoryNodeRequest): CreateMemoryNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateMemoryNode', 'POST', '/{workspaceId}/memories/{memoryId}/memoryNodes', 'json', false, 'json', request);
}

model CreatePromptTemplateRequest {
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-czal8nvvwb8d4xxx', position='Path'),
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  content: string(name='content', description='This parameter is required.', position='Query'),
  name: string(name='name', description='This parameter is required.', position='Query'),
}

model CreatePromptTemplateResponseBody = {
  promptTemplateId?: string(name='promptTemplateId', example='6e49109bfeb94a39bb268f4e483ccxxx'),
  requestId?: string(name='requestId', example='FE9B6CBF-47E6-5D76-9C5D-B814DD5ABxxx'),
}

model CreatePromptTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePromptTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreatePromptTemplate  CreatePromptTemplateRequest
  * @return CreatePromptTemplateResponse
 */
async function createPromptTemplate(request: CreatePromptTemplateRequest): CreatePromptTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreatePromptTemplate', 'POST', '/{workspaceId}/promptTemplates', 'json', false, 'json', request);
}

model DeleteAgentRequest {
  workspaceId?: string(name='workspaceId', position='Path'),
  appCode?: string(name='appCode', position='Path'),
}

model DeleteAgentResponseBody = {
  code?: string(name='code'),
  data?: string(name='data'),
  httpStatusCode?: int32(name='httpStatusCode'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
}

model DeleteAgentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAgentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteAgent  DeleteAgentRequest
  * @return DeleteAgentResponse
 */
async function deleteAgent(request: DeleteAgentRequest): DeleteAgentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteAgent', 'DELETE', '/{workspaceId}/application/agents/{appCode}', 'json', false, 'json', request);
}

model DeleteCategoryRequest {
  categoryId: string(name='CategoryId', description='This parameter is required.', example='cate_cdd11b1b79a74e8bbd675c356a91ee3510024405', position='Path'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='ws_3AXoiweeTyTd03IN', position='Path'),
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
}

model DeleteCategoryResponseBody = {
  code?: string(name='Code', example='success'),
  data?: {
    categoryId?: string(name='CategoryId', example='cate_cdd11b1b79a74e8bbd675c356a91ee3XXXXXXXX'),
  }(name='Data', description='data'),
  message?: string(name='Message', example='workspace id is null or invalid.'),
  requestId?: string(name='RequestId', description='Id of the request', example='17204B98-xxxx-4F9A-8464-2446A84821CA'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model DeleteCategoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCategoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteCategory  DeleteCategoryRequest
  * @return DeleteCategoryResponse
 */
async function deleteCategory(request: DeleteCategoryRequest): DeleteCategoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteCategory', 'DELETE', '/{WorkspaceId}/datacenter/category/{CategoryId}/', 'json', false, 'json', request);
}

model DeleteChunkRequest {
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='llm-3z7uw7fwz0vexxxx', position='Path'),
  chunkIds: [ string ](name='ChunkIds', description='This parameter is required.', shrink='json', position='Query'),
  pipelineId: string(name='PipelineId', description='This parameter is required.', example='79c0alxxxx', position='Query'),
}

model DeleteChunkResponseBody = {
  code?: string(name='Code', example='InvalidParameter'),
  data?: boolean(name='Data', example='true'),
  message?: string(name='Message', example='Required parameter(%s) missing or invalid, please check the request parameters.'),
  requestId?: string(name='RequestId', description='Id of the request', example='35A267BF-xxxx-54DB-8394-AA3B0742D833'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model DeleteChunkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteChunkResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteChunk  DeleteChunkRequest
  * @return DeleteChunkResponse
 */
async function deleteChunk(request: DeleteChunkRequest): DeleteChunkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteChunk', 'POST', '/{WorkspaceId}/chunk/delete', 'json', false, 'json', request);
}

model DeleteFileRequest {
  fileId: string(name='FileId', description='This parameter is required.', example='file_9a65732555b54d5ea10796ca5742ba22_XXXXXXXX', position='Path'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='ws_3Nt27MYcoK191ISp', position='Path'),
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
}

model DeleteFileResponseBody = {
  code?: string(name='Code', example='InvalidParameter'),
  data?: {
    fileId?: string(name='FileId', example='file_9a65732555b54d5ea10796ca5742ba22_XXXXXXXX'),
  }(name='Data'),
  message?: string(name='Message', example='Current file status does not support delete.'),
  requestId?: string(name='RequestId', description='Id of the request', example='17204B98-xxxx-4F9A-8464-2446A84821CA'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model DeleteFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFileResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteFile  DeleteFileRequest
  * @return DeleteFileResponse
 */
async function deleteFile(request: DeleteFileRequest): DeleteFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteFile', 'DELETE', '/{WorkspaceId}/datacenter/file/{FileId}/', 'json', false, 'json', request);
}

model DeleteIndexRequest {
  workspaceId: string(name='WorkspaceId', description='The ID of the workspace to which the knowledge base belongs. You can click the Workspace Details icon in the upper-left corner on the [homepage](https://bailian.console.aliyun.com/#/home) of the console to view the workspace ID.

This parameter is required.', example='ws_3AXoiweeTyTd03IN', position='Path'),
  indexId: string(name='IndexId', description='The primary key ID of the knowledge base, which is the `Data.Id` parameter returned by the [CreateIndex](https://www.alibabacloud.com/help/en/model-studio/developer-reference/api-bailian-2023-12-29-createindex) operation.

This parameter is required.', example='f89ie0fj5a', position='Query'),
}

model DeleteIndexResponseBody = {
  code?: string(name='Code', description='HTTP status code', example='Index.InvalidParameter'),
  message?: string(name='Message', description='The error message.', example='Required parameter(%s) missing or invalid, please check the request parameters.'),
  requestId?: string(name='RequestId', description='The request ID.', example='17204B98-xxxx-4F9A-8464-2446A84821CA'),
  status?: string(name='Status', description='The status code.', example='200'),
  success?: boolean(name='Success', description='Indications whether the API call is successful. Valid values:

*   true
*   false', example='true'),
}

model DeleteIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIndexResponseBody(name='body'),
}

/**
  * @description *   Before you call this operation, make sure that your knowledge base is created and is not deleted. That is, the primary key ID of the knowledge base `IndexId` is valid.
  * *   If a knowledge base is being called by an application, disassociate the knowledge base before you can delete it. To disassociate the knowledge base, you must use the console. For more information, see [Create a knowledge base](https://www.alibabacloud.com/help/en/model-studio/user-guide/rag-knowledge-base).
  * *   After you delete a knowledge base, it cannot be recovered. We recommend that you proceed with caution.
  * *   Imported documents are not deleted from the [Data Management](https://bailian.console.aliyun.com/#/data-center) if you call this operation.
  * *   This interface is idempotent.
  * @param request  the request parameters of DeleteIndex  DeleteIndexRequest
  * @return DeleteIndexResponse
 */
async function deleteIndex(request: DeleteIndexRequest): DeleteIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteIndex', 'POST', '/{WorkspaceId}/index/delete', 'json', false, 'json', request);
}

model DeleteIndexDocumentRequest {
  workspaceId: string(name='WorkspaceId', description='The ID of the workspace to which the knowledge base belongs. To view the workspace ID, you can click the Workspace Details icon in the upper-left corner on the [homepage](https://bailian.console.aliyun.com/#/home) of the console.

This parameter is required.', example='ws_3Nt27MYcoK191ISp', position='Path'),
  documentIds: [ string ](name='DocumentIds', description='The list of the primary key IDs of the documents.

This parameter is required.', shrink='json', position='Query'),
  indexId: string(name='IndexId', description='The primary key ID of the knowledge base, which is the `Data.Id` parameter returned by the [CreateIndex](https://www.alibabacloud.com/help/en/model-studio/developer-reference/api-bailian-2023-12-29-createindex) operation.

This parameter is required.', example='79c0aly8zw', position='Query'),
}

model DeleteIndexDocumentResponseBody = {
  code?: string(name='Code', description='HTTP status code', example='Index.InvalidParameter'),
  data?: {
    deletedDocument?: [ string ](name='DeletedDocument', description='The list of primary key IDs of documents that are deleted.'),
  }(name='Data', description='The parameters returned by the operation.'),
  message?: string(name='Message', description='The error message.', example='Required parameter(%s) missing or invalid, please check the request parameters.'),
  requestId?: string(name='RequestId', description='The request ID.', example='17204B98-xxxx-4F9A-8464-2446A84821CA'),
  status?: string(name='Status', description='The status code.', example='200'),
  success?: boolean(name='Success', description='Indications whether the API call is successful. Valid values:

*   true
*   false', example='true'),
}

model DeleteIndexDocumentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIndexDocumentResponseBody(name='body'),
}

/**
  * @description *   Before you call this operation, make sure that your knowledge base is created and is not deleted. That is, the primary key ID of the knowledge base `IndexId` is valid.
  * *   Only documents with the INSERT_ERROR and FINISH states can be deleted. To query the status of documents in a specified knowledge base, call the [ListIndexDocuments](https://www.alibabacloud.com/help/en/model-studio/developer-reference/api-bailian-2023-12-29-listindexdocuments) operation.
  * *   After you delete a document, it cannot be recovered and the [Retrieve](https://www.alibabacloud.com/help/en/model-studio/developer-reference/api-bailian-2023-12-29-retrieve) operation cannot query information about the document. We recommend that you proceed with caution.
  * *   Imported documents are not deleted from the [Data Management](https://bailian.console.aliyun.com/#/data-center) if you call this operation.
  * *   This interface is idempotent.
  * @param request  the request parameters of DeleteIndexDocument  DeleteIndexDocumentRequest
  * @return DeleteIndexDocumentResponse
 */
async function deleteIndexDocument(request: DeleteIndexDocumentRequest): DeleteIndexDocumentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteIndexDocument', 'POST', '/{WorkspaceId}/index/delete_index_document', 'json', false, 'json', request);
}

model DeleteMemoryRequest {
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-us9hjmt32nysdm5v', position='Path'),
  memoryId: string(name='memoryId', description='This parameter is required.', example='6bff4f317a14442fbc9f73d29dbd5fc3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model DeleteMemoryResponseBody = {
  requestId?: string(name='requestId', example='6a71f2d9-f1c9-913b-818b-114029103cad'),
}

model DeleteMemoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMemoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteMemory  DeleteMemoryRequest
  * @return DeleteMemoryResponse
 */
async function deleteMemory(request: DeleteMemoryRequest): DeleteMemoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteMemory', 'DELETE', '/{workspaceId}/memories/{memoryId}', 'json', false, 'json', request);
}

model DeleteMemoryNodeRequest {
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-us9hjmt32nysdm5v', position='Path'),
  memoryId: string(name='memoryId', description='This parameter is required.', example='6bff4f317a14442fbc9f73d29dbd5fc3', position='Path'),
  memoryNodeId: string(name='memoryNodeId', description='This parameter is required.', example='68de06c95368463a8be4a84efc872cc5', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model DeleteMemoryNodeResponseBody = {
  requestId?: string(name='requestId', example='8C56C7AF-6573-19CE-B018-E05E1EDCF4C5'),
}

model DeleteMemoryNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMemoryNodeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteMemoryNode  DeleteMemoryNodeRequest
  * @return DeleteMemoryNodeResponse
 */
async function deleteMemoryNode(request: DeleteMemoryNodeRequest): DeleteMemoryNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteMemoryNode', 'DELETE', '/{workspaceId}/memories/{memoryId}/memoryNodes/{memoryNodeId}', 'json', false, 'json', request);
}

model DeletePromptTemplateRequest {
  workspaceId: string(name='workspaceId', description='The workspace ID.

This parameter is required.', example='llm-us9hjmt32nysdxxx', position='Path'),
  promptTemplateId: string(name='promptTemplateId', description='The template ID.

This parameter is required.', example='6e49109bfeb94a39bb268f4e483ccxxx', position='Path'),
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
}

model DeletePromptTemplateResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='FE9B6CBF-47E6-5D76-9C5D-B814DD5ABxxx'),
}

model DeletePromptTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePromptTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeletePromptTemplate  DeletePromptTemplateRequest
  * @return DeletePromptTemplateResponse
 */
async function deletePromptTemplate(request: DeletePromptTemplateRequest): DeletePromptTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeletePromptTemplate', 'DELETE', '/{workspaceId}/promptTemplates/{promptTemplateId}', 'json', false, 'json', request);
}

model DescribeFileRequest {
  workspaceId: string(name='WorkspaceId', description='The ID of the workspace to which the document belongs. On the [homepage](https://bailian.console.aliyun.com/knowledge-base#/home) of the console, click the workspace Details icon in the upper-left corner to view the workspace ID.

This parameter is required.', example='ws_3AXoiweeTyTd03IN', position='Path'),
  fileId: string(name='FileId', description='The primary key ID of the document. You can click the ID icon next to the file name on the [Data Management](https://bailian.console.aliyun.com/knowledge-base#/data-center) page to view the ID.

This parameter is required.', example='file_9a65732555b54d5ea10796ca5742ba22_XXXXXXXX', position='Path'),
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
}

model DescribeFileResponseBody = {
  code?: string(name='Code', description='The status code.', example='Success'),
  data?: {
    categoryId?: string(name='CategoryId', description='The ID of the category to which the document belongs.', example='cate_cdd11b1b79a74e8bbd675c356a91ee3XXXXXXXX'),
    createTime?: string(name='CreateTime', description='The timestamp when the document was uploaded to Model Studio. Format: yyyy-MM-dd HH:mm:ss. Time zone: UTC + 8.', example='2024-05-26 12:45:43'),
    fileId?: string(name='FileId', description='The primary key ID of the document.', example='file_9a65732555b54d5ea10796ca5742ba22_XXXXXXXX'),
    fileName?: string(name='FileName', description='The name of the document.', example='test.pdf'),
    fileType?: string(name='FileType', description='The file type of the document. The value is an extension. Valid values: pdf, docx, doc, txt, md, pptx, and ppt.', example='pdf'),
    parser?: string(name='Parser', description='The parser that is used to parse the document. Valid value:

*   DASHSCOPE_DOCMIND: The default document parser.', example='DASHSCOPE_DOCMIND'),
    sizeInBytes?: long(name='SizeInBytes', description='The size of the document. Unit: bytes.', example='1234'),
    status?: string(name='Status', description='The status of the document. Valid values:

*   INIT: pending parsing.
*   PARSING
*   PARSE_SUCCESS
*   PARSE_FAILED', example='PARSE_SUCCESS'),
    tags?: [ string ](name='Tags', description='The tags that are associated with the document. A document can be associated with multiple tags.'),
  }(name='Data', description='The returned data fields.'),
  message?: string(name='Message', description='The error message.', example='Requests throttling triggered.'),
  requestId?: string(name='RequestId', description='The request ID.', example='17204B98-xxxx-4F9A-8464-2446A84821CA'),
  status?: string(name='Status', description='The HTTP status code.', example='200'),
  success?: boolean(name='Success', description='Indications whether the API call is successful. Valid values:

*   true
*   false', example='true'),
}

model DescribeFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFileResponseBody(name='body'),
}

/**
  * @description Before you call this API, make sure that your document is uploaded to the [Data Management](https://bailian.console.aliyun.com/knowledge-base#/data-center) page of Alibaba Cloud Model Studio.
  * *   You can also call this operation to query unstructured documents that you upload on the [Data Management](https://bailian.console.aliyun.com/knowledge-base#/data-center) page.
  * *   This operation is idempotent.
  * **Throttling:** Make sure that the interval between the two queries is at least 15 seconds. Otherwise, you may trigger system throttling. If throttling is triggered, try again later.
  * @param request  the request parameters of DescribeFile  DescribeFileRequest
  * @return DescribeFileResponse
 */
async function describeFile(request: DescribeFileRequest): DescribeFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeFile', 'GET', '/{WorkspaceId}/datacenter/file/{FileId}/', 'json', false, 'json', request);
}

model GetAlipayTransferStatusRequest {
  code?: string(name='code', example='xxx-xxxx', position='Query'),
  workspaceId?: string(name='workspace_id', example='llm-cxxxxxxb8d47ks', position='Query'),
}

model GetAlipayTransferStatusResponseBody = {
  data?: {
    accountId?: string(name='accountId', example='1348393307144609'),
    alipayOrderDetail?: string(name='alipayOrderDetail'),
    alipayOrderId?: string(name='alipayOrderId'),
    code?: string(name='code', example='0'),
    creator?: string(name='creator'),
    mainAccountId?: string(name='mainAccountId', example='1007576424487905'),
    modifier?: string(name='modifier'),
    qrURL?: string(name='qrURL'),
    scope?: string(name='scope'),
    status?: long(name='status', example='1'),
    title?: string(name='title'),
    transAmount?: string(name='transAmount'),
    walletItemCode?: string(name='walletItemCode'),
  }(name='data'),
  requestId?: string(name='requestId', example='6a71f2d9-f1c9-913b-818b-11402910xxxx'),
}

model GetAlipayTransferStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAlipayTransferStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAlipayTransferStatus  GetAlipayTransferStatusRequest
  * @return GetAlipayTransferStatusResponse
 */
async function getAlipayTransferStatus(request: GetAlipayTransferStatusRequest): GetAlipayTransferStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAlipayTransferStatus', 'POST', '/openapi/alipay/transfer/status', 'json', false, 'json', request);
}

model GetAlipayUrlRequest {
  appId?: string(name='app_id', position='Query'),
  workspaceId?: string(name='workspace_id', position='Query'),
}

model GetAlipayUrlResponseBody = {
  data?: {
    code?: string(name='code', example='xxsdfasfw'),
    qrUrl?: string(name='qrUrl'),
  }(name='data'),
  requestId?: string(name='requestId', example='6a71f2d9-f1c9-913b-818b-11402910xxxx'),
}

model GetAlipayUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAlipayUrlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAlipayUrl  GetAlipayUrlRequest
  * @return GetAlipayUrlResponse
 */
async function getAlipayUrl(request: GetAlipayUrlRequest): GetAlipayUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAlipayUrl', 'GET', '/openapi/alipay/transfer/url', 'json', false, 'json', request);
}

model GetIndexJobStatusRequest {
  workspaceId: string(name='WorkspaceId', description='The ID of the workspace to which the knowledge base belongs. To view the workspace ID, you can click the Workspace Details icon in the upper-left corner on the [homepage](https://bailian.console.aliyun.com/#/home) of the console.

This parameter is required.', example='ws_3Nt27MYcoK191ISp', position='Path'),
  indexId: string(name='IndexId', description='The primary key ID of the knowledge base, which is the `Data.Id` parameter returned by the [CreateIndex](https://www.alibabacloud.com/help/en/model-studio/developer-reference/api-bailian-2023-12-29-createindex) operation.

This parameter is required.', example='79c0aly8zw', position='Query'),
  jobId: string(name='JobId', description='The knowledge base job ID, which is the `Data.Id` parameter returned by the [SubmitIndexJob](https://www.alibabacloud.com/help/en/model-studio/developer-reference/api-bailian-2023-12-29-submitindexjob) or [SubmitIndexAddDocumentsJob](https://www.alibabacloud.com/help/en/model-studio/developer-reference/api-bailian-2023-12-29-submitindexadddocumentsjob) operations.

This parameter is required.', example='20230718xxxx-146c93bf', position='Query'),
  pageNumber?: int32(name='PageNumber', description='Both the [SubmitIndexJob](https://www.alibabacloud.com/help/en/model-studio/developer-reference/api-bailian-2023-12-29-submitindexjob) and [SubmitIndexAddDocumentsJob](https://www.alibabacloud.com/help/en/model-studio/developer-reference/api-bailian-2023-12-29-submitindexadddocumentsjob) operations support batch import of documents. This operation returns both the overall `Status` of the job and the `Document.Status` of each document. If there are a large number of documents, you can use the `PageNumber` parameter to perform a paged query. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='pageSize', description='The number of document import jobs that are displayed on each page. No maximum value. Default value: 10.', example='10', position='Query'),
}

model GetIndexJobStatusResponseBody = {
  code?: string(name='Code', description='HTTP status code', example='Index.Forbidden'),
  data?: {
    documents?: [ 
      {
        code?: string(name='Code', description='HTTP status code', example='Index.Document.ChunkError'),
        docId?: string(name='DocId', description='The primary key ID of the document.', example='file_9a65732555b54d5ea10796ca5742ba22_XXXXXXXX'),
        docName?: string(name='DocName', description='The name of the document.'),
        gmtModified?: long(name='GmtModified'),
        message?: string(name='Message', description='The error message.', example='document parse error'),
        status?: string(name='Status', description='The import status of the document. Valid values:

*   INSERT_ERROR
*   RUNNING
*   DELETED
*   FINISH', example='RUNNING'),
      }
    ](name='Documents', description='The list of imported documents.'),
    jobId?: string(name='JobId', description='The ID of the job.', example='66122af12a4e45ddae6bd6c845556647'),
    status?: string(name='Status', description='The status of the knowledge base job. Valid values:

*   COMPLETED
*   FAILED
*   RUNNING
*   PENDING', example='PENDING'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message.', example='User not authorized to operate on the specified resource.'),
  requestId?: string(name='RequestId', description='The request ID.', example='17204B98-xxxx-4F9A-8464-2446A84821CA'),
  status?: string(name='Status', description='The HTTP status code returned.', example='200'),
  success?: boolean(name='Success', description='Indications whether the API call is successful. Valid values:

*   true
*   false', example='true'),
}

model GetIndexJobStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetIndexJobStatusResponseBody(name='body'),
}

/**
  * @description 1.  A knowledge base job is running. You can call the [SubmitIndexJob](https://www.alibabacloud.com/help/en/model-studio/developer-reference/api-bailian-2023-12-29-submitindexjob) operation to create a creation job or the [SubmitIndexAddDocumentsJob](https://www.alibabacloud.com/help/en/model-studio/developer-reference/api-bailian-2023-12-29-submitindexadddocumentsjob) operation to create a add document job. Then, obtain the `JobId` returned by the operations.
  * 2.  We recommend that you call this operation at intervals of more than 5 seconds.
  * 3.  This interface is idempotent.
  * @param request  the request parameters of GetIndexJobStatus  GetIndexJobStatusRequest
  * @return GetIndexJobStatusResponse
 */
async function getIndexJobStatus(request: GetIndexJobStatusRequest): GetIndexJobStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetIndexJobStatus', 'GET', '/{WorkspaceId}/index/job/status', 'json', false, 'json', request);
}

model GetMemoryRequest {
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-us9hjmt32nysdm5v', position='Path'),
  memoryId: string(name='memoryId', description='This parameter is required.', example='6bff4f317a14442fbc9f73d29dbd5fc3', position='Path'),
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
}

model GetMemoryResponseBody = {
  description?: string(name='description'),
  memoryId?: string(name='memoryId', example='6bff4f317a14442fbc9f73d29dbd5fc3'),
  requestId?: string(name='requestId', example='6a71f2d9-f1c9-913b-818b-114029103cad'),
  workspaceId?: string(name='workspaceId', example='llm-us9hjmt32nysdm5v'),
}

model GetMemoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMemoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetMemory  GetMemoryRequest
  * @return GetMemoryResponse
 */
async function getMemory(request: GetMemoryRequest): GetMemoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetMemory', 'GET', '/{workspaceId}/memories/{memoryId}', 'json', false, 'json', request);
}

model GetMemoryNodeRequest {
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-us9hjmt32nysdm5v', position='Path'),
  memoryId: string(name='memoryId', description='This parameter is required.', example='6bff4f317a14442fbc9f73d29dbd5fc3', position='Path'),
  memoryNodeId: string(name='memoryNodeId', description='This parameter is required.', example='68de06c95368463a8be4a84efc872cc5', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model GetMemoryNodeResponseBody = {
  content?: string(name='content'),
  memoryId?: string(name='memoryId', example='6bff4f317a14442fbc9f73d29dbd5fc3'),
  memoryNodeId?: string(name='memoryNodeId', example='68de06c95368463a8be4a84efc872cc5'),
  requestId?: string(name='requestId', example='8C56C7AF-6573-19CE-B018-E05E1EDCF4C5'),
  workspaceId?: string(name='workspaceId', example='llm-us9hjmt32nysdm5v'),
}

model GetMemoryNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMemoryNodeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetMemoryNode  GetMemoryNodeRequest
  * @return GetMemoryNodeResponse
 */
async function getMemoryNode(request: GetMemoryNodeRequest): GetMemoryNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetMemoryNode', 'GET', '/{workspaceId}/memories/{memoryId}/memoryNodes/{memoryNodeId}', 'json', false, 'json', request);
}

model GetPromptTemplateRequest {
  workspaceId: string(name='workspaceId', description='The workspace ID.

This parameter is required.', example='llm-us9hjmt32nysdxxx', position='Path'),
  promptTemplateId: string(name='promptTemplateId', description='The template ID.

This parameter is required.', example='6e49109bfeb94a39bb268f4e483ccxxx', position='Path'),
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
}

model GetPromptTemplateResponseBody = {
  content?: string(name='content', description='The template content.'),
  name?: string(name='name', description='The template name.'),
  promptTemplateId?: string(name='promptTemplateId', description='The template ID.', example='6e49109bfeb94a39bb268f4e483ccxxx'),
  requestId?: string(name='requestId', description='The request ID.', example='8C56C7AF-6573-19CE-B018-E05E1EDCF4C5'),
  variables?: [ string ](name='variables', description='The variables of the template.', example='["theme"]'),
  workspaceId?: string(name='workspaceId', description='The workspace ID.', example='llm-us9hjmt32nysdxxx'),
}

model GetPromptTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPromptTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPromptTemplate  GetPromptTemplateRequest
  * @return GetPromptTemplateResponse
 */
async function getPromptTemplate(request: GetPromptTemplateRequest): GetPromptTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetPromptTemplate', 'GET', '/{workspaceId}/promptTemplates/{promptTemplateId}', 'json', false, 'json', request);
}

model GetPublishedAgentRequest {
  workspaceId?: string(name='workspaceId', position='Path'),
  appCode?: string(name='appCode', position='Path'),
}

model GetPublishedAgentResponseBody = {
  code?: string(name='code'),
  data?: {
    applicationConfig?: {
      historyConfig?: {
        enableAdbRecord?: boolean(name='enableAdbRecord'),
        enableRecord?: boolean(name='enableRecord'),
        instanceId?: string(name='instanceId'),
        region?: string(name='region'),
        storeCode?: string(name='storeCode'),
      }(name='historyConfig'),
      longTermMemory?: {
        enable?: boolean(name='enable'),
      }(name='longTermMemory'),
      parameters?: {
        dialogRound?: int32(name='dialogRound'),
        maxTokens?: int32(name='maxTokens'),
        temperature?: double(name='temperature'),
      }(name='parameters'),
      ragConfig?: {
        enableCitation?: boolean(name='enableCitation'),
        enableSearch?: boolean(name='enableSearch'),
        knowledgeBaseCodeList?: [ string ](name='knowledgeBaseCodeList'),
        topK?: int32(name='topK'),
      }(name='ragConfig'),
      security?: {
        processingStrategy?: string(name='processingStrategy'),
      }(name='security'),
      tools?: [ 
        {
          type?: string(name='type'),
        }
      ](name='tools'),
      workFlows?: [ 
        {
          type?: string(name='type'),
        }
      ](name='workFlows'),
    }(name='applicationConfig'),
    code?: string(name='code'),
    instructions?: string(name='instructions'),
    modelId?: string(name='modelId'),
    name?: string(name='name'),
  }(name='data'),
  httpStatusCode?: int32(name='httpStatusCode'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
}

model GetPublishedAgentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPublishedAgentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPublishedAgent  GetPublishedAgentRequest
  * @return GetPublishedAgentResponse
 */
async function getPublishedAgent(request: GetPublishedAgentRequest): GetPublishedAgentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetPublishedAgent', 'GET', '/{workspaceId}/application/agents/{appCode}', 'json', false, 'json', request);
}

model ListCategoryRequest {
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='ws_3Nt27MYcoK191ISp', position='Path'),
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  categoryName?: string(name='CategoryName', position='Body'),
  categoryType: string(name='CategoryType', description='This parameter is required.', example='UNSTRUCTURED', position='Body'),
  maxResults?: int32(name='MaxResults', example='20', minimum=0, maximum=500, position='Body'),
  nextToken?: string(name='NextToken', example='AAAAAdH70eOCSCKtacdomNzak4U=', position='Body'),
  parentCategoryId?: string(name='ParentCategoryId', example='cate_cdd11b1b79a74e8bbd675c356a91ee3XXXXXXXX', position='Body'),
}

model ListCategoryResponseBody = {
  code?: string(name='Code', example='success'),
  data?: {
    categoryList?: [ 
      {
        categoryId?: string(name='CategoryId', example='cate_cdd11b1b79a74e8bbd675c356a91ee3XXXXXXXX'),
        categoryName?: string(name='CategoryName'),
        categoryType?: string(name='CategoryType', example='UNSTRUCTURED'),
        isDefault?: boolean(name='IsDefault', example='true'),
        parentCategoryId?: string(name='ParentCategoryId', example='cate_addd11b1b79a74e8bbd675c356a91ee3XXXXXXXX'),
      }
    ](name='CategoryList'),
    hasNext?: boolean(name='HasNext', example='true'),
    maxResults?: int32(name='MaxResults', example='20'),
    nextToken?: string(name='NextToken', example='AAAAALHWGpGoYCcYMxiFfmlhvh7Z4G8jiXR6IjHYd+M9WQVJ'),
    totalCount?: int32(name='TotalCount', example='20'),
  }(name='Data'),
  message?: string(name='Message', example='workspace id is null or invalid.'),
  requestId?: string(name='RequestId', description='Id of the request', example='17204B98-xxxx-4F9A-8464-2446A84821CA'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model ListCategoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCategoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListCategory  ListCategoryRequest
  * @return ListCategoryResponse
 */
async function listCategory(request: ListCategoryRequest): ListCategoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListCategory', 'POST', '/{WorkspaceId}/datacenter/categories', 'json', true, 'form', request);
}

model ListChunksRequest {
  workspaceId: string(name='WorkspaceId', description='The ID of the workspace to which the knowledge base belongs. To view the workspace ID, you can click the Workspace Details icon in the upper-left corner on the [homepage](https://bailian.console.aliyun.com/#/home) of the console.

This parameter is required.', example='ws_3AXoiweeTyTd03IN', position='Path'),
  fields?: [ string ](name='Fields', description='An array of field names. This parameter is used to filter non-private fields (prefixed with_underscores) in the Metadata parameter returned by this operation. By default, this parameter is left empty, which means all non-private fields in the Metadata parameter are returned. If you only want specified non-private fields, such as title, set this parameter to title.', position='Body'),
  fileId?: string(name='FileId', position='Body'),
  filed?: string(name='Filed', description='The primary key ID of the document. This parameter is not required for structured knowledge base, but is required for unstructured knowledge base. To view the ID, you can click the ID icon next to the file name on the [Data Management](https://bailian.console.aliyun.com/#/data-center) page. You can filter returned chunks by the document ID. This parameter is left empty by default.', example='file_5f03dfea56da4050ab68d61871fc4cb3_10151493', position='Body'),
  indexId: string(name='IndexId', description='The primary key ID of the knowledge base, which is the `Data.Id` parameter returned by the [CreateIndex](https://www.alibabacloud.com/help/en/model-studio/developer-reference/api-bailian-2023-12-29-createindex) operation.

This parameter is required.', example='otoru9en4v', position='Body'),
  pageNum?: int32(name='PageNum', description='The number of the pages to return. Pages start from page 1. Default value: 1.', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The number of chunks to display on each page. Maximum value: 100. Default value: 10.', example='10', position='Body'),
}

model ListChunksResponseBody = {
  code?: string(name='Code', description='The error code.', example='Index.InvalidParameter'),
  data?: {
    nodes?: [ 
      {
        metadata?: any(name='Metadata', description='The metadata map of the chunk.'),
        score?: double(name='Score', description='The similarity score of the chunk.', example='0.3'),
        text?: string(name='Text', description='The text of the chunk.'),
      }
    ](name='Nodes', description='The list of chunks.'),
    total?: long(name='Total', description='The total number of chunks returned.', example='16'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The error message.', example='Required parameter(%s) missing or invalid, please check the request parameters.'),
  requestId?: string(name='RequestId', description='The request ID.', example='8F97A63B-55F1-527F-9D6E-467B6A7E8CF1'),
  status?: string(name='Status', description='The HTTP status code returned.', example='200'),
  success?: boolean(name='Success', description='Indications whether the API call is successful. Valid values:

*   true
*   false', example='true'),
}

model ListChunksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListChunksResponseBody(name='body'),
}

/**
  * @description *   Before you call this operation, make sure that your knowledge base is created and is not deleted. That is, the primary key ID of the knowledge base `IndexId` is valid.
  * *   This interface is idempotent.
  * @param request  the request parameters of ListChunks  ListChunksRequest
  * @return ListChunksResponse
 */
async function listChunks(request: ListChunksRequest): ListChunksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListChunks', 'POST', '/{WorkspaceId}/index/list_chunks', 'json', false, 'json', request);
}

model ListFileRequest {
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='ws_3Nt27MYcoK191ISp', position='Path'),
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  categoryId: string(name='CategoryId', description='This parameter is required.', example='cate_cdd11b1b79a74e8bbd675c356a91ee3510024405', position='Query'),
  fileName?: string(name='FileName', position='Query'),
  maxResults?: int32(name='MaxResults', example='20', position='Query'),
  nextToken?: string(name='NextToken', example='AAAAAdH70eOCSCKtacdomNzak4U=', position='Query'),
}

model ListFileResponseBody = {
  code?: string(name='Code', example='success'),
  data?: {
    fileList?: [ 
      {
        categoryId?: string(name='CategoryId', example='cate_cdd11b1b79a74e8bbd675c356a91ee3510024405'),
        createTime?: string(name='CreateTime', example='2023-08-18 11:03:35'),
        fileId?: string(name='FileId', example='file_5ff599b3455a45db8c41b0054b361518_10098576'),
        fileName?: string(name='FileName', example='auto-test-1721096109278.pdf'),
        fileType?: string(name='FileType', example='docx'),
        parser?: string(name='Parser', example='DASHSCOPE_DOCMIND'),
        sizeInBytes?: long(name='SizeInBytes', example='512'),
        status?: string(name='Status', example='200'),
        tags?: [ string ](name='Tags'),
      }
    ](name='FileList'),
    hasNext?: boolean(name='HasNext', example='true'),
    maxResults?: int32(name='MaxResults', example='20'),
    nextToken?: string(name='NextToken', example='4jzbJk9J6lNeuXD9hP0viA=='),
    totalCount?: int32(name='TotalCount', example='48'),
  }(name='Data'),
  message?: string(name='Message', example='Requests throttling triggered.'),
  requestId?: string(name='RequestId', description='Id of the request', example='8F97A63B-55F1-527F-9D6E-467B6A7E8CF1'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model ListFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFileResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListFile  ListFileRequest
  * @return ListFileResponse
 */
async function listFile(request: ListFileRequest): ListFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListFile', 'GET', '/{WorkspaceId}/datacenter/files', 'json', false, 'json', request);
}

model ListIndexDocumentsRequest {
  workspaceId: string(name='WorkspaceId', description='The ID of the workspace to which the knowledge base belongs. To view the workspace ID, you can click the Workspace Details icon in the upper-left corner on the [homepage](https://bailian.console.aliyun.com/#/home) of the console.

This parameter is required.', example='ws_3Nt27MYcoK191ISp', position='Path'),
  documentName?: string(name='DocumentName', description='The names of the queried documents. The default value is null, which means the names are not used to filter the results.', position='Query'),
  documentStatus?: string(name='DocumentStatus', description='The import status of the documents to be queried. Valid values:

*   INSERT_ERROR
*   RUNNING
*   DELETED
*   FINISH

The default value is null, which means the import status is not used to filter the results.', example='FINISH', position='Query'),
  enableNameLike?: string(name='EnableNameLike', position='Query'),
  indexId: string(name='IndexId', description='The primary key ID of the knowledge base, which is the `Data.Id` parameter returned by the [CreateIndex](https://www.alibabacloud.com/help/en/model-studio/developer-reference/api-bailian-2023-12-29-createindex) operation.

This parameter is required.', example='79c0aly8zw', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page numbers of the pages to return. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of documents displayed on each page. No maximum value. Default value: 10.', example='10', position='Query'),
}

model ListIndexDocumentsResponseBody = {
  code?: string(name='Code', description='HTTP status code', example='InvalidParameter'),
  data?: {
    documents?: [ 
      {
        code?: string(name='Code', description='The error status code of document import.', example='110002'),
        documentType?: string(name='DocumentType', description='The format of the document. Valid values: pdf, docx, doc, txt, md, pptx, ppt, and EXCEL.', example='pdf'),
        gmtModified?: long(name='GmtModified'),
        id?: string(name='Id', description='The primary key ID of the document.', example='doc_c134aa2073204a5d936d870bf960f56a10024701'),
        message?: string(name='Message', description='The error message of document import.', example='check fileUrlKey[file_path] / fileNameKey[null] / fileExtensionKey[file_extension] is invalid'),
        name?: string(name='Name', description='The name of the document.'),
        size?: int32(name='Size', description='The size of the document. Unit: bytes.', example='996764'),
        sourceId?: string(name='SourceId', description='For unstructured knowledge base, this parameter is the category ID. To view the category ID, you can click the ID icon next to the category name on the Unstructured Data tab of the [Data Management](https://bailian.console.aliyun.com/#/data-center) page.

For structured knowledge base, this parameter is the data table ID. To view the table ID, you can click the ID icon next to the table name on the Structured Data tab of the [Data Management](https://bailian.console.aliyun.com/#/data-center) page.', example='cate_21a407a3372c4ba7aedc649709143f0c10021401'),
        status?: string(name='Status', description='The import status of the document. Valid values:

*   INSERT_ERROR
*   RUNNING
*   DELETED
*   FINISH', example='RUNNING'),
      }
    ](name='Documents', description='The list of documents in the knowledge base.'),
    indexId?: string(name='IndexId', description='The primary key ID of the knowledge base.', example='pno97tn8iu'),
    pageNumber?: int32(name='PageNumber', description='The specified page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The specified number of documents on each page.', example='10'),
    totalCount?: long(name='TotalCount', description='The total number of documents returned.', example='2437'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message.', example='Required parameter(%s) missing or invalid, please check the request parameters.'),
  requestId?: string(name='RequestId', description='The request ID.', example='35A267BF-xxxx-54DB-8394-AA3B0742D833'),
  status?: string(name='Status', description='The status code.', example='200'),
  success?: boolean(name='Success', description='Indications whether the API call is successful. Valid values:

*   true
*   false', example='true'),
}

model ListIndexDocumentsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIndexDocumentsResponseBody(name='body'),
}

/**
  * @description *   Before you call this operation, make sure that your knowledge base is created and is not deleted. That is, the primary key ID of the knowledge base `IndexId` is valid.
  * *   This interface is idempotent.
  * @param request  the request parameters of ListIndexDocuments  ListIndexDocumentsRequest
  * @return ListIndexDocumentsResponse
 */
async function listIndexDocuments(request: ListIndexDocumentsRequest): ListIndexDocumentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListIndexDocuments', 'GET', '/{WorkspaceId}/index/list_index_documents', 'json', false, 'json', request);
}

model ListIndexFileDetailsRequest {
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='llm-3z7uw7fwz0vexxxx', position='Path'),
  documentName?: string(name='DocumentName', position='Query'),
  documentStatus?: string(name='DocumentStatus', example='FINISH', position='Query'),
  enableNameLike?: string(name='EnableNameLike', example='false', position='Query'),
  indexId?: string(name='IndexId', example='79c0alxxxx', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
}

model ListIndexFileDetailsResponseBody = {
  code?: string(name='Code', example='InvalidParameter'),
  data?: {
    documents?: [ 
      {
        chunkMode?: string(name='ChunkMode'),
        chunkSize?: string(name='ChunkSize'),
        code?: string(name='Code'),
        documentType?: string(name='DocumentType'),
        enableHeaders?: string(name='EnableHeaders'),
        gmtModified?: long(name='GmtModified'),
        id?: string(name='Id'),
        message?: string(name='Message'),
        name?: string(name='Name'),
        overlapSize?: string(name='OverlapSize'),
        size?: int32(name='Size'),
        sourceId?: string(name='SourceId'),
        status?: string(name='Status'),
        separator?: string(name='separator'),
      }
    ](name='Documents'),
    indexId?: string(name='IndexId'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: long(name='TotalCount'),
  }(name='Data'),
  message?: string(name='Message', example='Required parameter(%s) missing or invalid, please check the request parameters.'),
  requestId?: string(name='RequestId', description='Id of the request', example='35A267BF-xxxx-54DB-8394-AA3B0742D833'),
  status?: string(name='Status'),
  success?: boolean(name='Success', example='true'),
}

model ListIndexFileDetailsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIndexFileDetailsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListIndexFileDetails  ListIndexFileDetailsRequest
  * @return ListIndexFileDetailsResponse
 */
async function listIndexFileDetails(request: ListIndexFileDetailsRequest): ListIndexFileDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListIndexFileDetails', 'POST', '/{WorkspaceId}/index/list_index_file_detail', 'json', false, 'json', request);
}

model ListIndicesRequest {
  workspaceId: string(name='WorkspaceId', description='The ID of the workspace to which the knowledge base belongs. To view the workspace ID, you can click the Workspace Details icon in the upper-left corner on the [homepage](https://bailian.console.aliyun.com/#/home) of the console.

This parameter is required.', example='ws_3Nt27MYcoK191ISp', position='Path'),
  indexName?: string(name='IndexName', description='The name of the knowledge base. You can query knowledge base by name. The name must be 1 to 20 characters in length and can contain characters classified as letter in Unicode, including English letters, Chinese characters, digits, among others. The name can also contain colons (:), underscores (_), periods (.), and hyphens (-).

This parameter is left empty by default, which means that all knowledge bases in the specified workspace are queried.', example='idx_status_score', position='Query'),
  pageNumber?: string(name='PageNumber', description='The number of the pages to return. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: string(name='PageSize', description='The number of knowledge bases to display on each page. No maximum value. Default value: 10.', example='10', position='Query'),
}

model ListIndicesResponseBody = {
  code?: string(name='Code', description='HTTP status code', example='Index.InvalidParameter'),
  data?: {
    indices?: [ 
      {
        chunkSize?: int32(name='ChunkSize', description='The estimated length of chunks. Valid values: [1-2048].', example='5'),
        confgModel?: string(name='ConfgModel'),
        description?: string(name='Description', description='The description of the knowledge base.', example='If each RAM user belongs to a RAM group, the configuration is considered compliant.'),
        documentIds?: [ string ](name='DocumentIds', description='The list of the primary key IDs of the documents.'),
        embeddingModelName?: string(name='EmbeddingModelName', description='The name of the embedding model. Valid values:

*   text-embedding-v2', example='conv-rewrite-qwen-1.8b'),
        enableRewrite?: boolean(name='EnableRewrite'),
        id?: string(name='Id', description='The primary key ID of the knowledge base, which is the `Data.Id` parameter returned by the [CreateIndex](https://www.alibabacloud.com/help/en/model-studio/developer-reference/api-bailian-2023-12-29-createindex) operation.', example='259899'),
        name?: string(name='Name', description='The name of the knowledge base.', example='temp_mUB4j'),
        overlapSize?: int32(name='OverlapSize', description='The overlap length. Valid values: [0-1024].', example='10'),
        rerankMinScore?: string(name='RerankMinScore', description='Similarity Threshold Valid values: [0.01-1.00].', example='0.01'),
        rerankModelName?: string(name='RerankModelName', description='The name of the rank model. Valid values:

*   gte-rerank-hybrid
*   gte-rerank', example='gte-rerank-hybrid'),
        separator?: string(name='Separator', description='The clause identifier. Separate multiple clause identifiers with |. Valid values:

*   \\n: line break
*   ，: Chinese comma
*   ,: English comma
*   。 : Chinese full stop
*   .: English full stop
*   ！ : Chinese exclamation point
*   ! : English exclamation point
*   ；: Chinese semicolon
*   ;: English semicolon
*   ？ : Chinese question mark
*   ?: English question mark', example='\\n'),
        sinkInstanceId?: string(name='SinkInstanceId', description='The ID of the vector storage instance.', example='gp-bp1gq62t1788yw2ol'),
        sinkRegion?: string(name='SinkRegion', description='The region of the vector storage instance.', example='cn-hangzhou'),
        sinkType?: string(name='SinkType', description='The vector storage type of the knowledge base. Valid values:

*   ES: Built-in vector database.
*   BUILT_IN: Built-in vector database.
*   ADB: AnalyticDB for PostgreSQL database.', example='es'),
        sourceType?: string(name='SourceType', description='The data type of [Data Management](https://bailian.console.aliyun.com/#/data-center). For unstructured knowledge base, possible values:

*   DATA_CENTER_CATEGORY: The category type.
*   DATA_CENTER_FILE: The document type.

For structured knowledge base, possible values:

*   DATA_CENTER_STRUCTURED_TABLE: The data table type.', example='DATA_CENTER_FILE'),
        structureType?: string(name='StructureType', description='The vector storage type of the knowledge base. Valid values:

*   UNSTRUCTURED', example='structured'),
      }
    ](name='Indices', description='The list of knowledge bases.'),
    pageNumber?: int32(name='PageNumber', description='The specified page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The specified number of documents on each page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of knowledge bases returned.', example='48'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message.', example='Required parameter(%s) missing or invalid, please check the request parameters.'),
  requestId?: string(name='RequestId', description='The request ID.', example='17204B98-xxxx-4F9A-8464-2446A84821CA'),
  status?: string(name='Status', description='The HTTP status code returned.', example='200'),
  success?: boolean(name='Success', description='Indications whether the API call is successful. Valid values:

*   true
*   false', example='true'),
}

model ListIndicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIndicesResponseBody(name='body'),
}

/**
  * @description This interface is idempotent.
  * @param request  the request parameters of ListIndices  ListIndicesRequest
  * @return ListIndicesResponse
 */
async function listIndices(request: ListIndicesRequest): ListIndicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListIndices', 'GET', '/{WorkspaceId}/index/list_indices', 'json', false, 'json', request);
}

model ListMemoriesRequest {
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-us9hjmt32nysdm5v', position='Path'),
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  maxResults?: int32(name='maxResults', example='10', position='Query'),
  nextToken?: string(name='nextToken', example='dc270401186b433f975d7e1faaa34e0e', position='Query'),
}

model ListMemoriesResponseBody = {
  maxResults?: int32(name='maxResults', example='10'),
  memories?: [ 
    {
      description?: string(name='description'),
      memoryId?: string(name='memoryId', example='3fc531f4519444beaafffa4538f60667'),
    }
  ](name='memories'),
  nextToken?: string(name='nextToken', example='dc270401186b433f975d7e1faaa34e0e'),
  requestId?: string(name='requestId', example='6a71f2d9-f1c9-913b-818b-114029103cad'),
  totalCount?: int32(name='totalCount', example='105'),
  workspaceId?: string(name='workspaceId', example='llm-us9hjmt32nysdm5v'),
}

model ListMemoriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMemoriesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListMemories  ListMemoriesRequest
  * @return ListMemoriesResponse
 */
async function listMemories(request: ListMemoriesRequest): ListMemoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListMemories', 'GET', '/{workspaceId}/memories', 'json', false, 'json', request);
}

model ListMemoryNodesRequest {
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-us9hjmt32nysdm5v', position='Path'),
  memoryId: string(name='memoryId', description='This parameter is required.', example='6bff4f317a14442fbc9f73d29dbd5fc3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  maxResults?: int32(name='maxResults', example='20', minimum=1, maximum=50, position='Query'),
  nextToken?: string(name='nextToken', example='dc270401186b433f975d7e1faaa34e0e', position='Query'),
}

model ListMemoryNodesResponseBody = {
  maxResults?: int32(name='maxResults', example='20'),
  memoryNodes?: [ 
    {
      content?: string(name='content'),
      memoryNodeId?: string(name='memoryNodeId', example='68de06c95368463a8be4a84efc872cc5'),
    }
  ](name='memoryNodes'),
  nextToken?: string(name='nextToken', example='dc270401186b433f975d7e1faaa34e0e'),
  requestId?: string(name='requestId', example='6a71f2d9-f1c9-913b-818b-114029103cad'),
  totalCount?: int32(name='totalCount', example='100'),
}

model ListMemoryNodesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMemoryNodesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListMemoryNodes  ListMemoryNodesRequest
  * @return ListMemoryNodesResponse
 */
async function listMemoryNodes(request: ListMemoryNodesRequest): ListMemoryNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListMemoryNodes', 'GET', '/{workspaceId}/memories/{memoryId}/memoryNodes', 'json', false, 'json', request);
}

model ListPromptTemplatesRequest {
  workspaceId: string(name='workspaceId', description='The workspace ID.

This parameter is required.', example='llm-us9hjmt32nysdxxx', position='Path'),
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  maxResults?: int32(name='maxResults', description='The maximum number of returned entries.', example='10', position='Query'),
  name?: string(name='name', description='The keyword that is used to search for templates.', position='Query'),
  nextToken?: string(name='nextToken', description='The token that determines the start position of the query. Set this parameter to the value of the NextToken parameter that is returned from the last call.', example='dc270401186b433f975d7e1faaa34e0e', position='Query'),
  type?: string(name='type', description='The type of the template. Valid values: · System · Custom', example='System', position='Query'),
}

model ListPromptTemplatesResponseBody = {
  maxResults?: int32(name='maxResults', description='The maximum number of returned entries.', example='10'),
  nextToken?: string(name='nextToken', description='The token that determines the start position of the next query.', example='dc270401186b433f975d7e1faaa34e0e'),
  promptTemplates?: [ 
    {
      content?: string(name='content', description='The template content'),
      name?: string(name='name', description='The template name.'),
      promptTemplateId?: string(name='promptTemplateId', description='The template ID.', example='d6935b7efbe34d11b13df9307151cf8c'),
      type?: string(name='type', description='The template type.', example='"System"'),
      variables?: [ string ](name='variables', description='The variables of the template.'),
    }
  ](name='promptTemplates', description='The templates.'),
  requestId?: string(name='requestId', description='The request ID.', example='FE9B6CBF-47E6-5D76-9C5D-B814DD5AB071'),
  totalCount?: int32(name='totalCount', description='The total number of entries returned.', example='15'),
  workspaceId?: string(name='workspaceId', description='The workspace ID.', example='llm-us9hjmt32nysdxxx'),
}

model ListPromptTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPromptTemplatesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPromptTemplates  ListPromptTemplatesRequest
  * @return ListPromptTemplatesResponse
 */
async function listPromptTemplates(request: ListPromptTemplatesRequest): ListPromptTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListPromptTemplates', 'GET', '/{workspaceId}/promptTemplates', 'json', false, 'json', request);
}

model ListPublishedAgentRequest {
  workspaceId?: string(name='workspaceId', position='Path'),
  pageNo?: int32(name='pageNo', position='Query'),
  pageSize?: int32(name='pageSize', position='Query'),
}

model ListPublishedAgentResponseBody = {
  code?: string(name='code'),
  data?: {
    list?: [ 
      {
        applicationConfig?: {
          historyConfig?: {
            enableAdbRecord?: boolean(name='enableAdbRecord'),
            enableRecord?: boolean(name='enableRecord'),
            instanceId?: string(name='instanceId'),
            region?: string(name='region'),
            storeCode?: string(name='storeCode'),
          }(name='historyConfig'),
          longTermMemory?: {
            enable?: boolean(name='enable'),
          }(name='longTermMemory'),
          parameters?: {
            dialogRound?: int32(name='dialogRound'),
            maxTokens?: int32(name='maxTokens'),
            temperature?: double(name='temperature'),
          }(name='parameters'),
          ragConfig?: {
            enableCitation?: boolean(name='enableCitation'),
            enableSearch?: boolean(name='enableSearch'),
            knowledgeBaseCodeList?: [ string ](name='knowledgeBaseCodeList'),
            topK?: int32(name='topK'),
          }(name='ragConfig'),
          security?: {
            processingStrategy?: string(name='processingStrategy'),
          }(name='security'),
          tools?: [ 
            {
              type?: string(name='type'),
            }
          ](name='tools'),
          workFlows?: [ 
            {
              type?: string(name='type'),
            }
          ](name='workFlows'),
        }(name='applicationConfig'),
        code?: string(name='code'),
        instructions?: string(name='instructions'),
        modelId?: string(name='modelId'),
        name?: string(name='name'),
      }
    ](name='list'),
    pageNo?: int32(name='pageNo'),
    pageSize?: int32(name='pageSize'),
    total?: int32(name='total'),
  }(name='data'),
  httpStatusCode?: int32(name='httpStatusCode'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  success?: string(name='success'),
}

model ListPublishedAgentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPublishedAgentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPublishedAgent  ListPublishedAgentRequest
  * @return ListPublishedAgentResponse
 */
async function listPublishedAgent(request: ListPublishedAgentRequest): ListPublishedAgentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListPublishedAgent', 'GET', '/{workspaceId}/application/agents', 'json', false, 'json', request);
}

model RetrieveRequest {
  workspaceId: string(name='WorkspaceId', description='The ID of the workspace to which the knowledge base belongs. To view the workspace ID, you can click the Workspace Details icon in the upper-left corner on the [homepage](https://bailian.console.aliyun.com/#/home) of the console.

This parameter is required.', example='ws_3Nt27MYcoK191ISp', position='Path'),
  denseSimilarityTopK?: int32(name='DenseSimilarityTopK', description='Vector retrieval top K. After generating vectors based on input text, the top K chunks in the knowledge base that are most similar to the vector representation of the input text are retrieved. Valid values: 0 to 100. The sum of the `DenseSimilarityTopK` and `SparseSimilarityTopK` parameters must be less than or equal to 200.

Default value: 100.', example='100', position='Query'),
  enableReranking?: boolean(name='EnableReranking', description='Specifies whether to enable reranking. For more information, see [Create a knowledge base](https://www.alibabacloud.com/help/en/model-studio/user-guide/rag-knowledge-base). Valid values:

*   true
*   false

Default value: true.', example='true', position='Query'),
  enableRewrite?: boolean(name='EnableRewrite', description='Specifies whether to enable multi-round conversation rewriting. For more information, see [Create a knowledge base](https://www.alibabacloud.com/help/en/model-studio/user-guide/rag-knowledge-base). Valid values:

*   true
*   false

Default value: false.', example='false', position='Query'),
  images?: [ string ](name='Images', shrink='simple', position='Query'),
  indexId: string(name='IndexId', description='The primary key ID of the knowledge base, which is the `Data.Id` parameter returned by the [CreateIndex](https://www.alibabacloud.com/help/en/model-studio/developer-reference/api-bailian-2023-12-29-createindex) operation.

This parameter is required.', example='5pwe0m2g6t', position='Query'),
  query?: string(name='Query', description='The input query prompt. The length and characters of the query are not limited.', position='Query'),
  queryHistory?: [ 
    {
      content?: string(name='content'),
      role?: string(name='role'),
    }
  ](name='QueryHistory', shrink='json', position='Query'),
  rerank?: [ 
    {
      modelName?: string(name='ModelName', description='The name of the rank model. For more information, see [Create a knowledge base](https://www.alibabacloud.com/help/en/model-studio/user-guide/rag-knowledge-base). Valid values:

*   gte-rerank-hybrid: Recommended official model.
*   gte-rerank', example='gte-rerank-hybrid'),
    }
  ](name='Rerank', description='Ranking configurations.', shrink='json', position='Query'),
  rerankMinScore?: float(name='RerankMinScore', description='Similarity Threshold The lowest similarity score of chunks that can be returned. This parameter is used to filter text chunks returned by the rank model. For more information, see [Create a knowledge base](https://www.alibabacloud.com/help/en/model-studio/user-guide/rag-knowledge-base). Valid values: [0.01-1.00]. The priority of this parameter is greater than the similarity threshold configured for the knowledge base.

By default, this parameter is left empty. In this case, the similarity threshold of the knowledge base is used.', example='0.20', position='Query'),
  rerankTopN?: int32(name='RerankTopN', description='The top N return data after reranking. Valid values: 1 to 20. Default value: 5.', example='5', position='Query'),
  rewrite?: [ 
    {
      modelName?: string(name='ModelName', description='Conversation rewriting model name. The query rewriting model automatically adjusts the original prompt based on the context to improve retrieval performance. Valid value:

*   conv-rewrite-qwen-1.8b

By default, this parameter is left empty, which means conv-rewrite-qwen-1.8b is used.', example='conv-rewrite-qwen-1.8b'),
    }
  ](name='Rewrite', description='Conversation rewriting configurations.', shrink='json', position='Query'),
  saveRetrieverHistory?: boolean(name='SaveRetrieverHistory', description='Specifies whether to save the retrieve test history. Valid values:

*   true
*   false

Default value: false.', example='false', position='Query'),
  searchFilters?: [ map[string]string ](name='SearchFilters', description='Specifies complex filter conditions. For more information about the syntax of SearchFilters, see the SearchFilter syntax section of this topic.', shrink='json', position='Query'),
  sparseSimilarityTopK?: int32(name='SparseSimilarityTopK', description='The top K of keyword retrieval. Chunks that exactly match the keywords of the input text are retrieved from the knowledge base. This filters out irrelevant chunks and boosts accuracy. Valid values: 0 to 100. The sum of the `DenseSimilarityTopK` and `SparseSimilarityTopK` parameters must be less than or equal to 200.

Default value: 100.', example='100', position='Query'),
}

model RetrieveResponseBody = {
  code?: string(name='Code', description='HTTP status code', example='Index.InvalidParameter'),
  data?: {
    nodes?: [ 
      {
        metadata?: any(name='Metadata', description='The metadata map of the chunk.'),
        score?: double(name='Score', description='The similarity score of the chunk. Valid values:[0-1].', example='0.3'),
        text?: string(name='Text', description='The text of the chunk.'),
      }
    ](name='Nodes', description='The list of queried chunks.'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message.', example='Required parameter(%s) missing or invalid, please check the request parameters.'),
  requestId?: string(name='RequestId', description='The request ID.', example='17204B98-7734-4F9A-8464-2446A84821CA'),
  status?: string(name='Status', description='The HTTP status code returned.', example='200'),
  success?: boolean(name='Success', description='Indications whether the API call is successful. Valid values:

*   true
*   false', example='true'),
}

model RetrieveResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RetrieveResponseBody(name='body'),
}

/**
  * @description *   Before you call this operation, make sure that your knowledge base is created and is not deleted. That is, the primary key ID of the knowledge base `IndexId` is valid.
  * *   The response time may be long because this operation involves complex retrieval and matching. We recommend that you set appropriate timeout and retry policy for requests.
  * *   This interface is idempotent.
  * @param request  the request parameters of Retrieve  RetrieveRequest
  * @return RetrieveResponse
 */
async function retrieve(request: RetrieveRequest): RetrieveResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'Retrieve', 'POST', '/{WorkspaceId}/index/retrieve', 'json', false, 'json', request);
}

model SubmitIndexAddDocumentsJobRequest {
  workspaceId: string(name='WorkspaceId', description='The ID of the workspace to which the knowledge base belongs. To view the workspace ID, you can click the Workspace Details icon in the upper-left corner on the [homepage](https://bailian.console.aliyun.com/#/home) of the console.

This parameter is required.', example='ws_3Nt27MYcoK191ISp', position='Path'),
  categoryIds?: [ string ](name='CategoryIds', description='The list of primary key IDs of the category.', shrink='json', position='Query'),
  chunkMode?: string(name='ChunkMode', position='Query'),
  chunkSize?: int32(name='ChunkSize', position='Query'),
  documentIds?: [ string ](name='DocumentIds', description='The list of the primary key IDs of the documents.', shrink='json', position='Query'),
  enableHeaders?: boolean(name='EnableHeaders', position='Query'),
  indexId: string(name='IndexId', description='The primary key ID of the knowledge base, which is the `Data.Id` parameter returned by the [CreateIndex](https://www.alibabacloud.com/help/en/model-studio/developer-reference/api-bailian-2023-12-29-createindex) operation.

This parameter is required.', example='79c0aly8zw', position='Query'),
  overlapSize?: int32(name='OverlapSize', position='Query'),
  separator?: string(name='Separator', position='Query'),
  sourceType: string(name='SourceType', description='The data type of [Data Management](https://bailian.console.aliyun.com/#/data-center). For more information, see [Create a knowledge base](https://www.alibabacloud.com/help/en/model-studio/user-guide/rag-knowledge-base). Valid values:

*   DATA_CENTER_CATEGORY: The category type. Import all documents from one or more categories in Data Center.
*   DATA_CENTER_FILE: The document type. Import one or more documents from Data Center.

>  If this parameter is set to DATA_CENTER_CATEGORY, you must specify the `CategoryIds` parameter. If this parameter is set to DATA_CENTER_FILE, you must specify the `DocumentIds` parameter.

This parameter is required.', example='DATA_CENTER_FILE', position='Query'),
}

model SubmitIndexAddDocumentsJobResponseBody = {
  code?: string(name='Code', description='HTTP status code', example='Index.InvalidParameter'),
  data?: {
    id?: string(name='Id', description='The primary key ID of the task, `JobId`.', example='42687eb254a34802bed398357f5498ae'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The error message.', example='Required parameter(%s) missing or invalid, please check the request parameters.'),
  requestId?: string(name='RequestId', description='The request ID.', example='778C0B3B-03C1-5FC1-A947-36EDD13606AB'),
  status?: string(name='Status', description='The HTTP status code returned.', example='200'),
  success?: boolean(name='Success', description='Indications whether the API call is successful. Valid values:

*   true
*   false', example='true'),
}

model SubmitIndexAddDocumentsJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitIndexAddDocumentsJobResponseBody(name='body'),
}

/**
  * @description *   You must first upload documents to [Data Management](https://bailian.console.aliyun.com/#/data-center) and obtain the `FileId`. The documents are the knowledge source of the knowledge base. For more information, see [Import Data](https://www.alibabacloud.com/help/en/model-studio/user-guide/data-import-instructions).
  * *   Before you call this operation, make sure that your knowledge base is created and is not deleted. That is, the primary key ID of the knowledge base `IndexId` is valid.
  * *   After you call this operation, you can call the [GetIndexJobStatus](https://www.alibabacloud.com/help/en/model-studio/developer-reference/api-bailian-2023-12-29-getindexjobstatus) operation to query the status of the job. More than 20 calls to the GetIndexJobStatus operation per minute may trigger throttling.
  * *   Execution takes a period of time after this operation is called. Do not make new request before the request is returned. This interface is not idempotent.
  * @param request  the request parameters of SubmitIndexAddDocumentsJob  SubmitIndexAddDocumentsJobRequest
  * @return SubmitIndexAddDocumentsJobResponse
 */
async function submitIndexAddDocumentsJob(request: SubmitIndexAddDocumentsJobRequest): SubmitIndexAddDocumentsJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SubmitIndexAddDocumentsJob', 'POST', '/{WorkspaceId}/index/add_documents_to_index', 'json', false, 'json', request);
}

model SubmitIndexJobRequest {
  workspaceId: string(name='WorkspaceId', description='The ID of the workspace to which the knowledge base belongs. To view the workspace ID, you can click the Workspace Details icon in the upper-left corner on the [homepage](https://bailian.console.aliyun.com/#/home) of the console.

This parameter is required.', example='ws_3Nt27MYcoK191ISp', position='Path'),
  indexId: string(name='IndexId', description='The primary key ID of the knowledge base, which is the `Data.Id` parameter returned by the [CreateIndex](https://www.alibabacloud.com/help/en/model-studio/developer-reference/api-bailian-2023-12-29-createindex) operation.

This parameter is required.', example='79c0aly8zw', position='Query'),
}

model SubmitIndexJobResponseBody = {
  code?: string(name='Code', description='HTTP status code', example='InvalidParameter'),
  data?: {
    id?: string(name='Id', description='The primary key ID of the job, which is the `JobId` parameter of the [GetIndexJobStatus](https://www.alibabacloud.com/help/en/model-studio/developer-reference/api-bailian-2023-12-29-getindexjobstatus) operation.', example='eFDr2fGRzP9gdDZWAdo3YQ=='),
    indexId?: string(name='IndexId', description='The primary key ID of the knowledge base.', example='khdyak1uuj'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The error message.', example='Required parameter(%s) missing or invalid, please check the request parameters.'),
  requestId?: string(name='RequestId', description='The request ID.', example='17204B98-xxxx-4F9A-8464-2446A84821CA'),
  status?: string(name='Status', description='The status code.', example='Success'),
  success?: boolean(name='Success', description='Indications whether the API call is successful. Valid values:

*   true
*   false', example='True'),
}

model SubmitIndexJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitIndexJobResponseBody(name='body'),
}

/**
  * @description 1.  Before you call this operation, you must call the [CreateIndex](https://www.alibabacloud.com/help/en/model-studio/developer-reference/api-bailian-2023-12-29-createindex) operation and obtain the `IndexId`.
  * 2.  Execution takes a period of time after this operation is called. Do not make new request before the request is returned.
  * 3.  If you want to query the execution status of the job after you call this operation, call the [GetIndexJobStatus](https://www.alibabacloud.com/help/en/model-studio/developer-reference/api-bailian-2023-12-29-getindexjobstatus) operation.
  * 4.  This interface is not idempotent.
  * @param request  the request parameters of SubmitIndexJob  SubmitIndexJobRequest
  * @return SubmitIndexJobResponse
 */
async function submitIndexJob(request: SubmitIndexJobRequest): SubmitIndexJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SubmitIndexJob', 'POST', '/{WorkspaceId}/index/submit_index_job', 'json', false, 'json', request);
}

model UpdateAndPublishAgentRequest {
  workspaceId?: string(name='workspaceId', position='Path'),
  appCode?: string(name='appCode', position='Path'),
  applicationConfig?: {
    historyConfig?: {
      enableAdbRecord?: boolean(name='enableAdbRecord'),
      enableRecord?: boolean(name='enableRecord'),
      instanceId?: string(name='instanceId'),
      region?: string(name='region'),
      storeCode?: string(name='storeCode'),
    }(name='historyConfig'),
    longTermMemory?: {
      enable?: boolean(name='enable'),
    }(name='longTermMemory'),
    parameters?: {
      dialogRound?: int32(name='dialogRound'),
      maxTokens?: int32(name='maxTokens'),
      temperature?: double(name='temperature'),
    }(name='parameters'),
    ragConfig?: {
      answerScope?: string(name='answerScope'),
      enableCitation?: boolean(name='enableCitation'),
      enableSearch?: boolean(name='enableSearch'),
      enableWebSearch?: boolean(name='enableWebSearch'),
      fixedReplyDetail?: string(name='fixedReplyDetail'),
      knowledgeBaseCodeList?: [ string ](name='knowledgeBaseCodeList'),
      promptStrategy?: string(name='promptStrategy'),
      ragRejectType?: string(name='ragRejectType'),
      rejectFilterPrompt?: string(name='rejectFilterPrompt'),
      rejectFilterType?: string(name='rejectFilterType'),
      retrieveMaxLength?: int32(name='retrieveMaxLength'),
      topK?: int32(name='topK'),
    }(name='ragConfig'),
    security?: {
      processingStrategy?: string(name='processingStrategy'),
    }(name='security'),
    tools?: [ 
      {
        type?: string(name='type'),
      }
    ](name='tools'),
    workFlows?: [ 
      {
        type?: string(name='type'),
      }
    ](name='workFlows'),
  }(name='applicationConfig', shrink='json', position='Body'),
  instructions?: string(name='instructions', position='Body'),
  modelId?: string(name='modelId', position='Body'),
  name?: string(name='name', position='Body'),
  sampleLibrary?: {
    enableSample?: boolean(name='enableSample'),
    sampleLibraryIdList?: [ string ](name='sampleLibraryIdList'),
    topK?: int32(name='topK'),
  }(name='sampleLibrary', shrink='json', position='Body'),
}

model UpdateAndPublishAgentResponseBody = {
  code?: string(name='code'),
  data?: string(name='data'),
  httpStatusCode?: int32(name='httpStatusCode'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
}

model UpdateAndPublishAgentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAndPublishAgentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateAndPublishAgent  UpdateAndPublishAgentRequest
  * @return UpdateAndPublishAgentResponse
 */
async function updateAndPublishAgent(request: UpdateAndPublishAgentRequest): UpdateAndPublishAgentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateAndPublishAgent', 'PUT', '/{workspaceId}/application/agents/{appCode}', 'json', true, 'form', request);
}

model UpdateAndPublishAgentSelectiveRequest {
  workspaceId?: string(name='workspaceId', position='Path'),
  appCode?: string(name='appCode', position='Path'),
  applicationConfig?: {
    historyConfig?: {
      enableAdbRecord?: boolean(name='enableAdbRecord'),
      enableRecord?: boolean(name='enableRecord'),
      instanceId?: string(name='instanceId'),
      region?: string(name='region'),
      storeCode?: string(name='storeCode'),
    }(name='historyConfig'),
    longTermMemory?: {
      enable?: boolean(name='enable'),
    }(name='longTermMemory'),
    parameters?: {
      dialogRound?: int32(name='dialogRound'),
      maxTokens?: int32(name='maxTokens'),
      temperature?: double(name='temperature'),
    }(name='parameters'),
    ragConfig?: {
      answerScope?: string(name='answerScope'),
      enableCitation?: boolean(name='enableCitation'),
      enableSearch?: boolean(name='enableSearch'),
      enableWebSearch?: boolean(name='enableWebSearch'),
      fixedReplyDetail?: string(name='fixedReplyDetail'),
      knowledgeBaseCodeList?: [ string ](name='knowledgeBaseCodeList'),
      promptStrategy?: string(name='promptStrategy'),
      ragRejectType?: string(name='ragRejectType'),
      rejectFilterPrompt?: string(name='rejectFilterPrompt'),
      rejectFilterType?: string(name='rejectFilterType'),
      retrieveMaxLength?: int32(name='retrieveMaxLength'),
      topK?: int32(name='topK'),
    }(name='ragConfig'),
    security?: {
      processingStrategy?: string(name='processingStrategy'),
    }(name='security'),
    tools?: [ 
      {
        type?: string(name='type'),
      }
    ](name='tools'),
    workFlows?: [ 
      {
        type?: string(name='type'),
      }
    ](name='workFlows'),
  }(name='applicationConfig', shrink='json', position='Body'),
  instructions?: string(name='instructions', position='Body'),
  modelId?: string(name='modelId', position='Body'),
  name?: string(name='name', position='Body'),
  sampleLibrary?: {
    enableSample?: boolean(name='enableSample'),
    sampleLibraryIdList?: [ string ](name='sampleLibraryIdList'),
    topK?: int32(name='topK'),
  }(name='sampleLibrary', shrink='json', position='Body'),
}

model UpdateAndPublishAgentSelectiveResponseBody = {
  code?: string(name='code'),
  data?: string(name='data'),
  httpStatusCode?: int32(name='httpStatusCode'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
}

model UpdateAndPublishAgentSelectiveResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAndPublishAgentSelectiveResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateAndPublishAgentSelective  UpdateAndPublishAgentSelectiveRequest
  * @return UpdateAndPublishAgentSelectiveResponse
 */
async function updateAndPublishAgentSelective(request: UpdateAndPublishAgentSelectiveRequest): UpdateAndPublishAgentSelectiveResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateAndPublishAgentSelective', 'PUT', '/{workspaceId}/application/agents/{appCode}/updateAndPublishAgentSelective', 'json', true, 'form', request);
}

model UpdateChunkRequest {
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='llm-3z7uw7fwz0vexxxx', position='Path'),
  chunkId: string(name='ChunkId', description='This parameter is required.', example='llm-5ip55o1zrzxx_09fe52x_table_033b551e10024029992e79767b151fxx_10024xx_0', position='Query'),
  dataId: string(name='DataId', description='This parameter is required.', example='doc_c134aa2073204a5d936d870bf960f56axxxxxxxx', position='Query'),
  isDisplayedChunkContent: boolean(name='IsDisplayedChunkContent', description='This parameter is required.', example='true', position='Query'),
  pipelineId: string(name='PipelineId', description='This parameter is required.', example='79c0alxxxx', position='Query'),
  content: string(name='content', description='This parameter is required.', position='Query'),
  title?: string(name='title', position='Query'),
}

model UpdateChunkResponseBody = {
  code?: string(name='Code', example='InvalidParameter'),
  data?: boolean(name='Data', example='true'),
  message?: string(name='Message', example='Required parameter(%s) missing or invalid, please check the request parameters.'),
  requestId?: string(name='RequestId', description='Id of the request', example='35A267BF-xxxx-54DB-8394-AA3B0742D833'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model UpdateChunkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateChunkResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateChunk  UpdateChunkRequest
  * @return UpdateChunkResponse
 */
async function updateChunk(request: UpdateChunkRequest): UpdateChunkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateChunk', 'POST', '/{WorkspaceId}/chunk/update', 'json', false, 'json', request);
}

model UpdateFileTagRequest {
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='llm-3z7uw7fwz0vxxxx', position='Path'),
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  fileId: string(name='FileId', description='This parameter is required.', example='file_9a65732555b54d5ea10796ca5742ba22_xxxxxxxx', position='Path'),
  tags: [ string ](name='Tags', description='This parameter is required.', shrink='json', position='Body'),
}

model UpdateFileTagResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    fileId?: string(name='FileId', example='file_9a65732555b54d5ea10796ca5742ba22_xxxxxxxx'),
  }(name='Data'),
  message?: string(name='Message', example='Requests throttling triggered.'),
  requestId?: string(name='RequestId', description='RequestId', example='35A267BF-xxxx-54DB-8394-AA3B0742D833'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model UpdateFileTagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateFileTagResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateFileTag  UpdateFileTagRequest
  * @return UpdateFileTagResponse
 */
async function updateFileTag(request: UpdateFileTagRequest): UpdateFileTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateFileTag', 'PUT', '/{WorkspaceId}/datacenter/file/{FileId}', 'json', true, 'form', request);
}

model UpdateMemoryRequest {
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-us9hjmt32nysdm5v', position='Path'),
  memoryId: string(name='memoryId', description='This parameter is required.', example='6bff4f317a14442fbc9f73d29dbd5fc3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  description?: string(name='description', position='Query'),
}

model UpdateMemoryResponseBody = {
  requestId?: string(name='requestId', example='6a71f2d9-f1c9-913b-818b-114029103cad'),
}

model UpdateMemoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateMemoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateMemory  UpdateMemoryRequest
  * @return UpdateMemoryResponse
 */
async function updateMemory(request: UpdateMemoryRequest): UpdateMemoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateMemory', 'PUT', '/{workspaceId}/memories/{memoryId}', 'json', false, 'json', request);
}

model UpdateMemoryNodeRequest {
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-us9hjmt32nysdm5v', position='Path'),
  memoryId: string(name='memoryId', description='This parameter is required.', example='6bff4f317a14442fbc9f73d29dbd5fc3', position='Path'),
  memoryNodeId: string(name='memoryNodeId', description='This parameter is required.', example='68de06c95368463a8be4a84efc872cc5', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  content: string(name='content', description='This parameter is required.', position='Query'),
}

model UpdateMemoryNodeResponseBody = {
  requestId?: string(name='requestId', example='8C56C7AF-6573-19CE-B018-E05E1EDCF4C5'),
}

model UpdateMemoryNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateMemoryNodeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateMemoryNode  UpdateMemoryNodeRequest
  * @return UpdateMemoryNodeResponse
 */
async function updateMemoryNode(request: UpdateMemoryNodeRequest): UpdateMemoryNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateMemoryNode', 'PUT', '/{workspaceId}/memories/{memoryId}/memoryNodes/{memoryNodeId}', 'json', false, 'json', request);
}

model UpdatePromptTemplateRequest {
  workspaceId: string(name='workspaceId', description='The workspace ID.

This parameter is required.', example='llm-us9hjmt32nysdxxx', position='Path'),
  promptTemplateId: string(name='promptTemplateId', description='The template ID.

This parameter is required.', example='6e49109bfeb94a39bb268f4e483ccxxx', position='Path'),
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  content?: string(name='content', description='The template content.', position='Query'),
  name?: string(name='name', description='The template name.', position='Query'),
}

model UpdatePromptTemplateResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='FE9B6CBF-47E6-5D76-9C5D-B814DD5ABxxx'),
}

model UpdatePromptTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdatePromptTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdatePromptTemplate  UpdatePromptTemplateRequest
  * @return UpdatePromptTemplateResponse
 */
async function updatePromptTemplate(request: UpdatePromptTemplateRequest): UpdatePromptTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdatePromptTemplate', 'PATCH', '/{workspaceId}/promptTemplates/{promptTemplateId}', 'json', false, 'json', request);
}

