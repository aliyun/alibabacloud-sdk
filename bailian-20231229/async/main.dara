/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'bailian';
  @version = '2023-12-29';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddCategoryRequest {
  regionId?: string(name='RegionId', position='Host'),
  workspaceId: string(name='WorkspaceId', example='ws_3AXoiweeTyTd03IN', position='Path'),
  categoryName: string(name='CategoryName', position='Body'),
  categoryType: string(name='CategoryType', example='UNSTRUCTURED', position='Body'),
  parentCategoryId?: string(name='ParentCategoryId', example='cate_cdd11b1b79a74e8bbd675c356a91ee3XXXXXXXX', position='Body'),
}

model AddCategoryResponseBody = {
  code?: string(name='Code', example='success'),
  data?: {
    categoryId?: string(name='CategoryId', example='cate_cdd11b1b79a74e8bbd675c356a91ee3XXXXXXXX'),
    categoryName?: string(name='CategoryName'),
  }(name='Data'),
  message?: string(name='Message', example='Requests throttling triggered.'),
  requestId?: string(name='RequestId', description='Id of the request', example='778C0B3B-03C1-5FC1-A947-36EDD13606AB'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model AddCategoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddCategoryResponseBody(name='body'),
}

async function addCategory(request: AddCategoryRequest): AddCategoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddCategory', 'POST', '/{WorkspaceId}/datacenter/category/', 'json', true, 'form', request);
}

model AddFileRequest {
  workspaceId: string(name='WorkspaceId', example='ws_3AXoiweeTyTd03IN', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  categoryId: string(name='CategoryId', example='cate_cdd11b1b79a74e8bbd675c356a91ee3510024405', position='Body'),
  leaseId: string(name='LeaseId', example='68abd1dea7b6404d8f7d7b9f7fbd332d.1716698936847', position='Body'),
  parser: string(name='Parser', example='DASHSCOPE_DOCMIND', position='Body'),
}

model AddFileResponseBody = {
  code?: string(name='Code', example='DataCenter.FileTooLarge'),
  data?: {
    fileId?: string(name='FileId', example='file_9a65732555b54d5ea10796ca5742ba22_XXXXXXXX'),
    parser?: string(name='Parser', example='DASHSCOPE_DOCMIND'),
  }(name='Data'),
  message?: string(name='Message', example='User not authorized to operate on the specified resource.'),
  requestId?: string(name='RequestId', example='778C0B3B-xxxx-5FC1-A947-36EDD13606AB'),
  status?: string(name='Status', example='200'),
  success?: string(name='Success', example='true'),
}

model AddFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddFileResponseBody(name='body'),
}

async function addFile(request: AddFileRequest): AddFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddFile', 'PUT', '/{WorkspaceId}/datacenter/file', 'json', true, 'form', request);
}

model ApplyFileUploadLeaseRequest {
  categoryId: string(name='CategoryId', example='cate_cdd11b1b79a74e8bbd675c356a91ee3510024405', position='Path'),
  workspaceId: string(name='WorkspaceId', example='ws_3AXoiweeTyTd03IN', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  fileName: string(name='FileName', position='Body'),
  md5: string(name='Md5', example='19657c391f6c70bcea63c154d8606bb3', minLength=1, maxLength=64, position='Body'),
  sizeInBytes: string(name='SizeInBytes', example='1000', position='Body'),
}

model ApplyFileUploadLeaseResponseBody = {
  code?: string(name='Code', example='DataCenter.FileTooLarge'),
  data?: {
    fileUploadLeaseId?: string(name='FileUploadLeaseId', example='1e6a159107384782be5e45ac4759b247.1719325231035'),
    param?: {
      headers?: any(name='Headers', example='"X-bailian-extra": "MTAwNTQyNjQ5NTE2OTE3OA==",
        "Content-Type": "application/pdf"'),
      method?: string(name='Method', example='PUT'),
      url?: string(name='Url', example='https://bailian-datahub-data-origin-prod.oss-cn-hangzhou.aliyuncs.com/1005426495169178/10024405/68abd1dea7b6404d8f7d7b9f7fbd332d.1716698936847.pdf?Expires=1716699536&OSSAccessKeyId=TestID&Signature=HfwPUZo4pR6DatSDym0zFKVh9Wg%3D'),
    }(name='Param'),
    type?: string(name='Type', example='HTTP'),
  }(name='Data'),
  message?: string(name='Message', example='User not authorized to operate on the specified resource'),
  requestId?: string(name='RequestId', example='778C0B3B-xxxx-5FC1-A947-36EDD13606AB'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model ApplyFileUploadLeaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApplyFileUploadLeaseResponseBody(name='body'),
}

async function applyFileUploadLease(request: ApplyFileUploadLeaseRequest): ApplyFileUploadLeaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ApplyFileUploadLease', 'POST', '/{WorkspaceId}/datacenter/category/{CategoryId}', 'json', true, 'form', request);
}

model CreateAndPulishAgentRequest {
  workspaceId?: string(name='workspaceId', position='Path'),
  applicationConfig?: {
    historyConfig?: {
      enableAdbRecord?: boolean(name='enableAdbRecord'),
      enableRecord?: boolean(name='enableRecord'),
      instanceId?: string(name='instanceId'),
      region?: string(name='region'),
      storeCode?: string(name='storeCode'),
    }(name='historyConfig'),
    longTermMemory?: {
      enable?: boolean(name='enable'),
    }(name='longTermMemory'),
    parameters?: {
      dialogRound?: int32(name='dialogRound'),
      maxTokens?: int32(name='maxTokens'),
      temperature?: double(name='temperature'),
    }(name='parameters'),
    ragConfig?: {
      enableCitation?: boolean(name='enableCitation'),
      enableSearch?: boolean(name='enableSearch'),
      knowledgeBaseCodeList?: [ string ](name='knowledgeBaseCodeList'),
      topK?: int32(name='topK'),
    }(name='ragConfig'),
    securityConfig?: {
      processingStrategy?: string(name='processingStrategy'),
    }(name='securityConfig'),
    tools?: [ 
      {
        type?: string(name='type'),
      }
    ](name='tools'),
    workFlows?: [ 
      {
        type?: string(name='type'),
      }
    ](name='workFlows'),
  }(name='applicationConfig', shrink='json', position='Body'),
  instructions?: string(name='instructions', position='Body'),
  modelId?: string(name='modelId', position='Body'),
  name?: string(name='name', position='Body'),
}

model CreateAndPulishAgentResponseBody = {
  code?: string(name='code'),
  data?: string(name='data'),
  httpStatusCode?: int32(name='httpStatusCode'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
}

model CreateAndPulishAgentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAndPulishAgentResponseBody(name='body'),
}

async function createAndPulishAgent(request: CreateAndPulishAgentRequest): CreateAndPulishAgentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateAndPulishAgent', 'POST', '/{workspaceId}/application/agents', 'json', true, 'form', request);
}

model CreateIndexRequest {
  workspaceId: string(name='WorkspaceId', example='ws_3Nt27MYcoK191ISp', position='Path'),
  categoryIds?: [ string ](name='CategoryIds', shrink='json', position='Query'),
  chunkSize?: int32(name='ChunkSize', example='128', position='Query'),
  columns?: [ 
    {
      column?: string(name='Column'),
      isRecall?: boolean(name='IsRecall'),
      isSearch?: boolean(name='IsSearch'),
      name?: string(name='Name'),
      type?: string(name='Type'),
    }
  ](name='Columns', shrink='json', position='Query'),
  description?: string(name='Description', position='Query'),
  documentIds?: [ string ](name='DocumentIds', shrink='json', position='Query'),
  embeddingModelName?: string(name='EmbeddingModelName', example='text-embedding-v2', position='Query'),
  name: string(name='Name', position='Query'),
  overlapSize?: int32(name='OverlapSize', example='16', position='Query'),
  rerankMinScore?: double(name='RerankMinScore', example='0.20', position='Query'),
  rerankModelName?: string(name='RerankModelName', example='gte-rerank-hybrid', position='Query'),
  separator?: string(name='Separator', example=',', position='Query'),
  sinkInstanceId?: string(name='SinkInstanceId', example='gp-bp321093j84', position='Query'),
  sinkRegion?: string(name='SinkRegion', example='cn-hangzhou', position='Query'),
  sinkType: string(name='SinkType', example='DEFAULT', position='Query'),
  sourceType: string(name='SourceType', example='DATA_CENTER_FILE', position='Query'),
  structureType: string(name='StructureType', example='structured', position='Query'),
}

model CreateIndexResponseBody = {
  code?: string(name='Code', example='Forbidden'),
  data?: {
    id?: string(name='Id', example='jkurxhju6b'),
  }(name='Data'),
  message?: string(name='Message', example='Invalid input, variable name is missing'),
  requestId?: string(name='RequestId', description='Id of the request', example='17204B98-7734-4F9A-8464-2446A84821CA'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model CreateIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateIndexResponseBody(name='body'),
}

async function createIndex(request: CreateIndexRequest): CreateIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateIndex', 'POST', '/{WorkspaceId}/index/create', 'json', false, 'json', request);
}

model CreateMemoryRequest {
  workspaceId: string(name='workspaceId', example='llm-us9hjmt32nysdm5v', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  description?: string(name='description', position='Query'),
}

model CreateMemoryResponseBody = {
  memoryId?: string(name='memoryId', example='6bff4f317a14442fbc9f73d29dbd5fc3'),
  requestId?: string(name='requestId', example='6a71f2d9-f1c9-913b-818b-114029103cad'),
}

model CreateMemoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMemoryResponseBody(name='body'),
}

async function createMemory(request: CreateMemoryRequest): CreateMemoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateMemory', 'POST', '/{workspaceId}/memories', 'json', false, 'json', request);
}

model CreateMemoryNodeRequest {
  workspaceId?: string(name='workspaceId', example='llm-us9hjmt32nysdm5v', position='Path'),
  memoryId: string(name='memoryId', example='6bff4f317a14442fbc9f73d29dbd5fc3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  content: string(name='content', position='Query'),
}

model CreateMemoryNodeResponseBody = {
  memoryNodeId?: string(name='memoryNodeId', example='68de06c95368463a8be4a84efc872cc5'),
  requestId?: string(name='requestId', example='8C56C7AF-6573-19CE-B018-E05E1EDCF4C5'),
}

model CreateMemoryNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMemoryNodeResponseBody(name='body'),
}

async function createMemoryNode(request: CreateMemoryNodeRequest): CreateMemoryNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateMemoryNode', 'POST', '/{workspaceId}/memories/{memoryId}/memoryNodes', 'json', false, 'json', request);
}

model DeleteAgentRequest {
  workspaceId?: string(name='workspaceId', position='Path'),
  appCode?: string(name='appCode', position='Path'),
}

model DeleteAgentResponseBody = {
  code?: string(name='code'),
  data?: string(name='data'),
  httpStatusCode?: int32(name='httpStatusCode'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
}

model DeleteAgentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAgentResponseBody(name='body'),
}

async function deleteAgent(request: DeleteAgentRequest): DeleteAgentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteAgent', 'DELETE', '/{workspaceId}/application/agents/{appCode}', 'json', false, 'json', request);
}

model DeleteCategoryRequest {
  categoryId: string(name='CategoryId', example='cate_cdd11b1b79a74e8bbd675c356a91ee3510024405', position='Path'),
  workspaceId: string(name='WorkspaceId', example='ws_3AXoiweeTyTd03IN', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model DeleteCategoryResponseBody = {
  code?: string(name='Code', example='success'),
  data?: {
    categoryId?: string(name='CategoryId', example='cate_cdd11b1b79a74e8bbd675c356a91ee3XXXXXXXX'),
  }(name='Data', description='data'),
  message?: string(name='Message', example='workspace id is null or invalid.'),
  requestId?: string(name='RequestId', description='Id of the request', example='17204B98-xxxx-4F9A-8464-2446A84821CA'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model DeleteCategoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCategoryResponseBody(name='body'),
}

async function deleteCategory(request: DeleteCategoryRequest): DeleteCategoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteCategory', 'DELETE', '/{WorkspaceId}/datacenter/category/{CategoryId}/', 'json', false, 'json', request);
}

model DeleteFileRequest {
  fileId: string(name='FileId', example='file_9a65732555b54d5ea10796ca5742ba22_XXXXXXXX', position='Path'),
  workspaceId: string(name='WorkspaceId', example='ws_3Nt27MYcoK191ISp', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model DeleteFileResponseBody = {
  code?: string(name='Code', example='InvalidParameter'),
  data?: {
    fileId?: string(name='FileId', example='file_9a65732555b54d5ea10796ca5742ba22_XXXXXXXX'),
  }(name='Data'),
  message?: string(name='Message', example='Current file status does not support delete.'),
  requestId?: string(name='RequestId', description='Id of the request', example='17204B98-xxxx-4F9A-8464-2446A84821CA'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model DeleteFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFileResponseBody(name='body'),
}

async function deleteFile(request: DeleteFileRequest): DeleteFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteFile', 'DELETE', '/{WorkspaceId}/datacenter/file/{FileId}/', 'json', false, 'json', request);
}

model DeleteIndexRequest {
  workspaceId: string(name='WorkspaceId', example='ws_3AXoiweeTyTd03IN', position='Path'),
  indexId: string(name='IndexId', example='f89ie0fj5a', position='Query'),
}

model DeleteIndexResponseBody = {
  code?: string(name='Code', example='Index.InvalidParameter'),
  message?: string(name='Message', example='Required parameter(%s) missing or invalid, please check the request parameters.'),
  requestId?: string(name='RequestId', description='Id of the request', example='17204B98-xxxx-4F9A-8464-2446A84821CA'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model DeleteIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIndexResponseBody(name='body'),
}

async function deleteIndex(request: DeleteIndexRequest): DeleteIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteIndex', 'POST', '/{WorkspaceId}/index/delete', 'json', false, 'json', request);
}

model DeleteIndexDocumentRequest {
  workspaceId: string(name='WorkspaceId', example='ws_3Nt27MYcoK191ISp', position='Path'),
  documentIds: [ string ](name='DocumentIds', shrink='json', position='Query'),
  indexId: string(name='IndexId', example='79c0aly8zw', position='Query'),
}

model DeleteIndexDocumentResponseBody = {
  code?: string(name='Code', example='Index.InvalidParameter'),
  data?: {
    deletedDocument?: [ string ](name='DeletedDocument'),
  }(name='Data'),
  message?: string(name='Message', example='Required parameter(%s) missing or invalid, please check the request parameters.'),
  requestId?: string(name='RequestId', description='Id of the request', example='17204B98-xxxx-4F9A-8464-2446A84821CA'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model DeleteIndexDocumentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIndexDocumentResponseBody(name='body'),
}

async function deleteIndexDocument(request: DeleteIndexDocumentRequest): DeleteIndexDocumentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteIndexDocument', 'POST', '/{WorkspaceId}/index/delete_index_document', 'json', false, 'json', request);
}

model DeleteMemoryRequest {
  workspaceId: string(name='workspaceId', example='llm-us9hjmt32nysdm5v', position='Path'),
  memoryId: string(name='memoryId', example='6bff4f317a14442fbc9f73d29dbd5fc3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model DeleteMemoryResponseBody = {
  requestId?: string(name='requestId', example='6a71f2d9-f1c9-913b-818b-114029103cad'),
}

model DeleteMemoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMemoryResponseBody(name='body'),
}

async function deleteMemory(request: DeleteMemoryRequest): DeleteMemoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteMemory', 'DELETE', '/{workspaceId}/memories/{memoryId}', 'json', false, 'json', request);
}

model DeleteMemoryNodeRequest {
  workspaceId: string(name='workspaceId', example='llm-us9hjmt32nysdm5v', position='Path'),
  memoryId: string(name='memoryId', example='6bff4f317a14442fbc9f73d29dbd5fc3', position='Path'),
  memoryNodeId: string(name='memoryNodeId', example='68de06c95368463a8be4a84efc872cc5', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model DeleteMemoryNodeResponseBody = {
  requestId?: string(name='requestId', example='8C56C7AF-6573-19CE-B018-E05E1EDCF4C5'),
}

model DeleteMemoryNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMemoryNodeResponseBody(name='body'),
}

async function deleteMemoryNode(request: DeleteMemoryNodeRequest): DeleteMemoryNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteMemoryNode', 'DELETE', '/{workspaceId}/memories/{memoryId}/memoryNodes/{memoryNodeId}', 'json', false, 'json', request);
}

model DescribeFileRequest {
  workspaceId: string(name='WorkspaceId', example='ws_3AXoiweeTyTd03IN', position='Path'),
  fileId: string(name='FileId', example='file_9a65732555b54d5ea10796ca5742ba22_XXXXXXXX', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeFileResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    categoryId?: string(name='CategoryId', example='cate_cdd11b1b79a74e8bbd675c356a91ee3XXXXXXXX'),
    createTime?: string(name='CreateTime', example='2024-05-26 12:45:43'),
    fileId?: string(name='FileId', example='file_9a65732555b54d5ea10796ca5742ba22_XXXXXXXX'),
    fileName?: string(name='FileName', example='test.pdf'),
    fileType?: string(name='FileType', example='pdf'),
    parser?: string(name='Parser', example='DASHSCOPE_DOCMIND'),
    sizeInBytes?: long(name='SizeInBytes', example='1234'),
    status?: string(name='Status', example='PARSE_SUCCESS'),
  }(name='Data'),
  message?: string(name='Message', example='Requests throttling triggered.'),
  requestId?: string(name='RequestId', example='17204B98-xxxx-4F9A-8464-2446A84821CA'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model DescribeFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFileResponseBody(name='body'),
}

async function describeFile(request: DescribeFileRequest): DescribeFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeFile', 'GET', '/{WorkspaceId}/datacenter/file/{FileId}/', 'json', false, 'json', request);
}

model GetIndexJobStatusRequest {
  workspaceId: string(name='WorkspaceId', example='ws_3Nt27MYcoK191ISp', position='Path'),
  indexId: string(name='IndexId', example='79c0aly8zw', position='Query'),
  jobId: string(name='JobId', example='20230718xxxx-146c93bf', position='Query'),
}

model GetIndexJobStatusResponseBody = {
  code?: string(name='Code', example='Index.Forbidden'),
  data?: {
    documents?: [ 
      {
        code?: string(name='Code', example='Index.Document.ChunkError'),
        docId?: string(name='DocId', example='file_9a65732555b54d5ea10796ca5742ba22_XXXXXXXX'),
        docName?: string(name='DocName'),
        message?: string(name='Message', example='document parse error'),
        status?: string(name='Status', example='RUNNING'),
      }
    ](name='Documents'),
    jobId?: string(name='JobId', example='66122af12a4e45ddae6bd6c845556647'),
    status?: string(name='Status', example='PENDING'),
  }(name='Data'),
  message?: string(name='Message', example='User not authorized to operate on the specified resource.'),
  requestId?: string(name='RequestId', example='17204B98-xxxx-4F9A-8464-2446A84821CA'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model GetIndexJobStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetIndexJobStatusResponseBody(name='body'),
}

async function getIndexJobStatus(request: GetIndexJobStatusRequest): GetIndexJobStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetIndexJobStatus', 'GET', '/{WorkspaceId}/index/job/status', 'json', false, 'json', request);
}

model GetMemoryRequest {
  workspaceId: string(name='workspaceId', example='llm-us9hjmt32nysdm5v', position='Path'),
  memoryId: string(name='memoryId', example='6bff4f317a14442fbc9f73d29dbd5fc3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model GetMemoryResponseBody = {
  description?: string(name='description'),
  memoryId?: string(name='memoryId', example='6bff4f317a14442fbc9f73d29dbd5fc3'),
  requestId?: string(name='requestId', example='6a71f2d9-f1c9-913b-818b-114029103cad'),
  workspaceId?: string(name='workspaceId', example='llm-us9hjmt32nysdm5v'),
}

model GetMemoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMemoryResponseBody(name='body'),
}

async function getMemory(request: GetMemoryRequest): GetMemoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetMemory', 'GET', '/{workspaceId}/memories/{memoryId}', 'json', false, 'json', request);
}

model GetMemoryNodeRequest {
  workspaceId: string(name='workspaceId', example='llm-us9hjmt32nysdm5v', position='Path'),
  memoryId: string(name='memoryId', example='6bff4f317a14442fbc9f73d29dbd5fc3', position='Path'),
  memoryNodeId: string(name='memoryNodeId', example='68de06c95368463a8be4a84efc872cc5', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model GetMemoryNodeResponseBody = {
  content?: string(name='content'),
  memoryId?: string(name='memoryId', example='6bff4f317a14442fbc9f73d29dbd5fc3'),
  memoryNodeId?: string(name='memoryNodeId', example='68de06c95368463a8be4a84efc872cc5'),
  requestId?: string(name='requestId', example='8C56C7AF-6573-19CE-B018-E05E1EDCF4C5'),
  workspaceId?: string(name='workspaceId', example='llm-us9hjmt32nysdm5v'),
}

model GetMemoryNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMemoryNodeResponseBody(name='body'),
}

async function getMemoryNode(request: GetMemoryNodeRequest): GetMemoryNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetMemoryNode', 'GET', '/{workspaceId}/memories/{memoryId}/memoryNodes/{memoryNodeId}', 'json', false, 'json', request);
}

model GetPublishedAgentRequest {
  workspaceId?: string(name='workspaceId', position='Path'),
  appCode?: string(name='appCode', position='Path'),
}

model GetPublishedAgentResponseBody = {
  code?: string(name='code'),
  data?: {
    applicationConfig?: {
      historyConfig?: {
        enableAdbRecord?: boolean(name='enableAdbRecord'),
        enableRecord?: boolean(name='enableRecord'),
        instanceId?: string(name='instanceId'),
        region?: string(name='region'),
        storeCode?: string(name='storeCode'),
      }(name='historyConfig'),
      longTermMemory?: {
        enable?: boolean(name='enable'),
      }(name='longTermMemory'),
      parameters?: {
        dialogRound?: int32(name='dialogRound'),
        maxTokens?: int32(name='maxTokens'),
        temperature?: double(name='temperature'),
      }(name='parameters'),
      ragConfig?: {
        enableCitation?: boolean(name='enableCitation'),
        enableSearch?: boolean(name='enableSearch'),
        knowledgeBaseCodeList?: [ string ](name='knowledgeBaseCodeList'),
        topK?: int32(name='topK'),
      }(name='ragConfig'),
      security?: {
        processingStrategy?: string(name='processingStrategy'),
      }(name='security'),
      tools?: [ 
        {
          type?: string(name='type'),
        }
      ](name='tools'),
      workFlows?: [ 
        {
          type?: string(name='type'),
        }
      ](name='workFlows'),
    }(name='applicationConfig'),
    code?: string(name='code'),
    instructions?: string(name='instructions'),
    modelId?: string(name='modelId'),
    name?: string(name='name'),
  }(name='data'),
  httpStatusCode?: int32(name='httpStatusCode'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
}

model GetPublishedAgentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPublishedAgentResponseBody(name='body'),
}

async function getPublishedAgent(request: GetPublishedAgentRequest): GetPublishedAgentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetPublishedAgent', 'GET', '/{workspaceId}/application/agents/{appCode}', 'json', false, 'json', request);
}

model ListCategoryRequest {
  workspaceId: string(name='WorkspaceId', example='ws_3Nt27MYcoK191ISp', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  categoryType: string(name='CategoryType', example='UNSTRUCTURED', position='Body'),
  maxResults?: int32(name='MaxResults', example='20', minimum=0, maximum=500, position='Body'),
  nextToken?: string(name='NextToken', example='AAAAAdH70eOCSCKtacdomNzak4U=', position='Body'),
  parentCategoryId?: string(name='ParentCategoryId', example='cate_cdd11b1b79a74e8bbd675c356a91ee3XXXXXXXX', position='Body'),
}

model ListCategoryResponseBody = {
  code?: string(name='Code', example='success'),
  data?: {
    categoryList?: [ 
      {
        categoryId?: string(name='CategoryId', example='cate_cdd11b1b79a74e8bbd675c356a91ee3XXXXXXXX'),
        categoryName?: string(name='CategoryName'),
        categoryType?: string(name='CategoryType', example='UNSTRUCTURED'),
        isDefault?: boolean(name='IsDefault', example='true'),
        parentCategoryId?: string(name='ParentCategoryId', example='cate_addd11b1b79a74e8bbd675c356a91ee3XXXXXXXX'),
      }
    ](name='CategoryList'),
    hasNext?: boolean(name='HasNext', example='true'),
    maxResults?: int32(name='MaxResults', example='20'),
    nextToken?: string(name='NextToken', example='AAAAALHWGpGoYCcYMxiFfmlhvh7Z4G8jiXR6IjHYd+M9WQVJ'),
    totalCount?: int32(name='TotalCount', example='20'),
  }(name='Data'),
  message?: string(name='Message', example='workspace id is null or invalid.'),
  requestId?: string(name='RequestId', description='Id of the request', example='17204B98-xxxx-4F9A-8464-2446A84821CA'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model ListCategoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCategoryResponseBody(name='body'),
}

async function listCategory(request: ListCategoryRequest): ListCategoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListCategory', 'POST', '/{WorkspaceId}/datacenter/categories', 'json', true, 'form', request);
}

model ListChunksRequest {
  workspaceId: string(name='WorkspaceId', example='ws_3AXoiweeTyTd03IN', position='Path'),
  fields?: [ string ](name='Fields', position='Body'),
  filed?: string(name='Filed', example='file_5f03dfea56da4050ab68d61871fc4cb3_10151493', position='Body'),
  indexId: string(name='IndexId', example='otoru9en4v', position='Body'),
  pageNum?: int32(name='PageNum', example='1', position='Body'),
  pageSize?: int32(name='PageSize', example='10', position='Body'),
}

model ListChunksResponseBody = {
  code?: string(name='Code', example='Index.InvalidParameter'),
  data?: {
    nodes?: [ 
      {
        metadata?: any(name='Metadata'),
        score?: double(name='Score', example='0.3'),
        text?: string(name='Text'),
      }
    ](name='Nodes'),
    total?: long(name='Total', example='16'),
  }(name='Data'),
  message?: string(name='Message', example='Required parameter(%s) missing or invalid, please check the request parameters.'),
  requestId?: string(name='RequestId', description='Id of the request', example='8F97A63B-55F1-527F-9D6E-467B6A7E8CF1'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model ListChunksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListChunksResponseBody(name='body'),
}

async function listChunks(request: ListChunksRequest): ListChunksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListChunks', 'POST', '/{WorkspaceId}/index/list_chunks', 'json', false, 'json', request);
}

model ListFileRequest {
  workspaceId: string(name='WorkspaceId', example='ws_3Nt27MYcoK191ISp', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  categoryId: string(name='CategoryId', example='cate_cdd11b1b79a74e8bbd675c356a91ee3510024405', position='Query'),
  maxResults?: int32(name='MaxResults', example='20', position='Query'),
  nextToken?: string(name='NextToken', example='AAAAAdH70eOCSCKtacdomNzak4U=', position='Query'),
}

model ListFileResponseBody = {
  code?: string(name='Code', example='success'),
  data?: {
    fileList?: [ 
      {
        categoryId?: string(name='CategoryId', example='cate_cdd11b1b79a74e8bbd675c356a91ee3510024405'),
        createTime?: string(name='CreateTime', example='2023-08-18 11:03:35'),
        fileId?: string(name='FileId', example='file_5ff599b3455a45db8c41b0054b361518_10098576'),
        fileName?: string(name='FileName', example='auto-test-1721096109278.pdf'),
        fileType?: string(name='FileType', example='docx'),
        parser?: string(name='Parser', example='DASHSCOPE_DOCMIND'),
        sizeInBytes?: long(name='SizeInBytes', example='512'),
        status?: string(name='Status', example='200'),
      }
    ](name='FileList'),
    hasNext?: boolean(name='HasNext', example='true'),
    maxResults?: int32(name='MaxResults', example='20'),
    nextToken?: string(name='NextToken', example='4jzbJk9J6lNeuXD9hP0viA=='),
    totalCount?: int32(name='TotalCount', example='48'),
  }(name='Data'),
  message?: string(name='Message', example='Requests throttling triggered.'),
  requestId?: string(name='RequestId', description='Id of the request', example='8F97A63B-55F1-527F-9D6E-467B6A7E8CF1'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model ListFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFileResponseBody(name='body'),
}

async function listFile(request: ListFileRequest): ListFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListFile', 'GET', '/{WorkspaceId}/datacenter/files', 'json', false, 'json', request);
}

model ListIndexDocumentsRequest {
  workspaceId: string(name='WorkspaceId', example='ws_3Nt27MYcoK191ISp', position='Path'),
  documentName?: string(name='DocumentName', position='Query'),
  documentStatus?: string(name='DocumentStatus', example='FINISH', position='Query'),
  indexId: string(name='IndexId', example='79c0aly8zw', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
}

model ListIndexDocumentsResponseBody = {
  code?: string(name='Code', example='InvalidParameter'),
  data?: {
    documents?: [ 
      {
        code?: string(name='Code', example='110002'),
        documentType?: string(name='DocumentType', example='pdf'),
        id?: string(name='Id', example='doc_c134aa2073204a5d936d870bf960f56a10024701'),
        message?: string(name='Message', example='check fileUrlKey[file_path] / fileNameKey[null] / fileExtensionKey[file_extension] is invalid'),
        name?: string(name='Name'),
        size?: int32(name='Size', example='996764'),
        sourceId?: string(name='SourceId', example='cate_21a407a3372c4ba7aedc649709143f0c10021401'),
        status?: string(name='Status', example='RUNNING'),
      }
    ](name='Documents'),
    indexId?: string(name='IndexId', example='pno97tn8iu'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: long(name='TotalCount', example='2437'),
  }(name='Data'),
  message?: string(name='Message', example='Required parameter(%s) missing or invalid, please check the request parameters.'),
  requestId?: string(name='RequestId', description='Id of the request', example='35A267BF-xxxx-54DB-8394-AA3B0742D833'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model ListIndexDocumentsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIndexDocumentsResponseBody(name='body'),
}

async function listIndexDocuments(request: ListIndexDocumentsRequest): ListIndexDocumentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListIndexDocuments', 'GET', '/{WorkspaceId}/index/list_index_documents', 'json', false, 'json', request);
}

model ListIndicesRequest {
  workspaceId: string(name='WorkspaceId', example='ws_3Nt27MYcoK191ISp', position='Path'),
  indexName?: string(name='IndexName', example='idx_status_score', position='Query'),
  pageNumber?: string(name='PageNumber', example='1', position='Query'),
  pageSize?: string(name='PageSize', example='10', position='Query'),
}

model ListIndicesResponseBody = {
  code?: string(name='Code', example='Index.InvalidParameter'),
  data?: {
    indices?: [ 
      {
        chunkSize?: int32(name='ChunkSize', example='5'),
        description?: string(name='Description', example='If each RAM user belongs to a RAM group, the configuration is considered compliant.'),
        documentIds?: [ string ](name='DocumentIds'),
        embeddingModelName?: string(name='EmbeddingModelName', example='conv-rewrite-qwen-1.8b'),
        id?: string(name='Id', example='259899'),
        name?: string(name='Name', example='temp_mUB4j'),
        overlapSize?: int32(name='OverlapSize', example='10'),
        rerankMinScore?: string(name='RerankMinScore', example='0.01'),
        rerankModelName?: string(name='RerankModelName', example='gte-rerank-hybrid'),
        separator?: string(name='Separator', example='\\n'),
        sinkInstanceId?: string(name='SinkInstanceId', example='gp-bp1gq62t1788yw2ol'),
        sinkRegion?: string(name='SinkRegion', example='cn-hangzhou'),
        sinkType?: string(name='SinkType', example='es'),
        sourceType?: string(name='SourceType', example='DATA_CENTER_FILE'),
        structureType?: string(name='StructureType', example='structured'),
      }
    ](name='Indices'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='48'),
  }(name='Data'),
  message?: string(name='Message', example='Required parameter(%s) missing or invalid, please check the request parameters.'),
  requestId?: string(name='RequestId', description='Id of the request', example='17204B98-xxxx-4F9A-8464-2446A84821CA'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model ListIndicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIndicesResponseBody(name='body'),
}

async function listIndices(request: ListIndicesRequest): ListIndicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListIndices', 'GET', '/{WorkspaceId}/index/list_indices', 'json', false, 'json', request);
}

model ListMemoriesRequest {
  workspaceId: string(name='workspaceId', example='llm-us9hjmt32nysdm5v', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  maxResults?: int32(name='maxResults', example='10', position='Query'),
  nextToken?: string(name='nextToken', example='dc270401186b433f975d7e1faaa34e0e', position='Query'),
}

model ListMemoriesResponseBody = {
  maxResults?: int32(name='maxResults', example='10'),
  memories?: [ 
    {
      description?: string(name='description'),
      memoryId?: string(name='memoryId', example='3fc531f4519444beaafffa4538f60667'),
    }
  ](name='memories'),
  nextToken?: string(name='nextToken', example='dc270401186b433f975d7e1faaa34e0e'),
  requestId?: string(name='requestId', example='6a71f2d9-f1c9-913b-818b-114029103cad'),
  totalCount?: int32(name='totalCount', example='105'),
  workspaceId?: string(name='workspaceId', example='llm-us9hjmt32nysdm5v'),
}

model ListMemoriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMemoriesResponseBody(name='body'),
}

async function listMemories(request: ListMemoriesRequest): ListMemoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListMemories', 'GET', '/{workspaceId}/memories', 'json', false, 'json', request);
}

model ListMemoryNodesRequest {
  workspaceId: string(name='workspaceId', example='llm-us9hjmt32nysdm5v', position='Path'),
  memoryId: string(name='memoryId', example='6bff4f317a14442fbc9f73d29dbd5fc3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  maxResults?: int32(name='maxResults', example='20', minimum=1, maximum=50, position='Query'),
  nextToken?: string(name='nextToken', example='dc270401186b433f975d7e1faaa34e0e', position='Query'),
}

model ListMemoryNodesResponseBody = {
  maxResults?: int32(name='maxResults', example='20'),
  memoryNodes?: [ 
    {
      content?: string(name='content'),
      memoryNodeId?: string(name='memoryNodeId', example='68de06c95368463a8be4a84efc872cc5'),
    }
  ](name='memoryNodes'),
  nextToken?: string(name='nextToken', example='dc270401186b433f975d7e1faaa34e0e'),
  requestId?: string(name='requestId', example='6a71f2d9-f1c9-913b-818b-114029103cad'),
  totalCount?: int32(name='totalCount', example='100'),
}

model ListMemoryNodesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMemoryNodesResponseBody(name='body'),
}

async function listMemoryNodes(request: ListMemoryNodesRequest): ListMemoryNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListMemoryNodes', 'GET', '/{workspaceId}/memories/{memoryId}/memoryNodes', 'json', false, 'json', request);
}

model ListPublishedAgentRequest {
  workspaceId?: string(name='workspaceId', position='Path'),
  pageNo?: int32(name='pageNo', position='Query'),
  pageSize?: int32(name='pageSize', position='Query'),
}

model ListPublishedAgentResponseBody = {
  code?: string(name='code'),
  data?: {
    list?: [ 
      {
        applicationConfig?: {
          historyConfig?: {
            enableAdbRecord?: boolean(name='enableAdbRecord'),
            enableRecord?: boolean(name='enableRecord'),
            instanceId?: string(name='instanceId'),
            region?: string(name='region'),
            storeCode?: string(name='storeCode'),
          }(name='historyConfig'),
          longTermMemory?: {
            enable?: boolean(name='enable'),
          }(name='longTermMemory'),
          parameters?: {
            dialogRound?: int32(name='dialogRound'),
            maxTokens?: int32(name='maxTokens'),
            temperature?: double(name='temperature'),
          }(name='parameters'),
          ragConfig?: {
            enableCitation?: boolean(name='enableCitation'),
            enableSearch?: boolean(name='enableSearch'),
            knowledgeBaseCodeList?: [ string ](name='knowledgeBaseCodeList'),
            topK?: int32(name='topK'),
          }(name='ragConfig'),
          security?: {
            processingStrategy?: string(name='processingStrategy'),
          }(name='security'),
          tools?: [ 
            {
              type?: string(name='type'),
            }
          ](name='tools'),
          workFlows?: [ 
            {
              type?: string(name='type'),
            }
          ](name='workFlows'),
        }(name='applicationConfig'),
        code?: string(name='code'),
        instructions?: string(name='instructions'),
        modelId?: string(name='modelId'),
        name?: string(name='name'),
      }
    ](name='list'),
    pageNo?: int32(name='pageNo'),
    pageSize?: int32(name='pageSize'),
    total?: int32(name='total'),
  }(name='data'),
  httpStatusCode?: int32(name='httpStatusCode'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  success?: string(name='success'),
}

model ListPublishedAgentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPublishedAgentResponseBody(name='body'),
}

async function listPublishedAgent(request: ListPublishedAgentRequest): ListPublishedAgentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListPublishedAgent', 'GET', '/{workspaceId}/application/agents', 'json', false, 'json', request);
}

model RetrieveRequest {
  workspaceId: string(name='WorkspaceId', example='ws_3Nt27MYcoK191ISp', position='Path'),
  denseSimilarityTopK?: int32(name='DenseSimilarityTopK', example='100', position='Query'),
  enableReranking?: boolean(name='EnableReranking', example='true', position='Query'),
  enableRewrite?: boolean(name='EnableRewrite', example='false', position='Query'),
  indexId: string(name='IndexId', example='5pwe0m2g6t', position='Query'),
  query?: string(name='Query', position='Query'),
  rerank?: [ 
    {
      modelName?: string(name='ModelName', example='gte-rerank-hybrid'),
    }
  ](name='Rerank', shrink='json', position='Query'),
  rerankMinScore?: float(name='RerankMinScore', example='0.20', position='Query'),
  rerankTopN?: int32(name='RerankTopN', example='5', position='Query'),
  rewrite?: [ 
    {
      modelName?: string(name='ModelName'),
    }
  ](name='Rewrite', shrink='json', position='Query'),
  saveRetrieverHistory?: boolean(name='SaveRetrieverHistory', example='false', position='Query'),
  searchFilters?: [ map[string]string ](name='SearchFilters', shrink='json', position='Query'),
  sparseSimilarityTopK?: int32(name='SparseSimilarityTopK', example='100', position='Query'),
}

model RetrieveResponseBody = {
  code?: string(name='Code', example='Index.InvalidParameter'),
  data?: {
    nodes?: [ 
      {
        metadata?: any(name='Metadata'),
        score?: double(name='Score', example='0.3'),
        text?: string(name='Text'),
      }
    ](name='Nodes'),
  }(name='Data'),
  message?: string(name='Message', example='Required parameter(%s) missing or invalid, please check the request parameters.'),
  requestId?: string(name='RequestId', description='Id of the request', example='17204B98-7734-4F9A-8464-2446A84821CA'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model RetrieveResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RetrieveResponseBody(name='body'),
}

async function retrieve(request: RetrieveRequest): RetrieveResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'Retrieve', 'POST', '/{WorkspaceId}/index/retrieve', 'json', false, 'json', request);
}

model SubmitIndexAddDocumentsJobRequest {
  workspaceId: string(name='WorkspaceId', example='ws_3Nt27MYcoK191ISp', position='Path'),
  categoryIds?: [ string ](name='CategoryIds', shrink='json', position='Query'),
  documentIds?: [ string ](name='DocumentIds', shrink='json', position='Query'),
  indexId: string(name='IndexId', example='79c0aly8zw', position='Query'),
  sourceType: string(name='SourceType', example='DATA_CENTER_FILE', position='Query'),
}

model SubmitIndexAddDocumentsJobResponseBody = {
  code?: string(name='Code', example='Index.InvalidParameter'),
  data?: {
    id?: string(name='Id', example='42687eb254a34802bed398357f5498ae'),
  }(name='Data'),
  message?: string(name='Message', example='Required parameter(%s) missing or invalid, please check the request parameters.'),
  requestId?: string(name='RequestId', description='Id of the request', example='778C0B3B-03C1-5FC1-A947-36EDD13606AB'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model SubmitIndexAddDocumentsJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitIndexAddDocumentsJobResponseBody(name='body'),
}

async function submitIndexAddDocumentsJob(request: SubmitIndexAddDocumentsJobRequest): SubmitIndexAddDocumentsJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SubmitIndexAddDocumentsJob', 'POST', '/{WorkspaceId}/index/add_documents_to_index', 'json', false, 'json', request);
}

model SubmitIndexJobRequest {
  workspaceId: string(name='WorkspaceId', example='ws_3Nt27MYcoK191ISp', position='Path'),
  indexId: string(name='IndexId', example='79c0aly8zw', position='Query'),
}

model SubmitIndexJobResponseBody = {
  code?: string(name='Code', example='InvalidParameter'),
  data?: {
    id?: string(name='Id', example='eFDr2fGRzP9gdDZWAdo3YQ=='),
    indexId?: string(name='IndexId', example='khdyak1uuj'),
  }(name='Data'),
  message?: string(name='Message', example='Required parameter(%s) missing or invalid, please check the request parameters.'),
  requestId?: string(name='RequestId', description='Id of the request', example='17204B98-xxxx-4F9A-8464-2446A84821CA'),
  status?: string(name='Status', example='Success'),
  success?: boolean(name='Success', example='True'),
}

model SubmitIndexJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitIndexJobResponseBody(name='body'),
}

async function submitIndexJob(request: SubmitIndexJobRequest): SubmitIndexJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SubmitIndexJob', 'POST', '/{WorkspaceId}/index/submit_index_job', 'json', false, 'json', request);
}

model UpdateAndPublishAgentRequest {
  workspaceId?: string(name='workspaceId', position='Path'),
  appCode?: string(name='appCode', position='Path'),
  applicationConfig?: {
    historyConfig?: {
      enableAdbRecord?: boolean(name='enableAdbRecord'),
      enableRecord?: boolean(name='enableRecord'),
      instanceId?: string(name='instanceId'),
      region?: string(name='region'),
      storeCode?: string(name='storeCode'),
    }(name='historyConfig'),
    longTermMemory?: {
      enable?: boolean(name='enable'),
    }(name='longTermMemory'),
    parameters?: {
      dialogRound?: int32(name='dialogRound'),
      maxTokens?: int32(name='maxTokens'),
      temperature?: double(name='temperature'),
    }(name='parameters'),
    ragConfig?: {
      enableCitation?: boolean(name='enableCitation'),
      enableSearch?: boolean(name='enableSearch'),
      knowledgeBaseCodeList?: [ string ](name='knowledgeBaseCodeList'),
      topK?: int32(name='topK'),
    }(name='ragConfig'),
    security?: {
      processingStrategy?: string(name='processingStrategy'),
    }(name='security'),
    tools?: [ 
      {
        type?: string(name='type'),
      }
    ](name='tools'),
    workFlows?: [ 
      {
        type?: string(name='type'),
      }
    ](name='workFlows'),
  }(name='applicationConfig', shrink='json', position='Body'),
  instructions?: string(name='instructions', position='Body'),
  modelId?: string(name='modelId', position='Body'),
  name?: string(name='name', position='Body'),
}

model UpdateAndPublishAgentResponseBody = {
  code?: string(name='code'),
  data?: string(name='data'),
  httpStatusCode?: int32(name='httpStatusCode'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
}

model UpdateAndPublishAgentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAndPublishAgentResponseBody(name='body'),
}

async function updateAndPublishAgent(request: UpdateAndPublishAgentRequest): UpdateAndPublishAgentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateAndPublishAgent', 'PUT', '/{workspaceId}/application/agents/{appCode}', 'json', true, 'form', request);
}

model UpdateMemoryRequest {
  workspaceId: string(name='workspaceId', example='llm-us9hjmt32nysdm5v', position='Path'),
  memoryId: string(name='memoryId', example='6bff4f317a14442fbc9f73d29dbd5fc3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  description?: string(name='description', position='Query'),
}

model UpdateMemoryResponseBody = {
  requestId?: string(name='requestId', example='6a71f2d9-f1c9-913b-818b-114029103cad'),
}

model UpdateMemoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateMemoryResponseBody(name='body'),
}

async function updateMemory(request: UpdateMemoryRequest): UpdateMemoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateMemory', 'PUT', '/{workspaceId}/memories/{memoryId}', 'json', false, 'json', request);
}

model UpdateMemoryNodeRequest {
  workspaceId: string(name='workspaceId', example='llm-us9hjmt32nysdm5v', position='Path'),
  memoryId: string(name='memoryId', example='6bff4f317a14442fbc9f73d29dbd5fc3', position='Path'),
  memoryNodeId: string(name='memoryNodeId', example='68de06c95368463a8be4a84efc872cc5', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  content: string(name='content', position='Query'),
}

model UpdateMemoryNodeResponseBody = {
  requestId?: string(name='requestId', example='8C56C7AF-6573-19CE-B018-E05E1EDCF4C5'),
}

model UpdateMemoryNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateMemoryNodeResponseBody(name='body'),
}

async function updateMemoryNode(request: UpdateMemoryNodeRequest): UpdateMemoryNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateMemoryNode', 'PUT', '/{workspaceId}/memories/{memoryId}/memoryNodes/{memoryNodeId}', 'json', false, 'json', request);
}

