/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'bailian';
  @version = '2023-12-29';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddFileRequest {
  workspaceId: string(name='WorkspaceId', example='ws_3AXoiweeTyTd03IN', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  categoryId: string(name='CategoryId', example='cate_cdd11b1b79a74e8bbd675c356a91ee3510024405', position='Body'),
  leaseId: string(name='LeaseId', example='68abd1dea7b6404d8f7d7b9f7fbd332d.1716698936847', position='Body'),
  parser: string(name='Parser', example='DASHSCOPE_DOCMIND', position='Body'),
}

model AddFileResponseBody = {
  code?: string(name='Code', example='DataCenter.FileTooLarge'),
  data?: {
    fileId?: string(name='FileId', example='file_9a65732555b54d5ea10796ca5742ba22_XXXXXXXX'),
    parser?: string(name='Parser', example='DASHSCOPE_DOCMIND'),
  }(name='Data'),
  message?: string(name='Message', example='User not authorized to operate on the specified resource.'),
  requestId?: string(name='RequestId', example='778C0B3B-xxxx-5FC1-A947-36EDD13606AB'),
  status?: string(name='Status', example='200'),
  success?: string(name='Success', example='true'),
}

model AddFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddFileResponseBody(name='body'),
}

async function addFile(request: AddFileRequest): AddFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddFile', 'PUT', '/{WorkspaceId}/datacenter/file', 'json', true, 'form', request);
}

model ApplyFileUploadLeaseRequest {
  categoryId: string(name='CategoryId', example='cate_cdd11b1b79a74e8bbd675c356a91ee3510024405', position='Path'),
  workspaceId: string(name='WorkspaceId', example='ws_3AXoiweeTyTd03IN', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  fileName: string(name='FileName', position='Body'),
  md5: string(name='Md5', example='19657c391f6c70bcea63c154d8606bb3', position='Body'),
  sizeInBytes: string(name='SizeInBytes', example='1000', position='Body'),
}

model ApplyFileUploadLeaseResponseBody = {
  code?: string(name='Code', example='DataCenter.FileTooLarge'),
  data?: {
    fileUploadLeaseId?: string(name='FileUploadLeaseId', example='1e6a159107384782be5e45ac4759b247.1719325231035'),
    param?: {
      headers?: any(name='Headers', example='"X-bailian-extra": "MTAwNTQyNjQ5NTE2OTE3OA==",
        "Content-Type": "application/pdf"'),
      method?: string(name='Method', example='PUT'),
      url?: string(name='Url', example='https://bailian-datahub-data-origin-prod.oss-cn-hangzhou.aliyuncs.com/1005426495169178/10024405/68abd1dea7b6404d8f7d7b9f7fbd332d.1716698936847.pdf?Expires=1716699536&OSSAccessKeyId=TestID&Signature=HfwPUZo4pR6DatSDym0zFKVh9Wg%3D'),
    }(name='Param'),
    type?: string(name='Type', example='HTTP'),
  }(name='Data'),
  message?: string(name='Message', example='User not authorized to operate on the specified resource'),
  requestId?: string(name='RequestId', example='778C0B3B-xxxx-5FC1-A947-36EDD13606AB'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model ApplyFileUploadLeaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApplyFileUploadLeaseResponseBody(name='body'),
}

async function applyFileUploadLease(request: ApplyFileUploadLeaseRequest): ApplyFileUploadLeaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ApplyFileUploadLease', 'POST', '/{WorkspaceId}/datacenter/category/{CategoryId}', 'json', true, 'form', request);
}

model DescribeFileRequest {
  workspaceId: string(name='WorkspaceId', example='ws_3AXoiweeTyTd03IN', position='Path'),
  fileId: string(name='FileId', example='file_9a65732555b54d5ea10796ca5742ba22_XXXXXXXX', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeFileResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    categoryId?: string(name='CategoryId', example='cate_cdd11b1b79a74e8bbd675c356a91ee3XXXXXXXX'),
    createTime?: string(name='CreateTime', example='2024-05-26 12:45:43'),
    fileId?: string(name='FileId', example='file_9a65732555b54d5ea10796ca5742ba22_XXXXXXXX'),
    fileName?: string(name='FileName', example='test.pdf'),
    fileType?: string(name='FileType', example='pdf'),
    parser?: string(name='Parser', example='DASHSCOPE_DOCMIND'),
    sizeInBytes?: long(name='SizeInBytes', example='1234'),
    status?: string(name='Status', example='PARSE_SUCCESS'),
  }(name='Data'),
  message?: string(name='Message', example='Requests throttling triggered.'),
  requestId?: string(name='RequestId', example='17204B98-xxxx-4F9A-8464-2446A84821CA'),
  status?: string(name='Status', example='200'),
  success?: boolean(name='Success', example='true'),
}

model DescribeFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFileResponseBody(name='body'),
}

async function describeFile(request: DescribeFileRequest): DescribeFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeFile', 'GET', '/{WorkspaceId}/datacenter/file/{FileId}/', 'json', false, 'json', request);
}

