/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'amp';
  @version = '2022-02-21';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model QueryByIdRequest {
  regionId?: string(name='RegionId', position='Host'),
  address?: string(name='address', description='fsdfs', position='Query'),
}

model QueryByIdResponseBody = {
  address?: string(name='Address'),
  color?: string(name='Color', description='fsdfsa'),
  name?: string(name='Name'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model QueryByIdResponse = {
  headers: map[string]string(name='headers'),
  body: QueryByIdResponseBody(name='body'),
}

async function queryById(request: QueryByIdRequest): QueryByIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryById', 'GET', '/', 'json', false, 'json', request);
}

