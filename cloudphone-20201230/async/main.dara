/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'cloudphone';
  @version = '2020-12-30';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CancelCopyImageRequest {
  imageId: string(name='ImageId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
}

model CancelCopyImageResponseBody = {
  requestId?: string(name='RequestId'),
}

model CancelCopyImageResponse = {
  headers: map[string]string(name='headers'),
  body: CancelCopyImageResponseBody(name='body'),
}

async function cancelCopyImage(request: CancelCopyImageRequest): CancelCopyImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelCopyImage', 'POST', '/', 'json', false, 'json', request);
}

model CancelImportImageRequest {
  imageId: string(name='ImageId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
}

model CancelImportImageResponseBody = {
  requestId?: string(name='RequestId'),
}

model CancelImportImageResponse = {
  headers: map[string]string(name='headers'),
  body: CancelImportImageResponseBody(name='body'),
}

async function cancelImportImage(request: CancelImportImageRequest): CancelImportImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelImportImage', 'POST', '/', 'json', false, 'json', request);
}

model CancelTaskRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  taskId: string(name='TaskId', position='Query'),
}

model CancelTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model CancelTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CancelTaskResponseBody(name='body'),
}

async function cancelTask(request: CancelTaskRequest): CancelTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelTask', 'POST', '/', 'json', false, 'json', request);
}

model CopyImageRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  destinationRegionId: string(name='DestinationRegionId', position='Query'),
  imageId: string(name='ImageId', position='Query'),
  imageName?: string(name='ImageName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
}

model CopyImageResponseBody = {
  imageId?: string(name='ImageId'),
  requestId?: string(name='RequestId'),
}

model CopyImageResponse = {
  headers: map[string]string(name='headers'),
  body: CopyImageResponseBody(name='body'),
}

async function copyImage(request: CopyImageRequest): CopyImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CopyImage', 'POST', '/', 'json', false, 'json', request);
}

model CreateImageRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  imageName?: string(name='ImageName', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
}

model CreateImageResponseBody = {
  imageId?: string(name='ImageId'),
  requestId?: string(name='RequestId'),
}

model CreateImageResponse = {
  headers: map[string]string(name='headers'),
  body: CreateImageResponseBody(name='body'),
}

async function createImage(request: CreateImageRequest): CreateImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateImage', 'POST', '/', 'json', false, 'json', request);
}

model DeleteImagesRequest {
  force?: boolean(name='Force', position='Query'),
  imageId: [ string ](name='ImageId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
}

model DeleteImagesResponseBody = {
  imageResponses?: {
    imageResponse?: [ 
    {
      code?: string(name='Code'),
      imageId?: string(name='ImageId'),
      message?: string(name='Message'),
    }
  ](name='ImageResponse')
  }(name='ImageResponses'),
  requestId?: string(name='RequestId'),
}

model DeleteImagesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteImagesResponseBody(name='body'),
}

async function deleteImages(request: DeleteImagesRequest): DeleteImagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteImages', 'POST', '/', 'json', false, 'json', request);
}

model DeleteInstancesRequest {
  force?: boolean(name='Force', position='Query'),
  instanceId: [ string ](name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
}

model DeleteInstancesResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteInstancesResponseBody(name='body'),
}

async function deleteInstances(request: DeleteInstancesRequest): DeleteInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteInstances', 'POST', '/', 'json', false, 'json', request);
}

model DeleteKeyPairsRequest {
  keyPairName: [ string ](name='KeyPairName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
}

model DeleteKeyPairsResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteKeyPairsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteKeyPairsResponseBody(name='body'),
}

async function deleteKeyPairs(request: DeleteKeyPairsRequest): DeleteKeyPairsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteKeyPairs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImagesRequest {
  imageCategory?: string(name='ImageCategory', position='Query'),
  imageId?: string(name='ImageId', position='Query'),
  imageName?: string(name='ImageName', position='Query'),
  instanceType?: string(name='InstanceType', position='Query'),
  maxResults?: int32(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  status?: string(name='Status', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model DescribeImagesResponseBody = {
  images?: {
    image?: [ 
    {
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      imageCategory?: string(name='ImageCategory'),
      imageId?: string(name='ImageId'),
      imageName?: string(name='ImageName'),
      OSName?: string(name='OSName'),
      OSNameEn?: string(name='OSNameEn'),
      OSType?: string(name='OSType'),
      platform?: string(name='Platform'),
      progress?: string(name='Progress'),
      resourceGroupId?: string(name='ResourceGroupId'),
      status?: string(name='Status'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey'),
          tagValue?: string(name='TagValue'),
        }
      ](name='Tag')
      }(name='Tags'),
    }
  ](name='Image')
  }(name='Images'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeImagesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeImagesResponseBody(name='body'),
}

async function describeImages(request: DescribeImagesRequest): DescribeImagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImages', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceTypesRequest {
  instanceType?: [ string ](name='InstanceType', position='Query'),
  instanceTypeFamily?: string(name='InstanceTypeFamily', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
}

model DescribeInstanceTypesResponseBody = {
  instanceTypes?: {
    instanceType?: [ 
    {
      cpuCoreCount?: int32(name='CpuCoreCount'),
      defaultResolution?: string(name='DefaultResolution'),
      instanceType?: string(name='InstanceType'),
      instanceTypeFamily?: string(name='InstanceTypeFamily'),
      memorySize?: string(name='MemorySize'),
      name?: string(name='Name'),
      nameEn?: string(name='NameEn'),
      resolutions?: {
        resolution?: [ string ](name='Resolution')
      }(name='Resolutions'),
    }
  ](name='InstanceType')
  }(name='InstanceTypes'),
  requestId?: string(name='RequestId'),
}

model DescribeInstanceTypesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceTypesResponseBody(name='body'),
}

async function describeInstanceTypes(request: DescribeInstanceTypesRequest): DescribeInstanceTypesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceTypes', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
    }
  ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeZonesRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
}

model DescribeZonesResponseBody = {
  requestId?: string(name='RequestId'),
  zones?: {
    zone?: [ 
    {
      zoneId?: string(name='ZoneId'),
    }
  ](name='Zone')
  }(name='Zones'),
}

model DescribeZonesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeZonesResponseBody(name='body'),
}

async function describeZones(request: DescribeZonesRequest): DescribeZonesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeZones', 'POST', '/', 'json', false, 'json', request);
}

model FetchFileRequest {
  instanceId: string(name='InstanceId', position='Query'),
  ossBucket: string(name='OssBucket', position='Query'),
  ossObject: string(name='OssObject', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  path: string(name='Path', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
}

model FetchFileResponseBody = {
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model FetchFileResponse = {
  headers: map[string]string(name='headers'),
  body: FetchFileResponseBody(name='body'),
}

async function fetchFile(request: FetchFileRequest): FetchFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FetchFile', 'POST', '/', 'json', false, 'json', request);
}

model ImportImageRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  format?: string(name='Format', position='Query'),
  imageName?: string(name='ImageName', position='Query'),
  ossBucket: string(name='OssBucket', position='Query'),
  ossObject: string(name='OssObject', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  platform?: string(name='Platform', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
}

model ImportImageResponseBody = {
  imageId?: string(name='ImageId'),
  requestId?: string(name='RequestId'),
}

model ImportImageResponse = {
  headers: map[string]string(name='headers'),
  body: ImportImageResponseBody(name='body'),
}

async function importImage(request: ImportImageRequest): ImportImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportImage', 'POST', '/', 'json', false, 'json', request);
}

model ImportKeyPairRequest {
  keyPairName: string(name='KeyPairName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  publicKeyBody: string(name='PublicKeyBody', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
}

model ImportKeyPairResponseBody = {
  keyPairFingerPrint?: string(name='KeyPairFingerPrint'),
  keyPairName?: string(name='KeyPairName'),
  requestId?: string(name='RequestId'),
}

model ImportKeyPairResponse = {
  headers: map[string]string(name='headers'),
  body: ImportKeyPairResponseBody(name='body'),
}

async function importKeyPair(request: ImportKeyPairRequest): ImportKeyPairResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportKeyPair', 'POST', '/', 'json', false, 'json', request);
}

model InstallApplicationRequest {
  instanceId?: [ string ](name='InstanceId', position='Query'),
  ossBucket: string(name='OssBucket', position='Query'),
  ossObject: string(name='OssObject', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
}

model InstallApplicationResponseBody = {
  requestId?: string(name='RequestId'),
  taskId?: {
    taskId?: [ string ](name='TaskId')
  }(name='TaskId'),
}

model InstallApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: InstallApplicationResponseBody(name='body'),
}

async function installApplication(request: InstallApplicationRequest): InstallApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InstallApplication', 'POST', '/', 'json', false, 'json', request);
}

model ListImageSharePermissionRequest {
  imageId: string(name='ImageId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
}

model ListImageSharePermissionResponseBody = {
  accounts?: {
    account?: [ 
    {
      aliyunId?: string(name='AliyunId'),
    }
  ](name='Account')
  }(name='Accounts'),
  requestId?: string(name='RequestId'),
}

model ListImageSharePermissionResponse = {
  headers: map[string]string(name='headers'),
  body: ListImageSharePermissionResponseBody(name='body'),
}

async function listImageSharePermission(request: ListImageSharePermissionRequest): ListImageSharePermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListImageSharePermission', 'POST', '/', 'json', false, 'json', request);
}

model ListImagesRequest {
  imageCategory?: string(name='ImageCategory', position='Query'),
  imageId?: [ string ](name='ImageId', position='Query'),
  imageName?: string(name='ImageName', position='Query'),
  maxResults?: int32(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  status?: string(name='Status', position='Query'),
}

model ListImagesResponseBody = {
  images?: {
    image?: [ 
    {
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      imageCategory?: string(name='ImageCategory'),
      imageId?: string(name='ImageId'),
      imageName?: string(name='ImageName'),
      isSelfShared?: boolean(name='IsSelfShared'),
      OSName?: string(name='OSName'),
      OSNameEn?: string(name='OSNameEn'),
      OSType?: string(name='OSType'),
      platform?: string(name='Platform'),
      progress?: string(name='Progress'),
      status?: string(name='Status'),
      usage?: string(name='Usage'),
    }
  ](name='Image')
  }(name='Images'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListImagesResponse = {
  headers: map[string]string(name='headers'),
  body: ListImagesResponseBody(name='body'),
}

async function listImages(request: ListImagesRequest): ListImagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListImages', 'POST', '/', 'json', false, 'json', request);
}

model ListInstanceTypesRequest {
  instanceType?: [ string ](name='InstanceType', position='Query'),
  instanceTypeFamily?: string(name='InstanceTypeFamily', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
}

model ListInstanceTypesResponseBody = {
  instanceTypes?: {
    instanceType?: [ 
    {
      cpuCoreCount?: int32(name='CpuCoreCount'),
      defaultResolution?: string(name='DefaultResolution'),
      instanceType?: string(name='InstanceType'),
      instanceTypeFamily?: string(name='InstanceTypeFamily'),
      memorySize?: string(name='MemorySize'),
      name?: string(name='Name'),
      nameEn?: string(name='NameEn'),
      resolutions?: {
        resolution?: [ string ](name='Resolution')
      }(name='Resolutions'),
    }
  ](name='InstanceType')
  }(name='InstanceTypes'),
  requestId?: string(name='RequestId'),
}

model ListInstanceTypesResponse = {
  headers: map[string]string(name='headers'),
  body: ListInstanceTypesResponseBody(name='body'),
}

async function listInstanceTypes(request: ListInstanceTypesRequest): ListInstanceTypesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstanceTypes', 'POST', '/', 'json', false, 'json', request);
}

model ListInstanceVncUrlRequest {
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
}

model ListInstanceVncUrlResponseBody = {
  requestId?: string(name='RequestId'),
  vncUrl?: string(name='VncUrl'),
  webRtcToken?: string(name='WebRtcToken'),
}

model ListInstanceVncUrlResponse = {
  headers: map[string]string(name='headers'),
  body: ListInstanceVncUrlResponseBody(name='body'),
}

async function listInstanceVncUrl(request: ListInstanceVncUrlRequest): ListInstanceVncUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstanceVncUrl', 'POST', '/', 'json', false, 'json', request);
}

model ListInstancesRequest {
  chargeType?: string(name='ChargeType', position='Query'),
  imageId?: string(name='ImageId', position='Query'),
  instanceId?: [ string ](name='InstanceId', position='Query'),
  instanceName?: string(name='InstanceName', position='Query'),
  instanceType?: string(name='InstanceType', position='Query'),
  keyPairName?: string(name='KeyPairName', position='Query'),
  maxResults?: int32(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resolution?: string(name='Resolution', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  showWebRtcToken?: boolean(name='ShowWebRtcToken', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  status?: string(name='Status', position='Query'),
  zoneId?: string(name='ZoneId', position='Query'),
}

model ListInstancesResponseBody = {
  instances?: {
    instance?: [ 
    {
      autoRenew?: boolean(name='AutoRenew'),
      chargeType?: string(name='ChargeType'),
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      eipAddress?: {
        allocationId?: string(name='AllocationId'),
        bandwidth?: int32(name='Bandwidth'),
        internetChargeType?: string(name='InternetChargeType'),
        ipAddress?: string(name='IpAddress'),
      }(name='EipAddress'),
      expiredTime?: string(name='ExpiredTime'),
      imageId?: string(name='ImageId'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      instanceType?: string(name='InstanceType'),
      keyPairName?: string(name='KeyPairName'),
      osName?: string(name='OsName'),
      osNameEn?: string(name='OsNameEn'),
      regionId?: string(name='RegionId'),
      resolution?: string(name='Resolution'),
      securityGroupId?: string(name='SecurityGroupId'),
      status?: string(name='Status'),
      vpcAttributes?: {
        privateIpAddress?: string(name='PrivateIpAddress'),
        vSwitchId?: string(name='VSwitchId'),
      }(name='VpcAttributes'),
      webRtcToken?: string(name='WebRtcToken'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='Instance')
  }(name='Instances'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ListInstancesResponseBody(name='body'),
}

async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstances', 'POST', '/', 'json', false, 'json', request);
}

model ListKeyPairsRequest {
  keyPairFingerPrint?: string(name='KeyPairFingerPrint', position='Query'),
  keyPairName?: string(name='KeyPairName', position='Query'),
  maxResults?: int32(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
}

model ListKeyPairsResponseBody = {
  keyPairs?: {
    keyPair?: [ 
    {
      creationTime?: string(name='CreationTime'),
      keyPairFingerPrint?: string(name='KeyPairFingerPrint'),
      keyPairName?: string(name='KeyPairName'),
    }
  ](name='KeyPair')
  }(name='KeyPairs'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListKeyPairsResponse = {
  headers: map[string]string(name='headers'),
  body: ListKeyPairsResponseBody(name='body'),
}

async function listKeyPairs(request: ListKeyPairsRequest): ListKeyPairsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListKeyPairs', 'POST', '/', 'json', false, 'json', request);
}

model ListRegionsRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
}

model ListRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
    }
  ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId'),
}

model ListRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListRegionsResponseBody(name='body'),
}

async function listRegions(request: ListRegionsRequest): ListRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRegions', 'POST', '/', 'json', false, 'json', request);
}

model ListTasksRequest {
  instanceId?: string(name='InstanceId', position='Query'),
  maxResults?: int32(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  taskId?: [ string ](name='TaskId', position='Query'),
  taskStatus?: string(name='TaskStatus', position='Query'),
  taskType?: string(name='TaskType', position='Query'),
}

model ListTasksResponseBody = {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
  tasks?: {
    task?: [ 
    {
      createTime?: string(name='CreateTime'),
      executeMsg?: string(name='ExecuteMsg'),
      finishedTime?: string(name='FinishedTime'),
      instanceId?: string(name='InstanceId'),
      progress?: string(name='Progress'),
      taskId?: string(name='TaskId'),
      taskStatus?: string(name='TaskStatus'),
      taskType?: string(name='TaskType'),
    }
  ](name='Task')
  }(name='Tasks'),
  totalCount?: int32(name='TotalCount'),
}

model ListTasksResponse = {
  headers: map[string]string(name='headers'),
  body: ListTasksResponseBody(name='body'),
}

async function listTasks(request: ListTasksRequest): ListTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTasks', 'POST', '/', 'json', false, 'json', request);
}

model ListZonesRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
}

model ListZonesResponseBody = {
  requestId?: string(name='RequestId'),
  zones?: {
    zone?: [ 
    {
      zoneId?: string(name='ZoneId'),
    }
  ](name='Zone')
  }(name='Zones'),
}

model ListZonesResponse = {
  headers: map[string]string(name='headers'),
  body: ListZonesResponseBody(name='body'),
}

async function listZones(request: ListZonesRequest): ListZonesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListZones', 'POST', '/', 'json', false, 'json', request);
}

model ModifyImageAttributeRequest {
  addAccount?: [ string ](name='AddAccount', position='Query'),
  description?: string(name='Description', position='Query'),
  imageId: string(name='ImageId', position='Query'),
  imageName?: string(name='ImageName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  removeAccount?: [ string ](name='RemoveAccount', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
}

model ModifyImageAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyImageAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyImageAttributeResponseBody(name='body'),
}

async function modifyImageAttribute(request: ModifyImageAttributeRequest): ModifyImageAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyImageAttribute', 'POST', '/', 'json', false, 'json', request);
}

model RebootInstancesRequest {
  force?: boolean(name='Force', position='Query'),
  instanceId: [ string ](name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
}

model RebootInstancesResponseBody = {
  requestId?: string(name='RequestId'),
}

model RebootInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: RebootInstancesResponseBody(name='body'),
}

async function rebootInstances(request: RebootInstancesRequest): RebootInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RebootInstances', 'POST', '/', 'json', false, 'json', request);
}

model RenewInstancesRequest {
  autoPay?: boolean(name='AutoPay', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  instanceId: [ string ](name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  period?: int32(name='Period', position='Query'),
  periodUnit?: string(name='PeriodUnit', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
}

model RenewInstancesResponseBody = {
  instanceIds?: {
    instanceId?: [ string ](name='InstanceId')
  }(name='InstanceIds'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model RenewInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: RenewInstancesResponseBody(name='body'),
}

async function renewInstances(request: RenewInstancesRequest): RenewInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenewInstances', 'POST', '/', 'json', false, 'json', request);
}

model ResetInstancesRequest {
  imageId?: string(name='ImageId', position='Query'),
  instanceId: [ string ](name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
}

model ResetInstancesResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResetInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ResetInstancesResponseBody(name='body'),
}

async function resetInstances(request: ResetInstancesRequest): ResetInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetInstances', 'POST', '/', 'json', false, 'json', request);
}

model RunCommandRequest {
  command: string(name='Command', position='Query'),
  instanceId?: [ string ](name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
}

model RunCommandResponseBody = {
  requestId?: string(name='RequestId'),
  taskId?: {
    taskId?: [ string ](name='TaskId')
  }(name='TaskId'),
}

model RunCommandResponse = {
  headers: map[string]string(name='headers'),
  body: RunCommandResponseBody(name='body'),
}

async function runCommand(request: RunCommandRequest): RunCommandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunCommand', 'POST', '/', 'json', false, 'json', request);
}

model RunInstancesRequest {
  amount?: int32(name='Amount', position='Query'),
  autoPay?: boolean(name='AutoPay', position='Query'),
  autoRenew?: boolean(name='AutoRenew', position='Query'),
  chargeType?: string(name='ChargeType', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  eipBandwidth?: int32(name='EipBandwidth', position='Query'),
  imageId: string(name='ImageId', position='Query'),
  instanceName?: string(name='InstanceName', position='Query'),
  instanceType: string(name='InstanceType', position='Query'),
  keyPairName?: string(name='KeyPairName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  period?: long(name='Period', position='Query'),
  periodUnit?: string(name='PeriodUnit', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resolution?: string(name='Resolution', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityGroupId: string(name='SecurityGroupId', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  vSwitchId: string(name='VSwitchId', position='Query'),
}

model RunInstancesResponseBody = {
  instanceIds?: {
    instanceId?: [ string ](name='InstanceId')
  }(name='InstanceIds'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
  tradePrice?: float(name='TradePrice'),
}

model RunInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: RunInstancesResponseBody(name='body'),
}

async function runInstances(request: RunInstancesRequest): RunInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunInstances', 'POST', '/', 'json', false, 'json', request);
}

model SendFileRequest {
  instanceId?: [ string ](name='InstanceId', position='Query'),
  ossBucket: string(name='OssBucket', position='Query'),
  ossObject: string(name='OssObject', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  path: string(name='Path', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
}

model SendFileResponseBody = {
  requestId?: string(name='RequestId'),
  taskId?: {
    taskId?: [ string ](name='TaskId')
  }(name='TaskId'),
}

model SendFileResponse = {
  headers: map[string]string(name='headers'),
  body: SendFileResponseBody(name='body'),
}

async function sendFile(request: SendFileRequest): SendFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendFile', 'POST', '/', 'json', false, 'json', request);
}

model StartInstancesRequest {
  instanceId: [ string ](name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
}

model StartInstancesResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: StartInstancesResponseBody(name='body'),
}

async function startInstances(request: StartInstancesRequest): StartInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartInstances', 'POST', '/', 'json', false, 'json', request);
}

model StopInstancesRequest {
  force?: boolean(name='Force', position='Query'),
  instanceId: [ string ](name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
}

model StopInstancesResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: StopInstancesResponseBody(name='body'),
}

async function stopInstances(request: StopInstancesRequest): StopInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopInstances', 'POST', '/', 'json', false, 'json', request);
}

model UninstallApplicationRequest {
  instanceId?: [ string ](name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  packageName: string(name='PackageName', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
}

model UninstallApplicationResponseBody = {
  requestId?: string(name='RequestId'),
  taskId?: {
    taskId?: [ string ](name='TaskId')
  }(name='TaskId'),
}

model UninstallApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: UninstallApplicationResponseBody(name='body'),
}

async function uninstallApplication(request: UninstallApplicationRequest): UninstallApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UninstallApplication', 'POST', '/', 'json', false, 'json', request);
}

model UpdateImageAttributeRequest {
  addAccount?: [ string ](name='AddAccount', position='Query'),
  description?: string(name='Description', position='Query'),
  imageId: string(name='ImageId', position='Query'),
  imageName?: string(name='ImageName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  removeAccount?: [ string ](name='RemoveAccount', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
}

model UpdateImageAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateImageAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateImageAttributeResponseBody(name='body'),
}

async function updateImageAttribute(request: UpdateImageAttributeRequest): UpdateImageAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateImageAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateInstanceAttributeRequest {
  description?: string(name='Description', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  instanceName?: string(name='InstanceName', position='Query'),
  keyPairName?: string(name='KeyPairName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resolution?: string(name='Resolution', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  vncPassword?: string(name='VncPassword', position='Query'),
}

model UpdateInstanceAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateInstanceAttributeResponseBody(name='body'),
}

async function updateInstanceAttribute(request: UpdateInstanceAttributeRequest): UpdateInstanceAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateInstanceAttribute', 'POST', '/', 'json', false, 'json', request);
}

