import Util;
import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'central';
  
  checkConfig(config);
  @endpoint = getEndpoint(@productId, @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model SetDeletionProtectionRequest = {
  stackId: string(name='StackId', description='StackId'),
  deletionProtection: string(name='DeletionProtection', description='DeletionProtection'),
  regionId: string(name='RegionId', description='RegionId'),
}

model SetDeletionProtectionResponse = {
  requestId: string(name='RequestId', description='RequestId'),
}

async function setDeletionProtectionWithOptions(request: SetDeletionProtectionRequest, runtime: Util.RuntimeOptions): SetDeletionProtectionResponse {
  Util.validateModel(request);
  return doRequest('SetDeletionProtection', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function setDeletionProtection(request: SetDeletionProtectionRequest): SetDeletionProtectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDeletionProtectionWithOptions(request, runtime);
}

model UpdateStackTemplateByResourcesRequest = {
  stackId: string(name='StackId', description='StackId'),
  dryRun?: boolean(name='DryRun', description='DryRun'),
  regionId: string(name='RegionId', description='RegionId'),
  clientToken?: string(name='ClientToken', description='ClientToken'),
  templateFormat?: string(name='TemplateFormat', description='TemplateFormat'),
  logicalResourceId?: [ string ](name='LogicalResourceId', description='LogicalResourceId'),
}

model UpdateStackTemplateByResourcesResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  oldTemplateBody: string(name='OldTemplateBody', description='OldTemplateBody'),
  newTemplateBody: string(name='NewTemplateBody', description='NewTemplateBody'),
}

async function updateStackTemplateByResourcesWithOptions(request: UpdateStackTemplateByResourcesRequest, runtime: Util.RuntimeOptions): UpdateStackTemplateByResourcesResponse {
  Util.validateModel(request);
  return doRequest('UpdateStackTemplateByResources', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function updateStackTemplateByResources(request: UpdateStackTemplateByResourcesRequest): UpdateStackTemplateByResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateStackTemplateByResourcesWithOptions(request, runtime);
}

model GetStackDriftDetectionStatusRequest = {
  regionId: string(name='RegionId', description='RegionId'),
  driftDetectionId: string(name='DriftDetectionId', description='DriftDetectionId'),
}

model GetStackDriftDetectionStatusResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  driftDetectionId: string(name='DriftDetectionId', description='DriftDetectionId'),
  driftDetectionTime: string(name='DriftDetectionTime', description='DriftDetectionTime'),
  driftDetectionStatus: string(name='DriftDetectionStatus', description='DriftDetectionStatus'),
  driftDetectionStatusReason: string(name='DriftDetectionStatusReason', description='DriftDetectionStatusReason'),
  stackDriftStatus: string(name='StackDriftStatus', description='StackDriftStatus'),
  stackId: string(name='StackId', description='StackId'),
  driftedStackResourceCount: integer(name='DriftedStackResourceCount', description='DriftedStackResourceCount'),
}

async function getStackDriftDetectionStatusWithOptions(request: GetStackDriftDetectionStatusRequest, runtime: Util.RuntimeOptions): GetStackDriftDetectionStatusResponse {
  Util.validateModel(request);
  return doRequest('GetStackDriftDetectionStatus', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function getStackDriftDetectionStatus(request: GetStackDriftDetectionStatusRequest): GetStackDriftDetectionStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getStackDriftDetectionStatusWithOptions(request, runtime);
}

model DetectStackGroupDriftRequest = {
  clientToken?: string(name='ClientToken', description='ClientToken'),
  regionId: string(name='RegionId', description='RegionId'),
  stackGroupName: string(name='StackGroupName', description='StackGroupName'),
  operationPreferences?: map[string]any(name='OperationPreferences', description='OperationPreferences'),
}

model DetectStackGroupDriftResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  operationId: string(name='OperationId', description='OperationId'),
}

async function detectStackGroupDriftWithOptions(request: DetectStackGroupDriftRequest, runtime: Util.RuntimeOptions): DetectStackGroupDriftResponse {
  Util.validateModel(request);
  return doRequest('DetectStackGroupDrift', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function detectStackGroupDrift(request: DetectStackGroupDriftRequest): DetectStackGroupDriftResponse {
  var runtime = new Util.RuntimeOptions{};
  return detectStackGroupDriftWithOptions(request, runtime);
}

model ListStackResourceDriftsRequest = {
  stackId: string(name='StackId', description='StackId'),
  regionId: string(name='RegionId', description='RegionId'),
  maxResults?: long(name='MaxResults', description='MaxResults'),
  resourceDriftStatus?: [ string ](name='ResourceDriftStatus', description='ResourceDriftStatus'),
  nextToken?: string(name='NextToken', description='NextToken'),
}

model ListStackResourceDriftsResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  nextToken: string(name='NextToken', description='NextToken'),
  resourceDrifts: [
    {
      driftDetectionTime: string(name='DriftDetectionTime', description='DriftDetectionTime'),
      resourceDriftStatus: string(name='ResourceDriftStatus', description='ResourceDriftStatus'),
      stackId: string(name='StackId', description='StackId'),
      resourceType: string(name='ResourceType', description='ResourceType'),
      physicalResourceId: string(name='PhysicalResourceId', description='PhysicalResourceId'),
      logicalResourceId: string(name='LogicalResourceId', description='LogicalResourceId'),
      actualProperties: string(name='ActualProperties', description='ActualProperties'),
      expectedProperties: string(name='ExpectedProperties', description='ExpectedProperties'),
      propertyDifferences: [
        {
          propertyPath: string(name='PropertyPath', description='PropertyPath'),
          actualValue: string(name='ActualValue', description='ActualValue'),
          expectedValue: string(name='ExpectedValue', description='ExpectedValue'),
          differenceType: string(name='DifferenceType', description='DifferenceType'),
        }
      ](name='PropertyDifferences', description='PropertyDifferences'),
    }
  ](name='ResourceDrifts', description='ResourceDrifts'),
}

async function listStackResourceDriftsWithOptions(request: ListStackResourceDriftsRequest, runtime: Util.RuntimeOptions): ListStackResourceDriftsResponse {
  Util.validateModel(request);
  return doRequest('ListStackResourceDrifts', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function listStackResourceDrifts(request: ListStackResourceDriftsRequest): ListStackResourceDriftsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listStackResourceDriftsWithOptions(request, runtime);
}

model DetectStackResourceDriftRequest = {
  stackId: string(name='StackId', description='StackId'),
  clientToken?: string(name='ClientToken', description='ClientToken'),
  regionId: string(name='RegionId', description='RegionId'),
  logicalResourceId: string(name='LogicalResourceId', description='LogicalResourceId'),
}

model DetectStackResourceDriftResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  driftDetectionTime: string(name='DriftDetectionTime', description='DriftDetectionTime'),
  resourceDriftStatus: string(name='ResourceDriftStatus', description='ResourceDriftStatus'),
  stackId: string(name='StackId', description='StackId'),
  resourceType: string(name='ResourceType', description='ResourceType'),
  physicalResourceId: string(name='PhysicalResourceId', description='PhysicalResourceId'),
  logicalResourceId: string(name='LogicalResourceId', description='LogicalResourceId'),
  actualProperties: string(name='ActualProperties', description='ActualProperties'),
  expectedProperties: string(name='ExpectedProperties', description='ExpectedProperties'),
  propertyDifferences: [
    {
      propertyPath: string(name='PropertyPath', description='PropertyPath'),
      actualValue: string(name='ActualValue', description='ActualValue'),
      expectedValue: string(name='ExpectedValue', description='ExpectedValue'),
      differenceType: string(name='DifferenceType', description='DifferenceType'),
    }
  ](name='PropertyDifferences', description='PropertyDifferences'),
}

async function detectStackResourceDriftWithOptions(request: DetectStackResourceDriftRequest, runtime: Util.RuntimeOptions): DetectStackResourceDriftResponse {
  Util.validateModel(request);
  return doRequest('DetectStackResourceDrift', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function detectStackResourceDrift(request: DetectStackResourceDriftRequest): DetectStackResourceDriftResponse {
  var runtime = new Util.RuntimeOptions{};
  return detectStackResourceDriftWithOptions(request, runtime);
}

model DetectStackDriftRequest = {
  stackId: string(name='StackId', description='StackId'),
  regionId: string(name='RegionId', description='RegionId'),
  logicalResourceId?: [ string ](name='LogicalResourceId', description='LogicalResourceId'),
  clientToken?: string(name='ClientToken', description='ClientToken'),
}

model DetectStackDriftResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  driftDetectionId: string(name='DriftDetectionId', description='DriftDetectionId'),
}

async function detectStackDriftWithOptions(request: DetectStackDriftRequest, runtime: Util.RuntimeOptions): DetectStackDriftResponse {
  Util.validateModel(request);
  return doRequest('DetectStackDrift', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function detectStackDrift(request: DetectStackDriftRequest): DetectStackDriftResponse {
  var runtime = new Util.RuntimeOptions{};
  return detectStackDriftWithOptions(request, runtime);
}

model UpdateStackInstancesRequest = {
  regionId: string(name='RegionId', description='RegionId'),
  stackGroupName: string(name='StackGroupName', description='StackGroupName'),
  parameterOverrides?: [
    {
      parameterValue: string(name='ParameterValue', description='ParameterValue'),
      parameterKey: string(name='ParameterKey', description='ParameterKey'),
    }
  ](name='ParameterOverrides', description='ParameterOverrides'),
  accountIds: map[string]any(name='AccountIds', description='AccountIds'),
  regionIds: map[string]any(name='RegionIds', description='RegionIds'),
  clientToken?: string(name='ClientToken', description='ClientToken'),
  operationDescription?: string(name='OperationDescription', description='OperationDescription'),
  operationPreferences?: map[string]any(name='OperationPreferences', description='OperationPreferences'),
}

model UpdateStackInstancesResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  operationId: string(name='OperationId', description='OperationId'),
}

async function updateStackInstancesWithOptions(request: UpdateStackInstancesRequest, runtime: Util.RuntimeOptions): UpdateStackInstancesResponse {
  Util.validateModel(request);
  return doRequest('UpdateStackInstances', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function updateStackInstances(request: UpdateStackInstancesRequest): UpdateStackInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateStackInstancesWithOptions(request, runtime);
}

model ListStackGroupOperationsRequest = {
  regionId: string(name='RegionId', description='RegionId'),
  stackGroupName: string(name='StackGroupName', description='StackGroupName'),
  pageSize?: long(name='PageSize', description='PageSize'),
  pageNumber?: long(name='PageNumber', description='PageNumber'),
}

model ListStackGroupOperationsResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  pageNumber: integer(name='PageNumber', description='PageNumber'),
  pageSize: integer(name='PageSize', description='PageSize'),
  totalCount: integer(name='TotalCount', description='TotalCount'),
  stackGroupOperations: [
    {
      stackGroupName: string(name='StackGroupName', description='StackGroupName'),
      stackGroupId: string(name='StackGroupId', description='StackGroupId'),
      operationId: string(name='OperationId', description='OperationId'),
      operationDescription: string(name='OperationDescription', description='OperationDescription'),
      createTime: string(name='CreateTime', description='CreateTime'),
      endTime: string(name='EndTime', description='EndTime'),
      action: string(name='Action', description='Action'),
      status: string(name='Status', description='Status'),
    }
  ](name='StackGroupOperations', description='StackGroupOperations'),
}

async function listStackGroupOperationsWithOptions(request: ListStackGroupOperationsRequest, runtime: Util.RuntimeOptions): ListStackGroupOperationsResponse {
  Util.validateModel(request);
  return doRequest('ListStackGroupOperations', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function listStackGroupOperations(request: ListStackGroupOperationsRequest): ListStackGroupOperationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listStackGroupOperationsWithOptions(request, runtime);
}

model GetStackGroupRequest = {
  regionId: string(name='RegionId', description='RegionId'),
  stackGroupName: string(name='StackGroupName', description='StackGroupName'),
}

model GetStackGroupResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  stackGroup: {
    stackGroupName: string(name='StackGroupName', description='StackGroupName'),
    stackGroupId: string(name='StackGroupId', description='StackGroupId'),
    status: string(name='Status', description='Status'),
    description: string(name='Description', description='Description'),
    templateBody: string(name='TemplateBody', description='TemplateBody'),
    executionRoleName: string(name='ExecutionRoleName', description='ExecutionRoleName'),
    administrationRoleName: string(name='AdministrationRoleName', description='AdministrationRoleName'),
    parameters: [
      {
        parameterKey: string(name='ParameterKey', description='ParameterKey'),
        parameterValue: string(name='ParameterValue', description='ParameterValue'),
      }
    ](name='Parameters', description='Parameters'),
    stackGroupDriftDetectionDetail: {
      driftDetectionTime: string(name='DriftDetectionTime', description='DriftDetectionTime'),
      stackGroupDriftStatus: string(name='StackGroupDriftStatus', description='StackGroupDriftStatus'),
      driftDetectionStatus: string(name='DriftDetectionStatus', description='DriftDetectionStatus'),
      driftedStackInstancesCount: integer(name='DriftedStackInstancesCount', description='DriftedStackInstancesCount'),
      failedStackInstancesCount: integer(name='FailedStackInstancesCount', description='FailedStackInstancesCount'),
      cancelledStackInstancesCount: integer(name='CancelledStackInstancesCount', description='CancelledStackInstancesCount'),
      inProgressStackInstancesCount: integer(name='InProgressStackInstancesCount', description='InProgressStackInstancesCount'),
      inSyncStackInstancesCount: integer(name='InSyncStackInstancesCount', description='InSyncStackInstancesCount'),
      totalStackInstancesCount: integer(name='TotalStackInstancesCount', description='TotalStackInstancesCount'),
    }(name='StackGroupDriftDetectionDetail', description='StackGroupDriftDetectionDetail'),
  }(name='StackGroup', description='StackGroup'),
}

async function getStackGroupWithOptions(request: GetStackGroupRequest, runtime: Util.RuntimeOptions): GetStackGroupResponse {
  Util.validateModel(request);
  return doRequest('GetStackGroup', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function getStackGroup(request: GetStackGroupRequest): GetStackGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return getStackGroupWithOptions(request, runtime);
}

model GetStackGroupOperationRequest = {
  regionId: string(name='RegionId', description='RegionId'),
  operationId: string(name='OperationId', description='OperationId'),
}

model GetStackGroupOperationResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  stackGroupOperation: {
    stackGroupName: string(name='StackGroupName', description='StackGroupName'),
    stackGroupId: string(name='StackGroupId', description='StackGroupId'),
    operationId: string(name='OperationId', description='OperationId'),
    operationDescription: string(name='OperationDescription', description='OperationDescription'),
    createTime: string(name='CreateTime', description='CreateTime'),
    endTime: string(name='EndTime', description='EndTime'),
    action: string(name='Action', description='Action'),
    status: string(name='Status', description='Status'),
    retainStacks: boolean(name='RetainStacks', description='RetainStacks'),
    administratorRoleName: string(name='AdministratorRoleName', description='AdministratorRoleName'),
    executionRoleName: string(name='ExecutionRoleName', description='ExecutionRoleName'),
    operationPreferences: {
      failureToleranceCount: integer(name='FailureToleranceCount', description='FailureToleranceCount'),
      failureTolerancePercentage: integer(name='FailureTolerancePercentage', description='FailureTolerancePercentage'),
      maxConcurrentCount: integer(name='MaxConcurrentCount', description='MaxConcurrentCount'),
      maxConcurrentPercentage: integer(name='MaxConcurrentPercentage', description='MaxConcurrentPercentage'),
      regionIdsOrder: [ string ](name='RegionIdsOrder', description='RegionIdsOrder'),
    }(name='OperationPreferences', description='OperationPreferences'),
    stackGroupDriftDetectionDetail: {
      driftDetectionTime: string(name='DriftDetectionTime', description='DriftDetectionTime'),
      stackGroupDriftStatus: string(name='StackGroupDriftStatus', description='StackGroupDriftStatus'),
      driftDetectionStatus: string(name='DriftDetectionStatus', description='DriftDetectionStatus'),
      driftedStackInstancesCount: integer(name='DriftedStackInstancesCount', description='DriftedStackInstancesCount'),
      failedStackInstancesCount: integer(name='FailedStackInstancesCount', description='FailedStackInstancesCount'),
      cancelledStackInstancesCount: integer(name='CancelledStackInstancesCount', description='CancelledStackInstancesCount'),
      inProgressStackInstancesCount: integer(name='InProgressStackInstancesCount', description='InProgressStackInstancesCount'),
      inSyncStackInstancesCount: integer(name='InSyncStackInstancesCount', description='InSyncStackInstancesCount'),
      totalStackInstancesCount: integer(name='TotalStackInstancesCount', description='TotalStackInstancesCount'),
    }(name='StackGroupDriftDetectionDetail', description='StackGroupDriftDetectionDetail'),
  }(name='StackGroupOperation', description='StackGroupOperation'),
}

async function getStackGroupOperationWithOptions(request: GetStackGroupOperationRequest, runtime: Util.RuntimeOptions): GetStackGroupOperationResponse {
  Util.validateModel(request);
  return doRequest('GetStackGroupOperation', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function getStackGroupOperation(request: GetStackGroupOperationRequest): GetStackGroupOperationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getStackGroupOperationWithOptions(request, runtime);
}

model ListStackGroupsRequest = {
  regionId: string(name='RegionId', description='RegionId'),
  status?: string(name='Status', description='Status'),
  pageSize?: long(name='PageSize', description='PageSize'),
  pageNumber?: long(name='PageNumber', description='PageNumber'),
}

model ListStackGroupsResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  pageNumber: integer(name='PageNumber', description='PageNumber'),
  pageSize: integer(name='PageSize', description='PageSize'),
  totalCount: integer(name='TotalCount', description='TotalCount'),
  stackGroups: [
    {
      stackGroupName: string(name='StackGroupName', description='StackGroupName'),
      stackGroupId: string(name='StackGroupId', description='StackGroupId'),
      status: string(name='Status', description='Status'),
      description: string(name='Description', description='Description'),
      driftDetectionTime: string(name='DriftDetectionTime', description='DriftDetectionTime'),
      stackGroupDriftStatus: string(name='StackGroupDriftStatus', description='StackGroupDriftStatus'),
    }
  ](name='StackGroups', description='StackGroups'),
}

async function listStackGroupsWithOptions(request: ListStackGroupsRequest, runtime: Util.RuntimeOptions): ListStackGroupsResponse {
  Util.validateModel(request);
  return doRequest('ListStackGroups', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function listStackGroups(request: ListStackGroupsRequest): ListStackGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listStackGroupsWithOptions(request, runtime);
}

model CreateStackInstancesRequest = {
  regionId: string(name='RegionId', description='RegionId'),
  stackGroupName: string(name='StackGroupName', description='StackGroupName'),
  parameterOverrides?: [
    {
      parameterValue: string(name='ParameterValue', description='ParameterValue'),
      parameterKey: string(name='ParameterKey', description='ParameterKey'),
    }
  ](name='ParameterOverrides', description='ParameterOverrides'),
  accountIds: map[string]any(name='AccountIds', description='AccountIds'),
  regionIds: map[string]any(name='RegionIds', description='RegionIds'),
  clientToken?: string(name='ClientToken', description='ClientToken'),
  operationDescription?: string(name='OperationDescription', description='OperationDescription'),
  operationPreferences?: map[string]any(name='OperationPreferences', description='OperationPreferences'),
}

model CreateStackInstancesResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  operationId: string(name='OperationId', description='OperationId'),
}

async function createStackInstancesWithOptions(request: CreateStackInstancesRequest, runtime: Util.RuntimeOptions): CreateStackInstancesResponse {
  Util.validateModel(request);
  return doRequest('CreateStackInstances', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function createStackInstances(request: CreateStackInstancesRequest): CreateStackInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return createStackInstancesWithOptions(request, runtime);
}

model CreateStackGroupRequest = {
  regionId: string(name='RegionId', description='RegionId'),
  stackGroupName: string(name='StackGroupName', description='StackGroupName'),
  description?: string(name='Description', description='Description'),
  parameters?: [
    {
      parameterValue: string(name='ParameterValue', description='ParameterValue'),
      parameterKey: string(name='ParameterKey', description='ParameterKey'),
    }
  ](name='Parameters', description='Parameters'),
  templateBody?: string(name='TemplateBody', description='TemplateBody'),
  templateURL?: string(name='TemplateURL', description='TemplateURL'),
  clientToken?: string(name='ClientToken', description='ClientToken'),
  administrationRoleName?: string(name='AdministrationRoleName', description='AdministrationRoleName'),
  executionRoleName?: string(name='ExecutionRoleName', description='ExecutionRoleName'),
}

model CreateStackGroupResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  stackGroupId: string(name='StackGroupId', description='StackGroupId'),
}

async function createStackGroupWithOptions(request: CreateStackGroupRequest, runtime: Util.RuntimeOptions): CreateStackGroupResponse {
  Util.validateModel(request);
  return doRequest('CreateStackGroup', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function createStackGroup(request: CreateStackGroupRequest): CreateStackGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createStackGroupWithOptions(request, runtime);
}

model GetStackInstanceRequest = {
  regionId: string(name='RegionId', description='RegionId'),
  stackGroupName: string(name='StackGroupName', description='StackGroupName'),
  stackInstanceAccountId: string(name='StackInstanceAccountId', description='StackInstanceAccountId'),
  stackInstanceRegionId: string(name='StackInstanceRegionId', description='StackInstanceRegionId'),
}

model GetStackInstanceResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  stackInstance: {
    stackGroupName: string(name='StackGroupName', description='StackGroupName'),
    stackGroupId: string(name='StackGroupId', description='StackGroupId'),
    stackId: string(name='StackId', description='StackId'),
    accountId: string(name='AccountId', description='AccountId'),
    regionId: string(name='RegionId', description='RegionId'),
    status: string(name='Status', description='Status'),
    statusReason: string(name='StatusReason', description='StatusReason'),
    stackDriftStatus: string(name='StackDriftStatus', description='StackDriftStatus'),
    driftDetectionTime: string(name='DriftDetectionTime', description='DriftDetectionTime'),
    parameterOverrides: [
      {
        parameterKey: string(name='ParameterKey', description='ParameterKey'),
        parameterValue: string(name='ParameterValue', description='ParameterValue'),
      }
    ](name='ParameterOverrides', description='ParameterOverrides'),
  }(name='StackInstance', description='StackInstance'),
}

async function getStackInstanceWithOptions(request: GetStackInstanceRequest, runtime: Util.RuntimeOptions): GetStackInstanceResponse {
  Util.validateModel(request);
  return doRequest('GetStackInstance', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function getStackInstance(request: GetStackInstanceRequest): GetStackInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getStackInstanceWithOptions(request, runtime);
}

model UpdateStackGroupRequest = {
  regionId: string(name='RegionId', description='RegionId'),
  stackGroupName: string(name='StackGroupName', description='StackGroupName'),
  description?: string(name='Description', description='Description'),
  parameters?: [
    {
      parameterValue: string(name='ParameterValue', description='ParameterValue'),
      parameterKey: string(name='ParameterKey', description='ParameterKey'),
    }
  ](name='Parameters', description='Parameters'),
  accountIds?: map[string]any(name='AccountIds', description='AccountIds'),
  regionIds?: map[string]any(name='RegionIds', description='RegionIds'),
  templateBody?: string(name='TemplateBody', description='TemplateBody'),
  templateURL?: string(name='TemplateURL', description='TemplateURL'),
  clientToken?: string(name='ClientToken', description='ClientToken'),
  operationDescription?: string(name='OperationDescription', description='OperationDescription'),
  operationPreferences?: map[string]any(name='OperationPreferences', description='OperationPreferences'),
  administrationRoleName?: string(name='AdministrationRoleName', description='AdministrationRoleName'),
  executionRoleName?: string(name='ExecutionRoleName', description='ExecutionRoleName'),
}

model UpdateStackGroupResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  operationId: string(name='OperationId', description='OperationId'),
}

async function updateStackGroupWithOptions(request: UpdateStackGroupRequest, runtime: Util.RuntimeOptions): UpdateStackGroupResponse {
  Util.validateModel(request);
  return doRequest('UpdateStackGroup', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function updateStackGroup(request: UpdateStackGroupRequest): UpdateStackGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateStackGroupWithOptions(request, runtime);
}

model ListStackInstancesRequest = {
  regionId: string(name='RegionId', description='RegionId'),
  stackGroupName: string(name='StackGroupName', description='StackGroupName'),
  stackInstanceAccountId?: string(name='StackInstanceAccountId', description='StackInstanceAccountId'),
  stackInstanceRegionId?: string(name='StackInstanceRegionId', description='StackInstanceRegionId'),
  pageSize?: long(name='PageSize', description='PageSize'),
  pageNumber?: long(name='PageNumber', description='PageNumber'),
}

model ListStackInstancesResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  pageNumber: integer(name='PageNumber', description='PageNumber'),
  pageSize: integer(name='PageSize', description='PageSize'),
  totalCount: integer(name='TotalCount', description='TotalCount'),
  stackInstances: [
    {
      stackGroupName: string(name='StackGroupName', description='StackGroupName'),
      stackGroupId: string(name='StackGroupId', description='StackGroupId'),
      stackId: string(name='StackId', description='StackId'),
      accountId: string(name='AccountId', description='AccountId'),
      regionId: string(name='RegionId', description='RegionId'),
      status: string(name='Status', description='Status'),
      statusReason: string(name='StatusReason', description='StatusReason'),
      stackDriftStatus: string(name='StackDriftStatus', description='StackDriftStatus'),
      driftDetectionTime: string(name='DriftDetectionTime', description='DriftDetectionTime'),
    }
  ](name='StackInstances', description='StackInstances'),
}

async function listStackInstancesWithOptions(request: ListStackInstancesRequest, runtime: Util.RuntimeOptions): ListStackInstancesResponse {
  Util.validateModel(request);
  return doRequest('ListStackInstances', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function listStackInstances(request: ListStackInstancesRequest): ListStackInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listStackInstancesWithOptions(request, runtime);
}

model ListStackGroupOperationResultsRequest = {
  regionId: string(name='RegionId', description='RegionId'),
  operationId: string(name='OperationId', description='OperationId'),
  pageSize?: long(name='PageSize', description='PageSize'),
  pageNumber?: long(name='PageNumber', description='PageNumber'),
}

model ListStackGroupOperationResultsResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  pageNumber: integer(name='PageNumber', description='PageNumber'),
  pageSize: integer(name='PageSize', description='PageSize'),
  totalCount: integer(name='TotalCount', description='TotalCount'),
  stackGroupOperationResults: [
    {
      accountId: string(name='AccountId', description='AccountId'),
      regionId: string(name='RegionId', description='RegionId'),
      status: string(name='Status', description='Status'),
      statusReason: string(name='StatusReason', description='StatusReason'),
    }
  ](name='StackGroupOperationResults', description='StackGroupOperationResults'),
}

async function listStackGroupOperationResultsWithOptions(request: ListStackGroupOperationResultsRequest, runtime: Util.RuntimeOptions): ListStackGroupOperationResultsResponse {
  Util.validateModel(request);
  return doRequest('ListStackGroupOperationResults', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function listStackGroupOperationResults(request: ListStackGroupOperationResultsRequest): ListStackGroupOperationResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listStackGroupOperationResultsWithOptions(request, runtime);
}

model StopStackGroupOperationRequest = {
  regionId: string(name='RegionId', description='RegionId'),
  operationId: string(name='OperationId', description='OperationId'),
}

model StopStackGroupOperationResponse = {
  requestId: string(name='RequestId', description='RequestId'),
}

async function stopStackGroupOperationWithOptions(request: StopStackGroupOperationRequest, runtime: Util.RuntimeOptions): StopStackGroupOperationResponse {
  Util.validateModel(request);
  return doRequest('StopStackGroupOperation', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function stopStackGroupOperation(request: StopStackGroupOperationRequest): StopStackGroupOperationResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopStackGroupOperationWithOptions(request, runtime);
}

model DeleteStackGroupRequest = {
  regionId: string(name='RegionId', description='RegionId'),
  stackGroupName: string(name='StackGroupName', description='StackGroupName'),
}

model DeleteStackGroupResponse = {
  requestId: string(name='RequestId', description='RequestId'),
}

async function deleteStackGroupWithOptions(request: DeleteStackGroupRequest, runtime: Util.RuntimeOptions): DeleteStackGroupResponse {
  Util.validateModel(request);
  return doRequest('DeleteStackGroup', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function deleteStackGroup(request: DeleteStackGroupRequest): DeleteStackGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteStackGroupWithOptions(request, runtime);
}

model DeleteStackInstancesRequest = {
  regionId: string(name='RegionId', description='RegionId'),
  stackGroupName: string(name='StackGroupName', description='StackGroupName'),
  accountIds: map[string]any(name='AccountIds', description='AccountIds'),
  regionIds: map[string]any(name='RegionIds', description='RegionIds'),
  retainStacks: boolean(name='RetainStacks', description='RetainStacks'),
  clientToken?: string(name='ClientToken', description='ClientToken'),
  operationDescription?: string(name='OperationDescription', description='OperationDescription'),
  operationPreferences?: map[string]any(name='OperationPreferences', description='OperationPreferences'),
}

model DeleteStackInstancesResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  operationId: string(name='OperationId', description='OperationId'),
}

async function deleteStackInstancesWithOptions(request: DeleteStackInstancesRequest, runtime: Util.RuntimeOptions): DeleteStackInstancesResponse {
  Util.validateModel(request);
  return doRequest('DeleteStackInstances', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function deleteStackInstances(request: DeleteStackInstancesRequest): DeleteStackInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteStackInstancesWithOptions(request, runtime);
}

model ListTagResourcesRequest = {
  regionId: string(name='RegionId', description='RegionId'),
  resourceId?: [ string ](name='ResourceId', description='ResourceIds'),
  resourceType: string(name='ResourceType', description='ResourceType'),
  tag?: [
    {
      key?: string(name='Key', description='TagKey'),
      value?: string(name='Value', description='TagValue'),
    }
  ](name='Tag', description='Tags'),
  nextToken?: string(name='NextToken', description='NextToken'),
}

model ListTagResourcesResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  nextToken: string(name='NextToken', description='NextToken'),
  tagResources: [
    {
      resourceId: string(name='ResourceId', description='ResourceId'),
      resourceType: string(name='ResourceType', description='ResourceType'),
      tagKey: string(name='TagKey', description='TagKey'),
      tagValue: string(name='TagValue', description='TagValue'),
    }
  ](name='TagResources', description='TagResources'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  return doRequest('ListTagResources', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model UntagResourcesRequest = {
  regionId: string(name='RegionId', description='RegionId'),
  resourceId: [ string ](name='ResourceId', description='ResourceIds'),
  resourceType: string(name='ResourceType', description='ResourceType'),
  tagKey?: [ string ](name='TagKey', description='TagKeys'),
  all?: boolean(name='All', description='All'),
}

model UntagResourcesResponse = {
  requestId: string(name='RequestId', description='RequestId'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  return doRequest('UntagResources', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model TagResourcesRequest = {
  regionId: string(name='RegionId', description='RegionId'),
  resourceId: [ string ](name='ResourceId', description='ResourceIds'),
  resourceType: string(name='ResourceType', description='ResourceType'),
  tag: [
    {
      key: string(name='Key', description='TagKey'),
      value: string(name='Value', description='TagValue'),
    }
  ](name='Tag', description='Tags'),
}

model TagResourcesResponse = {
  requestId: string(name='RequestId', description='RequestId'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  return doRequest('TagResources', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model DeleteTemplateRequest = {
  templateId: string(name='TemplateId', description='TemplateId'),
}

model DeleteTemplateResponse = {
  requestId: string(name='RequestId', description='RequestId'),
}

async function deleteTemplateWithOptions(request: DeleteTemplateRequest, runtime: Util.RuntimeOptions): DeleteTemplateResponse {
  Util.validateModel(request);
  return doRequest('DeleteTemplate', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function deleteTemplate(request: DeleteTemplateRequest): DeleteTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTemplateWithOptions(request, runtime);
}

model UpdateTemplateRequest = {
  templateURL?: string(name='TemplateURL', description='TemplateURL'),
  templateName?: string(name='TemplateName', description='TemplateName'),
  description?: string(name='Description', description='Description'),
  templateBody?: string(name='TemplateBody', description='TemplateBody'),
  templateId: string(name='TemplateId', description='TemplateId'),
}

model UpdateTemplateResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  templateId: string(name='TemplateId', description='TemplateId'),
}

async function updateTemplateWithOptions(request: UpdateTemplateRequest, runtime: Util.RuntimeOptions): UpdateTemplateResponse {
  Util.validateModel(request);
  return doRequest('UpdateTemplate', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function updateTemplate(request: UpdateTemplateRequest): UpdateTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTemplateWithOptions(request, runtime);
}

model ListTemplatesRequest = {
  pageNumber?: long(name='PageNumber', description='PageNumber'),
  pageSize?: long(name='PageSize', description='PageSize'),
  templateName?: string(name='TemplateName', description='TemplateName'),
  tag?: [
    {
      key?: string(name='Key', description='TagKey'),
      value?: string(name='Value', description='TagValue'),
    }
  ](name='Tag', description='Tags'),
}

model ListTemplatesResponse = {
  pageNumber: integer(name='PageNumber', description='PageNumber'),
  pageSize: integer(name='PageSize', description='PageSize'),
  requestId: string(name='RequestId', description='RequestId'),
  totalCount: integer(name='TotalCount', description='TotalCount'),
  templates: [
    {
      createTime: string(name='CreateTime', description='CreateTime'),
      description: string(name='Description', description='Description'),
      templateId: string(name='TemplateId', description='TemplateId'),
      templateName: string(name='TemplateName', description='TemplateName'),
      updateTime: string(name='UpdateTime', description='UpdateTime'),
    }
  ](name='Templates', description='Templates'),
}

async function listTemplatesWithOptions(request: ListTemplatesRequest, runtime: Util.RuntimeOptions): ListTemplatesResponse {
  Util.validateModel(request);
  return doRequest('ListTemplates', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function listTemplates(request: ListTemplatesRequest): ListTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTemplatesWithOptions(request, runtime);
}

model CreateTemplateRequest = {
  templateURL?: string(name='TemplateURL', description='TemplateURL'),
  description?: string(name='Description', description='Description'),
  templateBody?: string(name='TemplateBody', description='TemplateBody'),
  templateName: string(name='TemplateName', description='TemplateName'),
}

model CreateTemplateResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  templateId: string(name='TemplateId', description='TemplateId'),
}

async function createTemplateWithOptions(request: CreateTemplateRequest, runtime: Util.RuntimeOptions): CreateTemplateResponse {
  Util.validateModel(request);
  return doRequest('CreateTemplate', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function createTemplate(request: CreateTemplateRequest): CreateTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTemplateWithOptions(request, runtime);
}

model CreateStackRequest = {
  disableRollback?: boolean(name='DisableRollback', description='DisableRollback'),
  templateBody?: string(name='TemplateBody', description='TemplateBody'),
  parameters?: [
    {
      parameterValue: string(name='ParameterValue', description='ParameterValue'),
      parameterKey: string(name='ParameterKey', description='ParameterKey'),
    }
  ](name='Parameters', description='Parameters'),
  stackPolicyURL?: string(name='StackPolicyURL', description='StackPolicyURL'),
  timeoutInMinutes?: long(name='TimeoutInMinutes', description='TimeoutInMinutes'),
  stackPolicyBody?: string(name='StackPolicyBody', description='StackPolicyBody'),
  stackName: string(name='StackName', description='StackName'),
  regionId: string(name='RegionId', description='RegionId'),
  clientToken?: string(name='ClientToken', description='ClientToken'),
  templateURL?: string(name='TemplateURL', description='TemplateURL'),
  notificationURLs?: [ string ](name='NotificationURLs', description='NotificationURLs'),
  ramRoleName?: string(name='RamRoleName', description='RoleName'),
  deletionProtection?: string(name='DeletionProtection', description='DeletionProtection'),
}

model CreateStackResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  stackId: string(name='StackId', description='StackId'),
}

async function createStackWithOptions(request: CreateStackRequest, runtime: Util.RuntimeOptions): CreateStackResponse {
  Util.validateModel(request);
  return doRequest('CreateStack', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function createStack(request: CreateStackRequest): CreateStackResponse {
  var runtime = new Util.RuntimeOptions{};
  return createStackWithOptions(request, runtime);
}

model GetStackRequest = {
  stackId: string(name='StackId', description='StackId'),
  regionId: string(name='RegionId', description='RegionId'),
  clientToken?: string(name='ClientToken', description='ClientToken'),
}

model GetStackResponse = {
  createTime: string(name='CreateTime', description='CreateTime'),
  description: string(name='Description', description='Description'),
  disableRollback: boolean(name='DisableRollback', description='DisableRollback'),
  regionId: string(name='RegionId', description='RegionId'),
  requestId: string(name='RequestId', description='RequestId'),
  stackId: string(name='StackId', description='StackId'),
  stackName: string(name='StackName', description='StackName'),
  status: string(name='Status', description='Status'),
  statusReason: string(name='StatusReason', description='StatusReason'),
  templateDescription: string(name='TemplateDescription', description='TemplateDescription'),
  timeoutInMinutes: integer(name='TimeoutInMinutes', description='TimeoutInMinutes'),
  updateTime: string(name='UpdateTime', description='UpdateTime'),
  parentStackId: string(name='ParentStackId', description='ParentStackId'),
  stackDriftStatus: string(name='StackDriftStatus', description='StackDriftStatus'),
  driftDetectionTime: string(name='DriftDetectionTime', description='DriftDetectionTime'),
  ramRoleName: string(name='RamRoleName', description='RoleName'),
  deletionProtection: string(name='DeletionProtection', description='DeletionProtection'),
  rootStackId: string(name='RootStackId', description='RootStackId'),
  parameters: [
    {
      parameterKey: string(name='ParameterKey', description='ParameterKey'),
      parameterValue: string(name='ParameterValue', description='ParameterValue'),
    }
  ](name='Parameters', description='Parameters'),
  outputs: [ map[string]any ] (name='Outputs', description='Outputs'),
  notificationURLs: [ string ] (name='NotificationURLs', description='NotificationURLs'),
}

async function getStackWithOptions(request: GetStackRequest, runtime: Util.RuntimeOptions): GetStackResponse {
  Util.validateModel(request);
  return doRequest('GetStack', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function getStack(request: GetStackRequest): GetStackResponse {
  var runtime = new Util.RuntimeOptions{};
  return getStackWithOptions(request, runtime);
}

model DeleteStackRequest = {
  stackId: string(name='StackId', description='StackId'),
  retainAllResources?: boolean(name='RetainAllResources', description='RetainAllResources'),
  regionId: string(name='RegionId', description='RegionId'),
  retainResources?: [ string ](name='RetainResources', description='RetainResources'),
  ramRoleName?: string(name='RamRoleName', description='RoleName'),
}

model DeleteStackResponse = {
  requestId: string(name='RequestId', description='RequestId'),
}

async function deleteStackWithOptions(request: DeleteStackRequest, runtime: Util.RuntimeOptions): DeleteStackResponse {
  Util.validateModel(request);
  return doRequest('DeleteStack', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function deleteStack(request: DeleteStackRequest): DeleteStackResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteStackWithOptions(request, runtime);
}

model UpdateStackRequest = {
  stackId: string(name='StackId', description='StackId'),
  clientToken?: string(name='ClientToken', description='ClientToken'),
  stackPolicyDuringUpdateBody?: string(name='StackPolicyDuringUpdateBody', description='StackPolicyDuringUpdateBody'),
  timeoutInMinutes?: long(name='TimeoutInMinutes', description='TimeoutInMinutes'),
  templateBody?: string(name='TemplateBody', description='TemplateBody'),
  parameters?: [
    {
      parameterValue: string(name='ParameterValue', description='ParameterValue'),
      parameterKey: string(name='ParameterKey', description='ParameterKey'),
    }
  ](name='Parameters', description='Parameters'),
  stackPolicyURL?: string(name='StackPolicyURL', description='StackPolicyURL'),
  stackPolicyDuringUpdateURL?: string(name='StackPolicyDuringUpdateURL', description='StackPolicyDuringUpdateURL'),
  stackPolicyBody?: string(name='StackPolicyBody', description='StackPolicyBody'),
  usePreviousParameters?: boolean(name='UsePreviousParameters', description='UsePreviousParameters'),
  regionId: string(name='RegionId', description='RegionId'),
  disableRollback?: boolean(name='DisableRollback', description='DisableRollback'),
  templateURL?: string(name='TemplateURL', description='TemplateURL'),
  ramRoleName?: string(name='RamRoleName', description='RoleName'),
}

model UpdateStackResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  stackId: string(name='StackId', description='StackId'),
}

async function updateStackWithOptions(request: UpdateStackRequest, runtime: Util.RuntimeOptions): UpdateStackResponse {
  Util.validateModel(request);
  return doRequest('UpdateStack', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function updateStack(request: UpdateStackRequest): UpdateStackResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateStackWithOptions(request, runtime);
}

model ListStacksRequest = {
  status?: [ string ](name='Status', description='Status'),
  pageSize?: long(name='PageSize', description='PageSize'),
  parentStackId?: string(name='ParentStackId', description='ParentStackId'),
  regionId: string(name='RegionId', description='RegionId'),
  stackName?: [ string ](name='StackName', description='StackName'),
  pageNumber?: long(name='PageNumber', description='PageNumber'),
  showNestedStack?: boolean(name='ShowNestedStack', description='ShowNestedStack'),
  tag?: [
    {
      key?: string(name='Key', description='TagKey'),
      value?: string(name='Value', description='TagValue'),
    }
  ](name='Tag', description='Tags'),
  stackId?: string(name='StackId', description='StackId'),
}

model ListStacksResponse = {
  pageNumber: integer(name='PageNumber', description='PageNumber'),
  pageSize: integer(name='PageSize', description='PageSize'),
  requestId: string(name='RequestId', description='RequestId'),
  totalCount: integer(name='TotalCount', description='TotalCount'),
  stacks: [
    {
      createTime: string(name='CreateTime', description='CreateTime'),
      disableRollback: boolean(name='DisableRollback', description='DisableRollback'),
      regionId: string(name='RegionId', description='RegionId'),
      stackId: string(name='StackId', description='StackId'),
      stackName: string(name='StackName', description='StackName'),
      status: string(name='Status', description='Status'),
      statusReason: string(name='StatusReason', description='StatusReason'),
      timeoutInMinutes: integer(name='TimeoutInMinutes', description='TimeoutInMinutes'),
      parentStackId: string(name='ParentStackId', description='ParentStackId'),
      updateTime: string(name='UpdateTime', description='UpdateTime'),
      stackDriftStatus: string(name='StackDriftStatus', description='StackDriftStatus'),
      driftDetectionTime: string(name='DriftDetectionTime', description='DriftDetectionTime'),
    }
  ](name='Stacks', description='Stacks'),
}

async function listStacksWithOptions(request: ListStacksRequest, runtime: Util.RuntimeOptions): ListStacksResponse {
  Util.validateModel(request);
  return doRequest('ListStacks', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function listStacks(request: ListStacksRequest): ListStacksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listStacksWithOptions(request, runtime);
}

model PreviewStackRequest = {
  disableRollback?: boolean(name='DisableRollback', description='DisableRollback'),
  timeoutInMinutes?: long(name='TimeoutInMinutes', description='TimeoutInMinutes'),
  parameters?: [
    {
      parameterValue: string(name='ParameterValue', description='ParameterValue'),
      parameterKey: string(name='ParameterKey', description='ParameterKey'),
    }
  ](name='Parameters', description='Parameters'),
  templateBody?: string(name='TemplateBody', description='TemplateBody'),
  stackPolicyURL?: string(name='StackPolicyURL', description='StackPolicyURL'),
  regionId: string(name='RegionId', description='RegionId'),
  stackPolicyBody?: string(name='StackPolicyBody', description='StackPolicyBody'),
  stackName: string(name='StackName', description='StackName'),
  clientToken?: string(name='ClientToken', description='ClientToken'),
  templateURL?: string(name='TemplateURL', description='TemplateURL'),
}

model PreviewStackResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  stack: {
    description: string(name='Description', description='Description'),
    disableRollback: boolean(name='DisableRollback', description='DisableRollback'),
    regionId: string(name='RegionId', description='RegionId'),
    stackName: string(name='StackName', description='StackName'),
    stackPolicyBody: map[string]any(name='StackPolicyBody', description='StackPolicyBody'),
    templateDescription: string(name='TemplateDescription', description='TemplateDescription'),
    timeoutInMinutes: integer(name='TimeoutInMinutes', description='TimeoutInMinutes'),
    parameters: [
      {
        parameterKey: string(name='ParameterKey', description='ParameterKey'),
        parameterValue: string(name='ParameterValue', description='ParameterValue'),
      }
    ](name='Parameters', description='Parameters'),
    resources: [
      {
        description: string(name='Description', description='Description'),
        logicalResourceId: string(name='LogicalResourceId', description='LogicalResourceId'),
        properties: map[string]any(name='Properties', description='Properties'),
        resourceType: string(name='ResourceType', description='ResourceType'),
        stack: map[string]any(name='Stack', description='Stack'),
        requiredBy: [ string ](name='RequiredBy', description='RequiredBy'),
      }
    ](name='Resources', description='Resources'),
  }(name='Stack', description='Stack'),
}

async function previewStackWithOptions(request: PreviewStackRequest, runtime: Util.RuntimeOptions): PreviewStackResponse {
  Util.validateModel(request);
  return doRequest('PreviewStack', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function previewStack(request: PreviewStackRequest): PreviewStackResponse {
  var runtime = new Util.RuntimeOptions{};
  return previewStackWithOptions(request, runtime);
}

model GetTemplateEstimateCostRequest = {
  templateURL?: string(name='TemplateURL', description='TemplateURL'),
  regionId: string(name='RegionId', description='RegionId'),
  parameters?: [
    {
      parameterValue: string(name='ParameterValue', description='ParameterValue'),
      parameterKey: string(name='ParameterKey', description='ParameterKey'),
    }
  ](name='Parameters', description='Parameters'),
  templateBody?: string(name='TemplateBody', description='TemplateBody'),
  clientToken?: string(name='ClientToken', description='ClientToken'),
}

model GetTemplateEstimateCostResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  resources: map[string]any(name='Resources', description='Resources'),
}

async function getTemplateEstimateCostWithOptions(request: GetTemplateEstimateCostRequest, runtime: Util.RuntimeOptions): GetTemplateEstimateCostResponse {
  Util.validateModel(request);
  return doRequest('GetTemplateEstimateCost', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function getTemplateEstimateCost(request: GetTemplateEstimateCostRequest): GetTemplateEstimateCostResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTemplateEstimateCostWithOptions(request, runtime);
}

model CancelUpdateStackRequest = {
  stackId: string(name='StackId', description='StackId'),
  regionId: string(name='RegionId', description='RegionId'),
  cancelType?: string(name='CancelType', description='CancelType'),
}

model CancelUpdateStackResponse = {
  requestId: string(name='RequestId', description='RequestId'),
}

async function cancelUpdateStackWithOptions(request: CancelUpdateStackRequest, runtime: Util.RuntimeOptions): CancelUpdateStackResponse {
  Util.validateModel(request);
  return doRequest('CancelUpdateStack', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function cancelUpdateStack(request: CancelUpdateStackRequest): CancelUpdateStackResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelUpdateStackWithOptions(request, runtime);
}

model ContinueCreateStackRequest = {
  stackId: string(name='StackId', description='StackId'),
  recreatingResources?: [ string ](name='RecreatingResources', description='RecreatingResources'),
  regionId: string(name='RegionId', description='RegionId'),
  ramRoleName?: string(name='RamRoleName', description='RoleName'),
  mode?: string(name='Mode', description='Mode'),
  templateBody?: string(name='TemplateBody', description='TemplateBody'),
  templateURL?: string(name='TemplateURL', description='TemplateURL'),
  parameters?: [
    {
      parameterKey: string(name='ParameterKey', description='ParameterKey'),
      parameterValue: string(name='ParameterValue', description='ParameterValue'),
    }
  ](name='Parameters', description='Parameters'),
  dryRun?: boolean(name='DryRun', description='DryRun'),
}

model ContinueCreateStackResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  stackId: string(name='StackId', description='StackId'),
}

async function continueCreateStackWithOptions(request: ContinueCreateStackRequest, runtime: Util.RuntimeOptions): ContinueCreateStackResponse {
  Util.validateModel(request);
  return doRequest('ContinueCreateStack', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function continueCreateStack(request: ContinueCreateStackRequest): ContinueCreateStackResponse {
  var runtime = new Util.RuntimeOptions{};
  return continueCreateStackWithOptions(request, runtime);
}

model SetStackPolicyRequest = {
  stackId: string(name='StackId', description='StackId'),
  regionId: string(name='RegionId', description='RegionId'),
  stackPolicyBody?: string(name='StackPolicyBody', description='StackPolicyBody'),
  stackPolicyURL?: string(name='StackPolicyURL', description='StackPolicyURL'),
}

model SetStackPolicyResponse = {
  requestId: string(name='RequestId', description='RequestId'),
}

async function setStackPolicyWithOptions(request: SetStackPolicyRequest, runtime: Util.RuntimeOptions): SetStackPolicyResponse {
  Util.validateModel(request);
  return doRequest('SetStackPolicy', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function setStackPolicy(request: SetStackPolicyRequest): SetStackPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return setStackPolicyWithOptions(request, runtime);
}

model GetStackPolicyRequest = {
  stackId: string(name='StackId', description='StackId'),
  regionId: string(name='RegionId', description='RegionId'),
}

model GetStackPolicyResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  stackPolicyBody: map[string]any(name='StackPolicyBody', description='StackPolicyBody'),
}

async function getStackPolicyWithOptions(request: GetStackPolicyRequest, runtime: Util.RuntimeOptions): GetStackPolicyResponse {
  Util.validateModel(request);
  return doRequest('GetStackPolicy', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function getStackPolicy(request: GetStackPolicyRequest): GetStackPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return getStackPolicyWithOptions(request, runtime);
}

model ValidateTemplateRequest = {
  templateURL?: string(name='TemplateURL', description='TemplateURL'),
  regionId?: string(name='RegionId', description='RegionId'),
  templateBody?: string(name='TemplateBody', description='TemplateBody'),
}

model ValidateTemplateResponse = {
  description: string(name='Description', description='Description'),
  requestId: string(name='RequestId', description='RequestId'),
  parameters: [ map[string]any ] (name='Parameters', description='Parameters'),
}

async function validateTemplateWithOptions(request: ValidateTemplateRequest, runtime: Util.RuntimeOptions): ValidateTemplateResponse {
  Util.validateModel(request);
  return doRequest('ValidateTemplate', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function validateTemplate(request: ValidateTemplateRequest): ValidateTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return validateTemplateWithOptions(request, runtime);
}

model GetTemplateRequest = {
  stackId?: string(name='StackId', description='StackId'),
  regionId?: string(name='RegionId', description='RegionId'),
  changeSetId?: string(name='ChangeSetId', description='ChangeSetId'),
  templateId?: string(name='TemplateId', description='TemplateId'),
}

model GetTemplateResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  templateBody: string(name='TemplateBody', description='TemplateBody'),
}

async function getTemplateWithOptions(request: GetTemplateRequest, runtime: Util.RuntimeOptions): GetTemplateResponse {
  Util.validateModel(request);
  return doRequest('GetTemplate', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function getTemplate(request: GetTemplateRequest): GetTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTemplateWithOptions(request, runtime);
}

model GetChangeSetRequest = {
  showTemplate?: boolean(name='ShowTemplate', description='ShowTemplate'),
  regionId: string(name='RegionId', description='RegionId'),
  changeSetId: string(name='ChangeSetId', description='ChangeSetId'),
}

model GetChangeSetResponse = {
  changeSetId: string(name='ChangeSetId', description='ChangeSetId'),
  changeSetName: string(name='ChangeSetName', description='ChangeSetName'),
  changeSetType: string(name='ChangeSetType', description='ChangeSetType'),
  createTime: string(name='CreateTime', description='CreateTime'),
  description: string(name='Description', description='Description'),
  disableRollback: boolean(name='DisableRollback', description='DisableRollback'),
  executionStatus: string(name='ExecutionStatus', description='ExecutionStatus'),
  regionId: string(name='RegionId', description='RegionId'),
  requestId: string(name='RequestId', description='RequestId'),
  stackId: string(name='StackId', description='StackId'),
  stackName: string(name='StackName', description='StackName'),
  status: string(name='Status', description='Status'),
  templateBody: string(name='TemplateBody', description='TemplateBody'),
  timeoutInMinutes: integer(name='TimeoutInMinutes', description='TimeoutInMinutes'),
  parameters: [
    {
      parameterKey: string(name='ParameterKey', description='ParameterKey'),
      parameterValue: string(name='ParameterValue', description='ParameterValue'),
    }
  ](name='Parameters', description='Parameters'),
  changes: [ map[string]any ] (name='Changes', description='Changes'),
}

async function getChangeSetWithOptions(request: GetChangeSetRequest, runtime: Util.RuntimeOptions): GetChangeSetResponse {
  Util.validateModel(request);
  return doRequest('GetChangeSet', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function getChangeSet(request: GetChangeSetRequest): GetChangeSetResponse {
  var runtime = new Util.RuntimeOptions{};
  return getChangeSetWithOptions(request, runtime);
}

model ListChangeSetsRequest = {
  stackId: string(name='StackId', description='StackId'),
  status?: [ string ](name='Status', description='Status'),
  changeSetName?: [ string ](name='ChangeSetName', description='ChangeSetName'),
  pageSize?: long(name='PageSize', description='PageSize'),
  regionId: string(name='RegionId', description='RegionId'),
  pageNumber?: long(name='PageNumber', description='PageNumber'),
  executionStatus?: [ string ](name='ExecutionStatus', description='ExecutionStatus'),
  changeSetId?: string(name='ChangeSetId', description='ChangeSetId'),
}

model ListChangeSetsResponse = {
  pageNumber: integer(name='PageNumber', description='PageNumber'),
  pageSize: integer(name='PageSize', description='PageSize'),
  requestId: string(name='RequestId', description='RequestId'),
  totalCount: integer(name='TotalCount', description='TotalCount'),
  changeSets: [
    {
      changeSetId: string(name='ChangeSetId', description='ChangeSetId'),
      changeSetName: string(name='ChangeSetName', description='ChangeSetName'),
      changeSetType: string(name='ChangeSetType', description='ChangeSetType'),
      createTime: string(name='CreateTime', description='CreateTime'),
      description: string(name='Description', description='Description'),
      executionStatus: string(name='ExecutionStatus', description='ExecutionStatus'),
      regionId: string(name='RegionId', description='RegionId'),
      stackId: string(name='StackId', description='StackId'),
      stackName: string(name='StackName', description='StackName'),
      status: string(name='Status', description='Status'),
    }
  ](name='ChangeSets', description='ChangeSets'),
}

async function listChangeSetsWithOptions(request: ListChangeSetsRequest, runtime: Util.RuntimeOptions): ListChangeSetsResponse {
  Util.validateModel(request);
  return doRequest('ListChangeSets', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function listChangeSets(request: ListChangeSetsRequest): ListChangeSetsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listChangeSetsWithOptions(request, runtime);
}

model ExecuteChangeSetRequest = {
  regionId: string(name='RegionId', description='RegionId'),
  changeSetId: string(name='ChangeSetId', description='ChangeSetId'),
}

model ExecuteChangeSetResponse = {
  requestId: string(name='RequestId', description='RequestId'),
}

async function executeChangeSetWithOptions(request: ExecuteChangeSetRequest, runtime: Util.RuntimeOptions): ExecuteChangeSetResponse {
  Util.validateModel(request);
  return doRequest('ExecuteChangeSet', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function executeChangeSet(request: ExecuteChangeSetRequest): ExecuteChangeSetResponse {
  var runtime = new Util.RuntimeOptions{};
  return executeChangeSetWithOptions(request, runtime);
}

model DeleteChangeSetRequest = {
  regionId: string(name='RegionId', description='RegionId'),
  changeSetId: string(name='ChangeSetId', description='ChangeSetId'),
}

model DeleteChangeSetResponse = {
  requestId: string(name='RequestId', description='RequestId'),
}

async function deleteChangeSetWithOptions(request: DeleteChangeSetRequest, runtime: Util.RuntimeOptions): DeleteChangeSetResponse {
  Util.validateModel(request);
  return doRequest('DeleteChangeSet', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function deleteChangeSet(request: DeleteChangeSetRequest): DeleteChangeSetResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteChangeSetWithOptions(request, runtime);
}

model ListStackEventsRequest = {
  stackId: string(name='StackId', description='StackId'),
  status?: [ string ](name='Status', description='Status'),
  pageSize?: long(name='PageSize', description='PageSize'),
  resourceType?: [ string ](name='ResourceType', description='ResourceType'),
  regionId: string(name='RegionId', description='RegionId'),
  pageNumber?: long(name='PageNumber', description='PageNumber'),
  logicalResourceId?: [ string ](name='LogicalResourceId', description='LogicalResourceId'),
}

model ListStackEventsResponse = {
  pageNumber: integer(name='PageNumber', description='PageNumber'),
  pageSize: integer(name='PageSize', description='PageSize'),
  requestId: string(name='RequestId', description='RequestId'),
  totalCount: integer(name='TotalCount', description='TotalCount'),
  events: [
    {
      createTime: string(name='CreateTime', description='CreateTime'),
      eventId: string(name='EventId', description='EventId'),
      logicalResourceId: string(name='LogicalResourceId', description='LogicalResourceId'),
      physicalResourceId: string(name='PhysicalResourceId', description='PhysicalResourceId'),
      resourceType: string(name='ResourceType', description='ResourceType'),
      stackId: string(name='StackId', description='StackId'),
      stackName: string(name='StackName', description='StackName'),
      status: string(name='Status', description='Status'),
      statusReason: string(name='StatusReason', description='StatusReason'),
    }
  ](name='Events', description='Events'),
}

async function listStackEventsWithOptions(request: ListStackEventsRequest, runtime: Util.RuntimeOptions): ListStackEventsResponse {
  Util.validateModel(request);
  return doRequest('ListStackEvents', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function listStackEvents(request: ListStackEventsRequest): ListStackEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listStackEventsWithOptions(request, runtime);
}

model ListStackResourcesRequest = {
  stackId: string(name='StackId', description='StackId'),
  regionId: string(name='RegionId', description='RegionId'),
}

model ListStackResourcesResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  resources: [
    {
      createTime: string(name='CreateTime', description='CreateTime'),
      logicalResourceId: string(name='LogicalResourceId', description='LogicalResourceId'),
      physicalResourceId: string(name='PhysicalResourceId', description='PhysicalResourceId'),
      resourceType: string(name='ResourceType', description='ResourceType'),
      stackId: string(name='StackId', description='StackId'),
      stackName: string(name='StackName', description='StackName'),
      status: string(name='Status', description='Status'),
      statusReason: string(name='StatusReason', description='StatusReason'),
      updateTime: string(name='UpdateTime', description='UpdateTime'),
      resourceDriftStatus: string(name='ResourceDriftStatus', description='ResourceDriftStatus'),
      driftDetectionTime: string(name='DriftDetectionTime', description='DriftDetectionTime'),
    }
  ](name='Resources', description='Resources'),
}

async function listStackResourcesWithOptions(request: ListStackResourcesRequest, runtime: Util.RuntimeOptions): ListStackResourcesResponse {
  Util.validateModel(request);
  return doRequest('ListStackResources', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function listStackResources(request: ListStackResourcesRequest): ListStackResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listStackResourcesWithOptions(request, runtime);
}

model GetStackResourceRequest = {
  stackId: string(name='StackId', description='StackId'),
  clientToken?: string(name='ClientToken', description='ClientToken'),
  regionId: string(name='RegionId', description='RegionId'),
  showResourceAttributes?: boolean(name='ShowResourceAttributes', description='ShowResourceAttributes'),
  logicalResourceId: string(name='LogicalResourceId', description='LogicalResourceId'),
}

model GetStackResourceResponse = {
  createTime: string(name='CreateTime', description='CreateTime'),
  description: string(name='Description', description='Description'),
  logicalResourceId: string(name='LogicalResourceId', description='LogicalResourceId'),
  metadata: map[string]any(name='Metadata', description='Metadata'),
  physicalResourceId: string(name='PhysicalResourceId', description='PhysicalResourceId'),
  requestId: string(name='RequestId', description='RequestId'),
  resourceType: string(name='ResourceType', description='ResourceType'),
  stackId: string(name='StackId', description='StackId'),
  stackName: string(name='StackName', description='StackName'),
  status: string(name='Status', description='Status'),
  statusReason: string(name='StatusReason', description='StatusReason'),
  updateTime: string(name='UpdateTime', description='UpdateTime'),
  resourceDriftStatus: string(name='ResourceDriftStatus', description='ResourceDriftStatus'),
  driftDetectionTime: string(name='DriftDetectionTime', description='DriftDetectionTime'),
  resourceAttributes: [ map[string]any ] (name='ResourceAttributes', description='ResourceAttributes'),
}

async function getStackResourceWithOptions(request: GetStackResourceRequest, runtime: Util.RuntimeOptions): GetStackResourceResponse {
  Util.validateModel(request);
  return doRequest('GetStackResource', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function getStackResource(request: GetStackResourceRequest): GetStackResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getStackResourceWithOptions(request, runtime);
}

model GetResourceTypeTemplateRequest = {
  resourceType: string(name='ResourceType', description='ResourceType'),
}

model GetResourceTypeTemplateResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  templateBody: map[string]any(name='TemplateBody', description='TemplateBody'),
}

async function getResourceTypeTemplateWithOptions(request: GetResourceTypeTemplateRequest, runtime: Util.RuntimeOptions): GetResourceTypeTemplateResponse {
  Util.validateModel(request);
  return doRequest('GetResourceTypeTemplate', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function getResourceTypeTemplate(request: GetResourceTypeTemplateRequest): GetResourceTypeTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getResourceTypeTemplateWithOptions(request, runtime);
}

model GetResourceTypeRequest = {
  resourceType: string(name='ResourceType', description='ResourceType'),
}

model GetResourceTypeResponse = {
  attributes: map[string]any(name='Attributes', description='Attributes'),
  properties: map[string]any(name='Properties', description='Properties'),
  requestId: string(name='RequestId', description='RequestId'),
  resourceType: string(name='ResourceType', description='ResourceType'),
  supportDriftDetection: boolean(name='SupportDriftDetection', description='SupportDriftDetection'),
}

async function getResourceTypeWithOptions(request: GetResourceTypeRequest, runtime: Util.RuntimeOptions): GetResourceTypeResponse {
  Util.validateModel(request);
  return doRequest('GetResourceType', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function getResourceType(request: GetResourceTypeRequest): GetResourceTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getResourceTypeWithOptions(request, runtime);
}

model ListResourceTypesRequest = {
}

model ListResourceTypesResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  resourceTypes: [ string ] (name='ResourceTypes', description='ResourceTypes'),
}

async function listResourceTypesWithOptions(request: ListResourceTypesRequest, runtime: Util.RuntimeOptions): ListResourceTypesResponse {
  Util.validateModel(request);
  return doRequest('ListResourceTypes', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function listResourceTypes(request: ListResourceTypesRequest): ListResourceTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listResourceTypesWithOptions(request, runtime);
}

model SignalResourceRequest = {
  stackId: string(name='StackId', description='StackId'),
  status: string(name='Status', description='Status'),
  regionId: string(name='RegionId', description='RegionId'),
  uniqueId: string(name='UniqueId', description='UniqueId'),
  clientToken?: string(name='ClientToken', description='ClientToken'),
  logicalResourceId: string(name='LogicalResourceId', description='LogicalResourceId'),
}

model SignalResourceResponse = {
  requestId: string(name='RequestId', description='RequestId'),
}

async function signalResourceWithOptions(request: SignalResourceRequest, runtime: Util.RuntimeOptions): SignalResourceResponse {
  Util.validateModel(request);
  return doRequest('SignalResource', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function signalResource(request: SignalResourceRequest): SignalResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return signalResourceWithOptions(request, runtime);
}

model DescribeRegionsRequest = {
  acceptLanguage?: string(name='AcceptLanguage', description='AcceptLanguage'),
}

model DescribeRegionsResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  regions: [
    {
      regionId: string(name='RegionId', description='RegionId'),
      localName: string(name='LocalName', description='LocalName'),
      regionEndpoint: string(name='RegionEndpoint', description='RegionEndpoint'),
    }
  ](name='Regions', description='Regions'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  return doRequest('DescribeRegions', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model CreateChangeSetRequest = {
  stackId?: string(name='StackId', description='StackId'),
  parameters?: [
    {
      parameterValue: string(name='ParameterValue', description='ParameterValue'),
      parameterKey: string(name='ParameterKey', description='ParameterKey'),
    }
  ](name='Parameters', description='Parameters'),
  stackPolicyURL?: string(name='StackPolicyURL', description='StackPolicyURL'),
  stackPolicyBody?: string(name='StackPolicyBody', description='StackPolicyBody'),
  stackName?: string(name='StackName', description='StackName'),
  usePreviousParameters?: boolean(name='UsePreviousParameters', description='UsePreviousParameters'),
  changeSetType?: string(name='ChangeSetType', description='ChangeSetType'),
  description?: string(name='Description', description='Description'),
  regionId: string(name='RegionId', description='RegionId'),
  clientToken?: string(name='ClientToken', description='ClientToken'),
  templateURL?: string(name='TemplateURL', description='TemplateURL'),
  stackPolicyDuringUpdateURL?: string(name='StackPolicyDuringUpdateURL', description='StackPolicyDuringUpdateURL'),
  templateBody?: string(name='TemplateBody', description='TemplateBody'),
  timeoutInMinutes?: long(name='TimeoutInMinutes', description='TimeoutInMinutes'),
  disableRollback?: boolean(name='DisableRollback', description='DisableRollback'),
  changeSetName: string(name='ChangeSetName', description='ChangeSetName'),
  stackPolicyDuringUpdateBody?: string(name='StackPolicyDuringUpdateBody', description='StackPolicyDuringUpdateBody'),
  notificationURLs?: [ string ](name='NotificationURLs', description='NotificationURLs'),
  ramRoleName?: string(name='RamRoleName', description='RoleName'),
}

model CreateChangeSetResponse = {
  changeSetId: string(name='ChangeSetId', description='ChangeSetId'),
  requestId: string(name='RequestId', description='RequestId'),
  stackId: string(name='StackId', description='StackId'),
}

async function createChangeSetWithOptions(request: CreateChangeSetRequest, runtime: Util.RuntimeOptions): CreateChangeSetResponse {
  Util.validateModel(request);
  return doRequest('CreateChangeSet', 'HTTPS', 'POST', '2019-09-10', 'AK', null, request, runtime);
}

async function createChangeSet(request: CreateChangeSetRequest): CreateChangeSetResponse {
  var runtime = new Util.RuntimeOptions{};
  return createChangeSetWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
