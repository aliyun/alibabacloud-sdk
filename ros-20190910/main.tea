/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  
  checkConfig(config);
  @endpoint = getEndpoint('ros', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model CancelUpdateStackRequest {
  stackId?: string(name='StackId'),
  regionId?: string(name='RegionId'),
  cancelType?: string(name='CancelType'),
}

model CancelUpdateStackResponseBody = {
  requestId?: string(name='RequestId'),
}

model CancelUpdateStackResponse = {
  headers: map[string]string(name='headers'),
  body: CancelUpdateStackResponseBody(name='body'),
}

async function cancelUpdateStackWithOptions(request: CancelUpdateStackRequest, runtime: Util.RuntimeOptions): CancelUpdateStackResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CancelUpdateStack', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function cancelUpdateStack(request: CancelUpdateStackRequest): CancelUpdateStackResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelUpdateStackWithOptions(request, runtime);
}

model ContinueCreateStackRequest {
  stackId?: string(name='StackId'),
  regionId?: string(name='RegionId'),
  ramRoleName?: string(name='RamRoleName'),
  mode?: string(name='Mode'),
  templateBody?: string(name='TemplateBody'),
  templateURL?: string(name='TemplateURL'),
  dryRun?: boolean(name='DryRun'),
  templateId?: string(name='TemplateId'),
  templateVersion?: string(name='TemplateVersion'),
  recreatingResources?: [ string ](name='RecreatingResources'),
  parameters?: [ 
    {
      parameterKey?: string(name='ParameterKey'),
      parameterValue?: string(name='ParameterValue'),
    }
  ](name='Parameters'),
}

model ContinueCreateStackResponseBody = {
  requestId?: string(name='RequestId'),
  stackId?: string(name='StackId'),
}

model ContinueCreateStackResponse = {
  headers: map[string]string(name='headers'),
  body: ContinueCreateStackResponseBody(name='body'),
}

async function continueCreateStackWithOptions(request: ContinueCreateStackRequest, runtime: Util.RuntimeOptions): ContinueCreateStackResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ContinueCreateStack', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function continueCreateStack(request: ContinueCreateStackRequest): ContinueCreateStackResponse {
  var runtime = new Util.RuntimeOptions{};
  return continueCreateStackWithOptions(request, runtime);
}

model CreateChangeSetRequest {
  stackId?: string(name='StackId'),
  stackPolicyURL?: string(name='StackPolicyURL'),
  stackPolicyBody?: string(name='StackPolicyBody'),
  stackName?: string(name='StackName'),
  usePreviousParameters?: boolean(name='UsePreviousParameters'),
  changeSetType?: string(name='ChangeSetType'),
  description?: string(name='Description'),
  regionId?: string(name='RegionId'),
  clientToken?: string(name='ClientToken'),
  templateURL?: string(name='TemplateURL'),
  stackPolicyDuringUpdateURL?: string(name='StackPolicyDuringUpdateURL'),
  templateBody?: string(name='TemplateBody'),
  timeoutInMinutes?: long(name='TimeoutInMinutes'),
  disableRollback?: boolean(name='DisableRollback'),
  changeSetName?: string(name='ChangeSetName'),
  stackPolicyDuringUpdateBody?: string(name='StackPolicyDuringUpdateBody'),
  ramRoleName?: string(name='RamRoleName'),
  replacementOption?: string(name='ReplacementOption'),
  templateId?: string(name='TemplateId'),
  templateVersion?: string(name='TemplateVersion'),
  parameters?: [ 
    {
      parameterKey?: string(name='ParameterKey'),
      parameterValue?: string(name='ParameterValue'),
    }
  ](name='Parameters'),
  notificationURLs?: [ string ](name='NotificationURLs'),
  resourcesToImport?: [ 
    {
      resourceIdentifier?: string(name='ResourceIdentifier'),
      logicalResourceId?: string(name='LogicalResourceId'),
      resourceType?: string(name='ResourceType'),
    }
  ](name='ResourcesToImport'),
}

model CreateChangeSetResponseBody = {
  changeSetId?: string(name='ChangeSetId'),
  requestId?: string(name='RequestId'),
  stackId?: string(name='StackId'),
}

model CreateChangeSetResponse = {
  headers: map[string]string(name='headers'),
  body: CreateChangeSetResponseBody(name='body'),
}

async function createChangeSetWithOptions(request: CreateChangeSetRequest, runtime: Util.RuntimeOptions): CreateChangeSetResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateChangeSet', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createChangeSet(request: CreateChangeSetRequest): CreateChangeSetResponse {
  var runtime = new Util.RuntimeOptions{};
  return createChangeSetWithOptions(request, runtime);
}

model CreateStackRequest {
  disableRollback?: boolean(name='DisableRollback'),
  templateBody?: string(name='TemplateBody'),
  stackPolicyURL?: string(name='StackPolicyURL'),
  timeoutInMinutes?: long(name='TimeoutInMinutes'),
  stackPolicyBody?: string(name='StackPolicyBody'),
  stackName?: string(name='StackName'),
  regionId?: string(name='RegionId'),
  clientToken?: string(name='ClientToken'),
  templateURL?: string(name='TemplateURL'),
  ramRoleName?: string(name='RamRoleName'),
  deletionProtection?: string(name='DeletionProtection'),
  createOption?: string(name='CreateOption'),
  templateId?: string(name='TemplateId'),
  templateVersion?: string(name='TemplateVersion'),
  parameters?: [ 
    {
      parameterKey?: string(name='ParameterKey'),
      parameterValue?: string(name='ParameterValue'),
    }
  ](name='Parameters'),
  notificationURLs?: [ string ](name='NotificationURLs'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model CreateStackResponseBody = {
  requestId?: string(name='RequestId'),
  stackId?: string(name='StackId'),
}

model CreateStackResponse = {
  headers: map[string]string(name='headers'),
  body: CreateStackResponseBody(name='body'),
}

async function createStackWithOptions(request: CreateStackRequest, runtime: Util.RuntimeOptions): CreateStackResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateStack', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createStack(request: CreateStackRequest): CreateStackResponse {
  var runtime = new Util.RuntimeOptions{};
  return createStackWithOptions(request, runtime);
}

model CreateStackGroupRequest {
  regionId?: string(name='RegionId'),
  stackGroupName?: string(name='StackGroupName'),
  description?: string(name='Description'),
  templateBody?: string(name='TemplateBody'),
  templateURL?: string(name='TemplateURL'),
  clientToken?: string(name='ClientToken'),
  administrationRoleName?: string(name='AdministrationRoleName'),
  executionRoleName?: string(name='ExecutionRoleName'),
  templateId?: string(name='TemplateId'),
  templateVersion?: string(name='TemplateVersion'),
  parameters?: [ 
    {
      parameterKey?: string(name='ParameterKey'),
      parameterValue?: string(name='ParameterValue'),
    }
  ](name='Parameters'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model CreateStackGroupResponseBody = {
  requestId?: string(name='RequestId'),
  stackGroupId?: string(name='StackGroupId'),
}

model CreateStackGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateStackGroupResponseBody(name='body'),
}

async function createStackGroupWithOptions(request: CreateStackGroupRequest, runtime: Util.RuntimeOptions): CreateStackGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateStackGroup', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createStackGroup(request: CreateStackGroupRequest): CreateStackGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createStackGroupWithOptions(request, runtime);
}

model CreateStackInstancesRequest {
  regionId?: string(name='RegionId'),
  stackGroupName?: string(name='StackGroupName'),
  accountIds?: map[string]any(name='AccountIds'),
  regionIds?: map[string]any(name='RegionIds'),
  clientToken?: string(name='ClientToken'),
  operationDescription?: string(name='OperationDescription'),
  operationPreferences?: map[string]any(name='OperationPreferences'),
  timeoutInMinutes?: long(name='TimeoutInMinutes'),
  disableRollback?: boolean(name='DisableRollback'),
  parameterOverrides?: [ 
    {
      parameterKey?: string(name='ParameterKey'),
      parameterValue?: string(name='ParameterValue'),
    }
  ](name='ParameterOverrides'),
}

model CreateStackInstancesShrinkRequest {
  regionId?: string(name='RegionId'),
  stackGroupName?: string(name='StackGroupName'),
  accountIdsShrink?: string(name='AccountIds'),
  regionIdsShrink?: string(name='RegionIds'),
  clientToken?: string(name='ClientToken'),
  operationDescription?: string(name='OperationDescription'),
  operationPreferencesShrink?: string(name='OperationPreferences'),
  timeoutInMinutes?: long(name='TimeoutInMinutes'),
  disableRollback?: boolean(name='DisableRollback'),
  parameterOverrides?: [ 
    {
      parameterKey?: string(name='ParameterKey'),
      parameterValue?: string(name='ParameterValue'),
    }
  ](name='ParameterOverrides'),
}

model CreateStackInstancesResponseBody = {
  requestId?: string(name='RequestId'),
  operationId?: string(name='OperationId'),
}

model CreateStackInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: CreateStackInstancesResponseBody(name='body'),
}

async function createStackInstancesWithOptions(tmpReq: CreateStackInstancesRequest, runtime: Util.RuntimeOptions): CreateStackInstancesResponse {
  Util.validateModel(tmpReq);
  var request = new CreateStackInstancesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.accountIds)) {
    request.accountIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.accountIds, 'AccountIds', 'json');
  }
  if (!Util.isUnset(tmpReq.regionIds)) {
    request.regionIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.regionIds, 'RegionIds', 'json');
  }
  if (!Util.isUnset(tmpReq.operationPreferences)) {
    request.operationPreferencesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.operationPreferences, 'OperationPreferences', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateStackInstances', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createStackInstances(request: CreateStackInstancesRequest): CreateStackInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return createStackInstancesWithOptions(request, runtime);
}

model CreateTemplateRequest {
  templateURL?: string(name='TemplateURL'),
  description?: string(name='Description'),
  templateBody?: string(name='TemplateBody'),
  templateName?: string(name='TemplateName'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model CreateTemplateResponseBody = {
  requestId?: string(name='RequestId'),
  templateId?: string(name='TemplateId'),
}

model CreateTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTemplateResponseBody(name='body'),
}

async function createTemplateWithOptions(request: CreateTemplateRequest, runtime: Util.RuntimeOptions): CreateTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateTemplate', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createTemplate(request: CreateTemplateRequest): CreateTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTemplateWithOptions(request, runtime);
}

model DeleteChangeSetRequest {
  regionId?: string(name='RegionId'),
  changeSetId?: string(name='ChangeSetId'),
}

model DeleteChangeSetResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteChangeSetResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteChangeSetResponseBody(name='body'),
}

async function deleteChangeSetWithOptions(request: DeleteChangeSetRequest, runtime: Util.RuntimeOptions): DeleteChangeSetResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteChangeSet', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteChangeSet(request: DeleteChangeSetRequest): DeleteChangeSetResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteChangeSetWithOptions(request, runtime);
}

model DeleteStackRequest {
  stackId?: string(name='StackId'),
  retainAllResources?: boolean(name='RetainAllResources'),
  regionId?: string(name='RegionId'),
  ramRoleName?: string(name='RamRoleName'),
  retainResources?: [ string ](name='RetainResources'),
}

model DeleteStackResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteStackResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteStackResponseBody(name='body'),
}

async function deleteStackWithOptions(request: DeleteStackRequest, runtime: Util.RuntimeOptions): DeleteStackResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteStack', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteStack(request: DeleteStackRequest): DeleteStackResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteStackWithOptions(request, runtime);
}

model DeleteStackGroupRequest {
  regionId?: string(name='RegionId'),
  stackGroupName?: string(name='StackGroupName'),
}

model DeleteStackGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteStackGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteStackGroupResponseBody(name='body'),
}

async function deleteStackGroupWithOptions(request: DeleteStackGroupRequest, runtime: Util.RuntimeOptions): DeleteStackGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteStackGroup', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteStackGroup(request: DeleteStackGroupRequest): DeleteStackGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteStackGroupWithOptions(request, runtime);
}

model DeleteStackInstancesRequest {
  regionId?: string(name='RegionId'),
  stackGroupName?: string(name='StackGroupName'),
  accountIds?: map[string]any(name='AccountIds'),
  regionIds?: map[string]any(name='RegionIds'),
  retainStacks?: boolean(name='RetainStacks'),
  clientToken?: string(name='ClientToken'),
  operationDescription?: string(name='OperationDescription'),
  operationPreferences?: map[string]any(name='OperationPreferences'),
}

model DeleteStackInstancesShrinkRequest {
  regionId?: string(name='RegionId'),
  stackGroupName?: string(name='StackGroupName'),
  accountIdsShrink?: string(name='AccountIds'),
  regionIdsShrink?: string(name='RegionIds'),
  retainStacks?: boolean(name='RetainStacks'),
  clientToken?: string(name='ClientToken'),
  operationDescription?: string(name='OperationDescription'),
  operationPreferencesShrink?: string(name='OperationPreferences'),
}

model DeleteStackInstancesResponseBody = {
  requestId?: string(name='RequestId'),
  operationId?: string(name='OperationId'),
}

model DeleteStackInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteStackInstancesResponseBody(name='body'),
}

async function deleteStackInstancesWithOptions(tmpReq: DeleteStackInstancesRequest, runtime: Util.RuntimeOptions): DeleteStackInstancesResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteStackInstancesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.accountIds)) {
    request.accountIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.accountIds, 'AccountIds', 'json');
  }
  if (!Util.isUnset(tmpReq.regionIds)) {
    request.regionIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.regionIds, 'RegionIds', 'json');
  }
  if (!Util.isUnset(tmpReq.operationPreferences)) {
    request.operationPreferencesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.operationPreferences, 'OperationPreferences', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteStackInstances', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteStackInstances(request: DeleteStackInstancesRequest): DeleteStackInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteStackInstancesWithOptions(request, runtime);
}

model DeleteTemplateRequest {
  templateId?: string(name='TemplateId'),
}

model DeleteTemplateResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTemplateResponseBody(name='body'),
}

async function deleteTemplateWithOptions(request: DeleteTemplateRequest, runtime: Util.RuntimeOptions): DeleteTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteTemplate', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteTemplate(request: DeleteTemplateRequest): DeleteTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTemplateWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage'),
}

model DescribeRegionsResponseBody = {
  requestId?: string(name='RequestId'),
  regions?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
    }
  ](name='Regions'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRegions', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DetectStackDriftRequest {
  stackId?: string(name='StackId'),
  regionId?: string(name='RegionId'),
  clientToken?: string(name='ClientToken'),
  logicalResourceId?: [ string ](name='LogicalResourceId'),
}

model DetectStackDriftResponseBody = {
  requestId?: string(name='RequestId'),
  driftDetectionId?: string(name='DriftDetectionId'),
}

model DetectStackDriftResponse = {
  headers: map[string]string(name='headers'),
  body: DetectStackDriftResponseBody(name='body'),
}

async function detectStackDriftWithOptions(request: DetectStackDriftRequest, runtime: Util.RuntimeOptions): DetectStackDriftResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DetectStackDrift', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function detectStackDrift(request: DetectStackDriftRequest): DetectStackDriftResponse {
  var runtime = new Util.RuntimeOptions{};
  return detectStackDriftWithOptions(request, runtime);
}

model DetectStackGroupDriftRequest {
  clientToken?: string(name='ClientToken'),
  regionId?: string(name='RegionId'),
  stackGroupName?: string(name='StackGroupName'),
  operationPreferences?: map[string]any(name='OperationPreferences'),
}

model DetectStackGroupDriftShrinkRequest {
  clientToken?: string(name='ClientToken'),
  regionId?: string(name='RegionId'),
  stackGroupName?: string(name='StackGroupName'),
  operationPreferencesShrink?: string(name='OperationPreferences'),
}

model DetectStackGroupDriftResponseBody = {
  requestId?: string(name='RequestId'),
  operationId?: string(name='OperationId'),
}

model DetectStackGroupDriftResponse = {
  headers: map[string]string(name='headers'),
  body: DetectStackGroupDriftResponseBody(name='body'),
}

async function detectStackGroupDriftWithOptions(tmpReq: DetectStackGroupDriftRequest, runtime: Util.RuntimeOptions): DetectStackGroupDriftResponse {
  Util.validateModel(tmpReq);
  var request = new DetectStackGroupDriftShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.operationPreferences)) {
    request.operationPreferencesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.operationPreferences, 'OperationPreferences', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DetectStackGroupDrift', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function detectStackGroupDrift(request: DetectStackGroupDriftRequest): DetectStackGroupDriftResponse {
  var runtime = new Util.RuntimeOptions{};
  return detectStackGroupDriftWithOptions(request, runtime);
}

model DetectStackResourceDriftRequest {
  stackId?: string(name='StackId'),
  clientToken?: string(name='ClientToken'),
  regionId?: string(name='RegionId'),
  logicalResourceId?: string(name='LogicalResourceId'),
}

model DetectStackResourceDriftResponseBody = {
  logicalResourceId?: string(name='LogicalResourceId'),
  resourceDriftStatus?: string(name='ResourceDriftStatus'),
  propertyDifferences?: [ 
    {
      actualValue?: string(name='ActualValue'),
      differenceType?: string(name='DifferenceType'),
      propertyPath?: string(name='PropertyPath'),
      expectedValue?: string(name='ExpectedValue'),
    }
  ](name='PropertyDifferences'),
  requestId?: string(name='RequestId'),
  physicalResourceId?: string(name='PhysicalResourceId'),
  expectedProperties?: string(name='ExpectedProperties'),
  driftDetectionTime?: string(name='DriftDetectionTime'),
  resourceType?: string(name='ResourceType'),
  actualProperties?: string(name='ActualProperties'),
  stackId?: string(name='StackId'),
}

model DetectStackResourceDriftResponse = {
  headers: map[string]string(name='headers'),
  body: DetectStackResourceDriftResponseBody(name='body'),
}

async function detectStackResourceDriftWithOptions(request: DetectStackResourceDriftRequest, runtime: Util.RuntimeOptions): DetectStackResourceDriftResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DetectStackResourceDrift', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function detectStackResourceDrift(request: DetectStackResourceDriftRequest): DetectStackResourceDriftResponse {
  var runtime = new Util.RuntimeOptions{};
  return detectStackResourceDriftWithOptions(request, runtime);
}

model ExecuteChangeSetRequest {
  regionId?: string(name='RegionId'),
  changeSetId?: string(name='ChangeSetId'),
  clientToken?: string(name='ClientToken'),
}

model ExecuteChangeSetResponseBody = {
  requestId?: string(name='RequestId'),
}

model ExecuteChangeSetResponse = {
  headers: map[string]string(name='headers'),
  body: ExecuteChangeSetResponseBody(name='body'),
}

async function executeChangeSetWithOptions(request: ExecuteChangeSetRequest, runtime: Util.RuntimeOptions): ExecuteChangeSetResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ExecuteChangeSet', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function executeChangeSet(request: ExecuteChangeSetRequest): ExecuteChangeSetResponse {
  var runtime = new Util.RuntimeOptions{};
  return executeChangeSetWithOptions(request, runtime);
}

model GenerateTemplatePolicyRequest {
  templateURL?: string(name='TemplateURL'),
  templateBody?: string(name='TemplateBody'),
  templateId?: string(name='TemplateId'),
  templateVersion?: string(name='TemplateVersion'),
}

model GenerateTemplatePolicyResponseBody = {
  policy?: {
    version?: string(name='Version'),
    statement?: [ 
      {
        effect?: string(name='Effect'),
        resource?: string(name='Resource'),
        action?: [ string ](name='Action'),
      }
    ](name='Statement'),
  }(name='Policy'),
  requestId?: string(name='RequestId'),
}

model GenerateTemplatePolicyResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateTemplatePolicyResponseBody(name='body'),
}

async function generateTemplatePolicyWithOptions(request: GenerateTemplatePolicyRequest, runtime: Util.RuntimeOptions): GenerateTemplatePolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GenerateTemplatePolicy', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function generateTemplatePolicy(request: GenerateTemplatePolicyRequest): GenerateTemplatePolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateTemplatePolicyWithOptions(request, runtime);
}

model GetChangeSetRequest {
  showTemplate?: boolean(name='ShowTemplate'),
  regionId?: string(name='RegionId'),
  changeSetId?: string(name='ChangeSetId'),
}

model GetChangeSetResponseBody = {
  status?: string(name='Status'),
  changes?: [  map[string]any ](name='Changes'),
  description?: string(name='Description'),
  parameters?: [ 
    {
      parameterKey?: string(name='ParameterKey'),
      parameterValue?: string(name='ParameterValue'),
    }
  ](name='Parameters'),
  requestId?: string(name='RequestId'),
  statusReason?: string(name='StatusReason'),
  createTime?: string(name='CreateTime'),
  templateBody?: string(name='TemplateBody'),
  changeSetName?: string(name='ChangeSetName'),
  changeSetId?: string(name='ChangeSetId'),
  executionStatus?: string(name='ExecutionStatus'),
  changeSetType?: string(name='ChangeSetType'),
  regionId?: string(name='RegionId'),
  disableRollback?: boolean(name='DisableRollback'),
  stackName?: string(name='StackName'),
  timeoutInMinutes?: int32(name='TimeoutInMinutes'),
  stackId?: string(name='StackId'),
}

model GetChangeSetResponse = {
  headers: map[string]string(name='headers'),
  body: GetChangeSetResponseBody(name='body'),
}

async function getChangeSetWithOptions(request: GetChangeSetRequest, runtime: Util.RuntimeOptions): GetChangeSetResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetChangeSet', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getChangeSet(request: GetChangeSetRequest): GetChangeSetResponse {
  var runtime = new Util.RuntimeOptions{};
  return getChangeSetWithOptions(request, runtime);
}

model GetResourceTypeRequest {
  resourceType?: string(name='ResourceType'),
}

model GetResourceTypeResponseBody = {
  requestId?: string(name='RequestId'),
  attributes?: map[string]any(name='Attributes'),
  resourceType?: string(name='ResourceType'),
  properties?: map[string]any(name='Properties'),
  supportDriftDetection?: boolean(name='SupportDriftDetection'),
}

model GetResourceTypeResponse = {
  headers: map[string]string(name='headers'),
  body: GetResourceTypeResponseBody(name='body'),
}

async function getResourceTypeWithOptions(request: GetResourceTypeRequest, runtime: Util.RuntimeOptions): GetResourceTypeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetResourceType', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getResourceType(request: GetResourceTypeRequest): GetResourceTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getResourceTypeWithOptions(request, runtime);
}

model GetResourceTypeTemplateRequest {
  resourceType?: string(name='ResourceType'),
}

model GetResourceTypeTemplateResponseBody = {
  requestId?: string(name='RequestId'),
  templateBody?: map[string]any(name='TemplateBody'),
}

model GetResourceTypeTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: GetResourceTypeTemplateResponseBody(name='body'),
}

async function getResourceTypeTemplateWithOptions(request: GetResourceTypeTemplateRequest, runtime: Util.RuntimeOptions): GetResourceTypeTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetResourceTypeTemplate', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getResourceTypeTemplate(request: GetResourceTypeTemplateRequest): GetResourceTypeTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getResourceTypeTemplateWithOptions(request, runtime);
}

model GetStackRequest {
  stackId?: string(name='StackId'),
  regionId?: string(name='RegionId'),
  clientToken?: string(name='ClientToken'),
  outputOption?: string(name='OutputOption'),
  showResourceProgress?: string(name='ShowResourceProgress'),
}

model GetStackResponseBody = {
  status?: string(name='Status'),
  description?: string(name='Description'),
  parameters?: [ 
    {
      parameterKey?: string(name='ParameterKey'),
      parameterValue?: string(name='ParameterValue'),
    }
  ](name='Parameters'),
  requestId?: string(name='RequestId'),
  statusReason?: string(name='StatusReason'),
  parentStackId?: string(name='ParentStackId'),
  createTime?: string(name='CreateTime'),
  deletionProtection?: string(name='DeletionProtection'),
  rootStackId?: string(name='RootStackId'),
  templateDescription?: string(name='TemplateDescription'),
  stackType?: string(name='StackType'),
  ramRoleName?: string(name='RamRoleName'),
  updateTime?: string(name='UpdateTime'),
  outputs?: [  map[string]any ](name='Outputs'),
  driftDetectionTime?: string(name='DriftDetectionTime'),
  regionId?: string(name='RegionId'),
  stackDriftStatus?: string(name='StackDriftStatus'),
  notificationURLs?: [ string ](name='NotificationURLs'),
  disableRollback?: boolean(name='DisableRollback'),
  stackName?: string(name='StackName'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags'),
  timeoutInMinutes?: int32(name='TimeoutInMinutes'),
  stackId?: string(name='StackId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceProgress?: {
    totalResourceCount?: int32(name='TotalResourceCount'),
    successResourceCount?: int32(name='SuccessResourceCount'),
    failedResourceCount?: int32(name='FailedResourceCount'),
    inProgressResourceCount?: int32(name='InProgressResourceCount'),
    pendingResourceCount?: int32(name='PendingResourceCount'),
    inProgressResourceDetails?: [ 
      {
        resourceName?: string(name='ResourceName'),
        resourceType?: string(name='ResourceType'),
        progressValue?: float(name='ProgressValue'),
        progressTargetValue?: float(name='ProgressTargetValue'),
      }
    ](name='InProgressResourceDetails'),
  }(name='ResourceProgress'),
}

model GetStackResponse = {
  headers: map[string]string(name='headers'),
  body: GetStackResponseBody(name='body'),
}

async function getStackWithOptions(request: GetStackRequest, runtime: Util.RuntimeOptions): GetStackResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetStack', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getStack(request: GetStackRequest): GetStackResponse {
  var runtime = new Util.RuntimeOptions{};
  return getStackWithOptions(request, runtime);
}

model GetStackDriftDetectionStatusRequest {
  regionId?: string(name='RegionId'),
  driftDetectionId?: string(name='DriftDetectionId'),
}

model GetStackDriftDetectionStatusResponseBody = {
  requestId?: string(name='RequestId'),
  driftDetectionTime?: string(name='DriftDetectionTime'),
  driftDetectionStatusReason?: string(name='DriftDetectionStatusReason'),
  driftedStackResourceCount?: int32(name='DriftedStackResourceCount'),
  stackDriftStatus?: string(name='StackDriftStatus'),
  driftDetectionStatus?: string(name='DriftDetectionStatus'),
  stackId?: string(name='StackId'),
  driftDetectionId?: string(name='DriftDetectionId'),
}

model GetStackDriftDetectionStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetStackDriftDetectionStatusResponseBody(name='body'),
}

async function getStackDriftDetectionStatusWithOptions(request: GetStackDriftDetectionStatusRequest, runtime: Util.RuntimeOptions): GetStackDriftDetectionStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetStackDriftDetectionStatus', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getStackDriftDetectionStatus(request: GetStackDriftDetectionStatusRequest): GetStackDriftDetectionStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getStackDriftDetectionStatusWithOptions(request, runtime);
}

model GetStackGroupRequest {
  regionId?: string(name='RegionId'),
  stackGroupName?: string(name='StackGroupName'),
  stackGroupId?: string(name='StackGroupId'),
}

model GetStackGroupResponseBody = {
  requestId?: string(name='RequestId'),
  stackGroup?: {
    stackGroupId?: string(name='StackGroupId'),
    status?: string(name='Status'),
    administrationRoleName?: string(name='AdministrationRoleName'),
    parameters?: [ 
      {
        parameterKey?: string(name='ParameterKey'),
        parameterValue?: string(name='ParameterValue'),
      }
    ](name='Parameters'),
    description?: string(name='Description'),
    stackGroupName?: string(name='StackGroupName'),
    executionRoleName?: string(name='ExecutionRoleName'),
    templateBody?: string(name='TemplateBody'),
    stackGroupDriftDetectionDetail?: {
      driftDetectionTime?: string(name='DriftDetectionTime'),
      totalStackInstancesCount?: int32(name='TotalStackInstancesCount'),
      failedStackInstancesCount?: int32(name='FailedStackInstancesCount'),
      driftDetectionStatus?: string(name='DriftDetectionStatus'),
      stackGroupDriftStatus?: string(name='StackGroupDriftStatus'),
      inProgressStackInstancesCount?: int32(name='InProgressStackInstancesCount'),
      inSyncStackInstancesCount?: int32(name='InSyncStackInstancesCount'),
      cancelledStackInstancesCount?: int32(name='CancelledStackInstancesCount'),
      driftedStackInstancesCount?: int32(name='DriftedStackInstancesCount'),
    }(name='StackGroupDriftDetectionDetail'),
    resourceGroupId?: string(name='ResourceGroupId'),
  }(name='StackGroup'),
}

model GetStackGroupResponse = {
  headers: map[string]string(name='headers'),
  body: GetStackGroupResponseBody(name='body'),
}

async function getStackGroupWithOptions(request: GetStackGroupRequest, runtime: Util.RuntimeOptions): GetStackGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetStackGroup', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getStackGroup(request: GetStackGroupRequest): GetStackGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return getStackGroupWithOptions(request, runtime);
}

model GetStackGroupOperationRequest {
  regionId?: string(name='RegionId'),
  operationId?: string(name='OperationId'),
}

model GetStackGroupOperationResponseBody = {
  requestId?: string(name='RequestId'),
  stackGroupOperation?: {
    status?: string(name='Status'),
    stackGroupId?: string(name='StackGroupId'),
    action?: string(name='Action'),
    createTime?: string(name='CreateTime'),
    retainStacks?: boolean(name='RetainStacks'),
    stackGroupName?: string(name='StackGroupName'),
    operationId?: string(name='OperationId'),
    operationDescription?: string(name='OperationDescription'),
    stackGroupDriftDetectionDetail?: {
      driftDetectionTime?: string(name='DriftDetectionTime'),
      totalStackInstancesCount?: int32(name='TotalStackInstancesCount'),
      failedStackInstancesCount?: int32(name='FailedStackInstancesCount'),
      driftDetectionStatus?: string(name='DriftDetectionStatus'),
      stackGroupDriftStatus?: string(name='StackGroupDriftStatus'),
      inProgressStackInstancesCount?: int32(name='InProgressStackInstancesCount'),
      inSyncStackInstancesCount?: int32(name='InSyncStackInstancesCount'),
      cancelledStackInstancesCount?: int32(name='CancelledStackInstancesCount'),
      driftedStackInstancesCount?: int32(name='DriftedStackInstancesCount'),
    }(name='StackGroupDriftDetectionDetail'),
    operationPreferences?: {
      maxConcurrentCount?: int32(name='MaxConcurrentCount'),
      failureToleranceCount?: int32(name='FailureToleranceCount'),
      maxConcurrentPercentage?: int32(name='MaxConcurrentPercentage'),
      regionIdsOrder?: [ string ](name='RegionIdsOrder'),
      failureTolerancePercentage?: int32(name='FailureTolerancePercentage'),
    }(name='OperationPreferences'),
    endTime?: string(name='EndTime'),
    executionRoleName?: string(name='ExecutionRoleName'),
    administratorRoleName?: string(name='AdministratorRoleName'),
  }(name='StackGroupOperation'),
}

model GetStackGroupOperationResponse = {
  headers: map[string]string(name='headers'),
  body: GetStackGroupOperationResponseBody(name='body'),
}

async function getStackGroupOperationWithOptions(request: GetStackGroupOperationRequest, runtime: Util.RuntimeOptions): GetStackGroupOperationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetStackGroupOperation', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getStackGroupOperation(request: GetStackGroupOperationRequest): GetStackGroupOperationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getStackGroupOperationWithOptions(request, runtime);
}

model GetStackInstanceRequest {
  regionId?: string(name='RegionId'),
  stackGroupName?: string(name='StackGroupName'),
  stackInstanceAccountId?: string(name='StackInstanceAccountId'),
  stackInstanceRegionId?: string(name='StackInstanceRegionId'),
}

model GetStackInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  stackInstance?: {
    status?: string(name='Status'),
    stackGroupId?: string(name='StackGroupId'),
    stackId?: string(name='StackId'),
    driftDetectionTime?: string(name='DriftDetectionTime'),
    stackDriftStatus?: string(name='StackDriftStatus'),
    statusReason?: string(name='StatusReason'),
    parameterOverrides?: [ 
      {
        parameterKey?: string(name='ParameterKey'),
        parameterValue?: string(name='ParameterValue'),
      }
    ](name='ParameterOverrides'),
    stackGroupName?: string(name='StackGroupName'),
    accountId?: string(name='AccountId'),
    regionId?: string(name='RegionId'),
  }(name='StackInstance'),
}

model GetStackInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: GetStackInstanceResponseBody(name='body'),
}

async function getStackInstanceWithOptions(request: GetStackInstanceRequest, runtime: Util.RuntimeOptions): GetStackInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetStackInstance', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getStackInstance(request: GetStackInstanceRequest): GetStackInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getStackInstanceWithOptions(request, runtime);
}

model GetStackPolicyRequest {
  stackId?: string(name='StackId'),
  regionId?: string(name='RegionId'),
}

model GetStackPolicyResponseBody = {
  requestId?: string(name='RequestId'),
  stackPolicyBody?: map[string]any(name='StackPolicyBody'),
}

model GetStackPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: GetStackPolicyResponseBody(name='body'),
}

async function getStackPolicyWithOptions(request: GetStackPolicyRequest, runtime: Util.RuntimeOptions): GetStackPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetStackPolicy', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getStackPolicy(request: GetStackPolicyRequest): GetStackPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return getStackPolicyWithOptions(request, runtime);
}

model GetStackResourceRequest {
  stackId?: string(name='StackId'),
  clientToken?: string(name='ClientToken'),
  regionId?: string(name='RegionId'),
  showResourceAttributes?: boolean(name='ShowResourceAttributes'),
  logicalResourceId?: string(name='LogicalResourceId'),
}

model GetStackResourceResponseBody = {
  status?: string(name='Status'),
  description?: string(name='Description'),
  requestId?: string(name='RequestId'),
  statusReason?: string(name='StatusReason'),
  physicalResourceId?: string(name='PhysicalResourceId'),
  createTime?: string(name='CreateTime'),
  metadata?: map[string]any(name='Metadata'),
  resourceType?: string(name='ResourceType'),
  resourceAttributes?: [  map[string]any ](name='ResourceAttributes'),
  logicalResourceId?: string(name='LogicalResourceId'),
  resourceDriftStatus?: string(name='ResourceDriftStatus'),
  updateTime?: string(name='UpdateTime'),
  driftDetectionTime?: string(name='DriftDetectionTime'),
  stackName?: string(name='StackName'),
  stackId?: string(name='StackId'),
}

model GetStackResourceResponse = {
  headers: map[string]string(name='headers'),
  body: GetStackResourceResponseBody(name='body'),
}

async function getStackResourceWithOptions(request: GetStackResourceRequest, runtime: Util.RuntimeOptions): GetStackResourceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetStackResource', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getStackResource(request: GetStackResourceRequest): GetStackResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getStackResourceWithOptions(request, runtime);
}

model GetTemplateRequest {
  stackId?: string(name='StackId'),
  regionId?: string(name='RegionId'),
  changeSetId?: string(name='ChangeSetId'),
  templateId?: string(name='TemplateId'),
  templateVersion?: string(name='TemplateVersion'),
  templateStage?: string(name='TemplateStage'),
  includePermission?: string(name='IncludePermission'),
  stackGroupName?: string(name='StackGroupName'),
}

model GetTemplateResponseBody = {
  templateARN?: string(name='TemplateARN'),
  description?: string(name='Description'),
  requestId?: string(name='RequestId'),
  createTime?: string(name='CreateTime'),
  stackGroupName?: string(name='StackGroupName'),
  templateVersion?: string(name='TemplateVersion'),
  templateBody?: string(name='TemplateBody'),
  changeSetId?: string(name='ChangeSetId'),
  ownerId?: string(name='OwnerId'),
  updateTime?: string(name='UpdateTime'),
  permissions?: [ 
    {
      versionOption?: string(name='VersionOption'),
      accountId?: string(name='AccountId'),
      shareOption?: string(name='ShareOption'),
      templateVersion?: string(name='TemplateVersion'),
    }
  ](name='Permissions'),
  templateName?: string(name='TemplateName'),
  regionId?: string(name='RegionId'),
  templateId?: string(name='TemplateId'),
  stackId?: string(name='StackId'),
  shareType?: string(name='ShareType'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model GetTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: GetTemplateResponseBody(name='body'),
}

async function getTemplateWithOptions(request: GetTemplateRequest, runtime: Util.RuntimeOptions): GetTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetTemplate', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getTemplate(request: GetTemplateRequest): GetTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTemplateWithOptions(request, runtime);
}

model GetTemplateEstimateCostRequest {
  templateURL?: string(name='TemplateURL'),
  regionId?: string(name='RegionId'),
  templateBody?: string(name='TemplateBody'),
  clientToken?: string(name='ClientToken'),
  templateId?: string(name='TemplateId'),
  templateVersion?: string(name='TemplateVersion'),
  parameters?: [ 
    {
      parameterKey?: string(name='ParameterKey'),
      parameterValue?: string(name='ParameterValue'),
    }
  ](name='Parameters'),
}

model GetTemplateEstimateCostResponseBody = {
  requestId?: string(name='RequestId'),
  resources?: map[string]any(name='Resources'),
}

model GetTemplateEstimateCostResponse = {
  headers: map[string]string(name='headers'),
  body: GetTemplateEstimateCostResponseBody(name='body'),
}

async function getTemplateEstimateCostWithOptions(request: GetTemplateEstimateCostRequest, runtime: Util.RuntimeOptions): GetTemplateEstimateCostResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetTemplateEstimateCost', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getTemplateEstimateCost(request: GetTemplateEstimateCostRequest): GetTemplateEstimateCostResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTemplateEstimateCostWithOptions(request, runtime);
}

model GetTemplateSummaryRequest {
  stackId?: string(name='StackId'),
  templateBody?: string(name='TemplateBody'),
  regionId?: string(name='RegionId'),
  templateId?: string(name='TemplateId'),
  templateURL?: string(name='TemplateURL'),
  changeSetId?: string(name='ChangeSetId'),
  templateVersion?: string(name='TemplateVersion'),
  stackGroupName?: string(name='StackGroupName'),
}

model GetTemplateSummaryResponseBody = {
  resourceTypes?: [ string ](name='ResourceTypes'),
  description?: string(name='Description'),
  parameters?: [  map[string]any ](name='Parameters'),
  requestId?: string(name='RequestId'),
  version?: string(name='Version'),
  metadata?: map[string]any(name='Metadata'),
  resourceIdentifierSummaries?: [ 
    {
      resourceType?: string(name='ResourceType'),
      logicalResourceIds?: [ string ](name='LogicalResourceIds'),
      resourceIdentifiers?: [ string ](name='ResourceIdentifiers'),
    }
  ](name='ResourceIdentifierSummaries'),
}

model GetTemplateSummaryResponse = {
  headers: map[string]string(name='headers'),
  body: GetTemplateSummaryResponseBody(name='body'),
}

async function getTemplateSummaryWithOptions(request: GetTemplateSummaryRequest, runtime: Util.RuntimeOptions): GetTemplateSummaryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetTemplateSummary', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getTemplateSummary(request: GetTemplateSummaryRequest): GetTemplateSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTemplateSummaryWithOptions(request, runtime);
}

model ListChangeSetsRequest {
  stackId?: string(name='StackId'),
  pageSize?: long(name='PageSize'),
  regionId?: string(name='RegionId'),
  pageNumber?: long(name='PageNumber'),
  changeSetId?: string(name='ChangeSetId'),
  status?: [ string ](name='Status'),
  changeSetName?: [ string ](name='ChangeSetName'),
  executionStatus?: [ string ](name='ExecutionStatus'),
}

model ListChangeSetsResponseBody = {
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  changeSets?: [ 
    {
      status?: string(name='Status'),
      stackId?: string(name='StackId'),
      changeSetName?: string(name='ChangeSetName'),
      description?: string(name='Description'),
      changeSetType?: string(name='ChangeSetType'),
      statusReason?: string(name='StatusReason'),
      createTime?: string(name='CreateTime'),
      changeSetId?: string(name='ChangeSetId'),
      stackName?: string(name='StackName'),
      executionStatus?: string(name='ExecutionStatus'),
      regionId?: string(name='RegionId'),
    }
  ](name='ChangeSets'),
}

model ListChangeSetsResponse = {
  headers: map[string]string(name='headers'),
  body: ListChangeSetsResponseBody(name='body'),
}

async function listChangeSetsWithOptions(request: ListChangeSetsRequest, runtime: Util.RuntimeOptions): ListChangeSetsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListChangeSets', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listChangeSets(request: ListChangeSetsRequest): ListChangeSetsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listChangeSetsWithOptions(request, runtime);
}

model ListResourceTypesResponseBody = {
  resourceTypes?: [ string ](name='ResourceTypes'),
  requestId?: string(name='RequestId'),
}

model ListResourceTypesResponse = {
  headers: map[string]string(name='headers'),
  body: ListResourceTypesResponseBody(name='body'),
}

async function listResourceTypesWithOptions(runtime: Util.RuntimeOptions): ListResourceTypesResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('ListResourceTypes', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listResourceTypes(): ListResourceTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listResourceTypesWithOptions(runtime);
}

model ListStackEventsRequest {
  stackId?: string(name='StackId'),
  pageSize?: long(name='PageSize'),
  regionId?: string(name='RegionId'),
  pageNumber?: long(name='PageNumber'),
  status?: [ string ](name='Status'),
  resourceType?: [ string ](name='ResourceType'),
  logicalResourceId?: [ string ](name='LogicalResourceId'),
}

model ListStackEventsResponseBody = {
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  events?: [ 
    {
      status?: string(name='Status'),
      eventId?: string(name='EventId'),
      logicalResourceId?: string(name='LogicalResourceId'),
      stackId?: string(name='StackId'),
      physicalResourceId?: string(name='PhysicalResourceId'),
      resourceType?: string(name='ResourceType'),
      statusReason?: string(name='StatusReason'),
      createTime?: string(name='CreateTime'),
      stackName?: string(name='StackName'),
    }
  ](name='Events'),
}

model ListStackEventsResponse = {
  headers: map[string]string(name='headers'),
  body: ListStackEventsResponseBody(name='body'),
}

async function listStackEventsWithOptions(request: ListStackEventsRequest, runtime: Util.RuntimeOptions): ListStackEventsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListStackEvents', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listStackEvents(request: ListStackEventsRequest): ListStackEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listStackEventsWithOptions(request, runtime);
}

model ListStackGroupOperationResultsRequest {
  regionId?: string(name='RegionId'),
  operationId?: string(name='OperationId'),
  pageSize?: long(name='PageSize'),
  pageNumber?: long(name='PageNumber'),
}

model ListStackGroupOperationResultsResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  stackGroupOperationResults?: [ 
    {
      status?: string(name='Status'),
      statusReason?: string(name='StatusReason'),
      accountId?: string(name='AccountId'),
      regionId?: string(name='RegionId'),
    }
  ](name='StackGroupOperationResults'),
}

model ListStackGroupOperationResultsResponse = {
  headers: map[string]string(name='headers'),
  body: ListStackGroupOperationResultsResponseBody(name='body'),
}

async function listStackGroupOperationResultsWithOptions(request: ListStackGroupOperationResultsRequest, runtime: Util.RuntimeOptions): ListStackGroupOperationResultsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListStackGroupOperationResults', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listStackGroupOperationResults(request: ListStackGroupOperationResultsRequest): ListStackGroupOperationResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listStackGroupOperationResultsWithOptions(request, runtime);
}

model ListStackGroupOperationsRequest {
  regionId?: string(name='RegionId'),
  stackGroupName?: string(name='StackGroupName'),
  pageSize?: long(name='PageSize'),
  pageNumber?: long(name='PageNumber'),
}

model ListStackGroupOperationsResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  stackGroupOperations?: [ 
    {
      status?: string(name='Status'),
      stackGroupId?: string(name='StackGroupId'),
      endTime?: string(name='EndTime'),
      action?: string(name='Action'),
      createTime?: string(name='CreateTime'),
      stackGroupName?: string(name='StackGroupName'),
      operationId?: string(name='OperationId'),
      operationDescription?: string(name='OperationDescription'),
    }
  ](name='StackGroupOperations'),
}

model ListStackGroupOperationsResponse = {
  headers: map[string]string(name='headers'),
  body: ListStackGroupOperationsResponseBody(name='body'),
}

async function listStackGroupOperationsWithOptions(request: ListStackGroupOperationsRequest, runtime: Util.RuntimeOptions): ListStackGroupOperationsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListStackGroupOperations', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listStackGroupOperations(request: ListStackGroupOperationsRequest): ListStackGroupOperationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listStackGroupOperationsWithOptions(request, runtime);
}

model ListStackGroupsRequest {
  regionId?: string(name='RegionId'),
  status?: string(name='Status'),
  pageSize?: long(name='PageSize'),
  pageNumber?: long(name='PageNumber'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model ListStackGroupsResponseBody = {
  stackGroups?: [ 
    {
      stackGroupId?: string(name='StackGroupId'),
      status?: string(name='Status'),
      driftDetectionTime?: string(name='DriftDetectionTime'),
      description?: string(name='Description'),
      stackGroupDriftStatus?: string(name='StackGroupDriftStatus'),
      stackGroupName?: string(name='StackGroupName'),
      resourceGroupId?: string(name='ResourceGroupId'),
    }
  ](name='StackGroups'),
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model ListStackGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListStackGroupsResponseBody(name='body'),
}

async function listStackGroupsWithOptions(request: ListStackGroupsRequest, runtime: Util.RuntimeOptions): ListStackGroupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListStackGroups', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listStackGroups(request: ListStackGroupsRequest): ListStackGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listStackGroupsWithOptions(request, runtime);
}

model ListStackInstancesRequest {
  regionId?: string(name='RegionId'),
  stackGroupName?: string(name='StackGroupName'),
  stackInstanceAccountId?: string(name='StackInstanceAccountId'),
  stackInstanceRegionId?: string(name='StackInstanceRegionId'),
  pageSize?: long(name='PageSize'),
  pageNumber?: long(name='PageNumber'),
}

model ListStackInstancesResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  stackInstances?: [ 
    {
      status?: string(name='Status'),
      stackGroupId?: string(name='StackGroupId'),
      stackId?: string(name='StackId'),
      driftDetectionTime?: string(name='DriftDetectionTime'),
      stackDriftStatus?: string(name='StackDriftStatus'),
      statusReason?: string(name='StatusReason'),
      stackGroupName?: string(name='StackGroupName'),
      accountId?: string(name='AccountId'),
      regionId?: string(name='RegionId'),
    }
  ](name='StackInstances'),
}

model ListStackInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ListStackInstancesResponseBody(name='body'),
}

async function listStackInstancesWithOptions(request: ListStackInstancesRequest, runtime: Util.RuntimeOptions): ListStackInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListStackInstances', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listStackInstances(request: ListStackInstancesRequest): ListStackInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listStackInstancesWithOptions(request, runtime);
}

model ListStackOperationRisksRequest {
  regionId?: string(name='RegionId'),
  stackId?: string(name='StackId'),
  operationType?: string(name='OperationType'),
  clientToken?: string(name='ClientToken'),
  ramRoleName?: string(name='RamRoleName'),
  retainAllResources?: boolean(name='RetainAllResources'),
  retainResources?: [ string ](name='RetainResources'),
}

model ListStackOperationRisksResponseBody = {
  requestId?: string(name='RequestId'),
  riskResources?: [ 
    {
      logicalResourceId?: string(name='LogicalResourceId'),
      physicalResourceId?: string(name='PhysicalResourceId'),
      requestId?: string(name='RequestId'),
      resourceType?: string(name='ResourceType'),
      code?: string(name='Code'),
      message?: string(name='Message'),
      riskType?: string(name='RiskType'),
      reason?: string(name='Reason'),
    }
  ](name='RiskResources'),
}

model ListStackOperationRisksResponse = {
  headers: map[string]string(name='headers'),
  body: ListStackOperationRisksResponseBody(name='body'),
}

async function listStackOperationRisksWithOptions(request: ListStackOperationRisksRequest, runtime: Util.RuntimeOptions): ListStackOperationRisksResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListStackOperationRisks', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listStackOperationRisks(request: ListStackOperationRisksRequest): ListStackOperationRisksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listStackOperationRisksWithOptions(request, runtime);
}

model ListStackResourceDriftsRequest {
  stackId?: string(name='StackId'),
  regionId?: string(name='RegionId'),
  maxResults?: long(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  resourceDriftStatus?: [ string ](name='ResourceDriftStatus'),
}

model ListStackResourceDriftsResponseBody = {
  resourceDrifts?: [ 
    {
      logicalResourceId?: string(name='LogicalResourceId'),
      stackId?: string(name='StackId'),
      physicalResourceId?: string(name='PhysicalResourceId'),
      driftDetectionTime?: string(name='DriftDetectionTime'),
      resourceType?: string(name='ResourceType'),
      expectedProperties?: string(name='ExpectedProperties'),
      resourceDriftStatus?: string(name='ResourceDriftStatus'),
      propertyDifferences?: [ 
        {
          actualValue?: string(name='ActualValue'),
          differenceType?: string(name='DifferenceType'),
          propertyPath?: string(name='PropertyPath'),
          expectedValue?: string(name='ExpectedValue'),
        }
      ](name='PropertyDifferences'),
      actualProperties?: string(name='ActualProperties'),
    }
  ](name='ResourceDrifts'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model ListStackResourceDriftsResponse = {
  headers: map[string]string(name='headers'),
  body: ListStackResourceDriftsResponseBody(name='body'),
}

async function listStackResourceDriftsWithOptions(request: ListStackResourceDriftsRequest, runtime: Util.RuntimeOptions): ListStackResourceDriftsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListStackResourceDrifts', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listStackResourceDrifts(request: ListStackResourceDriftsRequest): ListStackResourceDriftsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listStackResourceDriftsWithOptions(request, runtime);
}

model ListStackResourcesRequest {
  stackId?: string(name='StackId'),
  regionId?: string(name='RegionId'),
}

model ListStackResourcesResponseBody = {
  requestId?: string(name='RequestId'),
  resources?: [ 
    {
      status?: string(name='Status'),
      logicalResourceId?: string(name='LogicalResourceId'),
      updateTime?: string(name='UpdateTime'),
      stackId?: string(name='StackId'),
      physicalResourceId?: string(name='PhysicalResourceId'),
      driftDetectionTime?: string(name='DriftDetectionTime'),
      resourceType?: string(name='ResourceType'),
      resourceDriftStatus?: string(name='ResourceDriftStatus'),
      statusReason?: string(name='StatusReason'),
      createTime?: string(name='CreateTime'),
      stackName?: string(name='StackName'),
    }
  ](name='Resources'),
}

model ListStackResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListStackResourcesResponseBody(name='body'),
}

async function listStackResourcesWithOptions(request: ListStackResourcesRequest, runtime: Util.RuntimeOptions): ListStackResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListStackResources', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listStackResources(request: ListStackResourcesRequest): ListStackResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listStackResourcesWithOptions(request, runtime);
}

model ListStacksRequest {
  pageSize?: long(name='PageSize'),
  parentStackId?: string(name='ParentStackId'),
  regionId?: string(name='RegionId'),
  pageNumber?: long(name='PageNumber'),
  showNestedStack?: boolean(name='ShowNestedStack'),
  stackId?: string(name='StackId'),
  status?: [ string ](name='Status'),
  stackName?: [ string ](name='StackName'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model ListStacksResponseBody = {
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  stacks?: [ 
    {
      status?: string(name='Status'),
      updateTime?: string(name='UpdateTime'),
      driftDetectionTime?: string(name='DriftDetectionTime'),
      statusReason?: string(name='StatusReason'),
      createTime?: string(name='CreateTime'),
      disableRollback?: boolean(name='DisableRollback'),
      tags?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tags'),
      stackName?: string(name='StackName'),
      timeoutInMinutes?: int32(name='TimeoutInMinutes'),
      regionId?: string(name='RegionId'),
      parentStackId?: string(name='ParentStackId'),
      stackId?: string(name='StackId'),
      stackDriftStatus?: string(name='StackDriftStatus'),
      stackType?: string(name='StackType'),
      resourceGroupId?: string(name='ResourceGroupId'),
    }
  ](name='Stacks'),
}

model ListStacksResponse = {
  headers: map[string]string(name='headers'),
  body: ListStacksResponseBody(name='body'),
}

async function listStacksWithOptions(request: ListStacksRequest, runtime: Util.RuntimeOptions): ListStacksResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListStacks', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listStacks(request: ListStacksRequest): ListStacksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listStacksWithOptions(request, runtime);
}

model ListTagKeysRequest {
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  nextToken?: string(name='NextToken'),
}

model ListTagKeysResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  keys?: [ string ](name='Keys'),
}

model ListTagKeysResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagKeysResponseBody(name='body'),
}

async function listTagKeysWithOptions(request: ListTagKeysRequest, runtime: Util.RuntimeOptions): ListTagKeysResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTagKeys', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTagKeys(request: ListTagKeysRequest): ListTagKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagKeysWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  nextToken?: string(name='NextToken'),
  resourceId?: [ string ](name='ResourceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: [ 
    {
      resourceType?: string(name='ResourceType'),
      tagValue?: string(name='TagValue'),
      resourceId?: string(name='ResourceId'),
      tagKey?: string(name='TagKey'),
    }
  ](name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTagResources', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ListTagValuesRequest {
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  nextToken?: string(name='NextToken'),
  key?: string(name='Key'),
}

model ListTagValuesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  values?: [ string ](name='Values'),
}

model ListTagValuesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagValuesResponseBody(name='body'),
}

async function listTagValuesWithOptions(request: ListTagValuesRequest, runtime: Util.RuntimeOptions): ListTagValuesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTagValues', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTagValues(request: ListTagValuesRequest): ListTagValuesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagValuesWithOptions(request, runtime);
}

model ListTemplatesRequest {
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  templateName?: string(name='TemplateName'),
  shareType?: string(name='ShareType'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model ListTemplatesResponseBody = {
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  templates?: [ 
    {
      templateARN?: string(name='TemplateARN'),
      updateTime?: string(name='UpdateTime'),
      description?: string(name='Description'),
      createTime?: string(name='CreateTime'),
      templateName?: string(name='TemplateName'),
      templateVersion?: string(name='TemplateVersion'),
      templateId?: string(name='TemplateId'),
      ownerId?: string(name='OwnerId'),
      shareType?: string(name='ShareType'),
      resourceGroupId?: string(name='ResourceGroupId'),
    }
  ](name='Templates'),
}

model ListTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTemplatesResponseBody(name='body'),
}

async function listTemplatesWithOptions(request: ListTemplatesRequest, runtime: Util.RuntimeOptions): ListTemplatesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTemplates', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTemplates(request: ListTemplatesRequest): ListTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTemplatesWithOptions(request, runtime);
}

model ListTemplateVersionsRequest {
  nextToken?: string(name='NextToken'),
  maxResults?: long(name='MaxResults'),
  templateId?: string(name='TemplateId'),
}

model ListTemplateVersionsResponseBody = {
  versions?: [ 
    {
      updateTime?: string(name='UpdateTime'),
      description?: string(name='Description'),
      createTime?: string(name='CreateTime'),
      templateName?: string(name='TemplateName'),
      templateId?: string(name='TemplateId'),
      templateVersion?: string(name='TemplateVersion'),
    }
  ](name='Versions'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model ListTemplateVersionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListTemplateVersionsResponseBody(name='body'),
}

async function listTemplateVersionsWithOptions(request: ListTemplateVersionsRequest, runtime: Util.RuntimeOptions): ListTemplateVersionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTemplateVersions', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTemplateVersions(request: ListTemplateVersionsRequest): ListTemplateVersionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTemplateVersionsWithOptions(request, runtime);
}

model MoveResourceGroupRequest {
  resourceType?: string(name='ResourceType'),
  resourceId?: string(name='ResourceId'),
  newResourceGroupId?: string(name='NewResourceGroupId'),
  regionId?: string(name='RegionId'),
}

model MoveResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model MoveResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: MoveResourceGroupResponseBody(name='body'),
}

async function moveResourceGroupWithOptions(request: MoveResourceGroupRequest, runtime: Util.RuntimeOptions): MoveResourceGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('MoveResourceGroup', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function moveResourceGroup(request: MoveResourceGroupRequest): MoveResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return moveResourceGroupWithOptions(request, runtime);
}

model PreviewStackRequest {
  disableRollback?: boolean(name='DisableRollback'),
  timeoutInMinutes?: long(name='TimeoutInMinutes'),
  templateBody?: string(name='TemplateBody'),
  stackPolicyURL?: string(name='StackPolicyURL'),
  regionId?: string(name='RegionId'),
  stackPolicyBody?: string(name='StackPolicyBody'),
  stackName?: string(name='StackName'),
  clientToken?: string(name='ClientToken'),
  templateURL?: string(name='TemplateURL'),
  templateId?: string(name='TemplateId'),
  templateVersion?: string(name='TemplateVersion'),
  parameters?: [ 
    {
      parameterKey?: string(name='ParameterKey'),
      parameterValue?: string(name='ParameterValue'),
    }
  ](name='Parameters'),
}

model PreviewStackResponseBody = {
  requestId?: string(name='RequestId'),
  stack?: {
    templateDescription?: string(name='TemplateDescription'),
    parameters?: [ 
      {
        parameterKey?: string(name='ParameterKey'),
        parameterValue?: string(name='ParameterValue'),
      }
    ](name='Parameters'),
    description?: string(name='Description'),
    disableRollback?: boolean(name='DisableRollback'),
    stackName?: string(name='StackName'),
    timeoutInMinutes?: int32(name='TimeoutInMinutes'),
    stackPolicyBody?: map[string]any(name='StackPolicyBody'),
    resources?: [ 
      {
        logicalResourceId?: string(name='LogicalResourceId'),
        resourceType?: string(name='ResourceType'),
        description?: string(name='Description'),
        stack?: map[string]any(name='Stack'),
        requiredBy?: [ string ](name='RequiredBy'),
        properties?: map[string]any(name='Properties'),
      }
    ](name='Resources'),
    regionId?: string(name='RegionId'),
  }(name='Stack'),
}

model PreviewStackResponse = {
  headers: map[string]string(name='headers'),
  body: PreviewStackResponseBody(name='body'),
}

async function previewStackWithOptions(request: PreviewStackRequest, runtime: Util.RuntimeOptions): PreviewStackResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PreviewStack', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function previewStack(request: PreviewStackRequest): PreviewStackResponse {
  var runtime = new Util.RuntimeOptions{};
  return previewStackWithOptions(request, runtime);
}

model SetDeletionProtectionRequest {
  stackId?: string(name='StackId'),
  deletionProtection?: string(name='DeletionProtection'),
  regionId?: string(name='RegionId'),
}

model SetDeletionProtectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetDeletionProtectionResponse = {
  headers: map[string]string(name='headers'),
  body: SetDeletionProtectionResponseBody(name='body'),
}

async function setDeletionProtectionWithOptions(request: SetDeletionProtectionRequest, runtime: Util.RuntimeOptions): SetDeletionProtectionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetDeletionProtection', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setDeletionProtection(request: SetDeletionProtectionRequest): SetDeletionProtectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDeletionProtectionWithOptions(request, runtime);
}

model SetStackPolicyRequest {
  stackId?: string(name='StackId'),
  regionId?: string(name='RegionId'),
  stackPolicyBody?: string(name='StackPolicyBody'),
  stackPolicyURL?: string(name='StackPolicyURL'),
}

model SetStackPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetStackPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: SetStackPolicyResponseBody(name='body'),
}

async function setStackPolicyWithOptions(request: SetStackPolicyRequest, runtime: Util.RuntimeOptions): SetStackPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetStackPolicy', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setStackPolicy(request: SetStackPolicyRequest): SetStackPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return setStackPolicyWithOptions(request, runtime);
}

model SetTemplatePermissionRequest {
  shareOption?: string(name='ShareOption'),
  versionOption?: string(name='VersionOption'),
  templateVersion?: string(name='TemplateVersion'),
  templateId?: string(name='TemplateId'),
  accountIds?: [ string ](name='AccountIds'),
}

model SetTemplatePermissionResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetTemplatePermissionResponse = {
  headers: map[string]string(name='headers'),
  body: SetTemplatePermissionResponseBody(name='body'),
}

async function setTemplatePermissionWithOptions(request: SetTemplatePermissionRequest, runtime: Util.RuntimeOptions): SetTemplatePermissionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetTemplatePermission', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setTemplatePermission(request: SetTemplatePermissionRequest): SetTemplatePermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return setTemplatePermissionWithOptions(request, runtime);
}

model SignalResourceRequest {
  stackId?: string(name='StackId'),
  status?: string(name='Status'),
  regionId?: string(name='RegionId'),
  uniqueId?: string(name='UniqueId'),
  clientToken?: string(name='ClientToken'),
  logicalResourceId?: string(name='LogicalResourceId'),
}

model SignalResourceResponseBody = {
  requestId?: string(name='RequestId'),
}

model SignalResourceResponse = {
  headers: map[string]string(name='headers'),
  body: SignalResourceResponseBody(name='body'),
}

async function signalResourceWithOptions(request: SignalResourceRequest, runtime: Util.RuntimeOptions): SignalResourceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SignalResource', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function signalResource(request: SignalResourceRequest): SignalResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return signalResourceWithOptions(request, runtime);
}

model StopStackGroupOperationRequest {
  regionId?: string(name='RegionId'),
  operationId?: string(name='OperationId'),
}

model StopStackGroupOperationResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopStackGroupOperationResponse = {
  headers: map[string]string(name='headers'),
  body: StopStackGroupOperationResponseBody(name='body'),
}

async function stopStackGroupOperationWithOptions(request: StopStackGroupOperationRequest, runtime: Util.RuntimeOptions): StopStackGroupOperationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StopStackGroupOperation', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function stopStackGroupOperation(request: StopStackGroupOperationRequest): StopStackGroupOperationResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopStackGroupOperationWithOptions(request, runtime);
}

model TagResourcesRequest {
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  resourceId?: [ string ](name='ResourceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TagResources', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UntagResourcesRequest {
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  all?: boolean(name='All'),
  resourceId?: [ string ](name='ResourceId'),
  tagKey?: [ string ](name='TagKey'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UntagResources', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model UpdateStackRequest {
  stackId?: string(name='StackId'),
  clientToken?: string(name='ClientToken'),
  stackPolicyDuringUpdateBody?: string(name='StackPolicyDuringUpdateBody'),
  timeoutInMinutes?: long(name='TimeoutInMinutes'),
  templateBody?: string(name='TemplateBody'),
  stackPolicyURL?: string(name='StackPolicyURL'),
  stackPolicyDuringUpdateURL?: string(name='StackPolicyDuringUpdateURL'),
  stackPolicyBody?: string(name='StackPolicyBody'),
  usePreviousParameters?: boolean(name='UsePreviousParameters'),
  regionId?: string(name='RegionId'),
  disableRollback?: boolean(name='DisableRollback'),
  templateURL?: string(name='TemplateURL'),
  ramRoleName?: string(name='RamRoleName'),
  replacementOption?: string(name='ReplacementOption'),
  templateId?: string(name='TemplateId'),
  templateVersion?: string(name='TemplateVersion'),
  parameters?: [ 
    {
      parameterKey?: string(name='ParameterKey'),
      parameterValue?: string(name='ParameterValue'),
    }
  ](name='Parameters'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags'),
}

model UpdateStackResponseBody = {
  requestId?: string(name='RequestId'),
  stackId?: string(name='StackId'),
}

model UpdateStackResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateStackResponseBody(name='body'),
}

async function updateStackWithOptions(request: UpdateStackRequest, runtime: Util.RuntimeOptions): UpdateStackResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateStack', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateStack(request: UpdateStackRequest): UpdateStackResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateStackWithOptions(request, runtime);
}

model UpdateStackGroupRequest {
  regionId?: string(name='RegionId'),
  stackGroupName?: string(name='StackGroupName'),
  description?: string(name='Description'),
  accountIds?: map[string]any(name='AccountIds'),
  regionIds?: map[string]any(name='RegionIds'),
  templateBody?: string(name='TemplateBody'),
  templateURL?: string(name='TemplateURL'),
  clientToken?: string(name='ClientToken'),
  operationDescription?: string(name='OperationDescription'),
  operationPreferences?: map[string]any(name='OperationPreferences'),
  administrationRoleName?: string(name='AdministrationRoleName'),
  executionRoleName?: string(name='ExecutionRoleName'),
  templateId?: string(name='TemplateId'),
  templateVersion?: string(name='TemplateVersion'),
  parameters?: [ 
    {
      parameterKey?: string(name='ParameterKey'),
      parameterValue?: string(name='ParameterValue'),
    }
  ](name='Parameters'),
}

model UpdateStackGroupShrinkRequest {
  regionId?: string(name='RegionId'),
  stackGroupName?: string(name='StackGroupName'),
  description?: string(name='Description'),
  accountIdsShrink?: string(name='AccountIds'),
  regionIdsShrink?: string(name='RegionIds'),
  templateBody?: string(name='TemplateBody'),
  templateURL?: string(name='TemplateURL'),
  clientToken?: string(name='ClientToken'),
  operationDescription?: string(name='OperationDescription'),
  operationPreferencesShrink?: string(name='OperationPreferences'),
  administrationRoleName?: string(name='AdministrationRoleName'),
  executionRoleName?: string(name='ExecutionRoleName'),
  templateId?: string(name='TemplateId'),
  templateVersion?: string(name='TemplateVersion'),
  parameters?: [ 
    {
      parameterKey?: string(name='ParameterKey'),
      parameterValue?: string(name='ParameterValue'),
    }
  ](name='Parameters'),
}

model UpdateStackGroupResponseBody = {
  requestId?: string(name='RequestId'),
  operationId?: string(name='OperationId'),
}

model UpdateStackGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateStackGroupResponseBody(name='body'),
}

async function updateStackGroupWithOptions(tmpReq: UpdateStackGroupRequest, runtime: Util.RuntimeOptions): UpdateStackGroupResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateStackGroupShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.accountIds)) {
    request.accountIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.accountIds, 'AccountIds', 'json');
  }
  if (!Util.isUnset(tmpReq.regionIds)) {
    request.regionIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.regionIds, 'RegionIds', 'json');
  }
  if (!Util.isUnset(tmpReq.operationPreferences)) {
    request.operationPreferencesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.operationPreferences, 'OperationPreferences', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateStackGroup', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateStackGroup(request: UpdateStackGroupRequest): UpdateStackGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateStackGroupWithOptions(request, runtime);
}

model UpdateStackInstancesRequest {
  regionId?: string(name='RegionId'),
  stackGroupName?: string(name='StackGroupName'),
  accountIds?: map[string]any(name='AccountIds'),
  regionIds?: map[string]any(name='RegionIds'),
  clientToken?: string(name='ClientToken'),
  operationDescription?: string(name='OperationDescription'),
  operationPreferences?: map[string]any(name='OperationPreferences'),
  timeoutInMinutes?: long(name='TimeoutInMinutes'),
  parameterOverrides?: [ 
    {
      parameterKey?: string(name='ParameterKey'),
      parameterValue?: string(name='ParameterValue'),
    }
  ](name='ParameterOverrides'),
}

model UpdateStackInstancesShrinkRequest {
  regionId?: string(name='RegionId'),
  stackGroupName?: string(name='StackGroupName'),
  accountIdsShrink?: string(name='AccountIds'),
  regionIdsShrink?: string(name='RegionIds'),
  clientToken?: string(name='ClientToken'),
  operationDescription?: string(name='OperationDescription'),
  operationPreferencesShrink?: string(name='OperationPreferences'),
  timeoutInMinutes?: long(name='TimeoutInMinutes'),
  parameterOverrides?: [ 
    {
      parameterKey?: string(name='ParameterKey'),
      parameterValue?: string(name='ParameterValue'),
    }
  ](name='ParameterOverrides'),
}

model UpdateStackInstancesResponseBody = {
  requestId?: string(name='RequestId'),
  operationId?: string(name='OperationId'),
}

model UpdateStackInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateStackInstancesResponseBody(name='body'),
}

async function updateStackInstancesWithOptions(tmpReq: UpdateStackInstancesRequest, runtime: Util.RuntimeOptions): UpdateStackInstancesResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateStackInstancesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.accountIds)) {
    request.accountIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.accountIds, 'AccountIds', 'json');
  }
  if (!Util.isUnset(tmpReq.regionIds)) {
    request.regionIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.regionIds, 'RegionIds', 'json');
  }
  if (!Util.isUnset(tmpReq.operationPreferences)) {
    request.operationPreferencesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.operationPreferences, 'OperationPreferences', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateStackInstances', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateStackInstances(request: UpdateStackInstancesRequest): UpdateStackInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateStackInstancesWithOptions(request, runtime);
}

model UpdateStackTemplateByResourcesRequest {
  stackId?: string(name='StackId'),
  dryRun?: boolean(name='DryRun'),
  regionId?: string(name='RegionId'),
  clientToken?: string(name='ClientToken'),
  templateFormat?: string(name='TemplateFormat'),
  logicalResourceId?: [ string ](name='LogicalResourceId'),
}

model UpdateStackTemplateByResourcesResponseBody = {
  requestId?: string(name='RequestId'),
  newTemplateBody?: string(name='NewTemplateBody'),
  oldTemplateBody?: string(name='OldTemplateBody'),
}

model UpdateStackTemplateByResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateStackTemplateByResourcesResponseBody(name='body'),
}

async function updateStackTemplateByResourcesWithOptions(request: UpdateStackTemplateByResourcesRequest, runtime: Util.RuntimeOptions): UpdateStackTemplateByResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateStackTemplateByResources', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateStackTemplateByResources(request: UpdateStackTemplateByResourcesRequest): UpdateStackTemplateByResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateStackTemplateByResourcesWithOptions(request, runtime);
}

model UpdateTemplateRequest {
  templateURL?: string(name='TemplateURL'),
  templateName?: string(name='TemplateName'),
  description?: string(name='Description'),
  templateBody?: string(name='TemplateBody'),
  templateId?: string(name='TemplateId'),
}

model UpdateTemplateResponseBody = {
  requestId?: string(name='RequestId'),
  templateId?: string(name='TemplateId'),
}

model UpdateTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTemplateResponseBody(name='body'),
}

async function updateTemplateWithOptions(request: UpdateTemplateRequest, runtime: Util.RuntimeOptions): UpdateTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateTemplate', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateTemplate(request: UpdateTemplateRequest): UpdateTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTemplateWithOptions(request, runtime);
}

model ValidateTemplateRequest {
  templateURL?: string(name='TemplateURL'),
  regionId?: string(name='RegionId'),
  templateBody?: string(name='TemplateBody'),
}

model ValidateTemplateResponseBody = {
  description?: string(name='Description'),
  parameters?: [  map[string]any ](name='Parameters'),
  requestId?: string(name='RequestId'),
  outputs?: [ 
    {
      outputKey?: string(name='OutputKey'),
      description?: string(name='Description'),
    }
  ](name='Outputs'),
}

model ValidateTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: ValidateTemplateResponseBody(name='body'),
}

async function validateTemplateWithOptions(request: ValidateTemplateRequest, runtime: Util.RuntimeOptions): ValidateTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ValidateTemplate', '2019-09-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function validateTemplate(request: ValidateTemplateRequest): ValidateTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return validateTemplateWithOptions(request, runtime);
}

