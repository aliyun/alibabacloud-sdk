/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'ROS';
  @version = '2019-09-10';
  @endpointRule = 'central';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CancelStackOperationRequest {
  allowedStackOperations?: [ string ](name='AllowedStackOperations', position='Query'),
  cancelType?: string(name='CancelType', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  stackId: string(name='StackId', position='Query'),
}

model CancelStackOperationResponseBody = {
  requestId?: string(name='RequestId'),
}

model CancelStackOperationResponse = {
  headers: map[string]string(name='headers'),
  body: CancelStackOperationResponseBody(name='body'),
}

async function cancelStackOperation(request: CancelStackOperationRequest): CancelStackOperationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelStackOperation', 'POST', '/', 'json', false, 'json', request);
}

model CancelUpdateStackRequest {
  cancelType?: string(name='CancelType', example='Safe', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  stackId: string(name='StackId', example='4a6c9851-3b0f-4f5f-b4ca-a14bf691****', position='Query'),
}

model CancelUpdateStackResponseBody = {
  requestId?: string(name='RequestId', example='B288A0BE-D927-4888-B0F7-B35EF84B6E6F'),
}

model CancelUpdateStackResponse = {
  headers: map[string]string(name='headers'),
  body: CancelUpdateStackResponseBody(name='body'),
}

async function cancelUpdateStack(request: CancelUpdateStackRequest): CancelUpdateStackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelUpdateStack', 'POST', '/V2/CancelUpdateStack', 'json', false, 'json', request);
}

model ContinueCreateStackRequest {
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  mode?: string(name='Mode', example='Recreate', position='Query'),
  parallelism?: long(name='Parallelism', example='1', position='Query'),
  parameters?: [ 
    {
      parameterKey: string(name='ParameterKey', example='Amount'),
      parameterValue: string(name='ParameterValue', example='12'),
    }
  ](name='Parameters', description='test', position='Query'),
  ramRoleName?: string(name='RamRoleName', example='test-role', position='Query'),
  recreatingOptions?: [ string ](name='RecreatingOptions', position='Query'),
  recreatingResources?: [ string ](name='RecreatingResources', example='WebServer', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  stackId: string(name='StackId', example='4a6c9851-3b0f-4f5f-b4ca-a14bf691****', position='Query'),
  templateBody?: string(name='TemplateBody', example='{"ROSTemplateFormatVersion": "2015-09-01"}', position='Query'),
  templateId?: string(name='TemplateId', example='5ecd1e10-b0e9-4389-a565-e4c15efc****', position='Query'),
  templateURL?: string(name='TemplateURL', example='oss://ros-template/demo', position='Query'),
  templateVersion?: string(name='TemplateVersion', example='v1', position='Query'),
}

model ContinueCreateStackResponseBody = {
  dryRunResult?: {
    parametersAllowedToBeModified?: [ string ](name='ParametersAllowedToBeModified'),
    parametersConditionallyAllowedToBeModified?: [ string ](name='ParametersConditionallyAllowedToBeModified'),
    parametersNotAllowedToBeModified?: [ string ](name='ParametersNotAllowedToBeModified'),
  }(name='DryRunResult'),
  requestId?: string(name='RequestId', example='B288A0BE-D927-4888-B0F7-B35EF84B6E6'),
  stackId?: string(name='StackId', example='4a6c9851-3b0f-4f5f-b4ca-a14bf691****'),
}

model ContinueCreateStackResponse = {
  headers: map[string]string(name='headers'),
  body: ContinueCreateStackResponseBody(name='body'),
}

async function continueCreateStack(request: ContinueCreateStackRequest): ContinueCreateStackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ContinueCreateStack', 'POST', '/', 'json', false, 'json', request);
}

model CreateChangeSetRequest {
  changeSetName: string(name='ChangeSetName', example='MyChangeSet', position='Query'),
  changeSetType?: string(name='ChangeSetType', example='UPDATE', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  description?: string(name='Description', example='It is a demo.', position='Query'),
  disableRollback?: boolean(name='DisableRollback', example='false', position='Query'),
  notificationURLs?: [ string ](name='NotificationURLs', example='http://my-site.com/ros-notify', position='Query'),
  parallelism?: long(name='Parallelism', example='1', position='Query'),
  parameters?: [ 
    {
      parameterKey: string(name='ParameterKey', example='Amount'),
      parameterValue: string(name='ParameterValue', example='12'),
    }
  ](name='Parameters', position='Query'),
  ramRoleName?: string(name='RamRoleName', example='test-role', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  replacementOption?: string(name='ReplacementOption', example='Disabled', position='Query'),
  resourcesToImport?: [ 
    {
      logicalResourceId: string(name='LogicalResourceId', example='Vpc'),
      resourceIdentifier: string(name='ResourceIdentifier', example='{"VpcId": "vpc-2zevx9ios******"}'),
      resourceType: string(name='ResourceType', example='ALIYUN::ECS::VPC'),
    }
  ](name='ResourcesToImport', position='Query'),
  stackId?: string(name='StackId', example='4a6c9851-3b0f-4f5f-b4ca-a14bf691****', position='Query'),
  stackName?: string(name='StackName', example='MyStack', position='Query'),
  stackPolicyBody?: string(name='StackPolicyBody', example='{"Statement":[{"Effect":"Allow","Action":"Update:*","Principal":"*","Resource":"*"}]}', position='Query'),
  stackPolicyDuringUpdateBody?: string(name='StackPolicyDuringUpdateBody', example='{"Statement":[{"Effect":"Allow","Action":"Update:*","Principal":"*","Resource":"*"}]}', position='Query'),
  stackPolicyDuringUpdateURL?: string(name='StackPolicyDuringUpdateURL', example='oss://ros/stack-policy/demo', position='Query'),
  stackPolicyURL?: string(name='StackPolicyURL', example='oss://ros/stack-policy/demo', position='Query'),
  templateBody?: string(name='TemplateBody', example='{"ROSTemplateFormatVersion":"2015-09-01"}', position='Query'),
  templateId?: string(name='TemplateId', example='5ecd1e10-b0e9-4389-a565-e4c15efc****', position='Query'),
  templateScratchId?: string(name='TemplateScratchId', example='4a6c9851-3b0f-4f5f-b4ca-a14bf691****', position='Query'),
  templateURL?: string(name='TemplateURL', example='oss://ros/template/demo', position='Query'),
  templateVersion?: string(name='TemplateVersion', example='v1', position='Query'),
  timeoutInMinutes?: long(name='TimeoutInMinutes', example='12', position='Query'),
  usePreviousParameters?: boolean(name='UsePreviousParameters', example='true', position='Query'),
}

model CreateChangeSetResponseBody = {
  changeSetId?: string(name='ChangeSetId', example='e85abe0c-6528-43fb-ae93-fdf8de22****'),
  requestId?: string(name='RequestId', example='B288A0BE-D927-4888-B0F7-B35EF84B6E6F'),
  stackId?: string(name='StackId', example='4a6c9851-3b0f-4f5f-b4ca-a14bf691****'),
}

model CreateChangeSetResponse = {
  headers: map[string]string(name='headers'),
  body: CreateChangeSetResponseBody(name='body'),
}

async function createChangeSet(request: CreateChangeSetRequest): CreateChangeSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateChangeSet', 'POST', '/', 'json', false, 'json', request);
}

model CreateStackRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  createOption?: string(name='CreateOption', example='KeepStackOnCreationComplete', position='Query'),
  deletionProtection?: string(name='DeletionProtection', example='Enabled', position='Query'),
  disableRollback?: boolean(name='DisableRollback', example='false', position='Query'),
  notificationURLs?: [ string ](name='NotificationURLs', example='http://my-site.com/ros-event', position='Query'),
  parallelism?: long(name='Parallelism', example='1', position='Query'),
  parameters?: [ 
    {
      parameterKey: string(name='ParameterKey', example='InstanceId'),
      parameterValue: string(name='ParameterValue', example='i-xxxxxx'),
    }
  ](name='Parameters', description='test', position='Query'),
  ramRoleName?: string(name='RamRoleName', example='test-role', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4ph6aiy****', position='Query'),
  stackName: string(name='StackName', example='MyStack', position='Query'),
  stackPolicyBody?: string(name='StackPolicyBody', example='{"Statement": [{"Action": "Update:*", "Resource": "*", "Effect": "Allow", "Principal": "*"}]}', position='Query'),
  stackPolicyURL?: string(name='StackPolicyURL', example='oss://ros-stack-policy/demo', position='Query'),
  tags?: [ 
    {
      key: string(name='Key', example='usage'),
      value?: string(name='Value', example='test'),
    }
  ](name='Tags', description='test', position='Query'),
  templateBody?: string(name='TemplateBody', example='{"ROSTemplateFormatVersion":"2015-09-01"}', position='Query'),
  templateId?: string(name='TemplateId', example='5ecd1e10-b0e9-4389-a565-e4c15efc****', position='Query'),
  templateScratchId?: string(name='TemplateScratchId', example='ts-aa9c62feab844a6b****', position='Query'),
  templateScratchRegionId?: string(name='TemplateScratchRegionId', example='cn-hangzhou', position='Query'),
  templateURL?: string(name='TemplateURL', example='oss://ros-template/demo', position='Query'),
  templateVersion?: string(name='TemplateVersion', example='v1', position='Query'),
  timeoutInMinutes?: long(name='TimeoutInMinutes', example='10', position='Query'),
}

model CreateStackResponseBody = {
  requestId?: string(name='RequestId', example='B288A0BE-D927-4888-B0F7-B35EF84B6E6F'),
  stackId?: string(name='StackId', example='4a6c9851-3b0f-4f5f-b4ca-a14bf691****'),
}

model CreateStackResponse = {
  headers: map[string]string(name='headers'),
  body: CreateStackResponseBody(name='body'),
}

async function createStack(request: CreateStackRequest): CreateStackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateStack', 'POST', '/', 'json', false, 'json', request);
}

model CreateStackGroupRequest {
  administrationRoleName?: string(name='AdministrationRoleName', example='AliyunROSStackGroupAdministrationRole', position='Query'),
  autoDeployment?: {
    enabled?: boolean(name='Enabled', example='true'),
    retainStacksOnAccountRemoval?: boolean(name='RetainStacksOnAccountRemoval', example='true'),
  }(name='AutoDeployment', example='{"Enabled": true, "RetainStacksOnAccountRemoval": true}', shrink='json', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  description?: string(name='Description', example='StackGroup Description', position='Query'),
  executionRoleName?: string(name='ExecutionRoleName', example='AliyunROSStackGroupExecutionRole', position='Query'),
  parameters?: [ 
    {
      parameterKey: string(name='ParameterKey', example='Amount'),
      parameterValue: string(name='ParameterValue', example='12'),
    }
  ](name='Parameters', description='test', position='Query'),
  permissionModel?: string(name='PermissionModel', example='SELF_MANAGED', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4ph6aiy****', position='Query'),
  stackGroupName: string(name='StackGroupName', example='MyStackGroup', position='Query'),
  tags?: [ 
    {
      key: string(name='Key', example='usage'),
      value?: string(name='Value', example='test'),
    }
  ](name='Tags', position='Query'),
  templateBody?: string(name='TemplateBody', example='{"ROSTemplateFormatVersion":"2015-09-01"}', position='Query'),
  templateId?: string(name='TemplateId', example='5ecd1e10-b0e9-4389-a565-e4c15efc****', position='Query'),
  templateURL?: string(name='TemplateURL', example='oss://ros-template/demo', position='Query'),
  templateVersion?: string(name='TemplateVersion', example='v1', position='Query'),
}

model CreateStackGroupResponseBody = {
  requestId?: string(name='RequestId', example='14A07460-EBE7-47CA-9757-12CC4761D47A'),
  stackGroupId?: string(name='StackGroupId', example='2c036e78-9e82-428e-afd6-177f5d04****'),
}

model CreateStackGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateStackGroupResponseBody(name='body'),
}

async function createStackGroup(request: CreateStackGroupRequest): CreateStackGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateStackGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateStackInstancesRequest {
  accountIds?: [ string ](name='AccountIds', example='["151266687691****","141261387191****"]', shrink='json', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  deploymentTargets?: {
    rdFolderIds?: [ string ](name='RdFolderIds'),
  }(name='DeploymentTargets', example='{"RdFolderId": "fd-4PvlVLOL8v"}', shrink='json', position='Query'),
  disableRollback?: boolean(name='DisableRollback', example='false', position='Query'),
  operationDescription?: string(name='OperationDescription', example='Create stack instances in hangzhou and beijing', position='Query'),
  operationPreferences?: map[string]any(name='OperationPreferences', example='{"FailureToleranceCount": 1, "MaxConcurrentCount": 2}', shrink='json', position='Query'),
  parameterOverrides?: [ 
    {
      parameterKey: string(name='ParameterKey', example='Amount'),
      parameterValue: string(name='ParameterValue', example='1'),
    }
  ](name='ParameterOverrides', description='test', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  regionIds: [ string ](name='RegionIds', example='["cn-hangzhou", "cn-beijing"]', shrink='json', position='Query'),
  stackGroupName: string(name='StackGroupName', example='MyStackGroup', position='Query'),
  timeoutInMinutes?: long(name='TimeoutInMinutes', example='10', minimum=10, maximum=1440, position='Query'),
}

model CreateStackInstancesResponseBody = {
  operationId?: string(name='OperationId', example='6da106ca-1784-4a6f-a7e1-e723863d****'),
  requestId?: string(name='RequestId', example='14A07460-EBE7-47CA-9757-12CC4761D47A'),
}

model CreateStackInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: CreateStackInstancesResponseBody(name='body'),
}

async function createStackInstances(request: CreateStackInstancesRequest): CreateStackInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateStackInstances', 'POST', '/', 'json', false, 'json', request);
}

model CreateTemplateRequest {
  description?: string(name='Description', example='It is a demo.', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4ph6aiy****', position='Query'),
  tags?: [ 
    {
      key: string(name='Key', example='usage'),
      value?: string(name='Value', example='test'),
    }
  ](name='Tags', position='Query'),
  templateBody?: string(name='TemplateBody', example='{"ROSTemplateFormatVersion":"2015-09-01"}', position='Query'),
  templateName: string(name='TemplateName', example='MyTemplate', position='Query'),
  templateURL?: string(name='TemplateURL', example='oss://ros/template/demo', position='Query'),
}

model CreateTemplateResponseBody = {
  requestId?: string(name='RequestId', example='8C5D90E1-66B6-496C-9371-3807F8DA80A8'),
  templateId?: string(name='TemplateId', example='5ecd1e10-b0e9-4389-a565-e4c15efc****'),
}

model CreateTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTemplateResponseBody(name='body'),
}

async function createTemplate(request: CreateTemplateRequest): CreateTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTemplate', 'POST', '/', 'json', false, 'json', request);
}

model CreateTemplateScratchRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  description?: string(name='Description', position='Query'),
  executionMode?: string(name='ExecutionMode', example='Sync', position='Query'),
  logicalIdStrategy?: string(name='LogicalIdStrategy', example='LongTypePrefixAndIndexSuffix', position='Query'),
  preferenceParameters?: [ 
    {
      parameterKey: string(name='ParameterKey', example='DeletionPolicy'),
      parameterValue: string(name='ParameterValue', example='Retain'),
    }
  ](name='PreferenceParameters', shrink='json', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  sourceResourceGroup?: {
    resourceGroupId: string(name='ResourceGroupId', example='rg-acfmzawhxxc****'),
    resourceTypeFilter?: [ string ](name='ResourceTypeFilter'),
  }(name='SourceResourceGroup', shrink='json', position='Query'),
  sourceResources?: [ 
    {
      resourceId: string(name='ResourceId', example='vpc-bp1m6fww66xbntjyc****'),
      resourceType: string(name='ResourceType', example='ALIYUN::ECS::VPC'),
    }
  ](name='SourceResources', shrink='json', position='Query'),
  sourceTag?: {
    resourceTags: map[string]any(name='ResourceTags', example='{"a": "b"}'),
    resourceTypeFilter?: [ string ](name='ResourceTypeFilter'),
  }(name='SourceTag', shrink='json', position='Query'),
  tags?: [ 
    {
      key: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags', position='Query'),
  templateScratchType: string(name='TemplateScratchType', example='ArchitectureReplication', position='Query'),
}

model CreateTemplateScratchResponseBody = {
  requestId?: string(name='RequestId', example='84980977-22F0-5421-B30D-B201311D5DCF'),
  templateScratchId?: string(name='TemplateScratchId', example='ts-7f7a704cf71c49a6****'),
}

model CreateTemplateScratchResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTemplateScratchResponseBody(name='body'),
}

async function createTemplateScratch(request: CreateTemplateScratchRequest): CreateTemplateScratchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTemplateScratch', 'POST', '/', 'json', false, 'json', request);
}

model DeleteChangeSetRequest {
  changeSetId: string(name='ChangeSetId', example='1f6521a4-05af-4975-afe9-bc4b45ad****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DeleteChangeSetResponseBody = {
  requestId?: string(name='RequestId', example='B288A0BE-D927-4888-B0F7-B35EF84B6E6F'),
}

model DeleteChangeSetResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteChangeSetResponseBody(name='body'),
}

async function deleteChangeSet(request: DeleteChangeSetRequest): DeleteChangeSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteChangeSet', 'POST', '/V2/DeleteChangeSet', 'json', false, 'json', request);
}

model DeleteStackRequest {
  ramRoleName?: string(name='RamRoleName', example='test-role', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  retainAllResources?: boolean(name='RetainAllResources', example='false', position='Query'),
  retainResources?: [ string ](name='RetainResources', example='WebServer', position='Query'),
  stackId: string(name='StackId', example='4a6c9851-3b0f-4f5f-b4ca-a14bf691****', position='Query'),
}

model DeleteStackResponseBody = {
  requestId?: string(name='RequestId', example='B288A0BE-D927-4888-B0F7-B35EF84B6E6F'),
}

model DeleteStackResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteStackResponseBody(name='body'),
}

async function deleteStack(request: DeleteStackRequest): DeleteStackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteStack', 'POST', '/', 'json', false, 'json', request);
}

model DeleteStackGroupRequest {
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  stackGroupName: string(name='StackGroupName', example='MyStackGroup', position='Query'),
}

model DeleteStackGroupResponseBody = {
  requestId?: string(name='RequestId', example='14A07460-EBE7-47CA-9757-12CC4761D47A'),
}

model DeleteStackGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteStackGroupResponseBody(name='body'),
}

async function deleteStackGroup(request: DeleteStackGroupRequest): DeleteStackGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteStackGroup', 'POST', '/V2/DeleteStackGroup', 'json', false, 'json', request);
}

model DeleteStackInstancesRequest {
  accountIds?: [ string ](name='AccountIds', example='["151266687691****"]', shrink='json', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  deploymentTargets?: {
    rdFolderIds?: [ string ](name='RdFolderIds'),
  }(name='DeploymentTargets', shrink='json', position='Query'),
  operationDescription?: string(name='OperationDescription', example='Delete stack instances in hangzhou and beijing', position='Query'),
  operationPreferences?: map[string]any(name='OperationPreferences', example='{"FailureToleranceCount": 1, "MaxConcurrentCount": 2}', shrink='json', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  regionIds: [ string ](name='RegionIds', example='["cn-hangzhou", "cn-beijing"]', shrink='json', position='Query'),
  retainStacks: boolean(name='RetainStacks', example='false', position='Query'),
  stackGroupName: string(name='StackGroupName', example='MyStackGroup', position='Query'),
}

model DeleteStackInstancesResponseBody = {
  operationId?: string(name='OperationId', example='6da106ca-1784-4a6f-a7e1-e723863d****'),
  requestId?: string(name='RequestId', example='14A07460-EBE7-47CA-9757-12CC4761D47A'),
}

model DeleteStackInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteStackInstancesResponseBody(name='body'),
}

async function deleteStackInstances(request: DeleteStackInstancesRequest): DeleteStackInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteStackInstances', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTemplateRequest {
  templateId: string(name='TemplateId', example='5ecd1e10-b0e9-4389-a565-e4c15efc****', position='Query'),
}

model DeleteTemplateResponseBody = {
  requestId?: string(name='RequestId', example='8C5D90E1-66B6-496C-9371-3807F8DA80A8'),
}

model DeleteTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTemplateResponseBody(name='body'),
}

async function deleteTemplate(request: DeleteTemplateRequest): DeleteTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTemplate', 'POST', '/V2/DeleteTemplate', 'json', false, 'json', request);
}

model DeleteTemplateScratchRequest {
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  templateScratchId: string(name='TemplateScratchId', example='ts-4f83704400994409****', position='Query'),
}

model DeleteTemplateScratchResponseBody = {
  requestId?: string(name='RequestId', example='1B9C6333-5904-5A1E-9845-CB17A369AFDC'),
}

model DeleteTemplateScratchResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTemplateScratchResponseBody(name='body'),
}

async function deleteTemplateScratch(request: DeleteTemplateScratchRequest): DeleteTemplateScratchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTemplateScratch', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh-CN', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint', example='ros.aliyuncs.com'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId', example='59F0F0A0-A637-4292-9B91-251EF5010913'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/V2/DescribeRegions', 'json', false, 'json', request);
}

model DetectStackDriftRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  logicalResourceId?: [ string ](name='LogicalResourceId', example='ScalingRule', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  stackId: string(name='StackId', example='4a6c9851-3b0f-4f5f-b4ca-a14bf691****', position='Query'),
}

model DetectStackDriftResponseBody = {
  driftDetectionId?: string(name='DriftDetectionId', example='a7044f0d-6f2e-4128-a307-4524ef88****'),
  requestId?: string(name='RequestId', example='B288A0BE-D927-4888-B0F7-B35EF84B6E6'),
}

model DetectStackDriftResponse = {
  headers: map[string]string(name='headers'),
  body: DetectStackDriftResponseBody(name='body'),
}

async function detectStackDrift(request: DetectStackDriftRequest): DetectStackDriftResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetectStackDrift', 'POST', '/V2/DetectStackDrift', 'json', false, 'json', request);
}

model DetectStackGroupDriftRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  operationPreferences?: map[string]any(name='OperationPreferences', example='{"FailureToleranceCount": 1, "MaxConcurrentCount": 2}', shrink='json', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  stackGroupName: string(name='StackGroupName', example='MyStackGroup', position='Query'),
}

model DetectStackGroupDriftResponseBody = {
  operationId?: string(name='OperationId', example='6da106ca-1784-4a6f-a7e1-e723863d****'),
  requestId?: string(name='RequestId', example='B288A0BE-D927-4888-B0F7-B35EF84B6E6'),
}

model DetectStackGroupDriftResponse = {
  headers: map[string]string(name='headers'),
  body: DetectStackGroupDriftResponseBody(name='body'),
}

async function detectStackGroupDrift(request: DetectStackGroupDriftRequest): DetectStackGroupDriftResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetectStackGroupDrift', 'POST', '/V2/DetectStackGroupDrift', 'json', false, 'json', request);
}

model DetectStackResourceDriftRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  logicalResourceId: string(name='LogicalResourceId', example='ScalingRuleName', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  stackId: string(name='StackId', example='4a6c9851-3b0f-4f5f-b4ca-a14bf691****', position='Query'),
}

model DetectStackResourceDriftResponseBody = {
  actualProperties?: string(name='ActualProperties', example='{"ScalingRuleName": "test1"}'),
  driftDetectionTime?: string(name='DriftDetectionTime', example='2020-02-27T07:47:47'),
  expectedProperties?: string(name='ExpectedProperties', example='{"ScalingRuleName": "test2"}'),
  logicalResourceId?: string(name='LogicalResourceId', example='ScalingRule'),
  physicalResourceId?: string(name='PhysicalResourceId', example='asr-2ze4zzc3kf9yz1kd****'),
  propertyDifferences?: [ 
    {
      actualValue?: string(name='ActualValue', example='test1'),
      differenceType?: string(name='DifferenceType', example='NOT_EQUAL'),
      expectedValue?: string(name='ExpectedValue', example='test2'),
      propertyPath?: string(name='PropertyPath', example='/ScalingRuleName'),
    }
  ](name='PropertyDifferences'),
  requestId?: string(name='RequestId', example='B288A0BE-D927-4888-B0F7-B35EF84B6E6F'),
  resourceDriftStatus?: string(name='ResourceDriftStatus', example='MODIFIED'),
  resourceType?: string(name='ResourceType', example='ALIYUN::ESS::ScalingRule'),
  stackId?: string(name='StackId', example='4a6c9851-3b0f-4f5f-b4ca-a14bf691****'),
}

model DetectStackResourceDriftResponse = {
  headers: map[string]string(name='headers'),
  body: DetectStackResourceDriftResponseBody(name='body'),
}

async function detectStackResourceDrift(request: DetectStackResourceDriftRequest): DetectStackResourceDriftResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetectStackResourceDrift', 'POST', '/', 'json', false, 'json', request);
}

model ExecuteChangeSetRequest {
  changeSetId: string(name='ChangeSetId', example='1f6521a4-05af-4975-afe9-bc4b45ad****', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ExecuteChangeSetResponseBody = {
  requestId?: string(name='RequestId', example='B288A0BE-D927-4888-B0F7-B35EF84B6E6F'),
}

model ExecuteChangeSetResponse = {
  headers: map[string]string(name='headers'),
  body: ExecuteChangeSetResponseBody(name='body'),
}

async function executeChangeSet(request: ExecuteChangeSetRequest): ExecuteChangeSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExecuteChangeSet', 'POST', '/', 'json', false, 'json', request);
}

model GenerateTemplateByScratchRequest {
  provisionRegionId?: string(name='ProvisionRegionId', example='cn-hangzhou', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  templateScratchId: string(name='TemplateScratchId', example='ts-aa9c62feab844a6b****', position='Query'),
}

model GenerateTemplateByScratchResponseBody = {
  requestId?: string(name='RequestId', example='D22C1D13-D74E-558C-AF68-1B4C05FA6F1A'),
  resourcesToImport?: [ 
    {
      logicalResourceId?: string(name='LogicalResourceId', example='ECSVPC_001'),
      resourceIdentifier?: map[string]any(name='ResourceIdentifier', example='{"VpcId": "vpc-bp1m6fww66xbntjyc****" }'),
      resourceType?: string(name='ResourceType', example='ALIYUN::ECS::VPC'),
    }
  ](name='ResourcesToImport'),
  templateBody?: string(name='TemplateBody', example='{\\"ROSTemplateFormatVersion\\": \\"2015-09-01\\", \\"Resources\\": {\\"ECSVPC_001\\": {\\"DeletionPolicy\\": \\"Retain\\", \\"Type\\": \\"ALIYUN::ECS::VPC\\", \\"Properties\\": {\\"CidrBlock\\": \\"172.16.0.0/12\\", \\"VpcName\\": \\"MyTestVpc\\", \\"EnableIpv6\\": false}}}}'),
}

model GenerateTemplateByScratchResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateTemplateByScratchResponseBody(name='body'),
}

async function generateTemplateByScratch(request: GenerateTemplateByScratchRequest): GenerateTemplateByScratchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateTemplateByScratch', 'POST', '/', 'json', false, 'json', request);
}

model GenerateTemplatePolicyRequest {
  operationTypes?: [ string ](name='OperationTypes', position='Query'),
  templateBody?: string(name='TemplateBody', example='{"ROSTemplateFormatVersion":"2015-09-01"}', position='Query'),
  templateId?: string(name='TemplateId', example='5ecd1e10-b0e9-4389-a565-e4c15efc****', position='Query'),
  templateURL?: string(name='TemplateURL', example='oss://ros/template/demo', position='Query'),
  templateVersion?: string(name='TemplateVersion', example='v1', position='Query'),
}

model GenerateTemplatePolicyResponseBody = {
  policy?: {
    statement?: [ 
      {
        action?: [ string ](name='Action'),
        effect?: string(name='Effect', example='Allow'),
        resource?: string(name='Resource', example='*'),
      }
    ](name='Statement'),
    version?: string(name='Version', example='1'),
  }(name='Policy'),
  requestId?: string(name='RequestId', example='B288A0BE-D927-4888-B0F7-B35EF84B6E6'),
}

model GenerateTemplatePolicyResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateTemplatePolicyResponseBody(name='body'),
}

async function generateTemplatePolicy(request: GenerateTemplatePolicyRequest): GenerateTemplatePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateTemplatePolicy', 'POST', '/', 'json', false, 'json', request);
}

model GetChangeSetRequest {
  changeSetId: string(name='ChangeSetId', example='4c11658d-bd47-4dd0-ba64-727edc62****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  showTemplate?: boolean(name='ShowTemplate', example='false', position='Query'),
}

model GetChangeSetResponseBody = {
  changeSetId?: string(name='ChangeSetId', example='4c11658d-bd47-4dd0-ba64-727edc62****'),
  changeSetName?: string(name='ChangeSetName', example='ChangeSet_template'),
  changeSetType?: string(name='ChangeSetType', example='UPDATE'),
  changes?: [  map[string]any ](name='Changes'),
  createTime?: string(name='CreateTime', example='2021-12-01T02:20:56'),
  description?: string(name='Description', example='It is a demo.'),
  disableRollback?: boolean(name='DisableRollback', example='false'),
  executionStatus?: string(name='ExecutionStatus', example='AVAILABLE'),
  log?: {
    terraformLogs?: [ 
      {
        command?: string(name='Command', example='apply'),
        content?: string(name='Content', example='Apply complete! Resources: 42 added, 0 changed, 0 destroyed.'),
        stream?: string(name='Stream', example='stdout'),
      }
    ](name='TerraformLogs'),
  }(name='Log'),
  parameters?: [ 
    {
      parameterKey?: string(name='ParameterKey', example='ALIYUN::Region'),
      parameterValue?: string(name='ParameterValue', example='cn-hangzhou'),
    }
  ](name='Parameters'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requestId?: string(name='RequestId', example='3766EE04-76DD-50F9-9C23-3AF136CD5708'),
  stackId?: string(name='StackId', example='a486fc19-ebb7-4ce9-a70b-554a7c3d****'),
  stackName?: string(name='StackName', example='stack_2021-10-13'),
  status?: string(name='Status', example='CREATE_COMPLETE'),
  statusReason?: string(name='StatusReason', example='too many changes.'),
  templateBody?: string(name='TemplateBody', example='{"ROSTemplateFormatVersion": "2015-09-01"}'),
  timeoutInMinutes?: int32(name='TimeoutInMinutes', example='60'),
}

model GetChangeSetResponse = {
  headers: map[string]string(name='headers'),
  body: GetChangeSetResponseBody(name='body'),
}

async function getChangeSet(request: GetChangeSetRequest): GetChangeSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetChangeSet', 'POST', '/', 'json', false, 'json', request);
}

model GetFeatureDetailsRequest {
  feature: string(name='Feature', example='Terraform', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model GetFeatureDetailsResponseBody = {
  requestId?: string(name='RequestId', example='EBF833DA-D0E2-52BE-92E2-59CA56BE834E'),
  resourceCleaner?: {
    supportedResourceTypes?: [ 
      {
        resourceType?: string(name='ResourceType', example='ECS:Instance'),
        sideEffects?: [ string ](name='SideEffects'),
        supportedFilters?: [ string ](name='SupportedFilters'),
      }
    ](name='SupportedResourceTypes'),
  }(name='ResourceCleaner'),
  templateScratch?: {
    supportedResourceTypes?: [ 
      {
        resourceType?: string(name='ResourceType', example='ALIYUN::ECS::Disk'),
        sourceResourceGroupSupported?: boolean(name='SourceResourceGroupSupported', example='true'),
        sourceResourcesSupported?: boolean(name='SourceResourcesSupported', example='true'),
        sourceSupported?: boolean(name='SourceSupported', example='true'),
        sourceTagSupported?: boolean(name='SourceTagSupported', example='true'),
      }
    ](name='SupportedResourceTypes'),
  }(name='TemplateScratch'),
  terraform?: {
    supportedResourceTypes?: {
      customTag?: [ string ](name='CustomTag'),
      estimateCost?: [ string ](name='EstimateCost'),
      resourceGroup?: [ string ](name='ResourceGroup'),
      stackOperationRisk?: {
        deleteStack?: [ string ](name='DeleteStack'),
      }(name='StackOperationRisk'),
      systemTag?: [ string ](name='SystemTag'),
    }(name='SupportedResourceTypes'),
    supportedVersions?: [ 
      {
        providerVersions?: [ 
          {
            providerName?: string(name='ProviderName', example='alicloud'),
            supportedVersions?: [ string ](name='SupportedVersions'),
          }
        ](name='ProviderVersions'),
        terraformVersion?: string(name='TerraformVersion', example='1.0.11'),
        transform?: string(name='Transform', example='Aliyun::Terraform-v1.0'),
        updateAllowedTransforms?: [ string ](name='UpdateAllowedTransforms'),
      }
    ](name='SupportedVersions'),
  }(name='Terraform'),
}

model GetFeatureDetailsResponse = {
  headers: map[string]string(name='headers'),
  body: GetFeatureDetailsResponseBody(name='body'),
}

async function getFeatureDetails(request: GetFeatureDetailsRequest): GetFeatureDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFeatureDetails', 'POST', '/', 'json', false, 'json', request);
}

model GetResourceTypeRequest {
  resourceType: string(name='ResourceType', example='ALIYUN::ROS::WaitConditionHandle', position='Query'),
}

model GetResourceTypeResponseBody = {
  attributes?: map[string]any(name='Attributes'),
  entityType?: string(name='EntityType', example='Resource'),
  properties?: map[string]any(name='Properties'),
  requestId?: string(name='RequestId', example='A28FBA2E-B6B3-5822-AA45-AB875EF23641'),
  resourceType?: string(name='ResourceType', example='ALIYUN::ROS::WaitConditionHandle'),
  supportDriftDetection?: boolean(name='SupportDriftDetection', example='false'),
  supportScratchDetection?: boolean(name='SupportScratchDetection', example='false'),
}

model GetResourceTypeResponse = {
  headers: map[string]string(name='headers'),
  body: GetResourceTypeResponseBody(name='body'),
}

async function getResourceType(request: GetResourceTypeRequest): GetResourceTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetResourceType', 'POST', '/', 'json', false, 'json', request);
}

model GetResourceTypeTemplateRequest {
  resourceType: string(name='ResourceType', example='ALIYUN::ECS::VPC', position='Query'),
}

model GetResourceTypeTemplateResponseBody = {
  requestId?: string(name='RequestId', example='87F54B2B-AEF0-4C33-A72A-3F8856A575E9'),
  templateBody?: map[string]any(name='TemplateBody', example='{"ROSTemplateFormatVersion": "2015-09-01"}'),
}

model GetResourceTypeTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: GetResourceTypeTemplateResponseBody(name='body'),
}

async function getResourceTypeTemplate(request: GetResourceTypeTemplateRequest): GetResourceTypeTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetResourceTypeTemplate', 'POST', '/V2/GetResourceTypeTemplate', 'json', false, 'json', request);
}

model GetServiceProvisionsRequest {
  parameters?: [ 
    {
      parameterKey: string(name='ParameterKey', example='Amount'),
      parameterValue: string(name='ParameterValue', example='12'),
    }
  ](name='Parameters', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  services?: [ 
    {
      serviceName: string(name='ServiceName', example='EHPC'),
    }
  ](name='Services', position='Query'),
  templateBody?: string(name='TemplateBody', example='{"ROSTemplateFormatVersion": "2015-09-01","Resources": {"ApiGateway": {"Type": "ALIYUN::ApiGateway::Group","Properties": { "GroupName": "ros_example" }},"FC": {"Type": "ALIYUN::FC::Service","Properties": {"ServiceName": "ros_example"}}}}', position='Query'),
  templateId?: string(name='TemplateId', example='5ecd1e10-b0e9-4389-a565-e4c15efc****', position='Query'),
  templateURL?: string(name='TemplateURL', example='oss://ros-template/demo', position='Query'),
  templateVersion?: string(name='TemplateVersion', example='v1', position='Query'),
}

model GetServiceProvisionsResponseBody = {
  requestId?: string(name='RequestId', example='A9938C04-26AD-5EFA-B394-EA7866842DFF'),
  serviceProvisions?: [ 
    {
      autoEnableService?: boolean(name='AutoEnableService', example='false'),
      dependentServiceNames?: [ string ](name='DependentServiceNames'),
      enableURL?: string(name='EnableURL', example='https://common-buy.aliyun.com/?commodityCode=nas'),
      roleProvision?: {
        authorizationURL?: string(name='AuthorizationURL', example='https://ehpc.console.aliyun.com/'),
        roles?: [ 
          {
            apiForCreation?: {
              apiName?: string(name='ApiName'),
              apiProductId?: string(name='ApiProductId'),
              apiType?: string(name='ApiType'),
              parameters?: map[string]any(name='Parameters'),
            }(name='ApiForCreation'),
            created?: boolean(name='Created', example='true'),
            function?: string(name='Function', example='Default'),
            roleName?: string(name='RoleName', example='AliyunServiceRoleForEHPC'),
          }
        ](name='Roles'),
      }(name='RoleProvision'),
      serviceName?: string(name='ServiceName', example='EHPC'),
      status?: string(name='Status', example='Enabled'),
      statusReason?: string(name='StatusReason', example='No permission.'),
    }
  ](name='ServiceProvisions'),
}

model GetServiceProvisionsResponse = {
  headers: map[string]string(name='headers'),
  body: GetServiceProvisionsResponseBody(name='body'),
}

async function getServiceProvisions(request: GetServiceProvisionsRequest): GetServiceProvisionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetServiceProvisions', 'POST', '/', 'json', false, 'json', request);
}

model GetStackRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  logOption?: string(name='LogOption', example='Stack', position='Query'),
  outputOption?: string(name='OutputOption', example='Disabled', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  showResourceProgress?: string(name='ShowResourceProgress', example='Disabled', position='Query'),
  stackId: string(name='StackId', example='c754d2a4-28f1-46df-b557-9586173a****', position='Query'),
}

model GetStackResponseBody = {
  createTime?: string(name='CreateTime', example='2020-09-16T08:21:40'),
  deletionProtection?: string(name='DeletionProtection', example='Disabled'),
  description?: string(name='Description', example='Create a VPC.'),
  disableRollback?: boolean(name='DisableRollback', example='false'),
  driftDetectionTime?: string(name='DriftDetectionTime', example='2020-09-16T09:21:40'),
  interface?: string(name='Interface', example='{}'),
  log?: {
    resourceLogs?: [ 
      {
        logs?: [ 
          {
            content?: string(name='Content', example='[]'),
            keys?: [ string ](name='Keys'),
          }
        ](name='Logs'),
        resourceName?: string(name='ResourceName', example='MyResourceCleaner'),
      }
    ](name='ResourceLogs'),
    terraformLogs?: [ 
      {
        command?: string(name='Command', example='apply'),
        content?: string(name='Content', example='Apply complete! Resources: 42 added, 0 changed, 0 destroyed.'),
        stream?: string(name='Stream', example='stdout'),
      }
    ](name='TerraformLogs'),
  }(name='Log'),
  notificationURLs?: [ string ](name='NotificationURLs'),
  operationInfo?: {
    action?: string(name='Action', example='DeleteSecurityGroup'),
    code?: string(name='Code', example='DependencyViolation'),
    logicalResourceId?: string(name='LogicalResourceId', example='EcsSecurityGroup'),
    message?: string(name='Message', example='There is still instance(s) in the specified security group.'),
    requestId?: string(name='RequestId', example='071D6166-3F6B-5C7B-A1F0-0113FBB643A8'),
    resourceType?: string(name='ResourceType', example='ALIYUN::ECS::SecurityGroup'),
  }(name='OperationInfo'),
  outputs?: [  map[string]any ](name='Outputs'),
  parameters?: [ 
    {
      parameterKey?: string(name='ParameterKey', example='ALIYUN::Region'),
      parameterValue?: string(name='ParameterValue', example='cn-hangzhou'),
    }
  ](name='Parameters'),
  parentStackId?: string(name='ParentStackId', example='4a6c9851-3b0f-4f5f-b4ca-a14bf692****'),
  ramRoleName?: string(name='RamRoleName', example='test-role'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requestId?: string(name='RequestId', example='B288A0BE-D927-4888-B0F7-B35EF84B6E6F'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4ph6aiy****'),
  resourceProgress?: {
    failedResourceCount?: int32(name='FailedResourceCount', example='0'),
    inProgressResourceCount?: int32(name='InProgressResourceCount', example='1'),
    inProgressResourceDetails?: [ 
      {
        progressTargetValue?: float(name='ProgressTargetValue', example='10'),
        progressValue?: float(name='ProgressValue', example='5'),
        resourceName?: string(name='ResourceName', example='WaitCondition'),
        resourceType?: string(name='ResourceType', example='ALIYUN::ROS::WaitCondition'),
      }
    ](name='InProgressResourceDetails'),
    pendingResourceCount?: int32(name='PendingResourceCount', example='0'),
    successResourceCount?: int32(name='SuccessResourceCount', example='1'),
    totalResourceCount?: int32(name='TotalResourceCount', example='2'),
  }(name='ResourceProgress'),
  rootStackId?: string(name='RootStackId', example='4a6c9851-3b0f-4f5f-b4ca-a14bf692****'),
  serviceManaged?: boolean(name='ServiceManaged', example='false'),
  serviceName?: string(name='ServiceName', example='ACVS'),
  stackDriftStatus?: string(name='StackDriftStatus', example='IN_SYNC'),
  stackId?: string(name='StackId', example='c754d2a4-28f1-46df-b557-9586173a****'),
  stackName?: string(name='StackName', example='MyStack'),
  stackType?: string(name='StackType', example='ROS'),
  status?: string(name='Status', example='CREATE_COMPLETE'),
  statusReason?: string(name='StatusReason', example='Stack CREATE completed successfully'),
  tags?: [ 
    {
      key?: string(name='Key', example='usage'),
      value?: string(name='Value', example='test'),
    }
  ](name='Tags'),
  templateDescription?: string(name='TemplateDescription', example='Create a VPC.'),
  templateId?: string(name='TemplateId', example='a52f81be-496f-4e1c-a286-8852ab54****'),
  templateScratchId?: string(name='TemplateScratchId', example='ts-7f7a704cf71c49a6****'),
  templateURL?: string(name='TemplateURL', example='oss://ros/template/demo'),
  templateVersion?: string(name='TemplateVersion', example='v1'),
  timeoutInMinutes?: int32(name='TimeoutInMinutes', example='10'),
  updateTime?: string(name='UpdateTime', example='2020-09-17T08:21:40'),
}

model GetStackResponse = {
  headers: map[string]string(name='headers'),
  body: GetStackResponseBody(name='body'),
}

async function getStack(request: GetStackRequest): GetStackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetStack', 'POST', '/', 'json', false, 'json', request);
}

model GetStackDriftDetectionStatusRequest {
  driftDetectionId: string(name='DriftDetectionId', example='a7044f0d-6f2e-4128-a307-4524ef88****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model GetStackDriftDetectionStatusResponseBody = {
  driftDetectionId?: string(name='DriftDetectionId', example='a7044f0d-6f2e-4128-a307-4524ef88****'),
  driftDetectionStatus?: string(name='DriftDetectionStatus', example='DETECTION_COMPLETE'),
  driftDetectionStatusReason?: string(name='DriftDetectionStatusReason', example='Detect stack drift successfully'),
  driftDetectionTime?: string(name='DriftDetectionTime', example='2020-02-27T07:47:47'),
  driftedStackResourceCount?: int32(name='DriftedStackResourceCount', example='1'),
  requestId?: string(name='RequestId', example='B288A0BE-D927-4888-B0F7-B35EF84B6E6F'),
  stackDriftStatus?: string(name='StackDriftStatus', example='DRIFTED'),
  stackId?: string(name='StackId', example='4a6c9851-3b0f-4f5f-b4ca-a14bf691****'),
}

model GetStackDriftDetectionStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetStackDriftDetectionStatusResponseBody(name='body'),
}

async function getStackDriftDetectionStatus(request: GetStackDriftDetectionStatusRequest): GetStackDriftDetectionStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetStackDriftDetectionStatus', 'POST', '/V2/GetStackDriftDetectionStatus', 'json', false, 'json', request);
}

model GetStackGroupRequest {
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  stackGroupId?: string(name='StackGroupId', example='fd0ddef9-9540-4b42-a464-94f77835****', position='Query'),
  stackGroupName?: string(name='StackGroupName', example='MyStackGroup', position='Query'),
}

model GetStackGroupResponseBody = {
  requestId?: string(name='RequestId', example='14A07460-EBE7-47CA-9757-12CC4761D47A'),
  stackGroup?: {
    administrationRoleName?: string(name='AdministrationRoleName', example='AliyunROSStackGroupAdministrationRole'),
    autoDeployment?: {
      enabled?: boolean(name='Enabled', example='true'),
      retainStacksOnAccountRemoval?: boolean(name='RetainStacksOnAccountRemoval', example='true'),
    }(name='AutoDeployment'),
    description?: string(name='Description', example='StackGroup Description'),
    executionRoleName?: string(name='ExecutionRoleName', example='AliyunROSStackGroupExecutionRole'),
    parameters?: [ 
      {
        parameterKey?: string(name='ParameterKey', example='Amount'),
        parameterValue?: string(name='ParameterValue', example='12'),
      }
    ](name='Parameters'),
    permissionModel?: string(name='PermissionModel', example='SELF_MANAGED'),
    rdFolderIds?: [ string ](name='RdFolderIds'),
    resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4ph6aiy****'),
    stackGroupDriftDetectionDetail?: {
      cancelledStackInstancesCount?: int32(name='CancelledStackInstancesCount', example='0'),
      driftDetectionStatus?: string(name='DriftDetectionStatus', example='COMPLETED'),
      driftDetectionTime?: string(name='DriftDetectionTime', example='2020-02-27T07:47:47'),
      driftedStackInstancesCount?: int32(name='DriftedStackInstancesCount', example='1'),
      failedStackInstancesCount?: int32(name='FailedStackInstancesCount', example='0'),
      inProgressStackInstancesCount?: int32(name='InProgressStackInstancesCount', example='0'),
      inSyncStackInstancesCount?: int32(name='InSyncStackInstancesCount', example='1'),
      stackGroupDriftStatus?: string(name='StackGroupDriftStatus', example='DRIFTED'),
      totalStackInstancesCount?: int32(name='TotalStackInstancesCount', example='2'),
    }(name='StackGroupDriftDetectionDetail'),
    stackGroupId?: string(name='StackGroupId', example='fd0ddef9-9540-4b42-a464-94f77835****'),
    stackGroupName?: string(name='StackGroupName', example='MyStackGroup'),
    status?: string(name='Status', example='ACTIVE'),
    templateBody?: string(name='TemplateBody', example='{"ROSTemplateFormatVersion": "2015-09-01"}'),
  }(name='StackGroup'),
}

model GetStackGroupResponse = {
  headers: map[string]string(name='headers'),
  body: GetStackGroupResponseBody(name='body'),
}

async function getStackGroup(request: GetStackGroupRequest): GetStackGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetStackGroup', 'POST', '/', 'json', false, 'json', request);
}

model GetStackGroupOperationRequest {
  operationId: string(name='OperationId', example='6da106ca-1784-4a6f-a7e1-e723863d****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model GetStackGroupOperationResponseBody = {
  requestId?: string(name='RequestId', example='14A07460-EBE7-47CA-9757-12CC4761D47A'),
  stackGroupOperation?: {
    action?: string(name='Action', example='DELETE'),
    administrationRoleName?: string(name='AdministrationRoleName', example='AliyunROSStackGroupAdministrationRole'),
    createTime?: string(name='CreateTime', example='2020-01-20T09:22:3'),
    deploymentTargets?: {
      accountIds?: [ string ](name='AccountIds'),
      rdFolderIds?: [ string ](name='RdFolderIds', description='test'),
    }(name='DeploymentTargets'),
    endTime?: string(name='EndTime', example='2020-01-20T09:22:4'),
    executionRoleName?: string(name='ExecutionRoleName', example='AliyunROSStackGroupExecutionRole'),
    operationDescription?: string(name='OperationDescription', example='Create stack instance in hangzhou'),
    operationId?: string(name='OperationId', example='6da106ca-1784-4a6f-a7e1-e723863d****'),
    operationPreferences?: {
      failureToleranceCount?: int32(name='FailureToleranceCount', example='1'),
      failureTolerancePercentage?: int32(name='FailureTolerancePercentage', example='10'),
      maxConcurrentCount?: int32(name='MaxConcurrentCount', example='1'),
      maxConcurrentPercentage?: int32(name='MaxConcurrentPercentage', example='10'),
      regionIdsOrder?: [ string ](name='RegionIdsOrder', description='test'),
    }(name='OperationPreferences'),
    retainStacks?: boolean(name='RetainStacks', example='true'),
    stackGroupDriftDetectionDetail?: {
      cancelledStackInstancesCount?: int32(name='CancelledStackInstancesCount', example='0'),
      driftDetectionStatus?: string(name='DriftDetectionStatus', example='COMPLETED'),
      driftDetectionTime?: string(name='DriftDetectionTime', example='2020-02-27T07:47:47'),
      driftedStackInstancesCount?: int32(name='DriftedStackInstancesCount', example='1'),
      failedStackInstancesCount?: int32(name='FailedStackInstancesCount', example='0'),
      inProgressStackInstancesCount?: int32(name='InProgressStackInstancesCount', example='0'),
      inSyncStackInstancesCount?: int32(name='InSyncStackInstancesCount', example='1'),
      stackGroupDriftStatus?: string(name='StackGroupDriftStatus', example='DRIFTED'),
      totalStackInstancesCount?: int32(name='TotalStackInstancesCount', example='2'),
    }(name='StackGroupDriftDetectionDetail'),
    stackGroupId?: string(name='StackGroupId', example='fd0ddef9-9540-4b42-a464-94f77835****'),
    stackGroupName?: string(name='StackGroupName', example='MyStackGroup'),
    status?: string(name='Status', example='SUCCEEDED'),
  }(name='StackGroupOperation'),
}

model GetStackGroupOperationResponse = {
  headers: map[string]string(name='headers'),
  body: GetStackGroupOperationResponseBody(name='body'),
}

async function getStackGroupOperation(request: GetStackGroupOperationRequest): GetStackGroupOperationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetStackGroupOperation', 'POST', '/', 'json', false, 'json', request);
}

model GetStackInstanceRequest {
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  stackGroupName: string(name='StackGroupName', example='MyStackGroup', position='Query'),
  stackInstanceAccountId: string(name='StackInstanceAccountId', example='151266687691****', position='Query'),
  stackInstanceRegionId: string(name='StackInstanceRegionId', example='cn-beijing', position='Query'),
}

model GetStackInstanceResponseBody = {
  requestId?: string(name='RequestId', example='B8A6B693-82C8-419D-8796-DE99EC33CFF9'),
  stackInstance?: {
    accountId?: string(name='AccountId', example='151266687691****'),
    driftDetectionTime?: string(name='DriftDetectionTime', example='2020-02-27T07:47:47'),
    parameterOverrides?: [ 
      {
        parameterKey?: string(name='ParameterKey', example='Amount'),
        parameterValue?: string(name='ParameterValue', example='1'),
      }
    ](name='ParameterOverrides'),
    rdFolderId?: string(name='RdFolderId', example='fd-4PvlVLOL8v'),
    regionId?: string(name='RegionId', example='cn-beijing'),
    stackDriftStatus?: string(name='StackDriftStatus', example='IN_SYNC'),
    stackGroupId?: string(name='StackGroupId', example='fd0ddef9-9540-4b42-a464-94f77835****'),
    stackGroupName?: string(name='StackGroupName', example='MyStackGroup'),
    stackId?: string(name='StackId', example='35ad60e3-6a92-42d8-8812-f0700d45****'),
    status?: string(name='Status', example='CURRENT'),
    statusReason?: string(name='StatusReason', example='User initiated stop'),
  }(name='StackInstance'),
}

model GetStackInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: GetStackInstanceResponseBody(name='body'),
}

async function getStackInstance(request: GetStackInstanceRequest): GetStackInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetStackInstance', 'POST', '/', 'json', false, 'json', request);
}

model GetStackPolicyRequest {
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  stackId: string(name='StackId', example='4a6c9851-3b0f-4f5f-b4ca-a14bf691****', position='Query'),
}

model GetStackPolicyResponseBody = {
  requestId?: string(name='RequestId', example='B288A0BE-D927-4888-B0F7-B35EF84B6E6F'),
  stackPolicyBody?: map[string]any(name='StackPolicyBody', example='{"Statement": [{"Action": "Update:*", "Effect": "Allow","Principal": "*","Resource": "*"}]}'),
}

model GetStackPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: GetStackPolicyResponseBody(name='body'),
}

async function getStackPolicy(request: GetStackPolicyRequest): GetStackPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetStackPolicy', 'POST', '/V2/GetStackPolicy', 'json', false, 'json', request);
}

model GetStackResourceRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  logicalResourceId: string(name='LogicalResourceId', example='WebServer', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceAttributes?: [ string ](name='ResourceAttributes', position='Query'),
  showResourceAttributes?: boolean(name='ShowResourceAttributes', example='true', position='Query'),
  stackId: string(name='StackId', example='4a6c9851-3b0f-4f5f-b4ca-a14bf691****', position='Query'),
}

model GetStackResourceResponseBody = {
  createTime?: string(name='CreateTime', example='2019-08-01T06:01:23'),
  description?: string(name='Description', example='no description'),
  driftDetectionTime?: string(name='DriftDetectionTime', example='2020-02-27T07:47:47'),
  logicalResourceId?: string(name='LogicalResourceId', example='WebServer'),
  metadata?: map[string]any(name='Metadata', example='{"key": "value"}'),
  physicalResourceId?: string(name='PhysicalResourceId', example='d04af923-e6b7-4272-aeaa-47ec9777****'),
  requestId?: string(name='RequestId', example='B288A0BE-D927-4888-B0F7-B35EF84B6E6'),
  resourceAttributes?: [  map[string]any ](name='ResourceAttributes'),
  resourceDriftStatus?: string(name='ResourceDriftStatus', example='IN_SYNC'),
  resourceType?: string(name='ResourceType', example='ALIYUN::ROS::WaitConditionHandle'),
  stackId?: string(name='StackId', example='efdf5c10-96a5-4fd7-ab89-68e7baa2****'),
  stackName?: string(name='StackName', example='test-describe-resource'),
  status?: string(name='Status', example='CREATE_COMPLETE'),
  statusReason?: string(name='StatusReason', example='state changed'),
  updateTime?: string(name='UpdateTime', example='2019-08-01T06:01:29'),
}

model GetStackResourceResponse = {
  headers: map[string]string(name='headers'),
  body: GetStackResourceResponseBody(name='body'),
}

async function getStackResource(request: GetStackResourceRequest): GetStackResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetStackResource', 'POST', '/', 'json', false, 'json', request);
}

model GetTemplateRequest {
  changeSetId?: string(name='ChangeSetId', example='1f6521a4-05af-4975-afe9-bc4b45ad****', position='Query'),
  includePermission?: string(name='IncludePermission', example='Enabled', position='Query'),
  includeTags?: string(name='IncludeTags', example='Enabled', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  stackGroupName?: string(name='StackGroupName', example='MyStackGroup', position='Query'),
  stackId?: string(name='StackId', example='4a6c9851-3b0f-4f5f-b4ca-a14bf691****', position='Query'),
  templateId?: string(name='TemplateId', example='5ecd1e10-b0e9-4389-a565-e4c15efc****', position='Query'),
  templateStage?: string(name='TemplateStage', example='Processed', position='Query'),
  templateVersion?: string(name='TemplateVersion', example='v1', position='Query'),
}

model GetTemplateResponseBody = {
  changeSetId?: string(name='ChangeSetId', example='e85abe0c-6528-43fb-ae93-fdf8de22****'),
  createTime?: string(name='CreateTime', example='2020-11-18T08:49:26'),
  description?: string(name='Description', example='ROS template for create ECS instance.'),
  interface?: string(name='Interface', example='{}'),
  ownerId?: string(name='OwnerId', example='151266687691****'),
  permissions?: [ 
    {
      accountId?: string(name='AccountId', example='142437958638****'),
      shareOption?: string(name='ShareOption', example='ShareToAccounts'),
      shareSource?: string(name='ShareSource', example='ROS'),
      templateVersion?: string(name='TemplateVersion', example='v1'),
      versionOption?: string(name='VersionOption', example='AllVersions'),
    }
  ](name='Permissions'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requestId?: string(name='RequestId', example='B288A0BE-D927-4888-B0F7-B35EF84****'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4ph6aiy****'),
  shareType?: string(name='ShareType', example='Private'),
  stackGroupName?: string(name='StackGroupName', example='MyStackGroup'),
  stackId?: string(name='StackId', example='4a6c9851-3b0f-4f5f-b4ca-a14bf691****'),
  tags?: [ 
    {
      key?: string(name='Key', example='usage'),
      value?: string(name='Value', example='test'),
    }
  ](name='Tags'),
  templateARN?: string(name='TemplateARN', example='acs:ros:*:151266687691****:template/a52f81be-496f-4e1c-a286-8852ab54****'),
  templateBody?: string(name='TemplateBody', example='{"ROSTemplateFormatVersion": "2015-09-01"}'),
  templateId?: string(name='TemplateId', example='a52f81be-496f-4e1c-a286-8852ab54****'),
  templateName?: string(name='TemplateName', example='MyTemplate'),
  templateVersion?: string(name='TemplateVersion', example='v1'),
  updateTime?: string(name='UpdateTime', example='2020-12-07T06:11:48'),
}

model GetTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: GetTemplateResponseBody(name='body'),
}

async function getTemplate(request: GetTemplateRequest): GetTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTemplate', 'POST', '/', 'json', false, 'json', request);
}

model GetTemplateEstimateCostRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  parameters?: [ 
    {
      parameterKey: string(name='ParameterKey', example='Name'),
      parameterValue: string(name='ParameterValue', example='DemoEip'),
    }
  ](name='Parameters', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  templateBody?: string(name='TemplateBody', example='{"ROSTemplateFormatVersion": "2015-09-01", "Parameters": {"Isp": {"Type": "String"}, "Name": {"Type": "String"},"Netmode": {"Type": "String"}, "Bandwidth": {"Type": "Number", "Default": 5}}, "Resources": {"NewEip": {"Type": "ALIYUN::VPC::EIP","Properties": {"InstanceChargeType": "Prepaid", "PricingCycle": "Month",   "Isp": {"Ref": "Isp"}, "Period": 1, "DeletionProtection": false, "AutoPay": false, "Name": {"Ref": "Name"}, "InternetChargeType": "PayByTraffic", "Netmode": {   "Ref": "Netmode"},"Bandwidth": 5}}}}', position='Query'),
  templateId?: string(name='TemplateId', example='5ecd1e10-b0e9-4389-a565-e4c15efc****', position='Query'),
  templateScratchId?: string(name='TemplateScratchId', example='ts-aa9c62feab844a6b****', position='Query'),
  templateScratchRegionId?: string(name='TemplateScratchRegionId', example='cn-hangzhou', position='Query'),
  templateURL?: string(name='TemplateURL', example='oss://ros-template/demo', position='Query'),
  templateVersion?: string(name='TemplateVersion', example='v1', position='Query'),
}

model GetTemplateEstimateCostResponseBody = {
  requestId?: string(name='RequestId', example='6DEA36EF-C97D-5658-A4AC-4F5DB08D1A89'),
  resources?: map[string]any(name='Resources'),
}

model GetTemplateEstimateCostResponse = {
  headers: map[string]string(name='headers'),
  body: GetTemplateEstimateCostResponseBody(name='body'),
}

async function getTemplateEstimateCost(request: GetTemplateEstimateCostRequest): GetTemplateEstimateCostResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTemplateEstimateCost', 'POST', '/', 'json', false, 'json', request);
}

model GetTemplateParameterConstraintsRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  parameters?: [ 
    {
      parameterKey: string(name='ParameterKey', example='ZoneInfo'),
      parameterValue: string(name='ParameterValue', example='cn-hangzhou-h'),
    }
  ](name='Parameters', position='Query'),
  parametersKeyFilter?: [ string ](name='ParametersKeyFilter', shrink='json', position='Query'),
  parametersOrder?: [ string ](name='ParametersOrder', shrink='json', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  templateBody?: string(name='TemplateBody', example='{"Parameters":{"ZoneInfo":{"Type": "String"},"InstanceType": {"Type": "String"}},"ROSTemplateFormatVersion": "2015-09-01","Resources":{"ECS":{"Properties":{"ZoneId":{"Ref": "ZoneInfo"},"InstanceType": {"Ref": "InstanceType"}},"Type": "ALIYUN::ECS::Instance"}}}', position='Query'),
  templateId?: string(name='TemplateId', example='5ecd1e10-b0e9-4389-a565-e4c15efc****', position='Query'),
  templateURL?: string(name='TemplateURL', example='oss://ros-template/demo', position='Query'),
  templateVersion?: string(name='TemplateVersion', example='v1', position='Query'),
}

model GetTemplateParameterConstraintsResponseBody = {
  parameterConstraints?: [ 
    {
      allowedValues?: [ string ](name='AllowedValues'),
      associationParameterNames?: [ string ](name='AssociationParameterNames'),
      behavior?: string(name='Behavior', example='NoLimit'),
      behaviorReason?: string(name='BehaviorReason', example='No resource property refer to the parameter'),
      illegalValueByParameterConstraints?: [ any ](name='IllegalValueByParameterConstraints'),
      illegalValueByRules?: [ any ](name='IllegalValueByRules'),
      notSupportResources?: [ 
        {
          propertyName?: string(name='PropertyName'),
          resourceType?: string(name='ResourceType'),
        }
      ](name='NotSupportResources'),
      parameterKey?: string(name='ParameterKey', example='ZoneInfo'),
      type?: string(name='Type', example='String'),
    }
  ](name='ParameterConstraints'),
  requestId?: string(name='RequestId', example='9816785B-BCF8-514D-8B76-C1EC2BC954FC'),
}

model GetTemplateParameterConstraintsResponse = {
  headers: map[string]string(name='headers'),
  body: GetTemplateParameterConstraintsResponseBody(name='body'),
}

async function getTemplateParameterConstraints(request: GetTemplateParameterConstraintsRequest): GetTemplateParameterConstraintsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTemplateParameterConstraints', 'POST', '/', 'json', false, 'json', request);
}

model GetTemplateScratchRequest {
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  showDataOption?: string(name='ShowDataOption', example='Source', position='Query'),
  templateScratchId?: string(name='TemplateScratchId', example='ts-7f7a704cf71c49a6****', position='Query'),
}

model GetTemplateScratchResponseBody = {
  requestId?: string(name='RequestId', example='A8E0EF98-6FBD-5656-8298-FC8194F0F7B7'),
  templateScratch?: {
    createTime?: string(name='CreateTime', example='2021-12-22T01:49:22'),
    description?: string(name='Description'),
    failedCode?: string(name='FailedCode', example='InvalidZoneId'),
    logicalIdStrategy?: string(name='LogicalIdStrategy', example='LongTypePrefixAndIndexSuffix'),
    preferenceParameters?: [ 
      {
        parameterKey?: string(name='ParameterKey', example='DeletionPolicy'),
        parameterValue?: string(name='ParameterValue', example='Retain'),
      }
    ](name='PreferenceParameters'),
    sourceResourceGroup?: {
      resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmzawhxxc****'),
      resourceTypeFilter?: [ string ](name='ResourceTypeFilter'),
    }(name='SourceResourceGroup'),
    sourceResources?: [ 
      {
        resourceId?: string(name='ResourceId', example='vpc-m5e7cv7e9mz69sszb****'),
        resourceType?: string(name='ResourceType', example='ALIYUN::ECS::VPC'),
      }
    ](name='SourceResources'),
    sourceTag?: {
      resourceTags?: map[string]any(name='ResourceTags', example='{"a": "b"}'),
      resourceTypeFilter?: [ string ](name='ResourceTypeFilter'),
    }(name='SourceTag'),
    stackProvision?: {
      creatable?: boolean(name='Creatable', example='true'),
      importable?: boolean(name='Importable', example='false'),
    }(name='StackProvision'),
    stacks?: [ 
      {
        regionId?: string(name='RegionId', example='cn-hangzhou'),
        stackId?: string(name='StackId', example='3708bf6a-3a67-44d4-9eb1-c56704b9****'),
        usageType?: string(name='UsageType', example='ArchitectureReplication'),
      }
    ](name='Stacks'),
    status?: string(name='Status', example='GENERATE_COMPLETE'),
    statusReason?: string(name='StatusReason', example='Resource ALIYUN::ECS::VPC vpc-m5eauuq80anx59v28**** could not be found for template scratch.'),
    templateScratchData?: map[string]any(name='TemplateScratchData'),
    templateScratchId?: string(name='TemplateScratchId', example='ts-7f7a704cf71c49a6****'),
    templateScratchType?: string(name='TemplateScratchType', example='ArchitectureReplication'),
    updateTime?: string(name='UpdateTime', example='2021-12-22T01:49:23'),
  }(name='TemplateScratch'),
}

model GetTemplateScratchResponse = {
  headers: map[string]string(name='headers'),
  body: GetTemplateScratchResponseBody(name='body'),
}

async function getTemplateScratch(request: GetTemplateScratchRequest): GetTemplateScratchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTemplateScratch', 'POST', '/', 'json', false, 'json', request);
}

model GetTemplateSummaryRequest {
  changeSetId?: string(name='ChangeSetId', example='1f6521a4-05af-4975-afe9-bc4b45ad****', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  parameters?: [ 
    {
      parameterKey?: string(name='ParameterKey', example='InstanceId'),
      parameterValue?: string(name='ParameterValue', example='i-rotp2e20whfrs2****'),
    }
  ](name='Parameters', description='test', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  stackGroupName?: string(name='StackGroupName', example='my-stack-group', position='Query'),
  stackId?: string(name='StackId', example='4a6c9851-3b0f-4f5f-b4ca-a14bf691****', position='Query'),
  templateBody?: string(name='TemplateBody', example='{"ROSTemplateFormatVersion":"2015-09-01"}', position='Query'),
  templateId?: string(name='TemplateId', example='5ecd1e10-b0e9-4389-a565-e4c15efc****', position='Query'),
  templateURL?: string(name='TemplateURL', example='oss://ros/template/demo', position='Query'),
  templateVersion?: string(name='TemplateVersion', example='v1', position='Query'),
}

model GetTemplateSummaryResponseBody = {
  description?: string(name='Description', example='No description'),
  metadata?: map[string]any(name='Metadata', example='{"key": "value"}'),
  parameters?: [  map[string]any ](name='Parameters'),
  requestId?: string(name='RequestId', example='B288A0BE-D927-4888-B0F7-B35EF84B6E6'),
  resourceIdentifierSummaries?: [ 
    {
      logicalResourceIds?: [ string ](name='LogicalResourceIds'),
      resourceIdentifiers?: [ string ](name='ResourceIdentifiers'),
      resourceType?: string(name='ResourceType', example='ALIYUN::ECS::VPC'),
    }
  ](name='ResourceIdentifierSummaries'),
  resourceTypes?: [ string ](name='ResourceTypes'),
  version?: string(name='Version', example='2015-09-01'),
}

model GetTemplateSummaryResponse = {
  headers: map[string]string(name='headers'),
  body: GetTemplateSummaryResponseBody(name='body'),
}

async function getTemplateSummary(request: GetTemplateSummaryRequest): GetTemplateSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTemplateSummary', 'POST', '/', 'json', false, 'json', request);
}

model ListChangeSetsRequest {
  changeSetId?: string(name='ChangeSetId', example='1f6521a4-05af-4975-afe9-bc4b45ad****', position='Query'),
  changeSetName?: [ string ](name='ChangeSetName', example='MyChangeSet', position='Query'),
  executionStatus?: [ string ](name='ExecutionStatus', example='AVAILABLE', position='Query'),
  pageNumber?: long(name='PageNumber', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='10', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  stackId: string(name='StackId', example='4a6c9851-3b0f-4f5f-b4ca-a14bf691****', position='Query'),
  status?: [ string ](name='Status', example='CREATE_COMPLETE', position='Query'),
}

model ListChangeSetsResponseBody = {
  changeSets?: [ 
    {
      changeSetId?: string(name='ChangeSetId', example='1f6521a4-05af-4975-afe9-bc4b45ad****'),
      changeSetName?: string(name='ChangeSetName', example='MyChangeSet'),
      changeSetType?: string(name='ChangeSetType', example='UPDATE'),
      createTime?: string(name='CreateTime', example='2019-08-01T05:16:31'),
      description?: string(name='Description', example='It is a demo.'),
      executionStatus?: string(name='ExecutionStatus', example='AVAILABLE'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      stackId?: string(name='StackId', example='4a6c9851-3b0f-4f5f-b4ca-a14bf691****'),
      stackName?: string(name='StackName', example='MyStack'),
      status?: string(name='Status', example='CREATE_COMPLETE'),
      statusReason?: string(name='StatusReason', example='too many changes'),
    }
  ](name='ChangeSets'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='B288A0BE-D927-4888-B0F7-B35EF84B6E6F'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListChangeSetsResponse = {
  headers: map[string]string(name='headers'),
  body: ListChangeSetsResponseBody(name='body'),
}

async function listChangeSets(request: ListChangeSetsRequest): ListChangeSetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListChangeSets', 'POST', '/V2/ListChangeSets', 'json', false, 'json', request);
}

model ListResourceTypesRequest {
  entityType?: string(name='EntityType', example='Resource', position='Query'),
}

model ListResourceTypesResponseBody = {
  requestId?: string(name='RequestId', example='EA00860C-ECAF-5253-A1F9-8198695A7157'),
  resourceTypes?: [ string ](name='ResourceTypes'),
}

model ListResourceTypesResponse = {
  headers: map[string]string(name='headers'),
  body: ListResourceTypesResponseBody(name='body'),
}

async function listResourceTypes(request: ListResourceTypesRequest): ListResourceTypesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListResourceTypes', 'POST', '/', 'json', false, 'json', request);
}

model ListStackEventsRequest {
  logicalResourceId?: [ string ](name='LogicalResourceId', example='WebServer', position='Query'),
  pageNumber?: long(name='PageNumber', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='10', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceType?: [ string ](name='ResourceType', example='ALIYUN::ECS::Instance', position='Query'),
  stackId: string(name='StackId', example='4a6c9851-3b0f-4f5f-b4ca-a14bf691****', position='Query'),
  status?: [ string ](name='Status', example='CREATE_IN_PROGRESS', position='Query'),
}

model ListStackEventsResponseBody = {
  events?: [ 
    {
      createTime?: string(name='CreateTime', example='2019-08-01T04:07:39'),
      eventId?: string(name='EventId', example='0086612d-77cf-4056-b0b5-ff8e94ad****'),
      logicalResourceId?: string(name='LogicalResourceId', example='WebServer'),
      physicalResourceId?: string(name='PhysicalResourceId', example='i-m5e3tfdbinchnexh****'),
      resourceType?: string(name='ResourceType', example='ALIYUN::ECS::Instance'),
      stackId?: string(name='StackId', example='4a6c9851-3b0f-4f5f-b4ca-a14bf691****'),
      stackName?: string(name='StackName', example='StackName'),
      status?: string(name='Status', example='CREATE_COMPLETE'),
      statusReason?: string(name='StatusReason', example='state changed'),
    }
  ](name='Events'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='B288A0BE-D927-4888-B0F7-B35EF84B6E6'),
  totalCount?: int32(name='TotalCount', example='20'),
}

model ListStackEventsResponse = {
  headers: map[string]string(name='headers'),
  body: ListStackEventsResponseBody(name='body'),
}

async function listStackEvents(request: ListStackEventsRequest): ListStackEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListStackEvents', 'POST', '/V2/ListStackEvents', 'json', false, 'json', request);
}

model ListStackGroupOperationResultsRequest {
  operationId: string(name='OperationId', example='6da106ca-1784-4a6f-a7e1-e723863d****', position='Query'),
  pageNumber?: long(name='PageNumber', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='10', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ListStackGroupOperationResultsResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='1'),
  requestId?: string(name='RequestId', example='14A07460-EBE7-47CA-9757-12CC4761D47A'),
  stackGroupOperationResults?: [ 
    {
      accountId?: string(name='AccountId', example='175458090349****'),
      rdFolderId?: string(name='RdFolderId', example='"fd-4PvlVLOL8v"'),
      regionId?: string(name='RegionId', example='cn-beijing'),
      status?: string(name='Status', example='SUCCEEDED'),
      statusReason?: string(name='StatusReason', example='User initiated operation'),
    }
  ](name='StackGroupOperationResults'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListStackGroupOperationResultsResponse = {
  headers: map[string]string(name='headers'),
  body: ListStackGroupOperationResultsResponseBody(name='body'),
}

async function listStackGroupOperationResults(request: ListStackGroupOperationResultsRequest): ListStackGroupOperationResultsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListStackGroupOperationResults', 'POST', '/', 'json', false, 'json', request);
}

model ListStackGroupOperationsRequest {
  pageNumber?: long(name='PageNumber', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='10', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  stackGroupName: string(name='StackGroupName', example='MyStackGroup', position='Query'),
}

model ListStackGroupOperationsResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='14A07460-EBE7-47CA-9757-12CC4761D47A'),
  stackGroupOperations?: [ 
    {
      action?: string(name='Action', example='CREATE'),
      createTime?: string(name='CreateTime', example='2020-01-20T09:22:36.000000'),
      endTime?: string(name='EndTime', example='2020-01-20T09:22:41.000000'),
      operationDescription?: string(name='OperationDescription', example='Create stack instance in hangzhou'),
      operationId?: string(name='OperationId', example='14A07460-EBE7-47CA-9757-12CC4761****'),
      stackGroupId?: string(name='StackGroupId', example='fd0ddef9-9540-4b42-a464-94f77835****'),
      stackGroupName?: string(name='StackGroupName', example='MyStackGroup'),
      status?: string(name='Status', example='SUCCEEDED'),
    }
  ](name='StackGroupOperations'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListStackGroupOperationsResponse = {
  headers: map[string]string(name='headers'),
  body: ListStackGroupOperationsResponseBody(name='body'),
}

async function listStackGroupOperations(request: ListStackGroupOperationsRequest): ListStackGroupOperationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListStackGroupOperations', 'POST', '/V2/ListStackGroupOperations', 'json', false, 'json', request);
}

model ListStackGroupsRequest {
  pageNumber?: long(name='PageNumber', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='10', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmzawhxxcj****', position='Query'),
  status?: string(name='Status', example='ACTIVE', position='Query'),
  tags?: [ 
    {
      key: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags', position='Query'),
}

model ListStackGroupsResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='14A07460-EBE7-47CA-9757-12CC4761D47A'),
  stackGroups?: [ 
    {
      autoDeployment?: {
        enabled?: boolean(name='Enabled', example='true'),
        retainStacksOnAccountRemoval?: boolean(name='RetainStacksOnAccountRemoval', example='true'),
      }(name='AutoDeployment'),
      description?: string(name='Description', example='My Stack Group'),
      driftDetectionTime?: string(name='DriftDetectionTime', example='2020-02-27T07:47:47'),
      permissionModel?: string(name='PermissionModel', example='SELF_MANAGED'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmzawhxxcj****'),
      stackGroupDriftStatus?: string(name='StackGroupDriftStatus', example='IN_SYNC'),
      stackGroupId?: string(name='StackGroupId', example='fd0ddef9-9540-4b42-a464-94f77835****'),
      stackGroupName?: string(name='StackGroupName', example='MyStackGroup'),
      status?: string(name='Status', example='ACTIVE'),
      tags?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tags'),
    }
  ](name='StackGroups'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListStackGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListStackGroupsResponseBody(name='body'),
}

async function listStackGroups(request: ListStackGroupsRequest): ListStackGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListStackGroups', 'POST', '/', 'json', false, 'json', request);
}

model ListStackInstancesRequest {
  pageNumber?: long(name='PageNumber', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='10', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  stackGroupName: string(name='StackGroupName', example='MyStackGroup', position='Query'),
  stackInstanceAccountId?: string(name='StackInstanceAccountId', example='156552876021****', position='Query'),
  stackInstanceRegionId?: string(name='StackInstanceRegionId', example='cn-beijing', position='Query'),
}

model ListStackInstancesResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='1'),
  requestId?: string(name='RequestId', example='85DE34BD-7FF9-480F-8C21-556E9DA93ACD'),
  stackInstances?: [ 
    {
      accountId?: string(name='AccountId', example='156552876021****'),
      driftDetectionTime?: string(name='DriftDetectionTime', example='2020-02-27T07:47:47'),
      rdFolderId?: string(name='RdFolderId', example='fd-4PvlVLOL8v'),
      regionId?: string(name='RegionId', example='cn-beijing'),
      stackDriftStatus?: string(name='StackDriftStatus', example='IN_SYNC'),
      stackGroupId?: string(name='StackGroupId', example='fd0ddef9-9540-4b42-a464-94f77835****'),
      stackGroupName?: string(name='StackGroupName', example='MyStackGroup'),
      stackId?: string(name='StackId', example='35ad60e3-6a92-42d8-8812-f0700d45****'),
      status?: string(name='Status', example='CURRENT'),
      statusReason?: string(name='StatusReason', example='User initiated stop'),
    }
  ](name='StackInstances'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListStackInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ListStackInstancesResponseBody(name='body'),
}

async function listStackInstances(request: ListStackInstancesRequest): ListStackInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListStackInstances', 'POST', '/', 'json', false, 'json', request);
}

model ListStackOperationRisksRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  operationType?: string(name='OperationType', example='DeleteStack', position='Query'),
  ramRoleName?: string(name='RamRoleName', example='test-role', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  retainAllResources?: boolean(name='RetainAllResources', example='false', position='Query'),
  retainResources?: [ string ](name='RetainResources', example='WebServer', position='Query'),
  stackId?: string(name='StackId', example='4a6c9851-3b0f-4f5f-b4ca-a14bf691****', position='Query'),
  templateBody?: string(name='TemplateBody', position='Query'),
  templateId?: string(name='TemplateId', position='Query'),
  templateURL?: string(name='TemplateURL', position='Query'),
  templateVersion?: string(name='TemplateVersion', position='Query'),
}

model ListStackOperationRisksResponseBody = {
  missingPolicyActions?: [ string ](name='MissingPolicyActions'),
  requestId?: string(name='RequestId', example='72108E7A-E874-4A5E-B22C-A61E94AD12CD'),
  riskResources?: [ 
    {
      code?: string(name='Code', example='NoPermission'),
      logicalResourceId?: string(name='LogicalResourceId', example='MySG'),
      message?: string(name='Message', example='You are not authorized to complete this action.'),
      physicalResourceId?: string(name='PhysicalResourceId', example='sg-bp1dpioafqphedg9****'),
      reason?: string(name='Reason', example='There are some ECS instances (i-bp18el96s4wq635e****) depending on the security group.'),
      requestId?: string(name='RequestId', example='DF4296CF-F45F-4845-A72B-BE617601DB25'),
      resourceType?: string(name='ResourceType', example='ALIYUN::ECS::SecurityGroup'),
      riskType?: string(name='RiskType', example='Referenced'),
    }
  ](name='RiskResources'),
}

model ListStackOperationRisksResponse = {
  headers: map[string]string(name='headers'),
  body: ListStackOperationRisksResponseBody(name='body'),
}

async function listStackOperationRisks(request: ListStackOperationRisksRequest): ListStackOperationRisksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListStackOperationRisks', 'POST', '/', 'json', false, 'json', request);
}

model ListStackResourceDriftsRequest {
  maxResults?: long(name='MaxResults', example='50', position='Query'),
  nextToken?: string(name='NextToken', example='AAAAAdDWBF2****w==', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceDriftStatus?: [ string ](name='ResourceDriftStatus', example='MODIFIED', position='Query'),
  stackId: string(name='StackId', example='4a6c9851-3b0f-4f5f-b4ca-a14bf691****', position='Query'),
}

model ListStackResourceDriftsResponseBody = {
  nextToken?: string(name='NextToken', example='AAAAAdDWBF2****w=='),
  requestId?: string(name='RequestId', example='B288A0BE-D927-4888-B0F7-B35EF84B6E6F'),
  resourceDrifts?: [ 
    {
      actualProperties?: string(name='ActualProperties', example='{"ScalingRuleName": "test1"}'),
      driftDetectionTime?: string(name='DriftDetectionTime', example='2020-02-27T07:47:47'),
      expectedProperties?: string(name='ExpectedProperties', example='{"ScalingRuleName": "test2"}'),
      logicalResourceId?: string(name='LogicalResourceId', example='ScalingRule'),
      physicalResourceId?: string(name='PhysicalResourceId', example='asr-2ze4zzc3kf9yz1kd****'),
      propertyDifferences?: [ 
        {
          actualValue?: string(name='ActualValue', example='test1'),
          differenceType?: string(name='DifferenceType', example='NOT_EQUAL'),
          expectedValue?: string(name='ExpectedValue', example='test2'),
          propertyPath?: string(name='PropertyPath', example='/ScalingRuleName'),
        }
      ](name='PropertyDifferences'),
      resourceDriftStatus?: string(name='ResourceDriftStatus', example='MODIFIED'),
      resourceType?: string(name='ResourceType', example='ALIYUN::ESS::ScalingRule'),
      stackId?: string(name='StackId', example='4a6c9851-3b0f-4f5f-b4ca-a14bf691****'),
    }
  ](name='ResourceDrifts'),
}

model ListStackResourceDriftsResponse = {
  headers: map[string]string(name='headers'),
  body: ListStackResourceDriftsResponseBody(name='body'),
}

async function listStackResourceDrifts(request: ListStackResourceDriftsRequest): ListStackResourceDriftsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListStackResourceDrifts', 'POST', '/V2/ListStackResourceDrifts', 'json', false, 'json', request);
}

model ListStackResourcesRequest {
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  stackId: string(name='StackId', example='4a6c9851-3b0f-4f5f-b4ca-a14bf691****', position='Query'),
}

model ListStackResourcesResponseBody = {
  requestId?: string(name='RequestId', example='B288A0BE-D927-4888-B0F7-B35EF84B6E6'),
  resources?: [ 
    {
      createTime?: string(name='CreateTime', example='2019-08-01T06:01:23'),
      driftDetectionTime?: string(name='DriftDetectionTime', example='2020-02-27T07:47:47'),
      logicalResourceId?: string(name='LogicalResourceId', example='dummy'),
      physicalResourceId?: string(name='PhysicalResourceId', example='d04af923-e6b7-4272-aeaa-47ec9777****'),
      resourceDriftStatus?: string(name='ResourceDriftStatus', example='IN_SYNC'),
      resourceType?: string(name='ResourceType', example='ALIYUN::ROS::Stack'),
      stackId?: string(name='StackId', example='4a6c9851-3b0f-4f5f-b4ca-a14bf691****'),
      stackName?: string(name='StackName', example='test-describe-resource'),
      status?: string(name='Status', example='UPDATE_COMPLETE'),
      statusReason?: string(name='StatusReason', example='state changed'),
      updateTime?: string(name='UpdateTime', example='2019-08-01T06:01:29'),
    }
  ](name='Resources'),
}

model ListStackResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListStackResourcesResponseBody(name='body'),
}

async function listStackResources(request: ListStackResourcesRequest): ListStackResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListStackResources', 'POST', '/', 'json', false, 'json', request);
}

model ListStacksRequest {
  pageNumber?: long(name='PageNumber', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='10', position='Query'),
  parentStackId?: string(name='ParentStackId', example='4a6c9851-3b0f-4f5f-b4ca-a14bf691****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4ph6aiy****', position='Query'),
  showNestedStack?: boolean(name='ShowNestedStack', example='true', position='Query'),
  stackId?: string(name='StackId', example='4a6c9851-3b0f-4f5f-b4ca-a14bf691****', position='Query'),
  stackIds?: [ string ](name='StackIds', position='Query'),
  stackName?: [ string ](name='StackName', example='MyStack', position='Query'),
  status?: [ string ](name='Status', example='CREATE_COMPLETE', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', example='usage'),
      value?: string(name='Value', example='test'),
    }
  ](name='Tag', position='Query'),
}

model ListStacksResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='FBAC80B4-9C27-529D-BC9C-4155FA5CD7A7'),
  stacks?: [ 
    {
      createTime?: string(name='CreateTime', example='2022-03-10T06:44:36'),
      disableRollback?: boolean(name='DisableRollback', example='false'),
      driftDetectionTime?: string(name='DriftDetectionTime', example='2022-03-10T06:46:36'),
      operationInfo?: {
        action?: string(name='Action', example='DeleteSecurityGroup'),
        code?: string(name='Code', example='DependencyViolation'),
        logicalResourceId?: string(name='LogicalResourceId', example='EcsSecurityGroup'),
        message?: string(name='Message', example='There is still instance(s) in the specified security group.'),
        requestId?: string(name='RequestId', example='071D6166-3F6B-5C7B-A1F0-0113FBB643A8'),
        resourceType?: string(name='ResourceType', example='ALIYUN::ECS::SecurityGroup'),
      }(name='OperationInfo'),
      parentStackId?: string(name='ParentStackId', example='4a6c9851-3b0f-4f5f-b4ca-a14bf692****'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-aek2frunvw7****'),
      serviceManaged?: boolean(name='ServiceManaged', example='false'),
      serviceName?: string(name='ServiceName', example='ACVS'),
      stackDriftStatus?: string(name='StackDriftStatus', example='IN_SYNC'),
      stackId?: string(name='StackId', example='67805444-a605-45ee-a57f-83908ff6****'),
      stackName?: string(name='StackName', example='MyStack'),
      stackType?: string(name='StackType', example='ROS'),
      status?: string(name='Status', example='CREATE_COMPLETE'),
      statusReason?: string(name='StatusReason', example='Stack CREATE completed successfully'),
      tags?: [ 
        {
          key?: string(name='Key', example='acs:rm:rgId'),
          value?: string(name='Value', example='rg-aek2frunvw7****'),
        }
      ](name='Tags'),
      timeoutInMinutes?: int32(name='TimeoutInMinutes', example='60'),
      updateTime?: string(name='UpdateTime', example='2022-03-10T07:44:36'),
    }
  ](name='Stacks'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model ListStacksResponse = {
  headers: map[string]string(name='headers'),
  body: ListStacksResponseBody(name='body'),
}

async function listStacks(request: ListStacksRequest): ListStacksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListStacks', 'POST', '/', 'json', false, 'json', request);
}

model ListTagKeysRequest {
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0*****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceType: string(name='ResourceType', example='stack', position='Query'),
}

model ListTagKeysResponseBody = {
  keys?: [ string ](name='Keys'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0*****'),
  requestId?: string(name='RequestId', example='C429473A-5C66-4661-B5F8-4F900CD4330A'),
}

model ListTagKeysResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagKeysResponseBody(name='body'),
}

async function listTagKeys(request: ListTagKeysRequest): ListTagKeysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagKeys', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0*****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceId?: [ string ](name='ResourceId', example='6bc589b5-9c02-4944-8fc3-f3624234****', position='Query'),
  resourceType: string(name='ResourceType', example='stack', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', example='FinanceDept'),
      value?: string(name='Value', example='FinanceJoshua'),
    }
  ](name='Tag', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0*****'),
  requestId?: string(name='RequestId', example='C429473A-5C66-4661-B5F8-4F900CD4330A'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', example='c754d2a4-28f1-46df-b557-9586173a****'),
      resourceType?: string(name='ResourceType', example='stack'),
      tagKey?: string(name='TagKey', example='TagKey1'),
      tagValue?: string(name='TagValue', example='TayValue1'),
    }
  ](name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ListTagValuesRequest {
  key: string(name='Key', example='TagKey1', position='Query'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0*****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceType: string(name='ResourceType', example='stack', position='Query'),
}

model ListTagValuesResponseBody = {
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0*****'),
  requestId?: string(name='RequestId', example='C429473A-5C66-4661-B5F8-4F900CD4330A'),
  values?: [ string ](name='Values'),
}

model ListTagValuesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagValuesResponseBody(name='body'),
}

async function listTagValues(request: ListTagValuesRequest): ListTagValuesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagValues', 'POST', '/', 'json', false, 'json', request);
}

model ListTemplateScratchesRequest {
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  status?: string(name='Status', example='GENERATE_COMPLETE', position='Query'),
  tags?: [ 
    {
      key: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags', position='Query'),
  templateScratchId?: string(name='TemplateScratchId', example='ts-7f7a704cf71c49a6****', position='Query'),
  templateScratchType?: string(name='TemplateScratchType', example='ArchitectureReplication', position='Query'),
}

model ListTemplateScratchesResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='D1C09606-C58B-558F-9B4E-5BF263D17D09'),
  templateScratches?: [ 
    {
      createTime?: string(name='CreateTime', example='2021-12-07T08:06:44'),
      description?: string(name='Description'),
      failedCode?: string(name='FailedCode', example='InvalidZoneId'),
      logicalIdStrategy?: string(name='LogicalIdStrategy', example='LongTypePrefixAndIndexSuffix'),
      preferenceParameters?: [ 
        {
          parameterKey?: string(name='ParameterKey', example='DeletionPolicy'),
          parameterValue?: string(name='ParameterValue', example='Retain'),
        }
      ](name='PreferenceParameters'),
      sourceResourceGroup?: {
        resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmzawhxxc****'),
        resourceTypeFilter?: [ string ](name='ResourceTypeFilter'),
      }(name='SourceResourceGroup'),
      sourceResources?: [ 
        {
          resourceId?: string(name='ResourceId', example='vpc-m5eauuq80anx59v28****'),
          resourceType?: string(name='ResourceType', example='ALIYUN::ECS::VPC'),
        }
      ](name='SourceResources'),
      sourceTag?: {
        resourceTags?: map[string]any(name='ResourceTags', example='{"a": "b"}'),
        resourceTypeFilter?: [ string ](name='ResourceTypeFilter'),
      }(name='SourceTag'),
      status?: string(name='Status', example='GENERATE_COMPLETE'),
      statusReason?: string(name='StatusReason', example='Resource ALIYUN::ECS::VPC vpc-m5eauuq80anx59v28**** could not be found for template scratch.'),
      tags?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tags'),
      templateScratchId?: string(name='TemplateScratchId', example='ts-48ad85d66cca4620****'),
      templateScratchType?: string(name='TemplateScratchType', example='ResourceImport'),
      updateTime?: string(name='UpdateTime', example='2021-12-07T08:06:44'),
    }
  ](name='TemplateScratches'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model ListTemplateScratchesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTemplateScratchesResponseBody(name='body'),
}

async function listTemplateScratches(request: ListTemplateScratchesRequest): ListTemplateScratchesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTemplateScratches', 'POST', '/', 'json', false, 'json', request);
}

model ListTemplateVersionsRequest {
  maxResults?: long(name='MaxResults', example='50', minimum=1, maximum=10000, position='Query'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0****', position='Query'),
  templateId: string(name='TemplateId', example='5ecd1e10-b0e9-4389-a565-e4c15efc****', position='Query'),
}

model ListTemplateVersionsResponseBody = {
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0****'),
  requestId?: string(name='RequestId', example='B288A0BE-D927-4888-B0F7-B35EF84B6E6F'),
  versions?: [ 
    {
      createTime?: string(name='CreateTime', example='2020-02-27T07:47:47'),
      description?: string(name='Description', example='test'),
      templateId?: string(name='TemplateId', example='5ecd1e10-b0e9-4389-a565-e4c15efc****'),
      templateName?: string(name='TemplateName', example='test'),
      templateVersion?: string(name='TemplateVersion', example='v1'),
      updateTime?: string(name='UpdateTime', example='2020-02-27T07:47:47'),
    }
  ](name='Versions'),
}

model ListTemplateVersionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListTemplateVersionsResponseBody(name='body'),
}

async function listTemplateVersions(request: ListTemplateVersionsRequest): ListTemplateVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTemplateVersions', 'POST', '/', 'json', false, 'json', request);
}

model ListTemplatesRequest {
  includeTags?: string(name='IncludeTags', example='Enabled', position='Query'),
  pageNumber?: long(name='PageNumber', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='10', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4ph6aiy****', position='Query'),
  shareType?: string(name='ShareType', example='Private', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', example='usage'),
      value?: string(name='Value', example='deploy'),
    }
  ](name='Tag', position='Query'),
  templateName?: string(name='TemplateName', example='MyTemplate', position='Query'),
}

model ListTemplatesResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='C3A8413B-1F16-4DED-AC3E-61A00718DE8A'),
  templates?: [ 
    {
      createTime?: string(name='CreateTime', example='2019-10-15T08:17:14.000000'),
      description?: string(name='Description', example='test-description'),
      ownerId?: string(name='OwnerId', example='151266687691****'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4ph6aiy****'),
      shareType?: string(name='ShareType', example='Private'),
      tags?: [ 
        {
          key?: string(name='Key', example='usage'),
          value?: string(name='Value', example='test'),
        }
      ](name='Tags'),
      templateARN?: string(name='TemplateARN', example='acs:ros:*:151266687691****:template/a52f81be-496f-4e1c-a286-8852ab54****'),
      templateId?: string(name='TemplateId', example='4d4f5aa2-3260-4e47-863b-763fbb12****'),
      templateName?: string(name='TemplateName', example='demo'),
      templateVersion?: string(name='TemplateVersion', example='v1'),
      updateTime?: string(name='UpdateTime', example='2019-10-15T08:17:14.000000'),
    }
  ](name='Templates'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTemplatesResponseBody(name='body'),
}

async function listTemplates(request: ListTemplatesRequest): ListTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTemplates', 'POST', '/', 'json', false, 'json', request);
}

model MoveResourceGroupRequest {
  newResourceGroupId: string(name='NewResourceGroupId', example='rg-acfm3peow3k****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceId: string(name='ResourceId', example='4e8611cb-251e-42b7-b9cb-3496362c****', position='Query'),
  resourceType: string(name='ResourceType', example='stack', position='Query'),
}

model MoveResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='F84A05B3-7275-4C8B-8AEE-9088C639C271'),
}

model MoveResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: MoveResourceGroupResponseBody(name='body'),
}

async function moveResourceGroup(request: MoveResourceGroupRequest): MoveResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MoveResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model PreviewStackRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  disableRollback?: boolean(name='DisableRollback', example='false', position='Query'),
  enablePreConfig?: boolean(name='EnablePreConfig', position='Query'),
  parallelism?: long(name='Parallelism', example='1', position='Query'),
  parameters?: [ 
    {
      parameterKey: string(name='ParameterKey', example='ALIYUN::AccountId'),
      parameterValue: string(name='ParameterValue', example='151266687691****'),
    }
  ](name='Parameters', description='test', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  stackId?: string(name='StackId', example='4a6c9851-3b0f-4f5f-b4ca-a14bf691****', position='Query'),
  stackName?: string(name='StackName', example='MyStack', position='Query'),
  stackPolicyBody?: string(name='StackPolicyBody', example='{"Statement": [{"Action": "Update:*", "Resource": "*", "Effect": "Allow", "Principal": "*"}]}', position='Query'),
  stackPolicyURL?: string(name='StackPolicyURL', example='oss://ros-stack-policy/demo', position='Query'),
  templateBody?: string(name='TemplateBody', example='{"ROSTemplateFormatVersion":"2015-09-01"}', position='Query'),
  templateId?: string(name='TemplateId', example='5ecd1e10-b0e9-4389-a565-e4c15efc****', position='Query'),
  templateScratchId?: string(name='TemplateScratchId', example='ts-aa9c62feab844a6b****', position='Query'),
  templateScratchRegionId?: string(name='TemplateScratchRegionId', example='cn-hangzhou', position='Query'),
  templateURL?: string(name='TemplateURL', example='oss://ros-template/demo', position='Query'),
  templateVersion?: string(name='TemplateVersion', example='v1', position='Query'),
  timeoutInMinutes?: long(name='TimeoutInMinutes', example='60', position='Query'),
}

model PreviewStackResponseBody = {
  requestId?: string(name='RequestId', example='B288A0BE-D927-4888-B0F7-B35EF84B6E6F'),
  stack?: {
    description?: string(name='Description', example='One ECS instance.'),
    disableRollback?: boolean(name='DisableRollback', example='false'),
    log?: {
      terraformLogs?: [ 
        {
          command?: string(name='Command', example='apply'),
          content?: string(name='Content', example='Apply complete! Resources: 42 added, 0 changed, 0 destroyed.'),
          stream?: string(name='Stream', example='stdout'),
        }
      ](name='TerraformLogs'),
    }(name='Log'),
    parameters?: [ 
      {
        parameterKey?: string(name='ParameterKey', example='ALIYUN::AccountId'),
        parameterValue?: string(name='ParameterValue', example='151266687691****'),
      }
    ](name='Parameters'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    resources?: [ 
      {
        acsResourceType?: string(name='AcsResourceType'),
        action?: string(name='Action', example='Add'),
        description?: string(name='Description', example='ECS instance.'),
        logicalResourceId?: string(name='LogicalResourceId', example='WebServer'),
        properties?: map[string]any(name='Properties', example='{   "DiskMappings": [     {       "Category": "cloud_ssd",       "Size": "20"     }   ],   "SystemDisk_Category": "cloud_ssd",   "InstanceChargeType": "PostPaid",   "AutoRenew": "False",   "WillReplace": true,   "ImageId": "centos_7",   "InstanceType": "ecs.g6.large",   "AllocatePublicIP": true,   "AutoRenewPeriod": 1,   "IoOptimized": "optimized",   "ZoneId": "cn-beijing-g",   "VSwitchId": "",   "SecurityGroupId": "",   "Period": 1,   "InternetChargeType": "PayByTraffic",   "SystemDiskCategory": "cloud_efficiency",   "InternetMaxBandwidthOut": 1,   "VpcId": "",   "InternetMaxBandwidthIn": 200,   "PeriodUnit": "Month" }'),
        replacement?: string(name='Replacement', example='False'),
        requiredBy?: [ string ](name='RequiredBy'),
        resourceType?: string(name='ResourceType', example='ALIYUN::ECS::Instance'),
        stack?: map[string]any(name='Stack', example='{}'),
      }
    ](name='Resources'),
    stackName?: string(name='StackName', example='MyStack'),
    stackPolicyBody?: map[string]any(name='StackPolicyBody', example='{   "Statement": [     {       "Action": "Update:*",       "Resource": "*",       "Effect": "Allow",       "Principal": "*"     },     {       "Action": "Update:*",       "Resource": "LogicalResourceId/apple1",       "Effect": "Deny",       "Principal": "*"     }   ] }'),
    templateDescription?: string(name='TemplateDescription', example='One ECS instance.'),
    timeoutInMinutes?: int32(name='TimeoutInMinutes', example='60'),
  }(name='Stack'),
}

model PreviewStackResponse = {
  headers: map[string]string(name='headers'),
  body: PreviewStackResponseBody(name='body'),
}

async function previewStack(request: PreviewStackRequest): PreviewStackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PreviewStack', 'POST', '/', 'json', false, 'json', request);
}

model SetDeletionProtectionRequest {
  deletionProtection: string(name='DeletionProtection', example='Enabled', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  stackId: string(name='StackId', example='4a6c9851-3b0f-4f5f-b4ca-a14bf691****', position='Query'),
}

model SetDeletionProtectionResponseBody = {
  requestId?: string(name='RequestId', example='B288A0BE-D927-4888-B0F7-B35EF84B6E6F'),
}

model SetDeletionProtectionResponse = {
  headers: map[string]string(name='headers'),
  body: SetDeletionProtectionResponseBody(name='body'),
}

async function setDeletionProtection(request: SetDeletionProtectionRequest): SetDeletionProtectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDeletionProtection', 'POST', '/V2/SetDeletionProtection', 'json', false, 'json', request);
}

model SetStackPolicyRequest {
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  stackId: string(name='StackId', example='4a6c9851-3b0f-4f5f-b4ca-a14bf691****', position='Query'),
  stackPolicyBody?: string(name='StackPolicyBody', example='{"Statement":[{"Effect":"Allow","Action":"Update:*","Principal":"*","Resource":"*"}]}', position='Query'),
  stackPolicyURL?: string(name='StackPolicyURL', example='oss://ros/stack-policy/demo', position='Query'),
}

model SetStackPolicyResponseBody = {
  requestId?: string(name='RequestId', example='B288A0BE-D927-4888-B0F7-B35EF84B6E6F'),
}

model SetStackPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: SetStackPolicyResponseBody(name='body'),
}

async function setStackPolicy(request: SetStackPolicyRequest): SetStackPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetStackPolicy', 'POST', '/V2/SetStackPolicy', 'json', false, 'json', request);
}

model SetTemplatePermissionRequest {
  accountIds: [ string ](name='AccountIds', example='123456789', position='Query'),
  shareOption: string(name='ShareOption', example='ShareToAccounts', position='Query'),
  templateId: string(name='TemplateId', example='5ecd1e10-b0e9-4389-a565-e4c15efc****', position='Query'),
  templateVersion?: string(name='TemplateVersion', example='v1', position='Query'),
  versionOption?: string(name='VersionOption', example='Specified', position='Query'),
}

model SetTemplatePermissionResponseBody = {
  requestId?: string(name='RequestId', example='B288A0BE-D927-4888-B0F7-B35EF84B6E6F'),
}

model SetTemplatePermissionResponse = {
  headers: map[string]string(name='headers'),
  body: SetTemplatePermissionResponseBody(name='body'),
}

async function setTemplatePermission(request: SetTemplatePermissionRequest): SetTemplatePermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetTemplatePermission', 'POST', '/V2/SetTemplatePermission', 'json', false, 'json', request);
}

model SignalResourceRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  logicalResourceId: string(name='LogicalResourceId', example='WebServer', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  stackId: string(name='StackId', example='4a6c9851-3b0f-4f5f-b4ca-a14bf691****', position='Query'),
  status: string(name='Status', example='SUCCESS', position='Query'),
  uniqueId: string(name='UniqueId', example='27c7347b-352a-4377-accf-63d361c1****', position='Query'),
}

model SignalResourceResponseBody = {
  requestId?: string(name='RequestId', example='B288A0BE-D927-4888-B0F7-B35EF84B6E6'),
}

model SignalResourceResponse = {
  headers: map[string]string(name='headers'),
  body: SignalResourceResponseBody(name='body'),
}

async function signalResource(request: SignalResourceRequest): SignalResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SignalResource', 'POST', '/V2/SignalResource', 'json', false, 'json', request);
}

model StopStackGroupOperationRequest {
  operationId: string(name='OperationId', example='6da106ca-1784-4a6f-a7e1-e723863d****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model StopStackGroupOperationResponseBody = {
  requestId?: string(name='RequestId', example='14A07460-EBE7-47CA-9757-12CC4761D47A'),
}

model StopStackGroupOperationResponse = {
  headers: map[string]string(name='headers'),
  body: StopStackGroupOperationResponseBody(name='body'),
}

async function stopStackGroupOperation(request: StopStackGroupOperationRequest): StopStackGroupOperationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopStackGroupOperation', 'POST', '/V2/StopStackGroupOperation', 'json', false, 'json', request);
}

model TagResourcesRequest {
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceId: [ string ](name='ResourceId', example='7fee80e1-8c48-4c2f-8300-0f6dc40b****', position='Query'),
  resourceType: string(name='ResourceType', example='stack', position='Query'),
  tag: [ 
    {
      key: string(name='Key', example='FinanceDept'),
      value: string(name='Value', example='FinanceJoshua'),
    }
  ](name='Tag', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='C46FF5A8-C5F0-4024-8262-B16B639225A0'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', example='true', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceId: [ string ](name='ResourceId', example='46ec7b78-9d5e-4b21-aefd-448c90aa****', position='Query'),
  resourceType: string(name='ResourceType', example='stack', position='Query'),
  tagKey?: [ string ](name='TagKey', example='FinanceDept', position='Query'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='C46FF5A8-C5F0-4024-8262-B16B639225A0'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

model UpdateStackRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  disableRollback?: boolean(name='DisableRollback', example='false', position='Query'),
  parallelism?: long(name='Parallelism', example='1', position='Query'),
  parameters?: [ 
    {
      parameterKey: string(name='ParameterKey', example='Amount'),
      parameterValue: string(name='ParameterValue', example='12'),
    }
  ](name='Parameters', position='Query'),
  ramRoleName?: string(name='RamRoleName', example='test-role', position='Query'),
  regionId: string(name='RegionId', example='cn-beijing', position='Query'),
  replacementOption?: string(name='ReplacementOption', example='Disabled', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4ph6aiy****', position='Query'),
  stackId: string(name='StackId', example='4a6c9851-3b0f-4f5f-b4ca-a14bf691****', position='Query'),
  stackPolicyBody?: string(name='StackPolicyBody', example='{"Statement": [{"Action": "Update:*", "Resource": "*", "Effect": "Allow", "Principal": "*"}]}', position='Query'),
  stackPolicyDuringUpdateBody?: string(name='StackPolicyDuringUpdateBody', example='{"Statement": [{"Effect": "Allow", "Action": "Update:*", "Principal": "*", "Resource": "*"}]}', position='Query'),
  stackPolicyDuringUpdateURL?: string(name='StackPolicyDuringUpdateURL', example='oss://ros-stack-policy/demo', position='Query'),
  stackPolicyURL?: string(name='StackPolicyURL', example='oss://ros-stack-policy/demo', position='Query'),
  tags?: [ 
    {
      key: string(name='Key', example='usage'),
      value?: string(name='Value', example='test'),
    }
  ](name='Tags', position='Query'),
  templateBody?: string(name='TemplateBody', example='{"ROSTemplateFormatVersion": "2015-09-01"}', position='Query'),
  templateId?: string(name='TemplateId', example='5ecd1e10-b0e9-4389-a565-e4c15efc****', position='Query'),
  templateURL?: string(name='TemplateURL', example='oss://ros-template/demo', position='Query'),
  templateVersion?: string(name='TemplateVersion', example='v1', position='Query'),
  timeoutInMinutes?: long(name='TimeoutInMinutes', example='10', position='Query'),
  usePreviousParameters?: boolean(name='UsePreviousParameters', example='true', position='Query'),
}

model UpdateStackResponseBody = {
  requestId?: string(name='RequestId', example='B288A0BE-D927-4888-B0F7-B35EF84B6E6F'),
  stackId?: string(name='StackId', example='4a6c9851-3b0f-4f5f-b4ca-a14bf691****'),
}

model UpdateStackResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateStackResponseBody(name='body'),
}

async function updateStack(request: UpdateStackRequest): UpdateStackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateStack', 'POST', '/', 'json', false, 'json', request);
}

model UpdateStackGroupRequest {
  accountIds?: [ string ](name='AccountIds', example='["12****"]', shrink='json', position='Query'),
  administrationRoleName?: string(name='AdministrationRoleName', example='AliyunROSStackGroupAdministrationRole', position='Query'),
  autoDeployment?: {
    enabled?: boolean(name='Enabled', example='true'),
    retainStacksOnAccountRemoval?: boolean(name='RetainStacksOnAccountRemoval', example='true'),
  }(name='AutoDeployment', example='{"Enabled": true, "RetainStacksOnAccountRemoval": true}', shrink='json', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  deploymentTargets?: {
    accountIds?: [ string ](name='AccountIds'),
    rdFolderIds?: [ string ](name='RdFolderIds', description='test'),
  }(name='DeploymentTargets', example='{"RdFolderIds": ["fd-4PvlVLOL8v"]}', shrink='json', position='Query'),
  description?: string(name='Description', example='My Stack Group', position='Query'),
  executionRoleName?: string(name='ExecutionRoleName', example='AliyunROSStackGroupExecutionRole', position='Query'),
  operationDescription?: string(name='OperationDescription', example='Update stack instances in hangzhou', position='Query'),
  operationPreferences?: map[string]any(name='OperationPreferences', example='{"FailureToleranceCount": 1,"MaxConcurrentCount": 2}', shrink='json', position='Query'),
  parameters?: [ 
    {
      parameterKey: string(name='ParameterKey', example='Amount'),
      parameterValue: string(name='ParameterValue', example='1'),
    }
  ](name='Parameters', description='test', position='Query'),
  permissionModel?: string(name='PermissionModel', example='SELF_MANAGED', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  regionIds?: [ string ](name='RegionIds', example='["cn-hangzhou", "cn-beijing"]', shrink='json', position='Query'),
  stackGroupName: string(name='StackGroupName', example='MyStackGroup', position='Query'),
  templateBody?: string(name='TemplateBody', example='{"ROSTemplateFormatVersion": "2015-09-01"}', position='Query'),
  templateId?: string(name='TemplateId', example='5ecd1e10-b0e9-4389-a565-e4c15efc****', position='Query'),
  templateURL?: string(name='TemplateURL', example='oss://ros-template/demo', position='Query'),
  templateVersion?: string(name='TemplateVersion', example='v1', position='Query'),
}

model UpdateStackGroupResponseBody = {
  operationId?: string(name='OperationId', example='6da106ca-1784-4a6f-a7e1-e723863d****'),
  requestId?: string(name='RequestId', example='14A07460-EBE7-47CA-9757-12CC4761D47A'),
}

model UpdateStackGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateStackGroupResponseBody(name='body'),
}

async function updateStackGroup(request: UpdateStackGroupRequest): UpdateStackGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateStackGroup', 'POST', '/', 'json', false, 'json', request);
}

model UpdateStackInstancesRequest {
  accountIds?: [ string ](name='AccountIds', example='["151266687691****","141261387191****"]', shrink='json', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  deploymentTargets?: {
    accountIds?: [ string ](name='AccountIds'),
    rdFolderIds?: [ string ](name='RdFolderIds', description='test'),
  }(name='DeploymentTargets', shrink='json', position='Query'),
  operationDescription?: string(name='OperationDescription', example='Update stack instances in hangzhou and beijing', position='Query'),
  operationPreferences?: map[string]any(name='OperationPreferences', example='{"FailureToleranceCount": 1,"MaxConcurrentCount": 2}', shrink='json', position='Query'),
  parameterOverrides?: [ 
    {
      parameterKey: string(name='ParameterKey', example='Amount'),
      parameterValue: string(name='ParameterValue', example='1'),
    }
  ](name='ParameterOverrides', description='test', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  regionIds: [ string ](name='RegionIds', example='["cn-hangzhou", "cn-beijing"]', shrink='json', position='Query'),
  stackGroupName: string(name='StackGroupName', example='MyStackGroup', position='Query'),
  timeoutInMinutes?: long(name='TimeoutInMinutes', example='10', minimum=10, maximum=1440, position='Query'),
}

model UpdateStackInstancesResponseBody = {
  operationId?: string(name='OperationId', example='6da106ca-1784-4a6f-a7e1-e723863d****'),
  requestId?: string(name='RequestId', example='14A07460-EBE7-47CA-9757-12CC4761D47A'),
}

model UpdateStackInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateStackInstancesResponseBody(name='body'),
}

async function updateStackInstances(request: UpdateStackInstancesRequest): UpdateStackInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateStackInstances', 'POST', '/', 'json', false, 'json', request);
}

model UpdateStackTemplateByResourcesRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  logicalResourceId?: [ string ](name='LogicalResourceId', example='Vpc', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  stackId: string(name='StackId', example='4a6c9851-3b0f-4f5f-b4ca-a14bf691****', position='Query'),
  templateFormat?: string(name='TemplateFormat', example='JSON', position='Query'),
}

model UpdateStackTemplateByResourcesResponseBody = {
  newTemplateBody?: string(name='NewTemplateBody', example='{\\"ROSTemplateFormatVersion\\": \\"2015-09-01\\", \\"Resources\\": {\\"Vpc\\": {\\"Type\\": \\"ALIYUN::ECS::VPC\\", \\"Properties\\": {\\"VpcName\\": \\"test\\", \\"CidrBlock\\": \\"192.168.0.0/16\\", \\"Description\\": \\"test2\\"}}}, \\"Outputs\\": {\\"VpcId\\": {\\"Value\\": {\\"Fn::GetAtt\\": [\\"Vpc\\", \\"VpcId\\"]}}}}'),
  oldTemplateBody?: string(name='OldTemplateBody', example='{\\"ROSTemplateFormatVersion\\": \\"2015-09-01\\", \\"Resources\\": {\\"Vpc\\": {\\"Type\\": \\"ALIYUN::ECS::VPC\\", \\"Properties\\": {\\"VpcName\\": \\"test\\", \\"CidrBlock\\": \\"192.168.0.0/16\\", \\"Description\\": \\"test1\\"}}}, \\"Outputs\\": {\\"VpcId\\": {\\"Value\\": {\\"Fn::GetAtt\\": [\\"Vpc\\", \\"VpcId\\"]}}}}'),
  requestId?: string(name='RequestId', example='B288A0BE-D927-4888-B0F7-B35EF84B6E6F'),
}

model UpdateStackTemplateByResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateStackTemplateByResourcesResponseBody(name='body'),
}

async function updateStackTemplateByResources(request: UpdateStackTemplateByResourcesRequest): UpdateStackTemplateByResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateStackTemplateByResources', 'POST', '/V2/UpdateStackTemplateByResources', 'json', false, 'json', request);
}

model UpdateTemplateRequest {
  description?: string(name='Description', example='It is a demo.', position='Query'),
  templateBody?: string(name='TemplateBody', example='{"ROSTemplateFormatVersion":"2015-09-01"}', position='Query'),
  templateId: string(name='TemplateId', example='5ecd1e10-b0e9-4389-a565-e4c15efc****', position='Query'),
  templateName?: string(name='TemplateName', example='MyTemplate', position='Query'),
  templateURL?: string(name='TemplateURL', example='oss://ros/template/demo', position='Query'),
}

model UpdateTemplateResponseBody = {
  requestId?: string(name='RequestId', example='8C5D90E1-66B6-496C-9371-3807F8DA80A8'),
  templateId?: string(name='TemplateId', example='5ecd1e10-b0e9-4389-a565-e4c15efc****'),
}

model UpdateTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTemplateResponseBody(name='body'),
}

async function updateTemplate(request: UpdateTemplateRequest): UpdateTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTemplate', 'POST', '/V2/UpdateTemplate', 'json', false, 'json', request);
}

model UpdateTemplateScratchRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  description?: string(name='Description', position='Query'),
  executionMode?: string(name='ExecutionMode', example='Sync', position='Query'),
  logicalIdStrategy?: string(name='LogicalIdStrategy', example='LongTypePrefixAndIndexSuffix', position='Query'),
  preferenceParameters?: [ 
    {
      parameterKey: string(name='ParameterKey', example='DeletionPolicy'),
      parameterValue: string(name='ParameterValue', example='Retain'),
    }
  ](name='PreferenceParameters', shrink='json', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  sourceResourceGroup?: {
    resourceGroupId: string(name='ResourceGroupId', example='rg-acfmzawhxxc****'),
    resourceTypeFilter?: [ string ](name='ResourceTypeFilter'),
  }(name='SourceResourceGroup', shrink='json', position='Query'),
  sourceResources?: [ 
    {
      resourceId: string(name='ResourceId', example='vpc-bp1m6fww66xbntjyc****'),
      resourceType: string(name='ResourceType', example='ALIYUN::ECS::VPC'),
    }
  ](name='SourceResources', shrink='json', position='Query'),
  sourceTag?: {
    resourceTags: map[string]any(name='ResourceTags', example='{"a": "b"}'),
    resourceTypeFilter?: [ string ](name='ResourceTypeFilter'),
  }(name='SourceTag', shrink='json', position='Query'),
  templateScratchId: string(name='TemplateScratchId', example='ts-7f7a704cf71c49a6****', position='Query'),
}

model UpdateTemplateScratchResponseBody = {
  requestId?: string(name='RequestId', example='221DA822-B8CF-50DF-A9D2-BA197BF97BD5'),
  templateScratchId?: string(name='TemplateScratchId', example='ts-7f7a704cf71c49a6****'),
}

model UpdateTemplateScratchResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTemplateScratchResponseBody(name='body'),
}

async function updateTemplateScratch(request: UpdateTemplateScratchRequest): UpdateTemplateScratchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTemplateScratch', 'POST', '/', 'json', false, 'json', request);
}

model ValidateTemplateRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  templateBody?: string(name='TemplateBody', example='{"ROSTemplateFormatVersion":"2015-09-01"}', position='Query'),
  templateURL?: string(name='TemplateURL', example='oss://ros/template/demo', position='Query'),
  validationOption?: string(name='ValidationOption', example='None', position='Query'),
}

model ValidateTemplateResponseBody = {
  description?: string(name='Description', example='No description'),
  outputs?: [ 
    {
      description?: string(name='Description', example='The instance ID of my ECS.'),
      label?: string(name='Label', example='Instance ID'),
      outputKey?: string(name='OutputKey', example='instance_id'),
    }
  ](name='Outputs'),
  parameters?: [  map[string]any ](name='Parameters'),
  requestId?: string(name='RequestId', example='B288A0BE-D927-4888-B0F7-B35EF84B6E6F'),
  resourceTypes?: {
    dataSources?: [ string ](name='DataSources'),
    resources?: [ string ](name='Resources'),
  }(name='ResourceTypes'),
  resources?: [ 
    {
      logicalResourceIdPattern?: string(name='LogicalResourceIdPattern', example='server'),
      resourcePath?: string(name='ResourcePath', example='server'),
      resourceType?: string(name='ResourceType', example='ALIYUN::ECS::InstanceGroup'),
    }
  ](name='Resources'),
}

model ValidateTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: ValidateTemplateResponseBody(name='body'),
}

async function validateTemplate(request: ValidateTemplateRequest): ValidateTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ValidateTemplate', 'POST', '/', 'json', false, 'json', request);
}

