/**
 *
 */
import Util;
import OSS;
import RPC;
import OpenPlatform;
import OSSUtil;
import FileForm;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('ocr', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model DetectCardScreenshotRequest {
  imageURL?: string(name='ImageURL'),
}

model DetectCardScreenshotAdvanceRequest {
  imageURLObject: readable(name='ImageURLObject'),
}

model DetectCardScreenshotResponseBody = {
  data?: {
    isBlur?: boolean(name='IsBlur'),
    isCard?: boolean(name='IsCard'),
    spoofResult?: {
      isSpoof?: boolean(name='IsSpoof'),
      resultMap?: {
        screenScore?: float(name='ScreenScore'),
        screenThreshold?: float(name='ScreenThreshold'),
      }(name='ResultMap'),
    }(name='SpoofResult'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DetectCardScreenshotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DetectCardScreenshotResponseBody(name='body'),
}

async function detectCardScreenshotWithOptions(request: DetectCardScreenshotRequest, runtime: Util.RuntimeOptions): DetectCardScreenshotResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DetectCardScreenshot',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function detectCardScreenshot(request: DetectCardScreenshotRequest): DetectCardScreenshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return detectCardScreenshotWithOptions(request, runtime);
}

async function detectCardScreenshotAdvance(request: DetectCardScreenshotAdvanceRequest, runtime: Util.RuntimeOptions): DetectCardScreenshotResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var detectCardScreenshotReq = new DetectCardScreenshotRequest{};
  OpenApiUtil.convert(request, detectCardScreenshotReq);

  if(!Util.isUnset(request.imageURLObject)){
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.objectKey,
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    detectCardScreenshotReq.imageURL =   `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  }
  var detectCardScreenshotResp = detectCardScreenshotWithOptions(detectCardScreenshotReq, runtime);
  return detectCardScreenshotResp;
}

model GetAsyncJobResultRequest {
  jobId?: string(name='JobId'),
}

model GetAsyncJobResultResponseBody = {
  data?: {
    errorCode?: string(name='ErrorCode'),
    errorMessage?: string(name='ErrorMessage'),
    jobId?: string(name='JobId'),
    result?: string(name='Result'),
    status?: string(name='Status'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetAsyncJobResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAsyncJobResultResponseBody(name='body'),
}

async function getAsyncJobResultWithOptions(request: GetAsyncJobResultRequest, runtime: Util.RuntimeOptions): GetAsyncJobResultResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.jobId)) {
    body['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetAsyncJobResult',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAsyncJobResult(request: GetAsyncJobResultRequest): GetAsyncJobResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAsyncJobResultWithOptions(request, runtime);
}

model RecognizeAccountPageRequest {
  imageURL?: string(name='ImageURL'),
}

model RecognizeAccountPageAdvanceRequest {
  imageURLObject: readable(name='ImageURLObject'),
}

model RecognizeAccountPageResponseBody = {
  data?: {
    angle?: float(name='Angle'),
    birthDate?: string(name='BirthDate'),
    birthPlace?: string(name='BirthPlace'),
    gender?: string(name='Gender'),
    IDNumber?: string(name='IDNumber'),
    invalidStampAreas?: [ 
      {
        height?: int32(name='Height'),
        left?: int32(name='Left'),
        top?: int32(name='Top'),
        width?: int32(name='Width'),
      }
    ](name='InvalidStampAreas'),
    name?: string(name='Name'),
    nationality?: string(name='Nationality'),
    nativePlace?: string(name='NativePlace'),
    otherStampAreas?: [ 
      {
        height?: int32(name='Height'),
        left?: int32(name='Left'),
        top?: int32(name='Top'),
        width?: int32(name='Width'),
      }
    ](name='OtherStampAreas'),
    registerStampAreas?: [ 
      {
        height?: int32(name='Height'),
        left?: int32(name='Left'),
        top?: int32(name='Top'),
        width?: int32(name='Width'),
      }
    ](name='RegisterStampAreas'),
    relation?: string(name='Relation'),
    titleArea?: {
      height?: int32(name='Height'),
      left?: int32(name='Left'),
      top?: int32(name='Top'),
      width?: int32(name='Width'),
    }(name='TitleArea'),
    undertakeStampAreas?: [ 
      {
        height?: int32(name='Height'),
        left?: int32(name='Left'),
        top?: int32(name='Top'),
        width?: int32(name='Width'),
      }
    ](name='UndertakeStampAreas'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model RecognizeAccountPageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeAccountPageResponseBody(name='body'),
}

async function recognizeAccountPageWithOptions(request: RecognizeAccountPageRequest, runtime: Util.RuntimeOptions): RecognizeAccountPageResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RecognizeAccountPage',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeAccountPage(request: RecognizeAccountPageRequest): RecognizeAccountPageResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeAccountPageWithOptions(request, runtime);
}

async function recognizeAccountPageAdvance(request: RecognizeAccountPageAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeAccountPageResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var recognizeAccountPageReq = new RecognizeAccountPageRequest{};
  OpenApiUtil.convert(request, recognizeAccountPageReq);

  if(!Util.isUnset(request.imageURLObject)){
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.objectKey,
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    recognizeAccountPageReq.imageURL =   `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  }
  var recognizeAccountPageResp = recognizeAccountPageWithOptions(recognizeAccountPageReq, runtime);
  return recognizeAccountPageResp;
}

model RecognizeBankCardRequest {
  imageURL?: string(name='ImageURL'),
}

model RecognizeBankCardAdvanceRequest {
  imageURLObject: readable(name='ImageURLObject'),
}

model RecognizeBankCardResponseBody = {
  data?: {
    bankName?: string(name='BankName'),
    cardNumber?: string(name='CardNumber'),
    validDate?: string(name='ValidDate'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model RecognizeBankCardResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeBankCardResponseBody(name='body'),
}

async function recognizeBankCardWithOptions(request: RecognizeBankCardRequest, runtime: Util.RuntimeOptions): RecognizeBankCardResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RecognizeBankCard',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeBankCard(request: RecognizeBankCardRequest): RecognizeBankCardResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeBankCardWithOptions(request, runtime);
}

async function recognizeBankCardAdvance(request: RecognizeBankCardAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeBankCardResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var recognizeBankCardReq = new RecognizeBankCardRequest{};
  OpenApiUtil.convert(request, recognizeBankCardReq);

  if(!Util.isUnset(request.imageURLObject)){
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.objectKey,
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    recognizeBankCardReq.imageURL =   `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  }
  var recognizeBankCardResp = recognizeBankCardWithOptions(recognizeBankCardReq, runtime);
  return recognizeBankCardResp;
}

model RecognizeBusinessCardRequest {
  imageURL?: string(name='ImageURL'),
}

model RecognizeBusinessCardAdvanceRequest {
  imageURLObject: readable(name='ImageURLObject'),
}

model RecognizeBusinessCardResponseBody = {
  data?: {
    addresses?: [ string ](name='Addresses'),
    cellPhoneNumbers?: [ string ](name='CellPhoneNumbers'),
    companies?: [ string ](name='Companies'),
    departments?: [ string ](name='Departments'),
    emails?: [ string ](name='Emails'),
    name?: string(name='Name'),
    officePhoneNumbers?: [ string ](name='OfficePhoneNumbers'),
    titles?: [ string ](name='Titles'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model RecognizeBusinessCardResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeBusinessCardResponseBody(name='body'),
}

async function recognizeBusinessCardWithOptions(request: RecognizeBusinessCardRequest, runtime: Util.RuntimeOptions): RecognizeBusinessCardResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RecognizeBusinessCard',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeBusinessCard(request: RecognizeBusinessCardRequest): RecognizeBusinessCardResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeBusinessCardWithOptions(request, runtime);
}

async function recognizeBusinessCardAdvance(request: RecognizeBusinessCardAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeBusinessCardResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var recognizeBusinessCardReq = new RecognizeBusinessCardRequest{};
  OpenApiUtil.convert(request, recognizeBusinessCardReq);

  if(!Util.isUnset(request.imageURLObject)){
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.objectKey,
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    recognizeBusinessCardReq.imageURL =   `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  }
  var recognizeBusinessCardResp = recognizeBusinessCardWithOptions(recognizeBusinessCardReq, runtime);
  return recognizeBusinessCardResp;
}

model RecognizeBusinessLicenseRequest {
  imageURL?: string(name='ImageURL'),
}

model RecognizeBusinessLicenseAdvanceRequest {
  imageURLObject: readable(name='ImageURLObject'),
}

model RecognizeBusinessLicenseResponseBody = {
  data?: {
    address?: string(name='Address'),
    angle?: float(name='Angle'),
    business?: string(name='Business'),
    capital?: string(name='Capital'),
    emblem?: {
      height?: int32(name='Height'),
      left?: int32(name='Left'),
      top?: int32(name='Top'),
      width?: int32(name='Width'),
    }(name='Emblem'),
    establishDate?: string(name='EstablishDate'),
    legalPerson?: string(name='LegalPerson'),
    name?: string(name='Name'),
    QRCode?: {
      height?: int32(name='Height'),
      left?: int32(name='Left'),
      top?: int32(name='Top'),
      width?: int32(name='Width'),
    }(name='QRCode'),
    registerNumber?: string(name='RegisterNumber'),
    stamp?: {
      height?: int32(name='Height'),
      left?: int32(name='Left'),
      top?: int32(name='Top'),
      width?: int32(name='Width'),
    }(name='Stamp'),
    title?: {
      height?: int32(name='Height'),
      left?: int32(name='Left'),
      top?: int32(name='Top'),
      width?: int32(name='Width'),
    }(name='Title'),
    type?: string(name='Type'),
    validPeriod?: string(name='ValidPeriod'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model RecognizeBusinessLicenseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeBusinessLicenseResponseBody(name='body'),
}

async function recognizeBusinessLicenseWithOptions(request: RecognizeBusinessLicenseRequest, runtime: Util.RuntimeOptions): RecognizeBusinessLicenseResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RecognizeBusinessLicense',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeBusinessLicense(request: RecognizeBusinessLicenseRequest): RecognizeBusinessLicenseResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeBusinessLicenseWithOptions(request, runtime);
}

async function recognizeBusinessLicenseAdvance(request: RecognizeBusinessLicenseAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeBusinessLicenseResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var recognizeBusinessLicenseReq = new RecognizeBusinessLicenseRequest{};
  OpenApiUtil.convert(request, recognizeBusinessLicenseReq);

  if(!Util.isUnset(request.imageURLObject)){
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.objectKey,
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    recognizeBusinessLicenseReq.imageURL =   `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  }
  var recognizeBusinessLicenseResp = recognizeBusinessLicenseWithOptions(recognizeBusinessLicenseReq, runtime);
  return recognizeBusinessLicenseResp;
}

model RecognizeCharacterRequest {
  imageURL?: string(name='ImageURL'),
  minHeight?: int32(name='MinHeight'),
  outputProbability?: boolean(name='OutputProbability'),
}

model RecognizeCharacterAdvanceRequest {
  imageURLObject: readable(name='ImageURLObject'),
  minHeight?: int32(name='MinHeight'),
  outputProbability?: boolean(name='OutputProbability'),
}

model RecognizeCharacterResponseBody = {
  data?: {
    results?: [ 
      {
        probability?: float(name='Probability'),
        text?: string(name='Text'),
        textRectangles?: {
          angle?: int32(name='Angle'),
          height?: int32(name='Height'),
          left?: int32(name='Left'),
          top?: int32(name='Top'),
          width?: int32(name='Width'),
        }(name='TextRectangles'),
      }
    ](name='Results'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model RecognizeCharacterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeCharacterResponseBody(name='body'),
}

async function recognizeCharacterWithOptions(request: RecognizeCharacterRequest, runtime: Util.RuntimeOptions): RecognizeCharacterResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  if (!Util.isUnset(request.minHeight)) {
    body['MinHeight'] = request.minHeight;
  }
  if (!Util.isUnset(request.outputProbability)) {
    body['OutputProbability'] = request.outputProbability;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RecognizeCharacter',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeCharacter(request: RecognizeCharacterRequest): RecognizeCharacterResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeCharacterWithOptions(request, runtime);
}

async function recognizeCharacterAdvance(request: RecognizeCharacterAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeCharacterResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var recognizeCharacterReq = new RecognizeCharacterRequest{};
  OpenApiUtil.convert(request, recognizeCharacterReq);

  if(!Util.isUnset(request.imageURLObject)){
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.objectKey,
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    recognizeCharacterReq.imageURL =   `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  }
  var recognizeCharacterResp = recognizeCharacterWithOptions(recognizeCharacterReq, runtime);
  return recognizeCharacterResp;
}

model RecognizeChinapassportRequest {
  imageURL?: string(name='ImageURL'),
}

model RecognizeChinapassportAdvanceRequest {
  imageURLObject: readable(name='ImageURLObject'),
}

model RecognizeChinapassportResponseBody = {
  data?: {
    authority?: string(name='Authority'),
    birthDate?: string(name='BirthDate'),
    birthDay?: string(name='BirthDay'),
    birthPlace?: string(name='BirthPlace'),
    birthPlaceRaw?: string(name='BirthPlaceRaw'),
    country?: string(name='Country'),
    expiryDate?: string(name='ExpiryDate'),
    expiryDay?: string(name='ExpiryDay'),
    issueDate?: string(name='IssueDate'),
    issuePlace?: string(name='IssuePlace'),
    issuePlaceRaw?: string(name='IssuePlaceRaw'),
    lineOne?: string(name='LineOne'),
    lineZero?: string(name='LineZero'),
    name?: string(name='Name'),
    nameChinese?: string(name='NameChinese'),
    nameChineseRaw?: string(name='NameChineseRaw'),
    passportNo?: string(name='PassportNo'),
    personId?: string(name='PersonId'),
    sex?: string(name='Sex'),
    sourceCountry?: string(name='SourceCountry'),
    success?: boolean(name='Success'),
    type?: string(name='Type'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model RecognizeChinapassportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeChinapassportResponseBody(name='body'),
}

async function recognizeChinapassportWithOptions(request: RecognizeChinapassportRequest, runtime: Util.RuntimeOptions): RecognizeChinapassportResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RecognizeChinapassport',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeChinapassport(request: RecognizeChinapassportRequest): RecognizeChinapassportResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeChinapassportWithOptions(request, runtime);
}

async function recognizeChinapassportAdvance(request: RecognizeChinapassportAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeChinapassportResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var recognizeChinapassportReq = new RecognizeChinapassportRequest{};
  OpenApiUtil.convert(request, recognizeChinapassportReq);

  if(!Util.isUnset(request.imageURLObject)){
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.objectKey,
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    recognizeChinapassportReq.imageURL =   `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  }
  var recognizeChinapassportResp = recognizeChinapassportWithOptions(recognizeChinapassportReq, runtime);
  return recognizeChinapassportResp;
}

model RecognizeDriverLicenseRequest {
  imageURL?: string(name='ImageURL'),
  side?: string(name='Side'),
}

model RecognizeDriverLicenseAdvanceRequest {
  imageURLObject: readable(name='ImageURLObject'),
  side?: string(name='Side'),
}

model RecognizeDriverLicenseResponseBody = {
  data?: {
    backResult?: {
      archiveNumber?: string(name='ArchiveNumber'),
      cardNumber?: string(name='CardNumber'),
      name?: string(name='Name'),
      record?: string(name='Record'),
    }(name='BackResult'),
    faceResult?: {
      address?: string(name='Address'),
      endDate?: string(name='EndDate'),
      gender?: string(name='Gender'),
      issueDate?: string(name='IssueDate'),
      issueUnit?: string(name='IssueUnit'),
      licenseNumber?: string(name='LicenseNumber'),
      name?: string(name='Name'),
      startDate?: string(name='StartDate'),
      vehicleType?: string(name='VehicleType'),
    }(name='FaceResult'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model RecognizeDriverLicenseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeDriverLicenseResponseBody(name='body'),
}

async function recognizeDriverLicenseWithOptions(request: RecognizeDriverLicenseRequest, runtime: Util.RuntimeOptions): RecognizeDriverLicenseResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  if (!Util.isUnset(request.side)) {
    body['Side'] = request.side;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RecognizeDriverLicense',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeDriverLicense(request: RecognizeDriverLicenseRequest): RecognizeDriverLicenseResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeDriverLicenseWithOptions(request, runtime);
}

async function recognizeDriverLicenseAdvance(request: RecognizeDriverLicenseAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeDriverLicenseResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var recognizeDriverLicenseReq = new RecognizeDriverLicenseRequest{};
  OpenApiUtil.convert(request, recognizeDriverLicenseReq);

  if(!Util.isUnset(request.imageURLObject)){
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.objectKey,
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    recognizeDriverLicenseReq.imageURL =   `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  }
  var recognizeDriverLicenseResp = recognizeDriverLicenseWithOptions(recognizeDriverLicenseReq, runtime);
  return recognizeDriverLicenseResp;
}

model RecognizeDrivingLicenseRequest {
  imageURL?: string(name='ImageURL'),
  side?: string(name='Side'),
}

model RecognizeDrivingLicenseAdvanceRequest {
  imageURLObject: readable(name='ImageURLObject'),
  side?: string(name='Side'),
}

model RecognizeDrivingLicenseResponseBody = {
  data?: {
    backResult?: {
      approvedLoad?: string(name='ApprovedLoad'),
      approvedPassengerCapacity?: string(name='ApprovedPassengerCapacity'),
      energyType?: string(name='EnergyType'),
      fileNumber?: string(name='FileNumber'),
      grossMass?: string(name='GrossMass'),
      inspectionRecord?: string(name='InspectionRecord'),
      overallDimension?: string(name='OverallDimension'),
      plateNumber?: string(name='PlateNumber'),
      tractionMass?: string(name='TractionMass'),
      unladenMass?: string(name='UnladenMass'),
    }(name='BackResult'),
    faceResult?: {
      address?: string(name='Address'),
      engineNumber?: string(name='EngineNumber'),
      issueDate?: string(name='IssueDate'),
      model?: string(name='Model'),
      owner?: string(name='Owner'),
      plateNumber?: string(name='PlateNumber'),
      registerDate?: string(name='RegisterDate'),
      useCharacter?: string(name='UseCharacter'),
      vehicleType?: string(name='VehicleType'),
      vin?: string(name='Vin'),
    }(name='FaceResult'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model RecognizeDrivingLicenseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeDrivingLicenseResponseBody(name='body'),
}

async function recognizeDrivingLicenseWithOptions(request: RecognizeDrivingLicenseRequest, runtime: Util.RuntimeOptions): RecognizeDrivingLicenseResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  if (!Util.isUnset(request.side)) {
    body['Side'] = request.side;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RecognizeDrivingLicense',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeDrivingLicense(request: RecognizeDrivingLicenseRequest): RecognizeDrivingLicenseResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeDrivingLicenseWithOptions(request, runtime);
}

async function recognizeDrivingLicenseAdvance(request: RecognizeDrivingLicenseAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeDrivingLicenseResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var recognizeDrivingLicenseReq = new RecognizeDrivingLicenseRequest{};
  OpenApiUtil.convert(request, recognizeDrivingLicenseReq);

  if(!Util.isUnset(request.imageURLObject)){
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.objectKey,
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    recognizeDrivingLicenseReq.imageURL =   `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  }
  var recognizeDrivingLicenseResp = recognizeDrivingLicenseWithOptions(recognizeDrivingLicenseReq, runtime);
  return recognizeDrivingLicenseResp;
}

model RecognizeIdentityCardRequest {
  imageURL?: string(name='ImageURL'),
  side?: string(name='Side'),
}

model RecognizeIdentityCardAdvanceRequest {
  imageURLObject: readable(name='ImageURLObject'),
  side?: string(name='Side'),
}

model RecognizeIdentityCardResponseBody = {
  data?: {
    backResult?: {
      endDate?: string(name='EndDate'),
      issue?: string(name='Issue'),
      startDate?: string(name='StartDate'),
    }(name='BackResult'),
    frontResult?: {
      address?: string(name='Address'),
      birthDate?: string(name='BirthDate'),
      cardAreas?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='CardAreas'),
      faceRectVertices?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='FaceRectVertices'),
      faceRectangle?: {
        angle?: float(name='Angle'),
        center?: {
          x?: float(name='X'),
          y?: float(name='Y'),
        }(name='Center'),
        size?: {
          height?: float(name='Height'),
          width?: float(name='Width'),
        }(name='Size'),
      }(name='FaceRectangle'),
      gender?: string(name='Gender'),
      IDNumber?: string(name='IDNumber'),
      name?: string(name='Name'),
      nationality?: string(name='Nationality'),
    }(name='FrontResult'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model RecognizeIdentityCardResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeIdentityCardResponseBody(name='body'),
}

async function recognizeIdentityCardWithOptions(request: RecognizeIdentityCardRequest, runtime: Util.RuntimeOptions): RecognizeIdentityCardResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  if (!Util.isUnset(request.side)) {
    body['Side'] = request.side;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RecognizeIdentityCard',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeIdentityCard(request: RecognizeIdentityCardRequest): RecognizeIdentityCardResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeIdentityCardWithOptions(request, runtime);
}

async function recognizeIdentityCardAdvance(request: RecognizeIdentityCardAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeIdentityCardResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var recognizeIdentityCardReq = new RecognizeIdentityCardRequest{};
  OpenApiUtil.convert(request, recognizeIdentityCardReq);

  if(!Util.isUnset(request.imageURLObject)){
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.objectKey,
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    recognizeIdentityCardReq.imageURL =   `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  }
  var recognizeIdentityCardResp = recognizeIdentityCardWithOptions(recognizeIdentityCardReq, runtime);
  return recognizeIdentityCardResp;
}

model RecognizeIndonesiaIdentityCardRequest {
  imageUrl?: string(name='ImageUrl'),
}

model RecognizeIndonesiaIdentityCardAdvanceRequest {
  imageUrlObject: readable(name='ImageUrlObject'),
}

model RecognizeIndonesiaIdentityCardResponseBody = {
  data?: {
    addressFifthLine?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='AddressFifthLine'),
    addressFirstLine?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='AddressFirstLine'),
    addressFourthLine?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='AddressFourthLine'),
    addressSecondLine?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='AddressSecondLine'),
    addressThirdLine?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='AddressThirdLine'),
    birthDate?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: string(name='Score'),
      text?: string(name='Text'),
    }(name='BirthDate'),
    birthPlace?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: string(name='Score'),
      text?: string(name='Text'),
    }(name='BirthPlace'),
    cardBox?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: string(name='Score'),
      text?: string(name='Text'),
    }(name='CardBox'),
    expiryDate?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: string(name='Score'),
      text?: string(name='Text'),
    }(name='ExpiryDate'),
    gender?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: string(name='Score'),
      text?: string(name='Text'),
    }(name='Gender'),
    height?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: string(name='Score'),
      text?: string(name='Text'),
    }(name='Height'),
    idNumber?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: string(name='Score'),
      text?: string(name='Text'),
    }(name='IdNumber'),
    licenseNumber?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: string(name='Score'),
      text?: string(name='Text'),
    }(name='LicenseNumber'),
    maritalStatus?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: string(name='Score'),
      text?: string(name='Text'),
    }(name='MaritalStatus'),
    nameFirstLine?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: string(name='Score'),
      text?: string(name='Text'),
    }(name='NameFirstLine'),
    nameSecondLine?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: string(name='Score'),
      text?: string(name='Text'),
    }(name='NameSecondLine'),
    nationality?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: string(name='Score'),
      text?: string(name='Text'),
    }(name='Nationality'),
    occupation?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: string(name='Score'),
      text?: string(name='Text'),
    }(name='Occupation'),
    portraitBox?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: string(name='Score'),
      text?: string(name='Text'),
    }(name='PortraitBox'),
    province?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: string(name='Score'),
      text?: string(name='Text'),
    }(name='Province'),
    religion?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: string(name='Score'),
      text?: string(name='Text'),
    }(name='Religion'),
    sex?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: string(name='Score'),
      text?: string(name='Text'),
    }(name='Sex'),
  }(name='Data'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model RecognizeIndonesiaIdentityCardResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeIndonesiaIdentityCardResponseBody(name='body'),
}

async function recognizeIndonesiaIdentityCardWithOptions(request: RecognizeIndonesiaIdentityCardRequest, runtime: Util.RuntimeOptions): RecognizeIndonesiaIdentityCardResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.imageUrl)) {
    body['ImageUrl'] = request.imageUrl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RecognizeIndonesiaIdentityCard',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeIndonesiaIdentityCard(request: RecognizeIndonesiaIdentityCardRequest): RecognizeIndonesiaIdentityCardResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeIndonesiaIdentityCardWithOptions(request, runtime);
}

async function recognizeIndonesiaIdentityCardAdvance(request: RecognizeIndonesiaIdentityCardAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeIndonesiaIdentityCardResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var recognizeIndonesiaIdentityCardReq = new RecognizeIndonesiaIdentityCardRequest{};
  OpenApiUtil.convert(request, recognizeIndonesiaIdentityCardReq);

  if(!Util.isUnset(request.imageUrlObject)){
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.objectKey,
      content = request.imageUrlObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    recognizeIndonesiaIdentityCardReq.imageUrl =   `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  }
  var recognizeIndonesiaIdentityCardResp = recognizeIndonesiaIdentityCardWithOptions(recognizeIndonesiaIdentityCardReq, runtime);
  return recognizeIndonesiaIdentityCardResp;
}

model RecognizeLicensePlateRequest {
  imageURL?: string(name='ImageURL'),
}

model RecognizeLicensePlateAdvanceRequest {
  imageURLObject: readable(name='ImageURLObject'),
}

model RecognizeLicensePlateResponseBody = {
  data?: {
    plates?: [ 
      {
        confidence?: float(name='Confidence'),
        plateNumber?: string(name='PlateNumber'),
        plateType?: string(name='PlateType'),
        plateTypeConfidence?: float(name='PlateTypeConfidence'),
        positions?: [ 
          {
            x?: long(name='X'),
            y?: long(name='Y'),
          }
        ](name='Positions'),
        roi?: {
          h?: int32(name='H'),
          w?: int32(name='W'),
          x?: int32(name='X'),
          y?: int32(name='Y'),
        }(name='Roi'),
      }
    ](name='Plates'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model RecognizeLicensePlateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeLicensePlateResponseBody(name='body'),
}

async function recognizeLicensePlateWithOptions(request: RecognizeLicensePlateRequest, runtime: Util.RuntimeOptions): RecognizeLicensePlateResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RecognizeLicensePlate',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeLicensePlate(request: RecognizeLicensePlateRequest): RecognizeLicensePlateResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeLicensePlateWithOptions(request, runtime);
}

async function recognizeLicensePlateAdvance(request: RecognizeLicensePlateAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeLicensePlateResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var recognizeLicensePlateReq = new RecognizeLicensePlateRequest{};
  OpenApiUtil.convert(request, recognizeLicensePlateReq);

  if(!Util.isUnset(request.imageURLObject)){
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.objectKey,
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    recognizeLicensePlateReq.imageURL =   `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  }
  var recognizeLicensePlateResp = recognizeLicensePlateWithOptions(recognizeLicensePlateReq, runtime);
  return recognizeLicensePlateResp;
}

model RecognizeMalaysiaIdentityCardRequest {
  imageUrl?: string(name='ImageUrl'),
}

model RecognizeMalaysiaIdentityCardAdvanceRequest {
  imageUrlObject: readable(name='ImageUrlObject'),
}

model RecognizeMalaysiaIdentityCardResponseBody = {
  data?: {
    addressFifthLine?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='AddressFifthLine'),
    addressFirstLine?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='AddressFirstLine'),
    addressFourthLine?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='AddressFourthLine'),
    addressSecondLine?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='AddressSecondLine'),
    addressThirdLine?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='AddressThirdLine'),
    cardBox?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: string(name='Score'),
      text?: string(name='Text'),
    }(name='CardBox'),
    driveClass?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: string(name='Score'),
      text?: string(name='Text'),
    }(name='DriveClass'),
    expiryDate?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: string(name='Score'),
      text?: string(name='Text'),
    }(name='ExpiryDate'),
    idNumber?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: string(name='Score'),
      text?: string(name='Text'),
    }(name='IdNumber'),
    issueDate?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: string(name='Score'),
      text?: string(name='Text'),
    }(name='IssueDate'),
    nameFirstLine?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: string(name='Score'),
      text?: string(name='Text'),
    }(name='NameFirstLine'),
    nameSecondLine?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: string(name='Score'),
      text?: string(name='Text'),
    }(name='NameSecondLine'),
    nationality?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: string(name='Score'),
      text?: string(name='Text'),
    }(name='Nationality'),
    portraitBox?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: string(name='Score'),
      text?: string(name='Text'),
    }(name='PortraitBox'),
    sex?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: string(name='Score'),
      text?: string(name='Text'),
    }(name='Sex'),
  }(name='Data'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model RecognizeMalaysiaIdentityCardResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeMalaysiaIdentityCardResponseBody(name='body'),
}

async function recognizeMalaysiaIdentityCardWithOptions(request: RecognizeMalaysiaIdentityCardRequest, runtime: Util.RuntimeOptions): RecognizeMalaysiaIdentityCardResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.imageUrl)) {
    body['ImageUrl'] = request.imageUrl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RecognizeMalaysiaIdentityCard',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeMalaysiaIdentityCard(request: RecognizeMalaysiaIdentityCardRequest): RecognizeMalaysiaIdentityCardResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeMalaysiaIdentityCardWithOptions(request, runtime);
}

async function recognizeMalaysiaIdentityCardAdvance(request: RecognizeMalaysiaIdentityCardAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeMalaysiaIdentityCardResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var recognizeMalaysiaIdentityCardReq = new RecognizeMalaysiaIdentityCardRequest{};
  OpenApiUtil.convert(request, recognizeMalaysiaIdentityCardReq);

  if(!Util.isUnset(request.imageUrlObject)){
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.objectKey,
      content = request.imageUrlObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    recognizeMalaysiaIdentityCardReq.imageUrl =   `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  }
  var recognizeMalaysiaIdentityCardResp = recognizeMalaysiaIdentityCardWithOptions(recognizeMalaysiaIdentityCardReq, runtime);
  return recognizeMalaysiaIdentityCardResp;
}

model RecognizePassportMRZRequest {
  imageURL?: string(name='ImageURL'),
}

model RecognizePassportMRZAdvanceRequest {
  imageURLObject: readable(name='ImageURLObject'),
}

model RecognizePassportMRZResponseBody = {
  data?: {
    regions?: [ 
      {
        bandBoxes?: [ float ](name='BandBoxes'),
        content?: string(name='Content'),
        detectionScore?: float(name='DetectionScore'),
        name?: string(name='Name'),
        recognitionScore?: float(name='RecognitionScore'),
      }
    ](name='Regions'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model RecognizePassportMRZResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizePassportMRZResponseBody(name='body'),
}

async function recognizePassportMRZWithOptions(request: RecognizePassportMRZRequest, runtime: Util.RuntimeOptions): RecognizePassportMRZResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RecognizePassportMRZ',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizePassportMRZ(request: RecognizePassportMRZRequest): RecognizePassportMRZResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizePassportMRZWithOptions(request, runtime);
}

async function recognizePassportMRZAdvance(request: RecognizePassportMRZAdvanceRequest, runtime: Util.RuntimeOptions): RecognizePassportMRZResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var recognizePassportMRZReq = new RecognizePassportMRZRequest{};
  OpenApiUtil.convert(request, recognizePassportMRZReq);

  if(!Util.isUnset(request.imageURLObject)){
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.objectKey,
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    recognizePassportMRZReq.imageURL =   `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  }
  var recognizePassportMRZResp = recognizePassportMRZWithOptions(recognizePassportMRZReq, runtime);
  return recognizePassportMRZResp;
}

model RecognizePdfRequest {
  fileURL?: string(name='FileURL', description='A short description of struct'),
}

model RecognizePdfAdvanceRequest {
  fileURLObject: readable(name='FileURLObject'),
}

model RecognizePdfResponseBody = {
  data?: {
    angle?: long(name='Angle'),
    height?: long(name='Height'),
    orgHeight?: long(name='OrgHeight'),
    orgWidth?: long(name='OrgWidth'),
    pageIndex?: long(name='PageIndex'),
    width?: long(name='Width'),
    wordsInfo?: [ 
      {
        angle?: long(name='Angle'),
        height?: long(name='Height'),
        positions?: [ 
          {
            x?: long(name='X'),
            y?: long(name='Y'),
          }
        ](name='Positions'),
        width?: long(name='Width'),
        word?: string(name='Word'),
        x?: long(name='X'),
        y?: long(name='Y'),
      }
    ](name='WordsInfo'),
  }(name='Data'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model RecognizePdfResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizePdfResponseBody(name='body'),
}

async function recognizePdfWithOptions(request: RecognizePdfRequest, runtime: Util.RuntimeOptions): RecognizePdfResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.fileURL)) {
    body['FileURL'] = request.fileURL;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RecognizePdf',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizePdf(request: RecognizePdfRequest): RecognizePdfResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizePdfWithOptions(request, runtime);
}

async function recognizePdfAdvance(request: RecognizePdfAdvanceRequest, runtime: Util.RuntimeOptions): RecognizePdfResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var recognizePdfReq = new RecognizePdfRequest{};
  OpenApiUtil.convert(request, recognizePdfReq);

  if(!Util.isUnset(request.fileURLObject)){
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.objectKey,
      content = request.fileURLObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    recognizePdfReq.fileURL =   `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  }
  var recognizePdfResp = recognizePdfWithOptions(recognizePdfReq, runtime);
  return recognizePdfResp;
}

model RecognizePoiNameRequest {
  imageURL?: string(name='ImageURL'),
}

model RecognizePoiNameAdvanceRequest {
  imageURLObject: readable(name='ImageURLObject'),
}

model RecognizePoiNameResponseBody = {
  data?: {
    signboards?: [ 
      {
        texts?: [ 
          {
            label?: string(name='Label'),
            points?: [ int32 ](name='Points'),
            score?: float(name='Score'),
            tag?: string(name='Tag'),
            type?: string(name='Type'),
          }
        ](name='Texts'),
      }
    ](name='Signboards'),
    summary?: {
      brand?: string(name='Brand'),
      score?: float(name='Score'),
    }(name='Summary'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model RecognizePoiNameResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizePoiNameResponseBody(name='body'),
}

async function recognizePoiNameWithOptions(request: RecognizePoiNameRequest, runtime: Util.RuntimeOptions): RecognizePoiNameResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RecognizePoiName',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizePoiName(request: RecognizePoiNameRequest): RecognizePoiNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizePoiNameWithOptions(request, runtime);
}

async function recognizePoiNameAdvance(request: RecognizePoiNameAdvanceRequest, runtime: Util.RuntimeOptions): RecognizePoiNameResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var recognizePoiNameReq = new RecognizePoiNameRequest{};
  OpenApiUtil.convert(request, recognizePoiNameReq);

  if(!Util.isUnset(request.imageURLObject)){
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.objectKey,
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    recognizePoiNameReq.imageURL =   `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  }
  var recognizePoiNameResp = recognizePoiNameWithOptions(recognizePoiNameReq, runtime);
  return recognizePoiNameResp;
}

model RecognizeQrCodeRequest {
  tasks?: [ 
    {
      imageURL?: string(name='ImageURL'),
    }
  ](name='Tasks'),
}

model RecognizeQrCodeResponseBody = {
  data?: {
    elements?: [ 
      {
        imageURL?: string(name='ImageURL'),
        results?: [ 
          {
            label?: string(name='Label'),
            qrCodesData?: [ string ](name='QrCodesData'),
            rate?: float(name='Rate'),
            suggestion?: string(name='Suggestion'),
          }
        ](name='Results'),
        taskId?: string(name='TaskId'),
      }
    ](name='Elements'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model RecognizeQrCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeQrCodeResponseBody(name='body'),
}

async function recognizeQrCodeWithOptions(request: RecognizeQrCodeRequest, runtime: Util.RuntimeOptions): RecognizeQrCodeResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.tasks)) {
    body['Tasks'] = request.tasks;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RecognizeQrCode',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeQrCode(request: RecognizeQrCodeRequest): RecognizeQrCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeQrCodeWithOptions(request, runtime);
}

model RecognizeQuotaInvoiceRequest {
  imageURL?: string(name='ImageURL'),
}

model RecognizeQuotaInvoiceAdvanceRequest {
  imageURLObject: readable(name='ImageURLObject'),
}

model RecognizeQuotaInvoiceResponseBody = {
  data?: {
    angle?: long(name='Angle'),
    content?: {
      invoiceAmount?: string(name='InvoiceAmount'),
      invoiceCode?: string(name='InvoiceCode'),
      invoiceDetails?: string(name='InvoiceDetails'),
      invoiceNo?: string(name='InvoiceNo'),
      sumAmount?: string(name='SumAmount'),
    }(name='Content'),
    height?: long(name='Height'),
    keyValueInfos?: [ 
      {
        key?: string(name='Key'),
        value?: string(name='Value'),
        valuePositions?: [ 
          {
            x?: long(name='X'),
            y?: long(name='Y'),
          }
        ](name='ValuePositions'),
        valueScore?: float(name='ValueScore'),
      }
    ](name='KeyValueInfos'),
    orgHeight?: long(name='OrgHeight'),
    orgWidth?: long(name='OrgWidth'),
    width?: long(name='Width'),
  }(name='Data'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model RecognizeQuotaInvoiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeQuotaInvoiceResponseBody(name='body'),
}

async function recognizeQuotaInvoiceWithOptions(request: RecognizeQuotaInvoiceRequest, runtime: Util.RuntimeOptions): RecognizeQuotaInvoiceResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RecognizeQuotaInvoice',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeQuotaInvoice(request: RecognizeQuotaInvoiceRequest): RecognizeQuotaInvoiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeQuotaInvoiceWithOptions(request, runtime);
}

async function recognizeQuotaInvoiceAdvance(request: RecognizeQuotaInvoiceAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeQuotaInvoiceResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var recognizeQuotaInvoiceReq = new RecognizeQuotaInvoiceRequest{};
  OpenApiUtil.convert(request, recognizeQuotaInvoiceReq);

  if(!Util.isUnset(request.imageURLObject)){
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.objectKey,
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    recognizeQuotaInvoiceReq.imageURL =   `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  }
  var recognizeQuotaInvoiceResp = recognizeQuotaInvoiceWithOptions(recognizeQuotaInvoiceReq, runtime);
  return recognizeQuotaInvoiceResp;
}

model RecognizeRussiaIdentityCardRequest {
  imageUrl?: string(name='ImageUrl'),
}

model RecognizeRussiaIdentityCardAdvanceRequest {
  imageUrlObject: readable(name='ImageUrlObject'),
}

model RecognizeRussiaIdentityCardResponseBody = {
  data?: {
    birthDate?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='BirthDate'),
    birthPlaceFirstLine?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='BirthPlaceFirstLine'),
    birthPlaceSecondLine?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='BirthPlaceSecondLine'),
    birthPlaceThirdLine?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='BirthPlaceThirdLine'),
    cardBox?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: string(name='Score'),
      text?: string(name='Text'),
    }(name='CardBox'),
    givenName?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: string(name='Score'),
      text?: string(name='Text'),
    }(name='GivenName'),
    idNumber?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: string(name='Score'),
      text?: string(name='Text'),
    }(name='IdNumber'),
    paternalName?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: string(name='Score'),
      text?: string(name='Text'),
    }(name='PaternalName'),
    portraitBox?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: string(name='Score'),
      text?: string(name='Text'),
    }(name='PortraitBox'),
    sex?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: string(name='Score'),
      text?: string(name='Text'),
    }(name='Sex'),
    surnameFirstLine?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: string(name='Score'),
      text?: string(name='Text'),
    }(name='SurnameFirstLine'),
    surnameSecondLine?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: string(name='Score'),
      text?: string(name='Text'),
    }(name='SurnameSecondLine'),
  }(name='Data'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model RecognizeRussiaIdentityCardResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeRussiaIdentityCardResponseBody(name='body'),
}

async function recognizeRussiaIdentityCardWithOptions(request: RecognizeRussiaIdentityCardRequest, runtime: Util.RuntimeOptions): RecognizeRussiaIdentityCardResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.imageUrl)) {
    body['ImageUrl'] = request.imageUrl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RecognizeRussiaIdentityCard',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeRussiaIdentityCard(request: RecognizeRussiaIdentityCardRequest): RecognizeRussiaIdentityCardResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeRussiaIdentityCardWithOptions(request, runtime);
}

async function recognizeRussiaIdentityCardAdvance(request: RecognizeRussiaIdentityCardAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeRussiaIdentityCardResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var recognizeRussiaIdentityCardReq = new RecognizeRussiaIdentityCardRequest{};
  OpenApiUtil.convert(request, recognizeRussiaIdentityCardReq);

  if(!Util.isUnset(request.imageUrlObject)){
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.objectKey,
      content = request.imageUrlObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    recognizeRussiaIdentityCardReq.imageUrl =   `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  }
  var recognizeRussiaIdentityCardResp = recognizeRussiaIdentityCardWithOptions(recognizeRussiaIdentityCardReq, runtime);
  return recognizeRussiaIdentityCardResp;
}

model RecognizeStampRequest {
  imageURL?: string(name='ImageURL'),
}

model RecognizeStampAdvanceRequest {
  imageURLObject: readable(name='ImageURLObject'),
}

model RecognizeStampResponseBody = {
  data?: {
    results?: [ 
      {
        generalText?: [ 
          {
            confidence?: float(name='Confidence'),
            content?: string(name='Content'),
          }
        ](name='GeneralText'),
        roi?: {
          height?: int32(name='Height'),
          left?: int32(name='Left'),
          top?: int32(name='Top'),
          width?: int32(name='Width'),
        }(name='Roi'),
        text?: {
          confidence?: float(name='Confidence'),
          content?: string(name='Content'),
        }(name='Text'),
      }
    ](name='Results'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model RecognizeStampResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeStampResponseBody(name='body'),
}

async function recognizeStampWithOptions(request: RecognizeStampRequest, runtime: Util.RuntimeOptions): RecognizeStampResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RecognizeStamp',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeStamp(request: RecognizeStampRequest): RecognizeStampResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeStampWithOptions(request, runtime);
}

async function recognizeStampAdvance(request: RecognizeStampAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeStampResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var recognizeStampReq = new RecognizeStampRequest{};
  OpenApiUtil.convert(request, recognizeStampReq);

  if(!Util.isUnset(request.imageURLObject)){
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.objectKey,
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    recognizeStampReq.imageURL =   `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  }
  var recognizeStampResp = recognizeStampWithOptions(recognizeStampReq, runtime);
  return recognizeStampResp;
}

model RecognizeTableRequest {
  assureDirection?: boolean(name='AssureDirection'),
  hasLine?: boolean(name='HasLine'),
  imageURL?: string(name='ImageURL'),
  outputFormat?: string(name='OutputFormat'),
  skipDetection?: boolean(name='SkipDetection'),
  useFinanceModel?: boolean(name='UseFinanceModel'),
}

model RecognizeTableAdvanceRequest {
  imageURLObject: readable(name='ImageURLObject'),
  assureDirection?: boolean(name='AssureDirection'),
  hasLine?: boolean(name='HasLine'),
  outputFormat?: string(name='OutputFormat'),
  skipDetection?: boolean(name='SkipDetection'),
  useFinanceModel?: boolean(name='UseFinanceModel'),
}

model RecognizeTableResponseBody = {
  data?: {
    fileContent?: string(name='FileContent'),
    tables?: [ 
      {
        head?: [ string ](name='Head'),
        tableRows?: [ 
          {
            tableColumns?: [ 
              {
                endColumn?: int32(name='EndColumn'),
                endRow?: int32(name='EndRow'),
                height?: int32(name='Height'),
                startColumn?: int32(name='StartColumn'),
                startRow?: int32(name='StartRow'),
                texts?: [ string ](name='Texts'),
                width?: int32(name='Width'),
              }
            ](name='TableColumns'),
          }
        ](name='TableRows'),
        tail?: [ string ](name='Tail'),
      }
    ](name='Tables'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model RecognizeTableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeTableResponseBody(name='body'),
}

async function recognizeTableWithOptions(request: RecognizeTableRequest, runtime: Util.RuntimeOptions): RecognizeTableResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.assureDirection)) {
    body['AssureDirection'] = request.assureDirection;
  }
  if (!Util.isUnset(request.hasLine)) {
    body['HasLine'] = request.hasLine;
  }
  if (!Util.isUnset(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  if (!Util.isUnset(request.outputFormat)) {
    body['OutputFormat'] = request.outputFormat;
  }
  if (!Util.isUnset(request.skipDetection)) {
    body['SkipDetection'] = request.skipDetection;
  }
  if (!Util.isUnset(request.useFinanceModel)) {
    body['UseFinanceModel'] = request.useFinanceModel;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RecognizeTable',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeTable(request: RecognizeTableRequest): RecognizeTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeTableWithOptions(request, runtime);
}

async function recognizeTableAdvance(request: RecognizeTableAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeTableResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var recognizeTableReq = new RecognizeTableRequest{};
  OpenApiUtil.convert(request, recognizeTableReq);

  if(!Util.isUnset(request.imageURLObject)){
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.objectKey,
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    recognizeTableReq.imageURL =   `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  }
  var recognizeTableResp = recognizeTableWithOptions(recognizeTableReq, runtime);
  return recognizeTableResp;
}

model RecognizeTakeoutOrderRequest {
  imageURL?: string(name='ImageURL'),
}

model RecognizeTakeoutOrderAdvanceRequest {
  imageURLObject: readable(name='ImageURLObject'),
}

model RecognizeTakeoutOrderResponseBody = {
  data?: {
    elements?: [ 
      {
        boxes?: [ int32 ](name='Boxes'),
        name?: string(name='Name'),
        score?: float(name='Score'),
        value?: string(name='Value'),
      }
    ](name='Elements'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model RecognizeTakeoutOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeTakeoutOrderResponseBody(name='body'),
}

async function recognizeTakeoutOrderWithOptions(request: RecognizeTakeoutOrderRequest, runtime: Util.RuntimeOptions): RecognizeTakeoutOrderResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RecognizeTakeoutOrder',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeTakeoutOrder(request: RecognizeTakeoutOrderRequest): RecognizeTakeoutOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeTakeoutOrderWithOptions(request, runtime);
}

async function recognizeTakeoutOrderAdvance(request: RecognizeTakeoutOrderAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeTakeoutOrderResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var recognizeTakeoutOrderReq = new RecognizeTakeoutOrderRequest{};
  OpenApiUtil.convert(request, recognizeTakeoutOrderReq);

  if(!Util.isUnset(request.imageURLObject)){
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.objectKey,
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    recognizeTakeoutOrderReq.imageURL =   `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  }
  var recognizeTakeoutOrderResp = recognizeTakeoutOrderWithOptions(recognizeTakeoutOrderReq, runtime);
  return recognizeTakeoutOrderResp;
}

model RecognizeTaxiInvoiceRequest {
  imageURL?: string(name='ImageURL'),
}

model RecognizeTaxiInvoiceAdvanceRequest {
  imageURLObject: readable(name='ImageURLObject'),
}

model RecognizeTaxiInvoiceResponseBody = {
  data?: {
    invoices?: [ 
      {
        invoiceRoi?: {
          h?: float(name='H'),
          w?: float(name='W'),
          x?: float(name='X'),
          y?: float(name='Y'),
        }(name='InvoiceRoi'),
        items?: [ 
          {
            itemRoi?: {
              angle?: float(name='Angle'),
              center?: {
                x?: float(name='X'),
                y?: float(name='Y'),
              }(name='Center'),
              size?: {
                h?: float(name='H'),
                w?: float(name='W'),
              }(name='Size'),
            }(name='ItemRoi'),
            text?: string(name='Text'),
          }
        ](name='Items'),
        rotateType?: int32(name='RotateType'),
      }
    ](name='Invoices'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model RecognizeTaxiInvoiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeTaxiInvoiceResponseBody(name='body'),
}

async function recognizeTaxiInvoiceWithOptions(request: RecognizeTaxiInvoiceRequest, runtime: Util.RuntimeOptions): RecognizeTaxiInvoiceResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RecognizeTaxiInvoice',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeTaxiInvoice(request: RecognizeTaxiInvoiceRequest): RecognizeTaxiInvoiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeTaxiInvoiceWithOptions(request, runtime);
}

async function recognizeTaxiInvoiceAdvance(request: RecognizeTaxiInvoiceAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeTaxiInvoiceResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var recognizeTaxiInvoiceReq = new RecognizeTaxiInvoiceRequest{};
  OpenApiUtil.convert(request, recognizeTaxiInvoiceReq);

  if(!Util.isUnset(request.imageURLObject)){
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.objectKey,
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    recognizeTaxiInvoiceReq.imageURL =   `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  }
  var recognizeTaxiInvoiceResp = recognizeTaxiInvoiceWithOptions(recognizeTaxiInvoiceReq, runtime);
  return recognizeTaxiInvoiceResp;
}

model RecognizeTicketInvoiceRequest {
  imageURL?: string(name='ImageURL', description='A short description of struct'),
}

model RecognizeTicketInvoiceAdvanceRequest {
  imageURLObject: readable(name='ImageURLObject'),
}

model RecognizeTicketInvoiceResponseBody = {
  data?: {
    count?: long(name='Count'),
    height?: long(name='Height'),
    orgHeight?: long(name='OrgHeight'),
    orgWidth?: long(name='OrgWidth'),
    results?: [ 
      {
        content?: {
          antiFakeCode?: string(name='AntiFakeCode'),
          invoiceCode?: string(name='InvoiceCode'),
          invoiceDate?: string(name='InvoiceDate'),
          invoiceNumber?: string(name='InvoiceNumber'),
          payeeName?: string(name='PayeeName'),
          payeeRegisterNo?: string(name='PayeeRegisterNo'),
          payerName?: string(name='PayerName'),
          payerRegisterNo?: string(name='PayerRegisterNo'),
          sumAmount?: string(name='SumAmount'),
        }(name='Content'),
        index?: long(name='Index'),
        keyValueInfos?: [ 
          {
            key?: string(name='Key'),
            value?: string(name='Value'),
            valuePositions?: [ 
              {
                x?: long(name='X'),
                y?: long(name='Y'),
              }
            ](name='ValuePositions'),
            valueScore?: float(name='ValueScore'),
          }
        ](name='KeyValueInfos'),
        sliceRectangle?: [ 
          {
            x?: long(name='X'),
            y?: long(name='Y'),
          }
        ](name='SliceRectangle'),
        type?: string(name='Type'),
      }
    ](name='Results'),
    width?: long(name='Width'),
  }(name='Data'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model RecognizeTicketInvoiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeTicketInvoiceResponseBody(name='body'),
}

async function recognizeTicketInvoiceWithOptions(request: RecognizeTicketInvoiceRequest, runtime: Util.RuntimeOptions): RecognizeTicketInvoiceResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RecognizeTicketInvoice',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeTicketInvoice(request: RecognizeTicketInvoiceRequest): RecognizeTicketInvoiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeTicketInvoiceWithOptions(request, runtime);
}

async function recognizeTicketInvoiceAdvance(request: RecognizeTicketInvoiceAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeTicketInvoiceResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var recognizeTicketInvoiceReq = new RecognizeTicketInvoiceRequest{};
  OpenApiUtil.convert(request, recognizeTicketInvoiceReq);

  if(!Util.isUnset(request.imageURLObject)){
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.objectKey,
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    recognizeTicketInvoiceReq.imageURL =   `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  }
  var recognizeTicketInvoiceResp = recognizeTicketInvoiceWithOptions(recognizeTicketInvoiceReq, runtime);
  return recognizeTicketInvoiceResp;
}

model RecognizeTrainTicketRequest {
  imageURL?: string(name='ImageURL'),
}

model RecognizeTrainTicketAdvanceRequest {
  imageURLObject: readable(name='ImageURLObject'),
}

model RecognizeTrainTicketResponseBody = {
  data?: {
    date?: string(name='Date'),
    departureStation?: string(name='DepartureStation'),
    destination?: string(name='Destination'),
    level?: string(name='Level'),
    name?: string(name='Name'),
    number?: string(name='Number'),
    price?: float(name='Price'),
    seat?: string(name='Seat'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model RecognizeTrainTicketResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeTrainTicketResponseBody(name='body'),
}

async function recognizeTrainTicketWithOptions(request: RecognizeTrainTicketRequest, runtime: Util.RuntimeOptions): RecognizeTrainTicketResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RecognizeTrainTicket',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeTrainTicket(request: RecognizeTrainTicketRequest): RecognizeTrainTicketResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeTrainTicketWithOptions(request, runtime);
}

async function recognizeTrainTicketAdvance(request: RecognizeTrainTicketAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeTrainTicketResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var recognizeTrainTicketReq = new RecognizeTrainTicketRequest{};
  OpenApiUtil.convert(request, recognizeTrainTicketReq);

  if(!Util.isUnset(request.imageURLObject)){
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.objectKey,
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    recognizeTrainTicketReq.imageURL =   `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  }
  var recognizeTrainTicketResp = recognizeTrainTicketWithOptions(recognizeTrainTicketReq, runtime);
  return recognizeTrainTicketResp;
}

model RecognizeTurkeyIdentityCardRequest {
  imageUrl?: string(name='ImageUrl'),
}

model RecognizeTurkeyIdentityCardAdvanceRequest {
  imageUrlObject: readable(name='ImageUrlObject'),
}

model RecognizeTurkeyIdentityCardResponseBody = {
  code?: string(name='Code'),
  data?: {
    auxiliaryTools?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='AuxiliaryTools'),
    birthDate?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='BirthDate'),
    birthPlace?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='BirthPlace'),
    bloodType?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='BloodType'),
    cardBox?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='CardBox'),
    cilt?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='Cilt'),
    documentNumber?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='DocumentNumber'),
    driveClass?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='DriveClass'),
    dueDate?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='DueDate'),
    duzenleyen?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='Duzenleyen'),
    entryNumber?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='EntryNumber'),
    expiryDate?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='ExpiryDate'),
    fatherName?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='FatherName'),
    foreignersId?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='ForeignersId'),
    gender?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='Gender'),
    givenName?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='GivenName'),
    idNumber?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='IdNumber'),
    issueBy?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='IssueBy'),
    issueCounty?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='IssueCounty'),
    issueDate?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='IssueDate'),
    issuePlace?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='IssuePlace'),
    kutuk?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='Kutuk'),
    licenseNumber?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='LicenseNumber'),
    maritalStatus?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='MaritalStatus'),
    motherName?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='MotherName'),
    name?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='Name'),
    nationality?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='Nationality'),
    neighborhoodVillage?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='NeighborhoodVillage'),
    pageNumber?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='PageNumber'),
    passportNumber?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='PassportNumber'),
    portraitBox?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='PortraitBox'),
    province?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='Province'),
    provinceOfResidence?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='ProvinceOfResidence'),
    reasonOfIssue?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='ReasonOfIssue'),
    registerNumber?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='RegisterNumber'),
    religion?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='Religion'),
    sayfa?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='Sayfa'),
    seri?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='Seri'),
    sex?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='Sex'),
    surname?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='Surname'),
    typeOfResidencePermit?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='TypeOfResidencePermit'),
    validUntil?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='ValidUntil'),
    village?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='Village'),
    volumeNumber?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='VolumeNumber'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model RecognizeTurkeyIdentityCardResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeTurkeyIdentityCardResponseBody(name='body'),
}

async function recognizeTurkeyIdentityCardWithOptions(request: RecognizeTurkeyIdentityCardRequest, runtime: Util.RuntimeOptions): RecognizeTurkeyIdentityCardResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.imageUrl)) {
    body['ImageUrl'] = request.imageUrl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RecognizeTurkeyIdentityCard',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeTurkeyIdentityCard(request: RecognizeTurkeyIdentityCardRequest): RecognizeTurkeyIdentityCardResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeTurkeyIdentityCardWithOptions(request, runtime);
}

async function recognizeTurkeyIdentityCardAdvance(request: RecognizeTurkeyIdentityCardAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeTurkeyIdentityCardResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var recognizeTurkeyIdentityCardReq = new RecognizeTurkeyIdentityCardRequest{};
  OpenApiUtil.convert(request, recognizeTurkeyIdentityCardReq);

  if(!Util.isUnset(request.imageUrlObject)){
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.objectKey,
      content = request.imageUrlObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    recognizeTurkeyIdentityCardReq.imageUrl =   `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  }
  var recognizeTurkeyIdentityCardResp = recognizeTurkeyIdentityCardWithOptions(recognizeTurkeyIdentityCardReq, runtime);
  return recognizeTurkeyIdentityCardResp;
}

model RecognizeUkraineIdentityCardRequest {
  imageUrl?: string(name='ImageUrl'),
}

model RecognizeUkraineIdentityCardAdvanceRequest {
  imageUrlObject: readable(name='ImageUrlObject'),
}

model RecognizeUkraineIdentityCardResponseBody = {
  data?: {
    birthDate?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='BirthDate'),
    cardBox?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='CardBox'),
    documentNumber?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='DocumentNumber'),
    expiryDate?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='ExpiryDate'),
    nameEnglish?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='NameEnglish'),
    nameUkraine?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='NameUkraine'),
    nationality?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='Nationality'),
    patronymic?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='Patronymic'),
    portraitBox?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='PortraitBox'),
    recordNumber?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='RecordNumber'),
    sex?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='Sex'),
    surnameEnglish?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='SurnameEnglish'),
    surnameUkraine?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='SurnameUkraine'),
  }(name='Data'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model RecognizeUkraineIdentityCardResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeUkraineIdentityCardResponseBody(name='body'),
}

async function recognizeUkraineIdentityCardWithOptions(request: RecognizeUkraineIdentityCardRequest, runtime: Util.RuntimeOptions): RecognizeUkraineIdentityCardResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.imageUrl)) {
    body['ImageUrl'] = request.imageUrl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RecognizeUkraineIdentityCard',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeUkraineIdentityCard(request: RecognizeUkraineIdentityCardRequest): RecognizeUkraineIdentityCardResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeUkraineIdentityCardWithOptions(request, runtime);
}

async function recognizeUkraineIdentityCardAdvance(request: RecognizeUkraineIdentityCardAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeUkraineIdentityCardResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var recognizeUkraineIdentityCardReq = new RecognizeUkraineIdentityCardRequest{};
  OpenApiUtil.convert(request, recognizeUkraineIdentityCardReq);

  if(!Util.isUnset(request.imageUrlObject)){
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.objectKey,
      content = request.imageUrlObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    recognizeUkraineIdentityCardReq.imageUrl =   `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  }
  var recognizeUkraineIdentityCardResp = recognizeUkraineIdentityCardWithOptions(recognizeUkraineIdentityCardReq, runtime);
  return recognizeUkraineIdentityCardResp;
}

model RecognizeVATInvoiceRequest {
  fileType?: string(name='FileType'),
  fileURL?: string(name='FileURL'),
}

model RecognizeVATInvoiceAdvanceRequest {
  fileURLObject: readable(name='FileURLObject'),
  fileType?: string(name='FileType'),
}

model RecognizeVATInvoiceResponseBody = {
  data?: {
    box?: {
      checkers?: [ float ](name='Checkers'),
      clerks?: [ float ](name='Clerks'),
      invoiceAmounts?: [ float ](name='InvoiceAmounts'),
      invoiceCodes?: [ float ](name='InvoiceCodes'),
      invoiceDates?: [ float ](name='InvoiceDates'),
      invoiceFakeCodes?: [ float ](name='InvoiceFakeCodes'),
      invoiceNoes?: [ float ](name='InvoiceNoes'),
      payeeAddresses?: [ float ](name='PayeeAddresses'),
      payeeBankNames?: [ float ](name='PayeeBankNames'),
      payeeNames?: [ float ](name='PayeeNames'),
      payeeRegisterNoes?: [ float ](name='PayeeRegisterNoes'),
      payees?: [ float ](name='Payees'),
      payerAddresses?: [ float ](name='PayerAddresses'),
      payerBankNames?: [ float ](name='PayerBankNames'),
      payerNames?: [ float ](name='PayerNames'),
      payerRegisterNoes?: [ float ](name='PayerRegisterNoes'),
      sumAmounts?: [ float ](name='SumAmounts'),
      taxAmounts?: [ float ](name='TaxAmounts'),
      withoutTaxAmounts?: [ float ](name='WithoutTaxAmounts'),
    }(name='Box'),
    content?: {
      antiFakeCode?: string(name='AntiFakeCode'),
      checker?: string(name='Checker'),
      clerk?: string(name='Clerk'),
      invoiceAmount?: string(name='InvoiceAmount'),
      invoiceCode?: string(name='InvoiceCode'),
      invoiceDate?: string(name='InvoiceDate'),
      invoiceNo?: string(name='InvoiceNo'),
      payee?: string(name='Payee'),
      payeeAddress?: string(name='PayeeAddress'),
      payeeBankName?: string(name='PayeeBankName'),
      payeeName?: string(name='PayeeName'),
      payeeRegisterNo?: string(name='PayeeRegisterNo'),
      payerAddress?: string(name='PayerAddress'),
      payerBankName?: string(name='PayerBankName'),
      payerName?: string(name='PayerName'),
      payerRegisterNo?: string(name='PayerRegisterNo'),
      sumAmount?: string(name='SumAmount'),
      taxAmount?: string(name='TaxAmount'),
      withoutTaxAmount?: string(name='WithoutTaxAmount'),
    }(name='Content'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model RecognizeVATInvoiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeVATInvoiceResponseBody(name='body'),
}

async function recognizeVATInvoiceWithOptions(request: RecognizeVATInvoiceRequest, runtime: Util.RuntimeOptions): RecognizeVATInvoiceResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.fileType)) {
    body['FileType'] = request.fileType;
  }
  if (!Util.isUnset(request.fileURL)) {
    body['FileURL'] = request.fileURL;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RecognizeVATInvoice',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeVATInvoice(request: RecognizeVATInvoiceRequest): RecognizeVATInvoiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeVATInvoiceWithOptions(request, runtime);
}

async function recognizeVATInvoiceAdvance(request: RecognizeVATInvoiceAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeVATInvoiceResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var recognizeVATInvoiceReq = new RecognizeVATInvoiceRequest{};
  OpenApiUtil.convert(request, recognizeVATInvoiceReq);

  if(!Util.isUnset(request.fileURLObject)){
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.objectKey,
      content = request.fileURLObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    recognizeVATInvoiceReq.fileURL =   `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  }
  var recognizeVATInvoiceResp = recognizeVATInvoiceWithOptions(recognizeVATInvoiceReq, runtime);
  return recognizeVATInvoiceResp;
}

model RecognizeVINCodeRequest {
  imageURL?: string(name='ImageURL'),
}

model RecognizeVINCodeAdvanceRequest {
  imageURLObject: readable(name='ImageURLObject'),
}

model RecognizeVINCodeResponseBody = {
  data?: {
    vinCode?: string(name='VinCode'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model RecognizeVINCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeVINCodeResponseBody(name='body'),
}

async function recognizeVINCodeWithOptions(request: RecognizeVINCodeRequest, runtime: Util.RuntimeOptions): RecognizeVINCodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.imageURL)) {
    query['ImageURL'] = request.imageURL;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RecognizeVINCode',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeVINCode(request: RecognizeVINCodeRequest): RecognizeVINCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeVINCodeWithOptions(request, runtime);
}

async function recognizeVINCodeAdvance(request: RecognizeVINCodeAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeVINCodeResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var recognizeVINCodeReq = new RecognizeVINCodeRequest{};
  OpenApiUtil.convert(request, recognizeVINCodeReq);

  if(!Util.isUnset(request.imageURLObject)){
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.objectKey,
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    recognizeVINCodeReq.imageURL =   `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  }
  var recognizeVINCodeResp = recognizeVINCodeWithOptions(recognizeVINCodeReq, runtime);
  return recognizeVINCodeResp;
}

model RecognizeVerificationcodeRequest {
  imageURL?: string(name='ImageURL'),
}

model RecognizeVerificationcodeAdvanceRequest {
  imageURLObject: readable(name='ImageURLObject'),
}

model RecognizeVerificationcodeResponseBody = {
  data?: {
    content?: string(name='Content'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model RecognizeVerificationcodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeVerificationcodeResponseBody(name='body'),
}

async function recognizeVerificationcodeWithOptions(request: RecognizeVerificationcodeRequest, runtime: Util.RuntimeOptions): RecognizeVerificationcodeResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RecognizeVerificationcode',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeVerificationcode(request: RecognizeVerificationcodeRequest): RecognizeVerificationcodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeVerificationcodeWithOptions(request, runtime);
}

async function recognizeVerificationcodeAdvance(request: RecognizeVerificationcodeAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeVerificationcodeResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var recognizeVerificationcodeReq = new RecognizeVerificationcodeRequest{};
  OpenApiUtil.convert(request, recognizeVerificationcodeReq);

  if(!Util.isUnset(request.imageURLObject)){
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.objectKey,
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    recognizeVerificationcodeReq.imageURL =   `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  }
  var recognizeVerificationcodeResp = recognizeVerificationcodeWithOptions(recognizeVerificationcodeReq, runtime);
  return recognizeVerificationcodeResp;
}

model RecognizeVideoCastCrewListRequest {
  params?: [ 
    {
      type?: string(name='Type'),
    }
  ](name='Params'),
  registerUrl?: string(name='RegisterUrl'),
  videoUrl?: string(name='VideoUrl'),
}

model RecognizeVideoCastCrewListAdvanceRequest {
  videoUrlObject: readable(name='VideoUrlObject'),
  params?: [ 
    {
      type?: string(name='Type'),
    }
  ](name='Params'),
  registerUrl?: string(name='RegisterUrl'),
}

model RecognizeVideoCastCrewListShrinkRequest {
  paramsShrink?: string(name='Params'),
  registerUrl?: string(name='RegisterUrl'),
  videoUrl?: string(name='VideoUrl'),
}

model RecognizeVideoCastCrewListResponseBody = {
  data?: {
    castResults?: [ 
      {
        detailInfo?: map[string]string(name='DetailInfo'),
        endTime?: float(name='EndTime'),
        startTime?: float(name='StartTime'),
      }
    ](name='CastResults'),
    ocrResults?: [ 
      {
        detailInfo?: [ 
          {
            boxes?: [ int32 ](name='Boxes'),
            charProbs?: [[ float ]            ](name='CharProbs'),
            frameIndex?: long(name='FrameIndex'),
            position?: [ 
              {
                x?: long(name='X'),
                y?: long(name='Y'),
              }
            ](name='Position'),
            score?: float(name='Score'),
            text?: string(name='Text'),
            textProb?: float(name='TextProb'),
            timeStamp?: float(name='TimeStamp'),
            trackId?: long(name='TrackId'),
          }
        ](name='DetailInfo'),
        endTime?: float(name='EndTime'),
        startTime?: float(name='StartTime'),
      }
    ](name='OcrResults'),
    subtitlesResults?: [ 
      {
        subtitlesAllResults?: map[string]string(name='SubtitlesAllResults'),
        subtitlesAllResultsUrl?: string(name='SubtitlesAllResultsUrl'),
        subtitlesChineseResults?: map[string]string(name='SubtitlesChineseResults'),
        subtitlesChineseResultsUrl?: string(name='SubtitlesChineseResultsUrl'),
        subtitlesEnglishResults?: map[string]any(name='SubtitlesEnglishResults'),
        subtitlesEnglishResultsUrl?: string(name='SubtitlesEnglishResultsUrl'),
      }
    ](name='SubtitlesResults'),
    videoOcrResults?: [ 
      {
        detailInfo?: [ 
          {
            boxes?: [ long ](name='Boxes'),
            position?: [ 
              {
                x?: long(name='X'),
                y?: long(name='Y'),
              }
            ](name='Position'),
            score?: float(name='Score'),
            text?: string(name='Text'),
            textType?: long(name='TextType'),
          }
        ](name='DetailInfo'),
        endTime?: float(name='EndTime'),
        startTime?: float(name='StartTime'),
      }
    ](name='VideoOcrResults'),
  }(name='Data'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model RecognizeVideoCastCrewListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeVideoCastCrewListResponseBody(name='body'),
}

async function recognizeVideoCastCrewListWithOptions(tmpReq: RecognizeVideoCastCrewListRequest, runtime: Util.RuntimeOptions): RecognizeVideoCastCrewListResponse {
  Util.validateModel(tmpReq);
  var request = new RecognizeVideoCastCrewListShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.params)) {
    request.paramsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.params, 'Params', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.paramsShrink)) {
    body['Params'] = request.paramsShrink;
  }
  if (!Util.isUnset(request.registerUrl)) {
    body['RegisterUrl'] = request.registerUrl;
  }
  if (!Util.isUnset(request.videoUrl)) {
    body['VideoUrl'] = request.videoUrl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RecognizeVideoCastCrewList',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeVideoCastCrewList(request: RecognizeVideoCastCrewListRequest): RecognizeVideoCastCrewListResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeVideoCastCrewListWithOptions(request, runtime);
}

async function recognizeVideoCastCrewListAdvance(request: RecognizeVideoCastCrewListAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeVideoCastCrewListResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var recognizeVideoCastCrewListReq = new RecognizeVideoCastCrewListRequest{};
  OpenApiUtil.convert(request, recognizeVideoCastCrewListReq);

  if(!Util.isUnset(request.videoUrlObject)){
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.objectKey,
      content = request.videoUrlObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    recognizeVideoCastCrewListReq.videoUrl =   `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  }
  var recognizeVideoCastCrewListResp = recognizeVideoCastCrewListWithOptions(recognizeVideoCastCrewListReq, runtime);
  return recognizeVideoCastCrewListResp;
}

model RecognizeVideoCharacterRequest {
  videoURL?: string(name='VideoURL', description='视频文件地址'),
}

model RecognizeVideoCharacterResponseBody = {
  data?: {
    frames?: [ 
      {
        elements?: [ 
          {
            score?: float(name='Score', description='文字区域概率，概率值的范围为[0.0, 1.0]'),
            text?: string(name='Text', description='文字内容'),
            textRectangles?: [ 
              {
                angle?: long(name='Angle', description='文字区域角度，角度范围[0, 360]'),
                height?: long(name='Height', description='文字区域高度'),
                left?: long(name='Left', description='文字区域左上角x坐标'),
                top?: long(name='Top', description='文字区域左上角y坐标'),
                width?: long(name='Width', description='文字区域宽度'),
              }
            ](name='TextRectangles'),
          }
        ](name='Elements'),
        timestamp?: long(name='Timestamp', description='帧时间戳时间戳，单位秒。'),
      }
    ](name='Frames', description='视频帧的集合，空信息的帧不列出。'),
    height?: long(name='Height'),
    inputFile?: string(name='InputFile', description='对应的输入OSS文件 (格式oss://{bucketName}/{object})'),
    width?: long(name='Width'),
  }(name='Data'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model RecognizeVideoCharacterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeVideoCharacterResponseBody(name='body'),
}

async function recognizeVideoCharacterWithOptions(request: RecognizeVideoCharacterRequest, runtime: Util.RuntimeOptions): RecognizeVideoCharacterResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.videoURL)) {
    body['VideoURL'] = request.videoURL;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RecognizeVideoCharacter',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeVideoCharacter(request: RecognizeVideoCharacterRequest): RecognizeVideoCharacterResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeVideoCharacterWithOptions(request, runtime);
}

model RecognizeVietnamIdentityCardRequest {
  imageUrl?: string(name='ImageUrl'),
}

model RecognizeVietnamIdentityCardAdvanceRequest {
  imageUrlObject: readable(name='ImageUrlObject'),
}

model RecognizeVietnamIdentityCardResponseBody = {
  data?: {
    addressFirstLine?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='AddressFirstLine'),
    addressSecondLine?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='AddressSecondLine'),
    birthDate?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: float(name='Score'),
      text?: string(name='Text'),
    }(name='BirthDate'),
    cardBox?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: string(name='Score'),
      text?: string(name='Text'),
    }(name='CardBox'),
    driveClass?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: string(name='Score'),
      text?: string(name='Text'),
    }(name='DriveClass'),
    expiryDate?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: string(name='Score'),
      text?: string(name='Text'),
    }(name='ExpiryDate'),
    fullName?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: string(name='Score'),
      text?: string(name='Text'),
    }(name='FullName'),
    idNumber?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: string(name='Score'),
      text?: string(name='Text'),
    }(name='IdNumber'),
    nationality?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: string(name='Score'),
      text?: string(name='Text'),
    }(name='Nationality'),
    originPlaceFirstLine?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: string(name='Score'),
      text?: string(name='Text'),
    }(name='OriginPlaceFirstLine'),
    originPlaceSecondLine?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: string(name='Score'),
      text?: string(name='Text'),
    }(name='OriginPlaceSecondLine'),
    portraitBox?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: string(name='Score'),
      text?: string(name='Text'),
    }(name='PortraitBox'),
    residencePlaceFirstLine?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: string(name='Score'),
      text?: string(name='Text'),
    }(name='ResidencePlaceFirstLine'),
    residencePlaceSecondLine?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: string(name='Score'),
      text?: string(name='Text'),
    }(name='ResidencePlaceSecondLine'),
    sex?: {
      keyPoints?: [ 
        {
          x?: float(name='X'),
          y?: float(name='Y'),
        }
      ](name='KeyPoints'),
      score?: string(name='Score'),
      text?: string(name='Text'),
    }(name='Sex'),
  }(name='Data'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model RecognizeVietnamIdentityCardResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeVietnamIdentityCardResponseBody(name='body'),
}

async function recognizeVietnamIdentityCardWithOptions(request: RecognizeVietnamIdentityCardRequest, runtime: Util.RuntimeOptions): RecognizeVietnamIdentityCardResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.imageUrl)) {
    body['ImageUrl'] = request.imageUrl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RecognizeVietnamIdentityCard',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeVietnamIdentityCard(request: RecognizeVietnamIdentityCardRequest): RecognizeVietnamIdentityCardResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeVietnamIdentityCardWithOptions(request, runtime);
}

async function recognizeVietnamIdentityCardAdvance(request: RecognizeVietnamIdentityCardAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeVietnamIdentityCardResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var recognizeVietnamIdentityCardReq = new RecognizeVietnamIdentityCardRequest{};
  OpenApiUtil.convert(request, recognizeVietnamIdentityCardReq);

  if(!Util.isUnset(request.imageUrlObject)){
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.objectKey,
      content = request.imageUrlObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    recognizeVietnamIdentityCardReq.imageUrl =   `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  }
  var recognizeVietnamIdentityCardResp = recognizeVietnamIdentityCardWithOptions(recognizeVietnamIdentityCardReq, runtime);
  return recognizeVietnamIdentityCardResp;
}

model TrimDocumentRequest {
  fileType?: string(name='FileType'),
  fileURL?: string(name='FileURL'),
  outputType?: string(name='OutputType'),
}

model TrimDocumentAdvanceRequest {
  fileURLObject: readable(name='FileURLObject'),
  fileType?: string(name='FileType'),
  outputType?: string(name='OutputType'),
}

model TrimDocumentResponseBody = {
  data?: {
    content?: string(name='Content'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model TrimDocumentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TrimDocumentResponseBody(name='body'),
}

async function trimDocumentWithOptions(request: TrimDocumentRequest, runtime: Util.RuntimeOptions): TrimDocumentResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.fileType)) {
    body['FileType'] = request.fileType;
  }
  if (!Util.isUnset(request.fileURL)) {
    body['FileURL'] = request.fileURL;
  }
  if (!Util.isUnset(request.outputType)) {
    body['OutputType'] = request.outputType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TrimDocument',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function trimDocument(request: TrimDocumentRequest): TrimDocumentResponse {
  var runtime = new Util.RuntimeOptions{};
  return trimDocumentWithOptions(request, runtime);
}

async function trimDocumentAdvance(request: TrimDocumentAdvanceRequest, runtime: Util.RuntimeOptions): TrimDocumentResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var trimDocumentReq = new TrimDocumentRequest{};
  OpenApiUtil.convert(request, trimDocumentReq);

  if(!Util.isUnset(request.fileURLObject)){
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.objectKey,
      content = request.fileURLObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    trimDocumentReq.fileURL =   `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  }
  var trimDocumentResp = trimDocumentWithOptions(trimDocumentReq, runtime);
  return trimDocumentResp;
}

