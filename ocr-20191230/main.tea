import OSS;
import OpenPlatform;
import RPCUtil;
import RPC;
import OSSUtil;
import Util;
import FileForm;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint(@productId, @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model GetAsyncJobResultRequest = {
  jobId: string(name='JobId', description='jobId'),
}

model GetAsyncJobResultResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    errorCode: string(name='ErrorCode', description='errorCode'),
    errorMessage: string(name='ErrorMessage', description='errorMessage'),
    jobId: string(name='JobId', description='jobId'),
    result: string(name='Result', description='result'),
    status: string(name='Status', description='status'),
  }(name='Data', description='data'),
}

async function getAsyncJobResult(request: GetAsyncJobResultRequest, runtime: Util.RuntimeOptions): GetAsyncJobResultResponse {
  Util.validateModel(request);
  return doRequest('GetAsyncJobResult', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model TrimDocumentRequest = {
  fileURL: string(name='FileURL', description='fileUrl'),
  fileType: string(name='FileType', description='fileType'),
  outputType: string(name='OutputType', description='outputType'),
}

model TrimDocumentResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    content: string(name='Content', description='Content'),
  }(name='Data', description='data'),
}

async function trimDocument(request: TrimDocumentRequest, runtime: Util.RuntimeOptions): TrimDocumentResponse {
  Util.validateModel(request);
  return doRequest('TrimDocument', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model TrimDocumentAdvanceRequest = {
  fileURLObject: readable(description='FileURLObject', name='FileURLObject'),
  fileType: string(name='FileType', description='fileType'),
  outputType: string(name='OutputType', description='outputType'),
}

async function trimDocumentAdvance(request: TrimDocumentAdvanceRequest, runtime: Util.RuntimeOptions): TrimDocumentResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.fileURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var trimDocumentreq = new TrimDocumentRequest{};
  RPCUtil.convert(request, trimDocumentreq);
  trimDocumentreq.fileURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var trimDocumentResp = trimDocument(trimDocumentreq, runtime);
  return trimDocumentResp;
}

model RecognizeChinapassportRequest = {
  imageURL: string(name='ImageURL', description='imageUrl'),
}

model RecognizeChinapassportResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    authority: string(name='Authority', description='authority'),
    birthDate: string(name='BirthDate', description='birthDate'),
    birthDay: string(name='BirthDay', description='birthDay'),
    birthPlace: string(name='BirthPlace', description='birthPlace'),
    birthPlaceRaw: string(name='BirthPlaceRaw', description='birthPlaceRaw'),
    country: string(name='Country', description='country'),
    expiryDate: string(name='ExpiryDate', description='expiryDate'),
    expiryDay: string(name='ExpiryDay', description='expiryDay'),
    issueDate: string(name='IssueDate', description='issueDate'),
    issuePlace: string(name='IssuePlace', description='issuePlace'),
    issuePlaceRaw: string(name='IssuePlaceRaw', description='issuePlaceRaw'),
    lineZero: string(name='LineZero', description='lineZero'),
    lineOne: string(name='LineOne', description='lineOne'),
    name: string(name='Name', description='name'),
    nameChinese: string(name='NameChinese', description='nameChinese'),
    nameChineseRaw: string(name='NameChineseRaw', description='nameChineseRaw'),
    passportNo: string(name='PassportNo', description='passportNo'),
    personId: string(name='PersonId', description='personId'),
    sex: string(name='Sex', description='sex'),
    sourceCountry: string(name='SourceCountry', description='sourceCountry'),
    success: boolean(name='Success', description='success'),
    type: string(name='Type', description='type'),
  }(name='Data', description='data'),
}

async function recognizeChinapassport(request: RecognizeChinapassportRequest, runtime: Util.RuntimeOptions): RecognizeChinapassportResponse {
  Util.validateModel(request);
  return doRequest('RecognizeChinapassport', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model RecognizeChinapassportAdvanceRequest = {
  imageURLObject: readable(description='ImageURLObject', name='ImageURLObject'),
}

async function recognizeChinapassportAdvance(request: RecognizeChinapassportAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeChinapassportResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeChinapassportreq = new RecognizeChinapassportRequest{};
  RPCUtil.convert(request, recognizeChinapassportreq);
  recognizeChinapassportreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeChinapassportResp = recognizeChinapassport(recognizeChinapassportreq, runtime);
  return recognizeChinapassportResp;
}

model RecognizeVerificationcodeRequest = {
  imageURL: string(name='ImageURL', description='imageUrl'),
}

model RecognizeVerificationcodeResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    content: string(name='Content', description='content'),
  }(name='Data', description='data'),
}

async function recognizeVerificationcode(request: RecognizeVerificationcodeRequest, runtime: Util.RuntimeOptions): RecognizeVerificationcodeResponse {
  Util.validateModel(request);
  return doRequest('RecognizeVerificationcode', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model RecognizeVerificationcodeAdvanceRequest = {
  imageURLObject: readable(description='ImageURLObject', name='ImageURLObject'),
}

async function recognizeVerificationcodeAdvance(request: RecognizeVerificationcodeAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeVerificationcodeResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeVerificationcodereq = new RecognizeVerificationcodeRequest{};
  RPCUtil.convert(request, recognizeVerificationcodereq);
  recognizeVerificationcodereq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeVerificationcodeResp = recognizeVerificationcode(recognizeVerificationcodereq, runtime);
  return recognizeVerificationcodeResp;
}

model RecognizePassportMRZRequest = {
  imageURL: string(name='ImageURL', description='imageUrl'),
}

model RecognizePassportMRZResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    regions: [
      {
        name: string(name='Name', description='name'),
        recognitionScore: float(name='RecognitionScore', description='recognitionScore'),
        content: string(name='Content', description='content'),
        detectionScore: float(name='DetectionScore', description='detectionScore'),
        bandBoxes: [ float ](name='BandBoxes', description='bandBoxes'),
      }
    ](name='Regions', description='regions'),
  }(name='Data', description='data'),
}

async function recognizePassportMRZ(request: RecognizePassportMRZRequest, runtime: Util.RuntimeOptions): RecognizePassportMRZResponse {
  Util.validateModel(request);
  return doRequest('RecognizePassportMRZ', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model RecognizePassportMRZAdvanceRequest = {
  imageURLObject: readable(description='ImageURLObject', name='ImageURLObject'),
}

async function recognizePassportMRZAdvance(request: RecognizePassportMRZAdvanceRequest, runtime: Util.RuntimeOptions): RecognizePassportMRZResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizePassportMRZreq = new RecognizePassportMRZRequest{};
  RPCUtil.convert(request, recognizePassportMRZreq);
  recognizePassportMRZreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizePassportMRZResp = recognizePassportMRZ(recognizePassportMRZreq, runtime);
  return recognizePassportMRZResp;
}

model RecognizeTakeoutOrderRequest = {
  imageURL: string(name='ImageURL', description='imageUrl'),
}

model RecognizeTakeoutOrderResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    elements: [
      {
        score: float(name='Score', description='score'),
        name: string(name='Name', description='name'),
        value: string(name='Value', description='value'),
        boxes: [ integer ](name='Boxes', description='boxes'),
      }
    ](name='Elements', description='elements'),
  }(name='Data', description='data'),
}

async function recognizeTakeoutOrder(request: RecognizeTakeoutOrderRequest, runtime: Util.RuntimeOptions): RecognizeTakeoutOrderResponse {
  Util.validateModel(request);
  return doRequest('RecognizeTakeoutOrder', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model RecognizeTakeoutOrderAdvanceRequest = {
  imageURLObject: readable(description='ImageURLObject', name='ImageURLObject'),
}

async function recognizeTakeoutOrderAdvance(request: RecognizeTakeoutOrderAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeTakeoutOrderResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeTakeoutOrderreq = new RecognizeTakeoutOrderRequest{};
  RPCUtil.convert(request, recognizeTakeoutOrderreq);
  recognizeTakeoutOrderreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeTakeoutOrderResp = recognizeTakeoutOrder(recognizeTakeoutOrderreq, runtime);
  return recognizeTakeoutOrderResp;
}

model RecognizeQrCodeRequest = {
  tasks: [
    {
      imageURL: string(name='ImageURL', description='imageUrl'),
    }
  ](name='Tasks', description='tasks'),
}

model RecognizeQrCodeResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    elements: [
      {
        taskId: string(name='TaskId', description='taskId'),
        imageURL: string(name='ImageURL', description='imageUrl'),
        results: [
          {
            label: string(name='Label', description='label'),
            suggestion: string(name='Suggestion', description='suggestion'),
            rate: float(name='Rate', description='rate'),
            qrCodesData: [ string ](name='QrCodesData', description='qrCodesData'),
          }
        ](name='Results', description='results'),
      }
    ](name='Elements', description='elements'),
  }(name='Data', description='data'),
}

async function recognizeQrCode(request: RecognizeQrCodeRequest, runtime: Util.RuntimeOptions): RecognizeQrCodeResponse {
  Util.validateModel(request);
  return doRequest('RecognizeQrCode', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model RecognizeVATInvoiceRequest = {
  fileURL: string(name='FileURL', description='fileUrl'),
  fileType: string(name='FileType', description='fileType'),
}

model RecognizeVATInvoiceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    content: {
      invoiceCode: string(name='InvoiceCode', description='invoiceCode'),
      invoiceNo: string(name='InvoiceNo', description='invoiceNo'),
      invoiceDate: string(name='InvoiceDate', description='invoiceDate'),
      antiFakeCode: string(name='AntiFakeCode', description='antiFakeCode'),
      payerName: string(name='PayerName', description='payerName'),
      payerRegisterNo: string(name='PayerRegisterNo', description='payerRegisterNo'),
      payerAddress: string(name='PayerAddress', description='payerAddress'),
      payerBankName: string(name='PayerBankName', description='payerBankName'),
      withoutTaxAmount: string(name='WithoutTaxAmount', description='withoutTaxAmount'),
      taxAmount: string(name='TaxAmount', description='taxAmount'),
      sumAmount: string(name='SumAmount', description='sumAmount'),
      invoiceAmount: string(name='InvoiceAmount', description='invoiceAmount'),
      payeeName: string(name='PayeeName', description='payeeName'),
      payeeRegisterNo: string(name='PayeeRegisterNo', description='payeeRegisterNo'),
      payeeAddress: string(name='PayeeAddress', description='payeeAddress'),
      payeeBankName: string(name='PayeeBankName', description='payeeBankName'),
      payee: string(name='Payee', description='payee'),
      checker: string(name='Checker', description='checker'),
      clerk: string(name='Clerk', description='clerk'),
    }(name='Content', description='content'),
    box: {
      invoiceCodes: [ float ](name='InvoiceCodes', description='invoiceCodes'),
      invoiceNoes: [ float ](name='InvoiceNoes', description='invoiceNoes'),
      invoiceDates: [ float ](name='InvoiceDates', description='invoiceDates'),
      invoiceFakeCodes: [ float ](name='InvoiceFakeCodes', description='invoiceFakeCodes'),
      payerNames: [ float ](name='PayerNames', description='payerNames'),
      payerRegisterNoes: [ float ](name='PayerRegisterNoes', description='payerRegisterNoes'),
      payerAddresses: [ float ](name='PayerAddresses', description='payerAddresses'),
      payerBankNames: [ float ](name='PayerBankNames', description='payerBankNames'),
      withoutTaxAmounts: [ float ](name='WithoutTaxAmounts', description='withoutTaxAmounts'),
      taxAmounts: [ float ](name='TaxAmounts', description='taxAmounts'),
      sumAmounts: [ float ](name='SumAmounts', description='sumAmounts'),
      invoiceAmounts: [ float ](name='InvoiceAmounts', description='invoiceAmounts'),
      payeeNames: [ float ](name='PayeeNames', description='payeeNames'),
      payeeRegisterNoes: [ float ](name='PayeeRegisterNoes', description='payeeRegisterNoes'),
      payeeAddresses: [ float ](name='PayeeAddresses', description='payeeAddresses'),
      payeeBankNames: [ float ](name='PayeeBankNames', description='payeeBankNames'),
      payees: [ float ](name='Payees', description='payees'),
      checkers: [ float ](name='Checkers', description='checkers'),
      clerks: [ float ](name='Clerks', description='clerks'),
    }(name='Box', description='box'),
  }(name='Data', description='data'),
}

async function recognizeVATInvoice(request: RecognizeVATInvoiceRequest, runtime: Util.RuntimeOptions): RecognizeVATInvoiceResponse {
  Util.validateModel(request);
  return doRequest('RecognizeVATInvoice', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model RecognizeVATInvoiceAdvanceRequest = {
  fileURLObject: readable(description='FileURLObject', name='FileURLObject'),
  fileType: string(name='FileType', description='fileType'),
}

async function recognizeVATInvoiceAdvance(request: RecognizeVATInvoiceAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeVATInvoiceResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.fileURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeVATInvoicereq = new RecognizeVATInvoiceRequest{};
  RPCUtil.convert(request, recognizeVATInvoicereq);
  recognizeVATInvoicereq.fileURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeVATInvoiceResp = recognizeVATInvoice(recognizeVATInvoicereq, runtime);
  return recognizeVATInvoiceResp;
}

model RecognizeCharacterRequest = {
  imageURL: string(name='ImageURL', description='imageUrl'),
  minHeight: integer(name='MinHeight', description='minHeight'),
  outputProbability: boolean(name='OutputProbability', description='outputProbability'),
}

model RecognizeCharacterResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    results: [
      {
        probability: float(name='Probability', description='probability'),
        text: string(name='Text', description='text'),
        textRectangles: {
          angle: integer(name='Angle', description='angle'),
          left: integer(name='Left', description='left'),
          top: integer(name='Top', description='top'),
          width: integer(name='Width', description='width'),
          height: integer(name='Height', description='height'),
        }(name='TextRectangles', description='textRectangles'),
      }
    ](name='Results', description='results'),
  }(name='Data', description='data'),
}

async function recognizeCharacter(request: RecognizeCharacterRequest, runtime: Util.RuntimeOptions): RecognizeCharacterResponse {
  Util.validateModel(request);
  return doRequest('RecognizeCharacter', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model RecognizeCharacterAdvanceRequest = {
  imageURLObject: readable(description='ImageURLObject', name='ImageURLObject'),
  minHeight: integer(name='MinHeight', description='minHeight'),
  outputProbability: boolean(name='OutputProbability', description='outputProbability'),
}

async function recognizeCharacterAdvance(request: RecognizeCharacterAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeCharacterResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeCharacterreq = new RecognizeCharacterRequest{};
  RPCUtil.convert(request, recognizeCharacterreq);
  recognizeCharacterreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeCharacterResp = recognizeCharacter(recognizeCharacterreq, runtime);
  return recognizeCharacterResp;
}

model RecognizeTaxiInvoiceRequest = {
  imageURL: string(name='ImageURL', description='imageUrl'),
}

model RecognizeTaxiInvoiceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    invoices: [
      {
        rotateType: integer(name='RotateType', description='rotateType'),
        items: [
          {
            text: string(name='Text', description='text'),
            itemRoi: {
              angle: float(name='Angle', description='angle'),
              center: {
                x: float(name='X', description='x'),
                y: float(name='Y', description='y'),
              }(name='Center', description='center'),
              size: {
                h: float(name='H', description='h'),
                w: float(name='W', description='w'),
              }(name='Size', description='size'),
            }(name='ItemRoi', description='itemRoi'),
          }
        ](name='Items', description='items'),
        invoiceRoi: {
          h: float(name='H', description='h'),
          w: float(name='W', description='w'),
          x: float(name='X', description='x'),
          y: float(name='Y', description='y'),
        }(name='InvoiceRoi', description='invoiceRoi'),
      }
    ](name='Invoices', description='invoices'),
  }(name='Data', description='data'),
}

async function recognizeTaxiInvoice(request: RecognizeTaxiInvoiceRequest, runtime: Util.RuntimeOptions): RecognizeTaxiInvoiceResponse {
  Util.validateModel(request);
  return doRequest('RecognizeTaxiInvoice', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model RecognizeTaxiInvoiceAdvanceRequest = {
  imageURLObject: readable(description='ImageURLObject', name='ImageURLObject'),
}

async function recognizeTaxiInvoiceAdvance(request: RecognizeTaxiInvoiceAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeTaxiInvoiceResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeTaxiInvoicereq = new RecognizeTaxiInvoiceRequest{};
  RPCUtil.convert(request, recognizeTaxiInvoicereq);
  recognizeTaxiInvoicereq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeTaxiInvoiceResp = recognizeTaxiInvoice(recognizeTaxiInvoicereq, runtime);
  return recognizeTaxiInvoiceResp;
}

model RecognizeIdentityCardRequest = {
  imageURL: string(name='ImageURL', description='imageUrl'),
  side: string(name='Side', description='side'),
}

model RecognizeIdentityCardResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    frontResult: {
      address: string(name='Address', description='address'),
      name: string(name='Name', description='name'),
      nationality: string(name='Nationality', description='nationality'),
      IDNumber: string(name='IDNumber', description='idNumber'),
      gender: string(name='Gender', description='gender'),
      birthDate: string(name='BirthDate', description='birthDate'),
      cardAreas: [
        {
          x: float(name='X', description='x'),
          y: float(name='Y', description='y'),
        }
      ](name='CardAreas', description='cardAreas'),
      faceRectVertices: [
        {
          x: float(name='X', description='x'),
          y: float(name='Y', description='y'),
        }
      ](name='FaceRectVertices', description='faceRectVertices'),
      faceRectangle: {
        angle: float(name='Angle', description='angle'),
        center: {
          x: float(name='X', description='x'),
          y: float(name='Y', description='y'),
        }(name='Center', description='center'),
        size: {
          height: float(name='Height', description='height'),
          width: float(name='Width', description='width'),
        }(name='Size', description='size'),
      }(name='FaceRectangle', description='faceRectangle'),
    }(name='FrontResult', description='frontResult'),
    backResult: {
      startDate: string(name='StartDate', description='startDate'),
      endDate: string(name='EndDate', description='endDate'),
      issue: string(name='Issue', description='issue'),
    }(name='BackResult', description='backResult'),
  }(name='Data', description='data'),
}

async function recognizeIdentityCard(request: RecognizeIdentityCardRequest, runtime: Util.RuntimeOptions): RecognizeIdentityCardResponse {
  Util.validateModel(request);
  return doRequest('RecognizeIdentityCard', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model RecognizeIdentityCardAdvanceRequest = {
  imageURLObject: readable(description='ImageURLObject', name='ImageURLObject'),
  side: string(name='Side', description='side'),
}

async function recognizeIdentityCardAdvance(request: RecognizeIdentityCardAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeIdentityCardResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeIdentityCardreq = new RecognizeIdentityCardRequest{};
  RPCUtil.convert(request, recognizeIdentityCardreq);
  recognizeIdentityCardreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeIdentityCardResp = recognizeIdentityCard(recognizeIdentityCardreq, runtime);
  return recognizeIdentityCardResp;
}

model RecognizeLicensePlateRequest = {
  imageURL: string(name='ImageURL', description='imageUrl'),
}

model RecognizeLicensePlateResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    plates: [
      {
        confidence: float(name='Confidence', description='confidence'),
        plateNumber: string(name='PlateNumber', description='plateNumber'),
        plateType: string(name='PlateType', description='plateType'),
        plateTypeConfidence: float(name='PlateTypeConfidence', description='plateTypeConfidence'),
        roi: {
          h: integer(name='H', description='h'),
          w: integer(name='W', description='w'),
          x: integer(name='X', description='x'),
          y: integer(name='Y', description='y'),
        }(name='Roi', description='roi'),
      }
    ](name='Plates', description='plates'),
  }(name='Data', description='data'),
}

async function recognizeLicensePlate(request: RecognizeLicensePlateRequest, runtime: Util.RuntimeOptions): RecognizeLicensePlateResponse {
  Util.validateModel(request);
  return doRequest('RecognizeLicensePlate', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model RecognizeLicensePlateAdvanceRequest = {
  imageURLObject: readable(description='ImageURLObject', name='ImageURLObject'),
}

async function recognizeLicensePlateAdvance(request: RecognizeLicensePlateAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeLicensePlateResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeLicensePlatereq = new RecognizeLicensePlateRequest{};
  RPCUtil.convert(request, recognizeLicensePlatereq);
  recognizeLicensePlatereq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeLicensePlateResp = recognizeLicensePlate(recognizeLicensePlatereq, runtime);
  return recognizeLicensePlateResp;
}

model RecognizeTableRequest = {
  imageURL: string(name='ImageURL', description='imageUrl'),
  outputFormat: string(name='OutputFormat', description='outputFormat'),
  useFinanceModel: boolean(name='UseFinanceModel', description='useFinanceModel'),
  assureDirection: boolean(name='AssureDirection', description='assureDirection'),
  hasLine: boolean(name='HasLine', description='hasLine'),
  skipDetection: boolean(name='SkipDetection', description='skipDetection'),
}

model RecognizeTableResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    fileContent: string(name='FileContent', description='fileContent'),
    tables: [
      {
        head: string(name='Head', description='head'),
        tail: string(name='Tail', description='tail'),
        tableRows: [
          {
            tableColumns: [
              {
                startColumn: integer(name='StartColumn', description='startColumn'),
                startRow: integer(name='StartRow', description='startRow'),
                endColumn: integer(name='EndColumn', description='endColumn'),
                endRow: integer(name='EndRow', description='endRow'),
                height: integer(name='Height', description='height'),
                width: integer(name='Width', description='width'),
                texts: [ string ](name='Texts', description='texts'),
              }
            ](name='TableColumns', description='tableColumns'),
          }
        ](name='TableRows', description='tableRows'),
      }
    ](name='Tables', description='tables'),
  }(name='Data', description='data'),
}

async function recognizeTable(request: RecognizeTableRequest, runtime: Util.RuntimeOptions): RecognizeTableResponse {
  Util.validateModel(request);
  return doRequest('RecognizeTable', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model RecognizeTableAdvanceRequest = {
  imageURLObject: readable(description='ImageURLObject', name='ImageURLObject'),
  outputFormat: string(name='OutputFormat', description='outputFormat'),
  useFinanceModel: boolean(name='UseFinanceModel', description='useFinanceModel'),
  assureDirection: boolean(name='AssureDirection', description='assureDirection'),
  hasLine: boolean(name='HasLine', description='hasLine'),
  skipDetection: boolean(name='SkipDetection', description='skipDetection'),
}

async function recognizeTableAdvance(request: RecognizeTableAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeTableResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeTablereq = new RecognizeTableRequest{};
  RPCUtil.convert(request, recognizeTablereq);
  recognizeTablereq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeTableResp = recognizeTable(recognizeTablereq, runtime);
  return recognizeTableResp;
}

model RecognizeDrivingLicenseRequest = {
  imageURL: string(name='ImageURL', description='imageUrl'),
  side: string(name='Side', description='side'),
}

model RecognizeDrivingLicenseResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    faceResult: {
      plateNumber: string(name='PlateNumber', description='plateNumber'),
      vehicleType: string(name='VehicleType', description='vehicleType'),
      owner: string(name='Owner', description='owner'),
      useCharacter: string(name='UseCharacter', description='useCharacter'),
      address: string(name='Address', description='address'),
      model: string(name='Model', description='model'),
      vin: string(name='Vin', description='vin'),
      engineNumber: string(name='EngineNumber', description='engineNumber'),
      registerDate: string(name='RegisterDate', description='registerDate'),
      issueDate: string(name='IssueDate', description='issueDate'),
    }(name='FaceResult', description='faceResult'),
    backResult: {
      approvedPassengerCapacity: string(name='ApprovedPassengerCapacity', description='approvedPassengerCapacity'),
      approvedLoad: string(name='ApprovedLoad', description='approvedLoad'),
      fileNumber: string(name='FileNumber', description='fileNumber'),
      grossMass: string(name='GrossMass', description='grossMass'),
      energyType: string(name='EnergyType', description='energyType'),
      inspectionRecord: string(name='InspectionRecord', description='inspectionRecord'),
      overallDimension: string(name='OverallDimension', description='overallDimension'),
      tractionMass: string(name='TractionMass', description='tractionMass'),
      unladenMass: string(name='UnladenMass', description='unladenMass'),
      plateNumber: string(name='PlateNumber', description='plateNumber'),
    }(name='BackResult', description='backResult'),
  }(name='Data', description='data'),
}

async function recognizeDrivingLicense(request: RecognizeDrivingLicenseRequest, runtime: Util.RuntimeOptions): RecognizeDrivingLicenseResponse {
  Util.validateModel(request);
  return doRequest('RecognizeDrivingLicense', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model RecognizeDrivingLicenseAdvanceRequest = {
  imageURLObject: readable(description='ImageURLObject', name='ImageURLObject'),
  side: string(name='Side', description='side'),
}

async function recognizeDrivingLicenseAdvance(request: RecognizeDrivingLicenseAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeDrivingLicenseResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeDrivingLicensereq = new RecognizeDrivingLicenseRequest{};
  RPCUtil.convert(request, recognizeDrivingLicensereq);
  recognizeDrivingLicensereq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeDrivingLicenseResp = recognizeDrivingLicense(recognizeDrivingLicensereq, runtime);
  return recognizeDrivingLicenseResp;
}

model RecognizeBankCardRequest = {
  imageURL: string(name='ImageURL', description='imageUrl'),
}

model RecognizeBankCardResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    bankName: string(name='BankName', description='bankName'),
    cardNumber: string(name='CardNumber', description='cardNumber'),
    validDate: string(name='ValidDate', description='validDate'),
  }(name='Data', description='data'),
}

async function recognizeBankCard(request: RecognizeBankCardRequest, runtime: Util.RuntimeOptions): RecognizeBankCardResponse {
  Util.validateModel(request);
  return doRequest('RecognizeBankCard', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model RecognizeBankCardAdvanceRequest = {
  imageURLObject: readable(description='ImageURLObject', name='ImageURLObject'),
}

async function recognizeBankCardAdvance(request: RecognizeBankCardAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeBankCardResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeBankCardreq = new RecognizeBankCardRequest{};
  RPCUtil.convert(request, recognizeBankCardreq);
  recognizeBankCardreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeBankCardResp = recognizeBankCard(recognizeBankCardreq, runtime);
  return recognizeBankCardResp;
}

model RecognizeTrainTicketRequest = {
  imageURL: string(name='ImageURL', description='imageUrl'),
}

model RecognizeTrainTicketResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    date: string(name='Date', description='date'),
    destination: string(name='Destination', description='destination'),
    level: string(name='Level', description='level'),
    number: string(name='Number', description='number'),
    name: string(name='Name', description='name'),
    departureStation: string(name='DepartureStation', description='departureStation'),
    seat: string(name='Seat', description='seat'),
    price: float(name='Price', description='price'),
  }(name='Data', description='data'),
}

async function recognizeTrainTicket(request: RecognizeTrainTicketRequest, runtime: Util.RuntimeOptions): RecognizeTrainTicketResponse {
  Util.validateModel(request);
  return doRequest('RecognizeTrainTicket', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model RecognizeTrainTicketAdvanceRequest = {
  imageURLObject: readable(description='ImageURLObject', name='ImageURLObject'),
}

async function recognizeTrainTicketAdvance(request: RecognizeTrainTicketAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeTrainTicketResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeTrainTicketreq = new RecognizeTrainTicketRequest{};
  RPCUtil.convert(request, recognizeTrainTicketreq);
  recognizeTrainTicketreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeTrainTicketResp = recognizeTrainTicket(recognizeTrainTicketreq, runtime);
  return recognizeTrainTicketResp;
}

model RecognizeDriverLicenseRequest = {
  imageURL: string(name='ImageURL', description='imageUrl'),
  side: string(name='Side', description='side'),
}

model RecognizeDriverLicenseResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    faceResult: {
      name: string(name='Name', description='name'),
      licenseNumber: string(name='LicenseNumber', description='licenseNumber'),
      vehicleType: string(name='VehicleType', description='vehicleType'),
      startDate: string(name='StartDate', description='startDate'),
      endDate: string(name='EndDate', description='endDate'),
      issueDate: string(name='IssueDate', description='issueDate'),
      address: string(name='Address', description='address'),
      gender: string(name='Gender', description='gender'),
    }(name='FaceResult', description='faceResult'),
    backResult: {
      archiveNumber: string(name='ArchiveNumber', description='archiveNumber'),
    }(name='BackResult', description='backResult'),
  }(name='Data', description='data'),
}

async function recognizeDriverLicense(request: RecognizeDriverLicenseRequest, runtime: Util.RuntimeOptions): RecognizeDriverLicenseResponse {
  Util.validateModel(request);
  return doRequest('RecognizeDriverLicense', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model RecognizeDriverLicenseAdvanceRequest = {
  imageURLObject: readable(description='ImageURLObject', name='ImageURLObject'),
  side: string(name='Side', description='side'),
}

async function recognizeDriverLicenseAdvance(request: RecognizeDriverLicenseAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeDriverLicenseResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeDriverLicensereq = new RecognizeDriverLicenseRequest{};
  RPCUtil.convert(request, recognizeDriverLicensereq);
  recognizeDriverLicensereq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeDriverLicenseResp = recognizeDriverLicense(recognizeDriverLicensereq, runtime);
  return recognizeDriverLicenseResp;
}

model RecognizeAccountPageRequest = {
  imageURL: string(name='ImageURL', description='imageUrl'),
}

model RecognizeAccountPageResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    angle: float(name='Angle', description='angle'),
    name: string(name='Name', description='name'),
    gender: string(name='Gender', description='gender'),
    relation: string(name='Relation', description='relation'),
    birthPlace: string(name='BirthPlace', description='birthPlace'),
    nationality: string(name='Nationality', description='nationality'),
    nativePlace: string(name='NativePlace', description='nativePlace'),
    birthDate: string(name='BirthDate', description='birthDate'),
    IDNumber: string(name='IDNumber', description='idNumber'),
    invalidStampAreas: [
      {
        left: integer(name='Left', description='left'),
        top: integer(name='Top', description='top'),
        height: integer(name='Height', description='height'),
        width: integer(name='Width', description='width'),
      }
    ](name='InvalidStampAreas', description='invalidStampAreas'),
    undertakeStampAreas: [
      {
        left: integer(name='Left', description='left'),
        top: integer(name='Top', description='top'),
        height: integer(name='Height', description='height'),
        width: integer(name='Width', description='width'),
      }
    ](name='UndertakeStampAreas', description='undertakeStampAreas'),
    registerStampAreas: [
      {
        left: integer(name='Left', description='left'),
        top: integer(name='Top', description='top'),
        height: integer(name='Height', description='height'),
        width: integer(name='Width', description='width'),
      }
    ](name='RegisterStampAreas', description='registerStampAreas'),
    otherStampAreas: [
      {
        left: integer(name='Left', description='left'),
        top: integer(name='Top', description='top'),
        height: integer(name='Height', description='height'),
        width: integer(name='Width', description='width'),
      }
    ](name='OtherStampAreas', description='otherStampAreas'),
    titleArea: {
      left: integer(name='Left', description='left'),
      top: integer(name='Top', description='top'),
      height: integer(name='Height', description='height'),
      width: integer(name='Width', description='width'),
    }(name='TitleArea', description='titleArea'),
  }(name='Data', description='data'),
}

async function recognizeAccountPage(request: RecognizeAccountPageRequest, runtime: Util.RuntimeOptions): RecognizeAccountPageResponse {
  Util.validateModel(request);
  return doRequest('RecognizeAccountPage', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model RecognizeAccountPageAdvanceRequest = {
  imageURLObject: readable(description='ImageURLObject', name='ImageURLObject'),
}

async function recognizeAccountPageAdvance(request: RecognizeAccountPageAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeAccountPageResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeAccountPagereq = new RecognizeAccountPageRequest{};
  RPCUtil.convert(request, recognizeAccountPagereq);
  recognizeAccountPagereq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeAccountPageResp = recognizeAccountPage(recognizeAccountPagereq, runtime);
  return recognizeAccountPageResp;
}

model RecognizeStampRequest = {
  imageURL: string(name='ImageURL', description='imageUrl'),
}

model RecognizeStampResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    results: [
      {
        generalText: [
          {
            content: string(name='Content', description='content'),
            confidence: float(name='Confidence', description='confidence'),
          }
        ](name='GeneralText', description='generalText'),
        roi: {
          left: integer(name='Left', description='left'),
          top: integer(name='Top', description='top'),
          width: integer(name='Width', description='width'),
          height: integer(name='Height', description='height'),
        }(name='Roi', description='roi'),
        text: {
          content: string(name='Content', description='content'),
          confidence: float(name='Confidence', description='confidence'),
        }(name='Text', description='text'),
      }
    ](name='Results', description='results'),
  }(name='Data', description='data'),
}

async function recognizeStamp(request: RecognizeStampRequest, runtime: Util.RuntimeOptions): RecognizeStampResponse {
  Util.validateModel(request);
  return doRequest('RecognizeStamp', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model RecognizeStampAdvanceRequest = {
  imageURLObject: readable(description='ImageURLObject', name='ImageURLObject'),
}

async function recognizeStampAdvance(request: RecognizeStampAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeStampResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeStampreq = new RecognizeStampRequest{};
  RPCUtil.convert(request, recognizeStampreq);
  recognizeStampreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeStampResp = recognizeStamp(recognizeStampreq, runtime);
  return recognizeStampResp;
}

model RecognizeBusinessCardRequest = {
  imageURL: string(name='ImageURL', description='imageUrl'),
}

model RecognizeBusinessCardResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    name: string(name='Name', description='name'),
    companies: [ string ](name='Companies', description='company'),
    departments: [ string ](name='Departments', description='department'),
    titles: [ string ](name='Titles', description='title'),
    cellPhoneNumbers: [ string ](name='CellPhoneNumbers', description='cellNumber'),
    officePhoneNumbers: [ string ](name='OfficePhoneNumbers', description='officePhoneNumber'),
    addresses: [ string ](name='Addresses', description='address'),
    emails: [ string ](name='Emails', description='email'),
  }(name='Data', description='data'),
}

async function recognizeBusinessCard(request: RecognizeBusinessCardRequest, runtime: Util.RuntimeOptions): RecognizeBusinessCardResponse {
  Util.validateModel(request);
  return doRequest('RecognizeBusinessCard', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model RecognizeBusinessCardAdvanceRequest = {
  imageURLObject: readable(description='ImageURLObject', name='ImageURLObject'),
}

async function recognizeBusinessCardAdvance(request: RecognizeBusinessCardAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeBusinessCardResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeBusinessCardreq = new RecognizeBusinessCardRequest{};
  RPCUtil.convert(request, recognizeBusinessCardreq);
  recognizeBusinessCardreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeBusinessCardResp = recognizeBusinessCard(recognizeBusinessCardreq, runtime);
  return recognizeBusinessCardResp;
}

model RecognizeVINCodeRequest = {
  imageURL: string(name='ImageURL', description='imageUrl'),
}

model RecognizeVINCodeResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    vinCode: string(name='VinCode', description='vinCode'),
  }(name='Data', description='data'),
}

async function recognizeVINCode(request: RecognizeVINCodeRequest, runtime: Util.RuntimeOptions): RecognizeVINCodeResponse {
  Util.validateModel(request);
  return doRequest('RecognizeVINCode', 'HTTPS', 'POST' , '2019-12-30', 'AK', request, null, runtime);
}

model RecognizeVINCodeAdvanceRequest = {
  imageURLObject: readable(description='ImageURLObject', name='ImageURLObject'),
}

async function recognizeVINCodeAdvance(request: RecognizeVINCodeAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeVINCodeResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeVINCodereq = new RecognizeVINCodeRequest{};
  RPCUtil.convert(request, recognizeVINCodereq);
  recognizeVINCodereq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeVINCodeResp = recognizeVINCode(recognizeVINCodereq, runtime);
  return recognizeVINCodeResp;
}

model RecognizeBusinessLicenseRequest = {
  imageURL: string(name='ImageURL', description='imageUrl'),
}

model RecognizeBusinessLicenseResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    angle: string(name='Angle', description='angle'),
    registerNumber: string(name='RegisterNumber', description='registerNumber'),
    name: string(name='Name', description='name'),
    type: string(name='Type', description='type'),
    legalPerson: string(name='LegalPerson', description='legalPerson'),
    establishDate: string(name='EstablishDate', description='establishDate'),
    validPeriod: string(name='ValidPeriod', description='validPeriod'),
    address: string(name='Address', description='address'),
    capital: string(name='Capital', description='capital'),
    business: string(name='Business', description='business'),
    emblem: {
      top: integer(name='Top', description='top'),
      left: integer(name='Left', description='left'),
      height: integer(name='Height', description='height'),
      width: integer(name='Width', description='width'),
    }(name='Emblem', description='emblem'),
    title: {
      top: integer(name='Top', description='top'),
      left: integer(name='Left', description='left'),
      height: integer(name='Height', description='height'),
      width: integer(name='Width', description='width'),
    }(name='Title', description='title'),
    stamp: {
      top: integer(name='Top', description='top'),
      left: integer(name='Left', description='left'),
      height: integer(name='Height', description='height'),
      width: integer(name='Width', description='width'),
    }(name='Stamp', description='stamp'),
    QRCode: {
      top: integer(name='Top', description='top'),
      left: integer(name='Left', description='left'),
      height: integer(name='Height', description='height'),
      width: integer(name='Width', description='width'),
    }(name='QRCode', description='qrCode'),
  }(name='Data', description='data'),
}

async function recognizeBusinessLicense(request: RecognizeBusinessLicenseRequest, runtime: Util.RuntimeOptions): RecognizeBusinessLicenseResponse {
  Util.validateModel(request);
  return doRequest('RecognizeBusinessLicense', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model RecognizeBusinessLicenseAdvanceRequest = {
  imageURLObject: readable(description='ImageURLObject', name='ImageURLObject'),
}

async function recognizeBusinessLicenseAdvance(request: RecognizeBusinessLicenseAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeBusinessLicenseResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeBusinessLicensereq = new RecognizeBusinessLicenseRequest{};
  RPCUtil.convert(request, recognizeBusinessLicensereq);
  recognizeBusinessLicensereq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeBusinessLicenseResp = recognizeBusinessLicense(recognizeBusinessLicensereq, runtime);
  return recognizeBusinessLicenseResp;
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
