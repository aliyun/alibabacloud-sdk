/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'sgw';
  @version = '2018-05-11';
  @endpointRule = 'regional';
  @endpointMap = {
    'cn-qingdao' = 'sgw.cn-shanghai.aliyuncs.com',
    'cn-beijing' = 'sgw.cn-shanghai.aliyuncs.com',
    'cn-chengdu' = 'sgw.cn-shanghai.aliyuncs.com',
    'cn-zhangjiakou' = 'sgw.cn-shanghai.aliyuncs.com',
    'cn-huhehaote' = 'sgw.cn-shanghai.aliyuncs.com',
    'cn-hangzhou' = 'sgw.cn-shanghai.aliyuncs.com',
    'cn-shenzhen' = 'sgw.cn-shanghai.aliyuncs.com',
    'cn-hongkong' = 'sgw.cn-shanghai.aliyuncs.com',
    'us-east-1' = 'sgw.us-west-1.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model ActivateAllInOneGatewayRequest {
  clientUUID?: string(name='ClientUUID', position='Query'),
  deviceNumber?: string(name='DeviceNumber', position='Query'),
  gatewayId?: string(name='GatewayId', position='Query'),
  model?: string(name='Model', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  serialNumber: string(name='SerialNumber', position='Query'),
}

model ActivateAllInOneGatewayResponseBody = {
  code?: string(name='Code'),
  gatewayId?: string(name='GatewayId'),
  licenseContent?: string(name='LicenseContent'),
  message?: string(name='Message'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ActivateAllInOneGatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ActivateAllInOneGatewayResponseBody(name='body'),
}

async function activateAllInOneGateway(request: ActivateAllInOneGatewayRequest): ActivateAllInOneGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ActivateAllInOneGateway', 'POST', '/', 'json', false, 'json', request);
}

model ActivateGatewayRequest {
  category?: string(name='Category', position='Query'),
  clientUUID?: string(name='ClientUUID', example='28c07861-a93b-4aa2-ae3a-3f7b7e7f6184', position='Query'),
  model?: string(name='Model', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  serialNumber?: string(name='SerialNumber', position='Query'),
  token: string(name='Token', example='xxxxxxxxxxxxxxxx', position='Query'),
  type?: string(name='Type', position='Query'),
}

model ActivateGatewayResponseBody = {
  code?: string(name='Code', example='200'),
  gatewayId?: string(name='GatewayId', example='gw-1234567890abcd'),
  message?: string(name='Message', example='successful'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  requestId?: string(name='RequestId', example='76109369-5729-467D-D4A3-1131A8DA1973'),
  success?: boolean(name='Success', example='true'),
}

model ActivateGatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ActivateGatewayResponseBody(name='body'),
}

async function activateGateway(request: ActivateGatewayRequest): ActivateGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ActivateGateway', 'POST', '/', 'json', false, 'json', request);
}

model AddSharesToExpressSyncRequest {
  expressSyncId: string(name='ExpressSyncId', example='sync-0001xv7je357xn8tr***', position='Query'),
  gatewayShares: string(name='GatewayShares', example='{"gw-000gwgp0j3jp8cb3t***":"share1,share2","gw-0001b2otnkdzte62j***":"weekly"}', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model AddSharesToExpressSyncResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  mnsFullSyncDelay?: long(name='MnsFullSyncDelay'),
  mnsInnerEndpoint?: string(name='MnsInnerEndpoint'),
  mnsPublicEndpoint?: string(name='MnsPublicEndpoint'),
  mnsQueues?: string(name='MnsQueues'),
  mnsTopic?: string(name='MnsTopic'),
  requestId?: string(name='RequestId', example='1EDBC004-6B1C-4511-ACF5-0B4875BA3887'),
  success?: boolean(name='Success', example='true'),
  taskId?: string(name='TaskId', example='t-0001xv7je357xr6ql***'),
}

model AddSharesToExpressSyncResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddSharesToExpressSyncResponseBody(name='body'),
}

async function addSharesToExpressSync(request: AddSharesToExpressSyncRequest): AddSharesToExpressSyncResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddSharesToExpressSync', 'POST', '/', 'json', false, 'json', request);
}

model AddTagsToGatewayRequest {
  gatewayId: string(name='GatewayId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tags: string(name='Tags', position='Query'),
}

model AddTagsToGatewayResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddTagsToGatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddTagsToGatewayResponseBody(name='body'),
}

async function addTagsToGateway(request: AddTagsToGatewayRequest): AddTagsToGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddTagsToGateway', 'POST', '/', 'json', false, 'json', request);
}

model CheckActivationKeyRequest {
  cryptKey?: string(name='CryptKey', position='Query'),
  cryptText?: string(name='CryptText', position='Query'),
  gatewayId?: string(name='GatewayId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  token?: string(name='Token', position='Query'),
}

model CheckActivationKeyResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CheckActivationKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckActivationKeyResponseBody(name='body'),
}

async function checkActivationKey(request: CheckActivationKeyRequest): CheckActivationKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckActivationKey', 'POST', '/', 'json', false, 'json', request);
}

model CheckBlockVolumeNameRequest {
  bucketEndpoint: string(name='BucketEndpoint', description='Bucket Endpoint。', example='oss-cn-hangzhou-internal.aliyuncs.com', position='Query'),
  bucketName: string(name='BucketName', example='random***', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  volumeName: string(name='VolumeName', example='alex***', position='Query'),
}

model CheckBlockVolumeNameResponseBody = {
  code?: string(name='Code', example='200'),
  isAlreadyExist?: boolean(name='IsAlreadyExist'),
  isRequireRecovery?: string(name='IsRequireRecovery', example='false'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='735B642E-6564-4A87-99A0-3609F67C787E'),
  success?: boolean(name='Success', example='true'),
}

model CheckBlockVolumeNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckBlockVolumeNameResponseBody(name='body'),
}

async function checkBlockVolumeName(request: CheckBlockVolumeNameRequest): CheckBlockVolumeNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckBlockVolumeName', 'POST', '/', 'json', false, 'json', request);
}

model CheckGatewayEssdSupportRequest {
  gatewayId: string(name='GatewayId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model CheckGatewayEssdSupportResponseBody = {
  code?: string(name='Code'),
  isServiceAffect?: boolean(name='IsServiceAffect'),
  isSupportEssd?: boolean(name='IsSupportEssd'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CheckGatewayEssdSupportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckGatewayEssdSupportResponseBody(name='body'),
}

async function checkGatewayEssdSupport(request: CheckGatewayEssdSupportRequest): CheckGatewayEssdSupportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckGatewayEssdSupport', 'POST', '/', 'json', false, 'json', request);
}

model CheckMnsServiceRequest {
  securityToken?: string(name='SecurityToken', position='Query'),
}

model CheckMnsServiceResponseBody = {
  checkMessage?: string(name='CheckMessage'),
  code?: string(name='Code'),
  isEnabled?: boolean(name='IsEnabled'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CheckMnsServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckMnsServiceResponseBody(name='body'),
}

async function checkMnsService(request: CheckMnsServiceRequest): CheckMnsServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckMnsService', 'POST', '/', 'json', false, 'json', request);
}

model CheckRoleRequest {
  roleType?: string(name='RoleType', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model CheckRoleResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CheckRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckRoleResponseBody(name='body'),
}

async function checkRole(request: CheckRoleRequest): CheckRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckRole', 'POST', '/', 'json', false, 'json', request);
}

model CheckSlrRoleRequest {
  createIfNotExist: boolean(name='CreateIfNotExist', position='Query'),
  roleName: string(name='RoleName', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model CheckSlrRoleResponseBody = {
  code?: string(name='Code'),
  exist?: boolean(name='Exist'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  requireOldWayCheck?: boolean(name='RequireOldWayCheck'),
  success?: boolean(name='Success'),
}

model CheckSlrRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckSlrRoleResponseBody(name='body'),
}

async function checkSlrRole(request: CheckSlrRoleRequest): CheckSlrRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckSlrRole', 'POST', '/', 'json', false, 'json', request);
}

model CheckUpgradeVersionRequest {
  clientUUID: string(name='ClientUUID', position='Query'),
  gatewayId: string(name='GatewayId', position='Query'),
  gatewayVersion?: string(name='GatewayVersion', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model CheckUpgradeVersionResponseBody = {
  code?: string(name='Code'),
  latestVersion?: string(name='LatestVersion'),
  message?: string(name='Message'),
  option?: string(name='Option'),
  patches?: {
    patch?: [ 
    {
      internalUrl?: string(name='InternalUrl'),
      mD5?: string(name='MD5'),
      name?: string(name='Name'),
      url?: string(name='Url'),
    }
  ](name='Patch')
  }(name='Patches'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CheckUpgradeVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckUpgradeVersionResponseBody(name='body'),
}

async function checkUpgradeVersion(request: CheckUpgradeVersionRequest): CheckUpgradeVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckUpgradeVersion', 'POST', '/', 'json', false, 'json', request);
}

model CreateCacheRequest {
  category: string(name='Category', position='Query'),
  gatewayId: string(name='GatewayId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  sizeInGB: long(name='SizeInGB', position='Query'),
}

model CreateCacheResponseBody = {
  buyURL?: string(name='BuyURL'),
  cacheId?: string(name='CacheId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateCacheResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCacheResponseBody(name='body'),
}

async function createCache(request: CreateCacheRequest): CreateCacheResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCache', 'POST', '/', 'json', false, 'json', request);
}

model CreateElasticGatewayPrivateZoneRequest {
  gatewayId: string(name='GatewayId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model CreateElasticGatewayPrivateZoneResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model CreateElasticGatewayPrivateZoneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateElasticGatewayPrivateZoneResponseBody(name='body'),
}

async function createElasticGatewayPrivateZone(request: CreateElasticGatewayPrivateZoneRequest): CreateElasticGatewayPrivateZoneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateElasticGatewayPrivateZone', 'POST', '/', 'json', false, 'json', request);
}

model CreateExpressSyncRequest {
  bucketName: string(name='BucketName', example='sgw-test***', position='Query'),
  bucketPrefix?: string(name='BucketPrefix', example='test***', position='Query'),
  bucketRegion: string(name='BucketRegion', example='cn-hangzhou', position='Query'),
  description?: string(name='Description', position='Query'),
  name: string(name='Name', example='alex-tb***', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model CreateExpressSyncResponseBody = {
  code?: string(name='Code', example='200'),
  expressSyncId?: string(name='ExpressSyncId', example='sync-0001xv7je357xn8tr***'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='EEFC9927-B097-446D-8FDA-F848C8B2C9E0'),
  success?: boolean(name='Success', example='true'),
}

model CreateExpressSyncResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateExpressSyncResponseBody(name='body'),
}

async function createExpressSync(request: CreateExpressSyncRequest): CreateExpressSyncResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateExpressSync', 'POST', '/', 'json', false, 'json', request);
}

model CreateGatewayRequest {
  description?: string(name='Description', position='Query'),
  gatewayClass?: string(name='GatewayClass', example='Basic', position='Query'),
  location: string(name='Location', example='Cloud', position='Query'),
  name: string(name='Name', example='alex***', position='Query'),
  postPaid?: boolean(name='PostPaid', example='true', position='Query'),
  publicNetworkBandwidth?: int32(name='PublicNetworkBandwidth', example='50', position='Query'),
  releaseAfterExpiration?: boolean(name='ReleaseAfterExpiration', example='true', position='Query'),
  resourceRegionId?: string(name='ResourceRegionId', example='cn-hangzhou', position='Query'),
  secondaryVSwitchId?: string(name='SecondaryVSwitchId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  storageBundleId: string(name='StorageBundleId', example='sb-0001b2otnkdxrigeq***', position='Query'),
  type: string(name='Type', example='File', position='Query'),
  untrustedEnvId?: string(name='UntrustedEnvId', position='Query'),
  untrustedEnvInstanceType?: string(name='UntrustedEnvInstanceType', position='Query'),
  vSwitchId?: string(name='VSwitchId', example='vsw-bp1krhkglx3nahkb9s***', position='Query'),
}

model CreateGatewayResponseBody = {
  buyURL?: string(name='BuyURL', example='https://common-buy.aliyun.com/?commodityCode=hcs_sgw_csg_pre&request={"gateway_id":"gw-0007va9bnidei3s8a***","directBuy":"false","gateway_class":"standard","cache_cloud_efficiency_size":0}&regionId=cn-hangzhou#/buy'),
  code?: string(name='Code', example='200'),
  gatewayId?: string(name='GatewayId', example='gw-0001xv7je357zm9u6***'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='8E69E1A1-9076-4C8C-8ADF-ACD253886E22'),
  success?: boolean(name='Success', example='true'),
}

model CreateGatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateGatewayResponseBody(name='body'),
}

async function createGateway(request: CreateGatewayRequest): CreateGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateGateway', 'POST', '/', 'json', false, 'json', request);
}

model CreateGatewayBlockVolumeRequest {
  cacheMode?: string(name='CacheMode', example='Cache', position='Query'),
  chapEnabled?: boolean(name='ChapEnabled', example='false', position='Query'),
  chapInPassword?: string(name='ChapInPassword', example='chapInPassword', position='Query'),
  chapInUser?: string(name='ChapInUser', example='chapInUser', position='Query'),
  chunkSize?: int32(name='ChunkSize', example='32768', position='Query'),
  gatewayId: string(name='GatewayId', example='gw-000dt67z4ijngqvh1***', position='Query'),
  localFilePath?: string(name='LocalFilePath', example='/dev/vdb', position='Query'),
  name: string(name='Name', example='name', position='Query'),
  ossBucketName: string(name='OssBucketName', example='bucketName', position='Query'),
  ossBucketSsl?: boolean(name='OssBucketSsl', example='true', position='Query'),
  ossEndpoint: string(name='OssEndpoint', example='oss-cn-shanghai-internal.aliyuncs.com', position='Query'),
  recovery?: boolean(name='Recovery', example='false', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  size?: long(name='Size', example='100', position='Query'),
  volumeProtocol: string(name='VolumeProtocol', example='iSCSI', position='Query'),
}

model CreateGatewayBlockVolumeResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='9083F167-95B1-4B40-B2CD-70DE068EC3**'),
  success?: boolean(name='Success', example='true'),
  taskId?: string(name='TaskId', example='t-000c6hshwukkbtxrb***'),
}

model CreateGatewayBlockVolumeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateGatewayBlockVolumeResponseBody(name='body'),
}

async function createGatewayBlockVolume(request: CreateGatewayBlockVolumeRequest): CreateGatewayBlockVolumeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateGatewayBlockVolume', 'POST', '/', 'json', false, 'json', request);
}

model CreateGatewayCacheDiskRequest {
  cacheDiskCategory?: string(name='CacheDiskCategory', example='cloud_efficiency', position='Query'),
  cacheDiskSizeInGB: long(name='CacheDiskSizeInGB', example='60', position='Query'),
  gatewayId: string(name='GatewayId', example='gw-000eg44nmxbsfwbvq***', position='Query'),
  performanceLevel?: string(name='PerformanceLevel', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model CreateGatewayCacheDiskResponseBody = {
  buyURL?: string(name='BuyURL', example='https://common-buy.aliyun.com/?commodityCode=hcs_sgw_csg_pre&request={"gateway_id":"gw-0007va9bnidei3s8a***","directBuy":"false","gateway_class":"standard","cache_cloud_efficiency_size":0}&regionId=cn-hangzhou#/buy'),
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='8E69E1A1-9076-4C8C-8ADF-ACD253886E22'),
  success?: boolean(name='Success', example='true'),
  taskId?: string(name='TaskId', example='t-0001xv7je357xv4st***'),
}

model CreateGatewayCacheDiskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateGatewayCacheDiskResponseBody(name='body'),
}

async function createGatewayCacheDisk(request: CreateGatewayCacheDiskRequest): CreateGatewayCacheDiskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateGatewayCacheDisk', 'POST', '/', 'json', false, 'json', request);
}

model CreateGatewayFileShareRequest {
  accessBasedEnumeration?: boolean(name='AccessBasedEnumeration', example='false', position='Query'),
  backendLimit?: int32(name='BackendLimit', example='1234', position='Query'),
  browsable?: boolean(name='Browsable', example='true', position='Query'),
  bypassCacheRead?: boolean(name='BypassCacheRead', example='false', position='Query'),
  cacheMode?: string(name='CacheMode', example='Cache', position='Query'),
  clientSideCmk?: string(name='ClientSideCmk', example='xxxxx', position='Query'),
  clientSideEncryption?: boolean(name='ClientSideEncryption', example='false', position='Query'),
  directIO?: boolean(name='DirectIO', example='false', position='Query'),
  downloadLimit?: int32(name='DownloadLimit', example='0', position='Query'),
  fastReclaim?: boolean(name='FastReclaim', example='false', position='Query'),
  frontendLimit?: int32(name='FrontendLimit', example='1234', position='Query'),
  gatewayId: string(name='GatewayId', example='gw-000eg44nmxbsfwbvq***', position='Query'),
  ignoreDelete?: boolean(name='IgnoreDelete', example='false', position='Query'),
  inPlace?: boolean(name='InPlace', example='false', position='Query'),
  kmsRotatePeriod?: long(name='KmsRotatePeriod', example='0', position='Query'),
  lagPeriod?: long(name='LagPeriod', example='5', position='Query'),
  localFilePath: string(name='LocalFilePath', example='/dev/vdb', position='Query'),
  name: string(name='Name', example='alex***', position='Query'),
  nfsV4Optimization?: boolean(name='NfsV4Optimization', example='false', position='Query'),
  ossBucketName: string(name='OssBucketName', example='testbucket', position='Query'),
  ossBucketSsl?: boolean(name='OssBucketSsl', example='true', position='Query'),
  ossEndpoint: string(name='OssEndpoint', example='oss-cn-hangzhou-internal.aliyuncs.com', position='Query'),
  partialSyncPaths?: string(name='PartialSyncPaths', example='test1', position='Query'),
  pathPrefix?: string(name='PathPrefix', example='test1', position='Query'),
  pollingInterval?: int32(name='PollingInterval', example='4500', position='Query'),
  readOnlyClientList?: string(name='ReadOnlyClientList', example='12.12.12.12', position='Query'),
  readOnlyUserList?: string(name='ReadOnlyUserList', example='userA，userB', position='Query'),
  readWriteClientList?: string(name='ReadWriteClientList', example='12.12.12.12', position='Query'),
  readWriteUserList?: string(name='ReadWriteUserList', example='user1，user2', position='Query'),
  remoteSync?: boolean(name='RemoteSync', example='false', position='Query'),
  remoteSyncDownload?: boolean(name='RemoteSyncDownload', example='false', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  serverSideAlgorithm?: string(name='ServerSideAlgorithm', example='AES256', position='Query'),
  serverSideCmk?: string(name='ServerSideCmk', example='xxxxx', position='Query'),
  serverSideEncryption?: boolean(name='ServerSideEncryption', example='false', position='Query'),
  shareProtocol: string(name='ShareProtocol', example='NFS', position='Query'),
  squash?: string(name='Squash', example='none', position='Query'),
  supportArchive?: boolean(name='SupportArchive', example='false', position='Query'),
  transferAcceleration?: boolean(name='TransferAcceleration', example='false', position='Query'),
  windowsAcl?: boolean(name='WindowsAcl', example='false', position='Query'),
}

model CreateGatewayFileShareResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='F8B59F29-453D-49BF-8673-EEB8F9F2D5C6'),
  success?: boolean(name='Success', example='true'),
  taskId?: string(name='TaskId', example='t-000eg44nmxbsh3qk***'),
}

model CreateGatewayFileShareResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateGatewayFileShareResponseBody(name='body'),
}

async function createGatewayFileShare(request: CreateGatewayFileShareRequest): CreateGatewayFileShareResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateGatewayFileShare', 'POST', '/', 'json', false, 'json', request);
}

model CreateGatewayLoggingRequest {
  gatewayId: string(name='GatewayId', example='gw-000eg44nmxbsfwbvq***', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  slsLogstore: string(name='SlsLogstore', example='logs***', position='Query'),
  slsProject: string(name='SlsProject', example='alex***', position='Query'),
}

model CreateGatewayLoggingResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='76109369-5729-467D-D4A3-1131A8DA19XX'),
  success?: boolean(name='Success', example='true'),
}

model CreateGatewayLoggingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateGatewayLoggingResponseBody(name='body'),
}

async function createGatewayLogging(request: CreateGatewayLoggingRequest): CreateGatewayLoggingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateGatewayLogging', 'POST', '/', 'json', false, 'json', request);
}

model CreateGatewaySMBUserRequest {
  gatewayId: string(name='GatewayId', example='gw-000eg44nmxbsfwbvq2**', position='Query'),
  password: string(name='Password', example='123***', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  username: string(name='Username', example='alex', position='Query'),
}

model CreateGatewaySMBUserResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='9083F167-95B1-4B40-B2CD-70DE068EC3**'),
  success?: boolean(name='Success', example='true'),
  taskId?: string(name='TaskId', example='t-000c6hshwukkbtxrb***'),
}

model CreateGatewaySMBUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateGatewaySMBUserResponseBody(name='body'),
}

async function createGatewaySMBUser(request: CreateGatewaySMBUserRequest): CreateGatewaySMBUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateGatewaySMBUser', 'POST', '/', 'json', false, 'json', request);
}

model CreateStorageBundleRequest {
  backendBucketRegionId: string(name='BackendBucketRegionId', example='cn-shanghai', position='Query'),
  description?: string(name='Description', position='Query'),
  name: string(name='Name', example='alex-123***', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model CreateStorageBundleResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='2AD80BDC-E05C-4A77-BBAD-5EDAEDE6D333'),
  storageBundleId?: string(name='StorageBundleId', example='sb-000ibk4xrlr03qrjr***'),
  success?: boolean(name='Success', example='true'),
}

model CreateStorageBundleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateStorageBundleResponseBody(name='body'),
}

async function createStorageBundle(request: CreateStorageBundleRequest): CreateStorageBundleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateStorageBundle', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCSGClientsRequest {
  clientIds?: [ string ](name='ClientIds', shrink='json', position='Query'),
  clientRegionId: string(name='ClientRegionId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteCSGClientsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model DeleteCSGClientsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCSGClientsResponseBody(name='body'),
}

async function deleteCSGClients(request: DeleteCSGClientsRequest): DeleteCSGClientsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCSGClients', 'POST', '/', 'json', false, 'json', request);
}

model DeleteElasticGatewayPrivateZoneRequest {
  gatewayId: string(name='GatewayId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteElasticGatewayPrivateZoneResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model DeleteElasticGatewayPrivateZoneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteElasticGatewayPrivateZoneResponseBody(name='body'),
}

async function deleteElasticGatewayPrivateZone(request: DeleteElasticGatewayPrivateZoneRequest): DeleteElasticGatewayPrivateZoneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteElasticGatewayPrivateZone', 'POST', '/', 'json', false, 'json', request);
}

model DeleteExpressSyncRequest {
  expressSyncId: string(name='ExpressSyncId', example='sync-0001xv7je357xn8tr***', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteExpressSyncResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='A870C702-C3AC-4FC9-91E4-053D3E599A24'),
  success?: boolean(name='Success', example='true'),
  taskId?: string(name='TaskId', example='t-0001xv7je357xv4st***'),
}

model DeleteExpressSyncResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteExpressSyncResponseBody(name='body'),
}

async function deleteExpressSync(request: DeleteExpressSyncRequest): DeleteExpressSyncResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteExpressSync', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGatewayRequest {
  gatewayId: string(name='GatewayId', example='gw-0001xv7je3580031y***', position='Query'),
  reasonDetail?: string(name='ReasonDetail', example='""', position='Query'),
  reasonType?: string(name='ReasonType', example='REASON2', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteGatewayResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='151BB31D-571D-4BB9-9A02-D4210E5BF5DB'),
  success?: boolean(name='Success', example='true'),
  taskId?: string(name='TaskId', example='t-0000iwdggbhaordhk***'),
}

model DeleteGatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteGatewayResponseBody(name='body'),
}

async function deleteGateway(request: DeleteGatewayRequest): DeleteGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGateway', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGatewayBlockVolumesRequest {
  gatewayId: string(name='GatewayId', example='gw-000eg44nmxbsfwb***', position='Query'),
  indexId: string(name='IndexId', example='NFSalex-gx***', position='Query'),
  isSourceDeletion?: boolean(name='IsSourceDeletion', example='true', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteGatewayBlockVolumesResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successsful'),
  requestId?: string(name='RequestId', example='151BB31D-571D-4BB9-9A02-D4210E5BF5DB'),
  success?: boolean(name='Success', example='true'),
  taskId?: string(name='TaskId', example='t-0000iwdggbhaordhk***'),
}

model DeleteGatewayBlockVolumesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteGatewayBlockVolumesResponseBody(name='body'),
}

async function deleteGatewayBlockVolumes(request: DeleteGatewayBlockVolumesRequest): DeleteGatewayBlockVolumesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGatewayBlockVolumes', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGatewayCacheDiskRequest {
  cacheId: string(name='CacheId', example='d-bp1dcnq8zldree6ok***', position='Query'),
  gatewayId: string(name='GatewayId', example='gw-0001xv7je3580031y***', position='Query'),
  localFilePath: string(name='LocalFilePath', example='/dev/vdb', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteGatewayCacheDiskResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='EEFC9927-B097-446D-8FDA-F848C8B2C9E3'),
  success?: boolean(name='Success', example='true'),
  taskId?: string(name='TaskId', example='t-0001xv7je357xv4s***'),
}

model DeleteGatewayCacheDiskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteGatewayCacheDiskResponseBody(name='body'),
}

async function deleteGatewayCacheDisk(request: DeleteGatewayCacheDiskRequest): DeleteGatewayCacheDiskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGatewayCacheDisk', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGatewayFileSharesRequest {
  force?: boolean(name='Force', example='false', position='Query'),
  gatewayId: string(name='GatewayId', example='gw-000eg44nmxbsfwbv****', position='Query'),
  indexId: string(name='IndexId', example='NFSalex***', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteGatewayFileSharesResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='t-000czaedx5koz578vk**'),
  success?: boolean(name='Success', example='true'),
  taskId?: string(name='TaskId', example='t-000c6hshwukkcfn****'),
}

model DeleteGatewayFileSharesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteGatewayFileSharesResponseBody(name='body'),
}

async function deleteGatewayFileShares(request: DeleteGatewayFileSharesRequest): DeleteGatewayFileSharesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGatewayFileShares', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGatewayLoggingRequest {
  gatewayId: string(name='GatewayId', example='gw-0001xv7je3580031***', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteGatewayLoggingResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='E66BF56E-068D-4308-A2D8-7FBBCE22E812'),
  success?: boolean(name='Success', example='true'),
}

model DeleteGatewayLoggingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteGatewayLoggingResponseBody(name='body'),
}

async function deleteGatewayLogging(request: DeleteGatewayLoggingRequest): DeleteGatewayLoggingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGatewayLogging', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGatewaySMBUserRequest {
  gatewayId: string(name='GatewayId', example='gw-000c6hshwukkbrypj***', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  username: string(name='Username', example='username', position='Query'),
}

model DeleteGatewaySMBUserResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='89398CFB-4EB6-4C7E-BB3C-EF213AC8FA50'),
  success?: boolean(name='Success', example='true'),
  taskId?: string(name='TaskId', example='t-000c6hshwukkcfn3k**'),
}

model DeleteGatewaySMBUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteGatewaySMBUserResponseBody(name='body'),
}

async function deleteGatewaySMBUser(request: DeleteGatewaySMBUserRequest): DeleteGatewaySMBUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGatewaySMBUser', 'POST', '/', 'json', false, 'json', request);
}

model DeleteStorageBundleRequest {
  securityToken?: string(name='SecurityToken', position='Query'),
  storageBundleId: string(name='StorageBundleId', example='sb-0001b2otnkdxrigeq***', position='Query'),
}

model DeleteStorageBundleResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='28708A34-83AF-42B8-928B-40E7B3E1D719'),
  success?: boolean(name='Success', example='true'),
}

model DeleteStorageBundleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteStorageBundleResponseBody(name='body'),
}

async function deleteStorageBundle(request: DeleteStorageBundleRequest): DeleteStorageBundleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteStorageBundle', 'POST', '/', 'json', false, 'json', request);
}

model DeployCSGClientsRequest {
  clientRegionId: string(name='ClientRegionId', position='Query'),
  ecsInstanceIds?: [ string ](name='EcsInstanceIds', shrink='json', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  vpcId?: string(name='VpcId', position='Query'),
}

model DeployCSGClientsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model DeployCSGClientsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeployCSGClientsResponseBody(name='body'),
}

async function deployCSGClients(request: DeployCSGClientsRequest): DeployCSGClientsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeployCSGClients', 'POST', '/', 'json', false, 'json', request);
}

model DeployCacheDiskRequest {
  cacheConfig?: string(name='CacheConfig', position='Query'),
  diskCategory?: string(name='DiskCategory', position='Query'),
  gatewayId: string(name='GatewayId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  sizeInGB?: int32(name='SizeInGB', position='Query'),
}

model DeployCacheDiskResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model DeployCacheDiskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeployCacheDiskResponseBody(name='body'),
}

async function deployCacheDisk(request: DeployCacheDiskRequest): DeployCacheDiskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeployCacheDisk', 'POST', '/', 'json', false, 'json', request);
}

model DeployGatewayRequest {
  gatewayClass?: string(name='GatewayClass', example='Basic', position='Query'),
  gatewayId: string(name='GatewayId', example='gw-0001xv7je3580031y***', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeployGatewayResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='8FEAFE9D-66C2-46AB-833B-35269EC7524C'),
  success?: boolean(name='Success', example='true'),
  taskId?: string(name='TaskId', example='t-0001xv7je35800307***'),
}

model DeployGatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeployGatewayResponseBody(name='body'),
}

async function deployGateway(request: DeployGatewayRequest): DeployGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeployGateway', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAccountConfigRequest {
  gatewayId?: string(name='GatewayId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeAccountConfigResponseBody = {
  code?: string(name='Code'),
  isSupportClientSideEncryption?: boolean(name='IsSupportClientSideEncryption'),
  isSupportElasticGatewayBeta?: boolean(name='IsSupportElasticGatewayBeta'),
  isSupportGatewayLogging?: boolean(name='IsSupportGatewayLogging'),
  isSupportServerSideEncryption?: boolean(name='IsSupportServerSideEncryption'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeAccountConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAccountConfigResponseBody(name='body'),
}

async function describeAccountConfig(request: DescribeAccountConfigRequest): DescribeAccountConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAccountConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBlockVolumeSnapshotsRequest {
  gatewayId: string(name='GatewayId', position='Query'),
  indexId?: string(name='IndexId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeBlockVolumeSnapshotsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  snapshots?: {
    snapshot?: [ 
    {
      createTime?: long(name='CreateTime'),
      size?: long(name='Size'),
      snapshotName?: string(name='SnapshotName'),
    }
  ](name='Snapshot')
  }(name='Snapshots'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeBlockVolumeSnapshotsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeBlockVolumeSnapshotsResponseBody(name='body'),
}

async function describeBlockVolumeSnapshots(request: DescribeBlockVolumeSnapshotsRequest): DescribeBlockVolumeSnapshotsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBlockVolumeSnapshots', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCSGClientTasksRequest {
  clientId?: string(name='ClientId', position='Query'),
  clientRegionId: string(name='ClientRegionId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeCSGClientTasksResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  tasks?: [ 
    {
      createdTime?: long(name='CreatedTime'),
      messageKey?: string(name='MessageKey'),
      messageParams?: string(name='MessageParams'),
      name?: string(name='Name'),
      progress?: int32(name='Progress'),
      stateCode?: string(name='StateCode'),
      taskId?: string(name='TaskId'),
      updatedTime?: long(name='UpdatedTime'),
    }
  ](name='Tasks'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeCSGClientTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCSGClientTasksResponseBody(name='body'),
}

async function describeCSGClientTasks(request: DescribeCSGClientTasksRequest): DescribeCSGClientTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCSGClientTasks', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCSGClientsRequest {
  clientRegionId?: string(name='ClientRegionId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeCSGClientsResponseBody = {
  clients?: [ 
    {
      clientDeletionCommand?: string(name='ClientDeletionCommand'),
      clientId?: string(name='ClientId'),
      clientInstallationCommand?: string(name='ClientInstallationCommand'),
      clientVersion?: string(name='ClientVersion'),
      ecsInstanceId?: string(name='EcsInstanceId'),
      hostInstanceId?: string(name='HostInstanceId'),
      lastHeartbeatTime?: long(name='LastHeartbeatTime'),
      status?: string(name='Status'),
      vpcId?: string(name='VpcId'),
      workDirectory?: string(name='WorkDirectory'),
    }
  ](name='Clients'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeCSGClientsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCSGClientsResponseBody(name='body'),
}

async function describeCSGClients(request: DescribeCSGClientsRequest): DescribeCSGClientsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCSGClients', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDashboardRequest {
  backendBucketRegionId?: string(name='BackendBucketRegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeDashboardResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  overview?: string(name='Overview'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDashboardResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDashboardResponseBody(name='body'),
}

async function describeDashboard(request: DescribeDashboardRequest): DescribeDashboardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDashboard', 'POST', '/', 'json', false, 'json', request);
}

model DescribeExpireCachesRequest {
  gatewayId: string(name='GatewayId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeExpireCachesResponseBody = {
  cacheFilePaths?: string(name='CacheFilePaths'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeExpireCachesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeExpireCachesResponseBody(name='body'),
}

async function describeExpireCaches(request: DescribeExpireCachesRequest): DescribeExpireCachesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeExpireCaches', 'POST', '/', 'json', false, 'json', request);
}

model DescribeExpressSyncSharesRequest {
  expressSyncIds: string(name='ExpressSyncIds', example='sync-0002xetjdlxne2sd***,sync-0004agfrbke1l39p***', position='Query'),
  isExternal?: boolean(name='IsExternal', example='true', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeExpressSyncSharesResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='EA258616-36AD-4609-A0A6-2B17C28CBF88'),
  shares?: {
    share?: [ 
    {
      expressSyncId?: string(name='ExpressSyncId', example='sb-0003c7qh5yuc1z6b8***'),
      expressSyncState?: string(name='ExpressSyncState', example='MNSHealthy'),
      gatewayId?: string(name='GatewayId', example='gw-000245alq48e7ytg***'),
      gatewayName?: string(name='GatewayName'),
      gatewayRegion?: string(name='GatewayRegion', example='cn-hangzhou'),
      mnsQueue?: string(name='MnsQueue', example='sgw-express-sync-queue-gw-000245alq48e7ytgxq03***'),
      shareName?: string(name='ShareName', example='ji***'),
      storageBundleId?: string(name='StorageBundleId', example='sb-0003c7qh5yuc1z6b8***'),
      syncProgress?: int32(name='SyncProgress', example='100'),
    }
  ](name='Share')
  }(name='Shares'),
  success?: boolean(name='Success', example='true'),
}

model DescribeExpressSyncSharesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeExpressSyncSharesResponseBody(name='body'),
}

async function describeExpressSyncShares(request: DescribeExpressSyncSharesRequest): DescribeExpressSyncSharesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeExpressSyncShares', 'POST', '/', 'json', false, 'json', request);
}

model DescribeExpressSyncsRequest {
  bucketName?: string(name='BucketName', example='sgw***', position='Query'),
  bucketPrefix?: string(name='BucketPrefix', example='test***', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeExpressSyncsResponseBody = {
  code?: string(name='Code', example='200'),
  expressSyncs?: {
    expressSync?: [ 
    {
      bucketName?: string(name='BucketName', example='sgw-mns***'),
      bucketPrefix?: string(name='BucketPrefix', example='test***'),
      bucketRegion?: string(name='BucketRegion', example='cn-hangzhou'),
      description?: string(name='Description'),
      expressSyncId?: string(name='ExpressSyncId', example='sync-0002xetjdlxne2sdm***'),
      mnsTopic?: string(name='MnsTopic', example='sgw-express-sync-0002xetjdlxne2sdm***'),
      name?: string(name='Name', example='wptest***'),
    }
  ](name='ExpressSync')
  }(name='ExpressSyncs'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='50DE1383-D4A1-433C-98A6-459C1830A888'),
  success?: boolean(name='Success', example='true'),
}

model DescribeExpressSyncsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeExpressSyncsResponseBody(name='body'),
}

async function describeExpressSyncs(request: DescribeExpressSyncsRequest): DescribeExpressSyncsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeExpressSyncs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGatewayRequest {
  gatewayId: string(name='GatewayId', example='gw-000eg44nmxbsfwbvq***', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeGatewayResponseBody = {
  activatedTime?: long(name='ActivatedTime', example='1578986214'),
  buyURL?: string(name='BuyURL', example='https://expense.console.aliyun.com/?returnExpense=true#/order/list/'),
  capacity?: int32(name='Capacity', example='500'),
  category?: string(name='Category', example='Aliyun'),
  code?: string(name='Code', example='200'),
  commonBuyInstanceId?: string(name='CommonBuyInstanceId', example='i-uf6gjr3lnwhyrd6hu***'),
  createdTime?: long(name='CreatedTime', example='1532099461'),
  dataLoadInterval?: int32(name='DataLoadInterval', example='120'),
  dataLoadType?: string(name='DataLoadType', example='once'),
  description?: string(name='Description'),
  ecsInstanceId?: string(name='EcsInstanceId', example='i-uf62406gy5vyao4y8***'),
  elasticGateway?: boolean(name='ElasticGateway', example='false'),
  elasticNodes?: {
    elasticNode?: [ string ](name='ElasticNode')
  }(name='ElasticNodes'),
  expireStatus?: int32(name='ExpireStatus', example='0'),
  expiredTime?: long(name='ExpiredTime', example='1532530021'),
  gatewayClass?: string(name='GatewayClass', example='Basic'),
  gatewayId?: string(name='GatewayId', example='gw-0000ewknguw5o96vn***'),
  gatewayRegionId?: string(name='GatewayRegionId'),
  gatewayType?: string(name='GatewayType', example='File'),
  gatewayVersion?: string(name='GatewayVersion', example='1.0.39'),
  highAvailability?: boolean(name='HighAvailability'),
  innerIp?: string(name='InnerIp', example='172.19.55.65'),
  innerIpv6Ip?: string(name='InnerIpv6Ip', example='2408:4004:110:6000:4656:f88e:1c14:e578'),
  ip?: string(name='Ip', example='47.101.160.44'),
  isPostPaid?: boolean(name='IsPostPaid', example='true'),
  isReleaseAfterExpiration?: boolean(name='IsReleaseAfterExpiration', example='false'),
  lastErrorKey?: string(name='LastErrorKey', example='InternalError'),
  location?: string(name='Location', example='Cloud'),
  maxThroughput?: int32(name='MaxThroughput', example='30'),
  message?: string(name='Message', example='successful'),
  name?: string(name='Name', example='alex***'),
  publicNetworkBandwidth?: int32(name='PublicNetworkBandwidth', example='50'),
  renewURL?: string(name='RenewURL', example='https://common-buy.aliyun.com/?commodityCode=hcs_sgw_csg_pre&orderType=RENEW&instanceId=ca-0007va9bnideidndn***#/renew'),
  requestId?: string(name='RequestId', example='736C7733-FCED-4AFB-8407-C325F210CE03'),
  status?: string(name='Status', example='Initialized'),
  storageBundleId?: string(name='StorageBundleId', example='sb-000dt67z4ijqfocpy***'),
  success?: boolean(name='Success', example='true'),
  taskId?: string(name='TaskId', example='t-0000iwdggbharrw6r***'),
  type?: string(name='Type', example='File'),
  untrustedEnvInstanceType?: string(name='UntrustedEnvInstanceType'),
  untrustedEnvOssEndpoint?: string(name='UntrustedEnvOssEndpoint'),
  vSwitchId?: string(name='VSwitchId', example='vsw-bp1b3mvml55ziekq7e***'),
  vpcId?: string(name='VpcId', example='vpc-uf6j237kxmsw08auey***'),
}

model DescribeGatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGatewayResponseBody(name='body'),
}

async function describeGateway(request: DescribeGatewayRequest): DescribeGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGateway', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGatewayADInfoRequest {
  gatewayId: string(name='GatewayId', example='gw-000eg44nmxbsfwbvq***', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeGatewayADInfoResponseBody = {
  code?: string(name='Code', example='200'),
  domainName?: string(name='DomainName', example='test***'),
  isEnabled?: boolean(name='IsEnabled', example='true'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='1B0CA0B9-2B0F-478D-ADC5-474C45BF947F'),
  serverIp?: string(name='ServerIp', example='47.101.59.199'),
  success?: boolean(name='Success', example='true'),
  username?: string(name='Username', example='alex***'),
}

model DescribeGatewayADInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGatewayADInfoResponseBody(name='body'),
}

async function describeGatewayADInfo(request: DescribeGatewayADInfoRequest): DescribeGatewayADInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGatewayADInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGatewayActionsRequest {
  gatewayId: string(name='GatewayId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeGatewayActionsResponseBody = {
  actions?: {
    action?: [ 
    {
      adLdap?: string(name='AdLdap'),
      cache?: string(name='Cache'),
      disk?: string(name='Disk'),
      gatewayId?: string(name='GatewayId'),
      monitor?: string(name='Monitor'),
      self?: string(name='Self'),
      smbUser?: string(name='SmbUser'),
      target?: string(name='Target'),
    }
  ](name='Action')
  }(name='Actions'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeGatewayActionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGatewayActionsResponseBody(name='body'),
}

async function describeGatewayActions(request: DescribeGatewayActionsRequest): DescribeGatewayActionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGatewayActions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGatewayAuthInfoRequest {
  gatewayId: string(name='GatewayId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeGatewayAuthInfoResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  password?: string(name='Password'),
  publicIp?: string(name='PublicIp'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  username?: string(name='Username'),
}

model DescribeGatewayAuthInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGatewayAuthInfoResponseBody(name='body'),
}

async function describeGatewayAuthInfo(request: DescribeGatewayAuthInfoRequest): DescribeGatewayAuthInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGatewayAuthInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGatewayAutoPlansRequest {
  gatewayId: string(name='GatewayId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeGatewayAutoPlansResponseBody = {
  autoPlans?: [ 
    {
      detail?: string(name='Detail'),
      endTime?: long(name='EndTime'),
      event?: string(name='Event'),
      planId?: string(name='PlanId'),
      startTime?: long(name='StartTime'),
      status?: string(name='Status'),
    }
  ](name='AutoPlans'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeGatewayAutoPlansResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGatewayAutoPlansResponseBody(name='body'),
}

async function describeGatewayAutoPlans(request: DescribeGatewayAutoPlansRequest): DescribeGatewayAutoPlansResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGatewayAutoPlans', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGatewayAutoUpgradeConfigurationRequest {
  gatewayId: string(name='GatewayId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeGatewayAutoUpgradeConfigurationResponseBody = {
  autoUpgradeEndHour?: int32(name='AutoUpgradeEndHour'),
  autoUpgradeStartHour?: int32(name='AutoUpgradeStartHour'),
  code?: string(name='Code'),
  isAutoUpgrade?: boolean(name='IsAutoUpgrade'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeGatewayAutoUpgradeConfigurationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGatewayAutoUpgradeConfigurationResponseBody(name='body'),
}

async function describeGatewayAutoUpgradeConfiguration(request: DescribeGatewayAutoUpgradeConfigurationRequest): DescribeGatewayAutoUpgradeConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGatewayAutoUpgradeConfiguration', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGatewayBlockVolumesRequest {
  gatewayId: string(name='GatewayId', example='gw-000dt67z4ijngqvh***', position='Query'),
  indexId?: string(name='IndexId', example='alex-or2020010816***', position='Query'),
  refresh?: boolean(name='Refresh', example='true', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeGatewayBlockVolumesResponseBody = {
  blockVolumes?: {
    blockVolume?: [ 
    {
      address?: string(name='Address', example='172.16.0.22'),
      cacheMode?: string(name='CacheMode', example='Cache'),
      chapEnabled?: boolean(name='ChapEnabled', example='true'),
      chapInUser?: string(name='ChapInUser', example='alex***'),
      chunkSize?: int32(name='ChunkSize', example='32768'),
      diskId?: string(name='DiskId', example='d-bp1a8athxvwbja18***'),
      diskType?: string(name='DiskType', example='cloud_efficiency'),
      enabled?: boolean(name='Enabled', example='true'),
      indexId?: string(name='IndexId', example='alex-or2020010816***'),
      localPath?: string(name='LocalPath', example='/dev/vdb'),
      lunId?: int32(name='LunId', description='LUN ID。', example='0'),
      name?: string(name='Name', example='alex'),
      ossBucketName?: string(name='OssBucketName', example='random***'),
      ossBucketSsl?: boolean(name='OssBucketSsl', example='true'),
      ossEndpoint?: string(name='OssEndpoint', example='oss-cn-hangzhou-internal.aliyuncs.com'),
      port?: int32(name='Port', example='0'),
      protocol?: string(name='Protocol', example='iSCSI'),
      size?: long(name='Size', example='107374182400'),
      state?: string(name='State', example='clean'),
      status?: int32(name='Status', example='0'),
      target?: string(name='Target', example='iqn**************'),
      totalDownload?: long(name='TotalDownload', example='56342324'),
      totalUpload?: long(name='TotalUpload', example='123214564'),
      volumeState?: int32(name='VolumeState', example='1'),
    }
  ](name='BlockVolume')
  }(name='BlockVolumes'),
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='787D4AD4-5536-4C36-9FB0-D74C0554D344'),
  success?: boolean(name='Success', example='true'),
}

model DescribeGatewayBlockVolumesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGatewayBlockVolumesResponseBody(name='body'),
}

/**
  * ****
  *
 */
async function describeGatewayBlockVolumes(request: DescribeGatewayBlockVolumesRequest): DescribeGatewayBlockVolumesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGatewayBlockVolumes', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGatewayBucketCachesRequest {
  bucketName?: string(name='BucketName', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeGatewayBucketCachesResponseBody = {
  bucketCaches?: {
    bucketCache?: [ 
    {
      bucketName?: string(name='BucketName'),
      cacheMode?: string(name='CacheMode'),
      cacheStats?: string(name='CacheStats'),
      category?: string(name='Category'),
      gatewayId?: string(name='GatewayId'),
      gatewayName?: string(name='GatewayName'),
      location?: string(name='Location'),
      mountPoint?: string(name='MountPoint'),
      protocol?: string(name='Protocol'),
      regionId?: string(name='RegionId'),
      shareName?: string(name='ShareName'),
      type?: string(name='Type'),
      vpcCidr?: string(name='VpcCidr'),
      vpcId?: string(name='VpcId'),
    }
  ](name='BucketCache')
  }(name='BucketCaches'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeGatewayBucketCachesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGatewayBucketCachesResponseBody(name='body'),
}

async function describeGatewayBucketCaches(request: DescribeGatewayBucketCachesRequest): DescribeGatewayBucketCachesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGatewayBucketCaches', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGatewayCachesRequest {
  gatewayId: string(name='GatewayId', example='gw-000eg44nmxbsfwbvq***', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeGatewayCachesResponseBody = {
  caches?: {
    cache?: [ 
    {
      buyURL?: string(name='BuyURL'),
      cacheId?: string(name='CacheId', example='d-bp1dcnq8zldree6ok***'),
      cacheType?: string(name='CacheType', example='cloud_efficiency'),
      expireStatus?: int32(name='ExpireStatus', example='0'),
      expiredTime?: long(name='ExpiredTime', example='1532510649'),
      iops?: long(name='Iops', description='IOPS。', example='2605'),
      isDirectExpand?: string(name='IsDirectExpand'),
      isNoPartition?: boolean(name='IsNoPartition'),
      isUsed?: boolean(name='IsUsed', example='false'),
      localFilePath?: string(name='LocalFilePath', example='/dev/vdb'),
      performanceLevel?: string(name='PerformanceLevel'),
      renewURL?: string(name='RenewURL', example='https://common-buy.aliyun.com/?commodityCode=hcs_sgw_csg_pre&orderType=RENEW&instanceId=ca-0007va9bnideidnd***#/renew'),
      sizeInGB?: long(name='SizeInGB', example='101'),
      subscriptionInstanceId?: string(name='SubscriptionInstanceId'),
    }
  ](name='Cache')
  }(name='Caches'),
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='40797B4D-09D9-482E-B163-CCB568BADE35'),
  success?: boolean(name='Success', example='true'),
}

model DescribeGatewayCachesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGatewayCachesResponseBody(name='body'),
}

async function describeGatewayCaches(request: DescribeGatewayCachesRequest): DescribeGatewayCachesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGatewayCaches', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGatewayCapacityLimitRequest {
  gatewayId: string(name='GatewayId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  sizeInGB?: long(name='SizeInGB', position='Query'),
}

model DescribeGatewayCapacityLimitResponseBody = {
  code?: string(name='Code'),
  fileNumber?: long(name='FileNumber'),
  fileSystemSizeInTB?: long(name='FileSystemSizeInTB'),
  isMetadataSeparate?: boolean(name='IsMetadataSeparate'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeGatewayCapacityLimitResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGatewayCapacityLimitResponseBody(name='body'),
}

async function describeGatewayCapacityLimit(request: DescribeGatewayCapacityLimitRequest): DescribeGatewayCapacityLimitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGatewayCapacityLimit', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGatewayCategoriesRequest {
  gatewayLocation?: string(name='GatewayLocation', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeGatewayCategoriesResponseBody = {
  categories?: string(name='Categories'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeGatewayCategoriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGatewayCategoriesResponseBody(name='body'),
}

async function describeGatewayCategories(request: DescribeGatewayCategoriesRequest): DescribeGatewayCategoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGatewayCategories', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGatewayClassesRequest {
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeGatewayClassesResponseBody = {
  classes?: string(name='Classes', example='Basic,Standard,Enhanced,Advanced'),
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='EC3D33E5-0F6B-4D1B-9B35-59A71EB3FA50'),
  success?: boolean(name='Success', example='true'),
}

model DescribeGatewayClassesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGatewayClassesResponseBody(name='body'),
}

async function describeGatewayClasses(request: DescribeGatewayClassesRequest): DescribeGatewayClassesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGatewayClasses', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGatewayCredentialRequest {
  gatewayId: string(name='GatewayId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeGatewayCredentialResponseBody = {
  code?: string(name='Code'),
  consolePassword?: string(name='ConsolePassword'),
  consoleUsername?: string(name='ConsoleUsername'),
  ecsIp?: string(name='EcsIp'),
  ecsPassword?: string(name='EcsPassword'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  vSwitchId?: string(name='VSwitchId'),
  vpcId?: string(name='VpcId'),
}

model DescribeGatewayCredentialResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGatewayCredentialResponseBody(name='body'),
}

async function describeGatewayCredential(request: DescribeGatewayCredentialRequest): DescribeGatewayCredentialResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGatewayCredential', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGatewayDNSRequest {
  gatewayId: string(name='GatewayId', example='gw-000eg44nmxbsfwbvq***', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeGatewayDNSResponseBody = {
  code?: string(name='Code', example='200'),
  dnsServer?: string(name='DnsServer', example='100.100.2.136,100.100.2.188'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='89398CFB-4EB6-4C7E-BB3C-EF213AC8FA50'),
  success?: boolean(name='Success', example='true'),
}

model DescribeGatewayDNSResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGatewayDNSResponseBody(name='body'),
}

async function describeGatewayDNS(request: DescribeGatewayDNSRequest): DescribeGatewayDNSResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGatewayDNS', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGatewayFileSharesRequest {
  gatewayId: string(name='GatewayId', example='gw-000eg44nmxbsfwbvq***', position='Query'),
  indexId?: string(name='IndexId', example='NFSd-million', position='Query'),
  refresh?: boolean(name='Refresh', example='true', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeGatewayFileSharesResponseBody = {
  code?: string(name='Code', example='200'),
  fileShares?: {
    fileShare?: [ 
    {
      accessBasedEnumeration?: boolean(name='AccessBasedEnumeration', example='false'),
      activeMessages?: long(name='ActiveMessages'),
      address?: string(name='Address', example='172.16.0.44'),
      beLimit?: int32(name='BeLimit', example='0'),
      browsable?: boolean(name='Browsable', example='true'),
      bucketInfos?: string(name='BucketInfos', example='xxxxx'),
      bucketsStub?: boolean(name='BucketsStub', example='false'),
      bypassCacheRead?: boolean(name='BypassCacheRead'),
      cacheMode?: string(name='CacheMode', example='Cache'),
      clientSideCmk?: string(name='ClientSideCmk', example='xxxxx'),
      clientSideEncryption?: boolean(name='ClientSideEncryption', example='false'),
      directIO?: boolean(name='DirectIO', example='false'),
      diskId?: string(name='DiskId', example='d-bp1cvy8o2569jij31***'),
      diskType?: string(name='DiskType', example='cloud_efficiency'),
      downloadLimit?: int32(name='DownloadLimit', example='0'),
      downloadQueue?: long(name='DownloadQueue'),
      downloadRate?: long(name='DownloadRate'),
      enabled?: boolean(name='Enabled', example='true'),
      expressSyncId?: string(name='ExpressSyncId', example='sync-0001xv7je357xn8tr***'),
      fastReclaim?: boolean(name='FastReclaim', example='false'),
      feLimit?: int32(name='FeLimit', example='0'),
      fileNumLimit?: long(name='FileNumLimit', example='10200202'),
      fsSizeLimit?: long(name='FsSizeLimit', example='70368744177664'),
      highWatermark?: int32(name='HighWatermark'),
      ignoreDelete?: boolean(name='IgnoreDelete', example='false'),
      inPlace?: boolean(name='InPlace', example='false'),
      inRate?: long(name='InRate', example='0'),
      indexId?: string(name='IndexId', example='NFSale***'),
      kmsRotatePeriod?: string(name='KmsRotatePeriod', example='0'),
      lagPeriod?: long(name='LagPeriod', example='5'),
      localPath?: string(name='LocalPath', example='/dev/vdb'),
      lowWatermark?: int32(name='LowWatermark'),
      mnsHealth?: string(name='MnsHealth', example='MNSNotEnabled'),
      name?: string(name='Name', example='alex***'),
      nfsV4Optimization?: boolean(name='NfsV4Optimization', example='false'),
      noPartition?: boolean(name='NoPartition'),
      obsoleteBuckets?: string(name='ObsoleteBuckets', example='bucket1'),
      ossBucketName?: string(name='OssBucketName', example='bucketA'),
      ossBucketSsl?: boolean(name='OssBucketSsl', example='false'),
      ossEndpoint?: string(name='OssEndpoint', example='oss-cn-hangzhou-internal.aliyuncs.com'),
      ossHealth?: string(name='OssHealth', example='BucketHealthy'),
      ossUsed?: long(name='OssUsed', example='0'),
      outRate?: long(name='OutRate', example='0'),
      partialSyncPaths?: string(name='PartialSyncPaths', example='xxxxx'),
      pathPrefix?: string(name='PathPrefix', description='OSS Prefix。', example='testprefix'),
      pollingInterval?: int32(name='PollingInterval', example='0'),
      protocol?: string(name='Protocol', example='SMB'),
      remainingMetaSpace?: long(name='RemainingMetaSpace', example='21308227584'),
      remoteSync?: boolean(name='RemoteSync', example='false'),
      remoteSyncDownload?: boolean(name='RemoteSyncDownload', example='false'),
      roClientList?: string(name='RoClientList', example='user1'),
      roUserList?: string(name='RoUserList', example='user2'),
      rwClientList?: string(name='RwClientList', example='user3'),
      rwUserList?: string(name='RwUserList', example='user4'),
      serverSideAlgorithm?: string(name='ServerSideAlgorithm'),
      serverSideCmk?: string(name='ServerSideCmk', example='xxxxx'),
      serverSideEncryption?: boolean(name='ServerSideEncryption', example='false'),
      size?: long(name='Size', example='85899345920'),
      squash?: string(name='Squash', example='root_squash'),
      state?: string(name='State', example='clean'),
      status?: string(name='Status'),
      supportArchive?: boolean(name='SupportArchive', example='false'),
      syncProgress?: int32(name='SyncProgress', example='-2'),
      throttling?: boolean(name='Throttling'),
      totalDownload?: long(name='TotalDownload', example='0'),
      totalUpload?: long(name='TotalUpload', example='0'),
      transferAcceleration?: boolean(name='TransferAcceleration', example='false'),
      uploadQueue?: long(name='UploadQueue'),
      used?: long(name='Used', example='0'),
      windowsAcl?: boolean(name='WindowsAcl', example='false'),
    }
  ](name='FileShare')
  }(name='FileShares'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='9A3C3C32-3F37-4658-9D38-945D0799CA0E'),
  success?: boolean(name='Success', example='true'),
}

model DescribeGatewayFileSharesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGatewayFileSharesResponseBody(name='body'),
}

async function describeGatewayFileShares(request: DescribeGatewayFileSharesRequest): DescribeGatewayFileSharesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGatewayFileShares', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGatewayFileStatusRequest {
  filePath: string(name='FilePath', position='Query'),
  gatewayId: string(name='GatewayId', position='Query'),
  indexId: string(name='IndexId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeGatewayFileStatusResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  success?: boolean(name='Success'),
}

model DescribeGatewayFileStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGatewayFileStatusResponseBody(name='body'),
}

async function describeGatewayFileStatus(request: DescribeGatewayFileStatusRequest): DescribeGatewayFileStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGatewayFileStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGatewayImagesRequest {
  securityToken?: string(name='SecurityToken', position='Query'),
  type: string(name='Type', example='File', position='Query'),
}

model DescribeGatewayImagesResponseBody = {
  code?: string(name='Code', example='200'),
  images?: {
    image?: [ 
    {
      description?: string(name='Description', example='sgw.file.kvm.description'),
      mD5?: string(name='MD5', example='48f43e6a906b28ed30ec40d8***'),
      modifiedDate?: string(name='ModifiedDate', example='2019-07-24'),
      name?: string(name='Name', example='aliyun/file/1.0.40/image/sgw-file-1.0.39.v***'),
      size?: long(name='Size', example='1063744588'),
      title?: string(name='Title', example='sgw.file.kvm.title'),
      type?: string(name='Type', example='application/octet-stream'),
      url?: string(name='Url', example='http://sgw-gateway.oss-cn-shanghai.aliyuncs.com/aliyun/file/1.0.40/image/sgw-file-1.0.40.qcow2?Expires=1564045229&OSSAccessKeyId=LTAINaSMVqr8***&Signature=%2BoTNVCGWgxis8GMpvpg5NIRkFvE%3D'),
      version?: string(name='Version', example='1.0.40'),
    }
  ](name='Image')
  }(name='Images'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='30DFF66156-3672-4204-B708-24389F01FC77'),
  success?: boolean(name='Success', example='true'),
}

model DescribeGatewayImagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGatewayImagesResponseBody(name='body'),
}

async function describeGatewayImages(request: DescribeGatewayImagesRequest): DescribeGatewayImagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGatewayImages', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGatewayInfoRequest {
  gatewayId: string(name='GatewayId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeGatewayInfoResponseBody = {
  code?: string(name='Code'),
  gatewayInfos?: {
    gatewayInfo?: [ 
    {
      info?: string(name='Info'),
      time?: long(name='Time'),
    }
  ](name='GatewayInfo')
  }(name='GatewayInfos'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeGatewayInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGatewayInfoResponseBody(name='body'),
}

async function describeGatewayInfo(request: DescribeGatewayInfoRequest): DescribeGatewayInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGatewayInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGatewayLDAPInfoRequest {
  gatewayId: string(name='GatewayId', example='gw-000eg44nmxbsfwbvq***', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeGatewayLDAPInfoResponseBody = {
  baseDN?: string(name='BaseDN', example='dc=sgwte***,dc=local'),
  code?: string(name='Code', example='200'),
  isEnabled?: boolean(name='IsEnabled', example='true'),
  isTls?: boolean(name='IsTls', example='false'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='89398CFB-4EB6-4C7E-BB3C-EF213AC8FA**'),
  rootDN?: string(name='RootDN', example='cn=admin,dc=sgwte***,dc=local'),
  serverIp?: string(name='ServerIp', example='47.101.59.188'),
  success?: boolean(name='Success', example='true'),
}

model DescribeGatewayLDAPInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGatewayLDAPInfoResponseBody(name='body'),
}

async function describeGatewayLDAPInfo(request: DescribeGatewayLDAPInfoRequest): DescribeGatewayLDAPInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGatewayLDAPInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGatewayLocationsRequest {
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeGatewayLocationsResponseBody = {
  code?: string(name='Code'),
  locations?: string(name='Locations'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeGatewayLocationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGatewayLocationsResponseBody(name='body'),
}

async function describeGatewayLocations(request: DescribeGatewayLocationsRequest): DescribeGatewayLocationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGatewayLocations', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGatewayLoggingRequest {
  gatewayId: string(name='GatewayId', example='gw-000eg44nmxbsfwb***', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeGatewayLoggingResponseBody = {
  code?: string(name='Code', example='200'),
  gatewayLoggingStatus?: string(name='GatewayLoggingStatus', example='Enabled'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='17D08346-BD08-4107-BFBC-01A6AAD5F5FB'),
  slsLogstore?: string(name='SlsLogstore', example='alex***'),
  slsProject?: string(name='SlsProject', example='123***'),
  success?: boolean(name='Success', example='true'),
}

model DescribeGatewayLoggingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGatewayLoggingResponseBody(name='body'),
}

async function describeGatewayLogging(request: DescribeGatewayLoggingRequest): DescribeGatewayLoggingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGatewayLogging', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGatewayLogsRequest {
  gatewayId: string(name='GatewayId', position='Query'),
  logFilePath?: string(name='LogFilePath', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeGatewayLogsResponseBody = {
  code?: string(name='Code'),
  logFilePaths?: string(name='LogFilePaths'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeGatewayLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGatewayLogsResponseBody(name='body'),
}

async function describeGatewayLogs(request: DescribeGatewayLogsRequest): DescribeGatewayLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGatewayLogs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGatewayModificationClassesRequest {
  gatewayId: string(name='GatewayId', example='gw-0001xv7je3580031***', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeGatewayModificationClassesResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='FA8951CC-A534-425D-8705-F9A5CF9FD555'),
  success?: boolean(name='Success', example='true'),
  targetGatewayClasses?: {
    targetGatewayClass?: [ 
    {
      gatewayClass?: string(name='GatewayClass', example='Enhanced'),
      isAvailable?: boolean(name='IsAvailable', example='true'),
    }
  ](name='TargetGatewayClass')
  }(name='TargetGatewayClasses'),
}

model DescribeGatewayModificationClassesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGatewayModificationClassesResponseBody(name='body'),
}

async function describeGatewayModificationClasses(request: DescribeGatewayModificationClassesRequest): DescribeGatewayModificationClassesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGatewayModificationClasses', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGatewayNFSClientsRequest {
  gatewayId: string(name='GatewayId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeGatewayNFSClientsResponseBody = {
  clientInfoList?: {
    clientInfo?: [ 
    {
      clientIpAddr?: string(name='ClientIpAddr'),
      hasNFSv3?: boolean(name='HasNFSv3'),
      hasNFSv40?: boolean(name='HasNFSv40'),
      hasNFSv41?: boolean(name='HasNFSv41'),
    }
  ](name='ClientInfo')
  }(name='ClientInfoList'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
  version3Enabled?: boolean(name='Version3Enabled'),
  version40Enabled?: boolean(name='Version40Enabled'),
  version41Enabled?: boolean(name='Version41Enabled'),
}

model DescribeGatewayNFSClientsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGatewayNFSClientsResponseBody(name='body'),
}

async function describeGatewayNFSClients(request: DescribeGatewayNFSClientsRequest): DescribeGatewayNFSClientsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGatewayNFSClients', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGatewaySMBUsersRequest {
  gatewayId: string(name='GatewayId', example='gw-000eg44nmxbsfwbv***', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeGatewaySMBUsersResponseBody = {
  activeDirectory?: boolean(name='ActiveDirectory'),
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='4C02F482-FC2E-45BF-88C5-8D40134D11**'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', example='1'),
  users?: {
    user?: [ 
    {
      username?: string(name='Username', example='alex***'),
    }
  ](name='User')
  }(name='Users'),
}

model DescribeGatewaySMBUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGatewaySMBUsersResponseBody(name='body'),
}

async function describeGatewaySMBUsers(request: DescribeGatewaySMBUsersRequest): DescribeGatewaySMBUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGatewaySMBUsers', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGatewayStatisticsRequest {
  endTimestamp?: long(name='EndTimestamp', position='Query'),
  gatewayCategory?: string(name='GatewayCategory', position='Query'),
  gatewayLocation?: string(name='GatewayLocation', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  startTimestamp?: long(name='StartTimestamp', position='Query'),
  targetAccountId?: string(name='TargetAccountId', position='Query'),
}

model DescribeGatewayStatisticsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeGatewayStatisticsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGatewayStatisticsResponseBody(name='body'),
}

async function describeGatewayStatistics(request: DescribeGatewayStatisticsRequest): DescribeGatewayStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGatewayStatistics', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGatewayStockRequest {
  gatewayRegionId: string(name='GatewayRegionId', example='cn-shanghai', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeGatewayStockResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='6342F2A5-6E24-415E-8B2B-91D88868C89F'),
  stocks?: {
    stock?: [ 
    {
      stockInfo?: string(name='StockInfo', example='{"Basic":true,"Advanced":false,"Enhanced":false,"Standard":true}'),
      zoneId?: string(name='ZoneId', example='cn-shanghai-f'),
    }
  ](name='Stock')
  }(name='Stocks'),
  success?: boolean(name='Success', example='true'),
}

model DescribeGatewayStockResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGatewayStockResponseBody(name='body'),
}

async function describeGatewayStock(request: DescribeGatewayStockRequest): DescribeGatewayStockResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGatewayStock', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGatewayTypesRequest {
  gatewayLocation: string(name='GatewayLocation', example='Cloud', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeGatewayTypesResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='787ECFD0-5F30-44C0-BB8F-56A964F66D01'),
  success?: boolean(name='Success', example='true'),
  types?: string(name='Types', example='File,Iscsi'),
}

model DescribeGatewayTypesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGatewayTypesResponseBody(name='body'),
}

async function describeGatewayTypes(request: DescribeGatewayTypesRequest): DescribeGatewayTypesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGatewayTypes', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGatewaysRequest {
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  storageBundleId?: string(name='StorageBundleId', example='sb-0001b2otnkdxrigeq***', position='Query'),
}

model DescribeGatewaysResponseBody = {
  code?: string(name='Code', example='200'),
  gateways?: {
    gateway?: [ 
    {
      activatedTime?: long(name='ActivatedTime', example='1577179769'),
      buyURL?: string(name='BuyURL', example='https://common-buy.aliyun.com/?commodityCode=hcs_sgw_csg_pre&request={"gateway_id":"gw-0007va9bnidei3s8a***”,”directBuy":"false","gateway_class":"standard","cache_cloud_efficiency_size":0}&regionId=cn-hangzhou#/buy'),
      capacity?: int32(name='Capacity'),
      category?: string(name='Category', example='Aliyun'),
      commonBuyInstanceId?: string(name='CommonBuyInstanceId', example='gw-0001b2onkdzvl3b***'),
      createdTime?: long(name='CreatedTime', example='1577179604'),
      dataLoadInterval?: int32(name='DataLoadInterval'),
      dataLoadType?: string(name='DataLoadType'),
      description?: string(name='Description'),
      ecsInstanceId?: string(name='EcsInstanceId', example='gw-0001b2onkdzvl3b***'),
      elasticGateway?: boolean(name='ElasticGateway'),
      elasticNodes?: {
        elasticNode?: [ string ](name='ElasticNode')
      }(name='ElasticNodes'),
      expireStatus?: int32(name='ExpireStatus', example='0'),
      expiredTime?: long(name='ExpiredTime', example='1532426471'),
      gatewayClass?: string(name='GatewayClass', example='Advanced'),
      gatewayId?: string(name='GatewayId', example='gw-0001b2odzvl3b1mhi***'),
      gatewayRegionId?: string(name='GatewayRegionId'),
      gatewayType?: string(name='GatewayType', example='File'),
      gatewayVersion?: string(name='GatewayVersion', example='1.2.6'),
      highAvailability?: boolean(name='HighAvailability'),
      innerIp?: string(name='InnerIp', example='172.16.0.21'),
      innerIpv6Ip?: string(name='InnerIpv6Ip'),
      ip?: string(name='Ip', example='47.111.145.66'),
      isPostPaid?: boolean(name='IsPostPaid', example='true'),
      isReleaseAfterExpiration?: boolean(name='IsReleaseAfterExpiration', example='false'),
      lastErrorKey?: string(name='LastErrorKey'),
      location?: string(name='Location', example='Cloud'),
      maxThroughput?: int32(name='MaxThroughput'),
      name?: string(name='Name', example='fio-weekly***'),
      publicNetworkBandwidth?: int32(name='PublicNetworkBandwidth', example='55'),
      renewURL?: string(name='RenewURL', example='https://common-buy.aliyun.com/?commodityCode=hcs_sgw_csg_pre&orderType=RENEW&instanceId=ca-0007va9bnideidndnu72#/renew'),
      status?: string(name='Status', example='Running'),
      storageBundleId?: string(name='StorageBundleId', example='sb-0001b2otrigeqkso***'),
      taskId?: string(name='TaskId', example='t-000978oflgrd8ah6p***'),
      type?: string(name='Type', example='File'),
      untrustedEnvInstanceType?: string(name='UntrustedEnvInstanceType'),
      vSwitchId?: string(name='VSwitchId', example='vsw-bp1krhkgnahkb9stp0***'),
      vpcId?: string(name='VpcId', example='vpc-bp1p0usrgr5z9e7lwr***'),
    }
  ](name='Gateway')
  }(name='Gateways'),
  message?: string(name='Message', example='successful'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='2C4A8287-66F4-45F9-84E3-866E4232C763'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model DescribeGatewaysResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGatewaysResponseBody(name='body'),
}

async function describeGateways(request: DescribeGatewaysRequest): DescribeGatewaysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGateways', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGatewaysForCmsRequest {
  gatewayRegionId: string(name='GatewayRegionId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeGatewaysForCmsResponseBody = {
  code?: string(name='Code'),
  gateways?: {
    gateway?: [ 
    {
      description?: string(name='Description'),
      gatewayId?: string(name='GatewayId'),
      name?: string(name='Name'),
    }
  ](name='Gateway')
  }(name='Gateways'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeGatewaysForCmsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGatewaysForCmsResponseBody(name='body'),
}

async function describeGatewaysForCms(request: DescribeGatewaysForCmsRequest): DescribeGatewaysForCmsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGatewaysForCms', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGatewaysTagsRequest {
  gatewayIds: string(name='GatewayIds', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  storageBundleId: string(name='StorageBundleId', position='Query'),
  tagCategory?: string(name='TagCategory', position='Query'),
}

model DescribeGatewaysTagsResponseBody = {
  code?: string(name='Code'),
  gatewayTags?: {
    gatewayTag?: [ 
    {
      gatewayId?: string(name='GatewayId'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey'),
          tagValue?: string(name='TagValue'),
        }
      ](name='Tag')
      }(name='Tags'),
    }
  ](name='GatewayTag')
  }(name='GatewayTags'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeGatewaysTagsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGatewaysTagsResponseBody(name='body'),
}

async function describeGatewaysTags(request: DescribeGatewaysTagsRequest): DescribeGatewaysTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGatewaysTags', 'POST', '/', 'json', false, 'json', request);
}

model DescribeKmsKeyRequest {
  gatewayId: string(name='GatewayId', position='Query'),
  kmsKey: string(name='KmsKey', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeKmsKeyResponseBody = {
  code?: string(name='Code'),
  isValid?: boolean(name='IsValid'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeKmsKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeKmsKeyResponseBody(name='body'),
}

async function describeKmsKey(request: DescribeKmsKeyRequest): DescribeKmsKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeKmsKey', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMqttConfigRequest {
  gatewayId?: string(name='GatewayId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeMqttConfigResponseBody = {
  authType?: string(name='AuthType'),
  brokerUrl?: string(name='BrokerUrl'),
  code?: string(name='Code'),
  groupId?: string(name='GroupId'),
  internalBrokerUrl?: string(name='InternalBrokerUrl'),
  isEnabled?: boolean(name='IsEnabled'),
  message?: string(name='Message'),
  mqttInstanceId?: string(name='MqttInstanceId'),
  password?: string(name='Password'),
  publishTopic?: string(name='PublishTopic'),
  requestId?: string(name='RequestId'),
  subscribeTopic?: string(name='SubscribeTopic'),
  success?: boolean(name='Success'),
  username?: string(name='Username'),
}

model DescribeMqttConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMqttConfigResponseBody(name='body'),
}

async function describeMqttConfig(request: DescribeMqttConfigRequest): DescribeMqttConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMqttConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOssBucketInfoRequest {
  bucketEndpoint?: string(name='BucketEndpoint', position='Query'),
  bucketName?: string(name='BucketName', position='Query'),
  gatewayId?: string(name='GatewayId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  type?: string(name='Type', position='Query'),
}

model DescribeOssBucketInfoResponseBody = {
  code?: string(name='Code'),
  isArchive?: boolean(name='IsArchive'),
  isBackToResource?: boolean(name='IsBackToResource'),
  isColdArchive?: boolean(name='IsColdArchive'),
  isFresh?: boolean(name='IsFresh'),
  isSupportServerSideEncryption?: boolean(name='IsSupportServerSideEncryption'),
  isVersioning?: boolean(name='IsVersioning'),
  message?: string(name='Message'),
  pollingInterval?: int32(name='PollingInterval'),
  requestId?: string(name='RequestId'),
  storageSize?: long(name='StorageSize'),
  success?: boolean(name='Success'),
}

model DescribeOssBucketInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOssBucketInfoResponseBody(name='body'),
}

async function describeOssBucketInfo(request: DescribeOssBucketInfoRequest): DescribeOssBucketInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOssBucketInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOssBucketsRequest {
  bucketEndpoint?: string(name='BucketEndpoint', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeOssBucketsResponseBody = {
  buckets?: {
    bucket?: [ 
    {
      name?: string(name='Name'),
    }
  ](name='Bucket')
  }(name='Buckets'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeOssBucketsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOssBucketsResponseBody(name='body'),
}

async function describeOssBuckets(request: DescribeOssBucketsRequest): DescribeOssBucketsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOssBuckets', 'POST', '/', 'json', false, 'json', request);
}

model DescribePayAsYouGoPriceRequest {
  gatewayClass: string(name='GatewayClass', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribePayAsYouGoPriceResponseBody = {
  cacheCloudEfficiencySizePrice?: float(name='CacheCloudEfficiencySizePrice'),
  cacheCloudSSDSizePrice?: float(name='CacheCloudSSDSizePrice'),
  cacheESSDPl1SizePrice?: float(name='CacheESSDPl1SizePrice'),
  code?: string(name='Code'),
  currency?: string(name='Currency'),
  gatewayClassPrice?: float(name='GatewayClassPrice'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribePayAsYouGoPriceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePayAsYouGoPriceResponseBody(name='body'),
}

async function describePayAsYouGoPrice(request: DescribePayAsYouGoPriceRequest): DescribePayAsYouGoPriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePayAsYouGoPrice', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeRegionsResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  regions?: {
    region?: [ 
    {
      regionId?: string(name='RegionId', example='cn-hangzhou'),
    }
  ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId', example='E09C421A-A175-4D21-8928-ADF5643D15F8'),
  success?: boolean(name='Success', example='true'),
}

model DescribeRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSharesBucketInfoForExpressSyncRequest {
  bucketName?: string(name='BucketName', example='bucket***', position='Query'),
  bucketRegion?: string(name='BucketRegion', example='cn-hangzhou', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeSharesBucketInfoForExpressSyncResponseBody = {
  bucketInfos?: {
    bucketInfo?: [ 
    {
      bucketName?: string(name='BucketName', example='zy-1m***'),
      bucketPrefix?: string(name='BucketPrefix', example='test1'),
      bucketRegion?: string(name='BucketRegion', example='cn-hangzhou'),
    }
  ](name='BucketInfo')
  }(name='BucketInfos'),
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='29BD52E7-CF30-418F-A240-E15A9351B666'),
  success?: boolean(name='Success', example='true'),
}

model DescribeSharesBucketInfoForExpressSyncResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSharesBucketInfoForExpressSyncResponseBody(name='body'),
}

async function describeSharesBucketInfoForExpressSync(request: DescribeSharesBucketInfoForExpressSyncRequest): DescribeSharesBucketInfoForExpressSyncResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSharesBucketInfoForExpressSync', 'POST', '/', 'json', false, 'json', request);
}

model DescribeStorageBundleRequest {
  securityToken?: string(name='SecurityToken', position='Query'),
  storageBundleId: string(name='StorageBundleId', example='sb-0007y2889yyxkuqov***', position='Query'),
}

model DescribeStorageBundleResponseBody = {
  backendBucketRegionId?: string(name='BackendBucketRegionId', example='cn-shanghai'),
  code?: string(name='Code', example='200'),
  createdTime?: long(name='CreatedTime', example='1657706998'),
  description?: string(name='Description'),
  message?: string(name='Message', example='successful'),
  name?: string(name='Name', example='sdfa***'),
  requestId?: string(name='RequestId', example='736C7733-FCED-4AFB-8407-C325F210CE03'),
  storageBundleId?: string(name='StorageBundleId', example='sb-000dt67z4ijqfocpy***'),
  success?: boolean(name='Success', example='true'),
}

model DescribeStorageBundleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeStorageBundleResponseBody(name='body'),
}

async function describeStorageBundle(request: DescribeStorageBundleRequest): DescribeStorageBundleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeStorageBundle', 'POST', '/', 'json', false, 'json', request);
}

model DescribeStorageBundlesRequest {
  backendBucketRegionId: string(name='BackendBucketRegionId', example='cn-hangzhou', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeStorageBundlesResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='1EB4639B-0812-4F2D-AB78-194E67645E357'),
  storageBundles?: {
    storageBundle?: [ 
    {
      backendBucketRegionId?: string(name='BackendBucketRegionId', example='cn-hangzhou'),
      createdTime?: long(name='CreatedTime', example='1565750633'),
      description?: string(name='Description'),
      name?: string(name='Name', example='zy-test***'),
      storageBundleId?: string(name='StorageBundleId', example='sb-000ibk4xrlr03qrjr***'),
    }
  ](name='StorageBundle')
  }(name='StorageBundles'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', example='20'),
}

model DescribeStorageBundlesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeStorageBundlesResponseBody(name='body'),
}

async function describeStorageBundles(request: DescribeStorageBundlesRequest): DescribeStorageBundlesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeStorageBundles', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSubscriptionPriceRequest {
  cacheCloudEfficiencySize?: long(name='CacheCloudEfficiencySize', position='Query'),
  cacheESSDPl1Size?: long(name='CacheESSDPl1Size', position='Query'),
  cacheSSDSize?: long(name='CacheSSDSize', position='Query'),
  gatewayClass?: string(name='GatewayClass', position='Query'),
  periodQuantity?: int32(name='PeriodQuantity', position='Query'),
  periodUnit?: string(name='PeriodUnit', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeSubscriptionPriceResponseBody = {
  code?: string(name='Code'),
  currency?: string(name='Currency'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  tradePrice?: float(name='TradePrice'),
}

model DescribeSubscriptionPriceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSubscriptionPriceResponseBody(name='body'),
}

async function describeSubscriptionPrice(request: DescribeSubscriptionPriceRequest): DescribeSubscriptionPriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSubscriptionPrice', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTasksRequest {
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  targetId: string(name='TargetId', example='sync-0001xv757xl9sn548***', position='Query'),
  taskId?: string(name='TaskId', example='t-0001xv7je357xl9n***', position='Query'),
}

model DescribeTasksResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='8E9C6D43-4603-4F05-BE76-677A05EDFB7A'),
  success?: boolean(name='Success', example='true'),
  tasks?: {
    simpleTask?: [ 
    {
      createdTime?: long(name='CreatedTime', example='1578367229'),
      messageKey?: string(name='MessageKey', example='xxxxxxxxxx'),
      name?: string(name='Name', example='task.name.operate_fast_sync.delete'),
      progress?: int32(name='Progress', example='100'),
      relatedResourceId?: string(name='RelatedResourceId'),
      stateCode?: string(name='StateCode', example='task.state.completed'),
      taskId?: string(name='TaskId', example='t-0001xv7je357xl9n***'),
      updatedTime?: long(name='UpdatedTime', example='1578367230'),
    }
  ](name='SimpleTask')
  }(name='Tasks'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTasksResponseBody(name='body'),
}

async function describeTasks(request: DescribeTasksRequest): DescribeTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTasks', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUserBusinessStatusRequest {
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeUserBusinessStatusResponseBody = {
  code?: string(name='Code'),
  isEnabled?: boolean(name='IsEnabled'),
  isIndebted?: boolean(name='IsIndebted'),
  isIndebtedOverdue?: boolean(name='IsIndebtedOverdue'),
  isRiskControl?: boolean(name='IsRiskControl'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeUserBusinessStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeUserBusinessStatusResponseBody(name='body'),
}

async function describeUserBusinessStatus(request: DescribeUserBusinessStatusRequest): DescribeUserBusinessStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUserBusinessStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVSwitchesRequest {
  name?: string(name='Name', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  resourceRegionId?: string(name='ResourceRegionId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  storageBundleId?: string(name='StorageBundleId', position='Query'),
  vSwitchId?: string(name='VSwitchId', position='Query'),
  vpcId?: string(name='VpcId', position='Query'),
}

model DescribeVSwitchesResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
  vSwitches?: {
    vSwitch?: [ 
    {
      availableSelectionInfo?: string(name='AvailableSelectionInfo'),
      id?: string(name='Id'),
      isDefault?: boolean(name='IsDefault'),
      name?: string(name='Name'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='VSwitch')
  }(name='VSwitches'),
}

model DescribeVSwitchesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVSwitchesResponseBody(name='body'),
}

async function describeVSwitches(request: DescribeVSwitchesRequest): DescribeVSwitchesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVSwitches', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVpcsRequest {
  name?: string(name='Name', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  resourceRegionId?: string(name='ResourceRegionId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  storageBundleId?: string(name='StorageBundleId', position='Query'),
  vpcId?: string(name='VpcId', position='Query'),
}

model DescribeVpcsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
  vpcs?: {
    vpc?: [ 
    {
      cidrBlock?: string(name='CidrBlock'),
      id?: string(name='Id'),
      isDefault?: boolean(name='IsDefault'),
      name?: string(name='Name'),
    }
  ](name='Vpc')
  }(name='Vpcs'),
}

model DescribeVpcsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVpcsResponseBody(name='body'),
}

async function describeVpcs(request: DescribeVpcsRequest): DescribeVpcsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVpcs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeZonesRequest {
  regionId: string(name='RegionId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeZonesResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  zones?: {
    zone?: [ 
    {
      zoneId?: string(name='ZoneId'),
    }
  ](name='Zone')
  }(name='Zones'),
}

model DescribeZonesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeZonesResponseBody(name='body'),
}

async function describeZones(request: DescribeZonesRequest): DescribeZonesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeZones', 'POST', '/', 'json', false, 'json', request);
}

model DisableGatewayLoggingRequest {
  gatewayId: string(name='GatewayId', example='gw-000eg44nmxbsfwb***', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DisableGatewayLoggingResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='25288205-A591-4AA9-ACF8-427E8727A9D3'),
  success?: boolean(name='Success', example='true'),
}

model DisableGatewayLoggingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisableGatewayLoggingResponseBody(name='body'),
}

async function disableGatewayLogging(request: DisableGatewayLoggingRequest): DisableGatewayLoggingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableGatewayLogging', 'POST', '/', 'json', false, 'json', request);
}

model DisableGatewayNFSVersionRequest {
  gatewayId: string(name='GatewayId', position='Query'),
  NFSVersion: string(name='NFSVersion', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DisableGatewayNFSVersionResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model DisableGatewayNFSVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisableGatewayNFSVersionResponseBody(name='body'),
}

async function disableGatewayNFSVersion(request: DisableGatewayNFSVersionRequest): DisableGatewayNFSVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableGatewayNFSVersion', 'POST', '/', 'json', false, 'json', request);
}

model EnableGatewayIpv6Request {
  gatewayId: string(name='GatewayId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model EnableGatewayIpv6ResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model EnableGatewayIpv6Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableGatewayIpv6ResponseBody(name='body'),
}

async function enableGatewayIpv6(request: EnableGatewayIpv6Request): EnableGatewayIpv6Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableGatewayIpv6', 'POST', '/', 'json', false, 'json', request);
}

model EnableGatewayLoggingRequest {
  gatewayId: string(name='GatewayId', example='gw-000eg44nmxbsfwbv***', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model EnableGatewayLoggingResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='CAE39768-CE96-4E16-A9F7-1FF9AE8E3FBF'),
  success?: boolean(name='Success', example='true'),
}

model EnableGatewayLoggingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableGatewayLoggingResponseBody(name='body'),
}

async function enableGatewayLogging(request: EnableGatewayLoggingRequest): EnableGatewayLoggingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableGatewayLogging', 'POST', '/', 'json', false, 'json', request);
}

model ExpandCacheDiskRequest {
  gatewayId: string(name='GatewayId', example='gw-000eg44nmxbsfwbvq***', position='Query'),
  localFilePath: string(name='LocalFilePath', example='/dev/vdb', position='Query'),
  newSizeInGB: int32(name='NewSizeInGB', example='101', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ExpandCacheDiskResponseBody = {
  buyURL?: string(name='BuyURL', example='https://common-buy.aliyun.com/?commodityCode=hcs_sgw_csg_pre&request={"gateway_id":"gw-0007va9bnidei3s8a***”,”directBuy":"false","gateway_class":"standard","cache_cloud_efficiency_size":0}&regionId=cn-hangzhou#/buy'),
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='F8B59F29-453D-49BF-8673-EEB8F9F2D5C6'),
  success?: boolean(name='Success', example='true'),
  taskId?: string(name='TaskId', example='t-000eg44nmxbsh3qk3***'),
}

model ExpandCacheDiskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExpandCacheDiskResponseBody(name='body'),
}

async function expandCacheDisk(request: ExpandCacheDiskRequest): ExpandCacheDiskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExpandCacheDisk', 'POST', '/', 'json', false, 'json', request);
}

model ExpandGatewayFileShareRequest {
  gatewayId?: string(name='GatewayId', position='Query'),
  indexId?: string(name='IndexId', position='Query'),
}

model ExpandGatewayFileShareResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model ExpandGatewayFileShareResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExpandGatewayFileShareResponseBody(name='body'),
}

async function expandGatewayFileShare(request: ExpandGatewayFileShareRequest): ExpandGatewayFileShareResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExpandGatewayFileShare', 'POST', '/', 'json', false, 'json', request);
}

model ExpandGatewayNetworkBandwidthRequest {
  gatewayId: string(name='GatewayId', position='Query'),
  newNetworkBandwidth?: int32(name='NewNetworkBandwidth', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ExpandGatewayNetworkBandwidthResponseBody = {
  buyURL?: string(name='BuyURL'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model ExpandGatewayNetworkBandwidthResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExpandGatewayNetworkBandwidthResponseBody(name='body'),
}

async function expandGatewayNetworkBandwidth(request: ExpandGatewayNetworkBandwidthRequest): ExpandGatewayNetworkBandwidthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExpandGatewayNetworkBandwidth', 'POST', '/', 'json', false, 'json', request);
}

model GenerateGatewayTokenRequest {
  gatewayId: string(name='GatewayId', example='gw-000do8l6anyk2iklv***', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model GenerateGatewayTokenResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='8E9C6D43-4603-4F05-BE76-677A05EDFB7A'),
  success?: boolean(name='Success', example='true'),
  token?: string(name='Token', example='xxxxx'),
}

model GenerateGatewayTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateGatewayTokenResponseBody(name='body'),
}

async function generateGatewayToken(request: GenerateGatewayTokenRequest): GenerateGatewayTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateGatewayToken', 'POST', '/', 'json', false, 'json', request);
}

model GenerateMqttTokenRequest {
  clientUUID: string(name='ClientUUID', position='Query'),
  gatewayId: string(name='GatewayId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model GenerateMqttTokenResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  mqttToken?: string(name='MqttToken'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GenerateMqttTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateMqttTokenResponseBody(name='body'),
}

async function generateMqttToken(request: GenerateMqttTokenRequest): GenerateMqttTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateMqttToken', 'POST', '/', 'json', false, 'json', request);
}

model GenerateStsTokenRequest {
  expireInSeconds?: long(name='ExpireInSeconds', position='Query'),
  gatewayId: string(name='GatewayId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tokenType?: string(name='TokenType', position='Query'),
}

model GenerateStsTokenResponseBody = {
  accessKeyId?: string(name='AccessKeyId'),
  accessKeySecret?: string(name='AccessKeySecret'),
  code?: string(name='Code'),
  environment?: string(name='Environment'),
  expiration?: string(name='Expiration'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  securityToken?: string(name='SecurityToken'),
  success?: boolean(name='Success'),
  supportBundleTarget?: string(name='SupportBundleTarget'),
}

model GenerateStsTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateStsTokenResponseBody(name='body'),
}

async function generateStsToken(request: GenerateStsTokenRequest): GenerateStsTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateStsToken', 'POST', '/', 'json', false, 'json', request);
}

model HandleGatewayAutoPlanRequest {
  cancel?: boolean(name='Cancel', position='Query'),
  delayHours?: int32(name='DelayHours', position='Query'),
  gatewayId: string(name='GatewayId', position='Query'),
  planId: string(name='PlanId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model HandleGatewayAutoPlanResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model HandleGatewayAutoPlanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: HandleGatewayAutoPlanResponseBody(name='body'),
}

async function handleGatewayAutoPlan(request: HandleGatewayAutoPlanRequest): HandleGatewayAutoPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'HandleGatewayAutoPlan', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', example='212db86sca4384811e0b5e8707ec21345', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceId?: [ string ](name='ResourceId', example='gw-uf6wjk5xxxxxxx', position='Query'),
  resourceRegionId?: string(name='ResourceRegionId', position='Query'),
  resourceType: string(name='ResourceType', example='GATEWAY', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', example='testkey1'),
      value?: string(name='Value', example='testvalue1'),
    }
  ](name='Tag', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', example='212db86sca4384811e0b5e8707ec21345'),
  requestId?: string(name='RequestId', example='47A514A1-4B77-4E30-B4C5-2A880650B3FD'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId', example='47A514A1-4B77-4E30-B4C5-2A880650B3FD'),
      resourceType?: string(name='ResourceType', example='ALIYUN::HCS_SGW::GATEWAY'),
      tagKey?: string(name='TagKey', example='testkey1'),
      tagValue?: string(name='TagValue', example='testvalue1'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ModifyGatewayRequest {
  description?: string(name='Description', position='Query'),
  gatewayId: string(name='GatewayId', example='gw-0001xv7je3580031y***', position='Query'),
  name: string(name='Name', example='alex***', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ModifyGatewayResponseBody = {
  code?: string(name='Code', example='200'),
  gatewayId?: string(name='GatewayId', example='gw-0001xv7je3580031y***'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='220E7407-DF77-428D-8955-B02CF8F82D07'),
  success?: boolean(name='Success', example='true'),
}

model ModifyGatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyGatewayResponseBody(name='body'),
}

async function modifyGateway(request: ModifyGatewayRequest): ModifyGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyGateway', 'POST', '/', 'json', false, 'json', request);
}

model ModifyGatewayBlockVolumeRequest {
  cacheConfig?: string(name='CacheConfig', position='Query'),
  gatewayId: string(name='GatewayId', position='Query'),
  indexId?: string(name='IndexId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ModifyGatewayBlockVolumeResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model ModifyGatewayBlockVolumeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyGatewayBlockVolumeResponseBody(name='body'),
}

async function modifyGatewayBlockVolume(request: ModifyGatewayBlockVolumeRequest): ModifyGatewayBlockVolumeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyGatewayBlockVolume', 'POST', '/', 'json', false, 'json', request);
}

model ModifyGatewayClassRequest {
  gatewayClass: string(name='GatewayClass', example='Enhanced', position='Query'),
  gatewayId: string(name='GatewayId', example='gw-0001xv7580031yzun***', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ModifyGatewayClassResponseBody = {
  buyURL?: string(name='BuyURL', example='https://common-buy.aliyun.com/?commodityCode=hcs_sgw_csg_pre&orderType=UPGRADE&instanceId=gw-000c6hshwukjwc7e1***#/upgrade'),
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='395B1136-982E-4F95-BDCE-7323FFEF499E'),
  success?: boolean(name='Success', example='true'),
  taskId?: string(name='TaskId', example='t-0001xv7je3580bx6v***'),
}

model ModifyGatewayClassResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyGatewayClassResponseBody(name='body'),
}

async function modifyGatewayClass(request: ModifyGatewayClassRequest): ModifyGatewayClassResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyGatewayClass', 'POST', '/', 'json', false, 'json', request);
}

model ModifyGatewayFileShareRequest {
  cacheConfig?: string(name='CacheConfig', position='Query'),
  gatewayId: string(name='GatewayId', position='Query'),
  indexId?: string(name='IndexId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ModifyGatewayFileShareResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model ModifyGatewayFileShareResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyGatewayFileShareResponseBody(name='body'),
}

async function modifyGatewayFileShare(request: ModifyGatewayFileShareRequest): ModifyGatewayFileShareResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyGatewayFileShare', 'POST', '/', 'json', false, 'json', request);
}

model ModifyGatewayFileShareWatermarkRequest {
  gatewayId: string(name='GatewayId', position='Query'),
  indexId: string(name='IndexId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  watermark: int32(name='Watermark', minimum=40, maximum=90, position='Query'),
}

model ModifyGatewayFileShareWatermarkResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model ModifyGatewayFileShareWatermarkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyGatewayFileShareWatermarkResponseBody(name='body'),
}

async function modifyGatewayFileShareWatermark(request: ModifyGatewayFileShareWatermarkRequest): ModifyGatewayFileShareWatermarkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyGatewayFileShareWatermark', 'POST', '/', 'json', false, 'json', request);
}

model ModifyStorageBundleRequest {
  description?: string(name='Description', position='Query'),
  name: string(name='Name', example='alex-123***', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  storageBundleId: string(name='StorageBundleId', example='sb-000ibk4xrlr03qrjr***', position='Query'),
}

model ModifyStorageBundleResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='70EACC9C-D07A-4A34-ADA4-77506C42777'),
  storageBundleId?: string(name='StorageBundleId', example='sb-000ibk4xrlr03qr***'),
  success?: boolean(name='Success', example='true'),
}

model ModifyStorageBundleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyStorageBundleResponseBody(name='body'),
}

async function modifyStorageBundle(request: ModifyStorageBundleRequest): ModifyStorageBundleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyStorageBundle', 'POST', '/', 'json', false, 'json', request);
}

model OpenSgwServiceRequest {
}

model OpenSgwServiceResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model OpenSgwServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OpenSgwServiceResponseBody(name='body'),
}

async function openSgwService(request: OpenSgwServiceRequest): OpenSgwServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenSgwService', 'POST', '/', 'json', false, 'json', request);
}

model OperateGatewayRequest {
  gatewayId: string(name='GatewayId', position='Query'),
  operateAction: string(name='OperateAction', position='Query'),
  params?: string(name='Params', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model OperateGatewayResponseBody = {
  buyURL?: string(name='BuyURL'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model OperateGatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OperateGatewayResponseBody(name='body'),
}

async function operateGateway(request: OperateGatewayRequest): OperateGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OperateGateway', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseServiceRequest {
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ReleaseServiceResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReleaseServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReleaseServiceResponseBody(name='body'),
}

async function releaseService(request: ReleaseServiceRequest): ReleaseServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseService', 'POST', '/', 'json', false, 'json', request);
}

model RemoveSharesFromExpressSyncRequest {
  expressSyncId: string(name='ExpressSyncId', example='sync-0001xv7je357xn8tr***', position='Query'),
  gatewayShares: string(name='GatewayShares', example='{"gw-000gwgp0j3jp8cb3t***":"share1,share2","gw-0001b2otnkdzte62j***":"weekly"}', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model RemoveSharesFromExpressSyncResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='1EDBC004-6B1C-4511-ACF5-0B4875BA3B22'),
  success?: boolean(name='Success', example='true'),
  taskId?: string(name='TaskId', example='t-0001xv7je357xr6ql***'),
}

model RemoveSharesFromExpressSyncResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveSharesFromExpressSyncResponseBody(name='body'),
}

async function removeSharesFromExpressSync(request: RemoveSharesFromExpressSyncRequest): RemoveSharesFromExpressSyncResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveSharesFromExpressSync', 'POST', '/', 'json', false, 'json', request);
}

model RemoveTagsFromGatewayRequest {
  gatewayId: string(name='GatewayId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tags: string(name='Tags', position='Query'),
}

model RemoveTagsFromGatewayResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RemoveTagsFromGatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveTagsFromGatewayResponseBody(name='body'),
}

async function removeTagsFromGateway(request: RemoveTagsFromGatewayRequest): RemoveTagsFromGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveTagsFromGateway', 'POST', '/', 'json', false, 'json', request);
}

model ReportBlockVolumesRequest {
  clientUUID: string(name='ClientUUID', position='Query'),
  gatewayId: string(name='GatewayId', position='Query'),
  info?: string(name='Info', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ReportBlockVolumesResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReportBlockVolumesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReportBlockVolumesResponseBody(name='body'),
}

async function reportBlockVolumes(request: ReportBlockVolumesRequest): ReportBlockVolumesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReportBlockVolumes', 'POST', '/', 'json', false, 'json', request);
}

model ReportFileSharesRequest {
  clientUUID: string(name='ClientUUID', position='Query'),
  gatewayId: string(name='GatewayId', position='Query'),
  info?: string(name='Info', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ReportFileSharesResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReportFileSharesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReportFileSharesResponseBody(name='body'),
}

async function reportFileShares(request: ReportFileSharesRequest): ReportFileSharesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReportFileShares', 'POST', '/', 'json', false, 'json', request);
}

model ReportGatewayInfoRequest {
  clientUUID: string(name='ClientUUID', example='28c07861-a93b-4aa2-ae3a-3f7b7e7f6184', position='Query'),
  gatewayId: string(name='GatewayId', example='gw-1234567890abcd', position='Query'),
  gatewayStatus?: string(name='GatewayStatus', example='running', position='Query'),
  info?: string(name='Info', example='{"ReadIOPS":16,"OSSStorageUsage":2331983505,"CPUSys":4,"CPUUser":24,"CPUIdle":72,"DiskWrite":16384,"NetRecv":3071,"NetSend":5525,"UsedCacheSize":181395456,"WriteIOPS":4,"MemUsed":4340056064,"DiskRead":348160,"MemFree":498073600}', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  time?: long(name='Time', example='1528436020', position='Query'),
}

model ReportGatewayInfoResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='5C109361-5F29-467D-D4A3-1131A8DA1A72'),
  success?: boolean(name='Success', example='true'),
}

model ReportGatewayInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReportGatewayInfoResponseBody(name='body'),
}

async function reportGatewayInfo(request: ReportGatewayInfoRequest): ReportGatewayInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReportGatewayInfo', 'POST', '/', 'json', false, 'json', request);
}

model ReportGatewayUsageRequest {
  clientUUID: string(name='ClientUUID', example='28c07861-a93b-4aa2-ae3a-3f7b7e7f6184', position='Query'),
  gatewayId: string(name='GatewayId', example='gw-1234567890abcd', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  usage?: string(name='Usage', example='{"VolumeCount":5,"NfsCount":2,"CacheCapacity":123456789000,"CifsCount":3}', position='Query'),
}

model ReportGatewayUsageResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='5C109361-5F29-467D-D4A3-1131A8DA1A72'),
  success?: boolean(name='Success', example='true'),
}

model ReportGatewayUsageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReportGatewayUsageResponseBody(name='body'),
}

async function reportGatewayUsage(request: ReportGatewayUsageRequest): ReportGatewayUsageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReportGatewayUsage', 'POST', '/', 'json', false, 'json', request);
}

model ResetGatewayPasswordRequest {
  gatewayId: string(name='GatewayId', position='Query'),
  password: string(name='Password', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  username: string(name='Username', position='Query'),
}

model ResetGatewayPasswordResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model ResetGatewayPasswordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetGatewayPasswordResponseBody(name='body'),
}

async function resetGatewayPassword(request: ResetGatewayPasswordRequest): ResetGatewayPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetGatewayPassword', 'POST', '/', 'json', false, 'json', request);
}

model RestartFileSharesRequest {
  gatewayId: string(name='GatewayId', example='gw-000eg44nmxbsfwbvq***', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  shareProtocol: string(name='ShareProtocol', example='NFS', position='Query'),
}

model RestartFileSharesResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='89398CFB-4EB6-4C7E-BB3C-EF213AC8FA**'),
  success?: boolean(name='Success', example='true'),
  taskId?: string(name='TaskId', example='t-000czaedx5koz578v***'),
}

model RestartFileSharesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RestartFileSharesResponseBody(name='body'),
}

async function restartFileShares(request: RestartFileSharesRequest): RestartFileSharesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RestartFileShares', 'POST', '/', 'json', false, 'json', request);
}

model SetGatewayADInfoRequest {
  gatewayId: string(name='GatewayId', example='gw-000eg44nmxbsfwbv****', position='Query'),
  isEnabled?: boolean(name='IsEnabled', example='true', position='Query'),
  password?: string(name='Password', example='12****', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  serverIp?: string(name='ServerIp', example='12.12.x.x', position='Query'),
  username?: string(name='Username', example='ale****', position='Query'),
}

model SetGatewayADInfoResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='89398CFB-4EB6-4C7E-BB3C-EF213AC8FA**'),
  success?: boolean(name='Success', example='true'),
  taskId?: string(name='TaskId', example='t-000c6hshwukkcfn****'),
}

model SetGatewayADInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetGatewayADInfoResponseBody(name='body'),
}

async function setGatewayADInfo(request: SetGatewayADInfoRequest): SetGatewayADInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetGatewayADInfo', 'POST', '/', 'json', false, 'json', request);
}

model SetGatewayAutoUpgradeConfigurationRequest {
  autoUpgradeEndHour: int32(name='AutoUpgradeEndHour', position='Query'),
  autoUpgradeStartHour: int32(name='AutoUpgradeStartHour', position='Query'),
  gatewayId: string(name='GatewayId', position='Query'),
  isAutoUpgrade: boolean(name='IsAutoUpgrade', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model SetGatewayAutoUpgradeConfigurationResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SetGatewayAutoUpgradeConfigurationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetGatewayAutoUpgradeConfigurationResponseBody(name='body'),
}

async function setGatewayAutoUpgradeConfiguration(request: SetGatewayAutoUpgradeConfigurationRequest): SetGatewayAutoUpgradeConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetGatewayAutoUpgradeConfiguration', 'POST', '/', 'json', false, 'json', request);
}

model SetGatewayDNSRequest {
  dnsServer: string(name='DnsServer', example='100.100.XX.XX,100.100.XX.XX', position='Query'),
  gatewayId: string(name='GatewayId', example='gw-000c6hshwukkbryp****', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model SetGatewayDNSResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='89398CFB-4EB6-4C7E-BB3C-EF213AC8FA**'),
  success?: boolean(name='Success', example='true'),
  taskId?: string(name='TaskId', example='t-000czaedx5koz578****'),
}

model SetGatewayDNSResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetGatewayDNSResponseBody(name='body'),
}

async function setGatewayDNS(request: SetGatewayDNSRequest): SetGatewayDNSResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetGatewayDNS', 'POST', '/', 'json', false, 'json', request);
}

model SetGatewayLDAPInfoRequest {
  baseDN?: string(name='BaseDN', example='dc=sgwt***,dc=local', position='Query'),
  gatewayId: string(name='GatewayId', example='gw-000eg44nmxbsfwbv****', position='Query'),
  isEnabled?: boolean(name='IsEnabled', example='true', position='Query'),
  isTls?: boolean(name='IsTls', example='true', position='Query'),
  password?: string(name='Password', example='123***', position='Query'),
  rootDN?: string(name='RootDN', example='cn=admin,dc=sgwt***,dc=local', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  serverIp?: string(name='ServerIp', example='47.101.59.188', position='Query'),
}

model SetGatewayLDAPInfoResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='2D1834A3-5EF2-46E2-97F7-C9F0C264C1**'),
  success?: boolean(name='Success', example='true'),
  taskId?: string(name='TaskId', example='t-000eg44nmxbsyd9a****'),
}

model SetGatewayLDAPInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetGatewayLDAPInfoResponseBody(name='body'),
}

async function setGatewayLDAPInfo(request: SetGatewayLDAPInfoRequest): SetGatewayLDAPInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetGatewayLDAPInfo', 'POST', '/', 'json', false, 'json', request);
}

model SwitchCSGClientsReverseSyncConfigurationRequest {
  clientIds: [ string ](name='ClientIds', shrink='simple', position='Query'),
  clientRegionId: string(name='ClientRegionId', position='Query'),
  isReverseSync: boolean(name='IsReverseSync', position='Query'),
  reverseSyncInternalSecond?: int32(name='ReverseSyncInternalSecond', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model SwitchCSGClientsReverseSyncConfigurationResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model SwitchCSGClientsReverseSyncConfigurationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SwitchCSGClientsReverseSyncConfigurationResponseBody(name='body'),
}

async function switchCSGClientsReverseSyncConfiguration(request: SwitchCSGClientsReverseSyncConfigurationRequest): SwitchCSGClientsReverseSyncConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SwitchCSGClientsReverseSyncConfiguration', 'POST', '/', 'json', false, 'json', request);
}

model SwitchGatewayExpirationPolicyRequest {
  gatewayId: string(name='GatewayId', example='gw-000eg44nmxbsfwbvq***', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model SwitchGatewayExpirationPolicyResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='395B1136-982E-4F95-BDCE-7323FFEF499E'),
  success?: boolean(name='Success', example='true'),
}

model SwitchGatewayExpirationPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SwitchGatewayExpirationPolicyResponseBody(name='body'),
}

async function switchGatewayExpirationPolicy(request: SwitchGatewayExpirationPolicyRequest): SwitchGatewayExpirationPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SwitchGatewayExpirationPolicy', 'POST', '/', 'json', false, 'json', request);
}

model SwitchToSubscriptionRequest {
  gatewayId: string(name='GatewayId', example='gw-000eg44nmxbsfwbvq***', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model SwitchToSubscriptionResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='395B1136-982E-4F95-BDCE-7323FFEF499E'),
  subscriptionURL?: string(name='SubscriptionURL', example='https://common-buy.aliyun.com/?commodityCode=hcs_sgw_csg_pre&request={"gateway_id":"gw-0007va9bnidei3s8a***”,”directBuy":"false","gateway_class":"standard","cache_cloud_efficiency_size":0}&regionId=cn-hangzhou#/buy'),
  success?: boolean(name='Success', example='true'),
}

model SwitchToSubscriptionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SwitchToSubscriptionResponseBody(name='body'),
}

async function switchToSubscription(request: SwitchToSubscriptionRequest): SwitchToSubscriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SwitchToSubscription', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceRegionId?: string(name='ResourceRegionId', example='cn-hangzhou', position='Query'),
  resourceType: string(name='ResourceType', example='GATEWAY', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tag: [ 
    {
      key: string(name='Key', example='testkey1'),
      value?: string(name='Value', example='testvalue1'),
    }
  ](name='Tag', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='224DB9F7-3100-4899-AB9C-C938BCCB43E7'),
}

model TagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model TriggerGatewayRemoteSyncRequest {
  gatewayId: string(name='GatewayId', position='Query'),
  indexId: string(name='IndexId', position='Query'),
  path?: string(name='Path', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model TriggerGatewayRemoteSyncResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model TriggerGatewayRemoteSyncResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TriggerGatewayRemoteSyncResponseBody(name='body'),
}

async function triggerGatewayRemoteSync(request: TriggerGatewayRemoteSyncRequest): TriggerGatewayRemoteSyncResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TriggerGatewayRemoteSync', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', example='false', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceId: [ string ](name='ResourceId', example='gw-uf6wjk5xxxxxxx', position='Query'),
  resourceRegionId?: string(name='ResourceRegionId', position='Query'),
  resourceType: string(name='ResourceType', example='GATEWAY', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tagKey: [ string ](name='TagKey', example='testkey1', position='Query'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='601B6F25-21E7-4484-99D5-3EF2625C0088'),
}

model UntagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGatewayBlockVolumeRequest {
  chapEnabled?: boolean(name='ChapEnabled', example='false', position='Query'),
  chapInPassword?: string(name='ChapInPassword', example='ChapInPassword', position='Query'),
  chapInUser?: string(name='ChapInUser', example='user', position='Query'),
  gatewayId: string(name='GatewayId', example='gw-000eg44nmxbsfwbvq***', position='Query'),
  indexId: string(name='IndexId', example='NFSalex***', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  size?: long(name='Size', example='100', position='Query'),
}

model UpdateGatewayBlockVolumeResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='EBAF769F-2E88-4D81-AF1E-A34FAACF9***'),
  success?: boolean(name='Success', example='true'),
  taskId?: string(name='TaskId', example='t-000avsri6tlyddgfe***'),
}

model UpdateGatewayBlockVolumeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateGatewayBlockVolumeResponseBody(name='body'),
}

async function updateGatewayBlockVolume(request: UpdateGatewayBlockVolumeRequest): UpdateGatewayBlockVolumeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGatewayBlockVolume', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGatewayFileShareRequest {
  accessBasedEnumeration?: boolean(name='AccessBasedEnumeration', example='false', position='Query'),
  backendLimit?: int32(name='BackendLimit', example='0', position='Query'),
  browsable?: boolean(name='Browsable', example='false', position='Query'),
  bypassCacheRead?: boolean(name='BypassCacheRead', example='false', position='Query'),
  cacheMode?: string(name='CacheMode', example='Cache', position='Query'),
  clientSideCmk?: string(name='ClientSideCmk', example='b1e08822-1e9c-4f8e-9dd1-a740cb200***', position='Query'),
  clientSideEncryption?: boolean(name='ClientSideEncryption', example='false', position='Query'),
  directIO?: boolean(name='DirectIO', example='false', position='Query'),
  downloadLimit?: int32(name='DownloadLimit', example='0', position='Query'),
  fastReclaim?: boolean(name='FastReclaim', example='true', position='Query'),
  frontendLimit?: int32(name='FrontendLimit', example='0', position='Query'),
  gatewayId: string(name='GatewayId', example='gw-000c6hshwukkbryp****', position='Query'),
  ignoreDelete?: boolean(name='IgnoreDelete', example='true', position='Query'),
  inPlace?: boolean(name='InPlace', example='false', position='Query'),
  indexId: string(name='IndexId', example='NFStest', position='Query'),
  kmsRotatePeriod?: long(name='KmsRotatePeriod', example='0', position='Query'),
  lagPeriod?: long(name='LagPeriod', example='5', position='Query'),
  name: string(name='Name', example='name', position='Query'),
  nfsV4Optimization?: boolean(name='NfsV4Optimization', example='true', position='Query'),
  pollingInterval?: int32(name='PollingInterval', example='36000', position='Query'),
  readOnlyClientList?: string(name='ReadOnlyClientList', example='172.16.146.100', position='Query'),
  readOnlyUserList?: string(name='ReadOnlyUserList', example='user1,user2', position='Query'),
  readWriteClientList?: string(name='ReadWriteClientList', example='172.16.146.100', position='Query'),
  readWriteUserList?: string(name='ReadWriteUserList', example='user1,user2', position='Query'),
  remoteSync?: boolean(name='RemoteSync', example='true', position='Query'),
  remoteSyncDownload?: boolean(name='RemoteSyncDownload', example='false', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  serverSideCmk?: string(name='ServerSideCmk', example='b1e08822-1e9c-4f8e-9dd1-a740cb200***', position='Query'),
  serverSideEncryption?: boolean(name='ServerSideEncryption', example='false', position='Query'),
  squash?: string(name='Squash', example='none', position='Query'),
  transferAcceleration?: boolean(name='TransferAcceleration', example='false', position='Query'),
  windowsAcl?: boolean(name='WindowsAcl', example='false', position='Query'),
}

model UpdateGatewayFileShareResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='EBAF769F-2E88-4D81-AF1E-A34FAACF9***'),
  success?: boolean(name='Success', example='true'),
  taskId?: string(name='TaskId', example='t-000avsri6tlyddgf****'),
}

model UpdateGatewayFileShareResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateGatewayFileShareResponseBody(name='body'),
}

async function updateGatewayFileShare(request: UpdateGatewayFileShareRequest): UpdateGatewayFileShareResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGatewayFileShare', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeGatewayRequest {
  gatewayId: string(name='GatewayId', example='gw-0001xv7je3580031y***', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model UpgradeGatewayResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='CB300009-3850-4107-B291-59BDB4EDA183'),
  success?: boolean(name='Success', example='true'),
  taskId?: string(name='TaskId', example='t-0001xv7je3580412***'),
}

model UpgradeGatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpgradeGatewayResponseBody(name='body'),
}

async function upgradeGateway(request: UpgradeGatewayRequest): UpgradeGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeGateway', 'POST', '/', 'json', false, 'json', request);
}

model UploadCSGClientLogRequest {
  clientId: string(name='ClientId', position='Query'),
  clientRegionId: string(name='ClientRegionId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model UploadCSGClientLogResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model UploadCSGClientLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UploadCSGClientLogResponseBody(name='body'),
}

async function uploadCSGClientLog(request: UploadCSGClientLogRequest): UploadCSGClientLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UploadCSGClientLog', 'POST', '/', 'json', false, 'json', request);
}

model UploadGatewayLogRequest {
  gatewayId: string(name='GatewayId', example='gw-0001xv7je3031yzun***', position='Query'),
}

model UploadGatewayLogResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='CB300009-3850-4107-B291-59BDB4EDA183'),
  success?: boolean(name='Success', example='true'),
  taskId?: string(name='TaskId', example='t-0001xv7je3580412f***'),
}

model UploadGatewayLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UploadGatewayLogResponseBody(name='body'),
}

async function uploadGatewayLog(request: UploadGatewayLogRequest): UploadGatewayLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UploadGatewayLog', 'POST', '/', 'json', false, 'json', request);
}

model ValidateExpressSyncConfigRequest {
  bucketName: string(name='BucketName', example='alex***', position='Query'),
  bucketPrefix?: string(name='BucketPrefix', example='test***', position='Query'),
  bucketRegion: string(name='BucketRegion', example='cn-hangzhou', position='Query'),
  name: string(name='Name', example='sync***', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ValidateExpressSyncConfigResponseBody = {
  code?: string(name='Code', example='200'),
  isValid?: boolean(name='IsValid', example='false'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='943856D2-814B-487A-B645-D5F9CCA15929'),
  success?: boolean(name='Success', example='true'),
  validateMessage?: string(name='ValidateMessage', example='ConflictExpressSyncConfig'),
}

model ValidateExpressSyncConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ValidateExpressSyncConfigResponseBody(name='body'),
}

async function validateExpressSyncConfig(request: ValidateExpressSyncConfigRequest): ValidateExpressSyncConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ValidateExpressSyncConfig', 'POST', '/', 'json', false, 'json', request);
}

model ValidateGatewayNameRequest {
  name?: string(name='Name', example='alex***', position='Query'),
  storageBundleId?: string(name='StorageBundleId', example='sb-0001b2otnkdxrigeq***', position='Query'),
}

model ValidateGatewayNameResponseBody = {
  code?: string(name='Code', example='200'),
  isValid?: boolean(name='IsValid', example='true'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='CB300009-3850-4107-B291-59BDB4EDA183'),
  success?: boolean(name='Success', example='true'),
}

model ValidateGatewayNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ValidateGatewayNameResponseBody(name='body'),
}

async function validateGatewayName(request: ValidateGatewayNameRequest): ValidateGatewayNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ValidateGatewayName', 'POST', '/', 'json', false, 'json', request);
}

