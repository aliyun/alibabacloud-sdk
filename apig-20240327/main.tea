/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('apig', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model Attachment {
  attachResourceIds?: [ string ](name='attachResourceIds'),
  attachResourceType?: string(name='attachResourceType'),
  environmentId?: string(name='environmentId'),
  gatewayId?: string(name='gatewayId'),
  policyAttachmentId?: string(name='policyAttachmentId'),
}

model CheckServiceLinkedRoleResult {
  existed?: boolean(name='existed'),
}

model DashboardFilter {
  routeName?: string(name='routeName', example='test'),
}

model DomainInfo {
  certIdentifier?: string(name='certIdentifier'),
  createFrom?: string(name='createFrom'),
  createTimestamp?: long(name='createTimestamp'),
  domainId?: string(name='domainId'),
  forceHttps?: boolean(name='forceHttps'),
  name?: string(name='name'),
  protocol?: string(name='protocol'),
  status?: string(name='status'),
  updateTimestamp?: long(name='updateTimestamp'),
}

model EnvironmentInfo {
  alias?: string(name='alias'),
  createTimestamp?: long(name='createTimestamp'),
  default?: boolean(name='default'),
  description?: string(name='description'),
  environmentId?: string(name='environmentId'),
  gatewayInfo?: GatewayInfo(name='gatewayInfo'),
  name?: string(name='name'),
  subDomainInfos?: [
    SubDomainInfo
  ](name='subDomainInfos'),
  updateTimestamp?: long(name='updateTimestamp'),
}

model GatewayInfo {
  gatewayId?: string(name='gatewayId'),
  name?: string(name='name'),
}

model GatewayLogConfig {
  slsConfig?: {
    enable?: boolean(name='enable'),
  }(name='slsConfig'),
}

model GatewayRouteBackend {
  services?: [ 
    {
      gatewayServiceId?: string(name='gatewayServiceId', example='gs-cq2bmmdlhtgj***'),
      name?: string(name='name', example='item-service'),
      port?: int32(name='port', example='port'),
      protocol?: string(name='protocol', example='HTTP'),
      version?: string(name='version', example='v1'),
      weight?: float(name='weight', example='49'),
    }
  ](name='services'),
  type?: string(name='type', example='Single'),
}

model GatewayRouteBackendConfig {
  services?: [ 
    {
      gatewayServiceId?: string(name='gatewayServiceId', example='gs-cq2bmmdlhtgj***'),
      port?: int32(name='port', example='port'),
      protocol?: string(name='protocol', example='HTTP'),
      sourceType?: string(name='sourceType', example='K8S'),
      weight?: float(name='weight', example='49'),
    }
  ](name='services'),
  type?: string(name='type', example='Single'),
}

model GatewayRouteDomainConfig {
  domainIds?: [ string ](name='domainIds'),
}

model GatewayRouteDomainInfo {
  domains?: [ 
    {
      domainId?: string(name='domainId', example='d-cp82or5l***'),
      name?: string(name='name', example='item.dev'),
      protocol?: string(name='protocol', example='HTTP'),
    }
  ](name='domains'),
}

model GatewayService {
  addresses?: [ string ](name='addresses'),
  createTimestamp?: long(name='createTimestamp'),
  gatewayServiceId?: string(name='gatewayServiceId'),
  healthCheck?: ServiceHealthCheck(name='healthCheck'),
  healthStatus?: string(name='healthStatus'),
  name?: string(name='name'),
  namespace?: string(name='namespace'),
  ports?: [ 
    {
      name?: string(name='name'),
      port?: int32(name='port'),
      protocol?: string(name='protocol'),
    }
  ](name='ports'),
  qualifier?: string(name='qualifier', example='LATEST'),
  sourceType?: string(name='sourceType'),
  unhealthyEndpoints?: [ string ](name='unhealthyEndpoints'),
  updateTimestamp?: long(name='updateTimestamp'),
}

model GatewayServiceSource {
  bound?: boolean(name='bound'),
  createTimestamp?: long(name='createTimestamp'),
  k8sServiceSourceInfo?: {
    clusterId?: string(name='clusterId'),
    ingressConfig?: {
      enable?: boolean(name='enable', example='true'),
      ingressClass?: string(name='ingressClass', example='mse'),
      overrideIngressIp?: boolean(name='overrideIngressIp', example='false'),
      watchNamespace?: string(name='watchNamespace', example='default'),
    }(name='ingressConfig'),
  }(name='k8sServiceSourceInfo'),
  nacosServiceSourceInfo?: {
    address?: string(name='address'),
    clusterId?: string(name='clusterId'),
    instanceId?: string(name='instanceId'),
  }(name='nacosServiceSourceInfo'),
  name?: string(name='name'),
  serviceSourceId?: string(name='serviceSourceId'),
  type?: string(name='type'),
  updateTimestamp?: long(name='updateTimestamp'),
}

model HttpApiApiInfo {
  basePath?: string(name='basePath', example='/v1'),
  description?: string(name='description'),
  environments?: [ 
    {
      backendScene?: string(name='backendScene', example='SingleService'),
      backendType?: string(name='backendType', example='Service'),
      cloudProductConfig?: {
        cloudProductType?: string(name='cloudProductType', example='CS'),
        containerServiceConfigs?: [ 
          {
            gatewayServiceId?: string(name='gatewayServiceId', example='gs-xxx'),
            match?: HttpApiBackendMatchConditions(name='match'),
            name?: string(name='name', example='test'),
            namespace?: string(name='namespace', example='default'),
            port?: int32(name='port', example='8080'),
            protocol?: string(name='protocol', example='HTTP'),
            weight?: int32(name='weight', example='100'),
          }
        ](name='containerServiceConfigs'),
        functionConfigs?: [ 
          {
            gatewayServiceId?: string(name='gatewayServiceId', example='gs-xxx'),
            match?: HttpApiBackendMatchConditions(name='match'),
            name?: string(name='name', example='test-function'),
            qualifier?: string(name='qualifier', example='LATEST'),
            weight?: int32(name='weight', example='100'),
          }
        ](name='functionConfigs'),
        mseNacosConfigs?: [ 
          {
            gatewayServiceId?: string(name='gatewayServiceId', example='gs-xxx'),
            groupName?: string(name='groupName', example='DEFAULT_GROUP'),
            match?: HttpApiBackendMatchConditions(name='match'),
            name?: string(name='name', example='springboot-test'),
            namespace?: string(name='namespace', example='public'),
            weight?: int32(name='weight', example='100'),
          }
        ](name='mseNacosConfigs'),
      }(name='cloudProductConfig'),
      dnsConfigs?: [ 
        {
          dnsList?: [ string ](name='dnsList'),
          match?: HttpApiBackendMatchConditions(name='match'),
          weight?: int32(name='weight', example='100'),
        }
      ](name='dnsConfigs'),
      environmentId?: string(name='environmentId', example='env-xxx'),
      serviceConfigs?: [ 
        {
          gatewayServiceId?: string(name='gatewayServiceId', example='gs-xxx'),
          match?: HttpApiBackendMatchConditions(name='match'),
          name?: string(name='name', example='demo-service'),
          port?: string(name='port', example='8080'),
          protocol?: string(name='protocol', example='HTTP'),
          version?: string(name='version', example='v1'),
          weight?: int32(name='weight', example='100'),
        }
      ](name='serviceConfigs'),
      vipConfigs?: [ 
        {
          endpoints?: [ string ](name='endpoints'),
          match?: HttpApiBackendMatchConditions(name='match'),
          weight?: int32(name='weight', example='100'),
        }
      ](name='vipConfigs'),
    }
  ](name='environments'),
  httpApiId?: string(name='httpApiId', example='api-xxx'),
  name?: string(name='name', example='test'),
  protocols?: [ string ](name='protocols'),
  versionInfo?: HttpApiVersionInfo(name='versionInfo'),
}

model HttpApiBackendMatchCondition {
  key?: string(name='key', example='color'),
  operator?: string(name='operator', example='equal'),
  type?: string(name='type', example='Query'),
  value?: string(name='value', example='gray'),
}

model HttpApiBackendMatchConditions {
  conditions?: [
    HttpApiBackendMatchCondition
  ](name='conditions'),
  default?: boolean(name='default', example='true'),
}

model HttpApiDomainInfo {
  domainId?: string(name='domainId', example='d-xxx'),
  name?: string(name='name', example='www.example.com'),
  protocol?: string(name='protocol', example='HTTP'),
}

model HttpApiInfoByName {
  name?: string(name='name', example='test-api'),
  versionEnabled?: boolean(name='versionEnabled', example='true'),
  versionedHttpApis?: [
    HttpApiApiInfo
  ](name='versionedHttpApis'),
}

model HttpApiMockContract {
  enable?: boolean(name='enable', example='false'),
  responseCode?: int32(name='responseCode', example='200'),
  responseContent?: string(name='responseContent'),
}

model HttpApiOperation {
  description?: string(name='description', example='获取用户信息'),
  method?: string(name='method', description='This parameter is required.', example='GET'),
  mock?: HttpApiMockContract(name='mock'),
  name?: string(name='name', description='This parameter is required.', example='GetUserInfo'),
  path?: string(name='path', description='This parameter is required.', example='/user'),
  request?: HttpApiRequestContract(name='request'),
  response?: HttpApiResponseContract(name='response'),
}

model HttpApiOperationInfo {
  createTimestamp?: long(name='createTimestamp', example='1719386834548'),
  description?: string(name='description', example='获取用户信息'),
  method?: string(name='method', example='GET'),
  mock?: HttpApiMockContract(name='mock'),
  name?: string(name='name', example='GetUserInfo'),
  operationId?: string(name='operationId', example='op-xxx'),
  path?: string(name='path', example='/user/123'),
  request?: HttpApiRequestContract(name='request'),
  response?: HttpApiResponseContract(name='response'),
}

model HttpApiParameter {
  defaultValue?: string(name='defaultValue'),
  description?: string(name='description'),
  exampleValue?: string(name='exampleValue'),
  name?: string(name='name', description='This parameter is required.'),
  required?: boolean(name='required', example='false'),
  type?: string(name='type', description='This parameter is required.', example='string'),
}

model HttpApiPublishRevisionInfo {
  backendScene?: string(name='backendScene', example='SingleService'),
  backendType?: string(name='backendType', example='Service'),
  cloudProductConfig?: {
    cloudProductType?: string(name='cloudProductType', example='FC'),
    containerServiceConfigs?: [ 
      {
        gatewayServiceId?: string(name='gatewayServiceId', example='gs-xxx'),
        match?: HttpApiBackendMatchConditions(name='match'),
        name?: string(name='name', example='demo-service'),
        namespace?: string(name='namespace', example='default'),
        port?: int32(name='port', example='8080'),
        protocol?: string(name='protocol', example='HTTP'),
        weight?: string(name='weight', example='100'),
      }
    ](name='containerServiceConfigs'),
    functionConfigs?: [ 
      {
        gatewayServiceId?: string(name='gatewayServiceId', example='gs-xxx'),
        match?: HttpApiBackendMatchConditions(name='match'),
        name?: string(name='name', example='demo-function'),
        qualifier?: string(name='qualifier', example='LATEST'),
        weight?: int32(name='weight', example='100'),
      }
    ](name='functionConfigs'),
    mseNacosConfigs?: [ 
      {
        gatewayServiceId?: string(name='gatewayServiceId', example='gs-xxx'),
        groupName?: string(name='groupName', example='DEFAULT_GROUP'),
        match?: HttpApiBackendMatchConditions(name='match'),
        name?: string(name='name', example='spring-demo'),
        namespace?: string(name='namespace', example='public'),
        weight?: int32(name='weight', example='100'),
      }
    ](name='mseNacosConfigs'),
  }(name='cloudProductConfig'),
  createTimestamp?: long(name='createTimestamp', example='1718807057927'),
  customDomains?: [
    HttpApiDomainInfo
  ](name='customDomains'),
  dnsConfigs?: [ 
    {
      dnsList?: [ string ](name='dnsList'),
      match?: HttpApiBackendMatchConditions(name='match'),
      weight?: int32(name='weight', example='100'),
    }
  ](name='dnsConfigs'),
  environmentInfo?: {
    alias?: string(name='alias', example='测试'),
    environmentId?: string(name='environmentId', example='env-xxx'),
    gatewayInfo?: {
      gatewayId?: string(name='gatewayId', example='gw-xxx'),
      name?: string(name='name', example='实例1'),
    }(name='gatewayInfo'),
    name?: string(name='name', example='test'),
  }(name='environmentInfo', example='env-xxx'),
  isCurrentVersion?: boolean(name='isCurrentVersion', example='true'),
  operations?: [
    HttpApiOperationInfo
  ](name='operations'),
  revisionId?: string(name='revisionId', example='apr-xxx'),
  serviceConfigs?: [ 
    {
      gatewayServiceId?: string(name='gatewayServiceId', example='gs-xxx'),
      match?: HttpApiBackendMatchConditions(name='match'),
      port?: int32(name='port', example='8080'),
      protocol?: string(name='protocol', example='HTTP'),
      version?: string(name='version', example='v1'),
      weight?: int32(name='weight', example='100'),
    }
  ](name='serviceConfigs'),
  subDomains?: [
    HttpApiDomainInfo
  ](name='subDomains', example='env-xxx.com'),
  vipConfigs?: [ 
    {
      endpoints?: [ string ](name='endpoints'),
      match?: HttpApiBackendMatchConditions(name='match'),
      weight?: int32(name='weight', example='100'),
    }
  ](name='vipConfigs'),
}

model HttpApiRequestContract {
  body?: {
    contentType?: string(name='contentType', example='application/json'),
    description?: string(name='description'),
    example?: string(name='example', example='{"key":"value"}'),
    jsonSchema?: string(name='jsonSchema'),
  }(name='body'),
  headerParameters?: [
    HttpApiParameter
  ](name='headerParameters'),
  pathParameters?: [
    HttpApiParameter
  ](name='pathParameters'),
  queryParameters?: [
    HttpApiParameter
  ](name='queryParameters'),
}

model HttpApiResponseContract {
  contentType?: string(name='contentType', description='This parameter is required.', example='application/json'),
  items?: [ 
    {
      code?: int32(name='code', example='200'),
      description?: string(name='description', example='正常接口响应'),
      example?: string(name='example', example='{"result": "ok"}'),
      jsonSchema?: string(name='jsonSchema'),
    }
  ](name='items'),
}

model HttpApiVersionConfig {
  enable?: boolean(name='enable', example='true'),
  headerName?: string(name='headerName', example='my-version'),
  queryName?: string(name='queryName', example='myVersion'),
  scheme?: string(name='scheme', example='Query'),
  version?: string(name='version', example='v1'),
}

model HttpApiVersionInfo {
  enable?: boolean(name='enable', example='true'),
  headerName?: string(name='headerName', example='my-version'),
  queryName?: string(name='queryName', example='myVersion'),
  scheme?: string(name='scheme', example='Query'),
  version?: string(name='version', example='v1'),
}

model HttpDubboTranscoder {
  dubboServiceGroup?: string(name='dubboServiceGroup'),
  dubboServiceName?: string(name='dubboServiceName'),
  dubboServiceVersion?: string(name='dubboServiceVersion'),
  mothedMapList?: [ 
    {
      dubboMothedName?: string(name='dubboMothedName'),
      httpMothed?: string(name='httpMothed', example='ALL_GET'),
      mothedpath?: string(name='mothedpath', example='/mytestzbk/sayhello'),
      paramMapsList?: [ 
        {
          extractKey?: string(name='extractKey', example='name'),
          extractKeySpec?: string(name='extractKeySpec', example='ALL_QUERY_PARAMETER'),
          mappingType?: string(name='mappingType', example='java.lang.String'),
        }
      ](name='paramMapsList'),
      passThroughAllHeaders?: string(name='passThroughAllHeaders', example='PASS_NOT'),
      passThroughList?: [ string ](name='passThroughList'),
    }
  ](name='mothedMapList'),
}

model HttpRouteMatch {
  headers?: [ 
    {
      name?: string(name='name', example='dev'),
      type?: string(name='type', example='Exact'),
      value?: string(name='value', example='true'),
    }
  ](name='headers'),
  ignoreUriCase?: boolean(name='ignoreUriCase', example='true'),
  methods?: [ string ](name='methods'),
  path?: {
    type?: string(name='type', example='Prefix'),
    value?: string(name='value', example='/user'),
  }(name='path'),
  queryParams?: [ 
    {
      name?: string(name='name', example='age'),
      type?: string(name='type', example='Exact'),
      value?: string(name='value', example='17'),
    }
  ](name='queryParams'),
}

model PolicyClassInfo {
  alias?: string(name='alias'),
  attachableResourceTypes?: [ string ](name='attachableResourceTypes'),
  classId?: string(name='classId'),
  configExample?: string(name='configExample'),
  deprecated?: boolean(name='deprecated'),
  description?: string(name='description'),
  direction?: string(name='direction'),
  enableLog?: boolean(name='enableLog'),
  executePriority?: string(name='executePriority'),
  executeStage?: string(name='executeStage'),
  name?: string(name='name'),
  type?: string(name='type'),
  version?: string(name='version'),
}

model PolicyDetailInfo {
  classId?: string(name='classId'),
  className?: string(name='className'),
  config?: string(name='config'),
  description?: string(name='description'),
  name?: string(name='name'),
  policyId?: string(name='policyId'),
}

model PolicyInfo {
  attachments?: [
    Attachment
  ](name='attachments'),
  classAlias?: string(name='classAlias'),
  className?: string(name='className'),
  config?: string(name='config'),
  direction?: string(name='direction'),
  executePriority?: string(name='executePriority'),
  executeStage?: string(name='executeStage'),
  name?: string(name='name'),
  policyId?: string(name='policyId'),
  type?: string(name='type'),
}

model ResourceStatistic {
  resourceCount?: int32(name='resourceCount'),
  resourceType?: string(name='resourceType'),
}

model ServiceHealthCheck {
  enable?: boolean(name='enable', example='true'),
  healthyThreshold?: int32(name='healthyThreshold'),
  httpHost?: string(name='httpHost'),
  httpPath?: string(name='httpPath'),
  interval?: int32(name='interval'),
  protocol?: string(name='protocol', example='TCP'),
  timeout?: int32(name='timeout'),
  unhealthyThreshold?: int32(name='unhealthyThreshold'),
}

model ServiceLinkedRole {
  arn?: string(name='arn'),
  assumeRolePolicyDocument?: string(name='assumeRolePolicyDocument'),
  createDate?: string(name='createDate'),
  description?: string(name='description'),
  isServiceLinkedRole?: boolean(name='isServiceLinkedRole'),
  roleId?: string(name='roleId'),
  roleName?: string(name='roleName'),
  rolePrincipalName?: string(name='rolePrincipalName'),
}

model SslCertMetaInfo {
  algorithm?: string(name='algorithm'),
  certId?: long(name='certId'),
  certIdentifier?: string(name='certIdentifier'),
  certName?: string(name='certName'),
  commonName?: string(name='commonName'),
  domain?: string(name='domain'),
  domainMatchCert?: boolean(name='domainMatchCert'),
  fingerprint?: string(name='fingerprint'),
  instanceId?: string(name='instanceId'),
  isChainCompleted?: boolean(name='isChainCompleted'),
  issuer?: string(name='issuer'),
  keySize?: string(name='keySize'),
  md5?: string(name='md5'),
  notAfterTimestamp?: long(name='notAfterTimestamp'),
  notBeforeTimestamp?: long(name='notBeforeTimestamp'),
  sans?: string(name='sans'),
  serialNo?: string(name='serialNo'),
  sha2?: string(name='sha2'),
  signAlgorithm?: string(name='signAlgorithm'),
}

model SubDomainInfo {
  domainId?: string(name='domainId'),
  name?: string(name='name'),
  networkType?: string(name='networkType'),
  protocol?: string(name='protocol'),
}

model AddGatewaySecurityGroupRuleRequest {
  description?: string(name='description'),
  portRanges?: [ string ](name='portRanges'),
  securityGroupId?: string(name='securityGroupId', example='sg-wz929kxhcdp****'),
}

model AddGatewaySecurityGroupRuleResponseBody = {
  code?: string(name='code', example='Ok'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='2A6E90D5-A711-54F4-A489-E33C2021EDDF'),
}

model AddGatewaySecurityGroupRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddGatewaySecurityGroupRuleResponseBody(name='body'),
}

/**
 * @summary 授权网关访问服务的安全组
 *
 * @param request AddGatewaySecurityGroupRuleRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddGatewaySecurityGroupRuleResponse
 */
async function addGatewaySecurityGroupRuleWithOptions(gatewayId: string, request: AddGatewaySecurityGroupRuleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddGatewaySecurityGroupRuleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.portRanges)) {
    body['portRanges'] = request.portRanges;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    body['securityGroupId'] = request.securityGroupId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddGatewaySecurityGroupRule',
    version = '2024-03-27',
    protocol = 'HTTPS',
    pathname = `/v1/gateways/${OpenApiUtil.getEncodeParam(gatewayId)}/security-group-rules`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 授权网关访问服务的安全组
 *
 * @param request AddGatewaySecurityGroupRuleRequest
 * @return AddGatewaySecurityGroupRuleResponse
 */
async function addGatewaySecurityGroupRule(gatewayId: string, request: AddGatewaySecurityGroupRuleRequest): AddGatewaySecurityGroupRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return addGatewaySecurityGroupRuleWithOptions(gatewayId, request, headers, runtime);
}

model CreateDomainRequest {
  caCertIndentifier?: string(name='caCertIndentifier', example='194445-cn-hangzhou'),
  certIndentifier?: string(name='certIndentifier', example='194445-cn-hangzhou'),
  forceHttps?: boolean(name='forceHttps', example='false'),
  http2Option?: string(name='http2Option', example='Open'),
  name?: string(name='name', description='This parameter is required.', example='abc.com'),
  protocol?: string(name='protocol', description='This parameter is required.', example='HTTP'),
  tlsMax?: string(name='tlsMax', example='TLS1.3'),
  tlsMin?: string(name='tlsMin', example='TLS1.0'),
}

model CreateDomainResponseBody = {
  code?: string(name='code', example='Ok'),
  data?: {
    domainId?: string(name='domainId', example='d-cpu1aullhtgkidg7sa4g'),
  }(name='data'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='0C2D1C68-0D93-5561-8EE6-FDB7BF067A30'),
}

model CreateDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDomainResponseBody(name='body'),
}

/**
 * @summary 创建域名
 *
 * @param request CreateDomainRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDomainResponse
 */
async function createDomainWithOptions(request: CreateDomainRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDomainResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.caCertIndentifier)) {
    body['caCertIndentifier'] = request.caCertIndentifier;
  }
  if (!Util.isUnset(request.certIndentifier)) {
    body['certIndentifier'] = request.certIndentifier;
  }
  if (!Util.isUnset(request.forceHttps)) {
    body['forceHttps'] = request.forceHttps;
  }
  if (!Util.isUnset(request.http2Option)) {
    body['http2Option'] = request.http2Option;
  }
  if (!Util.isUnset(request.name)) {
    body['name'] = request.name;
  }
  if (!Util.isUnset(request.protocol)) {
    body['protocol'] = request.protocol;
  }
  if (!Util.isUnset(request.tlsMax)) {
    body['tlsMax'] = request.tlsMax;
  }
  if (!Util.isUnset(request.tlsMin)) {
    body['tlsMin'] = request.tlsMin;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDomain',
    version = '2024-03-27',
    protocol = 'HTTPS',
    pathname = `/v1/domains`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建域名
 *
 * @param request CreateDomainRequest
 * @return CreateDomainResponse
 */
async function createDomain(request: CreateDomainRequest): CreateDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createDomainWithOptions(request, headers, runtime);
}

model CreateEnvironmentRequest {
  alias?: string(name='alias', description='This parameter is required.'),
  description?: string(name='description'),
  gatewayId?: string(name='gatewayId', description='This parameter is required.', example='gw-cq7l5s5lhtgi6qasrdc0'),
  name?: string(name='name', description='This parameter is required.', example='test'),
}

model CreateEnvironmentResponseBody = {
  code?: string(name='code', example='Ok'),
  data?: {
    environmentId?: string(name='environmentId', example='env-cq7l5s5lhtgi6qasrdc0'),
  }(name='data'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='3C3B9A12-3868-5EB9-8BEA-F99E03DD125C'),
}

model CreateEnvironmentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateEnvironmentResponseBody(name='body'),
}

/**
 * @summary CreateEnvironment
 *
 * @param request CreateEnvironmentRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateEnvironmentResponse
 */
async function createEnvironmentWithOptions(request: CreateEnvironmentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateEnvironmentResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alias)) {
    body['alias'] = request.alias;
  }
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.gatewayId)) {
    body['gatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.name)) {
    body['name'] = request.name;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateEnvironment',
    version = '2024-03-27',
    protocol = 'HTTPS',
    pathname = `/v1/environments`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary CreateEnvironment
 *
 * @param request CreateEnvironmentRequest
 * @return CreateEnvironmentResponse
 */
async function createEnvironment(request: CreateEnvironmentRequest): CreateEnvironmentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createEnvironmentWithOptions(request, headers, runtime);
}

model CreateGatewayRouteRequest {
  backendConfig?: GatewayRouteBackendConfig(name='backendConfig'),
  description?: string(name='description'),
  domainConfig?: GatewayRouteDomainConfig(name='domainConfig'),
  match?: HttpRouteMatch(name='match'),
  name?: string(name='name', example='itemcenter-route'),
}

model CreateGatewayRouteResponseBody = {
  code?: string(name='code', example='Ok'),
  data?: {
    gatewayRouteId?: string(name='gatewayRouteId', example='gr-cpumc37d*****'),
  }(name='data'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='0F138FFC-6E2B-56C1-9BAB-A67462E339D1'),
}

model CreateGatewayRouteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateGatewayRouteResponseBody(name='body'),
}

/**
 * @summary 创建网关路由
 *
 * @param request CreateGatewayRouteRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateGatewayRouteResponse
 */
async function createGatewayRouteWithOptions(gatewayId: string, request: CreateGatewayRouteRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateGatewayRouteResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.backendConfig)) {
    body['backendConfig'] = request.backendConfig;
  }
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.domainConfig)) {
    body['domainConfig'] = request.domainConfig;
  }
  if (!Util.isUnset(request.match)) {
    body['match'] = request.match;
  }
  if (!Util.isUnset(request.name)) {
    body['name'] = request.name;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateGatewayRoute',
    version = '2024-03-27',
    protocol = 'HTTPS',
    pathname = `/v1/gateways/${OpenApiUtil.getEncodeParam(gatewayId)}/http-routes`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建网关路由
 *
 * @param request CreateGatewayRouteRequest
 * @return CreateGatewayRouteResponse
 */
async function createGatewayRoute(gatewayId: string, request: CreateGatewayRouteRequest): CreateGatewayRouteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createGatewayRouteWithOptions(gatewayId, request, headers, runtime);
}

model CreateGatewayServiceRequest {
  gatewayServiceConfigs?: [ 
    {
      addresses?: [ string ](name='addresses'),
      groupName?: string(name='groupName', example='group-1'),
      name?: string(name='name', example='itemcenter-provider'),
      namespace?: string(name='namespace', example='MSE_NACOS'),
      port?: int32(name='port', example='8080'),
      qualifier?: string(name='qualifier', example='LATEST'),
    }
  ](name='gatewayServiceConfigs'),
  sourceType?: string(name='sourceType', example='MSE_NACOS'),
}

model CreateGatewayServiceResponseBody = {
  code?: string(name='code', example='Ok'),
  data?: {
    gatewayServiceIds?: [ string ](name='gatewayServiceIds'),
  }(name='data'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='9BA5586D-0EAE-5F78-B704-1A8DBADE46DA'),
}

model CreateGatewayServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateGatewayServiceResponseBody(name='body'),
}

/**
 * @summary 创建服务
 *
 * @param request CreateGatewayServiceRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateGatewayServiceResponse
 */
async function createGatewayServiceWithOptions(gatewayId: string, request: CreateGatewayServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateGatewayServiceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.gatewayServiceConfigs)) {
    body['gatewayServiceConfigs'] = request.gatewayServiceConfigs;
  }
  if (!Util.isUnset(request.sourceType)) {
    body['sourceType'] = request.sourceType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateGatewayService',
    version = '2024-03-27',
    protocol = 'HTTPS',
    pathname = `/v1/gateways/${OpenApiUtil.getEncodeParam(gatewayId)}/gateway-services`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建服务
 *
 * @param request CreateGatewayServiceRequest
 * @return CreateGatewayServiceResponse
 */
async function createGatewayService(gatewayId: string, request: CreateGatewayServiceRequest): CreateGatewayServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createGatewayServiceWithOptions(gatewayId, request, headers, runtime);
}

model CreateGatewayServiceVersionRequest {
  labels?: [ 
    {
      key?: string(name='key', example='app'),
      value?: string(name='value', example='itemcenter-blue'),
    }
  ](name='labels'),
  name?: string(name='name', example='v1'),
}

model CreateGatewayServiceVersionResponseBody = {
  code?: string(name='code', example='Ok'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='393E2630-DBE7-5221-AB35-9E740675491A'),
}

model CreateGatewayServiceVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateGatewayServiceVersionResponseBody(name='body'),
}

/**
 * @summary 创建服务版本
 *
 * @param request CreateGatewayServiceVersionRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateGatewayServiceVersionResponse
 */
async function createGatewayServiceVersionWithOptions(gatewayId: string, gatewayServiceId: string, request: CreateGatewayServiceVersionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateGatewayServiceVersionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.labels)) {
    body['labels'] = request.labels;
  }
  if (!Util.isUnset(request.name)) {
    body['name'] = request.name;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateGatewayServiceVersion',
    version = '2024-03-27',
    protocol = 'HTTPS',
    pathname = `/v1/gateways/${OpenApiUtil.getEncodeParam(gatewayId)}/gateway-services/${OpenApiUtil.getEncodeParam(gatewayServiceId)}/service-versions`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建服务版本
 *
 * @param request CreateGatewayServiceVersionRequest
 * @return CreateGatewayServiceVersionResponse
 */
async function createGatewayServiceVersion(gatewayId: string, gatewayServiceId: string, request: CreateGatewayServiceVersionRequest): CreateGatewayServiceVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createGatewayServiceVersionWithOptions(gatewayId, gatewayServiceId, request, headers, runtime);
}

model CreateHttpApiRequest {
  basePath?: string(name='basePath', description='This parameter is required.', example='/v1'),
  description?: string(name='description'),
  name?: string(name='name', description='This parameter is required.'),
  protocols?: [ string ](name='protocols'),
  versionConfig?: HttpApiVersionConfig(name='versionConfig'),
}

model CreateHttpApiResponseBody = {
  code?: string(name='code', example='Ok'),
  data?: {
    httpApiId?: string(name='httpApiId'),
    name?: string(name='name'),
  }(name='data'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='A1994B10-C6A8-58FA-8347-6A08B0D4EFDE'),
}

model CreateHttpApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateHttpApiResponseBody(name='body'),
}

/**
 * @summary 创建一个HTTP类型的API
 *
 * @param request CreateHttpApiRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateHttpApiResponse
 */
async function createHttpApiWithOptions(request: CreateHttpApiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateHttpApiResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.basePath)) {
    body['basePath'] = request.basePath;
  }
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    body['name'] = request.name;
  }
  if (!Util.isUnset(request.protocols)) {
    body['protocols'] = request.protocols;
  }
  if (!Util.isUnset(request.versionConfig)) {
    body['versionConfig'] = request.versionConfig;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateHttpApi',
    version = '2024-03-27',
    protocol = 'HTTPS',
    pathname = `/v1/http-apis`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建一个HTTP类型的API
 *
 * @param request CreateHttpApiRequest
 * @return CreateHttpApiResponse
 */
async function createHttpApi(request: CreateHttpApiRequest): CreateHttpApiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createHttpApiWithOptions(request, headers, runtime);
}

model CreateHttpApiOperationRequest {
  operations?: [
    HttpApiOperation
  ](name='operations'),
}

model CreateHttpApiOperationResponseBody = {
  code?: string(name='code', example='Ok'),
  data?: {
    operations?: [ 
      {
        operationId?: string(name='operationId'),
      }
    ](name='operations'),
  }(name='data'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='393E2630-DBE7-5221-AB35-9E740675491A'),
}

model CreateHttpApiOperationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateHttpApiOperationResponseBody(name='body'),
}

/**
 * @summary 为HTTP API创建Operation
 *
 * @param request CreateHttpApiOperationRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateHttpApiOperationResponse
 */
async function createHttpApiOperationWithOptions(httpApiId: string, request: CreateHttpApiOperationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateHttpApiOperationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.operations)) {
    body['operations'] = request.operations;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateHttpApiOperation',
    version = '2024-03-27',
    protocol = 'HTTPS',
    pathname = `/v1/http-apis/${OpenApiUtil.getEncodeParam(httpApiId)}/operations`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 为HTTP API创建Operation
 *
 * @param request CreateHttpApiOperationRequest
 * @return CreateHttpApiOperationResponse
 */
async function createHttpApiOperation(httpApiId: string, request: CreateHttpApiOperationRequest): CreateHttpApiOperationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createHttpApiOperationWithOptions(httpApiId, request, headers, runtime);
}

model CreateServiceSourceRequest {
  k8sServiceSourceConfig?: {
    authorizeSecurityGroupRules?: [ 
      {
        description?: string(name='description'),
        portRanges?: [ string ](name='portRanges'),
        securityGroupId?: string(name='securityGroupId'),
      }
    ](name='authorizeSecurityGroupRules'),
    clusterId?: string(name='clusterId', example='c4a21b3560fad4ec299f3e******'),
    ingressConfig?: {
      enable?: boolean(name='enable', example='true'),
      ingressClass?: string(name='ingressClass', example='mse'),
      overrideIngressIp?: boolean(name='overrideIngressIp', example='false'),
      watchNamespace?: string(name='watchNamespace', example='default'),
    }(name='ingressConfig'),
  }(name='k8sServiceSourceConfig'),
  nacosServiceSourceConfig?: {
    instanceId?: string(name='instanceId', example='mse-cn-328fc8***'),
  }(name='nacosServiceSourceConfig'),
  type?: string(name='type'),
}

model CreateServiceSourceResponseBody = {
  code?: string(name='code', example='Ok'),
  data?: {
    serviceSourceId?: string(name='serviceSourceId', example='gss-cpqots5lht****'),
  }(name='data'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='C67DED2B-F19B-5BEC-88C1-D6EB854CD0D4'),
}

model CreateServiceSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateServiceSourceResponseBody(name='body'),
}

/**
 * @summary 创建服务来源
 *
 * @param request CreateServiceSourceRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateServiceSourceResponse
 */
async function createServiceSourceWithOptions(gatewayId: string, request: CreateServiceSourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateServiceSourceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.k8sServiceSourceConfig)) {
    body['k8sServiceSourceConfig'] = request.k8sServiceSourceConfig;
  }
  if (!Util.isUnset(request.nacosServiceSourceConfig)) {
    body['nacosServiceSourceConfig'] = request.nacosServiceSourceConfig;
  }
  if (!Util.isUnset(request.type)) {
    body['type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateServiceSource',
    version = '2024-03-27',
    protocol = 'HTTPS',
    pathname = `/v1/gateways/${OpenApiUtil.getEncodeParam(gatewayId)}/service-sources`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建服务来源
 *
 * @param request CreateServiceSourceRequest
 * @return CreateServiceSourceResponse
 */
async function createServiceSource(gatewayId: string, request: CreateServiceSourceRequest): CreateServiceSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createServiceSourceWithOptions(gatewayId, request, headers, runtime);
}

model DeleteDomainResponseBody = {
  code?: string(name='code', example='Ok'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='A60EE5CA-1294-532A-9775-8D2FD1C6EFBF'),
}

model DeleteDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDomainResponseBody(name='body'),
}

/**
 * @summary DeleteDomain
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDomainResponse
 */
async function deleteDomainWithOptions(domainId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteDomainResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteDomain',
    version = '2024-03-27',
    protocol = 'HTTPS',
    pathname = `/v1/domains/${OpenApiUtil.getEncodeParam(domainId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary DeleteDomain
 *
 * @return DeleteDomainResponse
 */
async function deleteDomain(domainId: string): DeleteDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteDomainWithOptions(domainId, headers, runtime);
}

model DeleteEnvironmentResponseBody = {
  code?: string(name='code', example='Ok'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='C61E30D3-579A-5B43-994E-31E02EDC9129'),
}

model DeleteEnvironmentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEnvironmentResponseBody(name='body'),
}

/**
 * @summary DeleteEnvironment
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteEnvironmentResponse
 */
async function deleteEnvironmentWithOptions(environmentId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteEnvironmentResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteEnvironment',
    version = '2024-03-27',
    protocol = 'HTTPS',
    pathname = `/v1/environments/${OpenApiUtil.getEncodeParam(environmentId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary DeleteEnvironment
 *
 * @return DeleteEnvironmentResponse
 */
async function deleteEnvironment(environmentId: string): DeleteEnvironmentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteEnvironmentWithOptions(environmentId, headers, runtime);
}

model DeleteGatewayResponseBody = {
  code?: string(name='code', example='Ok'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='DE97DFDB-7DF0-5AB9-941C-10D27D769E4B'),
}

model DeleteGatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteGatewayResponseBody(name='body'),
}

/**
 * @summary 删除网关
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteGatewayResponse
 */
async function deleteGatewayWithOptions(gatewayId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteGatewayResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteGateway',
    version = '2024-03-27',
    protocol = 'HTTPS',
    pathname = `/v1/gateways/${OpenApiUtil.getEncodeParam(gatewayId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除网关
 *
 * @return DeleteGatewayResponse
 */
async function deleteGateway(gatewayId: string): DeleteGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteGatewayWithOptions(gatewayId, headers, runtime);
}

model DeleteGatewayRouteResponseBody = {
  code?: string(name='code', example='Ok'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='5B626361-070A-56A7-B127-ADAC8F3655DB'),
}

model DeleteGatewayRouteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteGatewayRouteResponseBody(name='body'),
}

/**
 * @summary 创建网关路由
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteGatewayRouteResponse
 */
async function deleteGatewayRouteWithOptions(gatewayId: string, gatewayRouteId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteGatewayRouteResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteGatewayRoute',
    version = '2024-03-27',
    protocol = 'HTTPS',
    pathname = `/v1/gateways/${OpenApiUtil.getEncodeParam(gatewayId)}/http-routes/${OpenApiUtil.getEncodeParam(gatewayRouteId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建网关路由
 *
 * @return DeleteGatewayRouteResponse
 */
async function deleteGatewayRoute(gatewayId: string, gatewayRouteId: string): DeleteGatewayRouteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteGatewayRouteWithOptions(gatewayId, gatewayRouteId, headers, runtime);
}

model DeleteGatewayServiceResponseBody = {
  code?: string(name='code', example='Ok'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='393E2630-DBE7-5221-AB35-9E740675491A'),
}

model DeleteGatewayServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteGatewayServiceResponseBody(name='body'),
}

/**
 * @summary 删除服务
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteGatewayServiceResponse
 */
async function deleteGatewayServiceWithOptions(gatewayId: string, gatewayServiceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteGatewayServiceResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteGatewayService',
    version = '2024-03-27',
    protocol = 'HTTPS',
    pathname = `/v1/gateways/${OpenApiUtil.getEncodeParam(gatewayId)}/gateway-services/${OpenApiUtil.getEncodeParam(gatewayServiceId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除服务
 *
 * @return DeleteGatewayServiceResponse
 */
async function deleteGatewayService(gatewayId: string, gatewayServiceId: string): DeleteGatewayServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteGatewayServiceWithOptions(gatewayId, gatewayServiceId, headers, runtime);
}

model DeleteGatewayServiceVersionResponseBody = {
  code?: string(name='code', example='Ok'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='393E2630-DBE7-5221-AB35-9E740675491A'),
}

model DeleteGatewayServiceVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteGatewayServiceVersionResponseBody(name='body'),
}

/**
 * @summary 删除服务版本
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteGatewayServiceVersionResponse
 */
async function deleteGatewayServiceVersionWithOptions(gatewayId: string, gatewayServiceId: string, name: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteGatewayServiceVersionResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteGatewayServiceVersion',
    version = '2024-03-27',
    protocol = 'HTTPS',
    pathname = `/v1/gateways/${OpenApiUtil.getEncodeParam(gatewayId)}/gateway-services/${OpenApiUtil.getEncodeParam(gatewayServiceId)}/service-versions/${OpenApiUtil.getEncodeParam(name)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除服务版本
 *
 * @return DeleteGatewayServiceVersionResponse
 */
async function deleteGatewayServiceVersion(gatewayId: string, gatewayServiceId: string, name: string): DeleteGatewayServiceVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteGatewayServiceVersionWithOptions(gatewayId, gatewayServiceId, name, headers, runtime);
}

model DeleteHttpApiResponseBody = {
  code?: string(name='code', example='Ok'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='5B626361-070A-56A7-B127-ADAC8F3655DB'),
}

model DeleteHttpApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteHttpApiResponseBody(name='body'),
}

/**
 * @summary 删除HTTP API
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteHttpApiResponse
 */
async function deleteHttpApiWithOptions(httpApiId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteHttpApiResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteHttpApi',
    version = '2024-03-27',
    protocol = 'HTTPS',
    pathname = `/v1/http-apis/${OpenApiUtil.getEncodeParam(httpApiId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除HTTP API
 *
 * @return DeleteHttpApiResponse
 */
async function deleteHttpApi(httpApiId: string): DeleteHttpApiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteHttpApiWithOptions(httpApiId, headers, runtime);
}

model DeleteHttpApiOperationResponseBody = {
  code?: string(name='code', example='Ok'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='585657D2-1C20-5B8A-AF17-D727C6490BE4'),
}

model DeleteHttpApiOperationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteHttpApiOperationResponseBody(name='body'),
}

/**
 * @summary 删除Operation
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteHttpApiOperationResponse
 */
async function deleteHttpApiOperationWithOptions(httpApiId: string, operationId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteHttpApiOperationResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteHttpApiOperation',
    version = '2024-03-27',
    protocol = 'HTTPS',
    pathname = `/v1/http-apis/${OpenApiUtil.getEncodeParam(httpApiId)}/operations/${OpenApiUtil.getEncodeParam(operationId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除Operation
 *
 * @return DeleteHttpApiOperationResponse
 */
async function deleteHttpApiOperation(httpApiId: string, operationId: string): DeleteHttpApiOperationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteHttpApiOperationWithOptions(httpApiId, operationId, headers, runtime);
}

model DeleteServiceSourceResponseBody = {
  code?: string(name='code', example='Ok'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='393E2630-DBE7-5221-AB35-9E740675491A'),
}

model DeleteServiceSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteServiceSourceResponseBody(name='body'),
}

/**
 * @summary 删除服务来源
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteServiceSourceResponse
 */
async function deleteServiceSourceWithOptions(gatewayId: string, serviceSourceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteServiceSourceResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteServiceSource',
    version = '2024-03-27',
    protocol = 'HTTPS',
    pathname = `/v1/gateways/${OpenApiUtil.getEncodeParam(gatewayId)}/service-sources/${OpenApiUtil.getEncodeParam(serviceSourceId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除服务来源
 *
 * @return DeleteServiceSourceResponse
 */
async function deleteServiceSource(gatewayId: string, serviceSourceId: string): DeleteServiceSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteServiceSourceWithOptions(gatewayId, serviceSourceId, headers, runtime);
}

model GetDomainResponseBody = {
  code?: string(name='code', example='Ok'),
  data?: {
    algorithm?: string(name='algorithm', example='RSA'),
    caCertIndentifier?: string(name='caCertIndentifier', example='223576-cn-hangzhou'),
    certIndentifier?: string(name='certIndentifier', example='123576-cn-hangzhou'),
    certName?: string(name='certName', example='test-cert'),
    createFrom?: string(name='createFrom', example='Console'),
    createTimestamp?: long(name='createTimestamp', example='1719386834548'),
    default?: boolean(name='default', example='false'),
    domainId?: string(name='domainId', example='d-cq1m3utlhtgvgkv7sitg'),
    forceHttps?: boolean(name='forceHttps', example='false'),
    http2Option?: string(name='http2Option', example='Open'),
    issuer?: string(name='issuer', example='Alibaba'),
    name?: string(name='name', example='abc.com'),
    notAfterTimstamp?: long(name='notAfterTimstamp', example='1719386834548'),
    notBeforeTimestamp?: long(name='notBeforeTimestamp', example='1719386834548'),
    protocol?: string(name='protocol', example='HTTP'),
    sans?: string(name='sans', example='aliyun.com'),
    tlsMax?: string(name='tlsMax', example='TLS 1.3'),
    tlsMin?: string(name='tlsMin', example='TLS 1.0'),
    updatetimestamp?: long(name='updatetimestamp', example='1719386834548'),
  }(name='data'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='3ACFC7A7-45A9-58CF-B2D5-765B60254695'),
}

model GetDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDomainResponseBody(name='body'),
}

/**
 * @summary 查询域名详情
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDomainResponse
 */
async function getDomainWithOptions(domainId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetDomainResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetDomain',
    version = '2024-03-27',
    protocol = 'HTTPS',
    pathname = `/v1/domains/${OpenApiUtil.getEncodeParam(domainId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询域名详情
 *
 * @return GetDomainResponse
 */
async function getDomain(domainId: string): GetDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getDomainWithOptions(domainId, headers, runtime);
}

model GetEnvironmentResponseBody = {
  code?: string(name='code', example='Ok'),
  data?: {
    alias?: string(name='alias'),
    createTimestamp?: long(name='createTimestamp', example='1719386834548'),
    default?: boolean(name='default', example='true'),
    description?: string(name='description'),
    environmentId?: string(name='environmentId', example='env-cq7l5s5lhtgi6qasrdc0'),
    gatewayInfo?: GatewayInfo(name='gatewayInfo'),
    name?: string(name='name', example='test'),
    subDomainInfos?: [
      SubDomainInfo
    ](name='subDomainInfos'),
    updateTimestamp?: long(name='updateTimestamp', example='1719386834548'),
  }(name='data'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='3F8EE674-BB08-5E92-BE6F-E4756A748B0F'),
}

model GetEnvironmentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEnvironmentResponseBody(name='body'),
}

/**
 * @summary GetEnvironment
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetEnvironmentResponse
 */
async function getEnvironmentWithOptions(environmentId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetEnvironmentResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetEnvironment',
    version = '2024-03-27',
    protocol = 'HTTPS',
    pathname = `/v1/environments/${OpenApiUtil.getEncodeParam(environmentId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary GetEnvironment
 *
 * @return GetEnvironmentResponse
 */
async function getEnvironment(environmentId: string): GetEnvironmentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getEnvironmentWithOptions(environmentId, headers, runtime);
}

model GetGatewayResponseBody = {
  code?: string(name='code', example='Ok'),
  data?: {
    chargeType?: string(name='chargeType', example='POSTPAY'),
    createFrom?: string(name='createFrom', example='Console'),
    createTimestamp?: long(name='createTimestamp', example='1719386834548'),
    environments?: [ 
      {
        alias?: string(name='alias'),
        environmentId?: string(name='environmentId', example='env-cp9uhudlht***'),
        name?: string(name='name', example='default-gw-cp9ugg5***'),
      }
    ](name='environments'),
    expireTimestamp?: long(name='expireTimestamp', example='1719386834548'),
    gatewayId?: string(name='gatewayId', example='gw-cq2vundlhtg***'),
    loadBalancers?: [ 
      {
        address?: string(name='address', example='nlb-xoh3pghr***.cn-hangzhou.nlb.aliyuncs.com'),
        addressIpVersion?: string(name='addressIpVersion', example='ipv4'),
        addressType?: string(name='addressType', example='Internet'),
        gatewayDefault?: boolean(name='gatewayDefault', example='true'),
        loadBalancerId?: string(name='loadBalancerId', example='nlb-xoh3pghru7c***'),
        mode?: string(name='mode', example='Managed'),
        ports?: [ 
          {
            port?: int32(name='port', example='443'),
            protocol?: string(name='protocol', example='TCP'),
          }
        ](name='ports'),
        status?: string(name='status', example='Ready'),
        type?: string(name='type', example='NLB'),
      }
    ](name='loadBalancers'),
    name?: string(name='name', example='itemcenter-gateway'),
    replicas?: string(name='replicas', example='2'),
    securityGroup?: {
      name?: string(name='name', example='APIG-sg-gw-cq7ke5ll***'),
      securityGroupId?: string(name='securityGroupId', example='sg-bp16tafq9***'),
    }(name='securityGroup'),
    spec?: string(name='spec', example='apigw.small.x1'),
    status?: string(name='status', example='Running'),
    targetVersion?: string(name='targetVersion', example='2.0.2'),
    updateTimestamp?: long(name='updateTimestamp', example='1719386834548'),
    vSwitch?: {
      name?: string(name='name'),
      vSwitchId?: string(name='vSwitchId', example='vsw-bp1c7ggkj***'),
    }(name='vSwitch'),
    version?: string(name='version', example='2.0.2'),
    vpc?: {
      name?: string(name='name'),
      vpcId?: string(name='vpcId', example='vpc-bp1llj52lvj6xc***'),
    }(name='vpc'),
    zones?: [ 
      {
        name?: string(name='name'),
        vSwitch?: {
          name?: string(name='name'),
          vSwitchId?: string(name='vSwitchId', example='vsw-bp1c7ggkj***'),
        }(name='vSwitch'),
        zoneId?: string(name='zoneId', example='cn-hangzhou-e'),
      }
    ](name='zones'),
  }(name='data'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='0F138FFC-6E2B-56C1-9BAB-A67462E339D1'),
}

model GetGatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetGatewayResponseBody(name='body'),
}

/**
 * @summary 获取网关实例详情
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetGatewayResponse
 */
async function getGatewayWithOptions(gatewayId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetGatewayResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetGateway',
    version = '2024-03-27',
    protocol = 'HTTPS',
    pathname = `/v1/gateways/${OpenApiUtil.getEncodeParam(gatewayId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取网关实例详情
 *
 * @return GetGatewayResponse
 */
async function getGateway(gatewayId: string): GetGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getGatewayWithOptions(gatewayId, headers, runtime);
}

model GetGatewayRouteResponseBody = {
  code?: string(name='code', example='Ok'),
  data?: {
    backend?: GatewayRouteBackend(name='backend'),
    createTimestamp?: long(name='createTimestamp', example='1719386834548'),
    description?: string(name='description'),
    domainInfo?: GatewayRouteDomainInfo(name='domainInfo'),
    gatewayRouteId?: string(name='gatewayRouteId', example='gr-cptf6e7d5l***'),
    match?: HttpRouteMatch(name='match'),
    name?: string(name='name', example='itemcenter-pre-route'),
    status?: string(name='status', example='NotPublished'),
    updateTimestamp?: long(name='updateTimestamp', example='1719386834548'),
  }(name='data'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='A1994B10-C6A8-58FA-8347-6A08B0D4EFDE'),
}

model GetGatewayRouteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetGatewayRouteResponseBody(name='body'),
}

/**
 * @summary 创建网关路由
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetGatewayRouteResponse
 */
async function getGatewayRouteWithOptions(gatewayId: string, gatewayRouteId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetGatewayRouteResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetGatewayRoute',
    version = '2024-03-27',
    protocol = 'HTTPS',
    pathname = `/v1/gateways/${OpenApiUtil.getEncodeParam(gatewayId)}/http-routes/${OpenApiUtil.getEncodeParam(gatewayRouteId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建网关路由
 *
 * @return GetGatewayRouteResponse
 */
async function getGatewayRoute(gatewayId: string, gatewayRouteId: string): GetGatewayRouteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getGatewayRouteWithOptions(gatewayId, gatewayRouteId, headers, runtime);
}

model GetGatewayServiceResponseBody = {
  code?: string(name='code', example='Ok'),
  data?: GatewayService(name='data'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='393E2630-DBE7-5221-AB35-9E740675491A'),
}

model GetGatewayServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetGatewayServiceResponseBody(name='body'),
}

/**
 * @summary 查询服务
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetGatewayServiceResponse
 */
async function getGatewayServiceWithOptions(gatewayId: string, gatewayServiceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetGatewayServiceResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetGatewayService',
    version = '2024-03-27',
    protocol = 'HTTPS',
    pathname = `/v1/gateways/${OpenApiUtil.getEncodeParam(gatewayId)}/gateway-services/${OpenApiUtil.getEncodeParam(gatewayServiceId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询服务
 *
 * @return GetGatewayServiceResponse
 */
async function getGatewayService(gatewayId: string, gatewayServiceId: string): GetGatewayServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getGatewayServiceWithOptions(gatewayId, gatewayServiceId, headers, runtime);
}

model GetHttpApiResponseBody = {
  code?: string(name='code', example='Ok'),
  data?: HttpApiApiInfo(name='data'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='8FA9BB94-915B-5299-A694-49FCC7F5DD00'),
}

model GetHttpApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetHttpApiResponseBody(name='body'),
}

/**
 * @summary 读取HttpApi
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetHttpApiResponse
 */
async function getHttpApiWithOptions(httpApiId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetHttpApiResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetHttpApi',
    version = '2024-03-27',
    protocol = 'HTTPS',
    pathname = `/v1/http-apis/${OpenApiUtil.getEncodeParam(httpApiId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 读取HttpApi
 *
 * @return GetHttpApiResponse
 */
async function getHttpApi(httpApiId: string): GetHttpApiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getHttpApiWithOptions(httpApiId, headers, runtime);
}

model GetHttpApiOperationResponseBody = {
  code?: string(name='code', example='Ok'),
  data?: HttpApiOperationInfo(name='data'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='B725275B-50C6-5A49-A9FD-F0332FCB3351'),
}

model GetHttpApiOperationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetHttpApiOperationResponseBody(name='body'),
}

/**
 * @summary 读取Operation
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetHttpApiOperationResponse
 */
async function getHttpApiOperationWithOptions(httpApiId: string, operationId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetHttpApiOperationResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetHttpApiOperation',
    version = '2024-03-27',
    protocol = 'HTTPS',
    pathname = `/v1/http-apis/${OpenApiUtil.getEncodeParam(httpApiId)}/operations/${OpenApiUtil.getEncodeParam(operationId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 读取Operation
 *
 * @return GetHttpApiOperationResponse
 */
async function getHttpApiOperation(httpApiId: string, operationId: string): GetHttpApiOperationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getHttpApiOperationWithOptions(httpApiId, operationId, headers, runtime);
}

model ListDomainsRequest {
  nameLike?: string(name='nameLike', example='test'),
  pageNumber?: int32(name='pageNumber', example='1'),
  pageSize?: int32(name='pageSize', example='10'),
}

model ListDomainsResponseBody = {
  code?: string(name='code', example='Ok'),
  data?: {
    items?: [
      DomainInfo
    ](name='items'),
    pageNumber?: int32(name='pageNumber', example='1'),
    pageSize?: int32(name='pageSize', example='10'),
    totalSize?: int32(name='totalSize', example='9'),
  }(name='data'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='C61E30D3-579A-5B43-994E-31E02EDC9129'),
}

model ListDomainsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDomainsResponseBody(name='body'),
}

/**
 * @summary ListDomains
 *
 * @param request ListDomainsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDomainsResponse
 */
async function listDomainsWithOptions(request: ListDomainsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDomainsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.nameLike)) {
    query['nameLike'] = request.nameLike;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDomains',
    version = '2024-03-27',
    protocol = 'HTTPS',
    pathname = `/v1/domains`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary ListDomains
 *
 * @param request ListDomainsRequest
 * @return ListDomainsResponse
 */
async function listDomains(request: ListDomainsRequest): ListDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listDomainsWithOptions(request, headers, runtime);
}

model ListEnvironmentsRequest {
  aliasLike?: string(name='aliasLike'),
  gatewayId?: string(name='gatewayId', example='gw-cptv6ktlhtgnqr73h8d1'),
  gatewayNameLike?: string(name='gatewayNameLike', example='test-gw'),
  nameLike?: string(name='nameLike', example='test'),
  pageNumber?: int32(name='pageNumber', example='1'),
  pageSize?: int32(name='pageSize', example='10'),
}

model ListEnvironmentsResponseBody = {
  code?: string(name='code', example='Ok'),
  data?: {
    items?: [
      EnvironmentInfo
    ](name='items'),
    pageNumber?: int32(name='pageNumber', example='1'),
    pageSize?: int32(name='pageSize', example='10'),
    totalSize?: int32(name='totalSize', example='25'),
  }(name='data'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='CE857A85-251D-5018-8103-A38957D71E20'),
}

model ListEnvironmentsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEnvironmentsResponseBody(name='body'),
}

/**
 * @summary ListEnvironments
 *
 * @param request ListEnvironmentsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListEnvironmentsResponse
 */
async function listEnvironmentsWithOptions(request: ListEnvironmentsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListEnvironmentsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.aliasLike)) {
    query['aliasLike'] = request.aliasLike;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['gatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.gatewayNameLike)) {
    query['gatewayNameLike'] = request.gatewayNameLike;
  }
  if (!Util.isUnset(request.nameLike)) {
    query['nameLike'] = request.nameLike;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListEnvironments',
    version = '2024-03-27',
    protocol = 'HTTPS',
    pathname = `/v1/environments`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary ListEnvironments
 *
 * @param request ListEnvironmentsRequest
 * @return ListEnvironmentsResponse
 */
async function listEnvironments(request: ListEnvironmentsRequest): ListEnvironmentsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listEnvironmentsWithOptions(request, headers, runtime);
}

model ListGatewayRoutesRequest {
  keyword?: string(name='keyword', example='itemcenter'),
  name?: string(name='name', example='pre-itemcenter-router'),
  pageNumber?: int32(name='pageNumber', example='1'),
  pageSize?: int32(name='pageSize', example='10'),
  path?: string(name='path', example='/user'),
  status?: string(name='status', example='Published'),
}

model ListGatewayRoutesResponseBody = {
  code?: string(name='code', example='Ok'),
  data?: {
    items?: [ 
      {
        backend?: GatewayRouteBackend(name='backend'),
        createTimestamp?: long(name='createTimestamp', example='1719386834548'),
        description?: string(name='description'),
        domainInfo?: GatewayRouteDomainInfo(name='domainInfo'),
        gatewayRouteId?: string(name='gatewayRouteId', example='gr-cqa8oddlhtg***'),
        match?: HttpRouteMatch(name='match'),
        name?: string(name='name', example='pre-itemcenter-router'),
        status?: string(name='status', example='NotPublished'),
        updateTimestamp?: long(name='updateTimestamp', example='1719386834548'),
      }
    ](name='items'),
    pageNumber?: int32(name='pageNumber', example='1'),
    pageSize?: int32(name='pageSize', example='10'),
    totalSize?: int32(name='totalSize', example='2'),
  }(name='data'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='585657D2-1C20-5B8A-AF17-D727C6490BE4'),
}

model ListGatewayRoutesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListGatewayRoutesResponseBody(name='body'),
}

/**
 * @summary 创建网关路由
 *
 * @param request ListGatewayRoutesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListGatewayRoutesResponse
 */
async function listGatewayRoutesWithOptions(gatewayId: string, request: ListGatewayRoutesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListGatewayRoutesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.keyword)) {
    query['keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.name)) {
    query['name'] = request.name;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.path)) {
    query['path'] = request.path;
  }
  if (!Util.isUnset(request.status)) {
    query['status'] = request.status;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListGatewayRoutes',
    version = '2024-03-27',
    protocol = 'HTTPS',
    pathname = `/v1/gateways/${OpenApiUtil.getEncodeParam(gatewayId)}/http-routes`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建网关路由
 *
 * @param request ListGatewayRoutesRequest
 * @return ListGatewayRoutesResponse
 */
async function listGatewayRoutes(gatewayId: string, request: ListGatewayRoutesRequest): ListGatewayRoutesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listGatewayRoutesWithOptions(gatewayId, request, headers, runtime);
}

model ListGatewayServicesRequest {
  name?: string(name='name', example='itemcenter-provider'),
  pageNumber?: int32(name='pageNumber', example='1'),
  pageSize?: int32(name='pageSize', example='10'),
  sourceType?: string(name='sourceType', example='MSE_NACOS'),
}

model ListGatewayServicesResponseBody = {
  code?: string(name='code', example='Ok'),
  data?: {
    items?: [
      GatewayService
    ](name='items'),
    pageNumber?: int32(name='pageNumber', example='1'),
    pageSize?: int32(name='pageSize', example='10'),
    totalSize?: long(name='totalSize', example='6'),
  }(name='data'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='8FA9BB94-915B-5299-A694-49FCC7F5DD00'),
}

model ListGatewayServicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListGatewayServicesResponseBody(name='body'),
}

/**
 * @summary 查询服务列表
 *
 * @param request ListGatewayServicesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListGatewayServicesResponse
 */
async function listGatewayServicesWithOptions(gatewayId: string, request: ListGatewayServicesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListGatewayServicesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.name)) {
    query['name'] = request.name;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['sourceType'] = request.sourceType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListGatewayServices',
    version = '2024-03-27',
    protocol = 'HTTPS',
    pathname = `/v1/gateways/${OpenApiUtil.getEncodeParam(gatewayId)}/gateway-services`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询服务列表
 *
 * @param request ListGatewayServicesRequest
 * @return ListGatewayServicesResponse
 */
async function listGatewayServices(gatewayId: string, request: ListGatewayServicesRequest): ListGatewayServicesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listGatewayServicesWithOptions(gatewayId, request, headers, runtime);
}

model ListGatewaysRequest {
  gatewayId?: string(name='gatewayId', example='gw-cpv4sqdl****'),
  keyword?: string(name='keyword', example='dev'),
  name?: string(name='name', example='itemcenter-gateway'),
  pageNumber?: int32(name='pageNumber', example='1'),
  pageSize?: int32(name='pageSize', example='10'),
}

model ListGatewaysResponseBody = {
  code?: string(name='code', example='Ok'),
  data?: {
    items?: [ 
      {
        chargeType?: string(name='chargeType', example='POSTPAY'),
        createFrom?: string(name='createFrom', example='Console'),
        createTimestamp?: long(name='createTimestamp', example='1719386834548'),
        expireTimestamp?: long(name='expireTimestamp', example='172086834548'),
        gatewayId?: string(name='gatewayId', example='gw-cpv54p5***'),
        loadBalancers?: [ 
          {
            address?: string(name='address', example='nlb-xoh3pghr***.cn-hangzhou.nlb.aliyuncs.com'),
            addressIpVersion?: string(name='addressIpVersion', example='ipv4'),
            addressType?: string(name='addressType', example='Internet'),
            gatewayDefault?: boolean(name='gatewayDefault', example='true'),
            loadBalancerId?: string(name='loadBalancerId', example='nlb-xqwioje1c91r***'),
            mode?: string(name='mode', example='Managed'),
            ports?: [ 
              {
                port?: int32(name='port', example='443'),
                protocol?: string(name='protocol', example='TCP'),
              }
            ](name='ports'),
            status?: string(name='status', example='Ready'),
            type?: string(name='type', example='NLB'),
          }
        ](name='loadBalancers'),
        name?: string(name='name', example='itemcenter-gateway'),
        replicas?: string(name='replicas', example='2'),
        spec?: string(name='spec', example='apigw.small.x1'),
        status?: string(name='status', example='Running'),
        targetVersion?: string(name='targetVersion', example='2.0.2'),
        updateTimestamp?: long(name='updateTimestamp', example='1719386834548'),
        version?: string(name='version', example='2.0.2'),
      }
    ](name='items'),
    pageNumber?: int32(name='pageNumber', example='1'),
    pageSize?: int32(name='pageSize', example='10'),
    totalSize?: long(name='totalSize', example='6'),
  }(name='data'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='5B626361-070A-56A7-B127-ADAC8F3655DB'),
}

model ListGatewaysResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListGatewaysResponseBody(name='body'),
}

/**
 * @summary 获取已经创建的云原生网关列表
 *
 * @param request ListGatewaysRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListGatewaysResponse
 */
async function listGatewaysWithOptions(request: ListGatewaysRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListGatewaysResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.gatewayId)) {
    query['gatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.keyword)) {
    query['keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.name)) {
    query['name'] = request.name;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListGateways',
    version = '2024-03-27',
    protocol = 'HTTPS',
    pathname = `/v1/gateways`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取已经创建的云原生网关列表
 *
 * @param request ListGatewaysRequest
 * @return ListGatewaysResponse
 */
async function listGateways(request: ListGatewaysRequest): ListGatewaysResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listGatewaysWithOptions(request, headers, runtime);
}

model ListHttpApiOperationsRequest {
  method?: string(name='method', example='GET'),
  nameLike?: string(name='nameLike', example='GetUser'),
  pageNumber?: int32(name='pageNumber', example='1'),
  pageSize?: int32(name='pageSize', example='10'),
  pathLike?: string(name='pathLike', example='/v1'),
}

model ListHttpApiOperationsResponseBody = {
  code?: string(name='code', example='Ok'),
  data?: {
    items?: [
      HttpApiOperationInfo
    ](name='items'),
    pageNumber?: int32(name='pageNumber', example='1'),
    pageSize?: int32(name='pageSize', example='10'),
    totalSize?: int32(name='totalSize', example='10'),
  }(name='data'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='585657D2-1C20-5B8A-AF17-D727C6490BE4'),
}

model ListHttpApiOperationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHttpApiOperationsResponseBody(name='body'),
}

/**
 * @summary 列举Operation
 *
 * @param request ListHttpApiOperationsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListHttpApiOperationsResponse
 */
async function listHttpApiOperationsWithOptions(httpApiId: string, request: ListHttpApiOperationsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListHttpApiOperationsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.method)) {
    query['method'] = request.method;
  }
  if (!Util.isUnset(request.nameLike)) {
    query['nameLike'] = request.nameLike;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.pathLike)) {
    query['pathLike'] = request.pathLike;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListHttpApiOperations',
    version = '2024-03-27',
    protocol = 'HTTPS',
    pathname = `/v1/http-apis/${OpenApiUtil.getEncodeParam(httpApiId)}/operations`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 列举Operation
 *
 * @param request ListHttpApiOperationsRequest
 * @return ListHttpApiOperationsResponse
 */
async function listHttpApiOperations(httpApiId: string, request: ListHttpApiOperationsRequest): ListHttpApiOperationsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listHttpApiOperationsWithOptions(httpApiId, request, headers, runtime);
}

model ListHttpApisRequest {
  keyword?: string(name='keyword', example='test-'),
  pageNumber?: int32(name='pageNumber', example='1'),
  pageSize?: int32(name='pageSize', example='10'),
}

model ListHttpApisResponseBody = {
  code?: string(name='code', example='Ok'),
  data?: {
    items?: [
      HttpApiInfoByName
    ](name='items'),
    pageNumber?: int32(name='pageNumber', example='1'),
    pageSize?: int32(name='pageSize', example='10'),
    totalSize?: int32(name='totalSize', example='10'),
  }(name='data'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='585657D2-1C20-5B8A-AF17-D727C6490BE4'),
}

model ListHttpApisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHttpApisResponseBody(name='body'),
}

/**
 * @summary 列举HTTP API
 *
 * @param request ListHttpApisRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListHttpApisResponse
 */
async function listHttpApisWithOptions(request: ListHttpApisRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListHttpApisResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.keyword)) {
    query['keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListHttpApis',
    version = '2024-03-27',
    protocol = 'HTTPS',
    pathname = `/v1/http-apis`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 列举HTTP API
 *
 * @param request ListHttpApisRequest
 * @return ListHttpApisResponse
 */
async function listHttpApis(request: ListHttpApisRequest): ListHttpApisResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listHttpApisWithOptions(request, headers, runtime);
}

model OfflineGatewayRouteResponseBody = {
  code?: string(name='code', example='Ok'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='585657D2-1C20-5B8A-AF17-D727C6490BE4'),
}

model OfflineGatewayRouteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OfflineGatewayRouteResponseBody(name='body'),
}

/**
 * @summary 发布路由
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return OfflineGatewayRouteResponse
 */
async function offlineGatewayRouteWithOptions(gatewayId: string, gatewayRouteId: string, headers: map[string]string, runtime: Util.RuntimeOptions): OfflineGatewayRouteResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'OfflineGatewayRoute',
    version = '2024-03-27',
    protocol = 'HTTPS',
    pathname = `/v1/gateways/${OpenApiUtil.getEncodeParam(gatewayId)}/http-routes/${OpenApiUtil.getEncodeParam(gatewayRouteId)}/offline`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 发布路由
 *
 * @return OfflineGatewayRouteResponse
 */
async function offlineGatewayRoute(gatewayId: string, gatewayRouteId: string): OfflineGatewayRouteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return offlineGatewayRouteWithOptions(gatewayId, gatewayRouteId, headers, runtime);
}

model OfflineHttpApiRequest {
  environmentId?: string(name='environmentId', description='This parameter is required.', example='env-xxx'),
}

model OfflineHttpApiResponseBody = {
  code?: string(name='code', example='Ok'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='53DE779E-422D-56EB-B84C-62D75CA5E8DD'),
}

model OfflineHttpApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OfflineHttpApiResponseBody(name='body'),
}

/**
 * @summary 下线已发布的HTTP API
 *
 * @param request OfflineHttpApiRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return OfflineHttpApiResponse
 */
async function offlineHttpApiWithOptions(httpApiId: string, request: OfflineHttpApiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OfflineHttpApiResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.environmentId)) {
    body['environmentId'] = request.environmentId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'OfflineHttpApi',
    version = '2024-03-27',
    protocol = 'HTTPS',
    pathname = `/v1/http-apis/${OpenApiUtil.getEncodeParam(httpApiId)}/offline`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 下线已发布的HTTP API
 *
 * @param request OfflineHttpApiRequest
 * @return OfflineHttpApiResponse
 */
async function offlineHttpApi(httpApiId: string, request: OfflineHttpApiRequest): OfflineHttpApiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return offlineHttpApiWithOptions(httpApiId, request, headers, runtime);
}

model PublishGatewayRouteResponseBody = {
  code?: string(name='code', example='Ok'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='043360DA-ED3B-5386-9B7A-D94DECF99A30'),
}

model PublishGatewayRouteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PublishGatewayRouteResponseBody(name='body'),
}

/**
 * @summary 发布路由
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return PublishGatewayRouteResponse
 */
async function publishGatewayRouteWithOptions(gatewayId: string, gatewayRouteId: string, headers: map[string]string, runtime: Util.RuntimeOptions): PublishGatewayRouteResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'PublishGatewayRoute',
    version = '2024-03-27',
    protocol = 'HTTPS',
    pathname = `/v1/gateways/${OpenApiUtil.getEncodeParam(gatewayId)}/http-routes/${OpenApiUtil.getEncodeParam(gatewayRouteId)}/publish`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 发布路由
 *
 * @return PublishGatewayRouteResponse
 */
async function publishGatewayRoute(gatewayId: string, gatewayRouteId: string): PublishGatewayRouteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return publishGatewayRouteWithOptions(gatewayId, gatewayRouteId, headers, runtime);
}

model PublishHttpApiRequest {
  allowOverwrite?: boolean(name='allowOverwrite', example='true'),
  description?: string(name='description'),
  environment?: {
    backendScene?: string(name='backendScene', example='SingleService'),
    backendType?: string(name='backendType', example='Service'),
    cloudProductConfig?: {
      cloudProductType?: string(name='cloudProductType', example='FC'),
      containerServiceConfigs?: [ 
        {
          match?: HttpApiBackendMatchConditions(name='match'),
          name?: string(name='name', example='test-service'),
          namespace?: string(name='namespace', example='default'),
          port?: int32(name='port', example='8080'),
          protocol?: string(name='protocol', example='HTTP'),
          weight?: int32(name='weight', example='100'),
        }
      ](name='containerServiceConfigs'),
      functionConfigs?: [ 
        {
          match?: HttpApiBackendMatchConditions(name='match'),
          name?: string(name='name', example='fc-test'),
          quanlifer?: string(name='quanlifer', example='LATEST'),
          weight?: int32(name='weight', example='100'),
        }
      ](name='functionConfigs'),
      mseNacosConfigs?: [ 
        {
          groupName?: string(name='groupName', example='DEFAULT_GROUP'),
          match?: HttpApiBackendMatchConditions(name='match'),
          name?: string(name='name', example='provider'),
          namespace?: string(name='namespace', example='public'),
          weight?: string(name='weight', example='100'),
        }
      ](name='mseNacosConfigs'),
    }(name='cloudProductConfig'),
    customDomainIds?: [ string ](name='customDomainIds'),
    dnsConfigs?: [ 
      {
        dnsList?: [ string ](name='dnsList'),
        match?: HttpApiBackendMatchConditions(name='match'),
        weight?: int32(name='weight', example='100'),
      }
    ](name='dnsConfigs'),
    environmentId?: string(name='environmentId', example='env-xxx'),
    serviceConfigs?: [ 
      {
        gatewayServiceId?: string(name='gatewayServiceId', example='gs-xxx'),
        match?: HttpApiBackendMatchConditions(name='match'),
        port?: int32(name='port', example='8080'),
        protocol?: string(name='protocol', example='HTTP'),
        version?: string(name='version', example='v1'),
        weight?: int32(name='weight', example='100'),
      }
    ](name='serviceConfigs'),
    vipConfigs?: [ 
      {
        endpoints?: [ string ](name='endpoints'),
        match?: HttpApiBackendMatchConditions(name='match'),
        weight?: int32(name='weight', example='100'),
      }
    ](name='vipConfigs'),
  }(name='environment'),
  revisionId?: string(name='revisionId', example='apr-xxx'),
}

model PublishHttpApiResponseBody = {
  code?: string(name='code', example='Ok'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='4BACB05C-3FE2-588F-9148-700C5C026B74'),
}

model PublishHttpApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PublishHttpApiResponseBody(name='body'),
}

/**
 * @summary 发布HTTP API
 *
 * @param request PublishHttpApiRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return PublishHttpApiResponse
 */
async function publishHttpApiWithOptions(httpApiId: string, request: PublishHttpApiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PublishHttpApiResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.allowOverwrite)) {
    body['allowOverwrite'] = request.allowOverwrite;
  }
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.environment)) {
    body['environment'] = request.environment;
  }
  if (!Util.isUnset(request.revisionId)) {
    body['revisionId'] = request.revisionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PublishHttpApi',
    version = '2024-03-27',
    protocol = 'HTTPS',
    pathname = `/v1/http-apis/${OpenApiUtil.getEncodeParam(httpApiId)}/publish`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 发布HTTP API
 *
 * @param request PublishHttpApiRequest
 * @return PublishHttpApiResponse
 */
async function publishHttpApi(httpApiId: string, request: PublishHttpApiRequest): PublishHttpApiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return publishHttpApiWithOptions(httpApiId, request, headers, runtime);
}

model UpdateDomainRequest {
  caCertIndentifier?: string(name='caCertIndentifier', example='123455-cn-hangzhou'),
  certIndentifier?: string(name='certIndentifier', example='123458-cn-hangzhou'),
  forceHttps?: boolean(name='forceHttps', example='false'),
  http2Option?: string(name='http2Option', example='Open'),
  protocol?: string(name='protocol', description='This parameter is required.', example='HTTP'),
  tlsMax?: string(name='tlsMax', example='TLS 1.3'),
  tlsMin?: string(name='tlsMin', example='TLS 1.0'),
}

model UpdateDomainResponseBody = {
  code?: string(name='code', example='Ok'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='4BACB05C-3FE2-588F-9148-700C5C026B74'),
}

model UpdateDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDomainResponseBody(name='body'),
}

/**
 * @summary UpdateDomain
 *
 * @param request UpdateDomainRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDomainResponse
 */
async function updateDomainWithOptions(domainId: string, request: UpdateDomainRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDomainResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.caCertIndentifier)) {
    body['caCertIndentifier'] = request.caCertIndentifier;
  }
  if (!Util.isUnset(request.certIndentifier)) {
    body['certIndentifier'] = request.certIndentifier;
  }
  if (!Util.isUnset(request.forceHttps)) {
    body['forceHttps'] = request.forceHttps;
  }
  if (!Util.isUnset(request.http2Option)) {
    body['http2Option'] = request.http2Option;
  }
  if (!Util.isUnset(request.protocol)) {
    body['protocol'] = request.protocol;
  }
  if (!Util.isUnset(request.tlsMax)) {
    body['tlsMax'] = request.tlsMax;
  }
  if (!Util.isUnset(request.tlsMin)) {
    body['tlsMin'] = request.tlsMin;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDomain',
    version = '2024-03-27',
    protocol = 'HTTPS',
    pathname = `/v1/domains/${OpenApiUtil.getEncodeParam(domainId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary UpdateDomain
 *
 * @param request UpdateDomainRequest
 * @return UpdateDomainResponse
 */
async function updateDomain(domainId: string, request: UpdateDomainRequest): UpdateDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateDomainWithOptions(domainId, request, headers, runtime);
}

model UpdateEnvironmentRequest {
  alias?: string(name='alias', description='This parameter is required.'),
  description?: string(name='description'),
}

model UpdateEnvironmentResponseBody = {
  code?: string(name='code', example='Ok'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='52FB803B-3CD8-5FF8-AAE9-C2B841F6A483'),
}

model UpdateEnvironmentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateEnvironmentResponseBody(name='body'),
}

/**
 * @summary UpdateEnvironment
 *
 * @param request UpdateEnvironmentRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateEnvironmentResponse
 */
async function updateEnvironmentWithOptions(environmentId: string, request: UpdateEnvironmentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateEnvironmentResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alias)) {
    body['alias'] = request.alias;
  }
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateEnvironment',
    version = '2024-03-27',
    protocol = 'HTTPS',
    pathname = `/v1/environments/${OpenApiUtil.getEncodeParam(environmentId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary UpdateEnvironment
 *
 * @param request UpdateEnvironmentRequest
 * @return UpdateEnvironmentResponse
 */
async function updateEnvironment(environmentId: string, request: UpdateEnvironmentRequest): UpdateEnvironmentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateEnvironmentWithOptions(environmentId, request, headers, runtime);
}

model UpdateGatewayRouteRequest {
  backendConfig?: GatewayRouteBackendConfig(name='backendConfig'),
  description?: string(name='description'),
  domainConfig?: GatewayRouteDomainConfig(name='domainConfig'),
  match?: HttpRouteMatch(name='match'),
}

model UpdateGatewayRouteResponseBody = {
  code?: string(name='code', example='Ok'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='B725275B-50C6-5A49-A9FD-F0332FCB3351'),
}

model UpdateGatewayRouteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateGatewayRouteResponseBody(name='body'),
}

/**
 * @summary 创建网关路由
 *
 * @param request UpdateGatewayRouteRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateGatewayRouteResponse
 */
async function updateGatewayRouteWithOptions(gatewayId: string, gatewayRouteId: string, request: UpdateGatewayRouteRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateGatewayRouteResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.backendConfig)) {
    body['backendConfig'] = request.backendConfig;
  }
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.domainConfig)) {
    body['domainConfig'] = request.domainConfig;
  }
  if (!Util.isUnset(request.match)) {
    body['match'] = request.match;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateGatewayRoute',
    version = '2024-03-27',
    protocol = 'HTTPS',
    pathname = `/v1/gateways/${OpenApiUtil.getEncodeParam(gatewayId)}/http-routes/${OpenApiUtil.getEncodeParam(gatewayRouteId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建网关路由
 *
 * @param request UpdateGatewayRouteRequest
 * @return UpdateGatewayRouteResponse
 */
async function updateGatewayRoute(gatewayId: string, gatewayRouteId: string, request: UpdateGatewayRouteRequest): UpdateGatewayRouteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateGatewayRouteWithOptions(gatewayId, gatewayRouteId, request, headers, runtime);
}

model UpdateGatewayServiceRequest {
  addresses?: [ string ](name='addresses'),
  port?: int32(name='port', example='8080'),
}

model UpdateGatewayServiceResponseBody = {
  code?: string(name='code', example='Ok'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='585657D2-1C20-5B8A-AF17-D727C6490BE4'),
}

model UpdateGatewayServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateGatewayServiceResponseBody(name='body'),
}

/**
 * @summary 更新服务
 *
 * @param request UpdateGatewayServiceRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateGatewayServiceResponse
 */
async function updateGatewayServiceWithOptions(gatewayId: string, gatewayServiceId: string, request: UpdateGatewayServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateGatewayServiceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.addresses)) {
    body['addresses'] = request.addresses;
  }
  if (!Util.isUnset(request.port)) {
    body['port'] = request.port;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateGatewayService',
    version = '2024-03-27',
    protocol = 'HTTPS',
    pathname = `/v1/gateways/${OpenApiUtil.getEncodeParam(gatewayId)}/gateway-services/${OpenApiUtil.getEncodeParam(gatewayServiceId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新服务
 *
 * @param request UpdateGatewayServiceRequest
 * @return UpdateGatewayServiceResponse
 */
async function updateGatewayService(gatewayId: string, gatewayServiceId: string, request: UpdateGatewayServiceRequest): UpdateGatewayServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateGatewayServiceWithOptions(gatewayId, gatewayServiceId, request, headers, runtime);
}

model UpdateGatewayServiceVersionRequest {
  labels?: [ 
    {
      key?: string(name='key', example='topology.kubernetes.io/zone'),
      value?: string(name='value', example='cn-hangzhou-k'),
    }
  ](name='labels'),
}

model UpdateGatewayServiceVersionResponseBody = {
  code?: string(name='code', example='Ok'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='A1994B10-C6A8-58FA-8347-6A08B0D4EFDE'),
}

model UpdateGatewayServiceVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateGatewayServiceVersionResponseBody(name='body'),
}

/**
 * @summary 更新服务版本
 *
 * @param request UpdateGatewayServiceVersionRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateGatewayServiceVersionResponse
 */
async function updateGatewayServiceVersionWithOptions(gatewayId: string, gatewayServiceId: string, name: string, request: UpdateGatewayServiceVersionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateGatewayServiceVersionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.labels)) {
    body['labels'] = request.labels;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateGatewayServiceVersion',
    version = '2024-03-27',
    protocol = 'HTTPS',
    pathname = `/v1/gateways/${OpenApiUtil.getEncodeParam(gatewayId)}/gateway-services/${OpenApiUtil.getEncodeParam(gatewayServiceId)}/service-versions/${OpenApiUtil.getEncodeParam(name)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新服务版本
 *
 * @param request UpdateGatewayServiceVersionRequest
 * @return UpdateGatewayServiceVersionResponse
 */
async function updateGatewayServiceVersion(gatewayId: string, gatewayServiceId: string, name: string, request: UpdateGatewayServiceVersionRequest): UpdateGatewayServiceVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateGatewayServiceVersionWithOptions(gatewayId, gatewayServiceId, name, request, headers, runtime);
}

model UpdateHttpApiRequest {
  basePath?: string(name='basePath', description='This parameter is required.', example='/v1'),
  description?: string(name='description'),
  protocols?: [ string ](name='protocols'),
  versionConfig?: HttpApiVersionConfig(name='versionConfig'),
}

model UpdateHttpApiResponseBody = {
  code?: string(name='code', example='Ok'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='393E2630-DBE7-5221-AB35-9E740675491A'),
}

model UpdateHttpApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateHttpApiResponseBody(name='body'),
}

/**
 * @summary 更新HTTP API
 *
 * @param request UpdateHttpApiRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateHttpApiResponse
 */
async function updateHttpApiWithOptions(httpApiId: string, request: UpdateHttpApiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateHttpApiResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.basePath)) {
    body['basePath'] = request.basePath;
  }
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.protocols)) {
    body['protocols'] = request.protocols;
  }
  if (!Util.isUnset(request.versionConfig)) {
    body['versionConfig'] = request.versionConfig;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateHttpApi',
    version = '2024-03-27',
    protocol = 'HTTPS',
    pathname = `/v1/http-apis/${OpenApiUtil.getEncodeParam(httpApiId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新HTTP API
 *
 * @param request UpdateHttpApiRequest
 * @return UpdateHttpApiResponse
 */
async function updateHttpApi(httpApiId: string, request: UpdateHttpApiRequest): UpdateHttpApiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateHttpApiWithOptions(httpApiId, request, headers, runtime);
}

model UpdateHttpApiOperationRequest {
  operation?: HttpApiOperation(name='operation'),
}

model UpdateHttpApiOperationResponseBody = {
  code?: string(name='code', example='Ok'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='043360DA-ED3B-5386-9B7A-D94DECF99A30'),
}

model UpdateHttpApiOperationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateHttpApiOperationResponseBody(name='body'),
}

/**
 * @summary 更新Operation
 *
 * @param request UpdateHttpApiOperationRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateHttpApiOperationResponse
 */
async function updateHttpApiOperationWithOptions(httpApiId: string, operationId: string, request: UpdateHttpApiOperationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateHttpApiOperationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.operation)) {
    body['operation'] = request.operation;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateHttpApiOperation',
    version = '2024-03-27',
    protocol = 'HTTPS',
    pathname = `/v1/http-apis/${OpenApiUtil.getEncodeParam(httpApiId)}/operations/${OpenApiUtil.getEncodeParam(operationId)}`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新Operation
 *
 * @param request UpdateHttpApiOperationRequest
 * @return UpdateHttpApiOperationResponse
 */
async function updateHttpApiOperation(httpApiId: string, operationId: string, request: UpdateHttpApiOperationRequest): UpdateHttpApiOperationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateHttpApiOperationWithOptions(httpApiId, operationId, request, headers, runtime);
}

model UpdateServiceSourceRequest {
  k8sServiceSourceConfig?: {
    ingressConfig?: {
      enable?: boolean(name='enable', example='true'),
      ingressClass?: string(name='ingressClass', example='mse'),
      overrideIngressIp?: boolean(name='overrideIngressIp', example='false'),
      watchNamespace?: string(name='watchNamespace', example='default'),
    }(name='ingressConfig'),
  }(name='k8sServiceSourceConfig'),
}

model UpdateServiceSourceResponseBody = {
  code?: string(name='code', example='Ok'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='393E2630-DBE7-5221-AB35-9E740675491A'),
}

model UpdateServiceSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateServiceSourceResponseBody(name='body'),
}

/**
 * @summary 更新服务来源
 *
 * @param request UpdateServiceSourceRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateServiceSourceResponse
 */
async function updateServiceSourceWithOptions(gatewayId: string, serviceSourceId: string, request: UpdateServiceSourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateServiceSourceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.k8sServiceSourceConfig)) {
    body['k8sServiceSourceConfig'] = request.k8sServiceSourceConfig;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateServiceSource',
    version = '2024-03-27',
    protocol = 'HTTPS',
    pathname = `/v1/gateways/${OpenApiUtil.getEncodeParam(gatewayId)}/service-sources/${OpenApiUtil.getEncodeParam(serviceSourceId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新服务来源
 *
 * @param request UpdateServiceSourceRequest
 * @return UpdateServiceSourceResponse
 */
async function updateServiceSource(gatewayId: string, serviceSourceId: string, request: UpdateServiceSourceRequest): UpdateServiceSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateServiceSourceWithOptions(gatewayId, serviceSourceId, request, headers, runtime);
}

