/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Cloudauth';
  @version = '2022-11-25';
  @endpointRule = 'central';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model EntElementVerifyRequest {
  regionId?: string(name='RegionId', position='Host'),
  entName?: string(name='EntName', position='Query'),
  infoVerifyType?: string(name='InfoVerifyType', example='ENT_2META', position='Query'),
  legalPersonCertNo?: string(name='LegalPersonCertNo', example='370105*****3892', position='Query'),
  legalPersonName?: string(name='LegalPersonName', position='Query'),
  licenseNo?: string(name='LicenseNo', example='32132***328932', position='Query'),
  merchantBizId?: string(name='MerchantBizId', example='32198****193000', position='Query'),
  merchantUserId?: string(name='MerchantUserId', example='432***421', position='Query'),
  sceneCode?: string(name='SceneCode', example='withdraw', position='Query'),
  userAuthorization?: string(name='UserAuthorization', example='1', position='Query'),
}

model EntElementVerifyResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='473469C7***B-A3DC0DE3C83E'),
  result?: {
    bizCode?: string(name='BizCode', example='1'),
    openTime?: string(name='OpenTime'),
    reasonCode?: string(name='ReasonCode'),
    reasonDetail?: string(name='ReasonDetail'),
    status?: string(name='Status', example='1'),
  }(name='Result'),
}

model EntElementVerifyResponse = {
  headers: map[string]string(name='headers'),
  body: EntElementVerifyResponseBody(name='body'),
}

async function entElementVerify(request: EntElementVerifyRequest): EntElementVerifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EntElementVerify', 'POST', '/', 'json', false, 'json', request);
}

model EntRiskQueryRequest {
  regionId?: string(name='RegionId', position='Host'),
  merchantBizId?: string(name='MerchantBizId', example='32198****193000', position='Query'),
  merchantUserId?: string(name='MerchantUserId', position='Query'),
  paramType?: string(name='ParamType', example='00', position='Query'),
  paramValue?: string(name='ParamValue', example='91330106673959****', position='Query'),
  sceneCode?: string(name='SceneCode', example='1000000086', position='Query'),
  userAuthorization?: string(name='UserAuthorization', example='1', position='Query'),
}

model EntRiskQueryResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='8FC3D6AC-9FED-4311-8DA7-C4BF47D9F260'),
  result?: {
    bizCode?: string(name='BizCode', example='1'),
    riskList?: [ 
      {
        creditCode?: string(name='CreditCode', example='92500112MA5UHU****'),
        entName?: string(name='EntName'),
        listedDate?: string(name='ListedDate', example='2023-02-03'),
        listedReason?: string(name='ListedReason'),
        operationOrg?: string(name='OperationOrg'),
        regNo?: string(name='RegNo', example='50011260996****'),
        removedDate?: string(name='RemovedDate', example='2023-02-06'),
        removedOrg?: string(name='RemovedOrg'),
        removedReason?: string(name='RemovedReason'),
      }
    ](name='RiskList'),
    status?: string(name='Status', example='1'),
  }(name='Result'),
}

model EntRiskQueryResponse = {
  headers: map[string]string(name='headers'),
  body: EntRiskQueryResponseBody(name='body'),
}

async function entRiskQuery(request: EntRiskQueryRequest): EntRiskQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EntRiskQuery', 'POST', '/', 'json', false, 'json', request);
}

model EntVerifyRequest {
  regionId?: string(name='RegionId', position='Host'),
  accountNo?: string(name='AccountNo', example='321324***38293', position='Query'),
  entName?: string(name='EntName', position='Query'),
  infoVerifyType?: string(name='InfoVerifyType', position='Query'),
  legalPersonCertNo?: string(name='LegalPersonCertNo', example='370105*****3892', position='Query'),
  legalPersonMobile?: string(name='LegalPersonMobile', example='1300***53', position='Query'),
  legalPersonName?: string(name='LegalPersonName', position='Query'),
  licenseNo?: string(name='LicenseNo', example='32132***328932', position='Query'),
  merchantBizId?: string(name='MerchantBizId', position='Query'),
  merchantUserId?: string(name='MerchantUserId', position='Query'),
  riskModelVersion?: string(name='RiskModelVersion', example='BASIC', position='Query'),
  riskVerifyType?: string(name='RiskVerifyType', position='Query'),
  sceneCode?: string(name='SceneCode', example='withdraw', position='Query'),
  userAuthorization?: string(name='UserAuthorization', example='1', position='Query'),
}

model EntVerifyResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='473469C7-A***B-A3DC0DE3C83E'),
  result?: {
    riskVerifyResult?: {
      found?: boolean(name='Found', example='true'),
      modelResults?: [ 
        {
          modelName?: string(name='ModelName', example='model_1'),
          result?: string(name='Result'),
        }
      ](name='ModelResults'),
    }(name='RiskVerifyResult'),
  }(name='Result'),
}

model EntVerifyResponse = {
  headers: map[string]string(name='headers'),
  body: EntVerifyResponseBody(name='body'),
}

async function entVerify(request: EntVerifyRequest): EntVerifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EntVerify', 'POST', '/', 'json', false, 'json', request);
}

