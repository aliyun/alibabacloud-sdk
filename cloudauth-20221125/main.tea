/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  
  checkConfig(config);
  @endpoint = getEndpoint('cloudauth', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model EntElementVerifyRequest {
  entName?: string(name='EntName'),
  infoVerifyType?: string(name='InfoVerifyType', example='ENT_2META'),
  legalPersonCertNo?: string(name='LegalPersonCertNo', example='370105*****3892'),
  legalPersonName?: string(name='LegalPersonName'),
  licenseNo?: string(name='LicenseNo', example='32132***328932'),
  merchantBizId?: string(name='MerchantBizId', example='32198****193000'),
  merchantUserId?: string(name='MerchantUserId', example='432***421'),
  sceneCode?: string(name='SceneCode', example='withdraw'),
  userAuthorization?: string(name='UserAuthorization', example='1'),
}

model EntElementVerifyResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='473469C7***B-A3DC0DE3C83E'),
  result?: {
    bizCode?: string(name='BizCode', example='1'),
    openTime?: string(name='OpenTime'),
    reasonCode?: string(name='ReasonCode'),
    reasonDetail?: string(name='ReasonDetail'),
    status?: string(name='Status', example='1'),
  }(name='Result'),
}

model EntElementVerifyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EntElementVerifyResponseBody(name='body'),
}

async function entElementVerifyWithOptions(request: EntElementVerifyRequest, runtime: Util.RuntimeOptions): EntElementVerifyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.entName)) {
    query['EntName'] = request.entName;
  }
  if (!Util.isUnset(request.infoVerifyType)) {
    query['InfoVerifyType'] = request.infoVerifyType;
  }
  if (!Util.isUnset(request.legalPersonCertNo)) {
    query['LegalPersonCertNo'] = request.legalPersonCertNo;
  }
  if (!Util.isUnset(request.legalPersonName)) {
    query['LegalPersonName'] = request.legalPersonName;
  }
  if (!Util.isUnset(request.licenseNo)) {
    query['LicenseNo'] = request.licenseNo;
  }
  if (!Util.isUnset(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  if (!Util.isUnset(request.merchantUserId)) {
    query['MerchantUserId'] = request.merchantUserId;
  }
  if (!Util.isUnset(request.sceneCode)) {
    query['SceneCode'] = request.sceneCode;
  }
  if (!Util.isUnset(request.userAuthorization)) {
    query['UserAuthorization'] = request.userAuthorization;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EntElementVerify',
    version = '2022-11-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function entElementVerify(request: EntElementVerifyRequest): EntElementVerifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return entElementVerifyWithOptions(request, runtime);
}

model EntRiskQueryRequest {
  merchantBizId?: string(name='MerchantBizId', example='32198****193000'),
  merchantUserId?: string(name='MerchantUserId'),
  paramType?: string(name='ParamType', example='00'),
  paramValue?: string(name='ParamValue', example='91330106673959****'),
  sceneCode?: string(name='SceneCode', example='1000000086'),
  userAuthorization?: string(name='UserAuthorization', example='1'),
}

model EntRiskQueryResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='8FC3D6AC-9FED-4311-8DA7-C4BF47D9F260'),
  result?: {
    bizCode?: string(name='BizCode', example='1'),
    riskList?: [ 
      {
        creditCode?: string(name='CreditCode', example='92500112MA5UHU****'),
        entName?: string(name='EntName'),
        listedDate?: string(name='ListedDate', example='2023-02-03'),
        listedReason?: string(name='ListedReason'),
        operationOrg?: string(name='OperationOrg'),
        regNo?: string(name='RegNo', example='50011260996****'),
        removedDate?: string(name='RemovedDate', example='2023-02-06'),
        removedOrg?: string(name='RemovedOrg'),
        removedReason?: string(name='RemovedReason'),
      }
    ](name='RiskList'),
    status?: string(name='Status', example='1'),
  }(name='Result'),
}

model EntRiskQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EntRiskQueryResponseBody(name='body'),
}

async function entRiskQueryWithOptions(request: EntRiskQueryRequest, runtime: Util.RuntimeOptions): EntRiskQueryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  if (!Util.isUnset(request.merchantUserId)) {
    query['MerchantUserId'] = request.merchantUserId;
  }
  if (!Util.isUnset(request.paramType)) {
    query['ParamType'] = request.paramType;
  }
  if (!Util.isUnset(request.paramValue)) {
    query['ParamValue'] = request.paramValue;
  }
  if (!Util.isUnset(request.sceneCode)) {
    query['SceneCode'] = request.sceneCode;
  }
  if (!Util.isUnset(request.userAuthorization)) {
    query['UserAuthorization'] = request.userAuthorization;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EntRiskQuery',
    version = '2022-11-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function entRiskQuery(request: EntRiskQueryRequest): EntRiskQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  return entRiskQueryWithOptions(request, runtime);
}

model EntVerifyRequest {
  accountNo?: string(name='AccountNo', example='321324***38293'),
  entName?: string(name='EntName'),
  infoVerifyType?: string(name='InfoVerifyType'),
  legalPersonCertNo?: string(name='LegalPersonCertNo', example='370105*****3892'),
  legalPersonMobile?: string(name='LegalPersonMobile', example='1300***53'),
  legalPersonName?: string(name='LegalPersonName'),
  licenseNo?: string(name='LicenseNo', example='32132***328932'),
  merchantBizId?: string(name='MerchantBizId'),
  merchantUserId?: string(name='MerchantUserId'),
  riskModelVersion?: string(name='RiskModelVersion', example='BASIC'),
  riskVerifyType?: string(name='RiskVerifyType'),
  sceneCode?: string(name='SceneCode', example='withdraw'),
  userAuthorization?: string(name='UserAuthorization', example='1'),
}

model EntVerifyResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='473469C7-A***B-A3DC0DE3C83E'),
  result?: {
    riskVerifyResult?: {
      found?: boolean(name='Found', example='true'),
      modelResults?: [ 
        {
          modelName?: string(name='ModelName', example='model_1'),
          result?: string(name='Result'),
        }
      ](name='ModelResults'),
    }(name='RiskVerifyResult'),
  }(name='Result'),
}

model EntVerifyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EntVerifyResponseBody(name='body'),
}

async function entVerifyWithOptions(request: EntVerifyRequest, runtime: Util.RuntimeOptions): EntVerifyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountNo)) {
    query['AccountNo'] = request.accountNo;
  }
  if (!Util.isUnset(request.entName)) {
    query['EntName'] = request.entName;
  }
  if (!Util.isUnset(request.infoVerifyType)) {
    query['InfoVerifyType'] = request.infoVerifyType;
  }
  if (!Util.isUnset(request.legalPersonCertNo)) {
    query['LegalPersonCertNo'] = request.legalPersonCertNo;
  }
  if (!Util.isUnset(request.legalPersonMobile)) {
    query['LegalPersonMobile'] = request.legalPersonMobile;
  }
  if (!Util.isUnset(request.legalPersonName)) {
    query['LegalPersonName'] = request.legalPersonName;
  }
  if (!Util.isUnset(request.licenseNo)) {
    query['LicenseNo'] = request.licenseNo;
  }
  if (!Util.isUnset(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  if (!Util.isUnset(request.merchantUserId)) {
    query['MerchantUserId'] = request.merchantUserId;
  }
  if (!Util.isUnset(request.riskModelVersion)) {
    query['RiskModelVersion'] = request.riskModelVersion;
  }
  if (!Util.isUnset(request.riskVerifyType)) {
    query['RiskVerifyType'] = request.riskVerifyType;
  }
  if (!Util.isUnset(request.sceneCode)) {
    query['SceneCode'] = request.sceneCode;
  }
  if (!Util.isUnset(request.userAuthorization)) {
    query['UserAuthorization'] = request.userAuthorization;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EntVerify',
    version = '2022-11-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function entVerify(request: EntVerifyRequest): EntVerifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return entVerifyWithOptions(request, runtime);
}

