/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  
  checkConfig(config);
  @endpoint = getEndpoint('cloudauth', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model EntVerifyRequest {
  accountNo?: string(name='AccountNo'),
  entName?: string(name='EntName'),
  infoVerifyType?: string(name='InfoVerifyType'),
  legalPersonCertNo?: string(name='LegalPersonCertNo'),
  legalPersonMobile?: string(name='LegalPersonMobile'),
  legalPersonName?: string(name='LegalPersonName'),
  licenseNo?: string(name='LicenseNo'),
  merchantBizId?: string(name='MerchantBizId'),
  merchantUserId?: string(name='MerchantUserId'),
  riskModelVersion?: string(name='RiskModelVersion'),
  riskVerifyType?: string(name='RiskVerifyType'),
  sceneCode?: string(name='SceneCode'),
  userAuthorization?: string(name='UserAuthorization'),
}

model EntVerifyResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    riskVerifyResult?: {
      modelResults?: [ 
        {
          modelName?: string(name='ModelName'),
          result?: string(name='Result'),
        }
      ](name='ModelResults'),
    }(name='RiskVerifyResult'),
  }(name='Result'),
}

model EntVerifyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EntVerifyResponseBody(name='body'),
}

async function entVerifyWithOptions(request: EntVerifyRequest, runtime: Util.RuntimeOptions): EntVerifyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountNo)) {
    query['AccountNo'] = request.accountNo;
  }
  if (!Util.isUnset(request.entName)) {
    query['EntName'] = request.entName;
  }
  if (!Util.isUnset(request.infoVerifyType)) {
    query['InfoVerifyType'] = request.infoVerifyType;
  }
  if (!Util.isUnset(request.legalPersonCertNo)) {
    query['LegalPersonCertNo'] = request.legalPersonCertNo;
  }
  if (!Util.isUnset(request.legalPersonMobile)) {
    query['LegalPersonMobile'] = request.legalPersonMobile;
  }
  if (!Util.isUnset(request.legalPersonName)) {
    query['LegalPersonName'] = request.legalPersonName;
  }
  if (!Util.isUnset(request.licenseNo)) {
    query['LicenseNo'] = request.licenseNo;
  }
  if (!Util.isUnset(request.merchantBizId)) {
    query['MerchantBizId'] = request.merchantBizId;
  }
  if (!Util.isUnset(request.merchantUserId)) {
    query['MerchantUserId'] = request.merchantUserId;
  }
  if (!Util.isUnset(request.riskModelVersion)) {
    query['RiskModelVersion'] = request.riskModelVersion;
  }
  if (!Util.isUnset(request.riskVerifyType)) {
    query['RiskVerifyType'] = request.riskVerifyType;
  }
  if (!Util.isUnset(request.sceneCode)) {
    query['SceneCode'] = request.sceneCode;
  }
  if (!Util.isUnset(request.userAuthorization)) {
    query['UserAuthorization'] = request.userAuthorization;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EntVerify',
    version = '2022-11-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function entVerify(request: EntVerifyRequest): EntVerifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return entVerifyWithOptions(request, runtime);
}

