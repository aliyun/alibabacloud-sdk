/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  @endpointMap = {
    cn-qingdao = 'hitsdb.aliyuncs.com',
    cn-beijing = 'hitsdb.aliyuncs.com',
    cn-hangzhou = 'hitsdb.aliyuncs.com',
    cn-shanghai = 'hitsdb.aliyuncs.com',
    cn-shenzhen = 'hitsdb.aliyuncs.com',
    cn-hongkong = 'hitsdb.aliyuncs.com',
    ap-southeast-1 = 'hitsdb.aliyuncs.com',
    us-west-1 = 'hitsdb.aliyuncs.com',
    us-east-1 = 'hitsdb.aliyuncs.com',
    cn-shanghai-finance-1 = 'hitsdb.aliyuncs.com',
    cn-shenzhen-finance-1 = 'hitsdb.aliyuncs.com',
    ap-northeast-2-pop = 'hitsdb.aliyuncs.com',
    cn-beijing-finance-1 = 'hitsdb.aliyuncs.com',
    cn-beijing-finance-pop = 'hitsdb.aliyuncs.com',
    cn-beijing-gov-1 = 'hitsdb.aliyuncs.com',
    cn-beijing-nu16-b01 = 'hitsdb.aliyuncs.com',
    cn-chengdu = 'hitsdb.aliyuncs.com',
    cn-edge-1 = 'hitsdb.aliyuncs.com',
    cn-fujian = 'hitsdb.aliyuncs.com',
    cn-haidian-cm12-c01 = 'hitsdb.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'hitsdb.aliyuncs.com',
    cn-hangzhou-finance = 'hitsdb.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'hitsdb.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'hitsdb.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'hitsdb.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'hitsdb.aliyuncs.com',
    cn-hangzhou-test-306 = 'hitsdb.aliyuncs.com',
    cn-hongkong-finance-pop = 'hitsdb.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'hitsdb.aliyuncs.com',
    cn-qingdao-nebula = 'hitsdb.aliyuncs.com',
    cn-shanghai-et15-b01 = 'hitsdb.aliyuncs.com',
    cn-shanghai-et2-b01 = 'hitsdb.aliyuncs.com',
    cn-shanghai-inner = 'hitsdb.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'hitsdb.aliyuncs.com',
    cn-shenzhen-inner = 'hitsdb.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'hitsdb.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'hitsdb.aliyuncs.com',
    cn-wuhan = 'hitsdb.aliyuncs.com',
    cn-wulanchabu = 'hitsdb.aliyuncs.com',
    cn-yushanfang = 'hitsdb.aliyuncs.com',
    cn-zhangbei = 'hitsdb.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'hitsdb.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'hitsdb.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'hitsdb.aliyuncs.com',
    eu-west-1-oxs = 'hitsdb.aliyuncs.com',
    me-east-1 = 'hitsdb.aliyuncs.com',
    rus-west-1-pop = 'hitsdb.aliyuncs.com',
  };
  checkConfig(config);
  @endpoint = getEndpoint('hitsdb', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model CreateHiTSDBInstanceRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  appKey?: string(name='AppKey'),
  zoneId?: string(name='ZoneId'),
  instanceName?: string(name='InstanceName'),
  instanceAlias?: string(name='InstanceAlias'),
  instanceClass?: string(name='InstanceClass'),
  instanceStorage?: string(name='InstanceStorage'),
  payType?: string(name='PayType'),
  VPCId?: string(name='VPCId'),
  vSwitchId?: string(name='VSwitchId'),
  maxTimelineLimit?: string(name='MaxTimelineLimit'),
  instanceTps?: string(name='InstanceTps'),
  engineType?: string(name='EngineType'),
  maxSeriesPerDatabase?: string(name='MaxSeriesPerDatabase'),
  maxDatabaseLimit?: string(name='MaxDatabaseLimit'),
  pricingCycle?: string(name='PricingCycle'),
  duration?: string(name='Duration'),
  TSDBVersion?: string(name='TSDBVersion'),
  diskCategory?: string(name='DiskCategory'),
  clientToken?: string(name='ClientToken'),
}

model CreateHiTSDBInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  instanceId?: string(name='InstanceId'),
  orderId?: long(name='OrderId'),
}

model CreateHiTSDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateHiTSDBInstanceResponseBody(name='body'),
}

async function createHiTSDBInstanceWithOptions(request: CreateHiTSDBInstanceRequest, runtime: Util.RuntimeOptions): CreateHiTSDBInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateHiTSDBInstance', '2017-06-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createHiTSDBInstance(request: CreateHiTSDBInstanceRequest): CreateHiTSDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createHiTSDBInstanceWithOptions(request, runtime);
}

model DeleteHiTSDBInstanceRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  appKey?: string(name='AppKey'),
  instanceId?: string(name='InstanceId'),
}

model DeleteHiTSDBInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteHiTSDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteHiTSDBInstanceResponseBody(name='body'),
}

async function deleteHiTSDBInstanceWithOptions(request: DeleteHiTSDBInstanceRequest, runtime: Util.RuntimeOptions): DeleteHiTSDBInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteHiTSDBInstance', '2017-06-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteHiTSDBInstance(request: DeleteHiTSDBInstanceRequest): DeleteHiTSDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteHiTSDBInstanceWithOptions(request, runtime);
}

model DescribeHiTSDBInstanceRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  appKey?: string(name='AppKey'),
  instanceId?: string(name='InstanceId'),
}

model DescribeHiTSDBInstanceResponseBody = {
  autoRenew?: string(name='AutoRenew'),
  gmtCreated?: string(name='GmtCreated'),
  cpuNumber?: string(name='CpuNumber'),
  memSize?: string(name='MemSize'),
  networkType?: string(name='NetworkType'),
  gmtExpire?: string(name='GmtExpire'),
  instanceAlias?: string(name='InstanceAlias'),
  instanceStatus?: string(name='InstanceStatus'),
  expiredTime?: long(name='ExpiredTime'),
  paymentType?: string(name='PaymentType'),
  maxTimelineLimit?: string(name='MaxTimelineLimit'),
  publicConnectionString?: string(name='PublicConnectionString'),
  engineType?: string(name='EngineType'),
  instanceTps?: string(name='InstanceTps'),
  status?: string(name='Status'),
  instanceStorage?: string(name='InstanceStorage'),
  requestId?: string(name='RequestId'),
  zoneId?: string(name='ZoneId'),
  instanceId?: string(name='InstanceId'),
  createTime?: long(name='CreateTime'),
  diskCategory?: string(name='DiskCategory'),
  instanceClass?: string(name='InstanceClass'),
  vswitchId?: string(name='VswitchId'),
  series?: int32(name='Series'),
  vpcId?: string(name='VpcId'),
  chargeType?: string(name='ChargeType'),
  securityIpList?: [ 
    {
      ip?: string(name='Ip'),
    }
  ](name='SecurityIpList'),
  instanceDescription?: string(name='InstanceDescription'),
  regionId?: string(name='RegionId'),
  connectionString?: string(name='ConnectionString'),
}

model DescribeHiTSDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHiTSDBInstanceResponseBody(name='body'),
}

async function describeHiTSDBInstanceWithOptions(request: DescribeHiTSDBInstanceRequest, runtime: Util.RuntimeOptions): DescribeHiTSDBInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeHiTSDBInstance', '2017-06-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeHiTSDBInstance(request: DescribeHiTSDBInstanceRequest): DescribeHiTSDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHiTSDBInstanceWithOptions(request, runtime);
}

model DescribeHiTSDBInstanceListRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  appKey?: string(name='AppKey'),
  queryStr?: string(name='QueryStr'),
  statusList?: string(name='StatusList'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  engineType?: string(name='EngineType'),
}

model DescribeHiTSDBInstanceListResponseBody = {
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  total?: int32(name='Total'),
  instanceList?: [ 
    {
      vpcId?: string(name='VpcId'),
      status?: string(name='Status'),
      maxSeriesPerDatabase?: string(name='MaxSeriesPerDatabase'),
      paymentType?: string(name='PaymentType'),
      engineType?: string(name='EngineType'),
      vswitchId?: string(name='VswitchId'),
      instanceClass?: string(name='InstanceClass'),
      createTime?: long(name='CreateTime'),
      userId?: string(name='UserId'),
      chargeType?: string(name='ChargeType'),
      instanceStorage?: string(name='InstanceStorage'),
      networkType?: string(name='NetworkType'),
      instanceId?: string(name='InstanceId'),
      lockMode?: string(name='LockMode'),
      instanceDescription?: string(name='InstanceDescription'),
      regionId?: string(name='RegionId'),
      gmtCreated?: string(name='GmtCreated'),
      instanceAlias?: string(name='InstanceAlias'),
      instanceTps?: string(name='InstanceTps'),
      expiredTime?: long(name='ExpiredTime'),
      zoneId?: string(name='ZoneId'),
      instanceStatus?: string(name='InstanceStatus'),
      gmtExpire?: string(name='GmtExpire'),
    }
  ](name='InstanceList'),
}

model DescribeHiTSDBInstanceListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHiTSDBInstanceListResponseBody(name='body'),
}

async function describeHiTSDBInstanceListWithOptions(request: DescribeHiTSDBInstanceListRequest, runtime: Util.RuntimeOptions): DescribeHiTSDBInstanceListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeHiTSDBInstanceList', '2017-06-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeHiTSDBInstanceList(request: DescribeHiTSDBInstanceListRequest): DescribeHiTSDBInstanceListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHiTSDBInstanceListWithOptions(request, runtime);
}

model DescribeHiTSDBInstanceSecurityIpListRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  groupName?: string(name='GroupName'),
}

model DescribeHiTSDBInstanceSecurityIpListResponseBody = {
  requestId?: string(name='RequestId'),
  securityIpList?: [ 
    {
      ip?: string(name='Ip'),
    }
  ](name='SecurityIpList'),
}

model DescribeHiTSDBInstanceSecurityIpListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHiTSDBInstanceSecurityIpListResponseBody(name='body'),
}

async function describeHiTSDBInstanceSecurityIpListWithOptions(request: DescribeHiTSDBInstanceSecurityIpListRequest, runtime: Util.RuntimeOptions): DescribeHiTSDBInstanceSecurityIpListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeHiTSDBInstanceSecurityIpList', '2017-06-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeHiTSDBInstanceSecurityIpList(request: DescribeHiTSDBInstanceSecurityIpListRequest): DescribeHiTSDBInstanceSecurityIpListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHiTSDBInstanceSecurityIpListWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  acceptLanguage?: string(name='AcceptLanguage'),
}

model DescribeRegionsResponseBody = {
  requestId?: string(name='RequestId'),
  regions?: {
    region?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
    }
  ](name='Region')
  }(name='Regions'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRegions', '2017-06-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeZonesRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  language?: string(name='Language'),
}

model DescribeZonesResponseBody = {
  requestId?: string(name='RequestId'),
  zoneList?: {
    zoneModel?: [ 
    {
      localName?: string(name='LocalName'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='ZoneModel')
  }(name='ZoneList'),
}

model DescribeZonesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeZonesResponseBody(name='body'),
}

async function describeZonesWithOptions(request: DescribeZonesRequest, runtime: Util.RuntimeOptions): DescribeZonesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeZones', '2017-06-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeZones(request: DescribeZonesRequest): DescribeZonesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeZonesWithOptions(request, runtime);
}

model ModifyHiTSDBInstanceClassRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  appKey?: string(name='AppKey'),
  instanceId?: string(name='InstanceId'),
  instanceClass?: string(name='InstanceClass'),
  instanceStorage?: string(name='InstanceStorage'),
}

model ModifyHiTSDBInstanceClassResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyHiTSDBInstanceClassResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyHiTSDBInstanceClassResponseBody(name='body'),
}

async function modifyHiTSDBInstanceClassWithOptions(request: ModifyHiTSDBInstanceClassRequest, runtime: Util.RuntimeOptions): ModifyHiTSDBInstanceClassResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyHiTSDBInstanceClass', '2017-06-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyHiTSDBInstanceClass(request: ModifyHiTSDBInstanceClassRequest): ModifyHiTSDBInstanceClassResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyHiTSDBInstanceClassWithOptions(request, runtime);
}

model ModifyHiTSDBInstanceSecurityIpListRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  securityIpList?: string(name='SecurityIpList'),
  groupName?: string(name='GroupName'),
}

model ModifyHiTSDBInstanceSecurityIpListResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyHiTSDBInstanceSecurityIpListResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyHiTSDBInstanceSecurityIpListResponseBody(name='body'),
}

async function modifyHiTSDBInstanceSecurityIpListWithOptions(request: ModifyHiTSDBInstanceSecurityIpListRequest, runtime: Util.RuntimeOptions): ModifyHiTSDBInstanceSecurityIpListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyHiTSDBInstanceSecurityIpList', '2017-06-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyHiTSDBInstanceSecurityIpList(request: ModifyHiTSDBInstanceSecurityIpListRequest): ModifyHiTSDBInstanceSecurityIpListResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyHiTSDBInstanceSecurityIpListWithOptions(request, runtime);
}

model RenameHiTSDBInstanceAliasRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  appKey?: string(name='AppKey'),
  instanceId?: string(name='InstanceId'),
  instanceAlias?: string(name='InstanceAlias'),
}

model RenameHiTSDBInstanceAliasResponseBody = {
  requestId?: string(name='RequestId'),
}

model RenameHiTSDBInstanceAliasResponse = {
  headers: map[string]string(name='headers'),
  body: RenameHiTSDBInstanceAliasResponseBody(name='body'),
}

async function renameHiTSDBInstanceAliasWithOptions(request: RenameHiTSDBInstanceAliasRequest, runtime: Util.RuntimeOptions): RenameHiTSDBInstanceAliasResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RenameHiTSDBInstanceAlias', '2017-06-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function renameHiTSDBInstanceAlias(request: RenameHiTSDBInstanceAliasRequest): RenameHiTSDBInstanceAliasResponse {
  var runtime = new Util.RuntimeOptions{};
  return renameHiTSDBInstanceAliasWithOptions(request, runtime);
}

model RenewTSDBInstanceRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  pricingCycle?: string(name='PricingCycle'),
  duration?: int32(name='Duration'),
}

model RenewTSDBInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  orderId?: long(name='OrderId'),
}

model RenewTSDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RenewTSDBInstanceResponseBody(name='body'),
}

async function renewTSDBInstanceWithOptions(request: RenewTSDBInstanceRequest, runtime: Util.RuntimeOptions): RenewTSDBInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RenewTSDBInstance', '2017-06-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function renewTSDBInstance(request: RenewTSDBInstanceRequest): RenewTSDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return renewTSDBInstanceWithOptions(request, runtime);
}

model RestartHiTSDBInstanceRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
}

model RestartHiTSDBInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model RestartHiTSDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RestartHiTSDBInstanceResponseBody(name='body'),
}

async function restartHiTSDBInstanceWithOptions(request: RestartHiTSDBInstanceRequest, runtime: Util.RuntimeOptions): RestartHiTSDBInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RestartHiTSDBInstance', '2017-06-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function restartHiTSDBInstance(request: RestartHiTSDBInstanceRequest): RestartHiTSDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return restartHiTSDBInstanceWithOptions(request, runtime);
}

model SwitchHiTSDBInstancePublicNetRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  switchAction?: long(name='SwitchAction'),
}

model SwitchHiTSDBInstancePublicNetResponseBody = {
  requestId?: string(name='RequestId'),
}

model SwitchHiTSDBInstancePublicNetResponse = {
  headers: map[string]string(name='headers'),
  body: SwitchHiTSDBInstancePublicNetResponseBody(name='body'),
}

async function switchHiTSDBInstancePublicNetWithOptions(request: SwitchHiTSDBInstancePublicNetRequest, runtime: Util.RuntimeOptions): SwitchHiTSDBInstancePublicNetResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SwitchHiTSDBInstancePublicNet', '2017-06-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function switchHiTSDBInstancePublicNet(request: SwitchHiTSDBInstancePublicNetRequest): SwitchHiTSDBInstancePublicNetResponse {
  var runtime = new Util.RuntimeOptions{};
  return switchHiTSDBInstancePublicNetWithOptions(request, runtime);
}

