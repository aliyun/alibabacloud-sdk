/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'hitsdb';
  @version = '2017-06-01';
  @endpointRule = 'regional';
  @endpointMap = {
    cn-qingdao = 'hitsdb.aliyuncs.com',
    cn-beijing = 'hitsdb.aliyuncs.com',
    cn-hangzhou = 'hitsdb.aliyuncs.com',
    cn-shanghai = 'hitsdb.aliyuncs.com',
    cn-shenzhen = 'hitsdb.aliyuncs.com',
    cn-hongkong = 'hitsdb.aliyuncs.com',
    ap-southeast-1 = 'hitsdb.aliyuncs.com',
    us-west-1 = 'hitsdb.aliyuncs.com',
    us-east-1 = 'hitsdb.aliyuncs.com',
    cn-shanghai-finance-1 = 'hitsdb.aliyuncs.com',
    cn-shenzhen-finance-1 = 'hitsdb.aliyuncs.com',
    ap-northeast-2-pop = 'hitsdb.aliyuncs.com',
    cn-beijing-finance-1 = 'hitsdb.aliyuncs.com',
    cn-beijing-finance-pop = 'hitsdb.aliyuncs.com',
    cn-beijing-gov-1 = 'hitsdb.aliyuncs.com',
    cn-beijing-nu16-b01 = 'hitsdb.aliyuncs.com',
    cn-chengdu = 'hitsdb.aliyuncs.com',
    cn-edge-1 = 'hitsdb.aliyuncs.com',
    cn-fujian = 'hitsdb.aliyuncs.com',
    cn-haidian-cm12-c01 = 'hitsdb.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'hitsdb.aliyuncs.com',
    cn-hangzhou-finance = 'hitsdb.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'hitsdb.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'hitsdb.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'hitsdb.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'hitsdb.aliyuncs.com',
    cn-hangzhou-test-306 = 'hitsdb.aliyuncs.com',
    cn-hongkong-finance-pop = 'hitsdb.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'hitsdb.aliyuncs.com',
    cn-qingdao-nebula = 'hitsdb.aliyuncs.com',
    cn-shanghai-et15-b01 = 'hitsdb.aliyuncs.com',
    cn-shanghai-et2-b01 = 'hitsdb.aliyuncs.com',
    cn-shanghai-inner = 'hitsdb.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'hitsdb.aliyuncs.com',
    cn-shenzhen-inner = 'hitsdb.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'hitsdb.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'hitsdb.aliyuncs.com',
    cn-wuhan = 'hitsdb.aliyuncs.com',
    cn-wulanchabu = 'hitsdb.aliyuncs.com',
    cn-yushanfang = 'hitsdb.aliyuncs.com',
    cn-zhangbei = 'hitsdb.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'hitsdb.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'hitsdb.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'hitsdb.aliyuncs.com',
    eu-west-1-oxs = 'hitsdb.aliyuncs.com',
    me-east-1 = 'hitsdb.aliyuncs.com',
    rus-west-1-pop = 'hitsdb.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model CreateHiTSDBInstanceRequest {
  appKey?: string(name='AppKey', position='Query'),
  diskCategory?: string(name='DiskCategory', position='Query'),
  duration?: string(name='Duration', position='Query'),
  instanceAlias?: string(name='InstanceAlias', position='Query'),
  instanceClass: string(name='InstanceClass', position='Query'),
  instanceStorage: string(name='InstanceStorage', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  payType: string(name='PayType', position='Query'),
  pricingCycle?: string(name='PricingCycle', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  VPCId: string(name='VPCId', position='Query'),
  vSwitchId: string(name='VSwitchId', position='Query'),
  zoneId: string(name='ZoneId', position='Query'),
}

model CreateHiTSDBInstanceResponseBody = {
  instanceId?: string(name='InstanceId'),
  orderId?: long(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model CreateHiTSDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateHiTSDBInstanceResponseBody(name='body'),
}

async function createHiTSDBInstance(request: CreateHiTSDBInstanceRequest): CreateHiTSDBInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateHiTSDBInstance', 'POST', '/', 'json', false, 'json', request);
}

model DeleteHiTSDBInstanceRequest {
  appKey?: string(name='AppKey', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteHiTSDBInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteHiTSDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteHiTSDBInstanceResponseBody(name='body'),
}

async function deleteHiTSDBInstance(request: DeleteHiTSDBInstanceRequest): DeleteHiTSDBInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteHiTSDBInstance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHiTSDBInstanceRequest {
  appKey?: string(name='AppKey', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeHiTSDBInstanceResponseBody = {
  autoRenew?: string(name='AutoRenew'),
  chargeType?: string(name='ChargeType'),
  connectionString?: string(name='ConnectionString'),
  cpuNumber?: string(name='CpuNumber'),
  createTime?: long(name='CreateTime'),
  diskCategory?: string(name='DiskCategory'),
  engineType?: string(name='EngineType'),
  expiredTime?: long(name='ExpiredTime'),
  gmtCreated?: string(name='GmtCreated'),
  gmtExpire?: string(name='GmtExpire'),
  instanceAlias?: string(name='InstanceAlias'),
  instanceClass?: string(name='InstanceClass'),
  instanceDescription?: string(name='InstanceDescription'),
  instanceId?: string(name='InstanceId'),
  instanceStatus?: string(name='InstanceStatus'),
  instanceStorage?: string(name='InstanceStorage'),
  instanceTps?: string(name='InstanceTps'),
  maxTimelineLimit?: string(name='MaxTimelineLimit'),
  memSize?: string(name='MemSize'),
  networkType?: string(name='NetworkType'),
  paymentType?: string(name='PaymentType'),
  publicConnectionString?: string(name='PublicConnectionString'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
  securityIpList?: [ 
    {
      ip?: string(name='Ip'),
    }
  ](name='SecurityIpList'),
  series?: int32(name='Series'),
  status?: string(name='Status'),
  vpcId?: string(name='VpcId'),
  vswitchId?: string(name='VswitchId'),
  zoneId?: string(name='ZoneId'),
}

model DescribeHiTSDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHiTSDBInstanceResponseBody(name='body'),
}

async function describeHiTSDBInstance(request: DescribeHiTSDBInstanceRequest): DescribeHiTSDBInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHiTSDBInstance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHiTSDBInstanceListRequest {
  appKey?: string(name='AppKey', position='Query'),
  engineType?: string(name='EngineType', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber: int32(name='PageNumber', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  queryStr?: string(name='QueryStr', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  statusList?: string(name='StatusList', position='Query'),
}

model DescribeHiTSDBInstanceListResponseBody = {
  instanceList?: [ 
    {
      chargeType?: string(name='ChargeType'),
      createTime?: long(name='CreateTime'),
      engineType?: string(name='EngineType'),
      expiredTime?: long(name='ExpiredTime'),
      gmtCreated?: string(name='GmtCreated'),
      gmtExpire?: string(name='GmtExpire'),
      instanceAlias?: string(name='InstanceAlias'),
      instanceClass?: string(name='InstanceClass'),
      instanceDescription?: string(name='InstanceDescription'),
      instanceId?: string(name='InstanceId'),
      instanceStatus?: string(name='InstanceStatus'),
      instanceStorage?: string(name='InstanceStorage'),
      instanceTps?: string(name='InstanceTps'),
      lockMode?: string(name='LockMode'),
      maxSeriesPerDatabase?: string(name='MaxSeriesPerDatabase'),
      networkType?: string(name='NetworkType'),
      paymentType?: string(name='PaymentType'),
      regionId?: string(name='RegionId'),
      status?: string(name='Status'),
      userId?: string(name='UserId'),
      vpcId?: string(name='VpcId'),
      vswitchId?: string(name='VswitchId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='InstanceList'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: int32(name='Total'),
}

model DescribeHiTSDBInstanceListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHiTSDBInstanceListResponseBody(name='body'),
}

async function describeHiTSDBInstanceList(request: DescribeHiTSDBInstanceListRequest): DescribeHiTSDBInstanceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHiTSDBInstanceList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHiTSDBInstanceSecurityIpListRequest {
  groupName?: string(name='GroupName', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeHiTSDBInstanceSecurityIpListResponseBody = {
  requestId?: string(name='RequestId'),
  securityIpList?: [ 
    {
      ip?: string(name='Ip'),
    }
  ](name='SecurityIpList'),
}

model DescribeHiTSDBInstanceSecurityIpListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHiTSDBInstanceSecurityIpListResponseBody(name='body'),
}

async function describeHiTSDBInstanceSecurityIpList(request: DescribeHiTSDBInstanceSecurityIpListRequest): DescribeHiTSDBInstanceSecurityIpListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHiTSDBInstanceSecurityIpList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  zoneId?: string(name='ZoneId', position='Host'),
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
    }
  ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeZonesRequest {
  language?: string(name='Language', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeZonesResponseBody = {
  requestId?: string(name='RequestId'),
  zoneList?: {
    zoneModel?: [ 
    {
      localName?: string(name='LocalName'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='ZoneModel')
  }(name='ZoneList'),
}

model DescribeZonesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeZonesResponseBody(name='body'),
}

async function describeZones(request: DescribeZonesRequest): DescribeZonesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeZones', 'POST', '/', 'json', false, 'json', request);
}

model ModifyHiTSDBInstanceClassRequest {
  appKey?: string(name='AppKey', position='Query'),
  instanceClass: string(name='InstanceClass', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  instanceStorage: string(name='InstanceStorage', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ModifyHiTSDBInstanceClassResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyHiTSDBInstanceClassResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyHiTSDBInstanceClassResponseBody(name='body'),
}

async function modifyHiTSDBInstanceClass(request: ModifyHiTSDBInstanceClassRequest): ModifyHiTSDBInstanceClassResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyHiTSDBInstanceClass', 'POST', '/', 'json', false, 'json', request);
}

model ModifyHiTSDBInstanceSecurityIpListRequest {
  groupName?: string(name='GroupName', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityIpList: string(name='SecurityIpList', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ModifyHiTSDBInstanceSecurityIpListResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyHiTSDBInstanceSecurityIpListResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyHiTSDBInstanceSecurityIpListResponseBody(name='body'),
}

async function modifyHiTSDBInstanceSecurityIpList(request: ModifyHiTSDBInstanceSecurityIpListRequest): ModifyHiTSDBInstanceSecurityIpListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyHiTSDBInstanceSecurityIpList', 'POST', '/', 'json', false, 'json', request);
}

model RenameHiTSDBInstanceAliasRequest {
  appKey?: string(name='AppKey', position='Query'),
  instanceAlias: string(name='InstanceAlias', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model RenameHiTSDBInstanceAliasResponseBody = {
  requestId?: string(name='RequestId'),
}

model RenameHiTSDBInstanceAliasResponse = {
  headers: map[string]string(name='headers'),
  body: RenameHiTSDBInstanceAliasResponseBody(name='body'),
}

async function renameHiTSDBInstanceAlias(request: RenameHiTSDBInstanceAliasRequest): RenameHiTSDBInstanceAliasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenameHiTSDBInstanceAlias', 'POST', '/', 'json', false, 'json', request);
}

model RenewTSDBInstanceRequest {
  duration: int32(name='Duration', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pricingCycle: string(name='PricingCycle', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model RenewTSDBInstanceResponseBody = {
  orderId?: long(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model RenewTSDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RenewTSDBInstanceResponseBody(name='body'),
}

async function renewTSDBInstance(request: RenewTSDBInstanceRequest): RenewTSDBInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenewTSDBInstance', 'POST', '/', 'json', false, 'json', request);
}

model RestartHiTSDBInstanceRequest {
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model RestartHiTSDBInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model RestartHiTSDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RestartHiTSDBInstanceResponseBody(name='body'),
}

async function restartHiTSDBInstance(request: RestartHiTSDBInstanceRequest): RestartHiTSDBInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RestartHiTSDBInstance', 'POST', '/', 'json', false, 'json', request);
}

model SwitchHiTSDBInstancePublicNetRequest {
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  switchAction: long(name='SwitchAction', position='Query'),
}

model SwitchHiTSDBInstancePublicNetResponseBody = {
  requestId?: string(name='RequestId'),
}

model SwitchHiTSDBInstancePublicNetResponse = {
  headers: map[string]string(name='headers'),
  body: SwitchHiTSDBInstancePublicNetResponseBody(name='body'),
}

async function switchHiTSDBInstancePublicNet(request: SwitchHiTSDBInstancePublicNetRequest): SwitchHiTSDBInstancePublicNetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SwitchHiTSDBInstancePublicNet', 'POST', '/', 'json', false, 'json', request);
}

