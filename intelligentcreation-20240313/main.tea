/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('intelligentcreation', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AnchorResponse {
  anchorId?: string(name='anchorId'),
  anchorMaterialName?: string(name='anchorMaterialName'),
  anchorType?: string(name='anchorType'),
  coverHeight?: int32(name='coverHeight'),
  coverRate?: string(name='coverRate'),
  coverThumbnailUrl?: string(name='coverThumbnailUrl'),
  coverUrl?: string(name='coverUrl'),
  coverWeight?: int32(name='coverWeight'),
  digitalHumanType?: string(name='digitalHumanType'),
  gender?: string(name='gender'),
  resourceTypeDesc?: string(name='resourceTypeDesc'),
  status?: string(name='status'),
  useScene?: string(name='useScene'),
}

model GetOssUploadTokenResult {
  requestId?: string(name='requestId', example='3239281273464326823'),
  uploadInfo?: UploadInfo(name='uploadInfo', description='This parameter is required.'),
}

model Illustration {
  illustrationId?: long(name='illustrationId'),
  oss?: string(name='oss'),
}

model IllustrationResult {
  illustration?: Illustration(name='illustration'),
  requestId?: string(name='requestId', example='3239281273464326823'),
}

model IllustrationTask {
  gmtCreate?: string(name='gmtCreate'),
  gmtModified?: string(name='gmtModified'),
  illustrationIds?: [ long ](name='illustrationIds'),
  illustrationTaskId?: long(name='illustrationTaskId'),
  taskStatus?: string(name='taskStatus', example='Success'),
  textId?: long(name='textId'),
}

model IllustrationTaskCreateCmd {
  backgroundType?: int32(name='backgroundType', example='0-不换背景，1-换背景'),
  dstHeight?: int32(name='dstHeight', example='1024'),
  dstWidth?: int32(name='dstWidth', example='1024'),
  idempotentId?: string(name='idempotentId', example='28274623764834'),
  nums?: int32(name='nums', example='4'),
  ossPaths?: [ string ](name='ossPaths'),
  stickerText?: string(name='stickerText'),
}

model IllustrationTaskResult {
  illustrationTask?: IllustrationTask(name='illustrationTask'),
  requestId?: string(name='requestId', example='3239281273464326823'),
}

model ReferenceTag {
  referenceContent?: string(name='referenceContent'),
  referenceTitle?: string(name='referenceTitle'),
}

model Text {
  agentId?: string(name='agentId'),
  agentName?: string(name='agentName'),
  desc?: string(name='desc', description='This parameter is required.', example='xxx'),
  gmtCreate?: string(name='gmtCreate'),
  gmtModified?: string(name='gmtModified'),
  illustrationTaskIdList?: [ long ](name='illustrationTaskIdList'),
  publishStatus?: string(name='publishStatus'),
  textContent?: string(name='textContent'),
  textId?: long(name='textId', description='This parameter is required.', example='1'),
  textIllustrationTag?: boolean(name='textIllustrationTag', example='true'),
  textModeType?: string(name='textModeType'),
  textStatus?: string(name='textStatus', description='This parameter is required.', example='Generating'),
  textStyleType?: string(name='textStyleType'),
  textTaskId?: long(name='textTaskId', description='This parameter is required.', example='123'),
  textThemes?: [ string ](name='textThemes'),
  title?: string(name='title', example='xxx'),
  userNameCreate?: string(name='userNameCreate', description='This parameter is required.', example='xxx'),
  userNameModified?: string(name='userNameModified', description='This parameter is required.', example='xxx'),
}

model TextQueryResult {
  requestId?: string(name='requestId'),
  texts?: [
    Text
  ](name='texts'),
  total?: int32(name='total', example='10'),
}

model TextResult {
  requestId?: string(name='requestId', example='3239281273464326823'),
  text?: Text(name='text', description='This parameter is required.'),
}

model TextTask {
  agentId?: string(name='agentId'),
  agentName?: string(name='agentName'),
  contentRequirement?: string(name='contentRequirement', example='九寨沟三日游攻略'),
  gmtCreate?: string(name='gmtCreate'),
  gmtModified?: string(name='gmtModified'),
  introduction?: string(name='introduction'),
  nums?: int32(name='nums', description='This parameter is required.', example='1'),
  point?: string(name='point', example='xxx'),
  referenceTag?: ReferenceTag(name='referenceTag'),
  relatedRagId?: int32(name='relatedRagId'),
  style?: string(name='style', description='This parameter is required.'),
  target?: string(name='target'),
  textIds?: [ long ](name='textIds'),
  textModeType?: string(name='textModeType', description='This parameter is required.'),
  textTaskId?: long(name='textTaskId'),
  textTaskStatus?: string(name='textTaskStatus'),
  texts?: [
    Text
  ](name='texts'),
  theme?: string(name='theme', example='旅游路线'),
  themeDesc?: string(name='themeDesc'),
}

model TextTaskCreateCmd {
  agentId?: string(name='agentId'),
  contentRequirement?: string(name='contentRequirement', example='极氪007新车上市'),
  idempotentId?: string(name='idempotentId', example='28274623764834'),
  industry?: string(name='industry'),
  introduction?: string(name='introduction', example='xxx'),
  number?: int32(name='number', description='This parameter is required.', example='4'),
  point?: string(name='point', example='超强续航'),
  referenceTag?: ReferenceTag(name='referenceTag'),
  relatedRagIds?: [ long ](name='relatedRagIds', example='1'),
  style?: string(name='style', description='This parameter is required.'),
  target?: string(name='target'),
  textModeType?: string(name='textModeType', description='This parameter is required.'),
  theme?: string(name='theme', example='旅游路线'),
  themes?: [ string ](name='themes'),
}

model TextTaskResult {
  textTask?: TextTask(name='textTask'),
}

model TextTheme {
  desc?: string(name='desc'),
  name?: string(name='name'),
}

model TextThemeListResult {
  requestId?: string(name='requestId', example='3239281273464326823'),
  textThemeList?: [
    TextTheme
  ](name='textThemeList', description='This parameter is required.'),
}

model UploadInfo {
  accessId?: string(name='accessId', description='This parameter is required.', example='xxxxxx'),
  host?: string(name='host', description='This parameter is required.', example='yic-pre.oss-cn-hangzhou.aliyuncs.com'),
  key?: string(name='key', description='This parameter is required.', example='1234/temp-novels/xxxx-xxx-xx.txt'),
  policy?: string(name='policy', description='This parameter is required.', example='xxxxxxxx'),
  policySignature?: string(name='policySignature', description='This parameter is required.', example='xxxxxxx'),
  url?: string(name='url', example='xxxxxx'),
}

model VoiceModelResponse {
  resourceTypeDesc?: string(name='resourceTypeDesc'),
  useScene?: string(name='useScene'),
  voiceDesc?: string(name='voiceDesc'),
  voiceGender?: string(name='voiceGender'),
  voiceId?: long(name='voiceId'),
  voiceLanguage?: string(name='voiceLanguage'),
  voiceModel?: string(name='voiceModel'),
  voiceName?: string(name='voiceName'),
  voiceType?: string(name='voiceType'),
  voiceUrl?: string(name='voiceUrl'),
}

model AddTextFeedbackRequest {
  content?: string(name='content'),
  quality?: int32(name='quality', example='1'),
  textId?: long(name='textId', example='8478'),
}

model AddTextFeedbackResponseBody = {
  requestId?: string(name='requestId', example='3239281273464326823'),
  success?: boolean(name='success', example='True'),
}

model AddTextFeedbackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddTextFeedbackResponseBody(name='body'),
}

/**
 * @summary 添加文案反馈
 *
 * @param request AddTextFeedbackRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddTextFeedbackResponse
 */
async function addTextFeedbackWithOptions(request: AddTextFeedbackRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddTextFeedbackResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.content)) {
    body['content'] = request.content;
  }
  if (!Util.isUnset(request.quality)) {
    body['quality'] = request.quality;
  }
  if (!Util.isUnset(request.textId)) {
    body['textId'] = request.textId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddTextFeedback',
    version = '2024-03-13',
    protocol = 'HTTPS',
    pathname = `/yic/yic-console/openService/v1/addTextFeedback`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 添加文案反馈
 *
 * @param request AddTextFeedbackRequest
 * @return AddTextFeedbackResponse
 */
async function addTextFeedback(request: AddTextFeedbackRequest): AddTextFeedbackResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return addTextFeedbackWithOptions(request, headers, runtime);
}

model CheckSessionRequest {
  projectId?: string(name='projectId', example='11111'),
  sessionId?: string(name='sessionId', example='121dlsga4o7golrl1hoja'),
}

model CheckSessionResponseBody = {
  requestId?: string(name='requestId', example='5389BE87-571B-573C-90ED-F07C5E68760B'),
  status?: string(name='status', example='FREE'),
}

model CheckSessionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckSessionResponseBody(name='body'),
}

/**
 * @summary 检查会话状态
 *
 * @param request CheckSessionRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CheckSessionResponse
 */
async function checkSessionWithOptions(request: CheckSessionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckSessionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['projectId'] = request.projectId;
  }
  if (!Util.isUnset(request.sessionId)) {
    body['sessionId'] = request.sessionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CheckSession',
    version = '2024-03-13',
    protocol = 'HTTPS',
    pathname = `/yic/yic-console/openService/v1/avatar/project/checkSession`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 检查会话状态
 *
 * @param request CheckSessionRequest
 * @return CheckSessionResponse
 */
async function checkSession(request: CheckSessionRequest): CheckSessionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return checkSessionWithOptions(request, headers, runtime);
}

model CountTextRequest {
  generationSource?: string(name='generationSource', description='API', example='PLATFORM'),
  industry?: string(name='industry', example='Garment'),
  publishStatus?: string(name='publishStatus', example='1'),
  style?: string(name='style', example='RED_BOOK'),
}

model CountTextResponseBody = {
  requestId?: string(name='RequestId', example='6C9CB64D-E2D3-5BF2-A9E6-2445F952F178'),
  countTextCmdList?: [ 
    {
      count?: long(name='count', example='4'),
      theme?: string(name='theme', example='RED_BOOK'),
    }
  ](name='countTextCmdList'),
}

model CountTextResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CountTextResponseBody(name='body'),
}

/**
 * @summary 文本数量统计
 *
 * @param request CountTextRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CountTextResponse
 */
async function countTextWithOptions(request: CountTextRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CountTextResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.generationSource)) {
    query['generationSource'] = request.generationSource;
  }
  if (!Util.isUnset(request.industry)) {
    query['industry'] = request.industry;
  }
  if (!Util.isUnset(request.publishStatus)) {
    query['publishStatus'] = request.publishStatus;
  }
  if (!Util.isUnset(request.style)) {
    query['style'] = request.style;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CountText',
    version = '2024-03-13',
    protocol = 'HTTPS',
    pathname = `/yic/yic-console/openService/v1/countText`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 文本数量统计
 *
 * @param request CountTextRequest
 * @return CountTextResponse
 */
async function countText(request: CountTextRequest): CountTextResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return countTextWithOptions(request, headers, runtime);
}

model CreateIllustrationTaskRequest {
  body?: IllustrationTaskCreateCmd(name='body'),
}

model CreateIllustrationTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IllustrationTaskResult  
}

/**
 * @summary 创建配图生成任务
 *
 * @param request CreateIllustrationTaskRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateIllustrationTaskResponse
 */
async function createIllustrationTaskWithOptions(textId: string, request: CreateIllustrationTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateIllustrationTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApi.Params{
    action = 'CreateIllustrationTask',
    version = '2024-03-13',
    protocol = 'HTTPS',
    pathname = `/yic/yic-console/openService/v1/texts/${OpenApiUtil.getEncodeParam(textId)}/illustrationTasks`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建配图生成任务
 *
 * @param request CreateIllustrationTaskRequest
 * @return CreateIllustrationTaskResponse
 */
async function createIllustrationTask(textId: string, request: CreateIllustrationTaskRequest): CreateIllustrationTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createIllustrationTaskWithOptions(textId, request, headers, runtime);
}

model CreateTextTaskRequest {
  body?: TextTaskCreateCmd(name='body'),
}

model CreateTextTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TextTaskResult  
}

/**
 * @summary 创建文案生成任务
 *
 * @param request CreateTextTaskRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateTextTaskResponse
 */
async function createTextTaskWithOptions(request: CreateTextTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateTextTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApi.Params{
    action = 'CreateTextTask',
    version = '2024-03-13',
    protocol = 'HTTPS',
    pathname = `/yic/yic-console/openService/v1/textTasks`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建文案生成任务
 *
 * @param request CreateTextTaskRequest
 * @return CreateTextTaskResponse
 */
async function createTextTask(request: CreateTextTaskRequest): CreateTextTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createTextTaskWithOptions(request, headers, runtime);
}

model GetIllustrationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IllustrationResult  
}

/**
 * @summary 查询配图
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetIllustrationResponse
 */
async function getIllustrationWithOptions(textId: string, illustrationId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetIllustrationResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetIllustration',
    version = '2024-03-13',
    protocol = 'HTTPS',
    pathname = `/yic/yic-console/openService/v1/texts/${OpenApiUtil.getEncodeParam(textId)}/illustrations/${OpenApiUtil.getEncodeParam(illustrationId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询配图
 *
 * @return GetIllustrationResponse
 */
async function getIllustration(textId: string, illustrationId: string): GetIllustrationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getIllustrationWithOptions(textId, illustrationId, headers, runtime);
}

model GetIllustrationTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IllustrationTaskResult  
}

/**
 * @summary 查询配图任务
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetIllustrationTaskResponse
 */
async function getIllustrationTaskWithOptions(textId: string, illustrationTaskId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetIllustrationTaskResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetIllustrationTask',
    version = '2024-03-13',
    protocol = 'HTTPS',
    pathname = `/yic/yic-console/openService/v1/texts/${OpenApiUtil.getEncodeParam(textId)}/illustrationTasks/${OpenApiUtil.getEncodeParam(illustrationTaskId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询配图任务
 *
 * @return GetIllustrationTaskResponse
 */
async function getIllustrationTask(textId: string, illustrationTaskId: string): GetIllustrationTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getIllustrationTaskWithOptions(textId, illustrationTaskId, headers, runtime);
}

model GetOssUploadTokenRequest {
  fileName?: string(name='fileName', description='This parameter is required.', example='8021678.png'),
  fileType?: string(name='fileType', description='This parameter is required.', example='ProductImage'),
}

model GetOssUploadTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOssUploadTokenResult  
}

/**
 * @summary 获取图片上传oss token
 *
 * @param request GetOssUploadTokenRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetOssUploadTokenResponse
 */
async function getOssUploadTokenWithOptions(request: GetOssUploadTokenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetOssUploadTokenResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.fileName)) {
    query['fileName'] = request.fileName;
  }
  if (!Util.isUnset(request.fileType)) {
    query['fileType'] = request.fileType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetOssUploadToken',
    version = '2024-03-13',
    protocol = 'HTTPS',
    pathname = `/yic/yic-console/openService/v1/uploadToken`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取图片上传oss token
 *
 * @param request GetOssUploadTokenRequest
 * @return GetOssUploadTokenResponse
 */
async function getOssUploadToken(request: GetOssUploadTokenRequest): GetOssUploadTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getOssUploadTokenWithOptions(request, headers, runtime);
}

model GetProjectTaskRequest {
  idempotentId?: string(name='IdempotentId', example='20230823218109326025-1200'),
  taskId?: string(name='taskId', example='313123123'),
}

model GetProjectTaskResponseBody = {
  errorMsg?: string(name='errorMsg', example='error'),
  requestId?: string(name='requestId', example='5389BE87-571B-573C-90ED-F07C5E68760B'),
  status?: string(name='status', example='SUCCESS'),
  videoDownloadUrl?: string(name='videoDownloadUrl', example='www.ali.com'),
  videoDuration?: int32(name='videoDuration', example='111'),
  videoUrl?: string(name='videoUrl', example='www.ali.com'),
}

model GetProjectTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetProjectTaskResponseBody(name='body'),
}

/**
 * @summary 获取数据人合成信息
 *
 * @param request GetProjectTaskRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetProjectTaskResponse
 */
async function getProjectTaskWithOptions(request: GetProjectTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetProjectTaskResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.idempotentId)) {
    query['IdempotentId'] = request.idempotentId;
  }
  if (!Util.isUnset(request.taskId)) {
    query['taskId'] = request.taskId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetProjectTask',
    version = '2024-03-13',
    protocol = 'HTTPS',
    pathname = `/yic/yic-console/openService/v1/digitalHuman/project/getProjectTask`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取数据人合成信息
 *
 * @param request GetProjectTaskRequest
 * @return GetProjectTaskResponse
 */
async function getProjectTask(request: GetProjectTaskRequest): GetProjectTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getProjectTaskWithOptions(request, headers, runtime);
}

model GetTextResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TextResult  
}

/**
 * @summary 查询文案
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetTextResponse
 */
async function getTextWithOptions(textId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetTextResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetText',
    version = '2024-03-13',
    protocol = 'HTTPS',
    pathname = `/yic/yic-console/openService/v1/texts/${OpenApiUtil.getEncodeParam(textId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询文案
 *
 * @return GetTextResponse
 */
async function getText(textId: string): GetTextResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getTextWithOptions(textId, headers, runtime);
}

model GetTextTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TextTaskResult  
}

/**
 * @summary 查询文案任务
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetTextTaskResponse
 */
async function getTextTaskWithOptions(textTaskId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetTextTaskResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetTextTask',
    version = '2024-03-13',
    protocol = 'HTTPS',
    pathname = `/yic/yic-console/openService/v1/textTasks/${OpenApiUtil.getEncodeParam(textTaskId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询文案任务
 *
 * @return GetTextTaskResponse
 */
async function getTextTask(textTaskId: string): GetTextTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getTextTaskWithOptions(textTaskId, headers, runtime);
}

model GetTextTemplateRequest {
  industry?: string(name='industry', example='Car'),
}

model GetTextTemplateResponseBody = {
  availableIndustry?: {
    name?: string(name='name', example='Car'),
    textModeTypes?: [ 
      {
        name?: string(name='name', example='Rewrite'),
        textStyles?: [ 
          {
            desc?: string(name='desc'),
            disabled?: boolean(name='disabled', example='false'),
            name?: string(name='name', example='RED_BOOK'),
            templateKey?: string(name='templateKey', example='111'),
          }
        ](name='textStyles'),
      }
    ](name='textModeTypes'),
  }(name='availableIndustry'),
  requestId?: string(name='requestId', example='3239281273464326823'),
}

model GetTextTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTextTemplateResponseBody(name='body'),
}

/**
 * @summary 查询表单配置
 *
 * @param request GetTextTemplateRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetTextTemplateResponse
 */
async function getTextTemplateWithOptions(request: GetTextTemplateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetTextTemplateResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.industry)) {
    query['industry'] = request.industry;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTextTemplate',
    version = '2024-03-13',
    protocol = 'HTTPS',
    pathname = `/yic/yic-console/openService/v1/texts/commands/getTextTemplate`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询表单配置
 *
 * @param request GetTextTemplateRequest
 * @return GetTextTemplateResponse
 */
async function getTextTemplate(request: GetTextTemplateRequest): GetTextTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getTextTemplateWithOptions(request, headers, runtime);
}

model ListAnchorRequest {
  anchorType?: string(name='anchorType', example='PUBLIC_MODEL'),
  coverRate?: string(name='coverRate', example='9:16'),
  digitalHumanType?: string(name='digitalHumanType', example='staticTransparency'),
  pageNumber?: int32(name='pageNumber', example='1'),
  pageSize?: int32(name='pageSize', example='10'),
  useScene?: string(name='useScene', example='offlineSynthesis'),
}

model ListAnchorResponseBody = {
  code?: string(name='code', description='code', example='200'),
  errorCode?: string(name='errorCode', example='Deduct.DeductTaskAlreadySuccess'),
  errorMessage?: string(name='errorMessage', example='Failed to proxy flink ui request, message: An error occurred: Invalid UUID string: jobsn'),
  list?: [
    AnchorResponse
  ](name='list'),
  requestId?: string(name='requestId', description='requestId', example='5389BE87-571B-573C-90ED-F07C5E68760B'),
  success?: boolean(name='success', example='True'),
  total?: int32(name='total', example='10'),
}

model ListAnchorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAnchorResponseBody(name='body'),
}

/**
 * @summary 获取数字人模特列表
 *
 * @param request ListAnchorRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListAnchorResponse
 */
async function listAnchorWithOptions(request: ListAnchorRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAnchorResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.anchorType)) {
    query['anchorType'] = request.anchorType;
  }
  if (!Util.isUnset(request.coverRate)) {
    query['coverRate'] = request.coverRate;
  }
  if (!Util.isUnset(request.digitalHumanType)) {
    query['digitalHumanType'] = request.digitalHumanType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.useScene)) {
    query['useScene'] = request.useScene;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAnchor',
    version = '2024-03-13',
    protocol = 'HTTPS',
    pathname = `/yic/yic-console/openService/v1/digitalHuman/anchorOpen/listAnchor`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取数字人模特列表
 *
 * @param request ListAnchorRequest
 * @return ListAnchorResponse
 */
async function listAnchor(request: ListAnchorRequest): ListAnchorResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listAnchorWithOptions(request, headers, runtime);
}

model ListTextThemesRequest {
  industry?: string(name='industry'),
}

model ListTextThemesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TextThemeListResult  
}

/**
 * @summary 查询文案主题列表
 *
 * @param request ListTextThemesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListTextThemesResponse
 */
async function listTextThemesWithOptions(request: ListTextThemesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListTextThemesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.industry)) {
    query['industry'] = request.industry;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTextThemes',
    version = '2024-03-13',
    protocol = 'HTTPS',
    pathname = `/yic/yic-console/openService/v1/textThemes`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询文案主题列表
 *
 * @param request ListTextThemesRequest
 * @return ListTextThemesResponse
 */
async function listTextThemes(request: ListTextThemesRequest): ListTextThemesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listTextThemesWithOptions(request, headers, runtime);
}

model ListTextsRequest {
  generationSource?: string(name='generationSource', example='API'),
  industry?: string(name='industry', example='Common'),
  keyword?: string(name='keyword'),
  pageNumber?: int32(name='pageNumber', example='1'),
  pageSize?: int32(name='pageSize', example='10'),
  publishStatus?: string(name='publishStatus', example='PUBLISH'),
  textStyleType?: string(name='textStyleType', example='WECHAT_MOMENT'),
  textTheme?: string(name='textTheme', example='xxx'),
}

model ListTextsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TextQueryResult  
}

/**
 * @summary 列举文案
 *
 * @param request ListTextsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListTextsResponse
 */
async function listTextsWithOptions(request: ListTextsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListTextsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.generationSource)) {
    query['generationSource'] = request.generationSource;
  }
  if (!Util.isUnset(request.industry)) {
    query['industry'] = request.industry;
  }
  if (!Util.isUnset(request.keyword)) {
    query['keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.publishStatus)) {
    query['publishStatus'] = request.publishStatus;
  }
  if (!Util.isUnset(request.textStyleType)) {
    query['textStyleType'] = request.textStyleType;
  }
  if (!Util.isUnset(request.textTheme)) {
    query['textTheme'] = request.textTheme;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTexts',
    version = '2024-03-13',
    protocol = 'HTTPS',
    pathname = `/yic/yic-console/openService/v1/texts`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 列举文案
 *
 * @param request ListTextsRequest
 * @return ListTextsResponse
 */
async function listTexts(request: ListTextsRequest): ListTextsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listTextsWithOptions(request, headers, runtime);
}

model ListVoiceModelsRequest {
  pageNumber?: int32(name='pageNumber', example='1'),
  pageSize?: int32(name='pageSize', example='10'),
  useScene?: string(name='useScene', example='offlineSynthesis'),
  voiceType?: string(name='voiceType', example='PRIVATE_VOICE'),
}

model ListVoiceModelsResponseBody = {
  code?: string(name='code', example='200'),
  errorCode?: string(name='errorCode', example='040002'),
  errorMessage?: string(name='errorMessage', example='Failed to proxy flink ui request, message: An error occurred: Invalid UUID string: jobsn'),
  list?: [
    VoiceModelResponse
  ](name='list'),
  requestId?: string(name='requestId', description='Id of the request', example='14878724-A835-578D-9DD5-4779ADCE9221'),
  success?: boolean(name='success', example='True'),
  total?: int32(name='total', example='10'),
}

model ListVoiceModelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListVoiceModelsResponseBody(name='body'),
}

/**
 * @summary 获取声音模版列表
 *
 * @param request ListVoiceModelsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListVoiceModelsResponse
 */
async function listVoiceModelsWithOptions(request: ListVoiceModelsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListVoiceModelsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.useScene)) {
    query['useScene'] = request.useScene;
  }
  if (!Util.isUnset(request.voiceType)) {
    query['voiceType'] = request.voiceType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListVoiceModels',
    version = '2024-03-13',
    protocol = 'HTTPS',
    pathname = `/yic/yic-console/openService/v1/digitalHuman/voiceOpen/listVoiceModels`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取声音模版列表
 *
 * @param request ListVoiceModelsRequest
 * @return ListVoiceModelsResponse
 */
async function listVoiceModels(request: ListVoiceModelsRequest): ListVoiceModelsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listVoiceModelsWithOptions(request, headers, runtime);
}

model QueryAvatarProjectRequest {
  projectId?: string(name='projectId', example='11111'),
}

model QueryAvatarProjectResponseBody = {
  agentId?: string(name='agentId', example='1000222'),
  errorMsg?: string(name='errorMsg', example='error'),
  projectName?: string(name='projectName', example='doc_test_3'),
  requestId?: string(name='requestId', example='2C331582-7390-5949-8D9A-AC8239185B37'),
  status?: string(name='status', example='DEPLOYING'),
}

model QueryAvatarProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAvatarProjectResponseBody(name='body'),
}

/**
 * @summary 查询数字人项目信息
 *
 * @param request QueryAvatarProjectRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryAvatarProjectResponse
 */
async function queryAvatarProjectWithOptions(request: QueryAvatarProjectRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAvatarProjectResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    query['projectId'] = request.projectId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryAvatarProject',
    version = '2024-03-13',
    protocol = 'HTTPS',
    pathname = `/yic/yic-console/openService/v1/avatar/project/queryAvatarProject`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询数字人项目信息
 *
 * @param request QueryAvatarProjectRequest
 * @return QueryAvatarProjectResponse
 */
async function queryAvatarProject(request: QueryAvatarProjectRequest): QueryAvatarProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return queryAvatarProjectWithOptions(request, headers, runtime);
}

model QueryAvatarResourceRequest {
  idempotentId?: string(name='idempotentId', example='11111'),
}

model QueryAvatarResourceResponseBody = {
  queryResourceInfoList?: [ 
    {
      resourceId?: string(name='resourceId', example='21275'),
      type?: string(name='type', example='STANDARD'),
      validPeriodTime?: string(name='validPeriodTime', example='1719904342237'),
    }
  ](name='queryResourceInfoList'),
  requestId?: string(name='requestId', example='D5798660-1531-5D12-9C20-16FEE9D22351'),
}

model QueryAvatarResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAvatarResourceResponseBody(name='body'),
}

/**
 * @summary 查找资源
 *
 * @param request QueryAvatarResourceRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryAvatarResourceResponse
 */
async function queryAvatarResourceWithOptions(request: QueryAvatarResourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAvatarResourceResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.idempotentId)) {
    query['idempotentId'] = request.idempotentId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryAvatarResource',
    version = '2024-03-13',
    protocol = 'HTTPS',
    pathname = `/yic/yic-console/openService/v1/avatar/project/queryResource`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查找资源
 *
 * @param request QueryAvatarResourceRequest
 * @return QueryAvatarResourceResponse
 */
async function queryAvatarResource(request: QueryAvatarResourceRequest): QueryAvatarResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return queryAvatarResourceWithOptions(request, headers, runtime);
}

model SelectResourceRequest {
  idempotentId?: string(name='idempotentId', example='1111'),
}

model SelectResourceResponseBody = {
  requestId?: string(name='requestId', example='0E8B1746-AE35-5C4B-A3A8-345B274AE32C'),
  resourceInfoList?: [ 
    {
      expireTime?: string(name='expireTime', example='111'),
      lastExpire?: int32(name='lastExpire', example='11'),
      remainCount?: int32(name='remainCount', example='1249'),
      resourceType?: int32(name='resourceType', example='2'),
      unit?: string(name='unit', example='second'),
    }
  ](name='resourceInfoList'),
}

model SelectResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SelectResourceResponseBody(name='body'),
}

/**
 * @summary 查询离线数字人剩余资源
 *
 * @param request SelectResourceRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return SelectResourceResponse
 */
async function selectResourceWithOptions(request: SelectResourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SelectResourceResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.idempotentId)) {
    query['idempotentId'] = request.idempotentId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SelectResource',
    version = '2024-03-13',
    protocol = 'HTTPS',
    pathname = `/yic/yic-console/openService/v1/digitalHuman/project/commands/overview`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询离线数字人剩余资源
 *
 * @param request SelectResourceRequest
 * @return SelectResourceResponse
 */
async function selectResource(request: SelectResourceRequest): SelectResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return selectResourceWithOptions(request, headers, runtime);
}

model SendTextMsgRequest {
  projectId?: string(name='projectId', example='126000030'),
  requestId?: string(name='requestId', example='52775239-1575-5C07-A4AE-1835D120E4A6'),
  sessionId?: string(name='sessionId', example='tcm9xac9dsfbfgm8hf5k94l3cqybwh9o3mn0iuyytdgd9qoejxf1crxsdvuvr8fu0zudk5px4vsa3e3fgcclplkiuo7kyy3sqgscvhejmooblaiv64ww8cvlxvin2urzyhooqj33y7gvodef0sxn22n9q58o7xlupabiknxsv46qe7kof8nuc4be8kyhi01'),
  text?: string(name='text'),
  type?: int32(name='type', example='1'),
}

model SendTextMsgResponseBody = {
  requestId?: string(name='requestId', example='827BF714-19E7-51B5-A434-C21BFEE05983'),
  status?: string(name='status', example='SUCCESS'),
}

model SendTextMsgResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendTextMsgResponseBody(name='body'),
}

/**
 * @summary 发送文本消息
 *
 * @param request SendTextMsgRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return SendTextMsgResponse
 */
async function sendTextMsgWithOptions(request: SendTextMsgRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SendTextMsgResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['projectId'] = request.projectId;
  }
  if (!Util.isUnset(request.requestId)) {
    body['requestId'] = request.requestId;
  }
  if (!Util.isUnset(request.sessionId)) {
    body['sessionId'] = request.sessionId;
  }
  if (!Util.isUnset(request.text)) {
    body['text'] = request.text;
  }
  if (!Util.isUnset(request.type)) {
    body['type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SendTextMsg',
    version = '2024-03-13',
    protocol = 'HTTPS',
    pathname = `/yic/yic-console/openService/v1/avatar/project/sendTextMsg`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 发送文本消息
 *
 * @param request SendTextMsgRequest
 * @return SendTextMsgResponse
 */
async function sendTextMsg(request: SendTextMsgRequest): SendTextMsgResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return sendTextMsgWithOptions(request, headers, runtime);
}

model StartAvatarSessionRequest {
  projectId?: string(name='projectId', example='13534711288320'),
  requestId?: string(name='requestId', example='15ED6083-B0B8-5B2A-BEDB-94A5C687C812'),
}

model StartAvatarSessionResponseBody = {
  channelToken?: string(name='channelToken'),
  requestId?: string(name='requestId', example='0E8B1746-AE35-5C4B-A3A8-345B274AE32C'),
  sessionId?: string(name='sessionId', example='121dlsga4o7golrl1hoja'),
}

model StartAvatarSessionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartAvatarSessionResponseBody(name='body'),
}

/**
 * @summary 启动会话
 *
 * @param request StartAvatarSessionRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return StartAvatarSessionResponse
 */
async function startAvatarSessionWithOptions(request: StartAvatarSessionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartAvatarSessionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['projectId'] = request.projectId;
  }
  if (!Util.isUnset(request.requestId)) {
    body['requestId'] = request.requestId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StartAvatarSession',
    version = '2024-03-13',
    protocol = 'HTTPS',
    pathname = `/yic/yic-console/openService/v1/avatar/project/startAvatarSession`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 启动会话
 *
 * @param request StartAvatarSessionRequest
 * @return StartAvatarSessionResponse
 */
async function startAvatarSession(request: StartAvatarSessionRequest): StartAvatarSessionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return startAvatarSessionWithOptions(request, headers, runtime);
}

model StopAvatarSessionRequest {
  projectId?: string(name='projectId', example='124900036'),
  sessionId?: string(name='sessionId', example='121dlsga4o7golrl1hojazg0u9lvysk0uyczgd79be2a4hkr9ijrblmb5qohi5iaja3p5j633doqj4t2uu3sek2i49hzkao0bli4bch4tnloyx22odd7sot9dxl5xfd0hbp7fl9dehnqofkb9csebf0nuezj8bwgec8ei6dby0encu5y88ky6oqensuqnj'),
}

model StopAvatarSessionResponseBody = {
  requestId?: string(name='requestId', example='725E87CD-F2DE-5FC4-8A09-2EBDFBF26DAA'),
  status?: string(name='status', example='Stopped'),
}

model StopAvatarSessionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopAvatarSessionResponseBody(name='body'),
}

/**
 * @summary 停止会话
 *
 * @param request StopAvatarSessionRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return StopAvatarSessionResponse
 */
async function stopAvatarSessionWithOptions(request: StopAvatarSessionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StopAvatarSessionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['projectId'] = request.projectId;
  }
  if (!Util.isUnset(request.sessionId)) {
    body['sessionId'] = request.sessionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StopAvatarSession',
    version = '2024-03-13',
    protocol = 'HTTPS',
    pathname = `/yic/yic-console/openService/v1/avatar/project/stopAvatarSession`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 停止会话
 *
 * @param request StopAvatarSessionRequest
 * @return StopAvatarSessionResponse
 */
async function stopAvatarSession(request: StopAvatarSessionRequest): StopAvatarSessionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return stopAvatarSessionWithOptions(request, headers, runtime);
}

model StopProjectTaskRequest {
  taskId?: string(name='taskId', example='1111111'),
}

model StopProjectTaskResponseBody = {
  requestId?: string(name='requestId', example='86A90C40-D1AB-50DA-A4B1-0D545F80F2FE'),
  success?: boolean(name='success', example='True'),
}

model StopProjectTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopProjectTaskResponseBody(name='body'),
}

/**
 * @summary 视频合成任务停止
 *
 * @param request StopProjectTaskRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return StopProjectTaskResponse
 */
async function stopProjectTaskWithOptions(request: StopProjectTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StopProjectTaskResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.taskId)) {
    body['taskId'] = request.taskId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StopProjectTask',
    version = '2024-03-13',
    protocol = 'HTTPS',
    pathname = `/yic/yic-console/openService/v1/digitalHuman/project/stop`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 视频合成任务停止
 *
 * @param request StopProjectTaskRequest
 * @return StopProjectTaskResponse
 */
async function stopProjectTask(request: StopProjectTaskRequest): StopProjectTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return stopProjectTaskWithOptions(request, headers, runtime);
}

model SubmitProjectTaskRequest {
  frames?: [ 
    {
      index?: int32(name='index', example='1'),
      layers?: [ 
        {
          height?: int32(name='height', example='222'),
          index?: int32(name='index', example='1'),
          material?: {
            format?: string(name='format', example='video/mp4'),
            id?: string(name='id', example='38863'),
            url?: string(name='url', example='https://meeting.dingtalk.com/j/1COFppy0POR'),
          }(name='material'),
          positionX?: int32(name='positionX', example='11'),
          positionY?: int32(name='positionY', example='22'),
          type?: string(name='type', example='ANCHOR'),
          width?: int32(name='width', example='111'),
        }
      ](name='layers'),
      subtitle?: {
        alignment?: string(name='alignment', example='BottomLeft'),
        backgroundColor?: string(name='backgroundColor', example='#ffffff'),
        font?: string(name='font', example='SimSun'),
        fontColor?: string(name='fontColor', example='#ffffff'),
        fontSize?: int32(name='fontSize', example='32'),
        maxCharLength?: int32(name='maxCharLength', example='11'),
        positionX?: int32(name='positionX', example='2'),
        positionY?: int32(name='positionY', example='1'),
        textHeight?: int32(name='textHeight', example='22'),
        textWidth?: int32(name='textWidth', example='11'),
      }(name='subtitle'),
      videoScript?: {
        audioUrl?: string(name='audioUrl', example='https://meeting.dingtalk.com/j/1COFppy0POR'),
        speedRate?: string(name='speedRate', example='2.0'),
        textContent?: string(name='textContent'),
        type?: string(name='type', example='TEXT'),
        voiceTemplateId?: long(name='voiceTemplateId', example='11'),
        volume?: int32(name='volume', example='20'),
      }(name='videoScript'),
    }
  ](name='frames', description='frame'),
  scaleType?: string(name='scaleType', example='9:16'),
  subtitleTag?: int32(name='subtitleTag', example='1'),
  transparentBackground?: int32(name='transparentBackground'),
}

model SubmitProjectTaskResponseBody = {
  requestId?: string(name='requestId', example='551FF252-6CFC-5DDA-9F84-9B07302385C2'),
  taskId?: string(name='taskId', example='313123123'),
}

model SubmitProjectTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitProjectTaskResponseBody(name='body'),
}

/**
 * @summary 提交离线数字人合成任务
 *
 * @param request SubmitProjectTaskRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitProjectTaskResponse
 */
async function submitProjectTaskWithOptions(request: SubmitProjectTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SubmitProjectTaskResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.frames)) {
    body['frames'] = request.frames;
  }
  if (!Util.isUnset(request.scaleType)) {
    body['scaleType'] = request.scaleType;
  }
  if (!Util.isUnset(request.subtitleTag)) {
    body['subtitleTag'] = request.subtitleTag;
  }
  if (!Util.isUnset(request.transparentBackground)) {
    body['transparentBackground'] = request.transparentBackground;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SubmitProjectTask',
    version = '2024-03-13',
    protocol = 'HTTPS',
    pathname = `/yic/yic-console/openService/v1/digitalHuman/project/submitProjectTask`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 提交离线数字人合成任务
 *
 * @param request SubmitProjectTaskRequest
 * @return SubmitProjectTaskResponse
 */
async function submitProjectTask(request: SubmitProjectTaskRequest): SubmitProjectTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return submitProjectTaskWithOptions(request, headers, runtime);
}

