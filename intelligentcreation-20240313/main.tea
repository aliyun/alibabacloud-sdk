/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('intelligentcreation', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model GetOssUploadTokenResult {
  requestId?: string(name='requestId', example='3239281273464326823'),
  uploadInfo?: UploadInfo(name='uploadInfo', description='This parameter is required.'),
}

model Illustration {
  illustrationId?: long(name='illustrationId'),
  oss?: string(name='oss'),
}

model IllustrationResult {
  illustration?: Illustration(name='illustration'),
  requestId?: string(name='requestId', example='3239281273464326823'),
}

model IllustrationTask {
  gmtCreate?: string(name='gmtCreate'),
  gmtModified?: string(name='gmtModified'),
  illustrationIds?: [ long ](name='illustrationIds'),
  illustrationTaskId?: long(name='illustrationTaskId'),
  taskStatus?: string(name='taskStatus', example='Success'),
  textId?: long(name='textId'),
}

model IllustrationTaskCreateCmd {
  backgroundType?: int32(name='backgroundType', example='0-不换背景，1-换背景'),
  dstHeight?: int32(name='dstHeight', example='1024'),
  dstWidth?: int32(name='dstWidth', example='1024'),
  idempotentId?: string(name='idempotentId', example='28274623764834'),
  nums?: int32(name='nums', example='4'),
  ossPaths?: [ string ](name='ossPaths'),
  stickerText?: string(name='stickerText'),
}

model IllustrationTaskResult {
  illustrationTask?: IllustrationTask(name='illustrationTask'),
  requestId?: string(name='requestId', example='3239281273464326823'),
}

model ReferenceTag {
  referenceContent?: string(name='referenceContent'),
  referenceTitle?: string(name='referenceTitle'),
}

model Text {
  desc?: string(name='desc', description='This parameter is required.', example='xxx'),
  gmtCreate?: string(name='gmtCreate'),
  gmtModified?: string(name='gmtModified'),
  illustrationTaskIdList?: [ long ](name='illustrationTaskIdList'),
  textContent?: string(name='textContent'),
  textId?: long(name='textId', description='This parameter is required.', example='1'),
  textIllustrationTag?: boolean(name='textIllustrationTag', example='true'),
  textModeType?: string(name='textModeType'),
  textStatus?: string(name='textStatus', description='This parameter is required.', example='Generating'),
  textTaskId?: long(name='textTaskId', description='This parameter is required.', example='123'),
  title?: string(name='title', example='xxx'),
  userNameCreate?: string(name='userNameCreate', description='This parameter is required.', example='xxx'),
  userNameModified?: string(name='userNameModified', description='This parameter is required.', example='xxx'),
}

model TextResult {
  requestId?: string(name='requestId', example='3239281273464326823'),
  text?: Text(name='text', description='This parameter is required.'),
}

model TextTask {
  contentRequirement?: string(name='contentRequirement', example='九寨沟三日游攻略'),
  gmtCreate?: string(name='gmtCreate'),
  gmtModified?: string(name='gmtModified'),
  introduction?: string(name='introduction'),
  nums?: int32(name='nums', description='This parameter is required.', example='1'),
  point?: string(name='point', example='xxx'),
  referenceTag?: ReferenceTag(name='referenceTag'),
  relatedRagId?: int32(name='relatedRagId'),
  style?: string(name='style', description='This parameter is required.'),
  target?: string(name='target'),
  textIds?: [ long ](name='textIds'),
  textModeType?: string(name='textModeType', description='This parameter is required.'),
  textTaskId?: long(name='textTaskId'),
  textTaskStatus?: string(name='textTaskStatus'),
  theme?: string(name='theme', example='旅游路线'),
  themeDesc?: string(name='themeDesc'),
}

model TextTaskCreateCmd {
  contentRequirement?: string(name='contentRequirement', example='极氪007新车上市'),
  idempotentId?: string(name='idempotentId', example='28274623764834'),
  introduction?: string(name='introduction', example='xxx'),
  number?: int32(name='number', description='This parameter is required.', example='4'),
  point?: string(name='point', example='超强续航'),
  referenceTag?: ReferenceTag(name='referenceTag'),
  relatedRagIds?: [ long ](name='relatedRagIds', example='1'),
  style?: string(name='style', description='This parameter is required.'),
  target?: string(name='target'),
  textModeType?: string(name='textModeType', description='This parameter is required.'),
  theme?: string(name='theme', example='旅游路线'),
}

model TextTaskResult {
  textTask?: TextTask(name='textTask'),
}

model TextTheme {
  desc?: string(name='desc'),
  name?: string(name='name'),
}

model TextThemeListResult {
  requestId?: string(name='requestId', example='3239281273464326823'),
  textThemeList?: [
    TextTheme
  ](name='textThemeList', description='This parameter is required.'),
}

model UploadInfo {
  accessId?: string(name='accessId', description='This parameter is required.', example='xxxxxx'),
  host?: string(name='host', description='This parameter is required.', example='yic-pre.oss-cn-hangzhou.aliyuncs.com'),
  key?: string(name='key', description='This parameter is required.', example='1234/temp-novels/xxxx-xxx-xx.txt'),
  policy?: string(name='policy', description='This parameter is required.', example='xxxxxxxx'),
  policySignature?: string(name='policySignature', description='This parameter is required.', example='xxxxxxx'),
  url?: string(name='url', example='xxxxxx'),
}

model CreateIllustrationTaskRequest {
  body?: IllustrationTaskCreateCmd(name='body'),
}

model CreateIllustrationTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IllustrationTaskResult  
}

/**
 * @summary 创建配图生成任务
 *
 * @param request CreateIllustrationTaskRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateIllustrationTaskResponse
 */
async function createIllustrationTaskWithOptions(textId: string, request: CreateIllustrationTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateIllustrationTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApi.Params{
    action = 'CreateIllustrationTask',
    version = '2024-03-13',
    protocol = 'HTTPS',
    pathname = `/yic/yic-console/openService/v1/texts/${OpenApiUtil.getEncodeParam(textId)}/illustrationTasks`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建配图生成任务
 *
 * @param request CreateIllustrationTaskRequest
 * @return CreateIllustrationTaskResponse
 */
async function createIllustrationTask(textId: string, request: CreateIllustrationTaskRequest): CreateIllustrationTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createIllustrationTaskWithOptions(textId, request, headers, runtime);
}

model CreateTextTaskRequest {
  body?: TextTaskCreateCmd(name='body'),
}

model CreateTextTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TextTaskResult  
}

/**
 * @summary 创建文案生成任务
 *
 * @param request CreateTextTaskRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateTextTaskResponse
 */
async function createTextTaskWithOptions(request: CreateTextTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateTextTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApi.Params{
    action = 'CreateTextTask',
    version = '2024-03-13',
    protocol = 'HTTPS',
    pathname = `/yic/yic-console/openService/v1/textTasks`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建文案生成任务
 *
 * @param request CreateTextTaskRequest
 * @return CreateTextTaskResponse
 */
async function createTextTask(request: CreateTextTaskRequest): CreateTextTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createTextTaskWithOptions(request, headers, runtime);
}

model GetIllustrationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IllustrationResult  
}

/**
 * @summary 查询配图
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetIllustrationResponse
 */
async function getIllustrationWithOptions(textId: string, illustrationId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetIllustrationResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetIllustration',
    version = '2024-03-13',
    protocol = 'HTTPS',
    pathname = `/yic/yic-console/openService/v1/texts/${OpenApiUtil.getEncodeParam(textId)}/illustrations/${OpenApiUtil.getEncodeParam(illustrationId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询配图
 *
 * @return GetIllustrationResponse
 */
async function getIllustration(textId: string, illustrationId: string): GetIllustrationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getIllustrationWithOptions(textId, illustrationId, headers, runtime);
}

model GetIllustrationTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IllustrationTaskResult  
}

/**
 * @summary 查询配图任务
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetIllustrationTaskResponse
 */
async function getIllustrationTaskWithOptions(textId: string, illustrationTaskId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetIllustrationTaskResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetIllustrationTask',
    version = '2024-03-13',
    protocol = 'HTTPS',
    pathname = `/yic/yic-console/openService/v1/texts/${OpenApiUtil.getEncodeParam(textId)}/illustrationTasks/${OpenApiUtil.getEncodeParam(illustrationTaskId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询配图任务
 *
 * @return GetIllustrationTaskResponse
 */
async function getIllustrationTask(textId: string, illustrationTaskId: string): GetIllustrationTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getIllustrationTaskWithOptions(textId, illustrationTaskId, headers, runtime);
}

model GetOssUploadTokenRequest {
  fileName?: string(name='fileName', description='This parameter is required.', example='8021678.png'),
  fileType?: string(name='fileType', description='This parameter is required.', example='ProductImage'),
}

model GetOssUploadTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOssUploadTokenResult  
}

/**
 * @summary 获取图片上传oss token
 *
 * @param request GetOssUploadTokenRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetOssUploadTokenResponse
 */
async function getOssUploadTokenWithOptions(request: GetOssUploadTokenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetOssUploadTokenResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.fileName)) {
    query['fileName'] = request.fileName;
  }
  if (!Util.isUnset(request.fileType)) {
    query['fileType'] = request.fileType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetOssUploadToken',
    version = '2024-03-13',
    protocol = 'HTTPS',
    pathname = `/yic/yic-console/openService/v1/uploadToken`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取图片上传oss token
 *
 * @param request GetOssUploadTokenRequest
 * @return GetOssUploadTokenResponse
 */
async function getOssUploadToken(request: GetOssUploadTokenRequest): GetOssUploadTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getOssUploadTokenWithOptions(request, headers, runtime);
}

model GetTextResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TextResult  
}

/**
 * @summary 查询文案
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetTextResponse
 */
async function getTextWithOptions(textId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetTextResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetText',
    version = '2024-03-13',
    protocol = 'HTTPS',
    pathname = `/yic/yic-console/openService/v1/texts/${OpenApiUtil.getEncodeParam(textId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询文案
 *
 * @return GetTextResponse
 */
async function getText(textId: string): GetTextResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getTextWithOptions(textId, headers, runtime);
}

model GetTextTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TextTaskResult  
}

/**
 * @summary 查询文案任务
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetTextTaskResponse
 */
async function getTextTaskWithOptions(textTaskId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetTextTaskResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetTextTask',
    version = '2024-03-13',
    protocol = 'HTTPS',
    pathname = `/yic/yic-console/openService/v1/textTasks/${OpenApiUtil.getEncodeParam(textTaskId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询文案任务
 *
 * @return GetTextTaskResponse
 */
async function getTextTask(textTaskId: string): GetTextTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getTextTaskWithOptions(textTaskId, headers, runtime);
}

model ListTextThemesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TextThemeListResult  
}

/**
 * @summary 查询文案主题列表
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListTextThemesResponse
 */
async function listTextThemesWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): ListTextThemesResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListTextThemes',
    version = '2024-03-13',
    protocol = 'HTTPS',
    pathname = `/yic/yic-console/openService/v1/textThemes`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询文案主题列表
 *
 * @return ListTextThemesResponse
 */
async function listTextThemes(): ListTextThemesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listTextThemesWithOptions(headers, runtime);
}

