/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'IntelligentCreation';
  @version = '2024-03-13';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddDocumentInfo {
  documentType: string(name='documentType', description='This parameter is required.', example='pdf'),
  name: string(name='name', description='This parameter is required.', maxLength=64),
  url: string(name='url', description='This parameter is required.'),
}

model AddDocumentResult {
  docName?: string(name='docName', example='example.pdf'),
  documentInfo?: DocumentInfo(name='documentInfo'),
  errorMessage?: string(name='errorMessage', example='true'),
  success?: boolean(name='success', example='true'),
}

model AnchorResponse {
  anchorCategory?: string(name='anchorCategory'),
  anchorId?: string(name='anchorId'),
  anchorMaterialName?: string(name='anchorMaterialName'),
  anchorType?: string(name='anchorType'),
  coverHeight?: int32(name='coverHeight'),
  coverRate?: string(name='coverRate'),
  coverThumbnailUrl?: string(name='coverThumbnailUrl'),
  coverUrl?: string(name='coverUrl'),
  coverWeight?: int32(name='coverWeight'),
  digitalHumanType?: string(name='digitalHumanType'),
  gender?: string(name='gender'),
  resourceTypeDesc?: string(name='resourceTypeDesc'),
  status?: string(name='status'),
  supportBgChange?: int32(name='supportBgChange'),
  useScene?: string(name='useScene'),
}

model BatchAddDocumentResult {
  addDocumentResults: [
    AddDocumentResult
  ](name='addDocumentResults', description='This parameter is required.'),
  requestId?: string(name='requestId', example='3239281273464326823'),
}

model DocumentInfo {
  documentType?: string(name='documentType'),
  id?: string(name='id'),
  name?: string(name='name'),
  processStatus?: string(name='processStatus'),
}

model DocumentResult {
  documentInfo?: DocumentInfo(name='documentInfo'),
  requestId?: string(name='requestId', example='3239281273464326823'),
}

model GetOssUploadTokenResult {
  requestId?: string(name='requestId', example='3239281273464326823'),
  uploadInfo: UploadInfo(name='uploadInfo', description='This parameter is required.'),
}

model Illustration {
  illustrationId?: long(name='illustrationId'),
  oss?: string(name='oss'),
}

model IllustrationResult {
  illustration?: Illustration(name='illustration'),
  requestId?: string(name='requestId', example='3239281273464326823'),
}

model IllustrationTask {
  gmtCreate?: string(name='gmtCreate'),
  gmtModified?: string(name='gmtModified'),
  illustrationIds?: [ long ](name='illustrationIds'),
  illustrationTaskId?: long(name='illustrationTaskId'),
  taskStatus?: string(name='taskStatus', example='Success'),
  textId?: long(name='textId'),
}

model IllustrationTaskCreateCmd {
  backgroundType?: int32(name='backgroundType', example='0-不换背景，1-换背景'),
  dstHeight?: int32(name='dstHeight', example='1024'),
  dstWidth?: int32(name='dstWidth', example='1024'),
  idempotentId?: string(name='idempotentId', example='28274623764834'),
  imageUrls?: [ string ](name='imageUrls'),
  nums?: int32(name='nums', example='4'),
  ossPaths?: [ string ](name='ossPaths'),
  stickerText?: string(name='stickerText'),
}

model IllustrationTaskResult {
  illustrationTask?: IllustrationTask(name='illustrationTask'),
  requestId?: string(name='requestId', example='3239281273464326823'),
}

model KnowledgeBaseInfo {
  description?: string(name='description'),
  id?: string(name='id'),
  industry?: string(name='industry'),
  knowledgeBaseType?: string(name='knowledgeBaseType'),
  name?: string(name='name'),
}

model KnowledgeBaseListResult {
  knowledgeBases?: [
    KnowledgeBaseInfo
  ](name='knowledgeBases'),
  requestId?: string(name='requestId', example='3239281273464326823'),
  total: int32(name='total', description='This parameter is required.', example='10'),
}

model ReferenceTag {
  referenceContent?: string(name='referenceContent'),
  referenceTitle?: string(name='referenceTitle'),
}

model Text {
  agentId?: string(name='agentId'),
  agentName?: string(name='agentName'),
  desc: string(name='desc', description='This parameter is required.', example='xxx'),
  errMsg?: string(name='errMsg'),
  gmtCreate?: string(name='gmtCreate'),
  gmtModified?: string(name='gmtModified'),
  illustrationTaskIdList?: [ long ](name='illustrationTaskIdList'),
  publishStatus?: string(name='publishStatus'),
  textContent?: string(name='textContent'),
  textId: long(name='textId', description='This parameter is required.', example='1'),
  textIllustrationTag?: boolean(name='textIllustrationTag', example='true'),
  textModeType?: string(name='textModeType'),
  textStatus: string(name='textStatus', description='This parameter is required.', example='Generating'),
  textStyleType?: string(name='textStyleType'),
  textTaskId: long(name='textTaskId', description='This parameter is required.', example='123'),
  textThemes?: [ string ](name='textThemes'),
  title?: string(name='title', example='xxx'),
  userNameCreate: string(name='userNameCreate', description='This parameter is required.', example='xxx'),
  userNameModified: string(name='userNameModified', description='This parameter is required.', example='xxx'),
}

model TextQueryResult {
  requestId?: string(name='requestId'),
  texts?: [
    Text
  ](name='texts'),
  total?: int32(name='total', example='10'),
}

model TextResult {
  requestId?: string(name='requestId', example='3239281273464326823'),
  text: Text(name='text', description='This parameter is required.'),
}

model TextTask {
  agentId?: string(name='agentId'),
  agentName?: string(name='agentName'),
  contentRequirement?: string(name='contentRequirement', example='九寨沟三日游攻略'),
  gmtCreate?: string(name='gmtCreate'),
  gmtModified?: string(name='gmtModified'),
  introduction?: string(name='introduction'),
  nums: int32(name='nums', description='This parameter is required.', example='1'),
  point?: string(name='point', example='xxx'),
  referenceTag?: ReferenceTag(name='referenceTag'),
  relatedRagIds?: [ long ](name='relatedRagIds'),
  style: string(name='style', description='This parameter is required.'),
  target?: string(name='target'),
  textIds?: [ long ](name='textIds'),
  textModeType: string(name='textModeType', description='This parameter is required.'),
  textTaskId?: long(name='textTaskId'),
  textTaskStatus?: string(name='textTaskStatus'),
  texts?: [
    Text
  ](name='texts'),
  theme?: string(name='theme', example='旅游路线'),
  themeDesc?: string(name='themeDesc'),
}

model TextTaskCreateCmd {
  agentId?: string(name='agentId'),
  contentRequirement?: string(name='contentRequirement', example='极氪007新车上市'),
  idempotentId?: string(name='idempotentId', example='28274623764834'),
  industry?: string(name='industry'),
  introduction?: string(name='introduction', example='xxx'),
  number: int32(name='number', description='This parameter is required.', example='4'),
  point?: string(name='point', example='超强续航'),
  referenceTag?: ReferenceTag(name='referenceTag'),
  relatedRagIds?: [ long ](name='relatedRagIds', example='1'),
  streamApi?: boolean(name='streamApi', example='true'),
  style: string(name='style', description='This parameter is required.'),
  target?: string(name='target'),
  textModeType: string(name='textModeType', description='This parameter is required.'),
  theme?: string(name='theme', example='旅游路线'),
  themes?: [ string ](name='themes'),
}

model TextTaskResult {
  textTask?: TextTask(name='textTask'),
}

model TextTheme {
  desc?: string(name='desc'),
  name?: string(name='name'),
}

model TextThemeListResult {
  requestId?: string(name='requestId', example='3239281273464326823'),
  textThemeList: [
    TextTheme
  ](name='textThemeList', description='This parameter is required.'),
}

model UploadInfo {
  accessId: string(name='accessId', description='This parameter is required.', example='xxxxxx'),
  host: string(name='host', description='This parameter is required.', example='yic-pre.oss-cn-hangzhou.aliyuncs.com'),
  key: string(name='key', description='This parameter is required.', example='1234/temp-novels/xxxx-xxx-xx.txt'),
  policy: string(name='policy', description='This parameter is required.', example='xxxxxxxx'),
  policySignature: string(name='policySignature', description='This parameter is required.', example='xxxxxxx'),
  url?: string(name='url', example='xxxxxx'),
}

model VoiceModelResponse {
  resourceTypeDesc?: string(name='resourceTypeDesc'),
  ttsVersion?: int32(name='ttsVersion'),
  useScene?: string(name='useScene'),
  voiceDesc?: string(name='voiceDesc'),
  voiceGender?: string(name='voiceGender'),
  voiceId?: long(name='voiceId'),
  voiceLanguage?: string(name='voiceLanguage'),
  voiceModel?: string(name='voiceModel'),
  voiceName?: string(name='voiceName'),
  voiceType?: string(name='voiceType'),
  voiceUrl?: string(name='voiceUrl'),
}

model AddTextFeedbackRequest {
  content?: string(name='content', position='Body'),
  quality?: int32(name='quality', example='1', position='Body'),
  textId?: long(name='textId', example='8478', position='Body'),
}

model AddTextFeedbackResponseBody = {
  requestId?: string(name='requestId', example='3239281273464326823'),
  success?: boolean(name='success', example='True'),
}

model AddTextFeedbackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddTextFeedbackResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddTextFeedback  AddTextFeedbackRequest
  * @return AddTextFeedbackResponse
 */
async function addTextFeedback(request: AddTextFeedbackRequest): AddTextFeedbackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddTextFeedback', 'POST', '/yic/yic-console/openService/v1/addTextFeedback', 'json', false, 'json', request);
}

model BatchAddDocumentRequest {
  knowledgeBaseId?: string(name='knowledgeBaseId', example='"186432649"', position='Path'),
  addDocumentInfos?: [
    AddDocumentInfo
  ](name='addDocumentInfos', position='Body'),
}

model BatchAddDocumentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchAddDocumentResult  
}

/**
  * @param request  the request parameters of BatchAddDocument  BatchAddDocumentRequest
  * @return BatchAddDocumentResponse
 */
async function batchAddDocument(request: BatchAddDocumentRequest): BatchAddDocumentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BatchAddDocument', 'POST', '/yic/yic-console/openService/v1/knowledge-base/{knowledgeBaseId}/documents', 'json', false, 'json', request);
}

model BatchCreateAICoachTaskRequest {
  requestId?: string(name='requestId', example='7915125A-0D96-5A25-A54B-D3B739A86AFC', position='Body'),
  scriptRecordId?: string(name='scriptRecordId', example='1', position='Body'),
  studentIds?: [ string ](name='studentIds', position='Body'),
  studentList?: [ 
    {
      studentAudioUrl?: string(name='studentAudioUrl'),
      studentId?: string(name='studentId'),
    }
  ](name='studentList', position='Body'),
}

model BatchCreateAICoachTaskResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='10923AA3-F7A1-5EA0-ACCA-D704269EAA78'),
  taskIds?: [ string ](name='taskIds'),
}

model BatchCreateAICoachTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchCreateAICoachTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchCreateAICoachTask  BatchCreateAICoachTaskRequest
  * @return BatchCreateAICoachTaskResponse
 */
async function batchCreateAICoachTask(request: BatchCreateAICoachTaskRequest): BatchCreateAICoachTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BatchCreateAICoachTask', 'POST', '/yic/yic-console/openService/v1/aicoach/batchCreateTask', 'json', false, 'json', request);
}

model BatchGetProjectTaskRequest {
  taskIdList?: [ string ](name='taskIdList', shrink='simple', position='Query'),
}

model BatchGetProjectTaskResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='11'),
  resultList?: [ 
    {
      errorMsg?: string(name='errorMsg'),
      status?: string(name='status', example='SUCCESS'),
      taskId?: string(name='taskId', example='11'),
      videoDownloadUrl?: string(name='videoDownloadUrl', example='http'),
      videoDuration?: int32(name='videoDuration', example='1000'),
      videoUrl?: string(name='videoUrl', example='http'),
    }
  ](name='resultList'),
}

model BatchGetProjectTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchGetProjectTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchGetProjectTask  BatchGetProjectTaskRequest
  * @return BatchGetProjectTaskResponse
 */
async function batchGetProjectTask(request: BatchGetProjectTaskRequest): BatchGetProjectTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BatchGetProjectTask', 'GET', '/yic/yic-console/openService/v1/digitalHuman/project/batchGetProjectTask', 'json', false, 'json', request);
}

model BatchGetTrainTaskRequest {
  aliyunMainId?: string(name='aliyunMainId', example='1524004782431111', position='Query'),
  taskIdList?: [ string ](name='taskIdList', shrink='simple', position='Query'),
}

model BatchGetTrainTaskResponseBody = {
  requestId?: string(name='requestId', example='2226A26A-26E5-5AB9-A14A-54D612FCF96A'),
  voiceList?: [ 
    {
      aliyunSubId?: string(name='aliyunSubId', example='1524004782438111'),
      auditFailMessage?: string(name='auditFailMessage'),
      auditStatus?: string(name='auditStatus', example='auditFail'),
      createTime?: string(name='createTime', example='yyyy-MM-dd HH:mm:ss'),
      gender?: string(name='gender', example='M'),
      name?: string(name='name'),
      resSpecType?: string(name='resSpecType', example='BASIC_MODEL'),
      taskId?: string(name='taskId', example='837091359375048704'),
      taskType?: string(name='taskType', example='CopyVoice'),
      trainFailMessage?: string(name='trainFailMessage'),
      trainStatus?: string(name='trainStatus', example='trainFail'),
      useScene?: string(name='useScene', example='realTimeInteractivity'),
      voiceMaterial?: {
        voiceId?: long(name='voiceId', example='1'),
        voiceLanguage?: string(name='voiceLanguage', example='zh'),
        voiceUrl?: string(name='voiceUrl', example='http://www.voice.com'),
      }(name='voiceMaterial'),
    }
  ](name='voiceList'),
}

model BatchGetTrainTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchGetTrainTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchGetTrainTask  BatchGetTrainTaskRequest
  * @return BatchGetTrainTaskResponse
 */
async function batchGetTrainTask(request: BatchGetTrainTaskRequest): BatchGetTrainTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BatchGetTrainTask', 'GET', '/yic/yic-console/openService/v1/train/task/batchGetTrainTaskInfo', 'json', false, 'json', request);
}

model BatchGetVideoClipTaskRequest {
  taskIdList?: [ string ](name='taskIdList', shrink='simple', position='Query'),
}

model BatchGetVideoClipTaskResponseBody = {
  requestId?: string(name='requestId', example='86A90C40-D1AB-50DA-A4B1-0D545F80F2FE'),
  taskList?: [ 
    {
      status?: string(name='status', example='FINISHED'),
      taskId?: string(name='taskId', example='864413342857035776'),
      totalDuration?: double(name='totalDuration', example='43335'),
      totalToken?: long(name='totalToken', example='11'),
      videoList?: [ 
        {
          beginTime?: int32(name='beginTime', example='0'),
          description?: string(name='description'),
          endTime?: int32(name='endTime', example='11110'),
          errorMsg?: string(name='errorMsg'),
          title?: string(name='title'),
          videoDownloadUrl?: string(name='videoDownloadUrl', example='https://e-ai.oss-cn-guangzhou.aliyuncs.com/video/jlkasdl.mp4'),
          videoName?: string(name='videoName'),
          videoUrl?: string(name='videoUrl', example='https://e-ai.oss-cn-guangzhou.aliyuncs.com/video/jlkasdl.mp4'),
        }
      ](name='videoList'),
    }
  ](name='taskList'),
}

model BatchGetVideoClipTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchGetVideoClipTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchGetVideoClipTask  BatchGetVideoClipTaskRequest
  * @return BatchGetVideoClipTaskResponse
 */
async function batchGetVideoClipTask(request: BatchGetVideoClipTaskRequest): BatchGetVideoClipTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BatchGetVideoClipTask', 'GET', '/yic/yic-console/openService/v1/video/clip/batchGetVideoClipTask', 'json', false, 'json', request);
}

model BatchQueryIndividuationTextRequest {
  textIdList?: [ string ](name='textIdList', shrink='simple', position='Query'),
}

model BatchQueryIndividuationTextResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='14878724-A835-578D-9DD5-4779ADCE9221'),
  textList?: [ 
    {
      content?: string(name='content'),
      createTime?: string(name='createTime', example='yyyy-MM-dd HH:mm:ss'),
      errorMsg?: string(name='errorMsg', example='1'),
      itemId?: string(name='itemId', example='2849286'),
      projectId?: string(name='projectId', example='812884915104530432'),
      status?: string(name='status', example='1'),
      taskId?: string(name='taskId', example='837074737851613184'),
      textId?: string(name='textId', example='110825'),
      updateTime?: string(name='updateTime', example='yyyy-MM-dd HH:mm:ss'),
      userId?: string(name='userId', example='11'),
    }
  ](name='textList'),
}

model BatchQueryIndividuationTextResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchQueryIndividuationTextResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchQueryIndividuationText  BatchQueryIndividuationTextRequest
  * @return BatchQueryIndividuationTextResponse
 */
async function batchQueryIndividuationText(request: BatchQueryIndividuationTextRequest): BatchQueryIndividuationTextResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BatchQueryIndividuationText', 'GET', '/yic/yic-console/openService/v1/individuationText/batchQueryText', 'json', false, 'json', request);
}

model CheckSessionRequest {
  projectId?: string(name='projectId', example='11111', position='Body'),
  sessionId?: string(name='sessionId', example='121dlsga4o7golrl1hoja', position='Body'),
}

model CheckSessionResponseBody = {
  requestId?: string(name='requestId', example='5389BE87-571B-573C-90ED-F07C5E68760B'),
  status?: string(name='status', example='FREE'),
}

model CheckSessionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckSessionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckSession  CheckSessionRequest
  * @return CheckSessionResponse
 */
async function checkSession(request: CheckSessionRequest): CheckSessionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CheckSession', 'POST', '/yic/yic-console/openService/v1/avatar/project/checkSession', 'json', false, 'json', request);
}

model CloseAICoachTaskSessionRequest {
  sessionId?: string(name='sessionId', example='11', position='Body'),
  uid?: string(name='uid', example='273610276967782972', position='Body'),
}

model CloseAICoachTaskSessionResponseBody = {
  requestId?: string(name='requestId', example='0E06E0AA-D5B6-538C-8CE9-BAB79C68B690'),
  status?: string(name='status'),
}

model CloseAICoachTaskSessionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CloseAICoachTaskSessionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CloseAICoachTaskSession  CloseAICoachTaskSessionRequest
  * @return CloseAICoachTaskSessionResponse
 */
async function closeAICoachTaskSession(request: CloseAICoachTaskSessionRequest): CloseAICoachTaskSessionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CloseAICoachTaskSession', 'POST', '/yic/yic-console/openService/v1/aicoach/closeSession', 'json', false, 'json', request);
}

model CountTextRequest {
  generationSource?: string(name='generationSource', description='API', example='PLATFORM', position='Query'),
  industry?: string(name='industry', example='Garment', position='Query'),
  publishStatus?: string(name='publishStatus', example='1', position='Query'),
  style?: string(name='style', example='RED_BOOK', position='Query'),
}

model CountTextResponseBody = {
  requestId?: string(name='RequestId', example='6C9CB64D-E2D3-5BF2-A9E6-2445F952F178'),
  countTextCmdList?: [ 
    {
      count?: long(name='count', example='4'),
      theme?: string(name='theme', example='RED_BOOK'),
    }
  ](name='countTextCmdList'),
}

model CountTextResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CountTextResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CountText  CountTextRequest
  * @return CountTextResponse
 */
async function countText(request: CountTextRequest): CountTextResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CountText', 'GET', '/yic/yic-console/openService/v1/countText', 'json', false, 'json', request);
}

model CreateAICoachTaskRequest {
  requestId?: string(name='requestId', example='541E7123-2E8A-5BA2-AC38-665650C84129', position='Body'),
  scriptRecordId?: string(name='scriptRecordId', position='Body'),
  studentAudioUrl?: string(name='studentAudioUrl', position='Body'),
  studentId?: string(name='studentId', position='Body'),
}

model CreateAICoachTaskResponseBody = {
  errorCode?: string(name='errorCode', example='Deduct.DeductTaskAlreadySuccess'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId', description='Id of the request', example='0E8B1746-AE35-5C4B-A3A8-345B274AE32C'),
  success?: boolean(name='success', example='true'),
  taskId?: string(name='taskId', example='821882330423951360'),
}

model CreateAICoachTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAICoachTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateAICoachTask  CreateAICoachTaskRequest
  * @return CreateAICoachTaskResponse
 */
async function createAICoachTask(request: CreateAICoachTaskRequest): CreateAICoachTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateAICoachTask', 'POST', '/yic/yic-console/openService/v1/aicoach/createTask', 'json', false, 'json', request);
}

model CreateAICoachTaskSessionRequest {
  taskId?: string(name='taskId', example='821882330423951360', position='Body'),
  uid?: string(name='uid', example='1730530943640489', position='Body'),
}

model CreateAICoachTaskSessionResponseBody = {
  channelToken?: string(name='channelToken', description='rtctoken', example='11'),
  requestId?: string(name='requestId', example='4830493A-728F-5F19-BBCC-1443292E9C49'),
  scriptInfo?: {
    agentIconUrl?: string(name='agentIconUrl'),
    characterName?: string(name='characterName'),
    dialogueTextFlag?: boolean(name='dialogueTextFlag'),
    dialogueTipFlag?: boolean(name='dialogueTipFlag'),
    initiator?: string(name='initiator'),
    inputTypeList?: [ string ](name='inputTypeList'),
    maxDuration?: long(name='maxDuration', example='11'),
    scriptDesc?: string(name='scriptDesc', example='test'),
    scriptName?: string(name='scriptName'),
    scriptRecordId?: string(name='scriptRecordId'),
    scriptType?: long(name='scriptType'),
    sparringTipContent?: string(name='sparringTipContent'),
    sparringTipTitle?: string(name='sparringTipTitle'),
    studentThinkTimeFlag?: boolean(name='studentThinkTimeFlag'),
    studentThinkTimeLimit?: long(name='studentThinkTimeLimit'),
  }(name='scriptInfo'),
  sessionId?: string(name='sessionId', example='111'),
  sessionStatus?: long(name='sessionStatus'),
  token?: string(name='token', description='Token', example='11'),
  webSocketUrl?: string(name='webSocketUrl', example='11'),
}

model CreateAICoachTaskSessionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAICoachTaskSessionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateAICoachTaskSession  CreateAICoachTaskSessionRequest
  * @return CreateAICoachTaskSessionResponse
 */
async function createAICoachTaskSession(request: CreateAICoachTaskSessionRequest): CreateAICoachTaskSessionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateAICoachTaskSession', 'POST', '/yic/yic-console/openService/v1/aicoach/startSession', 'json', false, 'json', request);
}

model CreateAnchorRequest {
  anchorMaterialName?: string(name='anchorMaterialName', position='Body'),
  coverUrl?: string(name='coverUrl', example='https://yic-pre.oss-cn-hangzhou.aliyuncs.com/common/image/anchor/1733474220549-1733474198960image.png?Expires=3311144948&OSSAccessKeyId=LTAI5tPHLyFPhh4UoRias4Zg&Signature=qldDufvRDj9IUTmOtb9r2451RIU%3D', position='Body'),
  digitalHumanType?: string(name='digitalHumanType', position='Body'),
  gender?: string(name='gender', example='F', position='Body'),
  useScene?: string(name='useScene', example='offlineSynthesis', position='Body'),
}

model CreateAnchorResponseBody = {
  data?: string(name='data', description='123456789'),
  errorCode?: string(name='errorCode', example='PARAM_ERROR'),
  errorMessage?: string(name='errorMessage', example='Failed to proxy flink ui request, message: An error occurred: Invalid UUID string: jobsn'),
  requestId?: string(name='requestId', description='Id of the request', example='10923AA3-F7A1-5EA0-ACCA-D704269EAA78'),
  success?: boolean(name='success', example='true'),
}

model CreateAnchorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAnchorResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateAnchor  CreateAnchorRequest
  * @return CreateAnchorResponse
 */
async function createAnchor(request: CreateAnchorRequest): CreateAnchorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateAnchor', 'POST', '/yic/yic-console/openService/v1/digitalHuman/anchorOpen/createAnchor', 'json', false, 'json', request);
}

model CreateIllustrationTaskRequest {
  textId?: long(name='textId', example='1', position='Path'),
  body?: IllustrationTaskCreateCmd(name='body', position='Body'),
}

model CreateIllustrationTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IllustrationTaskResult  
}

/**
  * @param request  the request parameters of CreateIllustrationTask  CreateIllustrationTaskRequest
  * @return CreateIllustrationTaskResponse
 */
async function createIllustrationTask(request: CreateIllustrationTaskRequest): CreateIllustrationTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateIllustrationTask', 'POST', '/yic/yic-console/openService/v1/texts/{textId}/illustrationTasks', 'json', false, 'json', request);
}

model CreateIndividuationProjectRequest {
  projectInfo?: string(name='projectInfo', position='Body'),
  projectName?: string(name='projectName', example='avatar-1', position='Body'),
  purpose?: string(name='purpose', position='Body'),
  sceneId?: string(name='sceneId', example='ail003', position='Body'),
}

model CreateIndividuationProjectResponseBody = {
  projectId?: string(name='projectId', example='812907463682949120'),
  requestId?: string(name='requestId', description='Id of the request', example='4D902811-B75C-5D1B-8882-D515F8E2F977'),
}

model CreateIndividuationProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateIndividuationProjectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateIndividuationProject  CreateIndividuationProjectRequest
  * @return CreateIndividuationProjectResponse
 */
async function createIndividuationProject(request: CreateIndividuationProjectRequest): CreateIndividuationProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateIndividuationProject', 'POST', '/yic/yic-console/openService/v1/individuationText/createProject', 'json', false, 'json', request);
}

model CreateIndividuationTextTaskRequest {
  crowdPack?: [[ string ]  ](name='crowdPack', position='Body'),
  projectId?: string(name='projectId', example='840015278620459008', position='Body'),
  taskName?: string(name='taskName', position='Body'),
}

model CreateIndividuationTextTaskResponseBody = {
  requestId?: string(name='requestId', example='56AC346B-AF40-5E4F-AFFE-FD8BA5E6FB3A'),
  taskId?: string(name='taskId', example='837091359375048704'),
}

model CreateIndividuationTextTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateIndividuationTextTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateIndividuationTextTask  CreateIndividuationTextTaskRequest
  * @return CreateIndividuationTextTaskResponse
 */
async function createIndividuationTextTask(request: CreateIndividuationTextTaskRequest): CreateIndividuationTextTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateIndividuationTextTask', 'POST', '/yic/yic-console/openService/v1/individuationText/createTextTask', 'json', false, 'json', request);
}

model CreateRealisticPortraitRequest {
  ages?: [ int32 ](name='ages', position='Body'),
  cloth?: int32(name='cloth', example='1', position='Body'),
  color?: int32(name='color', example='1', position='Body'),
  custom?: string(name='custom', example='11', position='Body'),
  face?: [ int32 ](name='face', position='Body'),
  figure?: int32(name='figure', example='1', position='Body'),
  gender?: int32(name='gender', example='1', position='Body'),
  hairColor?: int32(name='hairColor', example='1', position='Body'),
  hairstyle?: int32(name='hairstyle', example='1', position='Body'),
  height?: int32(name='height', example='500', position='Body'),
  imageUrl?: string(name='imageUrl', position='Body'),
  numbers?: int32(name='numbers', example='4', position='Body'),
  ratio?: string(name='ratio', example='1:1', position='Body'),
  width?: int32(name='width', example='500', position='Body'),
}

model CreateRealisticPortraitResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='D5798660-1531-5D12-9C20-16FEE9D22351'),
  taskId?: string(name='taskId', example='313123123'),
}

model CreateRealisticPortraitResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRealisticPortraitResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateRealisticPortrait  CreateRealisticPortraitRequest
  * @return CreateRealisticPortraitResponse
 */
async function createRealisticPortrait(request: CreateRealisticPortraitRequest): CreateRealisticPortraitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateRealisticPortrait', 'POST', '/yic/yic-console/openService/v1/images/portrait/realistic', 'json', false, 'json', request);
}

model CreateTextTaskRequest {
  body?: TextTaskCreateCmd(name='body', position='Body'),
}

model CreateTextTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TextTaskResult  
}

/**
  * @param request  the request parameters of CreateTextTask  CreateTextTaskRequest
  * @return CreateTextTaskResponse
 */
async function createTextTask(request: CreateTextTaskRequest): CreateTextTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateTextTask', 'POST', '/yic/yic-console/openService/v1/textTasks', 'json', false, 'json', request);
}

model CreateTrainTaskRequest {
  aliyunMainId?: string(name='aliyunMainId', example='13168123111', position='Body'),
  resSpecType?: string(name='resSpecType', example='BASIC_MODEL', position='Body'),
  taskType?: string(name='taskType', example='CopyAnchorAndVoice', position='Body'),
  useScene?: string(name='useScene', example='realTimeInteractivity', position='Body'),
  voiceGender?: string(name='voiceGender', example='M', position='Body'),
  voiceLanguage?: string(name='voiceLanguage', example='zh', position='Body'),
  voiceName?: string(name='voiceName', position='Body'),
  voicePath?: string(name='voicePath', example='https://yic-pre/video/test-0513.mp3', position='Body'),
}

model CreateTrainTaskResponseBody = {
  requestId?: string(name='requestId', example='84657DE0-B68C-508B-AFE7-8ED921854E3C'),
  taskId?: string(name='taskId', example='837091359375048704'),
}

model CreateTrainTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTrainTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateTrainTask  CreateTrainTaskRequest
  * @return CreateTrainTaskResponse
 */
async function createTrainTask(request: CreateTrainTaskRequest): CreateTrainTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateTrainTask', 'POST', '/yic/yic-console/openService/v1/train/task/createTrainTask', 'json', false, 'json', request);
}

model CreateVideoClipTaskRequest {
  aliyunMainId?: string(name='aliyunMainId', example='1314445556', position='Body'),
  description?: string(name='description', position='Body'),
  ossKeys?: [ string ](name='ossKeys', position='Body'),
  requirement?: string(name='requirement', position='Body'),
}

model CreateVideoClipTaskResponseBody = {
  requestId?: string(name='requestId', example='86A90C40-D1AB-50DA-A4B1-0D545F80F2FE'),
  taskId?: string(name='taskId', example='837091359375048704'),
}

model CreateVideoClipTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateVideoClipTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateVideoClipTask  CreateVideoClipTaskRequest
  * @return CreateVideoClipTaskResponse
 */
async function createVideoClipTask(request: CreateVideoClipTaskRequest): CreateVideoClipTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateVideoClipTask', 'POST', '/yic/yic-console/openService/v1/video/clip/createVideoClipTask', 'json', false, 'json', request);
}

model DeleteIndividuationProjectRequest {
  projectId?: string(name='projectId', example='840015278620459008', position='Body'),
}

model DeleteIndividuationProjectResponseBody = {
  desc?: string(name='desc'),
  requestId?: string(name='requestId', description='Id of the request', example='86A90C40-D1AB-50DA-A4B1-0D545F80F2FE'),
  status?: string(name='status', example='SUCCESS'),
}

model DeleteIndividuationProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIndividuationProjectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteIndividuationProject  DeleteIndividuationProjectRequest
  * @return DeleteIndividuationProjectResponse
 */
async function deleteIndividuationProject(request: DeleteIndividuationProjectRequest): DeleteIndividuationProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteIndividuationProject', 'POST', '/yic/yic-console/openService/v1/individuationText/deleteProject', 'json', false, 'json', request);
}

model DeleteIndividuationTextRequest {
  textIdList?: [ string ](name='textIdList', position='Body'),
}

model DeleteIndividuationTextResponseBody = {
  desc?: string(name='desc'),
  requestId?: string(name='requestId', description='Id of the request', example='4830493A-728F-5F19-BBCC-1443292E9C49'),
  status?: string(name='status', example='SUCCESS'),
}

model DeleteIndividuationTextResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIndividuationTextResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteIndividuationText  DeleteIndividuationTextRequest
  * @return DeleteIndividuationTextResponse
 */
async function deleteIndividuationText(request: DeleteIndividuationTextRequest): DeleteIndividuationTextResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteIndividuationText', 'POST', '/yic/yic-console/openService/v1/individuationText/deleteText', 'json', false, 'json', request);
}

model DescribeDocumentRequest {
  knowledgeBaseId?: string(name='knowledgeBaseId', example='"186432649"', position='Path'),
  documentId?: string(name='documentId', example='"1829639766561099778"', position='Path'),
}

model DescribeDocumentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DocumentResult  
}

/**
  * @param request  the request parameters of DescribeDocument  DescribeDocumentRequest
  * @return DescribeDocumentResponse
 */
async function describeDocument(request: DescribeDocumentRequest): DescribeDocumentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeDocument', 'GET', '/yic/yic-console/openService/v1/knowledge-base/{knowledgeBaseId}/documents/{documentId}', 'json', false, 'json', request);
}

model FinishAICoachTaskSessionRequest {
  sessionId?: string(name='sessionId', example='111', position='Body'),
  uid?: string(name='uid', example='222', position='Body'),
}

model FinishAICoachTaskSessionResponseBody = {
  requestId?: string(name='requestId', example='14878724-A835-578D-9DD5-4779ADCE9221'),
  status?: string(name='status'),
}

model FinishAICoachTaskSessionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FinishAICoachTaskSessionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of FinishAICoachTaskSession  FinishAICoachTaskSessionRequest
  * @return FinishAICoachTaskSessionResponse
 */
async function finishAICoachTaskSession(request: FinishAICoachTaskSessionRequest): FinishAICoachTaskSessionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'FinishAICoachTaskSession', 'POST', '/yic/yic-console/openService/v1/aicoach/finishSession', 'json', false, 'json', request);
}

model GetAICoachCheatDetectionRequest {
  sessionId?: string(name='sessionId', example='79e954faffe2415ebd18188ba787d78e', position='Query'),
}

model GetAICoachCheatDetectionResponseBody = {
  cheatId?: string(name='cheatId', example='1'),
  errorCode?: string(name='errorCode', example='success'),
  errorMessage?: string(name='errorMessage'),
  gmtCreate?: string(name='gmtCreate', example='2025-02-24 12:00:00'),
  imageCheat?: {
    desc?: string(name='desc', example='demo'),
    list?: [ 
      {
        time?: string(name='time', example='2025-03-22 10:05:07'),
        url?: string(name='url', example='https://demo.com'),
      }
    ](name='list'),
    status?: int32(name='status', example='1'),
  }(name='imageCheat'),
  requestId?: string(name='requestId', description='Id of the request', example='0E8B1746-AE35-5C4B-A3A8-345B274AE32C'),
  status?: int32(name='status', example='1'),
  success?: boolean(name='success', description='true', example='True'),
  voiceCheat?: {
    comparisonList?: [ 
      {
        time?: string(name='time', example='2024-12-11 10:07:23'),
        url?: string(name='url', example='https://demo.com'),
      }
    ](name='comparisonList'),
    desc?: string(name='desc', example='demo'),
    originalList?: [ 
      {
        url?: string(name='url', example='https://demo.com'),
      }
    ](name='originalList'),
    status?: int32(name='status', example='1'),
  }(name='voiceCheat'),
}

model GetAICoachCheatDetectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAICoachCheatDetectionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAICoachCheatDetection  GetAICoachCheatDetectionRequest
  * @return GetAICoachCheatDetectionResponse
 */
async function getAICoachCheatDetection(request: GetAICoachCheatDetectionRequest): GetAICoachCheatDetectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAICoachCheatDetection', 'GET', '/yic/yic-console/openService/v1/aicoach/getCheatDetection', 'json', false, 'json', request);
}

model GetAICoachScriptRequest {
  scriptRecordId?: string(name='scriptRecordId', example='1', position='Query'),
}

model GetAICoachScriptResponseBody = {
  appendQuestionFlag?: boolean(name='appendQuestionFlag'),
  assessmentScope?: string(name='assessmentScope', example='point'),
  checkCheatConfig?: {
    checkImage?: boolean(name='checkImage'),
    checkVoice?: boolean(name='checkVoice'),
  }(name='checkCheatConfig'),
  completeStrategy?: {
    abnormalQuitSessionExpired?: int32(name='abnormalQuitSessionExpired', example='5'),
    abnormalQuitSessionExpiredFlag?: boolean(name='abnormalQuitSessionExpiredFlag', example='true'),
    clickCompleteAutoEnd?: boolean(name='clickCompleteAutoEnd', example='true'),
    duration?: int32(name='duration', example='15'),
    durationFlag?: boolean(name='durationFlag', example='true'),
    fullCoverageAutoEnd?: boolean(name='fullCoverageAutoEnd', example='true'),
  }(name='completeStrategy'),
  coverUrl?: string(name='coverUrl', example='https://demo.com'),
  dialogueInputTextLimit?: int32(name='dialogueInputTextLimit', example='500'),
  dialogueTextFlag?: boolean(name='dialogueTextFlag', example='true'),
  dialogueTipFlag?: boolean(name='dialogueTipFlag', example='true'),
  dialogueVoiceLimit?: int32(name='dialogueVoiceLimit', example='30'),
  evaluateReportFlag?: boolean(name='evaluateReportFlag', example='true'),
  expressiveness?: map[string]int32(name='expressiveness'),
  gmtCreate?: string(name='gmtCreate', example='2025-02-24 12:00:00'),
  gmtModified?: string(name='gmtModified', example='2025-02-24 12:00:00'),
  initiator?: string(name='initiator', example='coach'),
  interactionInputTypes?: [ string ](name='interactionInputTypes'),
  interactionType?: int32(name='interactionType', example='1'),
  introduce?: string(name='introduce', example='demo'),
  name?: string(name='name', example='demo'),
  orderAckFlag?: boolean(name='orderAckFlag', example='true'),
  pointDeductionRuleList?: [ 
    {
      description?: string(name='description', example='demo'),
      punishmentTypes?: [ string ](name='punishmentTypes'),
      ruleValue?: string(name='ruleValue'),
      weight?: int32(name='weight', example='90'),
    }
  ](name='pointDeductionRuleList'),
  points?: [ 
    {
      answerList?: [ 
        {
          answerValues?: [ 
            {
              answerName?: string(name='answerName'),
              answerWeight?: int32(name='answerWeight'),
              keywordValues?: [ 
                {
                  name?: string(name='name'),
                  weight?: int32(name='weight'),
                }
              ](name='keywordValues'),
              keywordWeight?: int32(name='keywordWeight'),
              scoringRules?: [ 
                {
                  name?: string(name='name'),
                }
              ](name='scoringRules'),
            }
          ](name='answerValues'),
          enabledKeyword?: boolean(name='enabledKeyword'),
          name?: string(name='name'),
          nameList?: [ string ](name='nameList'),
          operators?: string(name='operators'),
          parameters?: [ 
            {
              name?: string(name='name', example='name'),
              value?: string(name='value', example='value'),
            }
          ](name='parameters'),
          type?: string(name='type', example='normalKnowledge'),
          weight?: int32(name='weight', example='100'),
        }
      ](name='answerList'),
      knowledgeList?: [ string ](name='knowledgeList'),
      name?: string(name='name', example='demo'),
      pointId?: string(name='pointId'),
      questionDescription?: string(name='questionDescription', example='test'),
      sortNo?: int32(name='sortNo', example='1'),
      weight?: int32(name='weight', example='50'),
    }
  ](name='points'),
  requestId?: string(name='requestId', example='1'),
  sampleDialogueList?: [ 
    {
      message?: string(name='message'),
      role?: string(name='role', example='coach'),
    }
  ](name='sampleDialogueList'),
  scriptRecordId?: string(name='scriptRecordId', example='1'),
  sparringTipContent?: string(name='sparringTipContent'),
  sparringTipTitle?: string(name='sparringTipTitle'),
  status?: int32(name='status', example='1'),
  studentThinkTimeFlag?: boolean(name='studentThinkTimeFlag', example='true'),
  studentThinkTimeLimit?: int32(name='studentThinkTimeLimit', example='100'),
  type?: int32(name='type', example='1'),
  weights?: {
    abilityEvaluation?: int32(name='abilityEvaluation', example='10'),
    abilityEvaluationEnabled?: boolean(name='abilityEvaluationEnabled', example='false'),
    assessmentPoint?: int32(name='assessmentPoint', example='10'),
    expressiveness?: int32(name='expressiveness', example='10'),
    expressivenessEnabled?: boolean(name='expressivenessEnabled', example='true'),
    pointDeductionRule?: int32(name='pointDeductionRule', example='10'),
    pointDeductionRuleEnabled?: boolean(name='pointDeductionRuleEnabled', example='true'),
    standard?: int32(name='standard', example='10'),
    standardEnabled?: boolean(name='standardEnabled', example='true'),
  }(name='weights'),
}

model GetAICoachScriptResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAICoachScriptResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAICoachScript  GetAICoachScriptRequest
  * @return GetAICoachScriptResponse
 */
async function getAICoachScript(request: GetAICoachScriptRequest): GetAICoachScriptResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAICoachScript', 'GET', '/yic/yic-console/openService/v1/aicoach/getScript', 'json', false, 'json', request);
}

model GetAICoachTaskSessionHistoryRequest {
  pageNumber?: int32(name='pageNumber', position='Query'),
  pageSize?: int32(name='pageSize', position='Query'),
  sessionId?: string(name='sessionId', example='111', position='Query'),
  uid?: string(name='uid', example='1251317954812712', position='Query'),
}

model GetAICoachTaskSessionHistoryResponseBody = {
  conversationList?: [ 
    {
      audioUrl?: string(name='audioUrl'),
      evaluationFeedback?: string(name='evaluationFeedback'),
      evaluationResult?: string(name='evaluationResult', example='{}'),
      message?: string(name='message'),
      recordId?: string(name='recordId'),
      role?: string(name='role'),
    }
  ](name='conversationList'),
  duration?: long(name='duration', example='0'),
  endTime?: string(name='endTime', example='2024-11-08 09:33:21'),
  pauseDuration?: long(name='pauseDuration'),
  requestId?: string(name='requestId', example='D5798660-1531-5D12-9C20-16FEE9D22351'),
  scriptName?: string(name='scriptName'),
  startTime?: string(name='startTime', example='2024-08-21 05:00:01'),
  status?: string(name='status'),
  total?: int32(name='total'),
  uid?: string(name='uid', example='1579404690269235'),
}

model GetAICoachTaskSessionHistoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAICoachTaskSessionHistoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAICoachTaskSessionHistory  GetAICoachTaskSessionHistoryRequest
  * @return GetAICoachTaskSessionHistoryResponse
 */
async function getAICoachTaskSessionHistory(request: GetAICoachTaskSessionHistoryRequest): GetAICoachTaskSessionHistoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAICoachTaskSessionHistory', 'GET', '/yic/yic-console/openService/v1/aicoach/querySessionHistory', 'json', false, 'json', request);
}

model GetAICoachTaskSessionReportRequest {
  sessionId?: string(name='sessionId', example='1111', position='Query'),
  uid?: string(name='uid', example='1707732338016307', position='Query'),
}

model GetAICoachTaskSessionReportResponseBody = {
  duration?: long(name='duration', example='0'),
  endTime?: string(name='endTime', example='2024-11-08 09:33:21'),
  evaluationRating?: string(name='evaluationRating'),
  evaluationResult?: string(name='evaluationResult', example='{}'),
  feedback?: boolean(name='feedback'),
  requestId?: string(name='requestId', example='0E8B1746-AE35-5C4B-A3A8-345B274AE32C'),
  scriptName?: string(name='scriptName'),
  startTime?: string(name='startTime', example='2024-10-11 09:58:01'),
  status?: string(name='status'),
  uid?: string(name='uid', example='1276673855116835'),
}

model GetAICoachTaskSessionReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAICoachTaskSessionReportResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAICoachTaskSessionReport  GetAICoachTaskSessionReportRequest
  * @return GetAICoachTaskSessionReportResponse
 */
async function getAICoachTaskSessionReport(request: GetAICoachTaskSessionReportRequest): GetAICoachTaskSessionReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAICoachTaskSessionReport', 'GET', '/yic/yic-console/openService/v1/aicoach/queryTaskSessionReport', 'json', false, 'json', request);
}

model GetIllustrationRequest {
  textId: long(name='textId', description='This parameter is required.', example='1', position='Path'),
  illustrationId: long(name='illustrationId', description='This parameter is required.', example='1', position='Path'),
}

model GetIllustrationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IllustrationResult  
}

/**
  * @param request  the request parameters of GetIllustration  GetIllustrationRequest
  * @return GetIllustrationResponse
 */
async function getIllustration(request: GetIllustrationRequest): GetIllustrationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetIllustration', 'GET', '/yic/yic-console/openService/v1/texts/{textId}/illustrations/{illustrationId}', 'json', false, 'json', request);
}

model GetIllustrationTaskRequest {
  textId: long(name='textId', description='This parameter is required.', example='1', position='Path'),
  illustrationTaskId: long(name='illustrationTaskId', description='This parameter is required.', example='1', position='Path'),
}

model GetIllustrationTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IllustrationTaskResult  
}

/**
  * @param request  the request parameters of GetIllustrationTask  GetIllustrationTaskRequest
  * @return GetIllustrationTaskResponse
 */
async function getIllustrationTask(request: GetIllustrationTaskRequest): GetIllustrationTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetIllustrationTask', 'GET', '/yic/yic-console/openService/v1/texts/{textId}/illustrationTasks/{illustrationTaskId}', 'json', false, 'json', request);
}

model GetOssUploadTokenRequest {
  fileName: string(name='fileName', description='This parameter is required.', example='8021678.png', position='Query'),
  fileType: string(name='fileType', description='This parameter is required.', example='ProductImage', position='Query'),
  uploadType?: int32(name='uploadType', position='Query'),
}

model GetOssUploadTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOssUploadTokenResult  
}

/**
  * @param request  the request parameters of GetOssUploadToken  GetOssUploadTokenRequest
  * @return GetOssUploadTokenResponse
 */
async function getOssUploadToken(request: GetOssUploadTokenRequest): GetOssUploadTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetOssUploadToken', 'GET', '/yic/yic-console/openService/v1/uploadToken', 'json', false, 'json', request);
}

model GetProjectTaskRequest {
  idempotentId?: string(name='IdempotentId', example='20230823218109326025-1200', position='Query'),
  taskId?: string(name='taskId', example='313123123', position='Query'),
}

model GetProjectTaskResponseBody = {
  errorMsg?: string(name='errorMsg', example='error'),
  requestId?: string(name='requestId', example='5389BE87-571B-573C-90ED-F07C5E68760B'),
  status?: string(name='status', example='SUCCESS'),
  videoDownloadUrl?: string(name='videoDownloadUrl', example='www.ali.com'),
  videoDuration?: int32(name='videoDuration', example='111'),
  videoUrl?: string(name='videoUrl', example='www.ali.com'),
}

model GetProjectTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetProjectTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetProjectTask  GetProjectTaskRequest
  * @return GetProjectTaskResponse
 */
async function getProjectTask(request: GetProjectTaskRequest): GetProjectTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetProjectTask', 'GET', '/yic/yic-console/openService/v1/digitalHuman/project/getProjectTask', 'json', false, 'json', request);
}

model GetTextRequest {
  textId: long(name='textId', description='This parameter is required.', example='1', position='Path'),
}

model GetTextResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TextResult  
}

/**
  * @param request  the request parameters of GetText  GetTextRequest
  * @return GetTextResponse
 */
async function getText(request: GetTextRequest): GetTextResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetText', 'GET', '/yic/yic-console/openService/v1/texts/{textId}', 'json', false, 'json', request);
}

model GetTextTaskRequest {
  textTaskId?: long(name='textTaskId', example='1', position='Path'),
}

model GetTextTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TextTaskResult  
}

/**
  * @param request  the request parameters of GetTextTask  GetTextTaskRequest
  * @return GetTextTaskResponse
 */
async function getTextTask(request: GetTextTaskRequest): GetTextTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTextTask', 'GET', '/yic/yic-console/openService/v1/textTasks/{textTaskId}', 'json', false, 'json', request);
}

model GetTextTemplateRequest {
  industry?: string(name='industry', example='Car', position='Query'),
}

model GetTextTemplateResponseBody = {
  availableIndustry?: {
    name?: string(name='name', example='Car'),
    textModeTypes?: [ 
      {
        name?: string(name='name', example='Rewrite'),
        textStyles?: [ 
          {
            desc?: string(name='desc'),
            disabled?: boolean(name='disabled', example='false'),
            name?: string(name='name', example='RED_BOOK'),
            templateKey?: string(name='templateKey', example='111'),
          }
        ](name='textStyles'),
      }
    ](name='textModeTypes'),
  }(name='availableIndustry'),
  requestId?: string(name='requestId', example='3239281273464326823'),
}

model GetTextTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTextTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTextTemplate  GetTextTemplateRequest
  * @return GetTextTemplateResponse
 */
async function getTextTemplate(request: GetTextTemplateRequest): GetTextTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTextTemplate', 'GET', '/yic/yic-console/openService/v1/texts/commands/getTextTemplate', 'json', false, 'json', request);
}

model InteractTextRequest {
  agentId?: string(name='agentId', example='1000222', position='Body'),
  content?: string(name='content', position='Body'),
  sessionId?: string(name='sessionId', example='144285195534941', position='Body'),
}

model InteractTextResponseBody = {
  end?: boolean(name='end', example='false'),
  index?: int32(name='index', example='1'),
  message?: string(name='message'),
  relatedImages?: [ string ](name='relatedImages'),
  relatedVideos?: [ string ](name='relatedVideos'),
  sessionId?: string(name='sessionId', example='79e954faffe2415ebd18188ba787d78e'),
  type?: int32(name='type', example='2'),
}

model InteractTextResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InteractTextResponseBody(name='body'),
}

/**
  * @param request  the request parameters of InteractText  InteractTextRequest
  * @return InteractTextResponse
 */
async function interactText(request: InteractTextRequest): InteractTextResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'InteractText', 'POST', '/yic/yic-console/openService/v1/stream/interactText', 'json', false, 'json', request);
}

function interactTextWithResponseIterable(request: InteractTextRequest): iterator[InteractTextResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'InteractText', 'POST', '/yic/yic-console/openService/v1/stream/interactText', 'json', false, 'json', request);
}

model ListAICoachScriptPageRequest {
  name?: string(name='name', position='Query'),
  pageNumber?: int32(name='pageNumber', example='1', position='Query'),
  pageSize?: int32(name='pageSize', example='10', position='Query'),
  status?: int32(name='status', example='1', position='Query'),
  type?: int32(name='type', position='Query'),
}

model ListAICoachScriptPageResponseBody = {
  errorCode?: string(name='errorCode', example='PARAM_ERROR'),
  errorMessage?: string(name='errorMessage', example='SYSTEM_ERROR'),
  list?: [ 
    {
      appendQuestionFlag?: string(name='appendQuestionFlag'),
      assessmentScope?: string(name='assessmentScope'),
      completeStrategy?: {
        clickCompleteAutoEnd?: boolean(name='clickCompleteAutoEnd', example='true'),
        duration?: int32(name='duration', example='75'),
        fullCoverageAutoEnd?: boolean(name='fullCoverageAutoEnd', example='false'),
      }(name='completeStrategy'),
      coverUrl?: string(name='coverUrl', example='https://oss-ata.alibaba.com/front/live/banner1.png'),
      dialogueTextFlag?: boolean(name='dialogueTextFlag'),
      dialogueTipFlag?: boolean(name='dialogueTipFlag'),
      evaluateReportFlag?: boolean(name='evaluateReportFlag'),
      expressiveness?: map[string]string(name='expressiveness'),
      gmtCreate?: string(name='gmtCreate', example='2024-12-25 14:00:00'),
      gmtModified?: string(name='gmtModified', example='2024-12-25 14:00:00'),
      initiator?: string(name='initiator', example='student'),
      interactionType?: string(name='interactionType', example='4'),
      introduce?: string(name='introduce'),
      name?: string(name='name', example='prod-ydsf'),
      orderAckFlag?: boolean(name='orderAckFlag'),
      sampleDialogueList?: [ 
        {
          message?: string(name='message'),
          role?: string(name='role', example='student'),
        }
      ](name='sampleDialogueList'),
      scoreConfig?: {
        enabled?: boolean(name='enabled'),
        passScore?: int32(name='passScore'),
      }(name='scoreConfig'),
      scriptRecordId?: string(name='scriptRecordId', example='1'),
      sparringTipContent?: string(name='sparringTipContent'),
      sparringTipTitle?: string(name='sparringTipTitle'),
      status?: int32(name='status', example='1'),
      studentThinkTimeFlag?: boolean(name='studentThinkTimeFlag'),
      type?: int32(name='type'),
      weights?: {
        assessmentPoint?: int32(name='assessmentPoint', example='50'),
        expressiveness?: int32(name='expressiveness', example='30'),
        expressivenessEnabled?: boolean(name='expressivenessEnabled'),
        pointDeductionRule?: int32(name='pointDeductionRule'),
        pointDeductionRuleEnabled?: boolean(name='pointDeductionRuleEnabled'),
        standard?: int32(name='standard', example='20'),
        standardEnabled?: boolean(name='standardEnabled', example='true'),
      }(name='weights'),
    }
  ](name='list'),
  requestId?: string(name='requestId', description='Id of the request', example='86A90C40-D1AB-50DA-A4B1-0D545F80F2FE'),
  success?: boolean(name='success', example='true'),
  total?: int32(name='total', example='10'),
}

model ListAICoachScriptPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAICoachScriptPageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAICoachScriptPage  ListAICoachScriptPageRequest
  * @return ListAICoachScriptPageResponse
 */
async function listAICoachScriptPage(request: ListAICoachScriptPageRequest): ListAICoachScriptPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListAICoachScriptPage', 'GET', '/yic/yic-console/openService/v1/aicoach/pageScript', 'json', false, 'json', request);
}

model ListAICoachTaskPageRequest {
  pageNumber?: int32(name='pageNumber', example='1', position='Query'),
  pageSize?: int32(name='pageSize', example='10', position='Query'),
  status?: string(name='status', example='FINISHED', position='Query'),
  studentId?: string(name='studentId', example='111', position='Query'),
  taskId?: string(name='taskId', example='313123123', position='Query'),
}

model ListAICoachTaskPageResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='D7F2B74F-63F2-5DD6-95E4-F408EAD6617E'),
  taskList?: [ 
    {
      finishTime?: string(name='finishTime', example='yyyy-MM-dd HH:mm:ss'),
      status?: string(name='status', example='FINISHED'),
      studentId?: string(name='studentId', example='222'),
      taskId?: string(name='taskId', example='11111111111'),
    }
  ](name='taskList'),
}

model ListAICoachTaskPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAICoachTaskPageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAICoachTaskPage  ListAICoachTaskPageRequest
  * @return ListAICoachTaskPageResponse
 */
async function listAICoachTaskPage(request: ListAICoachTaskPageRequest): ListAICoachTaskPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListAICoachTaskPage', 'GET', '/yic/yic-console/openService/v1/aicoach/listTaskPage', 'json', false, 'json', request);
}

model ListAgentsRequest {
  agentId?: string(name='agentId', example='840016700254633984', position='Query'),
  agentScene?: string(name='agentScene', example='text', position='Query'),
  owner?: string(name='owner', example='SYSTEM', position='Query'),
  pageNumber?: int32(name='pageNumber', example='1', position='Query'),
  pageSize?: int32(name='pageSize', example='10', position='Query'),
  status?: int32(name='status', example='0', position='Query'),
}

model ListAgentsResponseBody = {
  list?: [ 
    {
      agentId?: string(name='agentId', example='840016700254633984'),
      agentName?: string(name='agentName'),
      agentScene?: string(name='agentScene', example='text'),
      charactersDescription?: string(name='charactersDescription'),
      enableInteraction?: int32(name='enableInteraction', example='1'),
      industry?: string(name='industry', example='Car'),
      onlineSearch?: boolean(name='onlineSearch', example='true'),
      owner?: string(name='owner', example='SYSTEM'),
      referenceUrl?: string(name='referenceUrl', example='http
;//www.abc.com/111.mp4'),
      status?: int32(name='status', example='0'),
      textStyle?: string(name='textStyle', example='RED_BOOK'),
      viewer?: string(name='viewer', example='Seller'),
    }
  ](name='list'),
  requestId?: string(name='requestId', example='86A90C40-D1AB-50DA-A4B1-0D545F80F2FE'),
  success?: boolean(name='success', example='true'),
  total?: int32(name='total', example='10'),
}

model ListAgentsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAgentsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAgents  ListAgentsRequest
  * @return ListAgentsResponse
 */
async function listAgents(request: ListAgentsRequest): ListAgentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListAgents', 'GET', '/yic/yic-console/openService/v1/agent/listAgents', 'json', false, 'json', request);
}

model ListAnchorRequest {
  anchorCategory?: string(name='anchorCategory', position='Query'),
  anchorType?: string(name='anchorType', example='PUBLIC_MODEL', position='Query'),
  coverRate?: string(name='coverRate', example='9:16', position='Query'),
  digitalHumanType?: string(name='digitalHumanType', example='staticTransparency', position='Query'),
  pageNumber?: int32(name='pageNumber', example='1', position='Query'),
  pageSize?: int32(name='pageSize', example='10', position='Query'),
  resSpecType?: string(name='resSpecType', position='Query'),
  useScene?: string(name='useScene', example='offlineSynthesis', position='Query'),
}

model ListAnchorResponseBody = {
  code?: string(name='code', description='code', example='200'),
  errorCode?: string(name='errorCode', example='Deduct.DeductTaskAlreadySuccess'),
  errorMessage?: string(name='errorMessage', example='Failed to proxy flink ui request, message: An error occurred: Invalid UUID string: jobsn'),
  list?: [
    AnchorResponse
  ](name='list'),
  requestId?: string(name='requestId', description='requestId', example='5389BE87-571B-573C-90ED-F07C5E68760B'),
  success?: boolean(name='success', example='True'),
  total?: int32(name='total', example='10'),
}

model ListAnchorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAnchorResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAnchor  ListAnchorRequest
  * @return ListAnchorResponse
 */
async function listAnchor(request: ListAnchorRequest): ListAnchorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListAnchor', 'GET', '/yic/yic-console/openService/v1/digitalHuman/anchorOpen/listAnchor', 'json', false, 'json', request);
}

model ListAvatarProjectRequest {
  projectIdList?: [ string ](name='projectIdList', shrink='simple', position='Query'),
}

model ListAvatarProjectResponseBody = {
  queryAvatarProjectResultList?: [ 
    {
      agentId?: string(name='agentId', example='1000206'),
      errorMsg?: string(name='errorMsg'),
      projectId?: string(name='projectId', example='12826084562688'),
      projectName?: string(name='projectName'),
      status?: string(name='status', example='DEPLOYING'),
    }
  ](name='queryAvatarProjectResultList'),
  requestId?: string(name='requestId', example='D7F2B74F-63F2-5DD6-95E4-F408EAD6617E'),
}

model ListAvatarProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAvatarProjectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAvatarProject  ListAvatarProjectRequest
  * @return ListAvatarProjectResponse
 */
async function listAvatarProject(request: ListAvatarProjectRequest): ListAvatarProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListAvatarProject', 'GET', '/yic/yic-console/openService/v1/avatar/project/listAvatarProject', 'json', false, 'json', request);
}

model ListKnowledgeBaseRequest {
  knowledgeBaseId?: string(name='knowledgeBaseId', example='"186432649"', position='Query'),
  pageNumber?: int32(name='pageNumber', example='1', position='Query'),
  pageSize?: int32(name='pageSize', example='10', position='Query'),
}

model ListKnowledgeBaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: KnowledgeBaseListResult  
}

/**
  * @param request  the request parameters of ListKnowledgeBase  ListKnowledgeBaseRequest
  * @return ListKnowledgeBaseResponse
 */
async function listKnowledgeBase(request: ListKnowledgeBaseRequest): ListKnowledgeBaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListKnowledgeBase', 'GET', '/yic/yic-console/openService/v1/knowledge-base', 'json', false, 'json', request);
}

model ListTextThemesRequest {
  industry?: string(name='industry', position='Query'),
}

model ListTextThemesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TextThemeListResult  
}

/**
  * @param request  the request parameters of ListTextThemes  ListTextThemesRequest
  * @return ListTextThemesResponse
 */
async function listTextThemes(request: ListTextThemesRequest): ListTextThemesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTextThemes', 'GET', '/yic/yic-console/openService/v1/textThemes', 'json', false, 'json', request);
}

model ListTextsRequest {
  generationSource?: string(name='generationSource', example='API', position='Query'),
  industry?: string(name='industry', example='Common', position='Query'),
  keyword?: string(name='keyword', position='Query'),
  pageNumber?: int32(name='pageNumber', example='1', position='Query'),
  pageSize?: int32(name='pageSize', example='10', position='Query'),
  publishStatus?: string(name='publishStatus', example='PUBLISH', position='Query'),
  textStyleType?: string(name='textStyleType', example='WECHAT_MOMENT', position='Query'),
  textTheme?: string(name='textTheme', example='xxx', position='Query'),
}

model ListTextsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TextQueryResult  
}

/**
  * @param request  the request parameters of ListTexts  ListTextsRequest
  * @return ListTextsResponse
 */
async function listTexts(request: ListTextsRequest): ListTextsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTexts', 'GET', '/yic/yic-console/openService/v1/texts', 'json', false, 'json', request);
}

model ListVoiceModelsRequest {
  pageNumber?: int32(name='pageNumber', example='1', position='Query'),
  pageSize?: int32(name='pageSize', example='10', position='Query'),
  resSpecType?: string(name='resSpecType', position='Query'),
  useScene?: string(name='useScene', example='offlineSynthesis', position='Query'),
  voiceLanguage?: string(name='voiceLanguage', position='Query'),
  voiceType?: string(name='voiceType', example='PRIVATE_VOICE', position='Query'),
}

model ListVoiceModelsResponseBody = {
  code?: string(name='code', example='200'),
  errorCode?: string(name='errorCode', example='040002'),
  errorMessage?: string(name='errorMessage', example='Failed to proxy flink ui request, message: An error occurred: Invalid UUID string: jobsn'),
  list?: [
    VoiceModelResponse
  ](name='list'),
  requestId?: string(name='requestId', description='Id of the request', example='14878724-A835-578D-9DD5-4779ADCE9221'),
  success?: boolean(name='success', example='True'),
  total?: int32(name='total', example='10'),
}

model ListVoiceModelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListVoiceModelsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListVoiceModels  ListVoiceModelsRequest
  * @return ListVoiceModelsResponse
 */
async function listVoiceModels(request: ListVoiceModelsRequest): ListVoiceModelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListVoiceModels', 'GET', '/yic/yic-console/openService/v1/digitalHuman/voiceOpen/listVoiceModels', 'json', false, 'json', request);
}

model OperateAvatarProjectRequest {
  operateType?: string(name='operateType', example='DELETE', position='Body'),
  projectId?: string(name='projectId', example='812907463682949120', position='Body'),
  resChannelNumber?: int32(name='resChannelNumber', example='1', position='Body'),
  resType?: string(name='resType', example='FREE', position='Body'),
}

model OperateAvatarProjectResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='86A90C40-D1AB-50DA-A4B1-0D545F80F2FE'),
  success?: boolean(name='success', example='True'),
}

model OperateAvatarProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OperateAvatarProjectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of OperateAvatarProject  OperateAvatarProjectRequest
  * @return OperateAvatarProjectResponse
 */
async function operateAvatarProject(request: OperateAvatarProjectRequest): OperateAvatarProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'OperateAvatarProject', 'POST', '/yic/yic-console/openService/v1/avatar/project/operateProjectAvatar', 'json', false, 'json', request);
}

model QueryAvatarProjectRequest {
  projectId?: string(name='projectId', example='11111', position='Query'),
}

model QueryAvatarProjectResponseBody = {
  agentId?: string(name='agentId', example='1000222'),
  errorMsg?: string(name='errorMsg', example='error'),
  frames?: [ 
    {
      layers?: [ 
        {
          height?: int32(name='height'),
          material?: {
            format?: string(name='format'),
            id?: string(name='id'),
            url?: string(name='url'),
          }(name='material'),
          positionX?: int32(name='positionX'),
          positionY?: int32(name='positionY'),
          type?: string(name='type'),
          width?: int32(name='width'),
        }
      ](name='layers'),
      videoScript?: {
        speedRate?: string(name='speedRate'),
        voiceTemplateId?: string(name='voiceTemplateId'),
      }(name='videoScript'),
    }
  ](name='frames'),
  projectName?: string(name='projectName', example='doc_test_3'),
  requestId?: string(name='requestId', example='2C331582-7390-5949-8D9A-AC8239185B37'),
  resSpecType?: string(name='resSpecType'),
  scaleType?: string(name='scaleType'),
  status?: string(name='status', example='DEPLOYING'),
}

model QueryAvatarProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAvatarProjectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryAvatarProject  QueryAvatarProjectRequest
  * @return QueryAvatarProjectResponse
 */
async function queryAvatarProject(request: QueryAvatarProjectRequest): QueryAvatarProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryAvatarProject', 'GET', '/yic/yic-console/openService/v1/avatar/project/queryAvatarProject', 'json', false, 'json', request);
}

model QueryAvatarResourceRequest {
  idempotentId?: string(name='idempotentId', example='11111', position='Query'),
}

model QueryAvatarResourceResponseBody = {
  queryResourceInfoList?: [ 
    {
      resourceId?: string(name='resourceId', example='21275'),
      type?: string(name='type', example='STANDARD'),
      validPeriodTime?: string(name='validPeriodTime', example='1719904342237'),
    }
  ](name='queryResourceInfoList'),
  requestId?: string(name='requestId', example='D5798660-1531-5D12-9C20-16FEE9D22351'),
}

model QueryAvatarResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAvatarResourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryAvatarResource  QueryAvatarResourceRequest
  * @return QueryAvatarResourceResponse
 */
async function queryAvatarResource(request: QueryAvatarResourceRequest): QueryAvatarResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryAvatarResource', 'GET', '/yic/yic-console/openService/v1/avatar/project/queryResource', 'json', false, 'json', request);
}

model QueryIndividuationTextTaskRequest {
  taskId?: string(name='taskId', example='829682927337963520', position='Query'),
}

model QueryIndividuationTextTaskResponseBody = {
  createTime?: string(name='createTime', example='yyyy-MM-dd HH:mm:ss'),
  requestId?: string(name='requestId', description='Id of the request', example='56AC346B-AF40-5E4F-AFFE-FD8BA5E6FB3A'),
  status?: int32(name='status', example='0'),
  textList?: [ 
    {
      status?: int32(name='status', example='0'),
      textId?: string(name='textId', example='2761'),
      userId?: string(name='userId', example='11'),
    }
  ](name='textList'),
  updateTime?: string(name='updateTime', example='yyyy-MM-dd HH:mm:ss'),
}

model QueryIndividuationTextTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryIndividuationTextTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryIndividuationTextTask  QueryIndividuationTextTaskRequest
  * @return QueryIndividuationTextTaskResponse
 */
async function queryIndividuationTextTask(request: QueryIndividuationTextTaskRequest): QueryIndividuationTextTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryIndividuationTextTask', 'GET', '/yic/yic-console/openService/v1/individuationText/queryTextTask', 'json', false, 'json', request);
}

model QuerySessionInfoRequest {
  pageNo?: int32(name='pageNo', example='1', position='Query'),
  pageSize?: int32(name='pageSize', example='10', position='Query'),
  projectId?: string(name='projectId', example='805800890535673856', position='Query'),
  statusList?: [ string ](name='statusList', shrink='simple', position='Query'),
}

model QuerySessionInfoResponseBody = {
  queryResourceInfoList?: [ 
    {
      sessionId?: string(name='sessionId', example='a169e9ec18404edc9972afd80866dc97'),
      status?: string(name='status', example='FREE'),
    }
  ](name='queryResourceInfoList'),
  requestId?: string(name='requestId', example='4D902811-B75C-5D1B-8882-D515F8E2F977'),
  total?: long(name='total', example='26'),
}

model QuerySessionInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySessionInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySessionInfo  QuerySessionInfoRequest
  * @return QuerySessionInfoResponse
 */
async function querySessionInfo(request: QuerySessionInfoRequest): QuerySessionInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QuerySessionInfo', 'GET', '/yic/yic-console/openService/v1/avatar/project/querySessionInfo', 'json', false, 'json', request);
}

model QueryTextStreamRequest {
  textId?: long(name='textId', example='70305', position='Path'),
}

model QueryTextStreamResponseBody = {
  end?: boolean(name='end', example='false'),
  index?: int32(name='index', example='1'),
  message?: string(name='message', description='Id of the request', example='None'),
  type?: int32(name='type', example='1'),
}

model QueryTextStreamResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryTextStreamResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryTextStream  QueryTextStreamRequest
  * @return QueryTextStreamResponse
 */
async function queryTextStream(request: QueryTextStreamRequest): QueryTextStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryTextStream', 'GET', '/yic/yic-console/openService/v1/stream/queryTextStream/{textId}', 'json', false, 'json', request);
}

function queryTextStreamWithResponseIterable(request: QueryTextStreamRequest): iterator[QueryTextStreamResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'QueryTextStream', 'GET', '/yic/yic-console/openService/v1/stream/queryTextStream/{textId}', 'json', false, 'json', request);
}

model SaveAvatarProjectRequest {
  agentId?: string(name='agentId', example='1000196', position='Body'),
  bitRate?: string(name='bitRate', position='Body'),
  frameRate?: string(name='frameRate', position='Body'),
  frames?: [ 
    {
      layers?: [ 
        {
          height?: int32(name='height', example='100'),
          material?: {
            format?: string(name='format', example='image/png'),
            id?: string(name='id', example='434508'),
            url?: string(name='url', example='https://alidocs.dingtalk.com/i/nodes/vy20BglGWOxjGpq0C5G4DlN0VA7depqY'),
          }(name='material'),
          positionX?: int32(name='positionX', example='1'),
          positionY?: int32(name='positionY', example='1'),
          type?: string(name='type', example='ANCHOR'),
          width?: int32(name='width', example='100'),
        }
      ](name='layers'),
      videoScript?: {
        speedRate?: string(name='speedRate', example='1.0'),
        voiceLanguage?: string(name='voiceLanguage'),
        voiceTemplateId?: string(name='voiceTemplateId', example='1'),
        volume?: string(name='volume', example='50'),
      }(name='videoScript'),
    }
  ](name='frames', position='Body'),
  operateType?: string(name='operateType', example='CREATE', position='Body'),
  projectId?: string(name='projectId', example='787594567117586432', position='Body'),
  projectName?: string(name='projectName', example='df_cs_471437', position='Body'),
  resSpecType?: string(name='resSpecType', example='STANDARD', position='Body'),
  resolution?: string(name='resolution', position='Body'),
  scaleType?: string(name='scaleType', example='9:16', position='Body'),
  synchronizedDisplay?: string(name='synchronizedDisplay', position='Body'),
}

model SaveAvatarProjectResponseBody = {
  agentId?: string(name='agentId', example='1000222'),
  errorCode?: string(name='errorCode', example='040002'),
  errorMessage?: string(name='errorMessage', example='Failed to proxy flink ui request, message: An error occurred: Invalid UUID string: jobsn'),
  errorMsg?: string(name='errorMsg', example='error'),
  projectId?: string(name='projectId', example='812907463682949120'),
  projectName?: string(name='projectName', example='doc_test_3'),
  requestId?: string(name='requestId', example='0E8B1746-AE35-5C4B-A3A8-345B274AE32C'),
  status?: string(name='status', example='DRAFT'),
}

model SaveAvatarProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SaveAvatarProjectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SaveAvatarProject  SaveAvatarProjectRequest
  * @return SaveAvatarProjectResponse
 */
async function saveAvatarProject(request: SaveAvatarProjectRequest): SaveAvatarProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SaveAvatarProject', 'POST', '/yic/yic-console/openService/v1/avatar/project/saveAvatarProject', 'json', false, 'json', request);
}

model SelectImageTaskRequest {
  taskId?: string(name='taskId', example='313123123', position='Path'),
}

model SelectImageTaskResponseBody = {
  errorMessage?: string(name='errorMessage', example='Failed to proxy flink ui request, message: An error occurred: Invalid UUID string: jobsn'),
  failed?: string(name='failed', example='1'),
  generationSource?: string(name='generationSource', example='PLATFORM'),
  gmtCreate?: string(name='gmtCreate', example='1'),
  imageInfos?: [ 
    {
      customImageUrl?: string(name='customImageUrl', example='www.ali.com'),
      gmtCreate?: string(name='gmtCreate', example='1'),
      imageH?: string(name='imageH', example='500'),
      imageW?: string(name='imageW', example='500'),
    }
  ](name='imageInfos'),
  requestId?: string(name='requestId', description='Id of the request', example='0E8B1746-AE35-5C4B-A3A8-345B274AE32C'),
  scene?: string(name='scene', example='1'),
  status?: string(name='status', example='Successed'),
  subtaskProcessing?: string(name='subtaskProcessing', example='1'),
  success?: string(name='success', example='1'),
  total?: string(name='total', example='10'),
}

model SelectImageTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SelectImageTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SelectImageTask  SelectImageTaskRequest
  * @return SelectImageTaskResponse
 */
async function selectImageTask(request: SelectImageTaskRequest): SelectImageTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SelectImageTask', 'GET', '/yic/yic-console/openService/v1/images/portrait/select/{taskId}', 'json', false, 'json', request);
}

model SelectResourceRequest {
  idempotentId?: string(name='idempotentId', example='1111', position='Query'),
}

model SelectResourceResponseBody = {
  aliyunUid?: string(name='aliyunUid'),
  requestId?: string(name='requestId', example='0E8B1746-AE35-5C4B-A3A8-345B274AE32C'),
  resourceInfoList?: [ 
    {
      expireTime?: string(name='expireTime', example='111'),
      lastExpire?: int32(name='lastExpire', example='11'),
      remainCount?: int32(name='remainCount', example='1249'),
      resourceType?: int32(name='resourceType', example='2'),
      unit?: string(name='unit', example='second'),
    }
  ](name='resourceInfoList'),
}

model SelectResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SelectResourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SelectResource  SelectResourceRequest
  * @return SelectResourceResponse
 */
async function selectResource(request: SelectResourceRequest): SelectResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SelectResource', 'GET', '/yic/yic-console/openService/v1/digitalHuman/project/commands/overview', 'json', false, 'json', request);
}

model SendSdkMessageRequest {
  data?: string(name='data', example='{}', position='Body'),
  header?: string(name='header', position='Body'),
  moduleName?: string(name='moduleName', example='avatar', position='Body'),
  operationName?: string(name='operationName', example='getProject', position='Body'),
  userId?: string(name='userId', example='123', position='Body'),
}

model SendSdkMessageResponseBody = {
  data?: string(name='data', example='{}'),
  errorCode?: string(name='errorCode', example='system-01'),
  errorMessage?: string(name='errorMessage', example='SYSTEM_ERROR'),
  requestId?: string(name='requestId', description='Id of the request', example='86A90C40-D1AB-50DA-A4B1-0D545F80F2FE'),
  success?: boolean(name='success', description='true', example='true'),
}

model SendSdkMessageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendSdkMessageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SendSdkMessage  SendSdkMessageRequest
  * @return SendSdkMessageResponse
 */
async function sendSdkMessage(request: SendSdkMessageRequest): SendSdkMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SendSdkMessage', 'POST', '/yic/yic-console/openService/v1/sdk/sendMessage', 'json', false, 'json', request);
}

model SendTextMsgRequest {
  projectId?: string(name='projectId', example='126000030', position='Body'),
  requestId?: string(name='requestId', example='52775239-1575-5C07-A4AE-1835D120E4A6', position='Body'),
  sessionId?: string(name='sessionId', example='tcm9xac9dsfbfgm8hf5k94l3cqybwh9o3mn0iuyytdgd9qoejxf1crxsdvuvr8fu0zudk5px4vsa3e3fgcclplkiuo7kyy3sqgscvhejmooblaiv64ww8cvlxvin2urzyhooqj33y7gvodef0sxn22n9q58o7xlupabiknxsv46qe7kof8nuc4be8kyhi01', position='Body'),
  text?: string(name='text', position='Body'),
  type?: int32(name='type', example='1', position='Body'),
}

model SendTextMsgResponseBody = {
  requestId?: string(name='requestId', example='827BF714-19E7-51B5-A434-C21BFEE05983'),
  status?: string(name='status', example='SUCCESS'),
}

model SendTextMsgResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendTextMsgResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SendTextMsg  SendTextMsgRequest
  * @return SendTextMsgResponse
 */
async function sendTextMsg(request: SendTextMsgRequest): SendTextMsgResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SendTextMsg', 'POST', '/yic/yic-console/openService/v1/avatar/project/sendTextMsg', 'json', false, 'json', request);
}

model StartAvatarSessionRequest {
  channelToken?: string(name='channelToken', position='Body'),
  customPushUrl?: string(name='customPushUrl', position='Body'),
  customUserId?: string(name='customUserId', position='Body'),
  projectId?: string(name='projectId', example='13534711288320', position='Body'),
  requestId?: string(name='requestId', example='15ED6083-B0B8-5B2A-BEDB-94A5C687C812', position='Body'),
}

model StartAvatarSessionResponseBody = {
  channelToken?: string(name='channelToken'),
  requestId?: string(name='requestId', example='0E8B1746-AE35-5C4B-A3A8-345B274AE32C'),
  sessionId?: string(name='sessionId', example='121dlsga4o7golrl1hoja'),
  token?: string(name='token'),
  webSocketUrl?: string(name='webSocketUrl'),
}

model StartAvatarSessionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartAvatarSessionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartAvatarSession  StartAvatarSessionRequest
  * @return StartAvatarSessionResponse
 */
async function startAvatarSession(request: StartAvatarSessionRequest): StartAvatarSessionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartAvatarSession', 'POST', '/yic/yic-console/openService/v1/avatar/project/startAvatarSession', 'json', false, 'json', request);
}

model StopAvatarSessionRequest {
  projectId?: string(name='projectId', example='124900036', position='Body'),
  sessionId?: string(name='sessionId', example='121dlsga4o7golrl1hojazg0u9lvysk0uyczgd79be2a4hkr9ijrblmb5qohi5iaja3p5j633doqj4t2uu3sek2i49hzkao0bli4bch4tnloyx22odd7sot9dxl5xfd0hbp7fl9dehnqofkb9csebf0nuezj8bwgec8ei6dby0encu5y88ky6oqensuqnj', position='Body'),
}

model StopAvatarSessionResponseBody = {
  requestId?: string(name='requestId', example='725E87CD-F2DE-5FC4-8A09-2EBDFBF26DAA'),
  status?: string(name='status', example='Stopped'),
}

model StopAvatarSessionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopAvatarSessionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopAvatarSession  StopAvatarSessionRequest
  * @return StopAvatarSessionResponse
 */
async function stopAvatarSession(request: StopAvatarSessionRequest): StopAvatarSessionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopAvatarSession', 'POST', '/yic/yic-console/openService/v1/avatar/project/stopAvatarSession', 'json', false, 'json', request);
}

model StopProjectTaskRequest {
  taskId?: string(name='taskId', example='1111111', position='Body'),
}

model StopProjectTaskResponseBody = {
  requestId?: string(name='requestId', example='86A90C40-D1AB-50DA-A4B1-0D545F80F2FE'),
  success?: boolean(name='success', example='True'),
}

model StopProjectTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopProjectTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopProjectTask  StopProjectTaskRequest
  * @return StopProjectTaskResponse
 */
async function stopProjectTask(request: StopProjectTaskRequest): StopProjectTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopProjectTask', 'POST', '/yic/yic-console/openService/v1/digitalHuman/project/stop', 'json', false, 'json', request);
}

model SubmitProjectTaskRequest {
  frames?: [ 
    {
      index?: int32(name='index', example='1'),
      layers?: [ 
        {
          height?: int32(name='height', example='222'),
          index?: int32(name='index', example='1'),
          material?: {
            anchorStyleLevel?: string(name='anchorStyleLevel'),
            format?: string(name='format', example='video/mp4'),
            id?: string(name='id', example='38863'),
            speed?: string(name='speed'),
            url?: string(name='url', example='https://meeting.dingtalk.com/j/1COFppy0POR'),
            volume?: int32(name='volume'),
          }(name='material'),
          positionX?: int32(name='positionX', example='11'),
          positionY?: int32(name='positionY', example='22'),
          type?: string(name='type', example='ANCHOR'),
          width?: int32(name='width', example='111'),
        }
      ](name='layers'),
      subtitle?: {
        alignment?: string(name='alignment', example='BottomLeft'),
        backgroundColor?: string(name='backgroundColor', example='#ffffff'),
        font?: string(name='font', example='SimSun'),
        fontColor?: string(name='fontColor', example='#ffffff'),
        fontSize?: int32(name='fontSize', example='32'),
        maxCharLength?: int32(name='maxCharLength', example='11'),
        positionX?: int32(name='positionX', example='2'),
        positionY?: int32(name='positionY', example='1'),
        textHeight?: int32(name='textHeight', example='22'),
        textWidth?: int32(name='textWidth', example='11'),
      }(name='subtitle'),
      videoScript?: {
        audioUrl?: string(name='audioUrl', example='https://meeting.dingtalk.com/j/1COFppy0POR'),
        emotion?: string(name='emotion'),
        pitchRate?: string(name='pitchRate'),
        speechOpen?: boolean(name='speechOpen'),
        speedRate?: string(name='speedRate', example='2.0'),
        textContent?: string(name='textContent'),
        type?: string(name='type', example='TEXT'),
        voiceLanguage?: string(name='voiceLanguage'),
        voiceTemplateId?: long(name='voiceTemplateId', example='11'),
        volume?: int32(name='volume', example='20'),
      }(name='videoScript'),
    }
  ](name='frames', description='frame', position='Body'),
  scaleType?: string(name='scaleType', example='9:16', position='Body'),
  subtitleTag?: int32(name='subtitleTag', example='1', position='Body'),
  transparentBackground?: int32(name='transparentBackground', position='Body'),
}

model SubmitProjectTaskResponseBody = {
  requestId?: string(name='requestId', example='551FF252-6CFC-5DDA-9F84-9B07302385C2'),
  taskId?: string(name='taskId', example='313123123'),
}

model SubmitProjectTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitProjectTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitProjectTask  SubmitProjectTaskRequest
  * @return SubmitProjectTaskResponse
 */
async function submitProjectTask(request: SubmitProjectTaskRequest): SubmitProjectTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SubmitProjectTask', 'POST', '/yic/yic-console/openService/v1/digitalHuman/project/submitProjectTask', 'json', false, 'json', request);
}

model TransferPortraitStyleRequest {
  height?: int32(name='height', example='500', position='Body'),
  imageUrl?: string(name='imageUrl', example='WWW', position='Body'),
  numbers?: int32(name='numbers', example='4', position='Body'),
  redrawAmplitude?: int32(name='redrawAmplitude', example='1', position='Body'),
  style?: int32(name='style', example='1', position='Body'),
  width?: int32(name='width', example='500', position='Body'),
}

model TransferPortraitStyleResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='725E87CD-F2DE-5FC4-8A09-2EBDFBF26DAA'),
  taskId?: string(name='taskId', example='313123123'),
}

model TransferPortraitStyleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TransferPortraitStyleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of TransferPortraitStyle  TransferPortraitStyleRequest
  * @return TransferPortraitStyleResponse
 */
async function transferPortraitStyle(request: TransferPortraitStyleRequest): TransferPortraitStyleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'TransferPortraitStyle', 'POST', '/yic/yic-console/openService/v1/images/portrait/transferPortraitStyle', 'json', false, 'json', request);
}

