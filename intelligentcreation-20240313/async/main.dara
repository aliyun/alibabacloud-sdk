/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'IntelligentCreation';
  @version = '2024-03-13';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AnchorResponse {
  anchorId?: string(name='anchorId'),
  anchorMaterialName?: string(name='anchorMaterialName'),
  anchorType?: string(name='anchorType'),
  coverHeight?: int32(name='coverHeight'),
  coverRate?: string(name='coverRate'),
  coverThumbnailUrl?: string(name='coverThumbnailUrl'),
  coverUrl?: string(name='coverUrl'),
  coverWeight?: int32(name='coverWeight'),
  digitalHumanType?: string(name='digitalHumanType'),
  gender?: string(name='gender'),
  resourceTypeDesc?: string(name='resourceTypeDesc'),
  status?: string(name='status'),
  useScene?: string(name='useScene'),
}

model GetOssUploadTokenResult {
  requestId?: string(name='requestId', example='3239281273464326823'),
  uploadInfo: UploadInfo(name='uploadInfo'),
}

model Illustration {
  illustrationId?: long(name='illustrationId'),
  oss?: string(name='oss'),
}

model IllustrationResult {
  illustration?: Illustration(name='illustration'),
  requestId?: string(name='requestId', example='3239281273464326823'),
}

model IllustrationTask {
  gmtCreate?: string(name='gmtCreate'),
  gmtModified?: string(name='gmtModified'),
  illustrationIds?: [ long ](name='illustrationIds'),
  illustrationTaskId?: long(name='illustrationTaskId'),
  taskStatus?: string(name='taskStatus', example='Success'),
  textId?: long(name='textId'),
}

model IllustrationTaskCreateCmd {
  backgroundType?: int32(name='backgroundType', example='0-不换背景，1-换背景'),
  dstHeight?: int32(name='dstHeight', example='1024'),
  dstWidth?: int32(name='dstWidth', example='1024'),
  idempotentId?: string(name='idempotentId', example='28274623764834'),
  nums?: int32(name='nums', example='4'),
  ossPaths?: [ string ](name='ossPaths'),
  stickerText?: string(name='stickerText'),
}

model IllustrationTaskResult {
  illustrationTask?: IllustrationTask(name='illustrationTask'),
  requestId?: string(name='requestId', example='3239281273464326823'),
}

model ReferenceTag {
  referenceContent?: string(name='referenceContent'),
  referenceTitle?: string(name='referenceTitle'),
}

model Text {
  agentId?: string(name='agentId'),
  agentName?: string(name='agentName'),
  desc: string(name='desc', example='xxx'),
  gmtCreate?: string(name='gmtCreate'),
  gmtModified?: string(name='gmtModified'),
  illustrationTaskIdList?: [ long ](name='illustrationTaskIdList'),
  publishStatus?: string(name='publishStatus'),
  textContent?: string(name='textContent'),
  textId: long(name='textId', example='1'),
  textIllustrationTag?: boolean(name='textIllustrationTag', example='true'),
  textModeType?: string(name='textModeType'),
  textStatus: string(name='textStatus', example='Generating'),
  textStyleType?: string(name='textStyleType'),
  textTaskId: long(name='textTaskId', example='123'),
  textThemes?: [ string ](name='textThemes'),
  title?: string(name='title', example='xxx'),
  userNameCreate: string(name='userNameCreate', example='xxx'),
  userNameModified: string(name='userNameModified', example='xxx'),
}

model TextQueryResult {
  requestId?: string(name='requestId'),
  texts?: [
    Text
  ](name='texts'),
  total?: int32(name='total', example='10'),
}

model TextResult {
  requestId?: string(name='requestId', example='3239281273464326823'),
  text: Text(name='text'),
}

model TextTask {
  agentId?: string(name='agentId'),
  agentName?: string(name='agentName'),
  contentRequirement?: string(name='contentRequirement', example='九寨沟三日游攻略'),
  gmtCreate?: string(name='gmtCreate'),
  gmtModified?: string(name='gmtModified'),
  introduction?: string(name='introduction'),
  nums: int32(name='nums', example='1'),
  point?: string(name='point', example='xxx'),
  referenceTag?: ReferenceTag(name='referenceTag'),
  relatedRagId?: int32(name='relatedRagId'),
  style: string(name='style'),
  target?: string(name='target'),
  textIds?: [ long ](name='textIds'),
  textModeType: string(name='textModeType'),
  textTaskId?: long(name='textTaskId'),
  textTaskStatus?: string(name='textTaskStatus'),
  texts?: [
    Text
  ](name='texts'),
  theme?: string(name='theme', example='旅游路线'),
  themeDesc?: string(name='themeDesc'),
}

model TextTaskCreateCmd {
  agentId?: string(name='agentId'),
  contentRequirement?: string(name='contentRequirement', example='极氪007新车上市'),
  idempotentId?: string(name='idempotentId', example='28274623764834'),
  industry?: string(name='industry'),
  introduction?: string(name='introduction', example='xxx'),
  number: int32(name='number', example='4'),
  point?: string(name='point', example='超强续航'),
  referenceTag?: ReferenceTag(name='referenceTag'),
  relatedRagIds?: [ long ](name='relatedRagIds', example='1'),
  style: string(name='style'),
  target?: string(name='target'),
  textModeType: string(name='textModeType'),
  theme?: string(name='theme', example='旅游路线'),
  themes?: [ string ](name='themes'),
}

model TextTaskResult {
  textTask?: TextTask(name='textTask'),
}

model TextTheme {
  desc?: string(name='desc'),
  name?: string(name='name'),
}

model TextThemeListResult {
  requestId?: string(name='requestId', example='3239281273464326823'),
  textThemeList: [
    TextTheme
  ](name='textThemeList'),
}

model UploadInfo {
  accessId: string(name='accessId', example='xxxxxx'),
  host: string(name='host', example='yic-pre.oss-cn-hangzhou.aliyuncs.com'),
  key: string(name='key', example='1234/temp-novels/xxxx-xxx-xx.txt'),
  policy: string(name='policy', example='xxxxxxxx'),
  policySignature: string(name='policySignature', example='xxxxxxx'),
  url?: string(name='url', example='xxxxxx'),
}

model VoiceModelResponse {
  resourceTypeDesc?: string(name='resourceTypeDesc'),
  useScene?: string(name='useScene'),
  voiceDesc?: string(name='voiceDesc'),
  voiceGender?: string(name='voiceGender'),
  voiceId?: long(name='voiceId'),
  voiceLanguage?: string(name='voiceLanguage'),
  voiceModel?: string(name='voiceModel'),
  voiceName?: string(name='voiceName'),
  voiceType?: string(name='voiceType'),
  voiceUrl?: string(name='voiceUrl'),
}

model AddTextFeedbackRequest {
  content?: string(name='content', position='Body'),
  quality?: int32(name='quality', example='1', position='Body'),
  textId?: long(name='textId', example='8478', position='Body'),
}

model AddTextFeedbackResponseBody = {
  requestId?: string(name='requestId', example='3239281273464326823'),
  success?: boolean(name='success', example='True'),
}

model AddTextFeedbackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddTextFeedbackResponseBody(name='body'),
}

async function addTextFeedback(request: AddTextFeedbackRequest): AddTextFeedbackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddTextFeedback', 'POST', '/yic/yic-console/openService/v1/addTextFeedback', 'json', false, 'json', request);
}

model CheckSessionRequest {
  projectId?: string(name='projectId', example='11111', position='Body'),
  sessionId?: string(name='sessionId', example='121dlsga4o7golrl1hoja', position='Body'),
}

model CheckSessionResponseBody = {
  requestId?: string(name='requestId', example='5389BE87-571B-573C-90ED-F07C5E68760B'),
  status?: string(name='status', example='FREE'),
}

model CheckSessionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckSessionResponseBody(name='body'),
}

async function checkSession(request: CheckSessionRequest): CheckSessionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CheckSession', 'POST', '/yic/yic-console/openService/v1/avatar/project/checkSession', 'json', false, 'json', request);
}

model CountTextRequest {
  generationSource?: string(name='generationSource', description='API', example='PLATFORM', position='Query'),
  industry?: string(name='industry', example='Garment', position='Query'),
  publishStatus?: string(name='publishStatus', example='1', position='Query'),
  style?: string(name='style', example='RED_BOOK', position='Query'),
}

model CountTextResponseBody = {
  requestId?: string(name='RequestId', example='6C9CB64D-E2D3-5BF2-A9E6-2445F952F178'),
  countTextCmdList?: [ 
    {
      count?: long(name='count', example='4'),
      theme?: string(name='theme', example='RED_BOOK'),
    }
  ](name='countTextCmdList'),
}

model CountTextResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CountTextResponseBody(name='body'),
}

async function countText(request: CountTextRequest): CountTextResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CountText', 'GET', '/yic/yic-console/openService/v1/countText', 'json', false, 'json', request);
}

model CreateIllustrationTaskRequest {
  textId?: long(name='textId', example='1', position='Path'),
  body?: IllustrationTaskCreateCmd(name='body', position='Body'),
}

model CreateIllustrationTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IllustrationTaskResult  
}

async function createIllustrationTask(request: CreateIllustrationTaskRequest): CreateIllustrationTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateIllustrationTask', 'POST', '/yic/yic-console/openService/v1/texts/{textId}/illustrationTasks', 'json', false, 'json', request);
}

model CreateTextTaskRequest {
  body?: TextTaskCreateCmd(name='body', position='Body'),
}

model CreateTextTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TextTaskResult  
}

async function createTextTask(request: CreateTextTaskRequest): CreateTextTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateTextTask', 'POST', '/yic/yic-console/openService/v1/textTasks', 'json', false, 'json', request);
}

model GetIllustrationRequest {
  textId: long(name='textId', example='1', position='Path'),
  illustrationId: long(name='illustrationId', example='1', position='Path'),
}

model GetIllustrationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IllustrationResult  
}

async function getIllustration(request: GetIllustrationRequest): GetIllustrationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetIllustration', 'GET', '/yic/yic-console/openService/v1/texts/{textId}/illustrations/{illustrationId}', 'json', false, 'json', request);
}

model GetIllustrationTaskRequest {
  textId: long(name='textId', example='1', position='Path'),
  illustrationTaskId: long(name='illustrationTaskId', example='1', position='Path'),
}

model GetIllustrationTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IllustrationTaskResult  
}

async function getIllustrationTask(request: GetIllustrationTaskRequest): GetIllustrationTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetIllustrationTask', 'GET', '/yic/yic-console/openService/v1/texts/{textId}/illustrationTasks/{illustrationTaskId}', 'json', false, 'json', request);
}

model GetOssUploadTokenRequest {
  fileName: string(name='fileName', example='8021678.png', position='Query'),
  fileType: string(name='fileType', example='ProductImage', position='Query'),
}

model GetOssUploadTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOssUploadTokenResult  
}

async function getOssUploadToken(request: GetOssUploadTokenRequest): GetOssUploadTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetOssUploadToken', 'GET', '/yic/yic-console/openService/v1/uploadToken', 'json', false, 'json', request);
}

model GetProjectTaskRequest {
  idempotentId?: string(name='IdempotentId', example='20230823218109326025-1200', position='Query'),
  taskId?: string(name='taskId', example='313123123', position='Query'),
}

model GetProjectTaskResponseBody = {
  errorMsg?: string(name='errorMsg', example='error'),
  requestId?: string(name='requestId', example='5389BE87-571B-573C-90ED-F07C5E68760B'),
  status?: string(name='status', example='SUCCESS'),
  videoDownloadUrl?: string(name='videoDownloadUrl', example='www.ali.com'),
  videoDuration?: int32(name='videoDuration', example='111'),
  videoUrl?: string(name='videoUrl', example='www.ali.com'),
}

model GetProjectTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetProjectTaskResponseBody(name='body'),
}

async function getProjectTask(request: GetProjectTaskRequest): GetProjectTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetProjectTask', 'GET', '/yic/yic-console/openService/v1/digitalHuman/project/getProjectTask', 'json', false, 'json', request);
}

model GetTextRequest {
  textId: long(name='textId', example='1', position='Path'),
}

model GetTextResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TextResult  
}

async function getText(request: GetTextRequest): GetTextResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetText', 'GET', '/yic/yic-console/openService/v1/texts/{textId}', 'json', false, 'json', request);
}

model GetTextTaskRequest {
  textTaskId?: long(name='textTaskId', example='1', position='Path'),
}

model GetTextTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TextTaskResult  
}

async function getTextTask(request: GetTextTaskRequest): GetTextTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTextTask', 'GET', '/yic/yic-console/openService/v1/textTasks/{textTaskId}', 'json', false, 'json', request);
}

model GetTextTemplateRequest {
  industry?: string(name='industry', example='Car', position='Query'),
}

model GetTextTemplateResponseBody = {
  availableIndustry?: {
    name?: string(name='name', example='Car'),
    textModeTypes?: [ 
      {
        name?: string(name='name', example='Rewrite'),
        textStyles?: [ 
          {
            desc?: string(name='desc'),
            disabled?: boolean(name='disabled', example='false'),
            name?: string(name='name', example='RED_BOOK'),
            templateKey?: string(name='templateKey', example='111'),
          }
        ](name='textStyles'),
      }
    ](name='textModeTypes'),
  }(name='availableIndustry'),
  requestId?: string(name='requestId', example='3239281273464326823'),
}

model GetTextTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTextTemplateResponseBody(name='body'),
}

async function getTextTemplate(request: GetTextTemplateRequest): GetTextTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTextTemplate', 'GET', '/yic/yic-console/openService/v1/texts/commands/getTextTemplate', 'json', false, 'json', request);
}

model ListAnchorRequest {
  anchorType?: string(name='anchorType', example='PUBLIC_MODEL', position='Query'),
  coverRate?: string(name='coverRate', example='9:16', position='Query'),
  digitalHumanType?: string(name='digitalHumanType', example='staticTransparency', position='Query'),
  pageNumber?: int32(name='pageNumber', example='1', position='Query'),
  pageSize?: int32(name='pageSize', example='10', position='Query'),
  useScene?: string(name='useScene', example='offlineSynthesis', position='Query'),
}

model ListAnchorResponseBody = {
  code?: string(name='code', description='code', example='200'),
  errorCode?: string(name='errorCode', example='Deduct.DeductTaskAlreadySuccess'),
  errorMessage?: string(name='errorMessage', example='Failed to proxy flink ui request, message: An error occurred: Invalid UUID string: jobsn'),
  list?: [
    AnchorResponse
  ](name='list'),
  requestId?: string(name='requestId', description='requestId', example='5389BE87-571B-573C-90ED-F07C5E68760B'),
  success?: boolean(name='success', example='True'),
  total?: int32(name='total', example='10'),
}

model ListAnchorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAnchorResponseBody(name='body'),
}

async function listAnchor(request: ListAnchorRequest): ListAnchorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListAnchor', 'GET', '/yic/yic-console/openService/v1/digitalHuman/anchorOpen/listAnchor', 'json', false, 'json', request);
}

model ListTextThemesRequest {
  industry?: string(name='industry', position='Query'),
}

model ListTextThemesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TextThemeListResult  
}

async function listTextThemes(request: ListTextThemesRequest): ListTextThemesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTextThemes', 'GET', '/yic/yic-console/openService/v1/textThemes', 'json', false, 'json', request);
}

model ListTextsRequest {
  generationSource?: string(name='generationSource', example='API', position='Query'),
  industry?: string(name='industry', example='Common', position='Query'),
  keyword?: string(name='keyword', position='Query'),
  pageNumber?: int32(name='pageNumber', example='1', position='Query'),
  pageSize?: int32(name='pageSize', example='10', position='Query'),
  publishStatus?: string(name='publishStatus', example='PUBLISH', position='Query'),
  textStyleType?: string(name='textStyleType', example='WECHAT_MOMENT', position='Query'),
  textTheme?: string(name='textTheme', example='xxx', position='Query'),
}

model ListTextsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TextQueryResult  
}

async function listTexts(request: ListTextsRequest): ListTextsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTexts', 'GET', '/yic/yic-console/openService/v1/texts', 'json', false, 'json', request);
}

model ListVoiceModelsRequest {
  pageNumber?: int32(name='pageNumber', example='1', position='Query'),
  pageSize?: int32(name='pageSize', example='10', position='Query'),
  useScene?: string(name='useScene', example='offlineSynthesis', position='Query'),
  voiceType?: string(name='voiceType', example='PRIVATE_VOICE', position='Query'),
}

model ListVoiceModelsResponseBody = {
  code?: string(name='code', example='200'),
  errorCode?: string(name='errorCode', example='040002'),
  errorMessage?: string(name='errorMessage', example='Failed to proxy flink ui request, message: An error occurred: Invalid UUID string: jobsn'),
  list?: [
    VoiceModelResponse
  ](name='list'),
  requestId?: string(name='requestId', description='Id of the request', example='14878724-A835-578D-9DD5-4779ADCE9221'),
  success?: boolean(name='success', example='True'),
  total?: int32(name='total', example='10'),
}

model ListVoiceModelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListVoiceModelsResponseBody(name='body'),
}

async function listVoiceModels(request: ListVoiceModelsRequest): ListVoiceModelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListVoiceModels', 'GET', '/yic/yic-console/openService/v1/digitalHuman/voiceOpen/listVoiceModels', 'json', false, 'json', request);
}

model QueryAvatarProjectRequest {
  projectId?: string(name='projectId', example='11111', position='Query'),
}

model QueryAvatarProjectResponseBody = {
  agentId?: string(name='agentId', example='1000222'),
  errorMsg?: string(name='errorMsg', example='error'),
  projectName?: string(name='projectName', example='doc_test_3'),
  requestId?: string(name='requestId', example='2C331582-7390-5949-8D9A-AC8239185B37'),
  status?: string(name='status', example='DEPLOYING'),
}

model QueryAvatarProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAvatarProjectResponseBody(name='body'),
}

async function queryAvatarProject(request: QueryAvatarProjectRequest): QueryAvatarProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryAvatarProject', 'GET', '/yic/yic-console/openService/v1/avatar/project/queryAvatarProject', 'json', false, 'json', request);
}

model QueryAvatarResourceRequest {
  idempotentId?: string(name='idempotentId', example='11111', position='Query'),
}

model QueryAvatarResourceResponseBody = {
  queryResourceInfoList?: [ 
    {
      resourceId?: string(name='resourceId', example='21275'),
      type?: string(name='type', example='STANDARD'),
      validPeriodTime?: string(name='validPeriodTime', example='1719904342237'),
    }
  ](name='queryResourceInfoList'),
  requestId?: string(name='requestId', example='D5798660-1531-5D12-9C20-16FEE9D22351'),
}

model QueryAvatarResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAvatarResourceResponseBody(name='body'),
}

async function queryAvatarResource(request: QueryAvatarResourceRequest): QueryAvatarResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryAvatarResource', 'GET', '/yic/yic-console/openService/v1/avatar/project/queryResource', 'json', false, 'json', request);
}

model SelectResourceRequest {
  idempotentId?: string(name='idempotentId', example='1111', position='Query'),
}

model SelectResourceResponseBody = {
  requestId?: string(name='requestId', example='0E8B1746-AE35-5C4B-A3A8-345B274AE32C'),
  resourceInfoList?: [ 
    {
      expireTime?: string(name='expireTime', example='111'),
      lastExpire?: int32(name='lastExpire', example='11'),
      remainCount?: int32(name='remainCount', example='1249'),
      resourceType?: int32(name='resourceType', example='2'),
      unit?: string(name='unit', example='second'),
    }
  ](name='resourceInfoList'),
}

model SelectResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SelectResourceResponseBody(name='body'),
}

async function selectResource(request: SelectResourceRequest): SelectResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SelectResource', 'GET', '/yic/yic-console/openService/v1/digitalHuman/project/commands/overview', 'json', false, 'json', request);
}

model SendTextMsgRequest {
  projectId?: string(name='projectId', example='126000030', position='Body'),
  requestId?: string(name='requestId', example='52775239-1575-5C07-A4AE-1835D120E4A6', position='Body'),
  sessionId?: string(name='sessionId', example='tcm9xac9dsfbfgm8hf5k94l3cqybwh9o3mn0iuyytdgd9qoejxf1crxsdvuvr8fu0zudk5px4vsa3e3fgcclplkiuo7kyy3sqgscvhejmooblaiv64ww8cvlxvin2urzyhooqj33y7gvodef0sxn22n9q58o7xlupabiknxsv46qe7kof8nuc4be8kyhi01', position='Body'),
  text?: string(name='text', position='Body'),
  type?: int32(name='type', example='1', position='Body'),
}

model SendTextMsgResponseBody = {
  requestId?: string(name='requestId', example='827BF714-19E7-51B5-A434-C21BFEE05983'),
  status?: string(name='status', example='SUCCESS'),
}

model SendTextMsgResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendTextMsgResponseBody(name='body'),
}

async function sendTextMsg(request: SendTextMsgRequest): SendTextMsgResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SendTextMsg', 'POST', '/yic/yic-console/openService/v1/avatar/project/sendTextMsg', 'json', false, 'json', request);
}

model StartAvatarSessionRequest {
  projectId?: string(name='projectId', example='13534711288320', position='Body'),
  requestId?: string(name='requestId', example='15ED6083-B0B8-5B2A-BEDB-94A5C687C812', position='Body'),
}

model StartAvatarSessionResponseBody = {
  channelToken?: string(name='channelToken'),
  requestId?: string(name='requestId', example='0E8B1746-AE35-5C4B-A3A8-345B274AE32C'),
  sessionId?: string(name='sessionId', example='121dlsga4o7golrl1hoja'),
}

model StartAvatarSessionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartAvatarSessionResponseBody(name='body'),
}

async function startAvatarSession(request: StartAvatarSessionRequest): StartAvatarSessionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartAvatarSession', 'POST', '/yic/yic-console/openService/v1/avatar/project/startAvatarSession', 'json', false, 'json', request);
}

model StopAvatarSessionRequest {
  projectId?: string(name='projectId', example='124900036', position='Body'),
  sessionId?: string(name='sessionId', example='121dlsga4o7golrl1hojazg0u9lvysk0uyczgd79be2a4hkr9ijrblmb5qohi5iaja3p5j633doqj4t2uu3sek2i49hzkao0bli4bch4tnloyx22odd7sot9dxl5xfd0hbp7fl9dehnqofkb9csebf0nuezj8bwgec8ei6dby0encu5y88ky6oqensuqnj', position='Body'),
}

model StopAvatarSessionResponseBody = {
  requestId?: string(name='requestId', example='725E87CD-F2DE-5FC4-8A09-2EBDFBF26DAA'),
  status?: string(name='status', example='Stopped'),
}

model StopAvatarSessionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopAvatarSessionResponseBody(name='body'),
}

async function stopAvatarSession(request: StopAvatarSessionRequest): StopAvatarSessionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopAvatarSession', 'POST', '/yic/yic-console/openService/v1/avatar/project/stopAvatarSession', 'json', false, 'json', request);
}

model StopProjectTaskRequest {
  taskId?: string(name='taskId', example='1111111', position='Body'),
}

model StopProjectTaskResponseBody = {
  requestId?: string(name='requestId', example='86A90C40-D1AB-50DA-A4B1-0D545F80F2FE'),
  success?: boolean(name='success', example='True'),
}

model StopProjectTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopProjectTaskResponseBody(name='body'),
}

async function stopProjectTask(request: StopProjectTaskRequest): StopProjectTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopProjectTask', 'POST', '/yic/yic-console/openService/v1/digitalHuman/project/stop', 'json', false, 'json', request);
}

model SubmitProjectTaskRequest {
  frames?: [ 
    {
      index?: int32(name='index', example='1'),
      layers?: [ 
        {
          height?: int32(name='height', example='222'),
          index?: int32(name='index', example='1'),
          material?: {
            format?: string(name='format', example='video/mp4'),
            id?: string(name='id', example='38863'),
            url?: string(name='url', example='https://meeting.dingtalk.com/j/1COFppy0POR'),
          }(name='material'),
          positionX?: int32(name='positionX', example='11'),
          positionY?: int32(name='positionY', example='22'),
          type?: string(name='type', example='ANCHOR'),
          width?: int32(name='width', example='111'),
        }
      ](name='layers'),
      subtitle?: {
        alignment?: string(name='alignment', example='BottomLeft'),
        backgroundColor?: string(name='backgroundColor', example='#ffffff'),
        font?: string(name='font', example='SimSun'),
        fontColor?: string(name='fontColor', example='#ffffff'),
        fontSize?: int32(name='fontSize', example='32'),
        maxCharLength?: int32(name='maxCharLength', example='11'),
        positionX?: int32(name='positionX', example='2'),
        positionY?: int32(name='positionY', example='1'),
        textHeight?: int32(name='textHeight', example='22'),
        textWidth?: int32(name='textWidth', example='11'),
      }(name='subtitle'),
      videoScript?: {
        audioUrl?: string(name='audioUrl', example='https://meeting.dingtalk.com/j/1COFppy0POR'),
        speedRate?: string(name='speedRate', example='2.0'),
        textContent?: string(name='textContent'),
        type?: string(name='type', example='TEXT'),
        voiceTemplateId?: long(name='voiceTemplateId', example='11'),
        volume?: int32(name='volume', example='20'),
      }(name='videoScript'),
    }
  ](name='frames', description='frame', position='Body'),
  scaleType?: string(name='scaleType', example='9:16', position='Body'),
  subtitleTag?: int32(name='subtitleTag', example='1', position='Body'),
  transparentBackground?: int32(name='transparentBackground', position='Body'),
}

model SubmitProjectTaskResponseBody = {
  requestId?: string(name='requestId', example='551FF252-6CFC-5DDA-9F84-9B07302385C2'),
  taskId?: string(name='taskId', example='313123123'),
}

model SubmitProjectTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitProjectTaskResponseBody(name='body'),
}

async function submitProjectTask(request: SubmitProjectTaskRequest): SubmitProjectTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SubmitProjectTask', 'POST', '/yic/yic-console/openService/v1/digitalHuman/project/submitProjectTask', 'json', false, 'json', request);
}

