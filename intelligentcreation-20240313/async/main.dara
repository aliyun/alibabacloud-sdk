/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'IntelligentCreation';
  @version = '2024-03-13';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model GetOssUploadTokenResult {
  requestId?: string(name='requestId', example='3239281273464326823'),
  uploadInfo: UploadInfo(name='uploadInfo'),
}

model Illustration {
  illustrationId?: long(name='illustrationId'),
  oss?: string(name='oss'),
}

model IllustrationResult {
  illustration?: Illustration(name='illustration'),
  requestId?: string(name='requestId', example='3239281273464326823'),
}

model IllustrationTask {
  gmtCreate?: string(name='gmtCreate'),
  gmtModified?: string(name='gmtModified'),
  illustrationIds?: [ long ](name='illustrationIds'),
  illustrationTaskId?: long(name='illustrationTaskId'),
  taskStatus?: string(name='taskStatus', example='Success'),
  textId?: long(name='textId'),
}

model IllustrationTaskCreateCmd {
  backgroundType?: int32(name='backgroundType', example='0-不换背景，1-换背景'),
  dstHeight?: int32(name='dstHeight', example='1024'),
  dstWidth?: int32(name='dstWidth', example='1024'),
  idempotentId?: string(name='idempotentId', example='28274623764834'),
  nums?: int32(name='nums', example='4'),
  ossPaths?: [ string ](name='ossPaths'),
  stickerText?: string(name='stickerText'),
}

model IllustrationTaskResult {
  illustrationTask?: IllustrationTask(name='illustrationTask'),
  requestId?: string(name='requestId', example='3239281273464326823'),
}

model ReferenceTag {
  referenceContent?: string(name='referenceContent'),
  referenceTitle?: string(name='referenceTitle'),
}

model Text {
  desc: string(name='desc', example='xxx'),
  gmtCreate?: string(name='gmtCreate'),
  gmtModified?: string(name='gmtModified'),
  illustrationTaskIdList?: [ long ](name='illustrationTaskIdList'),
  textContent?: string(name='textContent'),
  textId: long(name='textId', example='1'),
  textIllustrationTag?: boolean(name='textIllustrationTag', example='true'),
  textModeType?: string(name='textModeType'),
  textStatus: string(name='textStatus', example='Generating'),
  textTaskId: long(name='textTaskId', example='123'),
  title?: string(name='title', example='xxx'),
  userNameCreate: string(name='userNameCreate', example='xxx'),
  userNameModified: string(name='userNameModified', example='xxx'),
}

model TextResult {
  requestId?: string(name='requestId', example='3239281273464326823'),
  text: Text(name='text'),
}

model TextTask {
  contentRequirement?: string(name='contentRequirement', example='九寨沟三日游攻略'),
  gmtCreate?: string(name='gmtCreate'),
  gmtModified?: string(name='gmtModified'),
  introduction?: string(name='introduction'),
  nums: int32(name='nums', example='1'),
  point?: string(name='point', example='xxx'),
  referenceTag?: ReferenceTag(name='referenceTag'),
  relatedRagId?: int32(name='relatedRagId'),
  style: string(name='style'),
  target?: string(name='target'),
  textIds?: [ long ](name='textIds'),
  textModeType: string(name='textModeType'),
  textTaskId?: long(name='textTaskId'),
  textTaskStatus?: string(name='textTaskStatus'),
  theme?: string(name='theme', example='旅游路线'),
  themeDesc?: string(name='themeDesc'),
}

model TextTaskCreateCmd {
  contentRequirement?: string(name='contentRequirement', example='极氪007新车上市'),
  idempotentId?: string(name='idempotentId', example='28274623764834'),
  introduction?: string(name='introduction', example='xxx'),
  number: int32(name='number', example='4'),
  point?: string(name='point', example='超强续航'),
  referenceTag?: ReferenceTag(name='referenceTag'),
  relatedRagIds?: [ long ](name='relatedRagIds', example='1'),
  style: string(name='style'),
  target?: string(name='target'),
  textModeType: string(name='textModeType'),
  theme?: string(name='theme', example='旅游路线'),
}

model TextTaskResult {
  textTask?: TextTask(name='textTask'),
}

model TextTheme {
  desc?: string(name='desc'),
  name?: string(name='name'),
}

model TextThemeListResult {
  requestId?: string(name='requestId', example='3239281273464326823'),
  textThemeList: [
    TextTheme
  ](name='textThemeList'),
}

model UploadInfo {
  accessId: string(name='accessId', example='xxxxxx'),
  host: string(name='host', example='yic-pre.oss-cn-hangzhou.aliyuncs.com'),
  key: string(name='key', example='1234/temp-novels/xxxx-xxx-xx.txt'),
  policy: string(name='policy', example='xxxxxxxx'),
  policySignature: string(name='policySignature', example='xxxxxxx'),
  url?: string(name='url', example='xxxxxx'),
}

model CreateIllustrationTaskRequest {
  textId?: long(name='textId', example='1', position='Path'),
  body?: IllustrationTaskCreateCmd(name='body', position='Body'),
}

model CreateIllustrationTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IllustrationTaskResult  
}

async function createIllustrationTask(request: CreateIllustrationTaskRequest): CreateIllustrationTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateIllustrationTask', 'POST', '/yic/yic-console/openService/v1/texts/{textId}/illustrationTasks', 'json', false, 'json', request);
}

model CreateTextTaskRequest {
  body?: TextTaskCreateCmd(name='body', position='Body'),
}

model CreateTextTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TextTaskResult  
}

async function createTextTask(request: CreateTextTaskRequest): CreateTextTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateTextTask', 'POST', '/yic/yic-console/openService/v1/textTasks', 'json', false, 'json', request);
}

model GetIllustrationRequest {
  textId: long(name='textId', example='1', position='Path'),
  illustrationId: long(name='illustrationId', example='1', position='Path'),
}

model GetIllustrationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IllustrationResult  
}

async function getIllustration(request: GetIllustrationRequest): GetIllustrationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetIllustration', 'GET', '/yic/yic-console/openService/v1/texts/{textId}/illustrations/{illustrationId}', 'json', false, 'json', request);
}

model GetIllustrationTaskRequest {
  textId: long(name='textId', example='1', position='Path'),
  illustrationTaskId: long(name='illustrationTaskId', example='1', position='Path'),
}

model GetIllustrationTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IllustrationTaskResult  
}

async function getIllustrationTask(request: GetIllustrationTaskRequest): GetIllustrationTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetIllustrationTask', 'GET', '/yic/yic-console/openService/v1/texts/{textId}/illustrationTasks/{illustrationTaskId}', 'json', false, 'json', request);
}

model GetOssUploadTokenRequest {
  fileName: string(name='fileName', example='8021678.png', position='Query'),
  fileType: string(name='fileType', example='ProductImage', position='Query'),
}

model GetOssUploadTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOssUploadTokenResult  
}

async function getOssUploadToken(request: GetOssUploadTokenRequest): GetOssUploadTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetOssUploadToken', 'GET', '/yic/yic-console/openService/v1/uploadToken', 'json', false, 'json', request);
}

model GetTextRequest {
  textId: long(name='textId', example='1', position='Path'),
}

model GetTextResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TextResult  
}

async function getText(request: GetTextRequest): GetTextResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetText', 'GET', '/yic/yic-console/openService/v1/texts/{textId}', 'json', false, 'json', request);
}

model GetTextTaskRequest {
  textTaskId?: long(name='textTaskId', example='1', position='Path'),
}

model GetTextTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TextTaskResult  
}

async function getTextTask(request: GetTextTaskRequest): GetTextTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTextTask', 'GET', '/yic/yic-console/openService/v1/textTasks/{textTaskId}', 'json', false, 'json', request);
}

model ListTextThemesRequest {
}

model ListTextThemesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TextThemeListResult  
}

async function listTextThemes(request: ListTextThemesRequest): ListTextThemesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTextThemes', 'GET', '/yic/yic-console/openService/v1/textThemes', 'json', false, 'json', request);
}

