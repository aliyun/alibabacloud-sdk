/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Mns-open';
  @version = '2022-01-19';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CreateQueueRequest {
  delaySeconds: long(name='DelaySeconds', position='Query'),
  enableLogging: boolean(name='EnableLogging', position='Query'),
  maximumMessageSize: long(name='MaximumMessageSize', position='Query'),
  messageRetentionPeriod: long(name='MessageRetentionPeriod', position='Query'),
  pollingWaitSeconds: long(name='PollingWaitSeconds', position='Query'),
  queueName: string(name='QueueName', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  visibilityTimeout: long(name='VisibilityTimeout', position='Query'),
}

model CreateQueueResponseBody = {
  code?: long(name='Code'),
  data?: {
    code?: long(name='Code'),
    message?: string(name='Message'),
    success?: boolean(name='Success'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  success?: boolean(name='Success'),
}

model CreateQueueResponse = {
  headers: map[string]string(name='headers'),
  body: CreateQueueResponseBody(name='body'),
}

async function createQueue(request: CreateQueueRequest): CreateQueueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateQueue', 'POST', '/', 'json', false, 'json', request);
}

model CreateTopicRequest {
  enableLogging: boolean(name='EnableLogging', position='Body'),
  maxMessageSize: long(name='MaxMessageSize', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  topicName: string(name='TopicName', position='Body'),
}

model CreateTopicResponseBody = {
  code?: long(name='Code'),
  data?: {
    code?: long(name='Code'),
    message?: string(name='Message'),
    success?: boolean(name='Success'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  success?: boolean(name='Success'),
}

model CreateTopicResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTopicResponseBody(name='body'),
}

async function createTopic(request: CreateTopicRequest): CreateTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTopic', 'POST', '/', 'json', true, 'form', request);
}

model DeleteQueueRequest {
  queueName: string(name='QueueName', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DeleteQueueResponseBody = {
  code?: long(name='Code'),
  data?: {
    code?: long(name='Code'),
    message?: string(name='Message'),
    success?: boolean(name='Success'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  success?: boolean(name='Success'),
}

model DeleteQueueResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteQueueResponseBody(name='body'),
}

async function deleteQueue(request: DeleteQueueRequest): DeleteQueueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteQueue', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTopicRequest {
  regionId?: string(name='RegionId', position='Host'),
  topicName: string(name='TopicName', position='Query'),
}

model DeleteTopicResponseBody = {
  code?: long(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  success?: boolean(name='Success'),
}

model DeleteTopicResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTopicResponseBody(name='body'),
}

async function deleteTopic(request: DeleteTopicRequest): DeleteTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTopic', 'POST', '/', 'json', false, 'json', request);
}

model GetQueueAttributesRequest {
  queueName: string(name='QueueName', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model GetQueueAttributesResponseBody = {
  code?: long(name='Code'),
  data?: {
    activeMessages?: long(name='ActiveMessages'),
    createTime?: long(name='CreateTime'),
    delayMessages?: long(name='DelayMessages'),
    delaySeconds?: long(name='DelaySeconds'),
    inactiveMessages?: long(name='InactiveMessages'),
    lastModifyTime?: long(name='LastModifyTime'),
    loggingEnabled?: boolean(name='LoggingEnabled'),
    maximumMessageSize?: long(name='MaximumMessageSize'),
    messageRetentionPeriod?: long(name='MessageRetentionPeriod'),
    pollingWaitSeconds?: long(name='PollingWaitSeconds'),
    queueInternalUrl?: string(name='QueueInternalUrl'),
    queueName?: string(name='QueueName'),
    queueUrl?: string(name='QueueUrl'),
    visibilityTimeout?: long(name='VisibilityTimeout'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  success?: boolean(name='Success'),
}

model GetQueueAttributesResponse = {
  headers: map[string]string(name='headers'),
  body: GetQueueAttributesResponseBody(name='body'),
}

async function getQueueAttributes(request: GetQueueAttributesRequest): GetQueueAttributesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetQueueAttributes', 'POST', '/', 'json', false, 'json', request);
}

model GetSubscriptionAttributesRequest {
  regionId?: string(name='RegionId', position='Host'),
  subscriptionName: string(name='SubscriptionName', position='Query'),
  topicName?: string(name='TopicName', position='Query'),
}

model GetSubscriptionAttributesResponseBody = {
  code?: long(name='Code'),
  data?: {
    createTime?: long(name='CreateTime'),
    endpoint?: string(name='Endpoint'),
    filterTag?: string(name='FilterTag'),
    lastModifyTime?: long(name='LastModifyTime'),
    notifyContentFormat?: string(name='NotifyContentFormat'),
    notifyStrategy?: string(name='NotifyStrategy'),
    subscriptionName?: string(name='SubscriptionName'),
    subscriptionURL?: string(name='SubscriptionURL'),
    topicName?: string(name='TopicName'),
    topicOwner?: string(name='TopicOwner'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  success?: boolean(name='Success'),
}

model GetSubscriptionAttributesResponse = {
  headers: map[string]string(name='headers'),
  body: GetSubscriptionAttributesResponseBody(name='body'),
}

async function getSubscriptionAttributes(request: GetSubscriptionAttributesRequest): GetSubscriptionAttributesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSubscriptionAttributes', 'POST', '/', 'json', false, 'json', request);
}

model GetTopicAttributesRequest {
  regionId?: string(name='RegionId', position='Host'),
  topicName: string(name='TopicName', position='Query'),
}

model GetTopicAttributesResponseBody = {
  code?: long(name='Code'),
  data?: {
    createTime?: long(name='CreateTime'),
    lastModifyTime?: long(name='LastModifyTime'),
    loggingEnabled?: boolean(name='LoggingEnabled'),
    maxMessageSize?: long(name='MaxMessageSize'),
    messageCount?: long(name='MessageCount'),
    messageRetentionPeriod?: long(name='MessageRetentionPeriod'),
    topicInnerUrl?: string(name='TopicInnerUrl'),
    topicName?: string(name='TopicName'),
    topicUrl?: string(name='TopicUrl'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  success?: boolean(name='Success'),
}

model GetTopicAttributesResponse = {
  headers: map[string]string(name='headers'),
  body: GetTopicAttributesResponseBody(name='body'),
}

async function getTopicAttributes(request: GetTopicAttributesRequest): GetTopicAttributesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTopicAttributes', 'POST', '/', 'json', false, 'json', request);
}

model ListQueueRequest {
  pageNum: long(name='PageNum', position='Query'),
  pageSize: long(name='PageSize', position='Query'),
  queueName?: string(name='QueueName', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ListQueueResponseBody = {
  code?: long(name='Code'),
  data?: {
    pageData?: [ 
      {
        activeMessages?: long(name='ActiveMessages'),
        createTime?: long(name='CreateTime'),
        delayMessages?: long(name='DelayMessages'),
        delaySeconds?: long(name='DelaySeconds'),
        inactiveMessages?: long(name='InactiveMessages'),
        lastModifyTime?: long(name='LastModifyTime'),
        loggingEnabled?: boolean(name='LoggingEnabled'),
        maximumMessageSize?: long(name='MaximumMessageSize'),
        messageRetentionPeriod?: long(name='MessageRetentionPeriod'),
        pollingWaitSeconds?: long(name='PollingWaitSeconds'),
        queueInternalUrl?: string(name='QueueInternalUrl'),
        queueName?: string(name='QueueName'),
        queueUrl?: string(name='QueueUrl'),
        visibilityTimeout?: long(name='VisibilityTimeout'),
      }
    ](name='PageData'),
    pageNum?: long(name='PageNum'),
    pageSize?: long(name='PageSize'),
    pages?: long(name='Pages'),
    size?: long(name='Size'),
    total?: long(name='Total'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  success?: boolean(name='Success'),
}

model ListQueueResponse = {
  headers: map[string]string(name='headers'),
  body: ListQueueResponseBody(name='body'),
}

async function listQueue(request: ListQueueRequest): ListQueueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListQueue', 'POST', '/', 'json', false, 'json', request);
}

model ListSubscriptionByTopicRequest {
  pageNum: long(name='PageNum', position='Query'),
  pageSize: long(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  subscriptionName?: string(name='SubscriptionName', position='Query'),
  topicName: string(name='TopicName', position='Query'),
}

model ListSubscriptionByTopicResponseBody = {
  code?: long(name='Code'),
  data?: {
    pageData?: [ 
      {
        createTime?: long(name='CreateTime'),
        endpoint?: string(name='Endpoint'),
        filterTag?: string(name='FilterTag'),
        lastModifyTime?: long(name='LastModifyTime'),
        notifyContentFormat?: string(name='NotifyContentFormat'),
        notifyStrategy?: string(name='NotifyStrategy'),
        subscriptionName?: string(name='SubscriptionName'),
        subscriptionURL?: string(name='SubscriptionURL'),
        topicName?: string(name='TopicName'),
        topicOwner?: string(name='TopicOwner'),
      }
    ](name='PageData'),
    pageNum?: long(name='PageNum'),
    pageSize?: long(name='PageSize'),
    pages?: long(name='Pages'),
    size?: long(name='Size'),
    total?: long(name='Total'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  success?: boolean(name='Success'),
}

model ListSubscriptionByTopicResponse = {
  headers: map[string]string(name='headers'),
  body: ListSubscriptionByTopicResponseBody(name='body'),
}

async function listSubscriptionByTopic(request: ListSubscriptionByTopicRequest): ListSubscriptionByTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSubscriptionByTopic', 'POST', '/', 'json', false, 'json', request);
}

model ListTopicRequest {
  pageNum: long(name='PageNum', position='Query'),
  pageSize: long(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  topicName?: string(name='TopicName', position='Query'),
}

model ListTopicResponseBody = {
  code?: long(name='Code'),
  data?: {
    pageData?: [ 
      {
        createTime?: long(name='CreateTime'),
        lastModifyTime?: long(name='LastModifyTime'),
        loggingEnabled?: boolean(name='LoggingEnabled'),
        maxMessageSize?: long(name='MaxMessageSize'),
        messageCount?: long(name='MessageCount'),
        messageRetentionPeriod?: long(name='MessageRetentionPeriod'),
        topicInnerUrl?: string(name='TopicInnerUrl'),
        topicName?: string(name='TopicName'),
        topicUrl?: string(name='TopicUrl'),
      }
    ](name='PageData'),
    pageNum?: long(name='PageNum'),
    pageSize?: long(name='PageSize'),
    total?: long(name='Total'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  success?: boolean(name='Success'),
}

model ListTopicResponse = {
  headers: map[string]string(name='headers'),
  body: ListTopicResponseBody(name='body'),
}

async function listTopic(request: ListTopicRequest): ListTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTopic', 'POST', '/', 'json', false, 'json', request);
}

model SetQueueAttributesRequest {
  delaySeconds: long(name='DelaySeconds', position='Query'),
  enableLogging: boolean(name='EnableLogging', position='Query'),
  maximumMessageSize: long(name='MaximumMessageSize', position='Query'),
  messageRetentionPeriod: long(name='MessageRetentionPeriod', position='Query'),
  pollingWaitSeconds: long(name='PollingWaitSeconds', position='Query'),
  queueName: string(name='QueueName', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  visibilityTimeout: long(name='VisibilityTimeout', position='Query'),
}

model SetQueueAttributesResponseBody = {
  code?: long(name='Code'),
  data?: {
    code?: long(name='Code'),
    message?: string(name='Message'),
    success?: boolean(name='Success'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  success?: boolean(name='Success'),
}

model SetQueueAttributesResponse = {
  headers: map[string]string(name='headers'),
  body: SetQueueAttributesResponseBody(name='body'),
}

async function setQueueAttributes(request: SetQueueAttributesRequest): SetQueueAttributesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetQueueAttributes', 'POST', '/', 'json', false, 'json', request);
}

model SetSubscriptionAttributesRequest {
  notifyStrategy?: string(name='NotifyStrategy', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  subscriptionName: string(name='SubscriptionName', position='Query'),
  topicName: string(name='TopicName', position='Query'),
}

model SetSubscriptionAttributesResponseBody = {
  code?: long(name='Code'),
  data?: {
    code?: long(name='Code'),
    message?: string(name='Message'),
    success?: boolean(name='Success'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  success?: boolean(name='Success'),
}

model SetSubscriptionAttributesResponse = {
  headers: map[string]string(name='headers'),
  body: SetSubscriptionAttributesResponseBody(name='body'),
}

async function setSubscriptionAttributes(request: SetSubscriptionAttributesRequest): SetSubscriptionAttributesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetSubscriptionAttributes', 'POST', '/', 'json', false, 'json', request);
}

model SetTopicAttributesRequest {
  enableLogging: boolean(name='EnableLogging', position='Query'),
  maxMessageSize: long(name='MaxMessageSize', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  topicName: string(name='TopicName', position='Query'),
}

model SetTopicAttributesResponseBody = {
  code?: long(name='Code'),
  data?: {
    code?: long(name='Code'),
    message?: string(name='Message'),
    success?: boolean(name='Success'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  success?: boolean(name='Success'),
}

model SetTopicAttributesResponse = {
  headers: map[string]string(name='headers'),
  body: SetTopicAttributesResponseBody(name='body'),
}

async function setTopicAttributes(request: SetTopicAttributesRequest): SetTopicAttributesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetTopicAttributes', 'POST', '/', 'json', false, 'json', request);
}

model SubscribeRequest {
  endpoint?: string(name='Endpoint', position='Query'),
  messageTag?: string(name='MessageTag', position='Query'),
  notifyContentFormat?: string(name='NotifyContentFormat', position='Query'),
  notifyStrategy?: string(name='NotifyStrategy', position='Query'),
  pushType?: string(name='PushType', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  subscriptionName: string(name='SubscriptionName', position='Query'),
  topicName?: string(name='TopicName', position='Query'),
}

model SubscribeResponseBody = {
  code?: long(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  success?: boolean(name='Success'),
}

model SubscribeResponse = {
  headers: map[string]string(name='headers'),
  body: SubscribeResponseBody(name='body'),
}

async function subscribe(request: SubscribeRequest): SubscribeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Subscribe', 'POST', '/', 'json', false, 'json', request);
}

model UnsubscribeRequest {
  regionId?: string(name='RegionId', position='Host'),
  subscriptionName: string(name='SubscriptionName', position='Query'),
  topicName?: string(name='TopicName', position='Query'),
}

model UnsubscribeResponseBody = {
  code?: long(name='Code'),
  data?: {
    code?: long(name='Code'),
    message?: string(name='Message'),
    success?: boolean(name='Success'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  success?: boolean(name='Success'),
}

model UnsubscribeResponse = {
  headers: map[string]string(name='headers'),
  body: UnsubscribeResponseBody(name='body'),
}

async function unsubscribe(request: UnsubscribeRequest): UnsubscribeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Unsubscribe', 'POST', '/', 'json', false, 'json', request);
}

