/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Mns-open';
  @version = '2022-01-19';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CreateQueueRequest {
  regionId?: string(name='RegionId', position='Host'),
  delaySeconds?: long(name='DelaySeconds', example='0', position='Query'),
  enableLogging?: boolean(name='EnableLogging', example='true', position='Query'),
  maximumMessageSize?: long(name='MaximumMessageSize', example='65536', position='Query'),
  messageRetentionPeriod?: long(name='MessageRetentionPeriod', example='345600', position='Query'),
  pollingWaitSeconds?: long(name='PollingWaitSeconds', example='0', position='Query'),
  queueName: string(name='QueueName', example='06273500-249F-5863-121D-74D51123****', position='Query'),
  visibilityTimeout?: long(name='VisibilityTimeout', example='60', position='Query'),
}

model CreateQueueResponseBody = {
  code?: long(name='Code', example='200'),
  data?: {
    code?: long(name='Code', example='200'),
    message?: string(name='Message'),
    success?: boolean(name='Success', example='true'),
  }(name='Data'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='06273500-249F-5863-121D-74D51123E62C'),
  status?: string(name='Status', example='Success'),
  success?: boolean(name='Success', example='true'),
}

model CreateQueueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateQueueResponseBody(name='body'),
}

async function createQueue(request: CreateQueueRequest): CreateQueueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateQueue', 'POST', '/', 'json', false, 'json', request);
}

model CreateTopicRequest {
  regionId?: string(name='RegionId', position='Host'),
  enableLogging?: boolean(name='EnableLogging', example='true', position='Body'),
  maxMessageSize?: long(name='MaxMessageSize', example='10240', position='Body'),
  topicName: string(name='TopicName', example='test', position='Body'),
}

model CreateTopicResponseBody = {
  code?: long(name='Code', example='200'),
  data?: {
    code?: long(name='Code', example='200'),
    message?: string(name='Message'),
    success?: boolean(name='Success', example='true'),
  }(name='Data'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='06273500-249F-5863-121D-74D51123E62C'),
  status?: string(name='Status', example='Success'),
  success?: boolean(name='Success', example='true'),
}

model CreateTopicResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTopicResponseBody(name='body'),
}

async function createTopic(request: CreateTopicRequest): CreateTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTopic', 'POST', '/', 'json', true, 'form', request);
}

model DeleteQueueRequest {
  regionId?: string(name='RegionId', position='Host'),
  queueName: string(name='QueueName', example='tf-testAccMNSQueue-525478433321945943', position='Query'),
}

model DeleteQueueResponseBody = {
  code?: long(name='Code', example='200'),
  data?: {
    code?: long(name='Code', example='200'),
    message?: string(name='Message'),
    success?: boolean(name='Success', example='true'),
  }(name='Data'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='06273500-249F-5863-121D-74D51123****'),
  status?: string(name='Status', example='Success'),
  success?: boolean(name='Success', example='true'),
}

model DeleteQueueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteQueueResponseBody(name='body'),
}

async function deleteQueue(request: DeleteQueueRequest): DeleteQueueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteQueue', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTopicRequest {
  regionId?: string(name='RegionId', position='Host'),
  topicName: string(name='TopicName', example='tf-testAccMNSTopic-112965059402264645', position='Query'),
}

model DeleteTopicResponseBody = {
  code?: long(name='Code', example='200'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='06273500-249F-5863-121D-74D51123****'),
  status?: string(name='Status', example='Success'),
  success?: boolean(name='Success', example='true'),
}

model DeleteTopicResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTopicResponseBody(name='body'),
}

async function deleteTopic(request: DeleteTopicRequest): DeleteTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTopic', 'POST', '/', 'json', false, 'json', request);
}

model GetQueueAttributesRequest {
  regionId?: string(name='RegionId', position='Host'),
  queueName: string(name='QueueName', example='demo-queue', position='Query'),
}

model GetQueueAttributesResponseBody = {
  code?: long(name='Code', example='200'),
  data?: {
    activeMessages?: long(name='ActiveMessages', example='20'),
    createTime?: long(name='CreateTime', example='1250700999'),
    delayMessages?: long(name='DelayMessages', example='0'),
    delaySeconds?: long(name='DelaySeconds', example='30'),
    inactiveMessages?: long(name='InactiveMessages', example='0'),
    lastModifyTime?: long(name='LastModifyTime', example='1250700999'),
    loggingEnabled?: boolean(name='LoggingEnabled', example='True'),
    maximumMessageSize?: long(name='MaximumMessageSize', example='65536'),
    messageRetentionPeriod?: long(name='MessageRetentionPeriod', example='65536'),
    pollingWaitSeconds?: long(name='PollingWaitSeconds', example='0'),
    queueName?: string(name='QueueName', example='demo-queue'),
    visibilityTimeout?: long(name='VisibilityTimeout', example='60'),
  }(name='Data'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='06273500-249F-5863-121D-74D51123****'),
  status?: string(name='Status', example='Success'),
  success?: boolean(name='Success', example='true'),
}

model GetQueueAttributesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetQueueAttributesResponseBody(name='body'),
}

async function getQueueAttributes(request: GetQueueAttributesRequest): GetQueueAttributesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetQueueAttributes', 'POST', '/', 'json', false, 'json', request);
}

model GetSubscriptionAttributesRequest {
  regionId?: string(name='RegionId', position='Host'),
  subscriptionName: string(name='SubscriptionName', example='MySubscription', position='Query'),
  topicName: string(name='TopicName', example='MyTopic', position='Query'),
}

model GetSubscriptionAttributesResponseBody = {
  code?: long(name='Code', example='200'),
  data?: {
    createTime?: long(name='CreateTime', example='1449554806'),
    endpoint?: string(name='Endpoint', example='http://example.com'),
    filterTag?: string(name='FilterTag', example='important'),
    lastModifyTime?: long(name='LastModifyTime', example='1449554962'),
    notifyContentFormat?: string(name='NotifyContentFormat', example='XML'),
    notifyStrategy?: string(name='NotifyStrategy', example='BACKOFF_RETRY'),
    subscriptionName?: string(name='SubscriptionName', example='MySubscription'),
    topicName?: string(name='TopicName', example='MyTopic'),
    topicOwner?: string(name='TopicOwner', example='123456789098****'),
  }(name='Data'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='06273500-249F-5863-121D-74D51123****'),
  status?: string(name='Status', example='Success'),
  success?: boolean(name='Success', example='true'),
}

model GetSubscriptionAttributesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSubscriptionAttributesResponseBody(name='body'),
}

async function getSubscriptionAttributes(request: GetSubscriptionAttributesRequest): GetSubscriptionAttributesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSubscriptionAttributes', 'POST', '/', 'json', false, 'json', request);
}

model GetTopicAttributesRequest {
  regionId?: string(name='RegionId', position='Host'),
  topicName: string(name='TopicName', example='demo-topic', position='Query'),
}

model GetTopicAttributesResponseBody = {
  code?: long(name='Code', example='200'),
  data?: {
    createTime?: long(name='CreateTime', example='1449554277'),
    lastModifyTime?: long(name='LastModifyTime', example='1449554460'),
    loggingEnabled?: boolean(name='LoggingEnabled', example='True'),
    maxMessageSize?: long(name='MaxMessageSize', example='65536'),
    messageCount?: long(name='MessageCount', example='0'),
    messageRetentionPeriod?: long(name='MessageRetentionPeriod', example='86400'),
    topicName?: string(name='TopicName', example='demo-topic'),
  }(name='Data'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='06273500-249F-5863-121D-74D51123****'),
  status?: string(name='Status', example='Success'),
  success?: boolean(name='Success', example='true'),
}

model GetTopicAttributesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTopicAttributesResponseBody(name='body'),
}

async function getTopicAttributes(request: GetTopicAttributesRequest): GetTopicAttributesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTopicAttributes', 'POST', '/', 'json', false, 'json', request);
}

model ListQueueRequest {
  regionId?: string(name='RegionId', position='Host'),
  pageNum?: long(name='PageNum', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='20', position='Query'),
  queueName?: string(name='QueueName', example='demo-queue', position='Query'),
}

model ListQueueResponseBody = {
  code?: long(name='Code', example='200'),
  data?: {
    pageData?: [ 
      {
        activeMessages?: long(name='ActiveMessages', example='20'),
        createTime?: long(name='CreateTime', example='1250700999'),
        delayMessages?: long(name='DelayMessages', example='0'),
        delaySeconds?: long(name='DelaySeconds', example='30'),
        inactiveMessages?: long(name='InactiveMessages', example='0'),
        lastModifyTime?: long(name='LastModifyTime', example='1250700999'),
        loggingEnabled?: boolean(name='LoggingEnabled', example='True'),
        maximumMessageSize?: long(name='MaximumMessageSize', example='65536'),
        messageRetentionPeriod?: long(name='MessageRetentionPeriod', example='65536'),
        pollingWaitSeconds?: long(name='PollingWaitSeconds', example='0'),
        queueName?: string(name='QueueName', example='demo-queue'),
        visibilityTimeout?: long(name='VisibilityTimeout', example='60'),
      }
    ](name='PageData'),
    pageNum?: long(name='PageNum', example='1'),
    pageSize?: long(name='PageSize', example='50'),
    pages?: long(name='Pages', example='3'),
    size?: long(name='Size', example='20'),
    total?: long(name='Total', example='130'),
  }(name='Data'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='06273500-249F-5863-121D-74D51123****'),
  status?: string(name='Status', example='Success'),
  success?: boolean(name='Success', example='true'),
}

model ListQueueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListQueueResponseBody(name='body'),
}

async function listQueue(request: ListQueueRequest): ListQueueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListQueue', 'POST', '/', 'json', false, 'json', request);
}

model ListSubscriptionByTopicRequest {
  regionId?: string(name='RegionId', position='Host'),
  pageNum?: long(name='PageNum', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='20', position='Query'),
  subscriptionName?: string(name='SubscriptionName', example='demo-subscription', position='Query'),
  topicName: string(name='TopicName', example='test', position='Query'),
}

model ListSubscriptionByTopicResponseBody = {
  code?: long(name='Code', example='200'),
  data?: {
    pageData?: [ 
      {
        createTime?: long(name='CreateTime', example='1449554806'),
        endpoint?: string(name='Endpoint', example='http://example.com'),
        filterTag?: string(name='FilterTag', example='important'),
        lastModifyTime?: long(name='LastModifyTime', example='1449554806'),
        notifyContentFormat?: string(name='NotifyContentFormat', example='XML'),
        notifyStrategy?: string(name='NotifyStrategy', example='BACKOFF_RETRY'),
        subscriptionName?: string(name='SubscriptionName', example='MySubscription'),
        topicName?: string(name='TopicName', example='MyTopic'),
        topicOwner?: string(name='TopicOwner', example='123456789098****'),
      }
    ](name='PageData'),
    pageNum?: long(name='PageNum', example='1'),
    pageSize?: long(name='PageSize', example='50'),
    pages?: long(name='Pages', example='3'),
    size?: long(name='Size', example='20'),
    total?: long(name='Total', example='130'),
  }(name='Data'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='06273500-249F-5863-121D-74D51123****'),
  status?: string(name='Status', example='Success'),
  success?: boolean(name='Success', example='true'),
}

model ListSubscriptionByTopicResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSubscriptionByTopicResponseBody(name='body'),
}

async function listSubscriptionByTopic(request: ListSubscriptionByTopicRequest): ListSubscriptionByTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSubscriptionByTopic', 'POST', '/', 'json', false, 'json', request);
}

model ListTopicRequest {
  regionId?: string(name='RegionId', position='Host'),
  pageNum?: long(name='PageNum', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='20', position='Query'),
  topicName?: string(name='TopicName', example='test', position='Query'),
}

model ListTopicResponseBody = {
  code?: long(name='Code', example='200'),
  data?: {
    pageData?: [ 
      {
        createTime?: long(name='CreateTime', example='1449554962'),
        lastModifyTime?: long(name='LastModifyTime', example='1449554962'),
        loggingEnabled?: boolean(name='LoggingEnabled', example='True'),
        maxMessageSize?: long(name='MaxMessageSize', example='65536'),
        messageCount?: long(name='MessageCount', example='0'),
        messageRetentionPeriod?: long(name='MessageRetentionPeriod', example='86400'),
        topicInnerUrl?: string(name='TopicInnerUrl'),
        topicName?: string(name='TopicName', example='demo-topic'),
        topicUrl?: string(name='TopicUrl'),
      }
    ](name='PageData'),
    pageNum?: long(name='PageNum', example='1'),
    pageSize?: long(name='PageSize', example='50'),
    total?: long(name='Total', example='130'),
  }(name='Data'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='06273500-249F-5863-121D-74D51123****'),
  status?: string(name='Status', example='Success'),
  success?: boolean(name='Success', example='true'),
}

model ListTopicResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTopicResponseBody(name='body'),
}

async function listTopic(request: ListTopicRequest): ListTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTopic', 'POST', '/', 'json', false, 'json', request);
}

model SetQueueAttributesRequest {
  regionId?: string(name='RegionId', position='Host'),
  delaySeconds?: long(name='DelaySeconds', example='0', position='Query'),
  enableLogging?: boolean(name='EnableLogging', example='True', position='Query'),
  maximumMessageSize?: long(name='MaximumMessageSize', example='1024', position='Query'),
  messageRetentionPeriod?: long(name='MessageRetentionPeriod', example='120', position='Query'),
  pollingWaitSeconds?: long(name='PollingWaitSeconds', example='0', position='Query'),
  queueName: string(name='QueueName', example='testqueue', position='Query'),
  visibilityTimeout?: long(name='VisibilityTimeout', example='60', position='Query'),
}

model SetQueueAttributesResponseBody = {
  code?: long(name='Code', example='200'),
  data?: {
    code?: long(name='Code', example='200'),
    message?: string(name='Message'),
    success?: boolean(name='Success', example='true'),
  }(name='Data'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='06273500-249F-5863-121D-74D51123****'),
  status?: string(name='Status', example='Success'),
  success?: boolean(name='Success', example='true'),
}

model SetQueueAttributesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetQueueAttributesResponseBody(name='body'),
}

async function setQueueAttributes(request: SetQueueAttributesRequest): SetQueueAttributesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetQueueAttributes', 'POST', '/', 'json', false, 'json', request);
}

model SetSubscriptionAttributesRequest {
  regionId?: string(name='RegionId', position='Host'),
  notifyStrategy?: string(name='NotifyStrategy', example='BACKOFF_RETRY', position='Query'),
  subscriptionName: string(name='SubscriptionName', example='MySubscription', position='Query'),
  topicName: string(name='TopicName', example='test', position='Query'),
}

model SetSubscriptionAttributesResponseBody = {
  code?: long(name='Code', example='200'),
  data?: {
    code?: long(name='Code', example='200'),
    message?: string(name='Message'),
    success?: boolean(name='Success', example='true'),
  }(name='Data'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='06273500-249F-5863-121D-74D51123****'),
  status?: string(name='Status', example='Success'),
  success?: boolean(name='Success', example='true'),
}

model SetSubscriptionAttributesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetSubscriptionAttributesResponseBody(name='body'),
}

async function setSubscriptionAttributes(request: SetSubscriptionAttributesRequest): SetSubscriptionAttributesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetSubscriptionAttributes', 'POST', '/', 'json', false, 'json', request);
}

model SetTopicAttributesRequest {
  regionId?: string(name='RegionId', position='Host'),
  enableLogging?: boolean(name='EnableLogging', example='True', position='Query'),
  maxMessageSize?: long(name='MaxMessageSize', example='65536', position='Query'),
  topicName: string(name='TopicName', example='test', position='Query'),
}

model SetTopicAttributesResponseBody = {
  code?: long(name='Code', example='200'),
  data?: {
    code?: long(name='Code', example='200'),
    message?: string(name='Message'),
    success?: boolean(name='Success', example='true'),
  }(name='Data'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='06273500-249F-5863-121D-74D51123****'),
  status?: string(name='Status', example='Success'),
  success?: boolean(name='Success', example='true'),
}

model SetTopicAttributesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetTopicAttributesResponseBody(name='body'),
}

async function setTopicAttributes(request: SetTopicAttributesRequest): SetTopicAttributesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetTopicAttributes', 'POST', '/', 'json', false, 'json', request);
}

model SubscribeRequest {
  regionId?: string(name='RegionId', position='Host'),
  endpoint: string(name='Endpoint', example='http://example.com', position='Query'),
  messageTag?: string(name='MessageTag', example='important', position='Query'),
  notifyContentFormat?: string(name='NotifyContentFormat', example='XML', position='Query'),
  notifyStrategy?: string(name='NotifyStrategy', example='BACKOFF_RETRY', position='Query'),
  pushType: string(name='PushType', example='queue', position='Query'),
  subscriptionName: string(name='SubscriptionName', example='testSubscription', position='Query'),
  topicName: string(name='TopicName', example='test', position='Query'),
}

model SubscribeResponseBody = {
  code?: long(name='Code', example='200'),
  data?: string(name='Data', example='{\\"Code\\": 200, \\"Success\\": True}'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='06273500-249F-5863-121D-74D51123****'),
  status?: string(name='Status', example='Success'),
  success?: boolean(name='Success', example='true'),
}

model SubscribeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubscribeResponseBody(name='body'),
}

async function subscribe(request: SubscribeRequest): SubscribeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Subscribe', 'POST', '/', 'json', false, 'json', request);
}

model UnsubscribeRequest {
  regionId?: string(name='RegionId', position='Host'),
  subscriptionName: string(name='SubscriptionName', example='MySubscription', position='Query'),
  topicName: string(name='TopicName', example='test', position='Query'),
}

model UnsubscribeResponseBody = {
  code?: long(name='Code', example='200'),
  data?: {
    code?: long(name='Code', example='200'),
    message?: string(name='Message'),
    success?: boolean(name='Success', example='true'),
  }(name='Data'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='06273500-249F-5863-121D-74D51123****'),
  status?: string(name='Status', example='Success'),
  success?: boolean(name='Success', example='true'),
}

model UnsubscribeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnsubscribeResponseBody(name='body'),
}

async function unsubscribe(request: UnsubscribeRequest): UnsubscribeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Unsubscribe', 'POST', '/', 'json', false, 'json', request);
}

