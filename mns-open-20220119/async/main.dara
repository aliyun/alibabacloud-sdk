/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Mns-open';
  @version = '2022-01-19';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model EventMatchRule {
  matchState?: boolean(name='MatchState', example='true'),
  name?: string(name='Name'),
  prefix?: string(name='Prefix'),
  suffix?: string(name='Suffix'),
}

model AuthorizeEndpointAclRequest {
  regionId?: string(name='RegionId', position='Host'),
  aclStrategy: string(name='AclStrategy', description='The ACL policy. Valid values:

*   **allow**: indicates that this operation is included in the Cidr whitelist. (Only the allow is supported.)

This parameter is required.', example='allow', position='Query'),
  cidrList: [ string ](name='CidrList', description='The list of CIDR block.

This parameter is required.', shrink='simple', position='Query'),
  endpointType: string(name='EndpointType', description='The type of the endpoint. Valid values:

*   **public**: indicates public endpoint. (Only the public endpoint is supported.)

This parameter is required.', example='public', position='Query'),
}

model AuthorizeEndpointAclResponseBody = {
  code?: long(name='Code', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The returned message.', example='operation success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='06273500-249F-5863-121D-74D51123****'),
  status?: string(name='Status', description='The response status.', example='Success'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model AuthorizeEndpointAclResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AuthorizeEndpointAclResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AuthorizeEndpointAcl  AuthorizeEndpointAclRequest
  * @return AuthorizeEndpointAclResponse
 */
async function authorizeEndpointAcl(request: AuthorizeEndpointAclRequest): AuthorizeEndpointAclResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AuthorizeEndpointAcl', 'POST', '/', 'json', false, 'json', request);
}

model CreateEventRuleRequest {
  regionId?: string(name='RegionId', position='Host'),
  clientToken?: string(name='ClientToken', position='Query'),
  deliveryMode?: string(name='DeliveryMode', position='Query'),
  endpoint?: {
    endpointType?: string(name='EndpointType'),
    endpointValue?: string(name='EndpointValue'),
  }(name='Endpoint', shrink='json', position='Query'),
  endpoints?: [ 
    {
      endpointType?: string(name='EndpointType', example='http'),
      endpointValue?: string(name='EndpointValue', example='test-xxx-queue'),
    }
  ](name='Endpoints', shrink='json', position='Query'),
  eventTypes: [ string ](name='EventTypes', description='This parameter is required.', shrink='json', position='Query'),
  matchRules: [[
    EventMatchRule
  ]  ](name='MatchRules', description='This parameter is required.', shrink='json', position='Query'),
  productName: string(name='ProductName', description='This parameter is required.', example='oss', position='Query'),
  ruleName: string(name='RuleName', description='This parameter is required.', example='rule-xsXDW', position='Query'),
}

model CreateEventRuleResponseBody = {
  code?: long(name='Code', example='200'),
  data?: string(name='Data', example='rule-xsXDW'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='06273500-249F-5863-121D-74D51123****'),
  status?: string(name='Status', example='Success'),
  success?: boolean(name='Success', example='true'),
}

model CreateEventRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateEventRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateEventRule  CreateEventRuleRequest
  * @return CreateEventRuleResponse
 */
async function createEventRule(request: CreateEventRuleRequest): CreateEventRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEventRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateQueueRequest {
  regionId?: string(name='RegionId', position='Host'),
  delaySeconds?: long(name='DelaySeconds', description='The period after which all messages sent to the queue are consumed. Valid values: 0 to 604800. Unit: seconds. Default value: 0', example='0', position='Query'),
  dlqPolicy?: {
    deadLetterTargetQueue?: string(name='DeadLetterTargetQueue', description='The queue to which dead-letter messages are delivered.', example='deadLetterQueue'),
    enabled?: boolean(name='Enabled', description='Specifies whether to enable the dead-letter message delivery.', example='true'),
    maxReceiveCount?: int32(name='MaxReceiveCount', description='The maximum number of retries.', example='3'),
  }(name='DlqPolicy', description='The dead-letter queue policy.', shrink='json', position='Query'),
  enableLogging?: boolean(name='EnableLogging', description='Specifies whether to enable the log management feature. Valid values:

*   true: enabled.
*   false: disabled.

Default value: false.', example='true', position='Query'),
  maximumMessageSize?: long(name='MaximumMessageSize', description='The maximum length of the message that is sent to the queue. Valid values: 1024 to 65536. Unit: bytes. Default value: 65536.', example='65536', position='Query'),
  messageRetentionPeriod?: long(name='MessageRetentionPeriod', description='The maximum duration for which a message is retained in the queue. After the specified retention period ends, the message is deleted regardless of whether the message is consumed. Valid values: 60 to 604800. Unit: seconds. Default value: 345600.', example='345600', minimum=60, maximum=604800, position='Query'),
  pollingWaitSeconds?: long(name='PollingWaitSeconds', description='The maximum duration for which long polling requests are held after the ReceiveMessage operation is called. Valid values: 0 to 30. Unit: seconds. Default value: 0', example='0', position='Query'),
  queueName: string(name='QueueName', description='The name of the queue.

This parameter is required.', example='06273500-249F-5863-121D-74D51123****', position='Query'),
  queueType?: string(name='QueueType', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag.', example='tag1'),
      value?: string(name='Value', description='The tag value.', example='test'),
    }
  ](name='Tag', description='The tags.', position='Query'),
  tenantRateLimitPolicy?: {
    enabled?: boolean(name='Enabled'),
    maxReceivesPerSecond?: int32(name='MaxReceivesPerSecond'),
  }(name='TenantRateLimitPolicy', shrink='json', position='Query'),
  visibilityTimeout?: long(name='VisibilityTimeout', description='The duration for which a message stays in the Inactive state after the message is received from the queue. Valid values: 1 to 43200. Unit: seconds. Default value: 30.', example='60', position='Query'),
}

model CreateQueueResponseBody = {
  code?: long(name='Code', description='The response code.', example='200'),
  data?: {
    code?: long(name='Code', description='The response code.', example='200'),
    message?: string(name='Message', description='The returned message.'),
    success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The returned message.', example='operation success'),
  requestId?: string(name='RequestId', description='The request ID.', example='06273500-249F-5863-121D-74D51123E62C'),
  status?: string(name='Status', description='The response status.', example='Success'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model CreateQueueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateQueueResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateQueue  CreateQueueRequest
  * @return CreateQueueResponse
 */
async function createQueue(request: CreateQueueRequest): CreateQueueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateQueue', 'POST', '/', 'json', false, 'json', request);
}

model CreateTopicRequest {
  regionId?: string(name='RegionId', position='Host'),
  enableLogging?: boolean(name='EnableLogging', description='Specifies whether to enable the log management feature. Valid values:

*   true: enabled.
*   false: disabled. Default value: false.', example='true', position='Body'),
  maxMessageSize?: long(name='MaxMessageSize', description='The maximum length of the message that is sent to the topic. Valid values: 1024 to 65536. Unit: bytes. Default value: 65536.', example='10240', position='Body'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='tag1'),
      value?: string(name='Value', description='The tag value.', example='joyce.wang'),
    }
  ](name='Tag', description='The tags.', position='Query'),
  topicName: string(name='TopicName', description='The name of the topic that you want to create.

This parameter is required.', example='test', position='Body'),
  topicType?: string(name='TopicType', position='Query'),
}

model CreateTopicResponseBody = {
  code?: long(name='Code', description='The response code.', example='200'),
  data?: {
    code?: long(name='Code', description='The response code.', example='200'),
    message?: string(name='Message', description='The returned message.'),
    success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The returned message.', example='operation success'),
  requestId?: string(name='RequestId', description='The request ID.', example='06273500-249F-5863-121D-74D51123E62C'),
  status?: string(name='Status', description='The response status.', example='Success'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model CreateTopicResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTopicResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateTopic  CreateTopicRequest
  * @return CreateTopicResponse
 */
async function createTopic(request: CreateTopicRequest): CreateTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTopic', 'POST', '/', 'json', true, 'form', request);
}

model DeleteEventRuleRequest {
  regionId?: string(name='RegionId', position='Host'),
  productName: string(name='ProductName', description='This parameter is required.', example='oss', position='Query'),
  ruleName: string(name='RuleName', description='This parameter is required.', example='rule-xsXDW', position='Query'),
}

model DeleteEventRuleResponseBody = {
  code?: long(name='Code', example='200'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='06273500-249F-5863-121D-74D51123****'),
  status?: string(name='Status', example='Success'),
  success?: boolean(name='Success', example='true'),
}

model DeleteEventRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEventRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteEventRule  DeleteEventRuleRequest
  * @return DeleteEventRuleResponse
 */
async function deleteEventRule(request: DeleteEventRuleRequest): DeleteEventRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEventRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteQueueRequest {
  regionId?: string(name='RegionId', position='Host'),
  queueName: string(name='QueueName', description='The name of the queue.

This parameter is required.', example='tf-testAccMNSQueue-525478433321945943', position='Query'),
}

model DeleteQueueResponseBody = {
  code?: long(name='Code', description='The response code.', example='200'),
  data?: {
    code?: long(name='Code', description='The response code.', example='200'),
    message?: string(name='Message', description='The returned message.'),
    success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The returned message.', example='operation success'),
  requestId?: string(name='RequestId', description='The request ID.', example='06273500-249F-5863-121D-74D51123****'),
  status?: string(name='Status', description='The response status.', example='Success'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DeleteQueueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteQueueResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteQueue  DeleteQueueRequest
  * @return DeleteQueueResponse
 */
async function deleteQueue(request: DeleteQueueRequest): DeleteQueueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteQueue', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTopicRequest {
  regionId?: string(name='RegionId', position='Host'),
  topicName: string(name='TopicName', description='The name of the topic that you want to delete.

This parameter is required.', example='tf-testAccMNSTopic-112965059402264645', position='Query'),
}

model DeleteTopicResponseBody = {
  code?: long(name='Code', description='The response code.', example='200'),
  data?: map[string]any(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The returned message.', example='operation success'),
  requestId?: string(name='RequestId', description='The request ID.', example='06273500-249F-5863-121D-74D51123****'),
  status?: string(name='Status', description='The response status.', example='Success'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DeleteTopicResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTopicResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteTopic  DeleteTopicRequest
  * @return DeleteTopicResponse
 */
async function deleteTopic(request: DeleteTopicRequest): DeleteTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTopic', 'POST', '/', 'json', false, 'json', request);
}

model DisableEndpointRequest {
  regionId?: string(name='RegionId', position='Host'),
  endpointType: string(name='EndpointType', description='The type of the endpoint. Value:

*   **public**: indicates an public endpoint. (Only the public endpoint is supported.)

This parameter is required.', example='public', position='Query'),
}

model DisableEndpointResponseBody = {
  code?: long(name='Code', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The returned message.', example='operation success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='06273500-249F-5863-121D-74D51123****'),
  status?: string(name='Status', description='The response status.', example='Success'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DisableEndpointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisableEndpointResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DisableEndpoint  DisableEndpointRequest
  * @return DisableEndpointResponse
 */
async function disableEndpoint(request: DisableEndpointRequest): DisableEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model EnableEndpointRequest {
  regionId?: string(name='RegionId', position='Host'),
  endpointType: string(name='EndpointType', description='The type of the endpoint. Valid value:

*   **public**: indicates public endpoint. (Only the public is supported.)

This parameter is required.', example='public', position='Query'),
}

model EnableEndpointResponseBody = {
  code?: long(name='Code', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The returned message.', example='operation success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='06273500-249F-5863-121D-74D51123****'),
  status?: string(name='Status', description='The response status.', example='Success'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model EnableEndpointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableEndpointResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnableEndpoint  EnableEndpointRequest
  * @return EnableEndpointResponse
 */
async function enableEndpoint(request: EnableEndpointRequest): EnableEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model GetEndpointAttributeRequest {
  regionId?: string(name='RegionId', position='Host'),
  endpointType: string(name='EndpointType', description='The type of the endpoint. Value:

*   **public**: indicates public endpoint. (Only the public is supported.)

This parameter is required.', example='public', position='Query'),
}

model GetEndpointAttributeResponseBody = {
  code?: long(name='Code', description='The HTTP status code.', example='200'),
  data?: {
    cidrList?: [ 
      {
        aclStrategy?: string(name='AclStrategy', description='The ACL policy. Valid values:

*   **allow**: indicates that the current endpoint allows access from the corresponding CIDR block. (Only allow is supported.)', example='allow'),
        cidr?: string(name='Cidr', description='The CIDR block.', example='172.18.0.0/24'),
        createTime?: long(name='CreateTime', description='The creation time.', example='1701951224000'),
      }
    ](name='CidrList', description='The list of CIDR block.'),
    endpointEnabled?: boolean(name='EndpointEnabled', description='Specifies whether the endpoint is enabled.', example='true'),
  }(name='Data', description='The response data.'),
  message?: string(name='Message', description='The returned message.', example='operation success'),
  requestId?: string(name='RequestId', description='The request ID.', example='06273500-249F-5863-121D-74D51123****'),
  status?: string(name='Status', description='The response status.', example='Success'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetEndpointAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEndpointAttributeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetEndpointAttribute  GetEndpointAttributeRequest
  * @return GetEndpointAttributeResponse
 */
async function getEndpointAttribute(request: GetEndpointAttributeRequest): GetEndpointAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEndpointAttribute', 'POST', '/', 'json', false, 'json', request);
}

model GetEventRuleRequest {
  regionId?: string(name='RegionId', position='Host'),
  productName: string(name='ProductName', description='This parameter is required.', example='oss', position='Query'),
  ruleName: string(name='RuleName', description='This parameter is required.', example='rule-xsXDW', position='Query'),
}

model GetEventRuleResponseBody = {
  code?: long(name='Code', example='200'),
  data?: {
    deliveryMode?: string(name='DeliveryMode', example='--'),
    endpoint?: {
      endpointType?: string(name='EndpointType', example='queue'),
      endpointValue?: string(name='EndpointValue', example='retry-queue'),
    }(name='Endpoint'),
    eventTypes?: [ string ](name='EventTypes'),
    matchRules?: [[
      EventMatchRule
    ]    ](name='MatchRules'),
    ruleName?: string(name='RuleName', example='event-recorder'),
    subscriptions?: [ 
      {
        endpointType?: string(name='EndpointType', example='queue'),
        endpointValue?: string(name='EndpointValue', example='retry-queue'),
      }
    ](name='Subscriptions'),
    topicName?: string(name='TopicName', example='demo-topic'),
  }(name='Data'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='06273500-249F-5863-121D-74D51123****'),
  status?: string(name='Status', example='Success'),
  success?: boolean(name='Success', example='True'),
}

model GetEventRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEventRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetEventRule  GetEventRuleRequest
  * @return GetEventRuleResponse
 */
async function getEventRule(request: GetEventRuleRequest): GetEventRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEventRule', 'POST', '/', 'json', false, 'json', request);
}

model GetQueueAttributesRequest {
  regionId?: string(name='RegionId', position='Host'),
  queueName: string(name='QueueName', description='The name of the queue.

This parameter is required.', example='demo-queue', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='tag1'),
      value?: string(name='Value', description='The tag value.', example='test'),
    }
  ](name='Tag', description='The tags.', position='Query'),
}

model GetQueueAttributesResponseBody = {
  code?: long(name='Code', description='The response code.', example='200'),
  data?: {
    activeMessages?: long(name='ActiveMessages', description='The total number of messages that are in the Active state in the queue. The value is an approximate value. Default value: 0. We recommend that you do not use the return value and that you call CloudMonitor API operations to query the metric value.', example='20'),
    createTime?: long(name='CreateTime', description='The time when the queue was created.', example='1250700999'),
    delayMessages?: long(name='DelayMessages', description='The total number of messages that are in the Delayed state in the queue. The value is an approximate value. Default value: 0. We recommend that you do not use the return value and that you call CloudMonitor API operations to query the metric value.', example='0'),
    delaySeconds?: long(name='DelaySeconds', description='The period after which all messages sent to the queue are consumed. Unit: seconds.', example='30'),
    dlqPolicy?: {
      deadLetterTargetQueue?: string(name='DeadLetterTargetQueue', description='The queue to which dead-letter messages are delivered.', example='deadLetterTargetQueue'),
      enabled?: boolean(name='Enabled', description='Specifies whether to enable the dead-letter message delivery.', example='true'),
      maxReceiveCount?: string(name='MaxReceiveCount', description='The maximum number of retries.', example='3'),
    }(name='DlqPolicy', description='The dead-letter queue policy.'),
    inactiveMessages?: long(name='InactiveMessages', description='The total number of messages that are in the Inactive state in the queue. The value is an approximate value. Default value: 0. We recommend that you do not use the return value and that you call CloudMonitor API operations to query the metric value.', example='0'),
    lastModifyTime?: long(name='LastModifyTime', description='The time when the queue was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1250700999'),
    loggingEnabled?: boolean(name='LoggingEnabled', description='Indicates whether the logging feature is enabled. Valid values:

*   True
*   False', example='True'),
    maximumMessageSize?: long(name='MaximumMessageSize', description='The maximum length of the message that is sent to the queue. Unit: bytes.', example='65536'),
    messageRetentionPeriod?: long(name='MessageRetentionPeriod', description='The maximum duration for which a message is retained in the queue. After the specified retention period ends, the message is deleted regardless of whether the message is received. Unit: seconds.', example='65536'),
    pollingWaitSeconds?: long(name='PollingWaitSeconds', description='The maximum duration for which long polling requests are held after the ReceiveMessage operation is called. Unit: seconds.', example='0'),
    queueName?: string(name='QueueName', description='The name of the queue.', example='demo-queue'),
    queueType?: string(name='QueueType'),
    tags?: [ 
      {
        tagKey?: string(name='TagKey', description='The tag key.', example='tag1'),
        tagValue?: string(name='TagValue', description='The tag value.', example='test'),
      }
    ](name='Tags', description='The tag.'),
    tenantRateLimitPolicy?: {
      enabled?: boolean(name='Enabled'),
      maxReceivesPerSecond?: int32(name='MaxReceivesPerSecond'),
    }(name='TenantRateLimitPolicy'),
    visibilityTimeout?: long(name='VisibilityTimeout', description='The duration for which a message stays in the Inactive state after the message is received from the queue. Valid values: 1 to 43200. Unit: seconds. Default value: 30.', example='60'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The returned message.', example='operation success'),
  requestId?: string(name='RequestId', description='The request ID.', example='06273500-249F-5863-121D-74D51123****'),
  status?: string(name='Status', description='The response status.', example='Success'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetQueueAttributesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetQueueAttributesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetQueueAttributes  GetQueueAttributesRequest
  * @return GetQueueAttributesResponse
 */
async function getQueueAttributes(request: GetQueueAttributesRequest): GetQueueAttributesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetQueueAttributes', 'POST', '/', 'json', false, 'json', request);
}

model GetSubscriptionAttributesRequest {
  regionId?: string(name='RegionId', position='Host'),
  subscriptionName: string(name='SubscriptionName', description='The name of the subscription.

This parameter is required.', example='MySubscription', position='Query'),
  topicName: string(name='TopicName', description='The name of the topic.

This parameter is required.', example='MyTopic', position='Query'),
}

model GetSubscriptionAttributesResponseBody = {
  code?: long(name='Code', description='The response code.', example='200'),
  data?: {
    createTime?: long(name='CreateTime', description='The time when the subscription was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1449554806'),
    dlqPolicy?: {
      deadLetterTargetQueue?: string(name='DeadLetterTargetQueue', description='The queue to which dead-letter messages are delivered.', example='deadLetterTargetQueue'),
      enabled?: boolean(name='Enabled', description='Specifies whether to enable the dead-letter message delivery.', example='true'),
    }(name='DlqPolicy', description='The dead-letter queue policy.'),
    endpoint?: string(name='Endpoint', description='The endpoint to which the messages are pushed.', example='http://example.com'),
    filterTag?: string(name='FilterTag', description='The tag that is used to filter messages. Only the messages that are attached with the specified tag can be pushed.', example='important'),
    lastModifyTime?: long(name='LastModifyTime', description='The time when the subscription was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1449554962'),
    notifyContentFormat?: string(name='NotifyContentFormat', description='The content format of the messages that are pushed to the endpoint. Valid values:

*   XML
*   JSON
*   SIMPLIFIED', example='XML'),
    notifyStrategy?: string(name='NotifyStrategy', description='The retry policy that is applied if an error occurs when Message Service (MNS) pushes messages to the endpoint. Valid values:

*   BACKOFF_RETRY
*   EXPONENTIAL_DECAY_RETRY', example='BACKOFF_RETRY'),
    subscriptionName?: string(name='SubscriptionName', description='The name of the subscription.', example='MySubscription'),
    tenantRateLimitPolicy?: {
      enabled?: boolean(name='Enabled'),
      maxReceivesPerSecond?: int32(name='MaxReceivesPerSecond'),
    }(name='TenantRateLimitPolicy'),
    topicName?: string(name='TopicName', description='The name of the topic.', example='MyTopic'),
    topicOwner?: string(name='TopicOwner', description='The Alibaba Cloud account ID of the topic owner.', example='123456789098****'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The returned message.', example='operation success'),
  requestId?: string(name='RequestId', description='The request ID.', example='06273500-249F-5863-121D-74D51123****'),
  status?: string(name='Status', description='The response status.', example='Success'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetSubscriptionAttributesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSubscriptionAttributesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSubscriptionAttributes  GetSubscriptionAttributesRequest
  * @return GetSubscriptionAttributesResponse
 */
async function getSubscriptionAttributes(request: GetSubscriptionAttributesRequest): GetSubscriptionAttributesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSubscriptionAttributes', 'POST', '/', 'json', false, 'json', request);
}

model GetTopicAttributesRequest {
  regionId?: string(name='RegionId', position='Host'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='tag1'),
      value?: string(name='Value', description='The tag value.', example='test'),
    }
  ](name='Tag', description='The tag.', position='Query'),
  topicName: string(name='TopicName', description='The name of the topic.

This parameter is required.', example='demo-topic', position='Query'),
}

model GetTopicAttributesResponseBody = {
  code?: long(name='Code', description='The response code.', example='200'),
  data?: {
    createTime?: long(name='CreateTime', description='The time when the topic was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1449554277'),
    lastModifyTime?: long(name='LastModifyTime', description='The time when the topic was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1449554460'),
    loggingEnabled?: boolean(name='LoggingEnabled', description='Indicates whether the logging feature is enabled. Valid values:

*   True
*   False', example='True'),
    maxMessageSize?: long(name='MaxMessageSize', description='The maximum length of the message that is sent to the topic. Unit: bytes.', example='65536'),
    messageCount?: long(name='MessageCount', description='The number of messages in the topic.', example='0'),
    messageRetentionPeriod?: long(name='MessageRetentionPeriod', description='The maximum duration for which a message is retained in the topic. After the specified retention period ends, the message is deleted regardless of whether the message is received. Unit: seconds.', example='86400'),
    tags?: [ 
      {
        tagKey?: string(name='TagKey', description='The tag key.', example='tag1'),
        tagValue?: string(name='TagValue', description='The tag value.', example='test'),
      }
    ](name='Tags', description='The tags added to the resources.'),
    topicName?: string(name='TopicName', description='The name of the topic.', example='demo-topic'),
    topicType?: string(name='TopicType'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The returned message.', example='operation success'),
  requestId?: string(name='RequestId', description='The request ID.', example='06273500-249F-5863-121D-74D51123****'),
  status?: string(name='Status', description='The response status.', example='Success'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetTopicAttributesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTopicAttributesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTopicAttributes  GetTopicAttributesRequest
  * @return GetTopicAttributesResponse
 */
async function getTopicAttributes(request: GetTopicAttributesRequest): GetTopicAttributesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTopicAttributes', 'POST', '/', 'json', false, 'json', request);
}

model ListEventRulesRequest {
  regionId?: string(name='RegionId', position='Host'),
  maxResults?: int32(name='MaxResults', example='50', position='Query'),
  nextToken?: string(name='NextToken', example='cd7NlPlX4kgKCdsCWMiMR/+HnVzPLQ4/XLvjR64jZ7F9AQ+Mr3T59J6IVkuXeV3w', position='Query'),
  pageNum?: long(name='PageNum', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='20', position='Query'),
  productName?: string(name='ProductName', example='oss', position='Query'),
  resourceName?: string(name='ResourceName', example='test-bucket', position='Query'),
  ruleName?: string(name='RuleName', example='rule-xsXDW', position='Query'),
  subscription?: {
    endpointType?: string(name='EndpointType', example='topic'),
    endpointValue?: string(name='EndpointValue', example='test-topic'),
  }(name='Subscription', shrink='json', position='Query'),
  topicName?: string(name='TopicName', example='test-topic', position='Query'),
}

model ListEventRulesResponseBody = {
  code?: long(name='Code', example='200'),
  data?: {
    maxResults?: int32(name='MaxResults', example='1'),
    nextToken?: string(name='NextToken', example='a88f58d504b8b4c4e0b5e8707e68181f'),
    pageData?: [ 
      {
        deliveryMode?: string(name='DeliveryMode', example='--'),
        endpoint?: {
          endpointType?: string(name='EndpointType', example='topic'),
          endpointValue?: string(name='EndpointValue', example='test-topic'),
        }(name='Endpoint'),
        eventTypes?: [ string ](name='EventTypes'),
        matchRules?: [[
          EventMatchRule
        ]        ](name='MatchRules'),
        ruleName?: string(name='RuleName', example='rule-xsXDW'),
        subscriptions?: [ 
          {
            endpointType?: string(name='EndpointType', example='queue'),
            endpointValue?: string(name='EndpointValue', example='wyx-vp-complete-queue'),
          }
        ](name='Subscriptions'),
        topicName?: string(name='TopicName', example='demo-topic'),
      }
    ](name='PageData'),
    pageNum?: long(name='PageNum', example='1'),
    pageSize?: long(name='PageSize', example='50'),
    pages?: long(name='Pages', example='3'),
    size?: long(name='Size', example='20'),
    total?: long(name='Total', example='130'),
  }(name='Data'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='06273500-249F-5863-121D-74D51123E62C'),
  status?: string(name='Status', example='Success'),
  success?: boolean(name='Success', example='true'),
}

model ListEventRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEventRulesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListEventRules  ListEventRulesRequest
  * @return ListEventRulesResponse
 */
async function listEventRules(request: ListEventRulesRequest): ListEventRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEventRules', 'POST', '/', 'json', false, 'json', request);
}

model ListQueueRequest {
  regionId?: string(name='RegionId', position='Host'),
  pageNum?: long(name='PageNum', description='The page number. Valid values: 1 to 100000000. If you set this parameter to a value smaller than 1, the value of this parameter is 1 by default. If you set this parameter to a value greater than 100000000, the value of this parameter is 100000000 by default.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries per page. Value values: 10 to 50. If you set this parameter to a value smaller than 10, the value of this parameter is 10 by default. If you set this parameter to a value greater than 50, the value of this parameter is 50 by default.', example='20', position='Query'),
  queueName?: string(name='QueueName', description='The name of the queue.', example='demo-queue', position='Query'),
  queueType?: string(name='QueueType', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='tag1'),
      value?: string(name='Value', description='The tag value.', example='test'),
    }
  ](name='Tag', description='The tags.', position='Query'),
}

model ListQueueResponseBody = {
  code?: long(name='Code', description='The response code.', example='200'),
  data?: {
    pageData?: [ 
      {
        activeMessages?: long(name='ActiveMessages', description='The total number of messages that are in the Active state in the queue. The value is an approximate number. Default value: 0. We recommend that you do not use the return value and that you call CloudMonitor API operations to query the metric value.', example='20'),
        createTime?: long(name='CreateTime', description='The time when the queue was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1250700999'),
        delayMessages?: long(name='DelayMessages', description='The total number of the messages that are in the Delayed state in the queue. The value is an approximate number. Default value: 0. We recommend that you do not use the return value and that you call CloudMonitor API operations to query the metric value.', example='0'),
        delaySeconds?: long(name='DelaySeconds', description='The period after which all messages sent to the queue are consumed. Unit: seconds.', example='30'),
        dlqPolicy?: {
          deadLetterTargetQueue?: string(name='DeadLetterTargetQueue', description='The queue to which dead-letter messages are delivered.', example='deadLetterTargetQueue'),
          enabled?: boolean(name='Enabled', description='Specifies whether to enable the dead-letter message delivery.', example='true'),
          maxReceiveCount?: string(name='MaxReceiveCount', description='The maximum number of retries.', example='3'),
        }(name='DlqPolicy', description='The dead-letter queue policy.'),
        inactiveMessages?: long(name='InactiveMessages', description='The total number of the messages that are in the Inactive state in the queue. The value is an approximate number. Default value: 0. We recommend that you do not use the return value and that you call CloudMonitor API operations to query the metric value.', example='0'),
        lastModifyTime?: long(name='LastModifyTime', description='The time when the queue was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1250700999'),
        loggingEnabled?: boolean(name='LoggingEnabled', description='Indicates whether the logging feature is enabled. Valid values:

*   True
*   False', example='True'),
        maximumMessageSize?: long(name='MaximumMessageSize', description='The maximum length of the message that is sent to the queue. Unit: bytes.', example='65536'),
        messageRetentionPeriod?: long(name='MessageRetentionPeriod', description='The maximum duration for which a message is retained in the queue. After the specified retention period ends, the message is deleted regardless of whether the message is received. Unit: seconds.', example='65536'),
        pollingWaitSeconds?: long(name='PollingWaitSeconds', description='The maximum duration for which long polling requests are held after the ReceiveMessage operation is called. Unit: seconds.', example='0'),
        queueName?: string(name='QueueName', description='The name of the queue.', example='demo-queue'),
        queueType?: string(name='QueueType'),
        tags?: [ 
          {
            tagKey?: string(name='TagKey', description='The tag key.', example='tag1'),
            tagValue?: string(name='TagValue', description='The tag value.', example='test'),
          }
        ](name='Tags', description='The tags added to the resources.'),
        visibilityTimeout?: long(name='VisibilityTimeout', description='The duration for which a message stays in the Inactive state after the message is received from the queue. Valid values: 1 to 43200. Unit: seconds. Default value: 30.', example='60'),
      }
    ](name='PageData', description='The data returned on the current page.'),
    pageNum?: long(name='PageNum', description='The page number.', example='1'),
    pageSize?: long(name='PageSize', description='The number of entries per page.', example='50'),
    pages?: long(name='Pages', description='The total number of pages returned.', example='3'),
    size?: long(name='Size', description='The number of entries on the current page.', example='20'),
    total?: long(name='Total', description='The total number of entries.', example='130'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The returned message.', example='operation success'),
  requestId?: string(name='RequestId', description='The request ID.', example='06273500-249F-5863-121D-74D51123****'),
  status?: string(name='Status', description='The response status.', example='Success'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ListQueueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListQueueResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListQueue  ListQueueRequest
  * @return ListQueueResponse
 */
async function listQueue(request: ListQueueRequest): ListQueueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListQueue', 'POST', '/', 'json', false, 'json', request);
}

model ListSubscriptionByTopicRequest {
  regionId?: string(name='RegionId', position='Host'),
  endpointType?: string(name='EndpointType', position='Query'),
  endpointValue?: string(name='EndpointValue', position='Query'),
  pageNum?: long(name='PageNum', description='The page number. Valid values: 1 to 100000000. If you set this parameter to a value smaller than 1, the value of this parameter is 1 by default. If you set this parameter to a value greater than 100000000, the value of this parameter is 100000000 by default.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries per page. Value values: 10 to 50. If you set this parameter to a value smaller than 10, the value of this parameter is 10 by default. If you set this parameter to a value greater than 50, the value of this parameter is 50 by default.', example='20', position='Query'),
  subscriptionName?: string(name='SubscriptionName', description='The name of the subscription.', example='demo-subscription', position='Query'),
  topicName?: string(name='TopicName', description='The topic name.', example='test', position='Query'),
}

model ListSubscriptionByTopicResponseBody = {
  code?: long(name='Code', description='The response code.', example='200'),
  data?: {
    pageData?: [ 
      {
        createTime?: long(name='CreateTime', description='The time when the subscription was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1449554806'),
        dlqPolicy?: {
          deadLetterTargetQueue?: string(name='DeadLetterTargetQueue', description='The queue to which dead-letter messages are delivered.', example='dead-letter-queue'),
          enabled?: boolean(name='Enabled', description='Specifies whether to enable the dead-letter message delivery.', example='true'),
        }(name='DlqPolicy', description='The dead-letter queue policy.'),
        endpoint?: string(name='Endpoint', description='The endpoint to which the messages are pushed.', example='http://example.com'),
        filterTag?: string(name='FilterTag', description='The tag that is used to filter messages. Only the messages that are attached with the specified tag can be pushed.', example='important'),
        lastModifyTime?: long(name='LastModifyTime', description='The time when the subscription was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1449554806'),
        notifyContentFormat?: string(name='NotifyContentFormat', description='The content format of the messages that are pushed to the endpoint. Valid values:

*   XML
*   JSON
*   SIMPLIFIED', example='XML'),
        notifyStrategy?: string(name='NotifyStrategy', description='The retry policy that is applied if an error occurs when Message Service (MNS) pushes messages to the endpoint. Valid values:

*   BACKOFF_RETRY
*   EXPONENTIAL_DECAY_RETRY', example='BACKOFF_RETRY'),
        subscriptionName?: string(name='SubscriptionName', description='The name of the subscription.', example='MySubscription'),
        topicName?: string(name='TopicName', description='The name of the topic.', example='MyTopic'),
        topicOwner?: string(name='TopicOwner', description='The Alibaba Cloud account ID of the topic owner.', example='123456789098****'),
      }
    ](name='PageData', description='The data returned on the current page.'),
    pageNum?: long(name='PageNum', description='The page number.', example='1'),
    pageSize?: long(name='PageSize', description='The number of entries per page.', example='50'),
    pages?: long(name='Pages', description='The total number of pages returned.', example='3'),
    size?: long(name='Size', description='The number of entries on the current page.', example='20'),
    total?: long(name='Total', description='The total number of entries returned.', example='130'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The returned message.', example='operation success'),
  requestId?: string(name='RequestId', description='The request ID.', example='06273500-249F-5863-121D-74D51123****'),
  status?: string(name='Status', description='The response status.', example='Success'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ListSubscriptionByTopicResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSubscriptionByTopicResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSubscriptionByTopic  ListSubscriptionByTopicRequest
  * @return ListSubscriptionByTopicResponse
 */
async function listSubscriptionByTopic(request: ListSubscriptionByTopicRequest): ListSubscriptionByTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSubscriptionByTopic', 'POST', '/', 'json', false, 'json', request);
}

model ListTopicRequest {
  regionId?: string(name='RegionId', position='Host'),
  pageNum?: long(name='PageNum', description='The page number. Valid values: 1 to 100000000. If you set this parameter to a value smaller than 1, the value of this parameter is 1 by default. If you set this parameter to a value greater than 100000000, the value of this parameter is 100000000 by default.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries per page. Value values: 10 to 50. If you set this parameter to a value smaller than 10, the value of this parameter is 10 by default. If you set this parameter to a value greater than 50, the value of this parameter is 50 by default.', example='20', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='tag1'),
      value?: string(name='Value', description='The tag value.', example='test'),
    }
  ](name='Tag', description='The tags.', position='Query'),
  topicName?: string(name='TopicName', description='The name of the topic.', example='test', position='Query'),
  topicType?: string(name='TopicType', position='Query'),
}

model ListTopicResponseBody = {
  code?: long(name='Code', description='The response code.', example='200'),
  data?: {
    pageData?: [ 
      {
        createTime?: long(name='CreateTime', description='The time when the subscription was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1449554962'),
        lastModifyTime?: long(name='LastModifyTime', description='The time when the subscription was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1449554962'),
        loggingEnabled?: boolean(name='LoggingEnabled', description='Indicates whether the logging feature is enabled.

*   True
*   False', example='True'),
        maxMessageSize?: long(name='MaxMessageSize', description='The maximum length of the message that is sent to the topic. Unit: bytes.', example='65536'),
        messageCount?: long(name='MessageCount', description='The number of messages in the topic.', example='0'),
        messageRetentionPeriod?: long(name='MessageRetentionPeriod', description='The maximum duration for which a message is retained in the topic. After the specified retention period ends, the message is deleted regardless of whether the message is received. Unit: seconds.', example='86400'),
        tags?: [ 
          {
            tagKey?: string(name='TagKey', description='The tag key.', example='tag1'),
            tagValue?: string(name='TagValue', description='The tag value.', example='test'),
          }
        ](name='Tags', description='The tags added to the resources.'),
        topicInnerUrl?: string(name='TopicInnerUrl', description='The internal URL of the message topic. The internal URL can be accessed over an internal network.', example='http:// 111111111****.mns.us-west-1-internal.aliyuncs.com/topics/testTopic'),
        topicName?: string(name='TopicName', description='The name of the topic.', example='demo-topic'),
        topicType?: string(name='TopicType'),
        topicUrl?: string(name='TopicUrl', description='The URL of the message topic.', example='http:// 111111111****.mns.us-west-1.aliyuncs.com/topics/testTopic'),
      }
    ](name='PageData', description='The data returned on the current page.'),
    pageNum?: long(name='PageNum', description='The page number.', example='1'),
    pageSize?: long(name='PageSize', description='The number of entries per page.', example='50'),
    total?: long(name='Total', description='The total number of entries returned.', example='130'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The returned message.', example='operation success'),
  requestId?: string(name='RequestId', description='The request ID.', example='06273500-249F-5863-121D-74D51123****'),
  status?: string(name='Status', description='The response status.', example='Success'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ListTopicResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTopicResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTopic  ListTopicRequest
  * @return ListTopicResponse
 */
async function listTopic(request: ListTopicRequest): ListTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTopic', 'POST', '/', 'json', false, 'json', request);
}

model RevokeEndpointAclRequest {
  regionId?: string(name='RegionId', position='Host'),
  aclStrategy: string(name='AclStrategy', description='The ACL policy. Value:

*   **allow**: indicates that this operation is included in the Cidr whitelist. (Only the allow is supported.)

This parameter is required.', example='allow', position='Query'),
  cidrList: [ string ](name='CidrList', description='The list of CIDR block.

This parameter is required.', shrink='simple', position='Query'),
  endpointType: string(name='EndpointType', description='The type of the endpoint. Valid values:

*   **public**: indicates public endpoint. (Only the public is supported.)

This parameter is required.', example='public', position='Query'),
}

model RevokeEndpointAclResponseBody = {
  code?: long(name='Code', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The returned message.', example='operation success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='06273500-249F-5863-121D-74D51123****'),
  status?: string(name='Status', description='The response status.', example='Success'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model RevokeEndpointAclResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RevokeEndpointAclResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RevokeEndpointAcl  RevokeEndpointAclRequest
  * @return RevokeEndpointAclResponse
 */
async function revokeEndpointAcl(request: RevokeEndpointAclRequest): RevokeEndpointAclResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RevokeEndpointAcl', 'POST', '/', 'json', false, 'json', request);
}

model SetQueueAttributesRequest {
  regionId?: string(name='RegionId', position='Host'),
  delaySeconds?: long(name='DelaySeconds', description='The period after which all messages sent to the queue are consumed. Valid values: 0 to 604800. Unit: seconds. Default value: 0', example='0', position='Query'),
  dlqPolicy?: {
    deadLetterTargetQueue?: string(name='DeadLetterTargetQueue', description='The queue to which dead-letter messages are delivered.', example='deadLetterTargetQueue'),
    enabled?: boolean(name='Enabled', description='Specifies whether to enable the dead-letter message delivery.', example='true'),
    maxReceiveCount?: int32(name='MaxReceiveCount', description='The maximum number of retries.', example='3'),
  }(name='DlqPolicy', description='The dead-letter queue policy.', shrink='json', position='Query'),
  enableLogging?: boolean(name='EnableLogging', description='Specifies whether to enable the log management feature. Valid values:

*   true: enabled.
*   false: disabled. Default value: false.', example='True', position='Query'),
  maximumMessageSize?: long(name='MaximumMessageSize', description='The maximum length of the message that is sent to the queue. Valid values: 1024 to 65536. Unit: bytes. Default value: 65536.', example='1024', position='Query'),
  messageRetentionPeriod?: long(name='MessageRetentionPeriod', description='The maximum duration for which a message is retained in the queue. After the specified retention period ends, the message is deleted regardless of whether the message is received. Valid values: 60 to 604800. Unit: seconds. Default value: 345600.', example='120', position='Query'),
  pollingWaitSeconds?: long(name='PollingWaitSeconds', description='The maximum duration for which long polling requests are held after the ReceiveMessage operation is called. Valid values: 0 to 30. Unit: seconds. Default value: 0', example='0', position='Query'),
  queueName: string(name='QueueName', description='The name of the queue.

This parameter is required.', example='testqueue', position='Query'),
  tenantRateLimitPolicy?: {
    enabled?: boolean(name='Enabled'),
    maxReceivesPerSecond?: int32(name='MaxReceivesPerSecond'),
  }(name='TenantRateLimitPolicy', shrink='json', position='Query'),
  visibilityTimeout?: long(name='VisibilityTimeout', description='The duration for which a message stays in the Inactive state after the message is received from the queue. Valid values: 1 to 43200. Unit: seconds. Default value: 30.', example='60', position='Query'),
}

model SetQueueAttributesResponseBody = {
  code?: long(name='Code', description='The response code.', example='200'),
  data?: {
    code?: long(name='Code', description='The response code.', example='200'),
    message?: string(name='Message', description='The returned message.'),
    success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The returned message.', example='operation success'),
  requestId?: string(name='RequestId', description='The request ID.', example='06273500-249F-5863-121D-74D51123****'),
  status?: string(name='Status', description='The response status.', example='Success'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model SetQueueAttributesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetQueueAttributesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetQueueAttributes  SetQueueAttributesRequest
  * @return SetQueueAttributesResponse
 */
async function setQueueAttributes(request: SetQueueAttributesRequest): SetQueueAttributesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetQueueAttributes', 'POST', '/', 'json', false, 'json', request);
}

model SetSubscriptionAttributesRequest {
  regionId?: string(name='RegionId', position='Host'),
  dlqPolicy?: {
    deadLetterTargetQueue?: string(name='DeadLetterTargetQueue', description='The queue to which dead-letter messages are delivered.', example='deadLetterTargetQueue'),
    enabled?: boolean(name='Enabled', description='Specifies whether to enable the dead-letter message delivery.', example='true'),
  }(name='DlqPolicy', description='The dead-letter queue policy.', shrink='json', position='Query'),
  notifyStrategy?: string(name='NotifyStrategy', description='The retry policy that is applied if an error occurs when Message Service (MNS) pushes messages to the endpoint. Valid values:

*   BACKOFF_RETRY
*   EXPONENTIAL_DECAY_RETRY', example='BACKOFF_RETRY', position='Query'),
  stsRoleArn?: string(name='StsRoleArn', example='acs:ram::1234567890:role/roleName', position='Query'),
  subscriptionName: string(name='SubscriptionName', description='The name of the subscription.

This parameter is required.', example='MySubscription', position='Query'),
  tenantRateLimitPolicy?: {
    enabled?: boolean(name='Enabled'),
    maxReceivesPerSecond?: int32(name='MaxReceivesPerSecond'),
  }(name='TenantRateLimitPolicy', shrink='json', position='Query'),
  topicName: string(name='TopicName', description='The name of the topic.

This parameter is required.', example='test', position='Query'),
}

model SetSubscriptionAttributesResponseBody = {
  code?: long(name='Code', description='The response code.', example='200'),
  data?: {
    code?: long(name='Code', description='The response code.', example='200'),
    message?: string(name='Message', description='The returned message.'),
    success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The returned message.', example='operation success'),
  requestId?: string(name='RequestId', description='The request ID.', example='06273500-249F-5863-121D-74D51123****'),
  status?: string(name='Status', description='The response status.', example='Success'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model SetSubscriptionAttributesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetSubscriptionAttributesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetSubscriptionAttributes  SetSubscriptionAttributesRequest
  * @return SetSubscriptionAttributesResponse
 */
async function setSubscriptionAttributes(request: SetSubscriptionAttributesRequest): SetSubscriptionAttributesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetSubscriptionAttributes', 'POST', '/', 'json', false, 'json', request);
}

model SetTopicAttributesRequest {
  regionId?: string(name='RegionId', position='Host'),
  enableLogging?: boolean(name='EnableLogging', description='Specifies whether to enable the log management feature. Valid values:

*   true: enabled.
*   false: disabled. Default value: false.', example='True', position='Query'),
  maxMessageSize?: long(name='MaxMessageSize', description='The maximum length of the message that is sent to the topic. Valid values: 1024 to 65536. Unit: bytes. Default value: 65536.', example='65536', position='Query'),
  topicName: string(name='TopicName', description='The name of the topic.

This parameter is required.', example='test', position='Query'),
}

model SetTopicAttributesResponseBody = {
  code?: long(name='Code', description='The response code.', example='200'),
  data?: {
    code?: long(name='Code', description='The response code.', example='200'),
    message?: string(name='Message', description='The returned message.'),
    success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The returned message.', example='operation success'),
  requestId?: string(name='RequestId', description='The request ID.', example='06273500-249F-5863-121D-74D51123****'),
  status?: string(name='Status', description='The response status.', example='Success'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model SetTopicAttributesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetTopicAttributesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetTopicAttributes  SetTopicAttributesRequest
  * @return SetTopicAttributesResponse
 */
async function setTopicAttributes(request: SetTopicAttributesRequest): SetTopicAttributesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetTopicAttributes', 'POST', '/', 'json', false, 'json', request);
}

model SubscribeRequest {
  regionId?: string(name='RegionId', position='Host'),
  dlqPolicy?: {
    deadLetterTargetQueue?: string(name='DeadLetterTargetQueue', description='The queue to which dead-letter messages are delivered.', example='deadLetterTargetQueue'),
    enabled?: boolean(name='Enabled', description='Specifies whether to enable the dead-letter message delivery.', example='true'),
  }(name='DlqPolicy', description='The dead-letter queue policy.', shrink='json', position='Query'),
  dmAttributes?: {
    accountName?: string(name='AccountName'),
    subject?: string(name='Subject'),
  }(name='DmAttributes', shrink='json', position='Query'),
  dysmsAttributes?: {
    signName?: string(name='SignName'),
    templateCode?: string(name='TemplateCode'),
  }(name='DysmsAttributes', shrink='json', position='Query'),
  endpoint: string(name='Endpoint', description='The receiver endpoint. The format of the endpoint varies based on the terminal type.

*   If you set PushType to http, set Endpoint to an `HTTP URL that starts with http:// or https://`.
*   If you set PushType to queue, set Endpoint to a `queue name`.
*   If you set PushType to mpush, set Endpoint to an `AppKey`.
*   If you set PushType to alisms, set Endpoint to a `mobile number`.
*   If you set PushType to email, set Endpoint to an `email address`.

This parameter is required.', example='http://example.com', position='Query'),
  kafkaAttributes?: {
    businessMode?: string(name='BusinessMode'),
  }(name='KafkaAttributes', shrink='json', position='Query'),
  messageTag?: string(name='MessageTag', description='The tag that is used to filter messages. Only messages that have the same tag can be pushed. Set the value to a string of no more than 16 characters.

By default, no tag is specified to filter messages.', example='important', position='Query'),
  notifyContentFormat?: string(name='NotifyContentFormat', description='The content format of the messages that are pushed to the endpoint. Valid values:

*   XML
*   JSON
*   SIMPLIFIED', example='XML', position='Query'),
  notifyStrategy?: string(name='NotifyStrategy', description='The retry policy that is applied if an error occurs when Message Service (MNS) pushes messages to the endpoint. Valid values:

*   BACKOFF_RETRY
*   EXPONENTIAL_DECAY_RETRY', example='BACKOFF_RETRY', position='Query'),
  pushType: string(name='PushType', description='The terminal type. Valid values:

*   http: HTTP services
*   queue: queues
*   mpush: mobile devices
*   alisms: Alibaba Cloud Short Message Service (SMS)
*   email: emails

This parameter is required.', example='queue', position='Query'),
  stsRoleArn?: string(name='StsRoleArn', position='Query'),
  subscriptionName: string(name='SubscriptionName', description='The name of the subscription.

This parameter is required.', example='testSubscription', position='Query'),
  tenantRateLimitPolicy?: {
    enabled?: boolean(name='Enabled'),
    maxReceivesPerSecond?: int32(name='MaxReceivesPerSecond'),
  }(name='TenantRateLimitPolicy', shrink='json', position='Query'),
  topicName: string(name='TopicName', description='The name of the topic.

This parameter is required.', example='test', position='Query'),
}

model SubscribeResponseBody = {
  code?: long(name='Code', description='The response code.', example='200'),
  data?: string(name='Data', description='The returned data.', example='{\\"Code\\": 200, \\"Success\\": True}'),
  message?: string(name='Message', description='The returned message.', example='operation success'),
  requestId?: string(name='RequestId', description='The request ID.', example='06273500-249F-5863-121D-74D51123****'),
  status?: string(name='Status', description='The response status.', example='Success'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model SubscribeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubscribeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of Subscribe  SubscribeRequest
  * @return SubscribeResponse
 */
async function subscribe(request: SubscribeRequest): SubscribeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Subscribe', 'POST', '/', 'json', false, 'json', request);
}

model UnsubscribeRequest {
  regionId?: string(name='RegionId', position='Host'),
  subscriptionName: string(name='SubscriptionName', description='The name of the subscription.

This parameter is required.', example='MySubscription', position='Query'),
  topicName: string(name='TopicName', description='The name of the topic.

This parameter is required.', example='test', position='Query'),
}

model UnsubscribeResponseBody = {
  code?: long(name='Code', description='The response code.', example='200'),
  data?: {
    code?: long(name='Code', description='The response code.', example='200'),
    message?: string(name='Message', description='The returned message.'),
    success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The returned message.', example='operation success'),
  requestId?: string(name='RequestId', description='The request ID.', example='06273500-249F-5863-121D-74D51123****'),
  status?: string(name='Status', description='The response status.', example='Success'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model UnsubscribeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnsubscribeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of Unsubscribe  UnsubscribeRequest
  * @return UnsubscribeResponse
 */
async function unsubscribe(request: UnsubscribeRequest): UnsubscribeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Unsubscribe', 'POST', '/', 'json', false, 'json', request);
}

