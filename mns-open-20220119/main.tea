/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('mns-open', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateQueueRequest {
  delaySeconds?: long(name='DelaySeconds', example='0'),
  enableLogging?: boolean(name='EnableLogging', example='true'),
  maximumMessageSize?: long(name='MaximumMessageSize', example='65536'),
  messageRetentionPeriod?: long(name='MessageRetentionPeriod', example='345600'),
  pollingWaitSeconds?: long(name='PollingWaitSeconds', example='0'),
  queueName?: string(name='QueueName', example='06273500-249F-5863-121D-74D51123****'),
  visibilityTimeout?: long(name='VisibilityTimeout', example='60'),
}

model CreateQueueResponseBody = {
  code?: long(name='Code', example='200'),
  data?: {
    code?: long(name='Code', example='200'),
    message?: string(name='Message'),
    success?: boolean(name='Success', example='true'),
  }(name='Data'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='06273500-249F-5863-121D-74D51123E62C'),
  status?: string(name='Status', example='Success'),
  success?: boolean(name='Success', example='true'),
}

model CreateQueueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateQueueResponseBody(name='body'),
}

async function createQueueWithOptions(request: CreateQueueRequest, runtime: Util.RuntimeOptions): CreateQueueResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.delaySeconds)) {
    query['DelaySeconds'] = request.delaySeconds;
  }
  if (!Util.isUnset(request.enableLogging)) {
    query['EnableLogging'] = request.enableLogging;
  }
  if (!Util.isUnset(request.maximumMessageSize)) {
    query['MaximumMessageSize'] = request.maximumMessageSize;
  }
  if (!Util.isUnset(request.messageRetentionPeriod)) {
    query['MessageRetentionPeriod'] = request.messageRetentionPeriod;
  }
  if (!Util.isUnset(request.pollingWaitSeconds)) {
    query['PollingWaitSeconds'] = request.pollingWaitSeconds;
  }
  if (!Util.isUnset(request.queueName)) {
    query['QueueName'] = request.queueName;
  }
  if (!Util.isUnset(request.visibilityTimeout)) {
    query['VisibilityTimeout'] = request.visibilityTimeout;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateQueue',
    version = '2022-01-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createQueue(request: CreateQueueRequest): CreateQueueResponse {
  var runtime = new Util.RuntimeOptions{};
  return createQueueWithOptions(request, runtime);
}

model CreateTopicRequest {
  enableLogging?: boolean(name='EnableLogging', example='true'),
  maxMessageSize?: long(name='MaxMessageSize', example='10240'),
  topicName?: string(name='TopicName', example='test'),
}

model CreateTopicResponseBody = {
  code?: long(name='Code', example='200'),
  data?: {
    code?: long(name='Code', example='200'),
    message?: string(name='Message'),
    success?: boolean(name='Success', example='true'),
  }(name='Data'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='06273500-249F-5863-121D-74D51123E62C'),
  status?: string(name='Status', example='Success'),
  success?: boolean(name='Success', example='true'),
}

model CreateTopicResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTopicResponseBody(name='body'),
}

async function createTopicWithOptions(request: CreateTopicRequest, runtime: Util.RuntimeOptions): CreateTopicResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.enableLogging)) {
    body['EnableLogging'] = request.enableLogging;
  }
  if (!Util.isUnset(request.maxMessageSize)) {
    body['MaxMessageSize'] = request.maxMessageSize;
  }
  if (!Util.isUnset(request.topicName)) {
    body['TopicName'] = request.topicName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateTopic',
    version = '2022-01-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTopic(request: CreateTopicRequest): CreateTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTopicWithOptions(request, runtime);
}

model DeleteQueueRequest {
  queueName?: string(name='QueueName', example='tf-testAccMNSQueue-525478433321945943'),
}

model DeleteQueueResponseBody = {
  code?: long(name='Code', example='200'),
  data?: {
    code?: long(name='Code', example='200'),
    message?: string(name='Message'),
    success?: boolean(name='Success', example='true'),
  }(name='Data'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='06273500-249F-5863-121D-74D51123****'),
  status?: string(name='Status', example='Success'),
  success?: boolean(name='Success', example='true'),
}

model DeleteQueueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteQueueResponseBody(name='body'),
}

async function deleteQueueWithOptions(request: DeleteQueueRequest, runtime: Util.RuntimeOptions): DeleteQueueResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.queueName)) {
    query['QueueName'] = request.queueName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteQueue',
    version = '2022-01-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteQueue(request: DeleteQueueRequest): DeleteQueueResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteQueueWithOptions(request, runtime);
}

model DeleteTopicRequest {
  topicName?: string(name='TopicName', example='tf-testAccMNSTopic-112965059402264645'),
}

model DeleteTopicResponseBody = {
  code?: long(name='Code', example='200'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='06273500-249F-5863-121D-74D51123****'),
  status?: string(name='Status', example='Success'),
  success?: boolean(name='Success', example='true'),
}

model DeleteTopicResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTopicResponseBody(name='body'),
}

async function deleteTopicWithOptions(request: DeleteTopicRequest, runtime: Util.RuntimeOptions): DeleteTopicResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.topicName)) {
    query['TopicName'] = request.topicName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTopic',
    version = '2022-01-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteTopic(request: DeleteTopicRequest): DeleteTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTopicWithOptions(request, runtime);
}

model GetQueueAttributesRequest {
  queueName?: string(name='QueueName', example='demo-queue'),
}

model GetQueueAttributesResponseBody = {
  code?: long(name='Code', example='200'),
  data?: {
    activeMessages?: long(name='ActiveMessages', example='20'),
    createTime?: long(name='CreateTime', example='1250700999'),
    delayMessages?: long(name='DelayMessages', example='0'),
    delaySeconds?: long(name='DelaySeconds', example='30'),
    inactiveMessages?: long(name='InactiveMessages', example='0'),
    lastModifyTime?: long(name='LastModifyTime', example='1250700999'),
    loggingEnabled?: boolean(name='LoggingEnabled', example='True'),
    maximumMessageSize?: long(name='MaximumMessageSize', example='65536'),
    messageRetentionPeriod?: long(name='MessageRetentionPeriod', example='65536'),
    pollingWaitSeconds?: long(name='PollingWaitSeconds', example='0'),
    queueName?: string(name='QueueName', example='demo-queue'),
    visibilityTimeout?: long(name='VisibilityTimeout', example='60'),
  }(name='Data'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='06273500-249F-5863-121D-74D51123****'),
  status?: string(name='Status', example='Success'),
  success?: boolean(name='Success', example='true'),
}

model GetQueueAttributesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetQueueAttributesResponseBody(name='body'),
}

async function getQueueAttributesWithOptions(request: GetQueueAttributesRequest, runtime: Util.RuntimeOptions): GetQueueAttributesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.queueName)) {
    query['QueueName'] = request.queueName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetQueueAttributes',
    version = '2022-01-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getQueueAttributes(request: GetQueueAttributesRequest): GetQueueAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return getQueueAttributesWithOptions(request, runtime);
}

model GetSubscriptionAttributesRequest {
  subscriptionName?: string(name='SubscriptionName', example='MySubscription'),
  topicName?: string(name='TopicName', example='MyTopic'),
}

model GetSubscriptionAttributesResponseBody = {
  code?: long(name='Code', example='200'),
  data?: {
    createTime?: long(name='CreateTime', example='1449554806'),
    endpoint?: string(name='Endpoint', example='http://example.com'),
    filterTag?: string(name='FilterTag', example='important'),
    lastModifyTime?: long(name='LastModifyTime', example='1449554962'),
    notifyContentFormat?: string(name='NotifyContentFormat', example='XML'),
    notifyStrategy?: string(name='NotifyStrategy', example='BACKOFF_RETRY'),
    subscriptionName?: string(name='SubscriptionName', example='MySubscription'),
    topicName?: string(name='TopicName', example='MyTopic'),
    topicOwner?: string(name='TopicOwner', example='123456789098****'),
  }(name='Data'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='06273500-249F-5863-121D-74D51123****'),
  status?: string(name='Status', example='Success'),
  success?: boolean(name='Success', example='true'),
}

model GetSubscriptionAttributesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSubscriptionAttributesResponseBody(name='body'),
}

async function getSubscriptionAttributesWithOptions(request: GetSubscriptionAttributesRequest, runtime: Util.RuntimeOptions): GetSubscriptionAttributesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.subscriptionName)) {
    query['SubscriptionName'] = request.subscriptionName;
  }
  if (!Util.isUnset(request.topicName)) {
    query['TopicName'] = request.topicName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSubscriptionAttributes',
    version = '2022-01-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSubscriptionAttributes(request: GetSubscriptionAttributesRequest): GetSubscriptionAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSubscriptionAttributesWithOptions(request, runtime);
}

model GetTopicAttributesRequest {
  topicName?: string(name='TopicName', example='demo-topic'),
}

model GetTopicAttributesResponseBody = {
  code?: long(name='Code', example='200'),
  data?: {
    createTime?: long(name='CreateTime', example='1449554277'),
    lastModifyTime?: long(name='LastModifyTime', example='1449554460'),
    loggingEnabled?: boolean(name='LoggingEnabled', example='True'),
    maxMessageSize?: long(name='MaxMessageSize', example='65536'),
    messageCount?: long(name='MessageCount', example='0'),
    messageRetentionPeriod?: long(name='MessageRetentionPeriod', example='86400'),
    topicName?: string(name='TopicName', example='demo-topic'),
  }(name='Data'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='06273500-249F-5863-121D-74D51123****'),
  status?: string(name='Status', example='Success'),
  success?: boolean(name='Success', example='true'),
}

model GetTopicAttributesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTopicAttributesResponseBody(name='body'),
}

async function getTopicAttributesWithOptions(request: GetTopicAttributesRequest, runtime: Util.RuntimeOptions): GetTopicAttributesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.topicName)) {
    query['TopicName'] = request.topicName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTopicAttributes',
    version = '2022-01-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTopicAttributes(request: GetTopicAttributesRequest): GetTopicAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTopicAttributesWithOptions(request, runtime);
}

model ListQueueRequest {
  pageNum?: long(name='PageNum', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  queueName?: string(name='QueueName', example='demo-queue'),
}

model ListQueueResponseBody = {
  code?: long(name='Code', example='200'),
  data?: {
    pageData?: [ 
      {
        activeMessages?: long(name='ActiveMessages', example='20'),
        createTime?: long(name='CreateTime', example='1250700999'),
        delayMessages?: long(name='DelayMessages', example='0'),
        delaySeconds?: long(name='DelaySeconds', example='30'),
        inactiveMessages?: long(name='InactiveMessages', example='0'),
        lastModifyTime?: long(name='LastModifyTime', example='1250700999'),
        loggingEnabled?: boolean(name='LoggingEnabled', example='True'),
        maximumMessageSize?: long(name='MaximumMessageSize', example='65536'),
        messageRetentionPeriod?: long(name='MessageRetentionPeriod', example='65536'),
        pollingWaitSeconds?: long(name='PollingWaitSeconds', example='0'),
        queueName?: string(name='QueueName', example='demo-queue'),
        visibilityTimeout?: long(name='VisibilityTimeout', example='60'),
      }
    ](name='PageData'),
    pageNum?: long(name='PageNum', example='1'),
    pageSize?: long(name='PageSize', example='50'),
    pages?: long(name='Pages', example='3'),
    size?: long(name='Size', example='20'),
    total?: long(name='Total', example='130'),
  }(name='Data'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='06273500-249F-5863-121D-74D51123****'),
  status?: string(name='Status', example='Success'),
  success?: boolean(name='Success', example='true'),
}

model ListQueueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListQueueResponseBody(name='body'),
}

async function listQueueWithOptions(request: ListQueueRequest, runtime: Util.RuntimeOptions): ListQueueResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queueName)) {
    query['QueueName'] = request.queueName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListQueue',
    version = '2022-01-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listQueue(request: ListQueueRequest): ListQueueResponse {
  var runtime = new Util.RuntimeOptions{};
  return listQueueWithOptions(request, runtime);
}

model ListSubscriptionByTopicRequest {
  pageNum?: long(name='PageNum', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  subscriptionName?: string(name='SubscriptionName', example='demo-subscription'),
  topicName?: string(name='TopicName', example='test'),
}

model ListSubscriptionByTopicResponseBody = {
  code?: long(name='Code', example='200'),
  data?: {
    pageData?: [ 
      {
        createTime?: long(name='CreateTime', example='1449554806'),
        endpoint?: string(name='Endpoint', example='http://example.com'),
        filterTag?: string(name='FilterTag', example='important'),
        lastModifyTime?: long(name='LastModifyTime', example='1449554806'),
        notifyContentFormat?: string(name='NotifyContentFormat', example='XML'),
        notifyStrategy?: string(name='NotifyStrategy', example='BACKOFF_RETRY'),
        subscriptionName?: string(name='SubscriptionName', example='MySubscription'),
        topicName?: string(name='TopicName', example='MyTopic'),
        topicOwner?: string(name='TopicOwner', example='123456789098****'),
      }
    ](name='PageData'),
    pageNum?: long(name='PageNum', example='1'),
    pageSize?: long(name='PageSize', example='50'),
    pages?: long(name='Pages', example='3'),
    size?: long(name='Size', example='20'),
    total?: long(name='Total', example='130'),
  }(name='Data'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='06273500-249F-5863-121D-74D51123****'),
  status?: string(name='Status', example='Success'),
  success?: boolean(name='Success', example='true'),
}

model ListSubscriptionByTopicResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSubscriptionByTopicResponseBody(name='body'),
}

async function listSubscriptionByTopicWithOptions(request: ListSubscriptionByTopicRequest, runtime: Util.RuntimeOptions): ListSubscriptionByTopicResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.subscriptionName)) {
    query['SubscriptionName'] = request.subscriptionName;
  }
  if (!Util.isUnset(request.topicName)) {
    query['TopicName'] = request.topicName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSubscriptionByTopic',
    version = '2022-01-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSubscriptionByTopic(request: ListSubscriptionByTopicRequest): ListSubscriptionByTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSubscriptionByTopicWithOptions(request, runtime);
}

model ListTopicRequest {
  pageNum?: long(name='PageNum', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  topicName?: string(name='TopicName', example='test'),
}

model ListTopicResponseBody = {
  code?: long(name='Code', example='200'),
  data?: {
    pageData?: [ 
      {
        createTime?: long(name='CreateTime', example='1449554962'),
        lastModifyTime?: long(name='LastModifyTime', example='1449554962'),
        loggingEnabled?: boolean(name='LoggingEnabled', example='True'),
        maxMessageSize?: long(name='MaxMessageSize', example='65536'),
        messageCount?: long(name='MessageCount', example='0'),
        messageRetentionPeriod?: long(name='MessageRetentionPeriod', example='86400'),
        topicName?: string(name='TopicName', example='demo-topic'),
      }
    ](name='PageData'),
    pageNum?: long(name='PageNum', example='1'),
    pageSize?: long(name='PageSize', example='50'),
    total?: long(name='Total', example='130'),
  }(name='Data'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='06273500-249F-5863-121D-74D51123****'),
  status?: string(name='Status', example='Success'),
  success?: boolean(name='Success', example='true'),
}

model ListTopicResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTopicResponseBody(name='body'),
}

async function listTopicWithOptions(request: ListTopicRequest, runtime: Util.RuntimeOptions): ListTopicResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.topicName)) {
    query['TopicName'] = request.topicName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTopic',
    version = '2022-01-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTopic(request: ListTopicRequest): ListTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTopicWithOptions(request, runtime);
}

model SetQueueAttributesRequest {
  delaySeconds?: long(name='DelaySeconds', example='0'),
  enableLogging?: boolean(name='EnableLogging', example='True'),
  maximumMessageSize?: long(name='MaximumMessageSize', example='1024'),
  messageRetentionPeriod?: long(name='MessageRetentionPeriod', example='120'),
  pollingWaitSeconds?: long(name='PollingWaitSeconds', example='0'),
  queueName?: string(name='QueueName', example='testqueue'),
  visibilityTimeout?: long(name='VisibilityTimeout', example='60'),
}

model SetQueueAttributesResponseBody = {
  code?: long(name='Code', example='200'),
  data?: {
    code?: long(name='Code', example='200'),
    message?: string(name='Message'),
    success?: boolean(name='Success', example='true'),
  }(name='Data'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='06273500-249F-5863-121D-74D51123****'),
  status?: string(name='Status', example='Success'),
  success?: boolean(name='Success', example='true'),
}

model SetQueueAttributesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetQueueAttributesResponseBody(name='body'),
}

async function setQueueAttributesWithOptions(request: SetQueueAttributesRequest, runtime: Util.RuntimeOptions): SetQueueAttributesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.delaySeconds)) {
    query['DelaySeconds'] = request.delaySeconds;
  }
  if (!Util.isUnset(request.enableLogging)) {
    query['EnableLogging'] = request.enableLogging;
  }
  if (!Util.isUnset(request.maximumMessageSize)) {
    query['MaximumMessageSize'] = request.maximumMessageSize;
  }
  if (!Util.isUnset(request.messageRetentionPeriod)) {
    query['MessageRetentionPeriod'] = request.messageRetentionPeriod;
  }
  if (!Util.isUnset(request.pollingWaitSeconds)) {
    query['PollingWaitSeconds'] = request.pollingWaitSeconds;
  }
  if (!Util.isUnset(request.queueName)) {
    query['QueueName'] = request.queueName;
  }
  if (!Util.isUnset(request.visibilityTimeout)) {
    query['VisibilityTimeout'] = request.visibilityTimeout;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetQueueAttributes',
    version = '2022-01-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setQueueAttributes(request: SetQueueAttributesRequest): SetQueueAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return setQueueAttributesWithOptions(request, runtime);
}

model SetSubscriptionAttributesRequest {
  notifyStrategy?: string(name='NotifyStrategy', example='BACKOFF_RETRY'),
  subscriptionName?: string(name='SubscriptionName', example='MySubscription'),
  topicName?: string(name='TopicName', example='test'),
}

model SetSubscriptionAttributesResponseBody = {
  code?: long(name='Code', example='200'),
  data?: {
    code?: long(name='Code', example='200'),
    message?: string(name='Message'),
    success?: boolean(name='Success', example='true'),
  }(name='Data'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='06273500-249F-5863-121D-74D51123****'),
  status?: string(name='Status', example='Success'),
  success?: boolean(name='Success', example='true'),
}

model SetSubscriptionAttributesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetSubscriptionAttributesResponseBody(name='body'),
}

async function setSubscriptionAttributesWithOptions(request: SetSubscriptionAttributesRequest, runtime: Util.RuntimeOptions): SetSubscriptionAttributesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.notifyStrategy)) {
    query['NotifyStrategy'] = request.notifyStrategy;
  }
  if (!Util.isUnset(request.subscriptionName)) {
    query['SubscriptionName'] = request.subscriptionName;
  }
  if (!Util.isUnset(request.topicName)) {
    query['TopicName'] = request.topicName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetSubscriptionAttributes',
    version = '2022-01-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setSubscriptionAttributes(request: SetSubscriptionAttributesRequest): SetSubscriptionAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return setSubscriptionAttributesWithOptions(request, runtime);
}

model SetTopicAttributesRequest {
  enableLogging?: boolean(name='EnableLogging', example='True'),
  maxMessageSize?: long(name='MaxMessageSize', example='65536'),
  topicName?: string(name='TopicName', example='test'),
}

model SetTopicAttributesResponseBody = {
  code?: long(name='Code', example='200'),
  data?: {
    code?: long(name='Code', example='200'),
    message?: string(name='Message'),
    success?: boolean(name='Success', example='true'),
  }(name='Data'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='06273500-249F-5863-121D-74D51123****'),
  status?: string(name='Status', example='Success'),
  success?: boolean(name='Success', example='true'),
}

model SetTopicAttributesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetTopicAttributesResponseBody(name='body'),
}

async function setTopicAttributesWithOptions(request: SetTopicAttributesRequest, runtime: Util.RuntimeOptions): SetTopicAttributesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.enableLogging)) {
    query['EnableLogging'] = request.enableLogging;
  }
  if (!Util.isUnset(request.maxMessageSize)) {
    query['MaxMessageSize'] = request.maxMessageSize;
  }
  if (!Util.isUnset(request.topicName)) {
    query['TopicName'] = request.topicName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetTopicAttributes',
    version = '2022-01-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setTopicAttributes(request: SetTopicAttributesRequest): SetTopicAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return setTopicAttributesWithOptions(request, runtime);
}

model SubscribeRequest {
  endpoint?: string(name='Endpoint', example='http://example.com'),
  messageTag?: string(name='MessageTag', example='important'),
  notifyContentFormat?: string(name='NotifyContentFormat', example='XML'),
  notifyStrategy?: string(name='NotifyStrategy', example='BACKOFF_RETRY'),
  pushType?: string(name='PushType', example='queue'),
  subscriptionName?: string(name='SubscriptionName', example='testSubscription'),
  topicName?: string(name='TopicName', example='test'),
}

model SubscribeResponseBody = {
  code?: long(name='Code', example='200'),
  data?: string(name='Data', example='{\\"Code\\": 200, \\"Success\\": True}'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='06273500-249F-5863-121D-74D51123****'),
  status?: string(name='Status', example='Success'),
  success?: boolean(name='Success', example='true'),
}

model SubscribeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubscribeResponseBody(name='body'),
}

async function subscribeWithOptions(request: SubscribeRequest, runtime: Util.RuntimeOptions): SubscribeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endpoint)) {
    query['Endpoint'] = request.endpoint;
  }
  if (!Util.isUnset(request.messageTag)) {
    query['MessageTag'] = request.messageTag;
  }
  if (!Util.isUnset(request.notifyContentFormat)) {
    query['NotifyContentFormat'] = request.notifyContentFormat;
  }
  if (!Util.isUnset(request.notifyStrategy)) {
    query['NotifyStrategy'] = request.notifyStrategy;
  }
  if (!Util.isUnset(request.pushType)) {
    query['PushType'] = request.pushType;
  }
  if (!Util.isUnset(request.subscriptionName)) {
    query['SubscriptionName'] = request.subscriptionName;
  }
  if (!Util.isUnset(request.topicName)) {
    query['TopicName'] = request.topicName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'Subscribe',
    version = '2022-01-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function subscribe(request: SubscribeRequest): SubscribeResponse {
  var runtime = new Util.RuntimeOptions{};
  return subscribeWithOptions(request, runtime);
}

model UnsubscribeRequest {
  subscriptionName?: string(name='SubscriptionName', example='MySubscription'),
  topicName?: string(name='TopicName', example='test'),
}

model UnsubscribeResponseBody = {
  code?: long(name='Code', example='200'),
  data?: {
    code?: long(name='Code', example='200'),
    message?: string(name='Message'),
    success?: boolean(name='Success', example='true'),
  }(name='Data'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='06273500-249F-5863-121D-74D51123****'),
  status?: string(name='Status', example='Success'),
  success?: boolean(name='Success', example='true'),
}

model UnsubscribeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnsubscribeResponseBody(name='body'),
}

async function unsubscribeWithOptions(request: UnsubscribeRequest, runtime: Util.RuntimeOptions): UnsubscribeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.subscriptionName)) {
    query['SubscriptionName'] = request.subscriptionName;
  }
  if (!Util.isUnset(request.topicName)) {
    query['TopicName'] = request.topicName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'Unsubscribe',
    version = '2022-01-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unsubscribe(request: UnsubscribeRequest): UnsubscribeResponse {
  var runtime = new Util.RuntimeOptions{};
  return unsubscribeWithOptions(request, runtime);
}

