/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'sophonsoar';
  @version = '2022-07-28';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model BatchModifyInstanceStatusRequest {
  active: int32(name='Active', example='1', position='Body'),
  lang?: string(name='Lang', example='zh', position='Query'),
  playbookUuid: string(name='PlaybookUuid', example='8baa6cff-319e-4ede-97bc-1xxxxxx,s8df2e-s8dfs-xxxx', position='Body'),
}

model BatchModifyInstanceStatusResponseBody = {
  requestId?: string(name='RequestId', example='358E012F-B516-599D-9ED0-A1A361CDE615'),
}

model BatchModifyInstanceStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchModifyInstanceStatusResponseBody(name='body'),
}

async function batchModifyInstanceStatus(request: BatchModifyInstanceStatusRequest): BatchModifyInstanceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchModifyInstanceStatus', 'POST', '/', 'json', true, 'form', request);
}

model ComparePlaybooksRequest {
  lang?: string(name='Lang', example='zh', position='Query'),
  newPlaybookReleaseId: int32(name='NewPlaybookReleaseId', example='sfdf2395-e814-459f-9662-xxxxx', position='Query'),
  oldPlaybookReleaseId: int32(name='OldPlaybookReleaseId', example='sflk23423-e814-459f-9662-xxxxx', position='Query'),
  playbookUuid: string(name='PlaybookUuid', example='f916b93e-e814-459f-9662-xxxxx', position='Query'),
}

model ComparePlaybooksResponseBody = {
  compareResult?: {
    description?: string(name='Description', example='The first version adds one node compared to the second version'),
    new?: boolean(name='New', example='true'),
    same?: boolean(name='Same', example='false'),
  }(name='CompareResult'),
  requestId?: string(name='RequestId', example='2EC05B06-BF3C-5F3E-8FE8-3B1FAD76087A'),
}

model ComparePlaybooksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ComparePlaybooksResponseBody(name='body'),
}

async function comparePlaybooks(request: ComparePlaybooksRequest): ComparePlaybooksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ComparePlaybooks', 'POST', '/', 'json', false, 'json', request);
}

model CreatePlaybookRequest {
  description?: string(name='Description', example='This is a new version', position='Body'),
  displayName: string(name='DisplayName', example='test09', position='Body'),
  lang?: string(name='Lang', example='zh', position='Body'),
}

model CreatePlaybookResponseBody = {
  data?: {
    playbookUuid?: string(name='PlaybookUuid', example='9e38111e-9794-4784-9ca8-xxxxxxx'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='B09B40B2-F11E-512C-B755-423F2056C17B'),
}

model CreatePlaybookResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreatePlaybookResponseBody(name='body'),
}

async function createPlaybook(request: CreatePlaybookRequest): CreatePlaybookResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePlaybook', 'POST', '/', 'json', true, 'form', request);
}

model DebugPlaybookRequest {
  lang?: string(name='Lang', example='zh', position='Body'),
  playbookUuid: string(name='PlaybookUuid', example='f916b93e-e814-459f-9662-xxxxx', position='Body'),
  record?: string(name='Record', example='{
   "param1":"a",
   "param2":"b"
}', position='Body'),
  taskflow: string(name='Taskflow', example='<?xml version="1.0" encoding="UTF-8"?><bpmn:definitions xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" targetNamespace="http://bpmn.io/schema/bpmn" id="Definitions_1"><bpmn:process id="Process_1" isExecutable="false"><bpmn:startEvent id="StartEvent_1"/></bpmn:process><bpmndi:BPMNDiagram id="BPMNDiagram_1"><bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="Process_1"><bpmndi:BPMNShape id="_BPMNShape_StartEvent_2" bpmnElement="StartEvent_1"><dc:Bounds height="36.0" width="36.0" x="173.0" y="102.0"/></bpmndi:BPMNShape></bpmndi:BPMNPlane></bpmndi:BPMNDiagram></bpmn:definitions>', position='Body'),
}

model DebugPlaybookResponseBody = {
  requestId?: string(name='RequestId', example='75E56B2C-C8FA-5A2F-AA08-8745E2AC33EF'),
  requestUuid?: string(name='RequestUuid', example='6d412cfa-0905-4567-8a83-xxxxxx'),
}

model DebugPlaybookResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DebugPlaybookResponseBody(name='body'),
}

async function debugPlaybook(request: DebugPlaybookRequest): DebugPlaybookResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DebugPlaybook', 'POST', '/', 'json', true, 'form', request);
}

model DeleteComponentAssetRequest {
  assetId: long(name='AssetId', example='12x', position='Query'),
  lang?: string(name='Lang', example='zh', position='Query'),
}

model DeleteComponentAssetResponseBody = {
  requestId?: string(name='RequestId', example='39C38A34-8532-5D44-B88A-7263B435C316'),
}

model DeleteComponentAssetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteComponentAssetResponseBody(name='body'),
}

async function deleteComponentAsset(request: DeleteComponentAssetRequest): DeleteComponentAssetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteComponentAsset', 'POST', '/', 'json', false, 'json', request);
}

model DeletePlaybookRequest {
  lang?: string(name='Lang', example='zh', position='Body'),
  playbookUuid: string(name='PlaybookUuid', example='e99dab31-499b-4307-9248-xxxxxx', position='Body'),
}

model DeletePlaybookResponseBody = {
  requestId?: string(name='RequestId', example='6F3CA8A9-B5BB-506A-9182-FFE80A6E0584'),
}

model DeletePlaybookResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeletePlaybookResponseBody(name='body'),
}

async function deletePlaybook(request: DeletePlaybookRequest): DeletePlaybookResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePlaybook', 'POST', '/', 'json', true, 'form', request);
}

model DescribeApiListRequest {
  lang?: string(name='Lang', example='zh', position='Query'),
}

model DescribeApiListResponseBody = {
  apiList?: [ 
    {
      docUrl?: string(name='DocUrl', example='https://xxxxx'),
      popCode?: string(name='PopCode', example='Sas'),
      productName?: string(name='ProductName', example='Cloud Security Center'),
    }
  ](name='ApiList'),
  requestId?: string(name='RequestId', example='4A15D31E-B38B-5F7F-8DC0-1C74408875AA'),
}

model DescribeApiListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeApiListResponseBody(name='body'),
}

async function describeApiList(request: DescribeApiListRequest): DescribeApiListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiList', 'GET', '/', 'json', false, 'json', request);
}

model DescribeComponentAssetFormRequest {
  componentName: string(name='ComponentName', example='python3', position='Query'),
  lang?: string(name='Lang', example='zh', position='Query'),
}

model DescribeComponentAssetFormResponseBody = {
  componentAssetForm?: string(name='ComponentAssetForm', example='[
    {
        "defaultValue": "",
        "description": "assetname",
        "name": "assetname",
        "required": true
    }
]'),
  requestId?: string(name='RequestId', example='9D1651AC-31CC-5CC4-A14E-626B3FCC1022'),
}

model DescribeComponentAssetFormResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeComponentAssetFormResponseBody(name='body'),
}

async function describeComponentAssetForm(request: DescribeComponentAssetFormRequest): DescribeComponentAssetFormResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeComponentAssetForm', 'GET', '/', 'json', false, 'json', request);
}

model DescribeComponentAssetsRequest {
  componentName: string(name='ComponentName', example='python3', position='Query'),
  lang?: string(name='Lang', example='zh', position='Query'),
}

model DescribeComponentAssetsResponseBody = {
  componentAssets?: [ 
    {
      assetUuid?: string(name='AssetUuid', example='ff6fe161-93e2-464c-a326-fxxxxxx'),
      componentname?: string(name='Componentname', example='pyhton3'),
      gmtCreate?: string(name='GmtCreate', example='2023-03-23T14:38Z'),
      gmtModified?: string(name='GmtModified', example='2023-03-23T14:38Z'),
      id?: long(name='Id', example='7xx'),
      name?: string(name='Name', example='test asset'),
      params?: string(name='Params', example='[
    {
        "name": "authMethod",
        "value": "ak"
    },
    {
        "name": "accessKeyId",
        "value": "xxxxxxx"
    },
    {
        "name": "accessKeySecret",
        "value": "xxxxx"
    },
    {
        "name": "roleArn",
        "value": ""
    }
]'),
    }
  ](name='ComponentAssets'),
  requestId?: string(name='RequestId', example='BFEFB76D-DD0E-5529-BD57-0DAC10B9B30F'),
}

model DescribeComponentAssetsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeComponentAssetsResponseBody(name='body'),
}

async function describeComponentAssets(request: DescribeComponentAssetsRequest): DescribeComponentAssetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeComponentAssets', 'GET', '/', 'json', false, 'json', request);
}

model DescribeComponentListRequest {
  lang?: string(name='Lang', example='zh', position='Query'),
  playbookUuid: string(name='PlaybookUuid', example='b724d2b0-3c3b-4223-9bfd-xxxxx', position='Query'),
}

model DescribeComponentListResponseBody = {
  components?: string(name='Components', example='[
    {
        "actions": [
            {
                "description": "mysql component",
                "name": "storeIdb",
                "parameters": [
                    {
                        "description": "update the mysql db",
                        "name": "updateSql",
                        "required": false
                    }
                ]
            }
        ],
        "basic": {
            "description": "mysq sql component for 5.6",
            "logo": "https://img.alicdn.com/tfs/TB1H89IpH3nBKNjSZFMXXaUSFXa-200-200.svg",
            "name": "Mysql"
        }
    }
]'),
  requestId?: string(name='RequestId', example='B0A255B3-495C-56FB-8B6B-DB073F80388A'),
}

model DescribeComponentListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeComponentListResponseBody(name='body'),
}

async function describeComponentList(request: DescribeComponentListRequest): DescribeComponentListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeComponentList', 'GET', '/', 'json', false, 'json', request);
}

model DescribeComponentPlaybookRequest {
  lang?: string(name='Lang', example='zh', position='Query'),
  playbookUuid: string(name='PlaybookUuid', example='ac343acc-1a61-4084-9a1cxxxxx', position='Query'),
}

model DescribeComponentPlaybookResponseBody = {
  playbooks?: [ 
    {
      description?: string(name='Description', example='aegis_kill_process'),
      displayName?: string(name='DisplayName', example='AegisKillQuara'),
      inputParams?: string(name='InputParams', example='[
    {
        "typeName": "String",
        "dataClass": "normal",
        "dataType": "String",
        "description": "period",
        "example": "",
        "name": "period",
        "required": false
    }
]'),
    }
  ](name='Playbooks'),
  requestId?: string(name='RequestId', example='C5F5D6C9-DF1A-5381-92B1-39676F777D20'),
}

model DescribeComponentPlaybookResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeComponentPlaybookResponseBody(name='body'),
}

async function describeComponentPlaybook(request: DescribeComponentPlaybookRequest): DescribeComponentPlaybookResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeComponentPlaybook', 'GET', '/', 'json', false, 'json', request);
}

model DescribeComponentsJsRequest {
  lang?: string(name='Lang', example='zh', position='Query'),
}

model DescribeComponentsJsResponseBody = {
  componentsJs?: string(name='ComponentsJs', example='[
    {
        "js": "https://xxxxx.oss-cn-zhangjiakou.aliyuncs.com/componentUpload/xxxxx",
        "name": "python3",
        "ownType": "sys"
    }
]'),
  requestId?: string(name='RequestId', example='58A518BC-E4A8-5BD7-AFEA-366046ED9073'),
}

model DescribeComponentsJsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeComponentsJsResponseBody(name='body'),
}

async function describeComponentsJs(request: DescribeComponentsJsRequest): DescribeComponentsJsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeComponentsJs', 'GET', '/', 'json', false, 'json', request);
}

model DescribeDistinctReleasesRequest {
  lang?: string(name='Lang', example='zh', position='Query'),
  playbookUuid: string(name='PlaybookUuid', example='bc0b8424-535c-4ed5-bd94-xxxxxx', position='Query'),
  taskflowMd5?: string(name='TaskflowMd5', example='be0a4ef084dd174abe47xxxxx', position='Query'),
}

model DescribeDistinctReleasesResponseBody = {
  records?: [ 
    {
      description?: string(name='Description', example='demo version'),
      taskflowMd5?: string(name='TaskflowMd5', example='17cf53049bc8efa941207xxxxx'),
    }
  ](name='Records'),
  requestId?: string(name='RequestId', example='145CACF6-D276-5197-8549-CB1AD76E2AC8'),
}

model DescribeDistinctReleasesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDistinctReleasesResponseBody(name='body'),
}

async function describeDistinctReleases(request: DescribeDistinctReleasesRequest): DescribeDistinctReleasesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDistinctReleases', 'GET', '/', 'json', false, 'json', request);
}

model DescribeEnumItemsRequest {
  enumType: string(name='EnumType', example='process', position='Query'),
  lang?: string(name='Lang', example='zh', position='Query'),
}

model DescribeEnumItemsResponseBody = {
  data?: [ 
    {
      key?: string(name='Key', example='system_xxxxx_process_book'),
      value?: string(name='Value', example='system_xxxxx_process_book'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='E7698CFB-4E1C-5840-8EC9-691B86729E94'),
}

model DescribeEnumItemsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEnumItemsResponseBody(name='body'),
}

async function describeEnumItems(request: DescribeEnumItemsRequest): DescribeEnumItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEnumItems', 'GET', '/', 'json', false, 'json', request);
}

model DescribeExecutePlaybooksRequest {
  lang?: string(name='Lang', example='zh', position='Query'),
  paramType?: string(name='ParamType', example='custom', position='Query'),
  playbookName?: string(name='PlaybookName', example='demo_test', position='Query'),
  uuid?: string(name='Uuid', example='f916b93e-e814-459f-9662-xxxxxx', position='Query'),
}

model DescribeExecutePlaybooksResponseBody = {
  playbookMetrics?: [ 
    {
      description?: string(name='Description', example='a demo playbook'),
      displayName?: string(name='DisplayName', example='demo_playbook'),
      paramConfig?: string(name='ParamConfig', example='[
    {
        "typeName": "String",
        "dataClass": "normal",
        "dataType": "String",
        "description": "period",
        "example": "",
        "name": "period",
        "required": false
    }
]'),
      paramType?: string(name='ParamType', example='custom'),
      uuid?: string(name='Uuid', example='c5c88b5e-97ca-435d-8c20-2xxxxx'),
    }
  ](name='PlaybookMetrics'),
  requestId?: string(name='RequestId', example='88A39217-2802-5B1E-BA2B-CF1BBC43C1F5'),
}

model DescribeExecutePlaybooksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeExecutePlaybooksResponseBody(name='body'),
}

async function describeExecutePlaybooks(request: DescribeExecutePlaybooksRequest): DescribeExecutePlaybooksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeExecutePlaybooks', 'GET', '/', 'json', false, 'json', request);
}

model DescribeFieldRequest {
  lang?: string(name='Lang', example='zh', position='Query'),
  queryKey: string(name='QueryKey', example='soar_filed_tags', position='Query'),
}

model DescribeFieldResponseBody = {
  fields?: string(name='Fields', example='["ip","name","hostinfo","md5"]'),
  name?: string(name='Name', example='soar_filed_tags'),
  requestId?: string(name='RequestId', example='BCDE6498-83CC-50A1-8307-3D5A539C42F8'),
}

model DescribeFieldResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeFieldResponseBody(name='body'),
}

async function describeField(request: DescribeFieldRequest): DescribeFieldResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeField', 'GET', '/', 'json', false, 'json', request);
}

model DescribeLatestRecordSchemaRequest {
  lang?: string(name='Lang', example='zh', position='Query'),
  playbookUuid: string(name='PlaybookUuid', example='c5c88b5e-97ca-435d-8c20-xxxxxx', position='Query'),
}

model DescribeLatestRecordSchemaResponseBody = {
  playbookNodeSchema?: {
    nodeSchema?: [ 
      {
        actionName?: string(name='ActionName', example='formatedata'),
        componentName?: string(name='ComponentName', example='DataFormat'),
        nodeName?: string(name='NodeName', example='DataFormat_1'),
        outputFields?: [ string ](name='OutputFields'),
      }
    ](name='NodeSchema'),
  }(name='PlaybookNodeSchema'),
  requestId?: string(name='RequestId', example='10B92EE1-4597-593B-A131-7A17D25EF5C9'),
}

model DescribeLatestRecordSchemaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLatestRecordSchemaResponseBody(name='body'),
}

async function describeLatestRecordSchema(request: DescribeLatestRecordSchemaRequest): DescribeLatestRecordSchemaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLatestRecordSchema', 'GET', '/', 'json', false, 'json', request);
}

model DescribeNodeParamTagsRequest {
  lang?: string(name='Lang', example='zh', position='Query'),
  nodeName: string(name='NodeName', example='python3_2', position='Query'),
  playbookUuid: string(name='PlaybookUuid', example='ac343acc-1a61-4084-9a1c-xxxxxxx', position='Query'),
}

model DescribeNodeParamTagsResponseBody = {
  paramReferredPaths?: [ 
    {
      paramName?: string(name='ParamName', example='DataFormat_1'),
      referredPath?: [ string ](name='ReferredPath'),
    }
  ](name='ParamReferredPaths'),
  requestId?: string(name='RequestId', example='6BE94351-712A-505D-A40A-BC77CC8254A9'),
}

model DescribeNodeParamTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeNodeParamTagsResponseBody(name='body'),
}

async function describeNodeParamTags(request: DescribeNodeParamTagsRequest): DescribeNodeParamTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNodeParamTags', 'GET', '/', 'json', false, 'json', request);
}

model DescribeNodeUsedInfosRequest {
  lang?: string(name='Lang', example='zh', position='Query'),
  nodeName: string(name='NodeName', example='python3_2', position='Query'),
  playbookUuid: string(name='PlaybookUuid', example='ac343acc-1a61-4084-9a1c-xxxx', position='Query'),
}

model DescribeNodeUsedInfosResponseBody = {
  nodeUsedInfos?: string(name='NodeUsedInfos', example='{
    "action": [
        {
            "name": "query_books",
            "inputParams": [
                {
                    "referInfos": [
                        "${play_group.datalist.*.ids}"
                    ],
                    "name": "querySql"
                }
            ]
        }
    ]
}'),
  requestId?: string(name='RequestId', example='3B10F836-C2B1-54FA-AB59-7591B548FB59'),
}

model DescribeNodeUsedInfosResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeNodeUsedInfosResponseBody(name='body'),
}

async function describeNodeUsedInfos(request: DescribeNodeUsedInfosRequest): DescribeNodeUsedInfosResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNodeUsedInfos', 'GET', '/', 'json', false, 'json', request);
}

model DescribePlaybookRequest {
  debugFlag?: int32(name='DebugFlag', example='0', position='Query'),
  lang?: string(name='Lang', example='zh', position='Query'),
  playbookUuid: string(name='PlaybookUuid', example='9030076b-6733-4842-b05a-xxxxx', position='Query'),
  taskflowMd5?: string(name='TaskflowMd5', example='7a8f608dc64c242632aa578xxxxx', position='Query'),
}

model DescribePlaybookResponseBody = {
  playbook?: {
    creator?: string(name='Creator', example='124xxxxx3435'),
    description?: string(name='Description', example='demo playbook'),
    displayName?: string(name='DisplayName', example='demo_test'),
    failExeNum?: int32(name='FailExeNum', example='1'),
    gmtCreate?: string(name='GmtCreate', example='1665288858000'),
    gmtModified?: string(name='GmtModified', example='1677482519000'),
    inputParams?: string(name='InputParams', example='[
    {
        "typeName": "String",
        "dataClass": "normal",
        "dataType": "String",
        "description": "period",
        "example": "",
        "name": "period",
        "required": false
    }
]'),
    lastExeTime?: long(name='LastExeTime', example='1665288858000'),
    modifier?: string(name='Modifier', example='124xxxxx3435'),
    onlineActive?: boolean(name='OnlineActive', example='0'),
    onlineReleaseTaskflowMd5?: string(name='OnlineReleaseTaskflowMd5', example='asdfsdfe232-e2b2-44fd-b2cc-xxxxx'),
    ownType?: string(name='OwnType', example='preset'),
    playbookUuid?: string(name='PlaybookUuid', example='8db257d3-e2b2-44fd-b2cc-xxxxx'),
    successExeNum?: int32(name='SuccessExeNum', example='100'),
    taskflow?: string(name='Taskflow', example='<?xml version="1.0" encoding="UTF-8"?><bpmn:definitions xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" targetNamespace="http://bpmn.io/schema/bpmn" id="Definitions_1"><bpmn:process id="Process_1" isExecutable="false"><bpmn:startEvent id="StartEvent_1"/></bpmn:process><bpmndi:BPMNDiagram id="BPMNDiagram_1"><bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="Process_1"><bpmndi:BPMNShape id="_BPMNShape_StartEvent_2" bpmnElement="StartEvent_1"><dc:Bounds height="36.0" width="36.0" x="173.0" y="102.0"/></bpmndi:BPMNShape></bpmndi:BPMNPlane></bpmndi:BPMNDiagram></bpmn:definitions>'),
  }(name='Playbook'),
  requestId?: string(name='RequestId', example='2989BC59-E9F0-5C83-B453-B368857649C8'),
}

model DescribePlaybookResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePlaybookResponseBody(name='body'),
}

async function describePlaybook(request: DescribePlaybookRequest): DescribePlaybookResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePlaybook', 'GET', '/', 'json', false, 'json', request);
}

model DescribePlaybookInputOutputRequest {
  lang?: string(name='Lang', example='zh', position='Query'),
  playbookUuid: string(name='PlaybookUuid', example='b724d2b0-3c3b-4223-9bfd-xxxxxxx', position='Query'),
}

model DescribePlaybookInputOutputResponseBody = {
  config?: {
    inputParams?: string(name='InputParams', example='[
    {
        "typeName": "String",
        "dataClass": "normal",
        "dataType": "String",
        "description": "period",
        "example": "",
        "name": "period",
        "required": false
    }
]'),
    outputParams?: string(name='OutputParams', example='[]'),
    paramType?: string(name='ParamType', example='custom'),
    playbookUuid?: string(name='PlaybookUuid', example='9030076b-6733-4842-b05a-xxxxxx'),
  }(name='Config'),
  requestId?: string(name='RequestId', example='688B4CCD-5272-5DCF-9D76-FE5EFEF545F8'),
}

model DescribePlaybookInputOutputResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePlaybookInputOutputResponseBody(name='body'),
}

async function describePlaybookInputOutput(request: DescribePlaybookInputOutputRequest): DescribePlaybookInputOutputResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePlaybookInputOutput', 'GET', '/', 'json', false, 'json', request);
}

model DescribePlaybookMetricsRequest {
  lang?: string(name='Lang', example='zh', position='Query'),
  playbookUuid: string(name='PlaybookUuid', example='2a687089-d4dd-47d4-9709-xxxxxx', position='Query'),
}

model DescribePlaybookMetricsResponseBody = {
  metrics?: {
    active?: int32(name='Active', example='1'),
    description?: string(name='Description', example='This is a playbook for waf processing'),
    displayName?: string(name='DisplayName', example='demo name'),
    failNum?: int32(name='FailNum', example='10'),
    gmtCreate?: long(name='GmtCreate', example='1655277397000'),
    historyMd5?: int32(name='HistoryMd5', example='10'),
    lastRuntime?: long(name='LastRuntime', example='1683526277415'),
    ownType?: string(name='OwnType', example='user'),
    playbookUuid?: string(name='PlaybookUuid', example='0fbc9bdb-9ae3-4ef4-a709-xxxxx'),
    succNum?: int32(name='SuccNum', example='100'),
  }(name='Metrics'),
  requestId?: string(name='RequestId', example='567D3D0B-2153-5860-BF9A-F9DEED55FB73'),
}

model DescribePlaybookMetricsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePlaybookMetricsResponseBody(name='body'),
}

async function describePlaybookMetrics(request: DescribePlaybookMetricsRequest): DescribePlaybookMetricsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePlaybookMetrics', 'GET', '/', 'json', false, 'json', request);
}

model DescribePlaybookNodesOutputRequest {
  lang?: string(name='Lang', example='zh', position='Query'),
  nodeName: string(name='NodeName', example='DataFormat_1', position='Query'),
  playbookUuid: string(name='PlaybookUuid', example='ac343acc-1a61-4084-9a1c-xxxxx', position='Query'),
}

model DescribePlaybookNodesOutputResponseBody = {
  playbookNodesOutput?: {
    nodeName?: string(name='NodeName', example='DataFormat_1'),
    nodeOutput?: string(name='NodeOutput', example='{
    "datalist": [
        {
            "score": "10",
            "ip": "1.1.1.1"
        }
    ],
    "total_data_successful": 1,
    "filter_total_data": 1,
    "total_data": 1,
    "total_exe_successful": 1,
    "total_exe": 1,
    "total_data_with_dup": 1,
    "filter_total_data_successful": 1,
    "status": true
}'),
  }(name='PlaybookNodesOutput'),
  requestId?: string(name='RequestId', example='A491170C-FE1F-520E-83D4-72ED205B72ED'),
}

model DescribePlaybookNodesOutputResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePlaybookNodesOutputResponseBody(name='body'),
}

async function describePlaybookNodesOutput(request: DescribePlaybookNodesOutputRequest): DescribePlaybookNodesOutputResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePlaybookNodesOutput', 'GET', '/', 'json', false, 'json', request);
}

model DescribePlaybookNumberMetricsRequest {
  lang?: string(name='Lang', example='zh', position='Query'),
}

model DescribePlaybookNumberMetricsResponseBody = {
  metrics?: {
    startUpNum?: int32(name='StartUpNum', example='50'),
    totalNum?: int32(name='TotalNum', example='100'),
  }(name='Metrics'),
  requestId?: string(name='RequestId', example='D4CC979E-3D5B-5A6A-BC87-C93C9E861C7B'),
}

model DescribePlaybookNumberMetricsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePlaybookNumberMetricsResponseBody(name='body'),
}

async function describePlaybookNumberMetrics(request: DescribePlaybookNumberMetricsRequest): DescribePlaybookNumberMetricsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePlaybookNumberMetrics', 'GET', '/', 'json', false, 'json', request);
}

model DescribePlaybookReleasesRequest {
  lang?: string(name='Lang', example='zh', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  playbookUuid: string(name='PlaybookUuid', example='ac343acc-1a61-4084-9a1c-xxxx', position='Query'),
}

model DescribePlaybookReleasesResponseBody = {
  page?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='Page'),
  records?: [ 
    {
      creator?: string(name='Creator', example='145xxxx985'),
      description?: string(name='Description', example='This is a new version'),
      gmtCreate?: long(name='GmtCreate', example='1655277397000'),
      gmtModified?: long(name='GmtModified', example='1691460804000'),
      id?: int32(name='Id', example='80xxx'),
      taskflowMd5?: string(name='TaskflowMd5', example='be0a4ef084dd174abe47xxxxx'),
    }
  ](name='Records'),
  requestId?: string(name='RequestId', example='3DFBE11C-6EB6-5166-92D6-3397796AFE1E'),
}

model DescribePlaybookReleasesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePlaybookReleasesResponseBody(name='body'),
}

async function describePlaybookReleases(request: DescribePlaybookReleasesRequest): DescribePlaybookReleasesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePlaybookReleases', 'GET', '/', 'json', false, 'json', request);
}

model DescribePlaybooksRequest {
  active?: int32(name='Active', example='1', position='Query'),
  endMillis?: long(name='EndMillis', example='1683858064361', position='Query'),
  lang?: string(name='Lang', example='zh', position='Query'),
  name?: string(name='Name', example='demo_playbook', position='Query'),
  ownType?: string(name='OwnType', example='user', position='Query'),
  pageNumber?: string(name='PageNumber', example='1', position='Query'),
  pageSize?: string(name='PageSize', example='10', position='Query'),
  playbookUuid?: string(name='PlaybookUuid', example='8baa6cff-319e-4ede-97bc-1xxxxxx', position='Query'),
  startMillis?: long(name='StartMillis', example='1683526277415', position='Query'),
}

model DescribePlaybooksResponseBody = {
  page?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='Page'),
  playbooks?: [ 
    {
      active?: int32(name='Active', example='1'),
      displayName?: string(name='DisplayName', example='demo_playbook'),
      gmtCreate?: long(name='GmtCreate', example='1683526277415'),
      lastRuntime?: long(name='LastRuntime', example='1683526277415'),
      ownType?: string(name='OwnType', example='user'),
      playbookUuid?: string(name='PlaybookUuid', example='bb5a8640-a14f-44ef-8376-cxxxxx'),
    }
  ](name='Playbooks'),
  requestId?: string(name='RequestId', example='138B5AB7-7F2B-5814-87A3-E3ECFE1F207E'),
}

model DescribePlaybooksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePlaybooksResponseBody(name='body'),
}

async function describePlaybooks(request: DescribePlaybooksRequest): DescribePlaybooksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePlaybooks', 'GET', '/', 'json', false, 'json', request);
}

model DescribePopApiRequest {
  apiName: string(name='ApiName', example='DescribeInstanceInfo', position='Query'),
  apiVersion: string(name='ApiVersion', example='2021-10-01', position='Query'),
  env: string(name='Env', example='online', position='Query'),
  popCode: string(name='PopCode', example='Sas', position='Query'),
}

model DescribePopApiResponseBody = {
  apiName?: string(name='ApiName', example='AddAssetCleanConfig'),
  openApiMetaList?: [ 
    {
      description?: string(name='Description', example='demo parameter'),
      exampleValue?: string(name='ExampleValue', example='12.xx.xx.xx'),
      name?: string(name='Name', example='DescribePopApi'),
      required?: boolean(name='Required', example='false'),
      type?: string(name='Type', example='string'),
    }
  ](name='OpenApiMetaList'),
  popCode?: string(name='PopCode', example='Sas'),
  requestId?: string(name='RequestId', example='1A01B0BA-CFC4-5813-9EB0-A5DA15FA95AE'),
  version?: string(name='Version', example='2019-09-10'),
}

model DescribePopApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePopApiResponseBody(name='body'),
}

async function describePopApi(request: DescribePopApiRequest): DescribePopApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePopApi', 'GET', '/', 'json', false, 'json', request);
}

model DescribePopApiItemListRequest {
  apiName?: string(name='ApiName', example='DescribePopApiItemList', position='Query'),
  apiVersion: string(name='ApiVersion', example='2018-12-03', position='Query'),
  env: string(name='Env', example='online', position='Query'),
  lang?: string(name='Lang', example='zh', position='Query'),
  popCode: string(name='PopCode', example='Sas', position='Query'),
}

model DescribePopApiItemListResponseBody = {
  names?: [ string ](name='Names'),
  popCode?: string(name='PopCode', example='Sas'),
  requestId?: string(name='RequestId', example='6336D603-7028-52DE-AD88-E34AA5248355'),
  total?: long(name='Total', example='100'),
  version?: string(name='Version', example='2018-12-03'),
}

model DescribePopApiItemListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePopApiItemListResponseBody(name='body'),
}

async function describePopApiItemList(request: DescribePopApiItemListRequest): DescribePopApiItemListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePopApiItemList', 'GET', '/', 'json', false, 'json', request);
}

model DescribePopApiVersionListRequest {
  env: string(name='Env', example='online', position='Query'),
  lang?: string(name='Lang', example='zh', position='Query'),
  popCode: string(name='PopCode', example='Sas', position='Query'),
}

model DescribePopApiVersionListResponseBody = {
  popCode?: string(name='PopCode', example='Sas'),
  requestId?: string(name='RequestId', example='DBCDB0E1-4D0E-55A9-A44D-A62ADE7E2FDA'),
  total?: int32(name='Total', example='100'),
  versionList?: [ 
    {
      apiName?: string(name='ApiName', example='DescribePopApiVersionList'),
      popCode?: string(name='PopCode', example='Sas'),
      version?: string(name='Version', example='2018-12-03'),
    }
  ](name='VersionList'),
}

model DescribePopApiVersionListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePopApiVersionListResponseBody(name='body'),
}

async function describePopApiVersionList(request: DescribePopApiVersionListRequest): DescribePopApiVersionListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePopApiVersionList', 'GET', '/', 'json', false, 'json', request);
}

model DescribeProcessTasksRequest {
  direction?: string(name='Direction', example='desc', position='Query'),
  entityName?: string(name='EntityName', example='127.0.0.1', position='Query'),
  entityType?: string(name='EntityType', example='ip', position='Query'),
  orderField?: string(name='OrderField', example='gmtCreate', position='Query'),
  pageNumber?: string(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  paramContent?: string(name='ParamContent', example='12.x.x.x', position='Query'),
  processActionEnd?: long(name='ProcessActionEnd', example='1700031183572', position='Query'),
  processActionStart?: long(name='ProcessActionStart', example='1700031183572', position='Query'),
  processRemoveEnd?: long(name='ProcessRemoveEnd', example='1700031183572', position='Query'),
  processRemoveStart?: long(name='ProcessRemoveStart', example='1700031183572', position='Query'),
  processStrategyUuid?: string(name='ProcessStrategyUuid', example='92af3c79-1754-4646-9366-9ddbd1e45536_xxxx', position='Query'),
  sceneCode?: string(name='SceneCode', example='event_xxx_whole_process', position='Query'),
  scope?: string(name='Scope', example='125xxxxx9870', position='Query'),
  source?: string(name='Source', example='["system"]', position='Query'),
  taskId?: string(name='TaskId', example='150xxxxxxxxx95066', position='Query'),
  taskStatus?: string(name='TaskStatus', example='["11","21"]', position='Query'),
  yunCode?: string(name='YunCode', example='["WAF"]', position='Query'),
}

model DescribeProcessTasksResponseBody = {
  page?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='30'),
  }(name='Page'),
  processTasks?: [ 
    {
      creator?: string(name='Creator', example='123xxxx355'),
      entityName?: string(name='EntityName', example='1.1.1.x'),
      entityType?: string(name='EntityType', example='ip'),
      gmtCreateMillis?: long(name='GmtCreateMillis', example='1700031183572'),
      gmtModifiedMillis?: long(name='GmtModifiedMillis', example='1700031183572'),
      inputParams?: string(name='InputParams', example='{"groupuuid":"c6a9b1df-f4ac-4078-bef4-99xxxxxx"}'),
      processStrategyUuid?: string(name='ProcessStrategyUuid', example='92af3c79-1754-4646-9366-9ddbd1e45536_xxxx'),
      processTime?: long(name='ProcessTime', example='1700031183572'),
      removeTime?: long(name='RemoveTime', example='1700031183572'),
      sceneCode?: string(name='SceneCode', example='event_xxx_whole_process'),
      sceneName?: string(name='SceneName', example='waf_whole_process'),
      scope?: string(name='Scope', example='123xxxxx234'),
      source?: string(name='Source', example='system'),
      taskId?: string(name='TaskId', example='150xxxxxxxxx95066'),
      taskStatus?: int32(name='TaskStatus', example='11'),
      yunCode?: string(name='YunCode', example='WAF'),
    }
  ](name='ProcessTasks'),
  requestId?: string(name='RequestId', example='E7698CFB-4E1C-5840-8EC9-691B86729E94'),
}

model DescribeProcessTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeProcessTasksResponseBody(name='body'),
}

async function describeProcessTasks(request: DescribeProcessTasksRequest): DescribeProcessTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeProcessTasks', 'GET', '/', 'json', false, 'json', request);
}

model DescribeSoarRecordActionOutputListRequest {
  actionUuid: string(name='ActionUuid', example='2202c90d-fa93-4726-bc32-xxxxxx', position='Query'),
  lang?: string(name='Lang', example='zh', position='Query'),
  pageNumber: int32(name='PageNumber', example='1', position='Query'),
  pageSize: int32(name='PageSize', example='10', position='Query'),
}

model DescribeSoarRecordActionOutputListResponseBody = {
  actionOutputs?: string(name='ActionOutputs', example='[
    {
        "a": "a",
        "taskname": "92af3c79-1754-4646-9366-9ddbd1e45536_xxxx",
        "log_time": 1699868849000
    }
]'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='6A2BF9CF-3E32-5E45-A79B-8F67E0A4FE90'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model DescribeSoarRecordActionOutputListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSoarRecordActionOutputListResponseBody(name='body'),
}

async function describeSoarRecordActionOutputList(request: DescribeSoarRecordActionOutputListRequest): DescribeSoarRecordActionOutputListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSoarRecordActionOutputList', 'GET', '/', 'json', false, 'json', request);
}

model DescribeSoarRecordInOutputRequest {
  actionUuid: string(name='ActionUuid', example='0531ff66-dd05-4f24-84bf-xxxxxxxx', position='Query'),
  lang?: string(name='Lang', example='zh', position='Query'),
}

model DescribeSoarRecordInOutputResponseBody = {
  inOutputInfo?: string(name='InOutputInfo', example='{
    "actionUuid": "3896a25d-4967-493c-942e-4e60f27da1f7-xxxxx",
    "outputSummary": {
        "datalist": [
            {
                "a": "a"
            }
        ],
        "total_data_successful": 1,
        "total_data": 1,
        "total_exe_successful": 1,
        "total_exe": 1,
        "total_data_with_dup": 1,
        "status": true
    },
    "outputSchema": {
        "a": "String",
        "startTime": "DateTime"
    },
    "inputParams": {
        "inputData": [
            {
                "outputFields": {
                    "a": "a"
                }
            }
        ],
        "totalSize": 1
    },
    "startTime": "2023-11-13 17:47:28.645",
    "taskName": "92af3c79-1754-4646-9366-9ddbxxxxx"
}'),
  requestId?: string(name='RequestId', example='372D8B41-AF8D-573A-9B3F-0924950F241F'),
}

model DescribeSoarRecordInOutputResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSoarRecordInOutputResponseBody(name='body'),
}

async function describeSoarRecordInOutput(request: DescribeSoarRecordInOutputRequest): DescribeSoarRecordInOutputResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSoarRecordInOutput', 'GET', '/', 'json', false, 'json', request);
}

model DescribeSoarRecordsRequest {
  endMillis?: long(name='EndMillis', example='1683772744953', position='Query'),
  lang?: string(name='Lang', example='zh', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  playbookUuid: string(name='PlaybookUuid', example='8f55e76d-b5d5-4720-9cd7-xxxxx', position='Query'),
  startMillis?: long(name='StartMillis', example='1683526284584', position='Query'),
  taskStatus?: string(name='TaskStatus', example='inprogress', position='Query'),
  taskflowMd5?: string(name='TaskflowMd5', example='be0a4ef084dd174abe478df52xxxxx', position='Query'),
  triggerUser?: string(name='TriggerUser', example='127xxxx4392', position='Query'),
}

model DescribeSoarRecordsResponseBody = {
  page: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='22'),
  }(name='Page'),
  requestId?: string(name='RequestId', example='601C2DAC-6A67-5237-BEE8-5BF1CEE96296'),
  soarExecuteRecords?: [ 
    {
      endTime?: long(name='EndTime', example='1686294686000'),
      errorMsg?: string(name='ErrorMsg', example='stime not match'),
      rawEventReq?: string(name='RawEventReq', example='{
    "input1": "xx.xx.xx.xx",
    "input2": "7d"
}'),
      requestUuid?: string(name='RequestUuid', example='ba1ec480-aa90-4bb6-a1a7-9e311ae79321'),
      resultMessage?: string(name='ResultMessage', example='Playbook finish'),
      startTime?: long(name='StartTime', example='1675823338433'),
      status?: string(name='Status', example='success'),
      taskName?: string(name='TaskName', example='82848ebc-eaff-4791-acd4-xxxxx'),
      taskType?: string(name='TaskType', example='standard'),
      taskflowMd5?: string(name='TaskflowMd5', example='dea65a3db87fb9bd84bbxxxxx'),
      triggerType?: string(name='TriggerType', example='debug'),
      triggerUser?: string(name='TriggerUser', example='127xxxx4392'),
    }
  ](name='SoarExecuteRecords'),
}

model DescribeSoarRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSoarRecordsResponseBody(name='body'),
}

async function describeSoarRecords(request: DescribeSoarRecordsRequest): DescribeSoarRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSoarRecords', 'GET', '/', 'json', false, 'json', request);
}

model DescribeSoarTaskAndActionsRequest {
  lang?: string(name='Lang', example='zh', position='Query'),
  requestUuid?: string(name='RequestUuid', example='1077f2f9-25e8-42d9-bfdf-1528e1313f6d', position='Query'),
}

model DescribeSoarTaskAndActionsResponseBody = {
  details?: {
    actions?: [ 
      {
        action?: string(name='Action', example='formatdata'),
        actionUuid?: string(name='ActionUuid', example='091be399-a937-4276-af78-xxxxxxxx'),
        assetName?: string(name='AssetName', example='SLS Asset'),
        component?: string(name='Component', example='DataFormat'),
        endTime?: long(name='EndTime', example='1699868848766'),
        nodeName?: string(name='NodeName', example='DataFormat_1'),
        requestUuid?: string(name='RequestUuid', example='8dac16c6-7411-4116-8d70-xxxxxxx'),
        startTime?: long(name='StartTime', example='1699868848731'),
        status?: string(name='Status', example='success'),
        taskName?: string(name='TaskName', example='ed127287-6699-4e4d-b986-xxxxxxx'),
        taskStatus?: string(name='TaskStatus', example='NULL'),
        triggerUser?: string(name='TriggerUser', example='127xxxx4392'),
      }
    ](name='Actions'),
    endTime?: long(name='EndTime', example='1699868848767'),
    errorMsg?: string(name='ErrorMsg', example='stime not match'),
    rawEventReq?: string(name='RawEventReq', example='{
    "input1": "xx.xx.xx.xx",
    "input2": "7d"
}'),
    requestUuid?: string(name='RequestUuid', example='17f75844-75cc-4174-86da-cec07a690142'),
    resultLevel?: string(name='ResultLevel', example='DEBUG'),
    resultMessage?: string(name='ResultMessage', example='deubug playbook finished'),
    startTime?: long(name='StartTime', example='1699868848645'),
    status?: string(name='Status', example='success'),
    taskFlowMd5?: string(name='TaskFlowMd5', example='ed127287-6699-4e4d-b986-9f770879xxx'),
    taskName?: string(name='TaskName', example='92af3c79-1754-4646-9366-9ddbd1e45536'),
    taskTenantId?: string(name='TaskTenantId', example='127xxxx4392'),
    triggerType?: string(name='TriggerType', example='siem'),
    triggerUser?: string(name='TriggerUser', example='127xxxx4392'),
  }(name='Details'),
  requestId?: string(name='RequestId', example='18017A93-3D5D-503A-8308-914543F1CBA3'),
}

model DescribeSoarTaskAndActionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSoarTaskAndActionsResponseBody(name='body'),
}

async function describeSoarTaskAndActions(request: DescribeSoarTaskAndActionsRequest): DescribeSoarTaskAndActionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSoarTaskAndActions', 'GET', '/', 'json', false, 'json', request);
}

model DescribeSophonCommandsRequest {
  name?: string(name='Name', example='waf_process', position='Query'),
}

model DescribeSophonCommandsResponseBody = {
  data?: [ 
    {
      description?: string(name='Description', example='This is a action of processing for WAF'),
      displayName?: string(name='DisplayName', example='WAF Process IP'),
      name?: string(name='Name', example='waf_process_ip_v2'),
      paramConfig?: [ 
        {
          checkField?: string(name='CheckField', example='[0-9]{4}\\.[0-9]{4}\\.[0-9]{4}\\.[0-9]{4}'),
          field?: string(name='Field', example='ip'),
          necessary?: boolean(name='Necessary', example='true'),
          value?: string(name='Value', example='12.xx.xx.xx'),
        }
      ](name='ParamConfig'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='1E1EC464-3BD7-518F-9937-BCC12E6855FE'),
}

model DescribeSophonCommandsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSophonCommandsResponseBody(name='body'),
}

async function describeSophonCommands(request: DescribeSophonCommandsRequest): DescribeSophonCommandsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSophonCommands', 'POST', '/', 'json', false, 'json', request);
}

model DescriberPython3ScriptLogsRequest {
  lang?: string(name='Lang', example='zh', position='Query'),
  requestUuid: string(name='RequestUuid', example='69edc2b4-c95c-424f-9114-xxxxxxx', position='Query'),
}

model DescriberPython3ScriptLogsResponseBody = {
  requestId?: string(name='RequestId', example='D22D8A0C-6E86-57B2-A142-929184122AB1'),
  runResult?: string(name='RunResult', example='{
    "logs": [
        {
            "message": "function input is {}"
        }
    ]
}'),
}

model DescriberPython3ScriptLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescriberPython3ScriptLogsResponseBody(name='body'),
}

async function describerPython3ScriptLogs(request: DescriberPython3ScriptLogsRequest): DescriberPython3ScriptLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescriberPython3ScriptLogs', 'GET', '/', 'json', false, 'json', request);
}

model ModifyComponentAssetRequest {
  assetConfig: string(name='AssetConfig', position='Query'),
  lang?: string(name='Lang', example='zh', position='Query'),
}

model ModifyComponentAssetResponseBody = {
  requestId?: string(name='RequestId', example='1C5F11E9-464E-51F0-9296-43BB312A0557'),
}

model ModifyComponentAssetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyComponentAssetResponseBody(name='body'),
}

async function modifyComponentAsset(request: ModifyComponentAssetRequest): ModifyComponentAssetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyComponentAsset', 'POST', '/', 'json', false, 'json', request);
}

model ModifyPlaybookRequest {
  description?: string(name='Description', example='demo test task', position='Body'),
  displayName: string(name='DisplayName', example='aliyun_waf_test_playbook', position='Body'),
  lang?: string(name='Lang', example='zh', position='Body'),
  playbookUuid: string(name='PlaybookUuid', example='8baa6cff-319e-4ede-97bc-1586c35e61f8', position='Body'),
  taskflow?: string(name='Taskflow', example='<?xml version="1.0" encoding="UTF-8"?><bpmn:definitions xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" targetNamespace="http://bpmn.io/schema/bpmn" id="Definitions_1"><bpmn:process id="Process_1" isExecutable="false"><bpmn:startEvent id="StartEvent_1"/></bpmn:process><bpmndi:BPMNDiagram id="BPMNDiagram_1"><bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="Process_1"><bpmndi:BPMNShape id="_BPMNShape_StartEvent_2" bpmnElement="StartEvent_1"><dc:Bounds height="36.0" width="36.0" x="173.0" y="102.0"/></bpmndi:BPMNShape></bpmndi:BPMNPlane></bpmndi:BPMNDiagram></bpmn:definitions>', position='Body'),
}

model ModifyPlaybookResponseBody = {
  requestId?: string(name='RequestId', example='9B584F84-D66A-5525-8E7B-05612A903ABF'),
}

model ModifyPlaybookResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyPlaybookResponseBody(name='body'),
}

async function modifyPlaybook(request: ModifyPlaybookRequest): ModifyPlaybookResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyPlaybook', 'POST', '/', 'json', true, 'form', request);
}

model ModifyPlaybookInputOutputRequest {
  inputParams: string(name='InputParams', example='[
    {
        "typeName": "String",
        "dataClass": "normal",
        "dataType": "String",
        "description": "period",
        "example": "",
        "name": "period",
        "required": false
    }
]', position='Body'),
  lang?: string(name='Lang', example='zh', position='Body'),
  outputParams: string(name='OutputParams', example='[]', position='Body'),
  paramType?: string(name='ParamType', example='custom', position='Body'),
  playbookUuid: string(name='PlaybookUuid', example='8baa6cff-319e-4ede-97bc-xxxxxxx', position='Body'),
}

model ModifyPlaybookInputOutputResponseBody = {
  requestId?: string(name='RequestId', example='8DDC07CE-D41B-5142-8D91-469462719C77'),
}

model ModifyPlaybookInputOutputResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyPlaybookInputOutputResponseBody(name='body'),
}

async function modifyPlaybookInputOutput(request: ModifyPlaybookInputOutputRequest): ModifyPlaybookInputOutputResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyPlaybookInputOutput', 'POST', '/', 'json', true, 'form', request);
}

model ModifyPlaybookInstanceStatusRequest {
  active: int32(name='Active', example='1', position='Body'),
  lang?: string(name='Lang', example='zh', position='Query'),
  playbookUuid: string(name='PlaybookUuid', example='9fcd3829-80ff-4681-be1e-xxxxxxxx', position='Body'),
}

model ModifyPlaybookInstanceStatusResponseBody = {
  requestId?: string(name='RequestId', example='C2A32830-2842-5F8F-B4ED-E4783E400BBE'),
}

model ModifyPlaybookInstanceStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyPlaybookInstanceStatusResponseBody(name='body'),
}

async function modifyPlaybookInstanceStatus(request: ModifyPlaybookInstanceStatusRequest): ModifyPlaybookInstanceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyPlaybookInstanceStatus', 'POST', '/', 'json', true, 'form', request);
}

model PublishPlaybookRequest {
  description?: string(name='Description', example='This is a waf processing playbook', maxLength=128, position='Body'),
  playbookUuid: string(name='PlaybookUuid', example='ac343acc-1a61-4084-9a1c-xxxxxxx', position='Body'),
}

model PublishPlaybookResponseBody = {
  requestId?: string(name='RequestId', example='C513FCEA-D71F-5E50-ADC4-FCF8C5DCF6BF'),
}

model PublishPlaybookResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PublishPlaybookResponseBody(name='body'),
}

async function publishPlaybook(request: PublishPlaybookRequest): PublishPlaybookResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PublishPlaybook', 'POST', '/', 'json', true, 'form', request);
}

model QueryTreeDataRequest {
  lang?: string(name='Lang', example='zh', position='Query'),
}

model QueryTreeDataResponseBody = {
  playbooks?: string(name='Playbooks', example='[
    {
        "playbook": {
            "active": false,
            "displayName": "test_playbook",
            "playbookUuid": "09a20455-3d3a-424c-a1df-xxxxxx"
        }
    }
]'),
  requestId?: string(name='RequestId', example='EF2ECA2D-D8E6-5021-BF5C-19DD6D52C5B2'),
}

model QueryTreeDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTreeDataResponseBody(name='body'),
}

async function queryTreeData(request: QueryTreeDataRequest): QueryTreeDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTreeData', 'GET', '/', 'json', false, 'json', request);
}

model RenamePlaybookNodeRequest {
  lang?: string(name='Lang', example='zh', position='Query'),
  newNodeName: string(name='NewNodeName', example='waf_process', position='Query'),
  oldNodeName: string(name='OldNodeName', example='firewall_process', position='Query'),
  playbookUuid: string(name='PlaybookUuid', example='ac343acc-1a61-4084-9a1c-xxxxxxxx', position='Query'),
}

model RenamePlaybookNodeResponseBody = {
  renameResult?: string(name='RenameResult', example='waf_process'),
  requestId?: string(name='RequestId', example='1E1EC464-3BD7-518F-9937-BCC12E6855FE'),
}

model RenamePlaybookNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RenamePlaybookNodeResponseBody(name='body'),
}

async function renamePlaybookNode(request: RenamePlaybookNodeRequest): RenamePlaybookNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenamePlaybookNode', 'POST', '/', 'json', false, 'json', request);
}

model RevertPlaybookReleaseRequest {
  isPublish?: boolean(name='IsPublish', example='true', position='Body'),
  playReleaseId: int32(name='PlayReleaseId', example='3f97b56e-064e-47e7-a309-xxxxxxx', position='Body'),
  playbookUuid: string(name='PlaybookUuid', example='185295a1-c987-4b64-8796-xxxxxxxx', position='Body'),
}

model RevertPlaybookReleaseResponseBody = {
  requestId?: string(name='RequestId', example='B3FED5B9-190A-5952-93A4-24FBF0F0C573'),
}

model RevertPlaybookReleaseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RevertPlaybookReleaseResponseBody(name='body'),
}

async function revertPlaybookRelease(request: RevertPlaybookReleaseRequest): RevertPlaybookReleaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RevertPlaybookRelease', 'POST', '/', 'json', true, 'form', request);
}

model RunPython3ScriptRequest {
  nodeName?: string(name='NodeName', example='python3_3', position='Body'),
  params?: string(name='Params', example='{
    "input1": "xx.xx.xx.xx",
    "input2": "7d"
}', position='Body'),
  playbookUuid?: string(name='PlaybookUuid', example='8baa6cff-319e-4ede-97bc-xxxxxxx', position='Body'),
  pythonScript?: string(name='PythonScript', example='import logging
def execute (params):
  #ip = params[\\"ip\\"]
  #logging.info("enter execute,ip is "+ip)
  success=True
  message=\\"OK\\"
  data=[]
  return (success,message,data)', position='Body'),
}

model RunPython3ScriptResponseBody = {
  requestId?: string(name='RequestId', example='F210521C-D9BF-5264-8369-83EDDC617DB0'),
  runResult?: string(name='RunResult', example='{
    "requestUuid": "fe240b98-27b1-4a36-aec1-550b894318d9",
    "content": {
        "resultData": [],
        "success": true
    }
}'),
}

model RunPython3ScriptResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RunPython3ScriptResponseBody(name='body'),
}

async function runPython3Script(request: RunPython3ScriptRequest): RunPython3ScriptResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunPython3Script', 'POST', '/', 'json', true, 'form', request);
}

model TriggerPlaybookRequest {
  inputParam: string(name='InputParam', example='{
    "input1": "xx.xx.xx.xx",
    "input2": "7d"
}', position='Body'),
  playbookUuid: string(name='PlaybookUuid', example='2a687089-d4dd-47d4-9709-xxxxxxxx', position='Body'),
}

model TriggerPlaybookResponseBody = {
  requestId?: string(name='RequestId', example='BD5A8DB6-A42C-532B-BCE8-83E69550CD59'),
  triggerUuid?: string(name='TriggerUuid', example='55E63C57-D6C8-5036-A770-5CB10AC807AA'),
}

model TriggerPlaybookResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TriggerPlaybookResponseBody(name='body'),
}

async function triggerPlaybook(request: TriggerPlaybookRequest): TriggerPlaybookResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TriggerPlaybook', 'POST', '/', 'json', true, 'form', request);
}

model TriggerProcessTaskRequest {
  actionType: string(name='ActionType', example='remove', position='Query'),
  taskId: string(name='TaskId', example='15355xxxxxx82894882', position='Body'),
}

model TriggerProcessTaskResponseBody = {
  requestId?: string(name='RequestId', example='58A518BC-E4A8-5BD7-AFEA-366046ED9073'),
}

model TriggerProcessTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TriggerProcessTaskResponseBody(name='body'),
}

async function triggerProcessTask(request: TriggerProcessTaskRequest): TriggerProcessTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TriggerProcessTask', 'POST', '/', 'json', true, 'form', request);
}

model TriggerSophonPlaybookRequest {
  commandName?: string(name='CommandName', example='waf_process_command', position='Query'),
  inputParams: string(name='InputParams', example='{
    "param1": "xx.xx.xx.xx",
    "param2": "7d"
}', position='Query'),
  sophonTaskId?: string(name='SophonTaskId', example='f916b93e-e814-459f-9662-xxxxxxxxxx', position='Query'),
  triggerType?: string(name='TriggerType', example='playbook', position='Query'),
  uuid?: string(name='Uuid', example='f916b93e-e814-459f-9662-xxxxxxxxxx', position='Query'),
}

model TriggerSophonPlaybookResponseBody = {
  data?: {
    sophonTaskId?: string(name='SophonTaskId', example='a7c6d055-a72f-4676-bc89-3cd9edc0284c'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='0DFC9403-54EB-5672-B690-9AA93C9EBB54'),
}

model TriggerSophonPlaybookResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TriggerSophonPlaybookResponseBody(name='body'),
}

async function triggerSophonPlaybook(request: TriggerSophonPlaybookRequest): TriggerSophonPlaybookResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TriggerSophonPlaybook', 'POST', '/', 'json', false, 'json', request);
}

model VerifyPlaybookRequest {
  playbookUuid: string(name='PlaybookUuid', example='9fcd3829-80ff-4681-be1e-4d2662c35fed', position='Body'),
  taskFlow: string(name='TaskFlow', example='<?xml version="1.0" encoding="UTF-8"?><bpmn:definitions xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" targetNamespace="http://bpmn.io/schema/bpmn" id="Definitions_1"><bpmn:process id="Process_1" isExecutable="false"><bpmn:startEvent id="StartEvent_1"/></bpmn:process><bpmndi:BPMNDiagram id="BPMNDiagram_1"><bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="Process_1"><bpmndi:BPMNShape id="_BPMNShape_StartEvent_2" bpmnElement="StartEvent_1"><dc:Bounds height="36.0" width="36.0" x="173.0" y="102.0"/></bpmndi:BPMNShape></bpmndi:BPMNPlane></bpmndi:BPMNDiagram></bpmn:definitions>', position='Body'),
}

model VerifyPlaybookResponseBody = {
  checkTaskInfos?: [ 
    {
      detail?: string(name='Detail', example='Node [python3_3] doesn\\"t have the asset information'),
      nodeName?: string(name='NodeName', example='python3_3'),
      riskLevel?: string(name='RiskLevel', example='error'),
    }
  ](name='CheckTaskInfos'),
  requestId?: string(name='RequestId', example='0DFC9403-54EB-5672-B690-9AA93C9EBB54'),
}

model VerifyPlaybookResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: VerifyPlaybookResponseBody(name='body'),
}

async function verifyPlaybook(request: VerifyPlaybookRequest): VerifyPlaybookResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VerifyPlaybook', 'POST', '/', 'json', true, 'form', request);
}

model VerifyPythonFileRequest {
  content: string(name='Content', example='import logging
def execute (params):
  success=True
  message=\\"OK\\"
  data=[]
  return (success,message,data)', position='Body'),
}

model VerifyPythonFileResponseBody = {
  requestId?: string(name='RequestId', example='F72685FB-A6E6-5A9A-97F7-6DC1056E63CE'),
  syntax?: [ 
    {
      endColumn?: int32(name='EndColumn', example='5'),
      endLineNumber?: int32(name='EndLineNumber', example='5'),
      message?: string(name='Message', example='undefined name \\"ab\\"'),
      severity?: int32(name='Severity', example='4'),
      startColumn?: int32(name='StartColumn', example='2'),
      startLineNumber?: int32(name='StartLineNumber', example='2'),
    }
  ](name='Syntax'),
}

model VerifyPythonFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: VerifyPythonFileResponseBody(name='body'),
}

async function verifyPythonFile(request: VerifyPythonFileRequest): VerifyPythonFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VerifyPythonFile', 'POST', '/', 'json', true, 'form', request);
}

