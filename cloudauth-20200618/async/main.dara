/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Cloudauth';
  @version = '2020-06-18';
  @endpointRule = 'central';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model DescribeSmartVerifyRequest {
  regionId?: string(name='RegionId', position='Host'),
  certifyId?: string(name='CertifyId', example='91707dc296d469ad38e4c5efa6a0xxxx', position='Body'),
  pictureReturnType?: string(name='PictureReturnType', position='Body'),
  sceneId?: long(name='SceneId', example='100000xxxx', position='Body'),
}

model DescribeSmartVerifyResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='130A2C10-B9EE-4D84-88E3-5384FF039795'),
  resultObject?: {
    materialInfo?: string(name='MaterialInfo', example='{"riskInfo": { "score": 35,"tags": "rm0114"} }'),
    passed?: string(name='Passed', example='T'),
    passedScore?: float(name='PassedScore', example='80.2'),
    subCode?: string(name='SubCode', example='200'),
  }(name='ResultObject'),
}

model DescribeSmartVerifyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSmartVerifyResponseBody(name='body'),
}

async function describeSmartVerify(request: DescribeSmartVerifyRequest): DescribeSmartVerifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSmartVerify', 'POST', '/', 'json', true, 'form', request);
}

model DescribeSmsDetailRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizId?: string(name='BizId', example='qwer^xxxxx', position='Body'),
  currentPage: int32(name='CurrentPage', example='1', minimum=1, maximum=2147483647, position='Body'),
  errorCode?: string(name='ErrorCode', example='SP_UNKNOWN_ERROR', position='Body'),
  mobile?: string(name='Mobile', example='150000xxxx', position='Body'),
  outerOrderNo?: string(name='OuterOrderNo', example='qwertyuiopasdfghjklzxcvbnmqxxxx', position='Body'),
  pageSize: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Body'),
  sendDate: string(name='SendDate', example='20210428', position='Body'),
  sendStatus?: string(name='SendStatus', example='FAILED', position='Body'),
  signName?: string(name='SignName', position='Body'),
  templateCode?: string(name='TemplateCode', example='SMS_0000', position='Body'),
}

model DescribeSmsDetailResponseBody = {
  code?: string(name='Code', example='200'),
  currentPage?: int32(name='CurrentPage', example='1'),
  items?: [ 
    {
      bizId?: string(name='BizId', example='qwer^xxxxxxxx'),
      content?: string(name='Content'),
      errorCode?: string(name='ErrorCode', example='DELIVERED'),
      errorMessage?: string(name='ErrorMessage'),
      mobile?: string(name='Mobile', example='1500000xxxx'),
      outerOrderNo?: string(name='OuterOrderNo', example='qwertyuiopasdfghjklzxcvbnmqxxxx'),
      receiveDate?: string(name='ReceiveDate', example='2021-04-28 12:00:00'),
      sendDate?: string(name='SendDate', example='2021-04-28 12:00:00'),
      sendStatus?: string(name='SendStatus', example='SUCCESS'),
      signName?: string(name='SignName'),
      smsSize?: int32(name='SmsSize', example='1'),
      taskDate?: string(name='TaskDate', example='2021-04-28 12:00:00'),
      templateCode?: string(name='TemplateCode', example='SMS_0000'),
    }
  ](name='Items'),
  message?: string(name='Message', example='success'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='5A6229C0-E156-48E4-B6EC-0F528BDF60D2'),
  totalItem?: int32(name='TotalItem', example='1'),
  totalPage?: int32(name='TotalPage', example='1'),
}

model DescribeSmsDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSmsDetailResponseBody(name='body'),
}

async function describeSmsDetail(request: DescribeSmsDetailRequest): DescribeSmsDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSmsDetail', 'POST', '/', 'json', true, 'form', request);
}

model InitSmartVerifyRequest {
  regionId?: string(name='RegionId', position='Host'),
  callbackToken?: string(name='CallbackToken', example='NMjvQanQgplBSaEI0sL86WnQplB', position='Body'),
  callbackUrl?: string(name='CallbackUrl', example='https://www.aliyun.com', position='Body'),
  certName?: string(name='CertName', position='Body'),
  certNo?: string(name='CertNo', example='330103xxxxxxxxxxxx', position='Body'),
  certType?: string(name='CertType', example='IDENTITY_CARD', position='Body'),
  certifyId?: string(name='CertifyId', position='Body'),
  facePictureBase64?: string(name='FacePictureBase64', position='Body'),
  facePictureUrl?: string(name='FacePictureUrl', position='Body'),
  idName?: string(name='IdName', position='Body'),
  idNo?: string(name='IdNo', position='Body'),
  ip?: string(name='Ip', example='114.xxx.xxx.xxx', position='Body'),
  metaInfo?: string(name='MetaInfo', example='{"zimVer":"3.0.0","appVersion": "1","bioMetaInfo": "4.1.0:11501568,0","appName": "com.aliyun.antcloudauth","deviceType":"ios","osVersion": "iOS 10.3.2","apdidToken": "","deviceModel": "iPhone9,1"}', position='Body'),
  mobile?: string(name='Mobile', example='130xxxxxxxx', position='Body'),
  mode?: string(name='Mode', example='ACCOUNT_SAFE', position='Body'),
  ocr?: string(name='Ocr', position='Body'),
  ossBucketName?: string(name='OssBucketName', position='Body'),
  ossObjectName?: string(name='OssObjectName', position='Body'),
  outerOrderNo?: string(name='OuterOrderNo', example='e0c34a77f5ac40a5aa5e6ed20c35xxxx', position='Body'),
  sceneId?: long(name='SceneId', example='100000xxxx', position='Body'),
  userId?: string(name='UserId', example='12345xxxx', position='Body'),
}

model InitSmartVerifyResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0F591A7A-98B7-58D8-B9AC-3D71703AEE57'),
  resultObject?: {
    certifyId?: string(name='CertifyId', example='91707dc296d469ad38e4c5efa6a0xxxx'),
  }(name='ResultObject'),
}

model InitSmartVerifyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InitSmartVerifyResponseBody(name='body'),
}

async function initSmartVerify(request: InitSmartVerifyRequest): InitSmartVerifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InitSmartVerify', 'POST', '/', 'json', true, 'form', request);
}

model SendSmsRequest {
  regionId?: string(name='RegionId', position='Host'),
  mobile: string(name='Mobile', example='861500000****', position='Body'),
  outerOrderNo?: string(name='OuterOrderNo', example='abcdefghfdfsdffafdaqwertyuioxxxx', position='Body'),
  signName: string(name='SignName', position='Body'),
  templateCode: string(name='TemplateCode', example='SMS_0000', position='Body'),
  templateParam?: string(name='TemplateParam', position='Body'),
}

model SendSmsResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='130A2C10-B9EE-4D84-88E3-5384FF039795'),
  resultObject?: {
    bizId?: string(name='BizId', example='123456^1234567'),
  }(name='ResultObject'),
}

model SendSmsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SendSmsResponseBody(name='body'),
}

async function sendSms(request: SendSmsRequest): SendSmsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendSms', 'POST', '/', 'json', true, 'form', request);
}

