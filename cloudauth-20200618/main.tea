/**
 *
 */
import Util;
import OSS;
import RPC;
import OpenPlatform;
import OSSUtil;
import FileForm;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  

  checkConfig(config);
  @endpoint = getEndpoint('cloudauth', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model ContrastSmartVerifyRequest {
  sceneId?: long(name='SceneId'),
  outerOrderNo?: string(name='OuterOrderNo'),
  mode?: string(name='Mode'),
  certType?: string(name='CertType'),
  mobile?: string(name='Mobile'),
  ip?: string(name='Ip'),
  userId?: string(name='UserId'),
  certName?: string(name='CertName'),
  certNo?: string(name='CertNo'),
  facePicFile?: string(name='FacePicFile'),
  facePicUrl?: string(name='FacePicUrl'),
  facePicString?: string(name='FacePicString'),
}

model ContrastSmartVerifyAdvanceRequest {
  facePicFileObject: readable(name='FacePicFileObject'),
  sceneId?: long(name='SceneId'),
  outerOrderNo?: string(name='OuterOrderNo'),
  mode?: string(name='Mode'),
  certType?: string(name='CertType'),
  mobile?: string(name='Mobile'),
  ip?: string(name='Ip'),
  userId?: string(name='UserId'),
  certName?: string(name='CertName'),
  certNo?: string(name='CertNo'),
  facePicUrl?: string(name='FacePicUrl'),
  facePicString?: string(name='FacePicString'),
}

model ContrastSmartVerifyResponseBody = {
  resultObject?: {
    verifyInfo?: string(name='VerifyInfo'),
    subCode?: string(name='SubCode'),
    certifyId?: string(name='CertifyId'),
    riskInfo?: string(name='RiskInfo'),
    passed?: string(name='Passed'),
  }(name='ResultObject'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
}

model ContrastSmartVerifyResponse = {
  headers: map[string]string(name='headers'),
  body: ContrastSmartVerifyResponseBody(name='body'),
}

async function contrastSmartVerifyWithOptions(request: ContrastSmartVerifyRequest, runtime: Util.RuntimeOptions): ContrastSmartVerifyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ContrastSmartVerify',
    version = '2020-06-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function contrastSmartVerify(request: ContrastSmartVerifyRequest): ContrastSmartVerifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return contrastSmartVerifyWithOptions(request, runtime);
}

async function contrastSmartVerifyAdvance(request: ContrastSmartVerifyAdvanceRequest, runtime: Util.RuntimeOptions): ContrastSmartVerifyResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'Cloudauth',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var contrastSmartVerifyReq = new ContrastSmartVerifyRequest{};
  OpenApiUtil.convert(request, contrastSmartVerifyReq);

  authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  ossConfig.accessKeyId = authResponse.accessKeyId;
  ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
  ossClient = new OSS(ossConfig);

  fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.facePicFileObject,
    contentType = '',
  };
  ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  ossClient.postObject(uploadRequest, ossRuntime);
  contrastSmartVerifyReq.facePicFile = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var contrastSmartVerifyResp = contrastSmartVerifyWithOptions(contrastSmartVerifyReq, runtime);
  return contrastSmartVerifyResp;
}

model DescribeSmartVerifyRequest {
  sceneId?: long(name='SceneId'),
  certifyId?: string(name='CertifyId'),
  pictureReturnType?: string(name='PictureReturnType'),
}

model DescribeSmartVerifyResponseBody = {
  resultObject?: {
    passedScore?: float(name='PassedScore'),
    materialInfo?: string(name='MaterialInfo'),
    subCode?: string(name='SubCode'),
    passed?: string(name='Passed'),
  }(name='ResultObject'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
}

model DescribeSmartVerifyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSmartVerifyResponseBody(name='body'),
}

async function describeSmartVerifyWithOptions(request: DescribeSmartVerifyRequest, runtime: Util.RuntimeOptions): DescribeSmartVerifyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSmartVerify',
    version = '2020-06-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSmartVerify(request: DescribeSmartVerifyRequest): DescribeSmartVerifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSmartVerifyWithOptions(request, runtime);
}

model ElementSmartVerifyRequest {
  sceneId?: long(name='SceneId'),
  outerOrderNo?: string(name='OuterOrderNo'),
  mode?: string(name='Mode'),
  certType?: string(name='CertType'),
  certName?: string(name='CertName'),
  certNo?: string(name='CertNo'),
  certUrl?: string(name='CertUrl'),
  certFile?: string(name='CertFile'),
}

model ElementSmartVerifyAdvanceRequest {
  certFileObject: readable(name='CertFileObject'),
  sceneId?: long(name='SceneId'),
  outerOrderNo?: string(name='OuterOrderNo'),
  mode?: string(name='Mode'),
  certType?: string(name='CertType'),
  certName?: string(name='CertName'),
  certNo?: string(name='CertNo'),
  certUrl?: string(name='CertUrl'),
}

model ElementSmartVerifyResponseBody = {
  resultObject?: {
    materialInfo?: string(name='MaterialInfo'),
    subCode?: string(name='SubCode'),
    passed?: string(name='Passed'),
  }(name='ResultObject'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
}

model ElementSmartVerifyResponse = {
  headers: map[string]string(name='headers'),
  body: ElementSmartVerifyResponseBody(name='body'),
}

async function elementSmartVerifyWithOptions(request: ElementSmartVerifyRequest, runtime: Util.RuntimeOptions): ElementSmartVerifyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ElementSmartVerify',
    version = '2020-06-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function elementSmartVerify(request: ElementSmartVerifyRequest): ElementSmartVerifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return elementSmartVerifyWithOptions(request, runtime);
}

async function elementSmartVerifyAdvance(request: ElementSmartVerifyAdvanceRequest, runtime: Util.RuntimeOptions): ElementSmartVerifyResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'Cloudauth',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var elementSmartVerifyReq = new ElementSmartVerifyRequest{};
  OpenApiUtil.convert(request, elementSmartVerifyReq);

  authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  ossConfig.accessKeyId = authResponse.accessKeyId;
  ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
  ossClient = new OSS(ossConfig);

  fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.certFileObject,
    contentType = '',
  };
  ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  ossClient.postObject(uploadRequest, ossRuntime);
  elementSmartVerifyReq.certFile = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var elementSmartVerifyResp = elementSmartVerifyWithOptions(elementSmartVerifyReq, runtime);
  return elementSmartVerifyResp;
}

model InitSmartVerifyRequest {
  sceneId?: long(name='SceneId'),
  outerOrderNo?: string(name='OuterOrderNo'),
  mode?: string(name='Mode'),
  certType?: string(name='CertType'),
  metaInfo?: string(name='MetaInfo'),
  mobile?: string(name='Mobile'),
  ip?: string(name='Ip'),
  userId?: string(name='UserId'),
  certName?: string(name='CertName'),
  certNo?: string(name='CertNo'),
  ocr?: string(name='Ocr'),
  callbackUrl?: string(name='CallbackUrl'),
  callbackToken?: string(name='CallbackToken'),
  facePictureBase64?: string(name='FacePictureBase64'),
  facePictureUrl?: string(name='FacePictureUrl'),
  certifyId?: string(name='CertifyId'),
  ossBucketName?: string(name='OssBucketName'),
  ossObjectName?: string(name='OssObjectName'),
}

model InitSmartVerifyResponseBody = {
  resultObject?: {
    certifyId?: string(name='CertifyId'),
  }(name='ResultObject'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
}

model InitSmartVerifyResponse = {
  headers: map[string]string(name='headers'),
  body: InitSmartVerifyResponseBody(name='body'),
}

async function initSmartVerifyWithOptions(request: InitSmartVerifyRequest, runtime: Util.RuntimeOptions): InitSmartVerifyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'InitSmartVerify',
    version = '2020-06-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function initSmartVerify(request: InitSmartVerifyRequest): InitSmartVerifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return initSmartVerifyWithOptions(request, runtime);
}

