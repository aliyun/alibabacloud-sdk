/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('ddosdiversion', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model ConfigNetStatusRequest {
  net?: string(name='Net', example='192.168.XX.XX/22'),
  regions?: [ string ](name='Regions'),
  saleId?: string(name='SaleId', example='ddos_diversion_public_cn-xxxxxxxxxxxxx'),
  status?: string(name='Status', example='enable'),
  subNets?: [ string ](name='SubNets'),
}

model ConfigNetStatusResponseBody = {
  code?: long(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='B0949F09-B9C1-1D5E-8F27-0A5BF3CD5D95'),
}

model ConfigNetStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConfigNetStatusResponseBody(name='body'),
}

async function configNetStatusWithOptions(request: ConfigNetStatusRequest, runtime: Util.RuntimeOptions): ConfigNetStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.net)) {
    query['Net'] = request.net;
  }
  if (!Util.isUnset(request.regions)) {
    query['Regions'] = request.regions;
  }
  if (!Util.isUnset(request.saleId)) {
    query['SaleId'] = request.saleId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.subNets)) {
    query['SubNets'] = request.subNets;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ConfigNetStatus',
    version = '2023-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function configNetStatus(request: ConfigNetStatusRequest): ConfigNetStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return configNetStatusWithOptions(request, runtime);
}

model ListInstanceRequest {
  name?: string(name='Name'),
  num?: long(name='Num', example='100'),
  page?: long(name='Page', example='1'),
  saleId?: string(name='SaleId', example='ddos_diversion_public_cn-xxxxxxxxxxxxx'),
  status?: string(name='Status', example='normal'),
}

model ListInstanceResponseBody = {
  code?: long(name='Code', example='200'),
  data?: [ 
    {
      instances?: [ 
        {
          comment?: string(name='Comment'),
          gmtCreate?: string(name='GmtCreate', example='2022-12-15 11:10:42'),
          gmtExpire?: string(name='GmtExpire', example='2023-02-23 00:00:00'),
          gmtModify?: string(name='GmtModify', example='2022-12-15 11:10:42'),
          instanceId?: string(name='InstanceId', example='ddos_diversion_public_cn-xxxxxxxxxxxxx_xxxxxx'),
          message?: string(name='Message', example='successful'),
          name?: string(name='Name'),
          saleId?: string(name='SaleId', example='ddos_diversion_public_cn-xxxxxxxxxxxxx'),
          spec?: {
            coverage?: string(name='Coverage', example='international_and_hmt'),
            diversionType?: string(name='DiversionType', example='on-demand'),
            edition?: string(name='Edition', example='enterprise'),
            idcNumbers?: string(name='IdcNumbers', example='1'),
            initialInstallation?: string(name='InitialInstallation', example='gre_tunnel_by_pccw'),
            initialQty?: string(name='InitialQty', example='1'),
            ipSubnetNums?: string(name='IpSubnetNums', example='1'),
            mitigationAnalysis?: string(name='MitigationAnalysis', example='off'),
            mitigationAnalysisCapacity?: string(name='MitigationAnalysisCapacity', example='3T'),
            mitigationCapacity?: string(name='MitigationCapacity', example='unlimited'),
            mitigationNums?: string(name='MitigationNums', example='unlimited'),
            normalBandwidth?: string(name='NormalBandwidth', example='100'),
          }(name='Spec'),
          status?: string(name='Status', example='normal'),
          userId?: string(name='UserId', example='177xxxxxxxxxxxxx'),
        }
      ](name='Instances'),
      num?: long(name='Num', example='100'),
      page?: long(name='Page', example='1'),
      total?: long(name='Total', example='10'),
    }
  ](name='Data'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='B0949F09-B9C1-1D5E-8F27-0A5BF3CD5D95'),
}

model ListInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstanceResponseBody(name='body'),
}

async function listInstanceWithOptions(request: ListInstanceRequest, runtime: Util.RuntimeOptions): ListInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.num)) {
    query['Num'] = request.num;
  }
  if (!Util.isUnset(request.page)) {
    query['Page'] = request.page;
  }
  if (!Util.isUnset(request.saleId)) {
    query['SaleId'] = request.saleId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListInstance',
    version = '2023-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listInstance(request: ListInstanceRequest): ListInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInstanceWithOptions(request, runtime);
}

model QueryNetListRequest {
  mainNet?: string(name='MainNet', example='192.168.XX.XX/22'),
  mode?: string(name='Mode', example='netflow-auto'),
  net?: string(name='Net', example='192.168.XX.XX/24'),
  num?: long(name='Num', example='100'),
  page?: long(name='Page', example='1'),
  saleId?: string(name='SaleId', example='ddos_diversion_public_cn-xxxxxxxxxxxxx'),
}

model QueryNetListResponseBody = {
  code?: long(name='Code', example='200'),
  data?: [ 
    {
      nets?: [ 
        {
          DDoSDefense?: {
            cleanTh?: {
              mbps?: int32(name='Mbps', description='Mbps。', example='0'),
              pps?: int32(name='Pps', description='Pps。', example='0'),
            }(name='CleanTh'),
            djPolicy?: {
              policyName?: string(name='PolicyName', example='test_polilciy-xxx'),
            }(name='DjPolicy'),
            holeTh?: {
              threshMbps?: int32(name='ThreshMbps', example='0'),
            }(name='HoleTh'),
          }(name='DDoSDefense'),
          declared?: [ 
            {
              declared?: string(name='Declared', example='0'),
              region?: string(name='Region', example='oe26'),
            }
          ](name='Declared'),
          declaredState?: int32(name='DeclaredState', example='1'),
          fwdEffect?: long(name='FwdEffect', example='1'),
          gmtCreate?: string(name='GmtCreate', example='2023-02-23 00:00:00'),
          gmtModify?: string(name='GmtModify', example='2023-02-24 00:00:00'),
          mode?: string(name='Mode', example='manual'),
          net?: string(name='Net', example='192.168.XX.XX/24'),
          netExtend?: long(name='NetExtend', example='1'),
          netMain?: string(name='NetMain', example='192.168.XX.XX/22'),
          netType?: string(name='NetType', example='ipv4'),
          saleId?: string(name='SaleId', example='ddos_diversion_public_cn-xxxxxxxxxxxxx'),
          upstreamType?: string(name='UpstreamType', example='aliyun_line'),
          userId?: string(name='UserId', example='177xxxxxxxxxxxxx'),
        }
      ](name='Nets'),
      num?: long(name='Num', example='100'),
      page?: long(name='Page', example='1'),
      total?: long(name='Total', example='1'),
    }
  ](name='Data'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='24B652B5-AEFF-3F03-9114-00D053C42277'),
}

model QueryNetListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryNetListResponseBody(name='body'),
}

async function queryNetListWithOptions(request: QueryNetListRequest, runtime: Util.RuntimeOptions): QueryNetListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.mainNet)) {
    query['MainNet'] = request.mainNet;
  }
  if (!Util.isUnset(request.mode)) {
    query['Mode'] = request.mode;
  }
  if (!Util.isUnset(request.net)) {
    query['Net'] = request.net;
  }
  if (!Util.isUnset(request.num)) {
    query['Num'] = request.num;
  }
  if (!Util.isUnset(request.page)) {
    query['Page'] = request.page;
  }
  if (!Util.isUnset(request.saleId)) {
    query['SaleId'] = request.saleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryNetList',
    version = '2023-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryNetList(request: QueryNetListRequest): QueryNetListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryNetListWithOptions(request, runtime);
}

