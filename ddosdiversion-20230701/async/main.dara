/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'DdosDiversion';
  @version = '2023-07-01';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ConfigNetStatusRequest {
  net: string(name='Net', description='The CIDR block of the anti-DDoS diversion instance.', example='192.168.XX.XX/22', position='Query'),
  regions?: [ string ](name='Regions', description='The regions in which the CIDR block needs to be advertised or withdrawn from advertising. If you leave this parameter empty, the CIDR blocks in all regions are configured.

>  You can call the [QueryNetList](~~2639086~~) operation to obtain the regions of the CIDR blocks.', position='Query'),
  saleId: string(name='SaleId', description='The ID of the anti-DDoS diversion instance.', example='ddos_diversion_public_cn-xxxxxxxxxxxxx', position='Query'),
  status: string(name='Status', description='The status of the CIDR block. Valid values:

*   enable: advertises the CIDR block.
*   disable: withdraws the advertising of the CIDR block.', example='enable', position='Query'),
  subNets?: [ string ](name='SubNets', description='The subnet CIDR blocks of the CIDR block.', position='Query'),
}

model ConfigNetStatusResponseBody = {
  code?: long(name='Code', description='The status code.

*   **200**: The request was successful.
*   Other codes: The request failed.', example='200'),
  message?: string(name='Message', description='The response parameters.', example='successful'),
  requestId?: string(name='RequestId', description='The request ID.', example='B0949F09-B9C1-1D5E-8F27-0A5BF3CD5D95'),
}

model ConfigNetStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigNetStatusResponseBody(name='body'),
}

async function configNetStatus(request: ConfigNetStatusRequest): ConfigNetStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigNetStatus', 'POST', '/', 'json', false, 'json', request);
}

model ListInstanceRequest {
  name?: string(name='Name', description='The name of the instance.', position='Query'),
  num?: long(name='Num', description='The number of entries per page. Default value: 100.', example='100', position='Query'),
  page?: long(name='Page', description='The page number. Default value: 1', example='1', position='Query'),
  saleId?: string(name='SaleId', description='The ID of the anti-DDoS diversion instance.', example='ddos_diversion_public_cn-xxxxxxxxxxxxx', position='Query'),
  status?: string(name='Status', description='The status of the instance. Valid values:

*   normal
*   expired
*   deleting
*   stopped', example='normal', position='Query'),
}

model ListInstanceResponseBody = {
  code?: long(name='Code', description='The status code.

*   **200**: The request was successful.
*   Other codes: The request failed.', example='200'),
  data?: {
    instances?: [ 
      {
        comment?: string(name='Comment'),
        gmtCreate?: string(name='GmtCreate'),
        gmtExpire?: string(name='GmtExpire'),
        gmtModify?: string(name='GmtModify'),
        instanceId?: string(name='InstanceId'),
        message?: string(name='Message'),
        name?: string(name='Name'),
        saleId?: string(name='SaleId'),
        spec?: {
          coverage?: string(name='Coverage'),
          diversionType?: string(name='DiversionType'),
          edition?: string(name='Edition'),
          idcNumbers?: string(name='IdcNumbers'),
          initialInstallation?: string(name='InitialInstallation'),
          initialQty?: string(name='InitialQty'),
          ipSubnetNums?: string(name='IpSubnetNums'),
          mitigationAnalysis?: string(name='MitigationAnalysis'),
          mitigationAnalysisCapacity?: string(name='MitigationAnalysisCapacity'),
          mitigationCapacity?: string(name='MitigationCapacity'),
          mitigationNums?: string(name='MitigationNums'),
          normalBandwidth?: string(name='NormalBandwidth'),
        }(name='Spec'),
        status?: string(name='Status'),
        userId?: string(name='UserId'),
      }
    ](name='Instances'),
    num?: long(name='Num'),
    page?: long(name='Page'),
    total?: long(name='Total'),
  }(name='Data', description='The returned result.'),
  message?: string(name='Message', description='The response parameters.', example='successful'),
  requestId?: string(name='RequestId', description='The request ID.', example='B0949F09-B9C1-1D5E-8F27-0A5BF3CD5D95'),
}

model ListInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstanceResponseBody(name='body'),
}

async function listInstance(request: ListInstanceRequest): ListInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstance', 'POST', '/', 'json', false, 'json', request);
}

model QueryNetListRequest {
  mainNet?: string(name='MainNet', description='The primary CIDR block of the anti-DDoS diversion instance for which an extended CIDR block is configured. If no extended CIDR blocks are configured for the anti-DDoS diversion instance, leave this parameter empty.', example='192.168.XX.XX/22', position='Query'),
  mode?: string(name='Mode', description='The scheduling mode. Valid values:

*   manual: manual scheduling
*   netflow-auto: automatic scheduling', example='netflow-auto', position='Query'),
  net?: string(name='Net', description='The CIDR block of the anti-DDoS diversion instance.

>  If no extended CIDR blocks are configured for the anti-DDoS diversion instance, this parameter specifies the CIDR block of the instance. If an extended CIDR block is configured for the anti-DDoS diversion instance, this parameter specifies the extended CIDR block that is configured for the instance. If this parameter is specified, the MainNet parameter is required.', example='192.168.XX.XX/24', position='Query'),
  num?: long(name='Num', description='The number of entries per page. Default value: 100.', example='100', position='Query'),
  page?: long(name='Page', description='The page number. Default value: 1', example='1', position='Query'),
  saleId?: string(name='SaleId', description='The ID of the anti-DDoS diversion instance.', example='ddos_diversion_public_cn-xxxxxxxxxxxxx', position='Query'),
}

model QueryNetListResponseBody = {
  code?: long(name='Code', description='The status code.

*   **200**: The request was successful.
*   Other codes: The request failed.', example='200'),
  data?: {
    nets?: [ 
      {
        dDoSDefense?: {
          cleanTh?: {
            mbps?: int32(name='Mbps'),
            pps?: int32(name='Pps'),
          }(name='CleanTh'),
          djPolicy?: {
            policyName?: string(name='PolicyName'),
          }(name='DjPolicy'),
          holeTh?: {
            threshMbps?: int32(name='ThreshMbps'),
          }(name='HoleTh'),
        }(name='DDoSDefense'),
        declared?: [ 
          {
            declared?: string(name='Declared'),
            region?: string(name='Region'),
          }
        ](name='Declared'),
        declaredState?: int32(name='DeclaredState'),
        fwdEffect?: long(name='FwdEffect'),
        gmtCreate?: string(name='GmtCreate'),
        gmtModify?: string(name='GmtModify'),
        mode?: string(name='Mode'),
        net?: string(name='Net'),
        netExtend?: string(name='NetExtend'),
        netMain?: long(name='NetMain'),
        netType?: string(name='NetType'),
        saleId?: string(name='SaleId'),
        upstreamType?: string(name='UpstreamType'),
        userId?: string(name='UserId'),
      }
    ](name='Nets'),
    num?: long(name='Num'),
    page?: long(name='Page'),
    total?: long(name='Total'),
  }(name='Data', description='The CIDR blocks.'),
  message?: string(name='Message', description='The response parameters.', example='successful'),
  requestId?: string(name='RequestId', description='The request ID.', example='24B652B5-AEFF-3F03-9114-00D053C42277'),
}

model QueryNetListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryNetListResponseBody(name='body'),
}

async function queryNetList(request: QueryNetListRequest): QueryNetListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryNetList', 'POST', '/', 'json', false, 'json', request);
}

