/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'DdosDiversion';
  @version = '2023-07-01';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ConfigNetStatusRequest {
  net: string(name='Net', example='192.168.XX.XX/22', position='Query'),
  regions?: [ string ](name='Regions', position='Query'),
  saleId: string(name='SaleId', example='ddos_diversion_public_cn-xxxxxxxxxxxxx', position='Query'),
  status: string(name='Status', example='enable', position='Query'),
  subNets?: [ string ](name='SubNets', position='Query'),
}

model ConfigNetStatusResponseBody = {
  code?: long(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='B0949F09-B9C1-1D5E-8F27-0A5BF3CD5D95'),
}

model ConfigNetStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigNetStatusResponseBody(name='body'),
}

async function configNetStatus(request: ConfigNetStatusRequest): ConfigNetStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigNetStatus', 'POST', '/', 'json', false, 'json', request);
}

model ListInstanceRequest {
  name?: string(name='Name', position='Query'),
  num?: long(name='Num', example='100', position='Query'),
  page?: long(name='Page', example='1', position='Query'),
  saleId?: string(name='SaleId', example='ddos_diversion_public_cn-xxxxxxxxxxxxx', position='Query'),
  status?: string(name='Status', example='normal', position='Query'),
}

model ListInstanceResponseBody = {
  code?: long(name='Code', example='200'),
  data?: [ 
    {
      instances?: [ 
        {
          comment?: string(name='Comment'),
          gmtCreate?: string(name='GmtCreate', example='2022-12-15 11:10:42'),
          gmtExpire?: string(name='GmtExpire', example='2023-02-23 00:00:00'),
          gmtModify?: string(name='GmtModify', example='2022-12-15 11:10:42'),
          instanceId?: string(name='InstanceId', example='ddos_diversion_public_cn-xxxxxxxxxxxxx_xxxxxx'),
          message?: string(name='Message', example='successful'),
          name?: string(name='Name'),
          saleId?: string(name='SaleId', example='ddos_diversion_public_cn-xxxxxxxxxxxxx'),
          spec?: {
            coverage?: string(name='Coverage', example='international_and_hmt'),
            diversionType?: string(name='DiversionType', example='on-demand'),
            edition?: string(name='Edition', example='enterprise'),
            idcNumbers?: string(name='IdcNumbers', example='1'),
            initialInstallation?: string(name='InitialInstallation', example='gre_tunnel_by_pccw'),
            initialQty?: string(name='InitialQty', example='1'),
            ipSubnetNums?: string(name='IpSubnetNums', example='1'),
            mitigationAnalysis?: string(name='MitigationAnalysis', example='off'),
            mitigationAnalysisCapacity?: string(name='MitigationAnalysisCapacity', example='3T'),
            mitigationCapacity?: string(name='MitigationCapacity', example='unlimited'),
            mitigationNums?: string(name='MitigationNums', example='unlimited'),
            normalBandwidth?: string(name='NormalBandwidth', example='100'),
          }(name='Spec'),
          status?: string(name='Status', example='normal'),
          userId?: string(name='UserId', example='177xxxxxxxxxxxxx'),
        }
      ](name='Instances'),
      num?: long(name='Num', example='100'),
      page?: long(name='Page', example='1'),
      total?: long(name='Total', example='10'),
    }
  ](name='Data'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='B0949F09-B9C1-1D5E-8F27-0A5BF3CD5D95'),
}

model ListInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ListInstanceResponseBody(name='body'),
}

async function listInstance(request: ListInstanceRequest): ListInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstance', 'POST', '/', 'json', false, 'json', request);
}

model QueryNetListRequest {
  mainNet?: string(name='MainNet', example='192.168.XX.XX/22', position='Query'),
  mode?: string(name='Mode', example='netflow-auto', position='Query'),
  net?: string(name='Net', example='192.168.XX.XX/24', position='Query'),
  num?: long(name='Num', example='100', position='Query'),
  page?: long(name='Page', example='1', position='Query'),
  saleId: string(name='SaleId', example='ddos_diversion_public_cn-xxxxxxxxxxxxx', position='Query'),
}

model QueryNetListResponseBody = {
  code?: long(name='Code', example='200'),
  data?: [ 
    {
      nets?: [ 
        {
          dDoSDefense?: {
            cleanTh?: {
              mbps?: int32(name='Mbps', description='Mbps。', example='0'),
              pps?: int32(name='Pps', description='Pps。', example='0'),
            }(name='CleanTh'),
            djPolicy?: {
              policyName?: string(name='PolicyName', example='test_polilciy-xxx'),
            }(name='DjPolicy'),
            holeTh?: {
              threshMbps?: int32(name='ThreshMbps', example='0'),
            }(name='HoleTh'),
          }(name='DDoSDefense'),
          declared?: [ 
            {
              declared?: string(name='Declared', example='0'),
              region?: string(name='Region', example='oe26'),
            }
          ](name='Declared'),
          declaredState?: int32(name='DeclaredState', example='1'),
          fwdEffect?: long(name='FwdEffect', example='1'),
          gmtCreate?: string(name='GmtCreate', example='2023-02-23 00:00:00'),
          gmtModify?: string(name='GmtModify', example='2023-02-24 00:00:00'),
          mode?: string(name='Mode', example='manual'),
          net?: string(name='Net', example='192.168.XX.XX/24'),
          netExtend?: long(name='NetExtend', example='1'),
          netMain?: string(name='NetMain', example='192.168.XX.XX/22'),
          netType?: string(name='NetType', example='ipv4'),
          saleId?: string(name='SaleId', example='ddos_diversion_public_cn-xxxxxxxxxxxxx'),
          upstreamType?: string(name='UpstreamType', example='aliyun_line'),
          userId?: string(name='UserId', example='177xxxxxxxxxxxxx'),
        }
      ](name='Nets'),
      num?: long(name='Num', example='100'),
      page?: long(name='Page', example='1'),
      total?: long(name='Total', example='1'),
    }
  ](name='Data'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='24B652B5-AEFF-3F03-9114-00D053C42277'),
}

model QueryNetListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryNetListResponseBody(name='body'),
}

async function queryNetList(request: QueryNetListRequest): QueryNetListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryNetList', 'POST', '/', 'json', false, 'json', request);
}

