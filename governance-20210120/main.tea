/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @signatureAlgorithm = 'v2';
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('governance', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model BatchEnrollAccountsRequest {
  accounts?: [ 
    {
      accountUid?: long(name='AccountUid', example='12868156179****'),
    }
  ](name='Accounts'),
  baselineId?: string(name='BaselineId', example='afb-bp1durvn3lgqe28v****'),
  baselineItems?: [ 
    {
      config?: string(name='Config', example='{\\\\"Notifications\\\\":[{\\\\"GroupKey\\\\":\\\\"account_msg\\\\",\\\\"Contacts\\\\":[{\\\\"Name\\\\":\\\\"aa\\\\"}],\\\\"PmsgStatus\\\\":1,\\\\"EmailStatus\\\\":1,\\\\"SmsStatus\\\\":1}]}'),
      name?: string(name='Name', example='ACS-BP_ACCOUNT_FACTORY_VPC'),
      skip?: boolean(name='Skip', example='false'),
      version?: string(name='Version', example='1.0'),
    }
  ](name='BaselineItems'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model BatchEnrollAccountsResponseBody = {
  requestId?: string(name='RequestId', example='16B208DD-86BD-5E7D-AC93-FFD44B6FBDF1'),
}

model BatchEnrollAccountsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchEnrollAccountsResponseBody(name='body'),
}

/**
 * @summary 账号工厂批量注册账号
 *
 * @param request BatchEnrollAccountsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return BatchEnrollAccountsResponse
 */
async function batchEnrollAccountsWithOptions(request: BatchEnrollAccountsRequest, runtime: Util.RuntimeOptions): BatchEnrollAccountsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accounts)) {
    query['Accounts'] = request.accounts;
  }
  if (!Util.isUnset(request.baselineId)) {
    query['BaselineId'] = request.baselineId;
  }
  if (!Util.isUnset(request.baselineItems)) {
    query['BaselineItems'] = request.baselineItems;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchEnrollAccounts',
    version = '2021-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 账号工厂批量注册账号
 *
 * @param request BatchEnrollAccountsRequest
 * @return BatchEnrollAccountsResponse
 */
async function batchEnrollAccounts(request: BatchEnrollAccountsRequest): BatchEnrollAccountsResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchEnrollAccountsWithOptions(request, runtime);
}

model CreateAccountFactoryBaselineRequest {
  baselineItems?: [ 
    {
      config?: string(name='Config', example='{\\\\"EnabledServices\\\\":[\\\\"CEN_TR\\\\",\\\\"CDT\\\\",\\\\"CMS\\\\",\\\\"KMS\\\\"]}'),
      name?: string(name='Name', example='ACS-BP_ACCOUNT_FACTORY_VPC'),
      version?: string(name='Version', example='1.0'),
    }
  ](name='BaselineItems'),
  baselineName?: string(name='BaselineName'),
  description?: string(name='Description'),
  regionId?: string(name='RegionId', description='RegionId', example='cn-hangzhou'),
}

model CreateAccountFactoryBaselineResponseBody = {
  baselineId?: string(name='BaselineId'),
  requestId?: string(name='RequestId', example='A5592E2E-0FC4-557C-B989-DF229B5EBE13'),
}

model CreateAccountFactoryBaselineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAccountFactoryBaselineResponseBody(name='body'),
}

/**
 * @summary 创建账号工厂基线
 *
 * @param request CreateAccountFactoryBaselineRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateAccountFactoryBaselineResponse
 */
async function createAccountFactoryBaselineWithOptions(request: CreateAccountFactoryBaselineRequest, runtime: Util.RuntimeOptions): CreateAccountFactoryBaselineResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.baselineItems)) {
    query['BaselineItems'] = request.baselineItems;
  }
  if (!Util.isUnset(request.baselineName)) {
    query['BaselineName'] = request.baselineName;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAccountFactoryBaseline',
    version = '2021-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建账号工厂基线
 *
 * @param request CreateAccountFactoryBaselineRequest
 * @return CreateAccountFactoryBaselineResponse
 */
async function createAccountFactoryBaseline(request: CreateAccountFactoryBaselineRequest): CreateAccountFactoryBaselineResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAccountFactoryBaselineWithOptions(request, runtime);
}

model DeleteAccountFactoryBaselineRequest {
  baselineId?: string(name='BaselineId', example='afb-bp1durvn3lgqe28v****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DeleteAccountFactoryBaselineResponseBody = {
  requestId?: string(name='RequestId', example='0F45D888-8C4D-55E5-ACA2-D1515159181D'),
}

model DeleteAccountFactoryBaselineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAccountFactoryBaselineResponseBody(name='body'),
}

/**
 * @summary 删除账号工厂基线
 *
 * @param request DeleteAccountFactoryBaselineRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteAccountFactoryBaselineResponse
 */
async function deleteAccountFactoryBaselineWithOptions(request: DeleteAccountFactoryBaselineRequest, runtime: Util.RuntimeOptions): DeleteAccountFactoryBaselineResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.baselineId)) {
    query['BaselineId'] = request.baselineId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAccountFactoryBaseline',
    version = '2021-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除账号工厂基线
 *
 * @param request DeleteAccountFactoryBaselineRequest
 * @return DeleteAccountFactoryBaselineResponse
 */
async function deleteAccountFactoryBaseline(request: DeleteAccountFactoryBaselineRequest): DeleteAccountFactoryBaselineResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAccountFactoryBaselineWithOptions(request, runtime);
}

model EnrollAccountRequest {
  accountNamePrefix?: string(name='AccountNamePrefix', description='The prefix for the account name of the member.

*   If the account baseline is applied to an account that is newly created, you must configure this parameter.
*   If the account baseline is applied to an existing account, you do not need to configure this parameter.', example='test-account'),
  accountUid?: long(name='AccountUid', description='The account ID.

*   If the account baseline is applied to an account that is newly created, you do not need to configure this parameter.
*   If the account baseline is applied to an existing account, you must configure this parameter.', example='12868156179****'),
  baselineId?: string(name='BaselineId', description='The baseline ID.

If this parameter is left empty, the default baseline is used.', example='afb-bp1durvn3lgqe28v****'),
  baselineItems?: [ 
    {
      config?: string(name='Config', description='The configurations of the baseline item.', example='{\\\\"Notifications\\\\":[{\\\\"GroupKey\\\\":\\\\"account_msg\\\\",\\\\"Contacts\\\\":[{\\\\"Name\\\\":\\\\"aa\\\\"}],\\\\"PmsgStatus\\\\":1,\\\\"EmailStatus\\\\":1,\\\\"SmsStatus\\\\":1}]}'),
      name?: string(name='Name', description='The name of the baseline item.', example='ACS-BP_ACCOUNT_FACTORY_VPC'),
      skip?: boolean(name='Skip', description='Specifies whether to skip the baseline item. Valid values:

*   false: The baseline item is not skipped.
*   true: The baseline item is skipped.', example='false'),
      version?: string(name='Version', description='The version of the baseline item.', example='1.0'),
    }
  ](name='BaselineItems', description='An array that contains baseline items.

If this parameter is specified, the configurations of the baseline items are merged with the baseline of the specified account. The configurations of the same baseline items are subject to the configuration of this parameter. We recommend that you leave this parameter empty and configure the `BaselineId` parameter to specify an account baseline and apply the configuration of the account baseline to the account.'),
  displayName?: string(name='DisplayName', description='The display name of the account.

*   If the account baseline is applied to an account that is newly created, you must configure this parameter.
*   If the account baseline is applied to an existing account, you do not need to configure this parameter.', example='test-account'),
  folderId?: string(name='FolderId', description='The ID of the parent folder.

*   If the account baseline is applied to an account that is newly created, you need to specify a parent folder. If you do not configure this parameter, the account is created in the Root folder.
*   If the account baseline is applied to an existing account, you do not need to configure this parameter.', example='fd-5ESoku****'),
  payerAccountUid?: long(name='PayerAccountUid', description='The ID of the billing account.

*   If the account baseline is applied to an account that is newly created, you need to specify a billing account. If you do not configure this parameter, the self-pay settlement method is used for the account.
*   If the account baseline is applied to an existing account, you do not need to configure this parameter.', example='19534534552****'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  resellAccountType?: string(name='ResellAccountType', description='The identity type of the member. Valid values:

*   resell (default): The member is an account for a reseller. A relationship is automatically established between the member and the reseller. The management account of the resource directory must be used as the billing account of the member.
*   non_resell: The member is not an account for a reseller. The member is an account that is not associated with a reseller. You can directly use the account to purchase Alibaba Cloud resources. The member is used as its own billing account.

> This parameter is available only for resellers at the international site (alibabacloud.com).', example='resell'),
}

model EnrollAccountResponseBody = {
  accountUid?: long(name='AccountUid', description='The account ID.', example='143165363236****'),
  requestId?: string(name='RequestId', description='The request ID.', example='7071E5FA-515E-5F53-B335-B87D619C6A66'),
}

model EnrollAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnrollAccountResponseBody(name='body'),
}

/**
 * @summary Enrolls an account. You can create a new account or manage an existing account in the account factory.
 *
 * @description You can call this API operation to create a new account or manage an existing account and apply the account baseline to the account.
 * Accounts are created in asynchronous mode. After you create an account, you can apply the account baseline to the account. You can call the [GetEnrolledAccount API](~~GetEnrolledAccount~~) operation to view the details about the account to obtain the result of applying the account baseline to the account.
 *
 * @param request EnrollAccountRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return EnrollAccountResponse
 */
async function enrollAccountWithOptions(request: EnrollAccountRequest, runtime: Util.RuntimeOptions): EnrollAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountNamePrefix)) {
    query['AccountNamePrefix'] = request.accountNamePrefix;
  }
  if (!Util.isUnset(request.accountUid)) {
    query['AccountUid'] = request.accountUid;
  }
  if (!Util.isUnset(request.baselineId)) {
    query['BaselineId'] = request.baselineId;
  }
  if (!Util.isUnset(request.baselineItems)) {
    query['BaselineItems'] = request.baselineItems;
  }
  if (!Util.isUnset(request.displayName)) {
    query['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.folderId)) {
    query['FolderId'] = request.folderId;
  }
  if (!Util.isUnset(request.payerAccountUid)) {
    query['PayerAccountUid'] = request.payerAccountUid;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resellAccountType)) {
    query['ResellAccountType'] = request.resellAccountType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnrollAccount',
    version = '2021-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Enrolls an account. You can create a new account or manage an existing account in the account factory.
 *
 * @description You can call this API operation to create a new account or manage an existing account and apply the account baseline to the account.
 * Accounts are created in asynchronous mode. After you create an account, you can apply the account baseline to the account. You can call the [GetEnrolledAccount API](~~GetEnrolledAccount~~) operation to view the details about the account to obtain the result of applying the account baseline to the account.
 *
 * @param request EnrollAccountRequest
 * @return EnrollAccountResponse
 */
async function enrollAccount(request: EnrollAccountRequest): EnrollAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return enrollAccountWithOptions(request, runtime);
}

model GetAccountFactoryBaselineRequest {
  baselineId?: string(name='BaselineId', description='The baseline ID.', example='afb-bp1nf0enuzb89az*****'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model GetAccountFactoryBaselineResponseBody = {
  baselineId?: string(name='BaselineId', description='The baseline ID.', example='afb-bp16ae2k8a3yo3d*****'),
  baselineItems?: [ 
    {
      config?: string(name='Config', description='The configuration of the baseline item.

The value is a JSON string.', example='{\\\\"Notifications\\\\":[{\\\\"GroupKey\\\\":\\\\"account_msg\\\\",\\\\"Contacts\\\\":[{\\\\"Name\\\\":\\\\"aa\\\\"}],\\\\"PmsgStatus\\\\":1,\\\\"EmailStatus\\\\":1,\\\\"SmsStatus\\\\":1}]}'),
      name?: string(name='Name', description='The name of the baseline item.', example='1097526274671790'),
      version?: string(name='Version', description='The version of the baseline item.', example='1.0'),
    }
  ](name='BaselineItems', description='The baseline items.'),
  baselineName?: string(name='BaselineName', description='The name of the baseline.', example='Default'),
  createTime?: string(name='CreateTime', description='The time when the baseline was created.', example='2022-11-28T00:46:34Z'),
  description?: string(name='Description', description='The description of the baseline.', example='Default baseline'),
  requestId?: string(name='RequestId', description='The request ID.', example='60D54503-F1F6-51B6-B6FA-A70CBDA2A68C'),
  type?: string(name='Type', description='The type of the baseline. Valid values:

*   System: default baseline.
*   Custom: custom baseline.', example='Custom'),
  updateTime?: string(name='UpdateTime', description='The time when the baseline was updated.', example='2022-11-02T01:00:07Z'),
}

model GetAccountFactoryBaselineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAccountFactoryBaselineResponseBody(name='body'),
}

/**
 * @summary Obtains the details of an account factory baseline.
 *
 * @param request GetAccountFactoryBaselineRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetAccountFactoryBaselineResponse
 */
async function getAccountFactoryBaselineWithOptions(request: GetAccountFactoryBaselineRequest, runtime: Util.RuntimeOptions): GetAccountFactoryBaselineResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.baselineId)) {
    query['BaselineId'] = request.baselineId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAccountFactoryBaseline',
    version = '2021-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Obtains the details of an account factory baseline.
 *
 * @param request GetAccountFactoryBaselineRequest
 * @return GetAccountFactoryBaselineResponse
 */
async function getAccountFactoryBaseline(request: GetAccountFactoryBaselineRequest): GetAccountFactoryBaselineResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAccountFactoryBaselineWithOptions(request, runtime);
}

model GetEnrolledAccountRequest {
  accountUid?: long(name='AccountUid', description='The account ID.

This parameter is required.', example='19534534552****'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model GetEnrolledAccountResponseBody = {
  accountUid?: long(name='AccountUid', description='The account ID.', example='12868156179*****'),
  baselineId?: string(name='BaselineId', description='The ID of the baseline that is implemented.', example='afb-bp1adadfadsf***'),
  baselineItems?: [ 
    {
      config?: string(name='Config', description='The configurations of the baseline item.', example='{\\\\"Notifications\\\\":[{\\\\"GroupKey\\\\":\\\\"account_msg\\\\",\\\\"Contacts\\\\":[{\\\\"Name\\\\":\\\\"aa\\\\"}],\\\\"PmsgStatus\\\\":1,\\\\"EmailStatus\\\\":1,\\\\"SmsStatus\\\\":1}]}'),
      name?: string(name='Name', description='The name of the baseline item.', example='ACS-BP_ACCOUNT_FACTORY_VPC'),
      skip?: boolean(name='Skip', description='Indicates whether baseline item is skipped. Valid values:

*   false
*   true', example='false'),
      version?: string(name='Version', description='The version of the baseline item.', example='1.0'),
    }
  ](name='BaselineItems', description='An array that contains baseline items.'),
  createTime?: string(name='CreateTime', description='The time when the account was created.', example='2021-11-01T02:38:27Z'),
  displayName?: string(name='DisplayName', description='The display name of the account.', example='test-account'),
  errorInfo?: {
    code?: string(name='Code', description='The error code.', example='CompliancePackExists'),
    message?: string(name='Message', description='The error message.', example='The compliance pack already exists.'),
    recommend?: string(name='Recommend', description='The recommended solution.', example='https://next.api.aliyun.com/troubleshoot?q=CompliancePackExists\\\\\\\\u0026product=Config'),
    requestId?: string(name='RequestId', description='The request ID.', example='6D5EAA86-2D41-5CB7-8DA7-B60093ACAA4E'),
  }(name='ErrorInfo', description='The error message.

>  This parameter is returned if the value of `Status` is `Failed` or `ScheduleFailed`.'),
  folderId?: string(name='FolderId', description='The ID of the parent folder.', example='fd-5ESoku****'),
  initialized?: boolean(name='Initialized', description='Indicates whether the initialization is complete. Valid values:

*   false
*   true', example='true'),
  inputs?: {
    accountNamePrefix?: string(name='AccountNamePrefix', description='The prefix of the account name.', example='test-account'),
    accountUid?: long(name='AccountUid', description='The account ID.', example='12868156179*****'),
    baselineItems?: [ 
      {
        config?: string(name='Config', description='The configurations of the baseline item.', example='{\\\\"Contacts\\\\":[{\\\\"Name\\\\":\\\\"governance\\\\",\\\\"Email\\\\":\\\\"wibud****@gmail.com\\\\",\\\\"Mobile\\\\":\\\\"1234\\\\",\\\\"Position\\\\":\\\\"Other\\\\"}]}'),
        name?: string(name='Name', description='The name of the baseline item.', example='ACS-BP_ACCOUNT_FACTORY_VPC'),
        skip?: boolean(name='Skip', description='Indicates whether baseline item is skipped. Valid values:

*   false
*   true', example='false'),
        version?: string(name='Version', description='The version of the baseline item.', example='1.0'),
      }
    ](name='BaselineItems', description='The baseline items.'),
    displayName?: string(name='DisplayName', description='The display name of the account.', example='test-account'),
    folderId?: string(name='FolderId', description='The ID of the parent folder.', example='fd-5ESoku****'),
    payerAccountUid?: long(name='PayerAccountUid', description='The ID of the settlement account.', example='19534534552*****'),
  }(name='Inputs', description='The input parameters that are used when the account was registered.'),
  masterAccountUid?: long(name='MasterAccountUid', description='The ID of the management account of the resource directory to which the account belongs.', example='19534534552*****'),
  payerAccountUid?: long(name='PayerAccountUid', description='The ID of the settlement account.', example='19534534552*****'),
  progress?: [ 
    {
      name?: string(name='Name', description='The name of the baseline item.', example='ACS-BP_ACCOUNT_FACTORY_VPC'),
      status?: string(name='Status', description='The status of applying the baseline to the account. Valid values:

*   Pending: The baseline is pending to be applied to the account.
*   Running: The baseline is being applied to the account.
*   Finished: : The baseline is applied to the account.
*   Failed: : The baseline fails to be applied to the account.', example='Running'),
    }
  ](name='Progress', description='The progress of the applying the baseline to the account.'),
  requestId?: string(name='RequestId', description='The request ID.', example='768F908D-A66A-5A5D-816C-20C93CBBFEE3'),
  status?: string(name='Status', description='The status of the account. Valid values:

*   Pending: The account is pending to be created.
*   Running: The account is being created.
*   Finished: The account is created.
*   Failed: The account fails to be created.
*   Scheduling: The account is being scheduled.
*   ScheduleFailed: The account fails to be scheduled.', example='Finished'),
  updateTime?: string(name='UpdateTime', description='The time when the information about the account was updated.', example='2021-11-01T02:38:27Z'),
}

model GetEnrolledAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEnrolledAccountResponseBody(name='body'),
}

/**
 * @summary Queries the details about an account that is enrolled in the account factory.
 *
 * @param request GetEnrolledAccountRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetEnrolledAccountResponse
 */
async function getEnrolledAccountWithOptions(request: GetEnrolledAccountRequest, runtime: Util.RuntimeOptions): GetEnrolledAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountUid)) {
    query['AccountUid'] = request.accountUid;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetEnrolledAccount',
    version = '2021-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the details about an account that is enrolled in the account factory.
 *
 * @param request GetEnrolledAccountRequest
 * @return GetEnrolledAccountResponse
 */
async function getEnrolledAccount(request: GetEnrolledAccountRequest): GetEnrolledAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEnrolledAccountWithOptions(request, runtime);
}

model ListAccountFactoryBaselineItemsRequest {
  maxResults?: int32(name='MaxResults', example='10'),
  names?: [ string ](name='Names'),
  nextToken?: string(name='NextToken', example='AAAAACDGQdAEX3m42z3sQ+f3VTK2Xr2DzYbz/SAfc/zJRqod'),
  regionId?: string(name='RegionId', description='RegionId', example='cn-hangzhou'),
  type?: string(name='Type', example='AccountFactory'),
  versions?: [ string ](name='Versions'),
}

model ListAccountFactoryBaselineItemsResponseBody = {
  baselineItems?: [ 
    {
      dependsOn?: [ 
        {
          name?: string(name='Name', example='ACS-BP_ACCOUNT_FACTORY_VPC'),
          type?: string(name='Type', example='AccountFactory'),
          version?: string(name='Version', example='1.0'),
        }
      ](name='DependsOn'),
      description?: string(name='Description', example='Notification.'),
      name?: string(name='Name', example='ACS-BP_ACCOUNT_FACTORY_ACCOUNT_NOTIFICATION'),
      type?: string(name='Type', example='AccountFactory'),
      version?: string(name='Version', example='1.0'),
    }
  ](name='BaselineItems'),
  nextToken?: string(name='NextToken', example='AAAAACDGQdAEX3m42z3sQ+f3VTK2Xr2DzYbz/SAfc/zJRqod'),
  requestId?: string(name='RequestId', example='B40D73D8-76AC-5D3C-AC63-4FC8AFCE6671'),
}

model ListAccountFactoryBaselineItemsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAccountFactoryBaselineItemsResponseBody(name='body'),
}

/**
 * @summary 获取账号工厂基线元素列表
 *
 * @param request ListAccountFactoryBaselineItemsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListAccountFactoryBaselineItemsResponse
 */
async function listAccountFactoryBaselineItemsWithOptions(request: ListAccountFactoryBaselineItemsRequest, runtime: Util.RuntimeOptions): ListAccountFactoryBaselineItemsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.names)) {
    query['Names'] = request.names;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.versions)) {
    query['Versions'] = request.versions;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAccountFactoryBaselineItems',
    version = '2021-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取账号工厂基线元素列表
 *
 * @param request ListAccountFactoryBaselineItemsRequest
 * @return ListAccountFactoryBaselineItemsResponse
 */
async function listAccountFactoryBaselineItems(request: ListAccountFactoryBaselineItemsRequest): ListAccountFactoryBaselineItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAccountFactoryBaselineItemsWithOptions(request, runtime);
}

model ListAccountFactoryBaselinesRequest {
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page.

Valid values: 1 to 100. Default value: 10.', example='10'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request.', example='AAAAALHWGpGoYCcYMxiFfmlhvh62Xr2DzYbz/SAfc*****'),
  regionId?: string(name='RegionId', description='RegionId', example='cn-hangzhou'),
}

model ListAccountFactoryBaselinesResponseBody = {
  baselines?: [ 
    {
      baselineId?: string(name='BaselineId', description='The baseline ID.', example='afb-bp1durvn3lgqe28v****'),
      baselineName?: string(name='BaselineName', description='The name of the baseline.', example='Default'),
      createTime?: string(name='CreateTime', description='The time at which the baseline was created.', example='2021-11-30T09:09:28Z'),
      description?: string(name='Description', description='The description of the baseline.', example='Default baseline'),
      type?: string(name='Type', description='The type of the baseline. Valid values:

*   System: default baseline
*   Custom: custom baseline', example='Custom'),
      updateTime?: string(name='UpdateTime', description='The time when the baseline was updated.', example='2022-12-29T07:08:40Z'),
    }
  ](name='Baselines', description='An array that consists of baselines.'),
  nextToken?: string(name='NextToken', description='The returned value of NextToken is a pagination token, which can be used in the next request to retrieve a new page of results.', example='AAAAALHWGpGoYCcYMxiFfmlhvh62Xr2DzYbz/SAfc*****'),
  requestId?: string(name='RequestId', description='The request ID.', example='3245E413-7CDD-5287-8988-6A94DE8A8369'),
}

model ListAccountFactoryBaselinesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAccountFactoryBaselinesResponseBody(name='body'),
}

/**
 * @summary Obtains a list of baselines in the account factory.
 *
 * @param request ListAccountFactoryBaselinesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListAccountFactoryBaselinesResponse
 */
async function listAccountFactoryBaselinesWithOptions(request: ListAccountFactoryBaselinesRequest, runtime: Util.RuntimeOptions): ListAccountFactoryBaselinesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAccountFactoryBaselines',
    version = '2021-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Obtains a list of baselines in the account factory.
 *
 * @param request ListAccountFactoryBaselinesRequest
 * @return ListAccountFactoryBaselinesResponse
 */
async function listAccountFactoryBaselines(request: ListAccountFactoryBaselinesRequest): ListAccountFactoryBaselinesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAccountFactoryBaselinesWithOptions(request, runtime);
}

model ListEnrolledAccountsRequest {
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page.

Valid values: 1 to 100. Default value: 10.', example='10'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request.', example='AAAAALHWGpGoYCcYMxiFfmlhvh62Xr2DzYbz/SAfc*****'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model ListEnrolledAccountsResponseBody = {
  enrolledAccounts?: [ 
    {
      accountUid?: long(name='AccountUid', description='The account ID.', example='19534534552*****'),
      baselineId?: string(name='BaselineId', description='The baseline ID.', example='afb-bp1durvn3lgqe28v****'),
      createTime?: string(name='CreateTime', description='The time at which the account was created.', example='2021-11-01T02:38:27Z'),
      displayName?: string(name='DisplayName', description='The display name of the account.', example='TestAccount'),
      folderId?: string(name='FolderId', description='The ID of the parent folder.', example='fd-5ESoku****'),
      payerAccountUid?: long(name='PayerAccountUid', description='The ID of the billing account.', example='13161210500*****'),
      status?: string(name='Status', description='The creation status of the account. Valid values:

*   Pending: The account is waiting to be created.
*   Running: The account is being created.
*   Finished: The account is created.
*   Failed: The account failed to be created.
*   Scheduling: The account is being scheduled.
*   ScheduleFailed: The account failed to be scheduled.', example='Running'),
      updateTime?: string(name='UpdateTime', description='The time when the information about the account was updated.', example='2021-11-01T02:38:27Z'),
    }
  ](name='EnrolledAccounts', description='The accounts.'),
  nextToken?: string(name='NextToken', description='The returned value of NextToken is a pagination token, which can be used in the next request to retrieve a new page of results.', example='AAAAALHWGpGoYCcYMxiFfmlhvh62Xr2DzYbz/SAfc*****'),
  requestId?: string(name='RequestId', description='The request ID.', example='768F908D-A66A-5A5D-816C-20C93CBBFEE3'),
}

model ListEnrolledAccountsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEnrolledAccountsResponseBody(name='body'),
}

/**
 * @summary Queries a list of accounts that are enrolled in the account factory.
 *
 * @param request ListEnrolledAccountsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListEnrolledAccountsResponse
 */
async function listEnrolledAccountsWithOptions(request: ListEnrolledAccountsRequest, runtime: Util.RuntimeOptions): ListEnrolledAccountsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListEnrolledAccounts',
    version = '2021-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a list of accounts that are enrolled in the account factory.
 *
 * @param request ListEnrolledAccountsRequest
 * @return ListEnrolledAccountsResponse
 */
async function listEnrolledAccounts(request: ListEnrolledAccountsRequest): ListEnrolledAccountsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEnrolledAccountsWithOptions(request, runtime);
}

model ListEvaluationMetadataRequest {
  language?: string(name='Language', example='zh'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ListEvaluationMetadataResponseBody = {
  evaluationMetadata?: [ 
    {
      metadata?: [ 
        {
          category?: string(name='Category', example='Security'),
          description?: string(name='Description'),
          displayName?: string(name='DisplayName'),
          id?: string(name='Id', example='pxgtda****'),
          recommendationLevel?: string(name='RecommendationLevel', example='High'),
          remediationMetadata?: {
            remediation?: [ 
              {
                actions?: [ 
                  {
                    classification?: string(name='Classification', example='UnusedAccessKeyInRamUser'),
                    costDescription?: string(name='CostDescription'),
                    description?: string(name='Description'),
                    guidance?: [ 
                      {
                        buttonName?: string(name='ButtonName'),
                        buttonRef?: string(name='ButtonRef', example='https://ram.console.aliyun.com/users'),
                        content?: string(name='Content'),
                        title?: string(name='Title'),
                      }
                    ](name='Guidance'),
                    notice?: string(name='Notice'),
                    suggestion?: string(name='Suggestion'),
                  }
                ](name='Actions'),
                remediationType?: string(name='RemediationType', example='Manual'),
              }
            ](name='Remediation'),
          }(name='RemediationMetadata'),
          resourceMetadata?: {
            resourcePropertyMetadata?: [ 
              {
                displayName?: string(name='DisplayName'),
                propertyName?: string(name='PropertyName', example='AkLastUsedTime'),
                propertyType?: string(name='PropertyType', example='String'),
              }
            ](name='ResourcePropertyMetadata'),
          }(name='ResourceMetadata'),
          scope?: string(name='Scope', example='Account'),
          stage?: string(name='Stage', example='Released'),
        }
      ](name='Metadata'),
      type?: string(name='Type', example='Metric'),
    }
  ](name='EvaluationMetadata'),
  requestId?: string(name='RequestId', example='16B208DD-86BD-5E7D-AC93-FFD44B6FBDF1'),
}

model ListEvaluationMetadataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEvaluationMetadataResponseBody(name='body'),
}

/**
 * @summary 查看治理检测定义
 *
 * @param request ListEvaluationMetadataRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListEvaluationMetadataResponse
 */
async function listEvaluationMetadataWithOptions(request: ListEvaluationMetadataRequest, runtime: Util.RuntimeOptions): ListEvaluationMetadataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListEvaluationMetadata',
    version = '2021-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看治理检测定义
 *
 * @param request ListEvaluationMetadataRequest
 * @return ListEvaluationMetadataResponse
 */
async function listEvaluationMetadata(request: ListEvaluationMetadataRequest): ListEvaluationMetadataResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEvaluationMetadataWithOptions(request, runtime);
}

model ListEvaluationMetricDetailsRequest {
  accountId?: long(name='AccountId', example='103144549568****'),
  id?: string(name='Id', example='xfyve5****'),
  maxResults?: int32(name='MaxResults', example='5'),
  nextToken?: string(name='NextToken', example='AAAAAGEaXR18y1rqykZHIqRuBejOqED4S3Xne33c7zbn****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ListEvaluationMetricDetailsResponseBody = {
  nextToken?: string(name='NextToken', example='AAAAAGEaXR18y1rqykZHIqRuBejOqED4S3Xne33c7zbn****'),
  requestId?: string(name='RequestId', example='AC9BD94C-D20C-4D27-88D4-89E8D75C****'),
  resources?: [ 
    {
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      resourceClassification?: string(name='ResourceClassification', example='RecentUnloginRamUser'),
      resourceId?: string(name='ResourceId', example='26435103783237****'),
      resourceName?: string(name='ResourceName'),
      resourceOwnerId?: long(name='ResourceOwnerId', example='176618589410****'),
      resourceProperties?: [ 
        {
          propertyName?: string(name='PropertyName', example='DisplayName'),
          propertyValue?: string(name='PropertyValue'),
        }
      ](name='ResourceProperties'),
      resourceType?: string(name='ResourceType', example='ACS::RAM::User'),
    }
  ](name='Resources'),
}

model ListEvaluationMetricDetailsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEvaluationMetricDetailsResponseBody(name='body'),
}

/**
 * @summary 获取云治理中心治理检测项结果详情
 *
 * @param request ListEvaluationMetricDetailsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListEvaluationMetricDetailsResponse
 */
async function listEvaluationMetricDetailsWithOptions(request: ListEvaluationMetricDetailsRequest, runtime: Util.RuntimeOptions): ListEvaluationMetricDetailsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListEvaluationMetricDetails',
    version = '2021-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取云治理中心治理检测项结果详情
 *
 * @param request ListEvaluationMetricDetailsRequest
 * @return ListEvaluationMetricDetailsResponse
 */
async function listEvaluationMetricDetails(request: ListEvaluationMetricDetailsRequest): ListEvaluationMetricDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEvaluationMetricDetailsWithOptions(request, runtime);
}

model ListEvaluationResultsRequest {
  accountId?: long(name='AccountId', example='176618589410****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ListEvaluationResultsResponseBody = {
  accountId?: long(name='AccountId', example='176618589410****'),
  requestId?: string(name='RequestId', example='BD57329E-131A-59F4-8746-E1CD8D7B****'),
  results?: {
    evaluationTime?: string(name='EvaluationTime', example='2023-12-13T03:35:00Z'),
    metricResults?: [ 
      {
        errorInfo?: {
          code?: string(name='Code'),
          message?: string(name='Message'),
        }(name='ErrorInfo'),
        evaluationTime?: string(name='EvaluationTime', example='2023-12-13T03:34:02Z'),
        id?: string(name='Id', example='r7xdcu****'),
        resourcesSummary?: {
          nonCompliant?: int32(name='NonCompliant', example='2'),
        }(name='ResourcesSummary'),
        result?: double(name='Result', example='0.67'),
        risk?: string(name='Risk', example='Error'),
        status?: string(name='Status', example='Running'),
      }
    ](name='MetricResults'),
    status?: string(name='Status', example='Running'),
    totalScore?: double(name='TotalScore', example='0.6453'),
  }(name='Results'),
}

model ListEvaluationResultsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEvaluationResultsResponseBody(name='body'),
}

/**
 * @summary 查看检测结果
 *
 * @param request ListEvaluationResultsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListEvaluationResultsResponse
 */
async function listEvaluationResultsWithOptions(request: ListEvaluationResultsRequest, runtime: Util.RuntimeOptions): ListEvaluationResultsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListEvaluationResults',
    version = '2021-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看检测结果
 *
 * @param request ListEvaluationResultsRequest
 * @return ListEvaluationResultsResponse
 */
async function listEvaluationResults(request: ListEvaluationResultsRequest): ListEvaluationResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEvaluationResultsWithOptions(request, runtime);
}

model ListEvaluationScoreHistoryRequest {
  endDate?: string(name='EndDate', example='2024-07-11'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  startDate?: string(name='StartDate', example='2024-06-11'),
}

model ListEvaluationScoreHistoryResponseBody = {
  requestId?: string(name='RequestId', example='AC9BD94C-D20C-4D27-88D4-89E8D75C051B'),
  scoreHistory?: {
    totalScoreHistory?: [ 
      {
        evaluationTime?: string(name='EvaluationTime', example='2024-06-30T03:34:02Z'),
        score?: double(name='Score', example='0.6753'),
      }
    ](name='TotalScoreHistory'),
  }(name='ScoreHistory'),
}

model ListEvaluationScoreHistoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEvaluationScoreHistoryResponseBody(name='body'),
}

/**
 * @summary 查看治理检测定义
 *
 * @param request ListEvaluationScoreHistoryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListEvaluationScoreHistoryResponse
 */
async function listEvaluationScoreHistoryWithOptions(request: ListEvaluationScoreHistoryRequest, runtime: Util.RuntimeOptions): ListEvaluationScoreHistoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endDate)) {
    query['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startDate)) {
    query['StartDate'] = request.startDate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListEvaluationScoreHistory',
    version = '2021-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看治理检测定义
 *
 * @param request ListEvaluationScoreHistoryRequest
 * @return ListEvaluationScoreHistoryResponse
 */
async function listEvaluationScoreHistory(request: ListEvaluationScoreHistoryRequest): ListEvaluationScoreHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEvaluationScoreHistoryWithOptions(request, runtime);
}

model RunEvaluationRequest {
  accountId?: long(name='AccountId', example='176618589410****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  scope?: string(name='Scope', example='ResourceDirectory'),
}

model RunEvaluationResponseBody = {
  requestId?: string(name='RequestId', example='2D3E2A3A-F2B8-578D-9659-3195F94A****'),
}

model RunEvaluationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunEvaluationResponseBody(name='body'),
}

/**
 * @summary 运行云治理中心治理检测
 *
 * @param request RunEvaluationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RunEvaluationResponse
 */
async function runEvaluationWithOptions(request: RunEvaluationRequest, runtime: Util.RuntimeOptions): RunEvaluationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.scope)) {
    query['Scope'] = request.scope;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RunEvaluation',
    version = '2021-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 运行云治理中心治理检测
 *
 * @param request RunEvaluationRequest
 * @return RunEvaluationResponse
 */
async function runEvaluation(request: RunEvaluationRequest): RunEvaluationResponse {
  var runtime = new Util.RuntimeOptions{};
  return runEvaluationWithOptions(request, runtime);
}

model UpdateAccountFactoryBaselineRequest {
  baselineId?: string(name='BaselineId'),
  baselineItems?: [ 
    {
      config?: string(name='Config', example='{\\\\"EnabledServices\\\\":[\\\\"CEN_TR\\\\",\\\\"CDT\\\\",\\\\"CMS\\\\",\\\\"KMS\\\\"]}'),
      name?: string(name='Name', example='ACS-BP_ACCOUNT_FACTORY_VPC'),
      version?: string(name='Version', example='1.0'),
    }
  ](name='BaselineItems'),
  baselineName?: string(name='BaselineName'),
  description?: string(name='Description'),
  regionId?: string(name='RegionId', description='RegionId', example='cn-hangzhou'),
}

model UpdateAccountFactoryBaselineResponseBody = {
  requestId?: string(name='RequestId', example='C18A891D-7B04-51A1-AAC6-201727A361CE'),
}

model UpdateAccountFactoryBaselineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAccountFactoryBaselineResponseBody(name='body'),
}

/**
 * @summary 更新账号工厂基线
 *
 * @param request UpdateAccountFactoryBaselineRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateAccountFactoryBaselineResponse
 */
async function updateAccountFactoryBaselineWithOptions(request: UpdateAccountFactoryBaselineRequest, runtime: Util.RuntimeOptions): UpdateAccountFactoryBaselineResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.baselineId)) {
    query['BaselineId'] = request.baselineId;
  }
  if (!Util.isUnset(request.baselineItems)) {
    query['BaselineItems'] = request.baselineItems;
  }
  if (!Util.isUnset(request.baselineName)) {
    query['BaselineName'] = request.baselineName;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAccountFactoryBaseline',
    version = '2021-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新账号工厂基线
 *
 * @param request UpdateAccountFactoryBaselineRequest
 * @return UpdateAccountFactoryBaselineResponse
 */
async function updateAccountFactoryBaseline(request: UpdateAccountFactoryBaselineRequest): UpdateAccountFactoryBaselineResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAccountFactoryBaselineWithOptions(request, runtime);
}

