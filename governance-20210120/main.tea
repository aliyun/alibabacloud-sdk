/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('governance', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model EnrollAccountRequest {
  accountNamePrefix?: string(name='AccountNamePrefix', description='账号名称前缀'),
  accountUid?: long(name='AccountUid', description='注册账号ID'),
  baselineItems?: [ 
    {
      config?: string(name='Config', description='基线项配置'),
      name?: string(name='Name', description='基线项名称'),
      skip?: boolean(name='Skip', description='是否跳过基线项'),
      version?: string(name='Version', description='基线项版本'),
    }
  ](name='BaselineItems', description='基线项配置数组'),
  displayName?: string(name='DisplayName', description='账号显示名称'),
  folderId?: string(name='FolderId', description='父资源夹ID'),
  payerAccountUid?: long(name='PayerAccountUid', description='结算账号ID'),
  regionId?: string(name='RegionId', description='RegionId'),
}

model EnrollAccountResponseBody = {
  accountUid?: long(name='AccountUid', description='注册账号ID'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model EnrollAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnrollAccountResponseBody(name='body'),
}

async function enrollAccountWithOptions(request: EnrollAccountRequest, runtime: Util.RuntimeOptions): EnrollAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountNamePrefix)) {
    query['AccountNamePrefix'] = request.accountNamePrefix;
  }
  if (!Util.isUnset(request.accountUid)) {
    query['AccountUid'] = request.accountUid;
  }
  if (!Util.isUnset(request.baselineItems)) {
    query['BaselineItems'] = request.baselineItems;
  }
  if (!Util.isUnset(request.displayName)) {
    query['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.folderId)) {
    query['FolderId'] = request.folderId;
  }
  if (!Util.isUnset(request.payerAccountUid)) {
    query['PayerAccountUid'] = request.payerAccountUid;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnrollAccount',
    version = '2021-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enrollAccount(request: EnrollAccountRequest): EnrollAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return enrollAccountWithOptions(request, runtime);
}

model GetEnrolledAccountRequest {
  accountUid?: long(name='AccountUid', description='账号ID'),
  regionId?: string(name='RegionId', description='RegionId'),
}

model GetEnrolledAccountResponseBody = {
  accountUid?: long(name='AccountUid', description='账号ID'),
  createTime?: string(name='CreateTime', description='创建时间'),
  displayName?: string(name='DisplayName', description='账号显示名称'),
  errorInfo?: {
    code?: string(name='Code', description='错误码'),
    message?: string(name='Message', description='错误信息'),
    recommend?: string(name='Recommend', description='错误处理建议'),
    requestId?: string(name='RequestId', description='请求ID'),
  }(name='ErrorInfo', description='错误信息'),
  folderId?: string(name='FolderId', description='父资源夹ID'),
  initialized?: boolean(name='Initialized', description='是否初始化完成'),
  inputs?: {
    accountNamePrefix?: string(name='AccountNamePrefix', description='账号名称前缀'),
    accountUid?: long(name='AccountUid', description='账号ID'),
    baselineItems?: [ 
      {
        config?: string(name='Config', description='基线项配置'),
        name?: string(name='Name', description='基线项名称'),
        skip?: boolean(name='Skip', description='是否跳过基线项'),
        version?: string(name='Version', description='基线项版本'),
      }
    ](name='BaselineItems', description='基线项配置数组'),
    displayName?: string(name='DisplayName', description='账号展示名称'),
    folderId?: string(name='FolderId', description='父资源夹ID'),
    payerAccountUid?: long(name='PayerAccountUid', description='结算账号ID'),
  }(name='Inputs', description='注册账号时的输入参数'),
  masterAccountUid?: long(name='MasterAccountUid', description='所属的Master账号ID'),
  payerAccountUid?: long(name='PayerAccountUid', description='结算账号ID'),
  progress?: [ 
    {
      name?: string(name='Name', description='基线项名称'),
      status?: string(name='Status', description='基线项实施状态'),
    }
  ](name='Progress', description='基线实施进度'),
  requestId?: string(name='RequestId', description='请求ID'),
  status?: string(name='Status', description='账号注册状态'),
  updateTime?: string(name='UpdateTime', description='更新时间'),
}

model GetEnrolledAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetEnrolledAccountResponseBody(name='body'),
}

async function getEnrolledAccountWithOptions(request: GetEnrolledAccountRequest, runtime: Util.RuntimeOptions): GetEnrolledAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountUid)) {
    query['AccountUid'] = request.accountUid;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetEnrolledAccount',
    version = '2021-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getEnrolledAccount(request: GetEnrolledAccountRequest): GetEnrolledAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEnrolledAccountWithOptions(request, runtime);
}

model ListEnrolledAccountsRequest {
  maxResults?: int32(name='MaxResults', description='每页的最大数据条数'),
  nextToken?: string(name='NextToken', description='查询返回结果下一页的令牌。首次调用API不需要NextToken'),
  regionId?: string(name='RegionId', description='RegionId'),
}

model ListEnrolledAccountsResponseBody = {
  enrolledAccounts?: [ 
    {
      accountUid?: long(name='AccountUid', description='账号ID'),
      createTime?: string(name='CreateTime', description='创建时间'),
      displayName?: string(name='DisplayName', description='账号显示名称'),
      folderId?: string(name='FolderId', description='父资源夹ID'),
      payerAccountUid?: long(name='PayerAccountUid', description='结算账号ID'),
      status?: string(name='Status', description='创建状态'),
      updateTime?: string(name='UpdateTime', description='更新时间'),
    }
  ](name='EnrolledAccounts', description='账号列表'),
  nextToken?: string(name='NextToken', description='查询返回结果下一页的令牌'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model ListEnrolledAccountsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListEnrolledAccountsResponseBody(name='body'),
}

async function listEnrolledAccountsWithOptions(request: ListEnrolledAccountsRequest, runtime: Util.RuntimeOptions): ListEnrolledAccountsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListEnrolledAccounts',
    version = '2021-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listEnrolledAccounts(request: ListEnrolledAccountsRequest): ListEnrolledAccountsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEnrolledAccountsWithOptions(request, runtime);
}

