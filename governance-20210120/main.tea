/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('governance', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model EnrollAccountRequest {
  accountNamePrefix?: string(name='AccountNamePrefix', example='test-account'),
  accountUid?: long(name='AccountUid', example='12868156179****'),
  baselineId?: string(name='BaselineId'),
  baselineItems?: [ 
    {
      config?: string(name='Config', example='{\\"Notifications\\":[{\\"GroupKey\\":\\"account_msg\\",\\"Contacts\\":[{\\"Name\\":\\"aa\\"}],\\"PmsgStatus\\":1,\\"EmailStatus\\":1,\\"SmsStatus\\":1}]}'),
      name?: string(name='Name', example='ACS-BP_ACCOUNT_FACTORY_VPC'),
      skip?: boolean(name='Skip', example='false'),
      version?: string(name='Version', example='1.0'),
    }
  ](name='BaselineItems'),
  displayName?: string(name='DisplayName', example='test-account'),
  folderId?: string(name='FolderId', example='fd-5ESoku****'),
  payerAccountUid?: long(name='PayerAccountUid', example='19534534552****'),
  regionId?: string(name='RegionId', description='RegionId', example='cn-hangzhou'),
  resellAccountType?: string(name='ResellAccountType'),
}

model EnrollAccountResponseBody = {
  accountUid?: long(name='AccountUid', example='143165363236****'),
  requestId?: string(name='RequestId', example='7071E5FA-515E-5F53-B335-B87D619C6A66'),
}

model EnrollAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnrollAccountResponseBody(name='body'),
}

async function enrollAccountWithOptions(request: EnrollAccountRequest, runtime: Util.RuntimeOptions): EnrollAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountNamePrefix)) {
    query['AccountNamePrefix'] = request.accountNamePrefix;
  }
  if (!Util.isUnset(request.accountUid)) {
    query['AccountUid'] = request.accountUid;
  }
  if (!Util.isUnset(request.baselineId)) {
    query['BaselineId'] = request.baselineId;
  }
  if (!Util.isUnset(request.baselineItems)) {
    query['BaselineItems'] = request.baselineItems;
  }
  if (!Util.isUnset(request.displayName)) {
    query['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.folderId)) {
    query['FolderId'] = request.folderId;
  }
  if (!Util.isUnset(request.payerAccountUid)) {
    query['PayerAccountUid'] = request.payerAccountUid;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resellAccountType)) {
    query['ResellAccountType'] = request.resellAccountType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnrollAccount',
    version = '2021-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enrollAccount(request: EnrollAccountRequest): EnrollAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return enrollAccountWithOptions(request, runtime);
}

model GetAccountFactoryBaselineRequest {
  baselineId?: string(name='BaselineId'),
  regionId?: string(name='RegionId', description='RegionId', example='cn-hangzhou'),
}

model GetAccountFactoryBaselineResponseBody = {
  baselineId?: string(name='BaselineId'),
  baselineItems?: [ 
    {
      config?: string(name='Config', example='{\\"Notifications\\":[{\\"GroupKey\\":\\"account_msg\\",\\"Contacts\\":[{\\"Name\\":\\"aa\\"}],\\"PmsgStatus\\":1,\\"EmailStatus\\":1,\\"SmsStatus\\":1}]}'),
      name?: string(name='Name', example='1097526274671790'),
      version?: string(name='Version', example='1.0'),
    }
  ](name='BaselineItems'),
  baselineName?: string(name='BaselineName'),
  createTime?: string(name='CreateTime'),
  description?: string(name='Description'),
  requestId?: string(name='RequestId', example='60D54503-F1F6-51B6-B6FA-A70CBDA2A68C'),
  type?: string(name='Type'),
  updateTime?: string(name='UpdateTime'),
}

model GetAccountFactoryBaselineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAccountFactoryBaselineResponseBody(name='body'),
}

async function getAccountFactoryBaselineWithOptions(request: GetAccountFactoryBaselineRequest, runtime: Util.RuntimeOptions): GetAccountFactoryBaselineResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.baselineId)) {
    query['BaselineId'] = request.baselineId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAccountFactoryBaseline',
    version = '2021-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAccountFactoryBaseline(request: GetAccountFactoryBaselineRequest): GetAccountFactoryBaselineResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAccountFactoryBaselineWithOptions(request, runtime);
}

model GetEnrolledAccountRequest {
  accountUid?: long(name='AccountUid', example='19534534552****'),
  regionId?: string(name='RegionId', description='RegionId', example='cn-hangzhou'),
}

model GetEnrolledAccountResponseBody = {
  accountUid?: long(name='AccountUid', example='12868156179*****'),
  baselineId?: string(name='BaselineId'),
  createTime?: string(name='CreateTime', example='2021-11-01T02:38:27Z'),
  displayName?: string(name='DisplayName', example='test-account'),
  errorInfo?: {
    code?: string(name='Code', example='CompliancePackExists'),
    message?: string(name='Message', example='The compliance pack already exists.'),
    recommend?: string(name='Recommend', example='https://next.api.aliyun.com/troubleshoot?q=CompliancePackExists\\\\u0026product=Config'),
    requestId?: string(name='RequestId', example='6D5EAA86-2D41-5CB7-8DA7-B60093ACAA4E'),
  }(name='ErrorInfo'),
  folderId?: string(name='FolderId', example='fd-5ESoku****'),
  initialized?: boolean(name='Initialized', example='true'),
  inputs?: {
    accountNamePrefix?: string(name='AccountNamePrefix', example='test-account'),
    accountUid?: long(name='AccountUid', example='12868156179*****'),
    baselineItems?: [ 
      {
        config?: string(name='Config', example='{\\"Contacts\\":[{\\"Name\\":\\"governance\\",\\"Email\\":\\"wibud5210+10@gmail.com\\",\\"Mobile\\":\\"1234\\",\\"Position\\":\\"Other\\"}]}'),
        name?: string(name='Name', example='ACS-BP_ACCOUNT_FACTORY_VPC'),
        skip?: boolean(name='Skip', example='false'),
        version?: string(name='Version', example='1.0'),
      }
    ](name='BaselineItems'),
    displayName?: string(name='DisplayName', example='test-account'),
    folderId?: string(name='FolderId', example='fd-5ESoku****'),
    payerAccountUid?: long(name='PayerAccountUid', example='19534534552*****'),
  }(name='Inputs'),
  masterAccountUid?: long(name='MasterAccountUid', example='19534534552*****'),
  payerAccountUid?: long(name='PayerAccountUid', example='19534534552*****'),
  progress?: [ 
    {
      name?: string(name='Name', example='ACS-BP_ACCOUNT_FACTORY_VPC'),
      status?: string(name='Status', example='Running'),
    }
  ](name='Progress'),
  requestId?: string(name='RequestId', example='768F908D-A66A-5A5D-816C-20C93CBBFEE3'),
  status?: string(name='Status', example='Finished'),
  updateTime?: string(name='UpdateTime', example='2021-11-01T02:38:27Z'),
}

model GetEnrolledAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetEnrolledAccountResponseBody(name='body'),
}

async function getEnrolledAccountWithOptions(request: GetEnrolledAccountRequest, runtime: Util.RuntimeOptions): GetEnrolledAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountUid)) {
    query['AccountUid'] = request.accountUid;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetEnrolledAccount',
    version = '2021-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getEnrolledAccount(request: GetEnrolledAccountRequest): GetEnrolledAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEnrolledAccountWithOptions(request, runtime);
}

model ListAccountFactoryBaselinesRequest {
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='AAAAALHWGpGoYCcYMxiFfmlhvh62Xr2DzYbz/SAfc*****'),
  regionId?: string(name='RegionId', description='RegionId', example='cn-hangzhou'),
}

model ListAccountFactoryBaselinesResponseBody = {
  baselines?: [ 
    {
      baselineId?: string(name='BaselineId', example='afb-bp1durvn3lgqe28v****'),
      baselineName?: string(name='BaselineName', example='Default'),
      createTime?: string(name='CreateTime', example='2021-11-30T09:09:28Z'),
      description?: string(name='Description'),
      type?: string(name='Type', example='Custom'),
      updateTime?: string(name='UpdateTime', example='2022-12-29T07:08:40Z'),
    }
  ](name='Baselines'),
  nextToken?: string(name='NextToken', example='AAAAALHWGpGoYCcYMxiFfmlhvh62Xr2DzYbz/SAfc*****'),
  requestId?: string(name='RequestId', example='3245E413-7CDD-5287-8988-6A94DE8A8369'),
}

model ListAccountFactoryBaselinesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAccountFactoryBaselinesResponseBody(name='body'),
}

async function listAccountFactoryBaselinesWithOptions(request: ListAccountFactoryBaselinesRequest, runtime: Util.RuntimeOptions): ListAccountFactoryBaselinesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAccountFactoryBaselines',
    version = '2021-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAccountFactoryBaselines(request: ListAccountFactoryBaselinesRequest): ListAccountFactoryBaselinesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAccountFactoryBaselinesWithOptions(request, runtime);
}

model ListEnrolledAccountsRequest {
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='AAAAALHWGpGoYCcYMxiFfmlhvh62Xr2DzYbz/SAfc*****'),
  regionId?: string(name='RegionId', description='RegionId', example='cn-hangzhou'),
}

model ListEnrolledAccountsResponseBody = {
  enrolledAccounts?: [ 
    {
      accountUid?: long(name='AccountUid', example='19534534552*****'),
      baselineId?: string(name='BaselineId'),
      createTime?: string(name='CreateTime', example='2021-11-01T02:38:27Z'),
      displayName?: string(name='DisplayName', example='TestAccount'),
      folderId?: string(name='FolderId', example='fd-5ESoku****'),
      payerAccountUid?: long(name='PayerAccountUid', example='13161210500*****'),
      status?: string(name='Status', example='Running'),
      updateTime?: string(name='UpdateTime', example='2021-11-01T02:38:27Z'),
    }
  ](name='EnrolledAccounts'),
  nextToken?: string(name='NextToken', example='AAAAALHWGpGoYCcYMxiFfmlhvh62Xr2DzYbz/SAfc*****'),
  requestId?: string(name='RequestId', example='768F908D-A66A-5A5D-816C-20C93CBBFEE3'),
}

model ListEnrolledAccountsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListEnrolledAccountsResponseBody(name='body'),
}

async function listEnrolledAccountsWithOptions(request: ListEnrolledAccountsRequest, runtime: Util.RuntimeOptions): ListEnrolledAccountsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListEnrolledAccounts',
    version = '2021-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listEnrolledAccounts(request: ListEnrolledAccountsRequest): ListEnrolledAccountsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEnrolledAccountsWithOptions(request, runtime);
}

