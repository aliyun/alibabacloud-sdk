/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('governance', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model EnrollAccountRequest {
  accountNamePrefix?: string(name='AccountNamePrefix', description='The prefix for the account name of the member.

*   If the account baseline is applied to an account that is newly created, you must configure this parameter.
*   If the account baseline is applied to an existing account, you do not need to configure this parameter.', example='test-account'),
  accountUid?: long(name='AccountUid', description='The account ID.

*   If the account baseline is applied to an account that is newly created, you do not need to configure this parameter.
*   If the account baseline is applied to an existing account, you must configure this parameter.', example='12868156179****'),
  baselineId?: string(name='BaselineId', description='The baseline ID.

If this parameter is left empty, the default baseline is used.', example='afb-bp1durvn3lgqe28v****'),
  baselineItems?: [ 
    {
      config?: string(name='Config', description='The configurations of the baseline item.', example='{\\"Notifications\\":[{\\"GroupKey\\":\\"account_msg\\",\\"Contacts\\":[{\\"Name\\":\\"aa\\"}],\\"PmsgStatus\\":1,\\"EmailStatus\\":1,\\"SmsStatus\\":1}]}'),
      name?: string(name='Name', description='The name of the baseline item.', example='ACS-BP_ACCOUNT_FACTORY_VPC'),
      skip?: boolean(name='Skip', description='Specifies whether to skip the baseline item. Valid values:

*   false: The baseline item is not skipped.
*   true: The baseline item is skipped.', example='false'),
      version?: string(name='Version', description='The version of the baseline item.', example='1.0'),
    }
  ](name='BaselineItems', description='An array that contains baseline items.

If this parameter is specified, the configurations of the baseline items are merged with the baseline of the specified account. The configurations of the same baseline items are subject to the configuration of this parameter. We recommend that you leave this parameter empty and configure the `BaselineId` parameter to specify an account baseline and apply the configuration of the account baseline to the account.'),
  displayName?: string(name='DisplayName', description='The display name of the account.

*   If the account baseline is applied to an account that is newly created, you must configure this parameter.
*   If the account baseline is applied to an existing account, you do not need to configure this parameter.', example='test-account'),
  folderId?: string(name='FolderId', description='The ID of the parent folder.

*   If the account baseline is applied to an account that is newly created, you need to specify a parent folder. If you do not configure this parameter, the account is created in the Root folder.
*   If the account baseline is applied to an existing account, you do not need to configure this parameter.', example='fd-5ESoku****'),
  payerAccountUid?: long(name='PayerAccountUid', description='The ID of the billing account.

*   If the account baseline is applied to an account that is newly created, you need to specify a billing account. If you do not configure this parameter, the self-pay settlement method is used for the account.
*   If the account baseline is applied to an existing account, you do not need to configure this parameter.', example='19534534552****'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  resellAccountType?: string(name='ResellAccountType', description='The identity type of the member. Valid values:

*   resell (default): The member is an account for a reseller. A relationship is automatically established between the member and the reseller. The management account of the resource directory must be used as the billing account of the member.
*   non_resell: The member is not an account for a reseller. The member is an account that is not associated with a reseller. You can directly use the account to purchase Alibaba Cloud resources. The member is used as its own billing account.

> This parameter is available only for resellers at the international site (alibabacloud.com).', example='resell'),
}

model EnrollAccountResponseBody = {
  accountUid?: long(name='AccountUid', description='The account ID.', example='143165363236****'),
  requestId?: string(name='RequestId', description='The request ID.', example='7071E5FA-515E-5F53-B335-B87D619C6A66'),
}

model EnrollAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnrollAccountResponseBody(name='body'),
}

/**
  * You can call this API operation to create a new account or manage an existing account and apply the account baseline to the account.
  * Accounts are created in asynchronous mode. After you create an account, you can apply the account baseline to the account. You can call the [GetEnrolledAccount API](~~GetEnrolledAccount~~) operation to view the details about the account to obtain the result of applying the account baseline to the account.
  *
  * @param request EnrollAccountRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return EnrollAccountResponse
 */
async function enrollAccountWithOptions(request: EnrollAccountRequest, runtime: Util.RuntimeOptions): EnrollAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountNamePrefix)) {
    query['AccountNamePrefix'] = request.accountNamePrefix;
  }
  if (!Util.isUnset(request.accountUid)) {
    query['AccountUid'] = request.accountUid;
  }
  if (!Util.isUnset(request.baselineId)) {
    query['BaselineId'] = request.baselineId;
  }
  if (!Util.isUnset(request.baselineItems)) {
    query['BaselineItems'] = request.baselineItems;
  }
  if (!Util.isUnset(request.displayName)) {
    query['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.folderId)) {
    query['FolderId'] = request.folderId;
  }
  if (!Util.isUnset(request.payerAccountUid)) {
    query['PayerAccountUid'] = request.payerAccountUid;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resellAccountType)) {
    query['ResellAccountType'] = request.resellAccountType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnrollAccount',
    version = '2021-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this API operation to create a new account or manage an existing account and apply the account baseline to the account.
  * Accounts are created in asynchronous mode. After you create an account, you can apply the account baseline to the account. You can call the [GetEnrolledAccount API](~~GetEnrolledAccount~~) operation to view the details about the account to obtain the result of applying the account baseline to the account.
  *
  * @param request EnrollAccountRequest
  * @return EnrollAccountResponse
 */
async function enrollAccount(request: EnrollAccountRequest): EnrollAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return enrollAccountWithOptions(request, runtime);
}

model GetAccountFactoryBaselineRequest {
  baselineId?: string(name='BaselineId', description='The baseline ID.', example='afb-bp1nf0enuzb89az*****'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model GetAccountFactoryBaselineResponseBody = {
  baselineId?: string(name='BaselineId', description='The baseline ID.', example='afb-bp16ae2k8a3yo3d*****'),
  baselineItems?: [ 
    {
      config?: string(name='Config', description='The configuration of the baseline item.

The value is a JSON string.', example='{\\"Notifications\\":[{\\"GroupKey\\":\\"account_msg\\",\\"Contacts\\":[{\\"Name\\":\\"aa\\"}],\\"PmsgStatus\\":1,\\"EmailStatus\\":1,\\"SmsStatus\\":1}]}'),
      name?: string(name='Name', description='The name of the baseline item.', example='1097526274671790'),
      version?: string(name='Version', description='The version of the baseline item.', example='1.0'),
    }
  ](name='BaselineItems', description='The baseline items.'),
  baselineName?: string(name='BaselineName', description='The name of the baseline.', example='Default'),
  createTime?: string(name='CreateTime', description='The time when the baseline was created.', example='2022-11-28T00:46:34Z'),
  description?: string(name='Description', description='The description of the baseline.', example='Default baseline'),
  requestId?: string(name='RequestId', description='The request ID.', example='60D54503-F1F6-51B6-B6FA-A70CBDA2A68C'),
  type?: string(name='Type', description='The type of the baseline. Valid values:

*   System: default baseline.
*   Custom: custom baseline.', example='Custom'),
  updateTime?: string(name='UpdateTime', description='The time when the baseline was updated.', example='2022-11-02T01:00:07Z'),
}

model GetAccountFactoryBaselineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAccountFactoryBaselineResponseBody(name='body'),
}

async function getAccountFactoryBaselineWithOptions(request: GetAccountFactoryBaselineRequest, runtime: Util.RuntimeOptions): GetAccountFactoryBaselineResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.baselineId)) {
    query['BaselineId'] = request.baselineId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAccountFactoryBaseline',
    version = '2021-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAccountFactoryBaseline(request: GetAccountFactoryBaselineRequest): GetAccountFactoryBaselineResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAccountFactoryBaselineWithOptions(request, runtime);
}

model GetEnrolledAccountRequest {
  accountUid?: long(name='AccountUid', description='The account ID.', example='19534534552****'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model GetEnrolledAccountResponseBody = {
  accountUid?: long(name='AccountUid', description='The account ID.', example='12868156179*****'),
  baselineId?: string(name='BaselineId', description='The ID of the baseline that was applied to the account.', example='afb-bp1adadfadsf***'),
  baselineItems?: [ 
    {
      config?: string(name='Config'),
      name?: string(name='Name'),
      skip?: boolean(name='Skip'),
      version?: string(name='Version'),
    }
  ](name='BaselineItems'),
  createTime?: string(name='CreateTime', description='The time at which the account was created.', example='2021-11-01T02:38:27Z'),
  displayName?: string(name='DisplayName', description='The display name of the account.', example='test-account'),
  errorInfo?: {
    code?: string(name='Code', description='The error code returned.', example='CompliancePackExists'),
    message?: string(name='Message', description='The error message returned.', example='The compliance pack already exists.'),
    recommend?: string(name='Recommend', description='The suggestions that are used to resolve the issue.', example='https://next.api.aliyun.com/troubleshoot?q=CompliancePackExists\\\\u0026product=Config'),
    requestId?: string(name='RequestId', description='The request ID.', example='6D5EAA86-2D41-5CB7-8DA7-B60093ACAA4E'),
  }(name='ErrorInfo', description='The error message returned.'),
  folderId?: string(name='FolderId', description='The ID of the parent folder.', example='fd-5ESoku****'),
  initialized?: boolean(name='Initialized', description='Indicates whether the account was initialized.', example='true'),
  inputs?: {
    accountNamePrefix?: string(name='AccountNamePrefix', description='The prefix for the account name of the member.', example='test-account'),
    accountUid?: long(name='AccountUid', description='The account ID.', example='12868156179*****'),
    baselineItems?: [ 
      {
        config?: string(name='Config', description='The configurations of the baseline item.', example='{\\"Contacts\\":[{\\"Name\\":\\"governance\\",\\"Email\\":\\"wibud****@gmail.com\\",\\"Mobile\\":\\"1234\\",\\"Position\\":\\"Other\\"}]}'),
        name?: string(name='Name', description='The name of the baseline item.', example='ACS-BP_ACCOUNT_FACTORY_VPC'),
        skip?: boolean(name='Skip', description='Indicates whether to skip the baseline item.', example='false'),
        version?: string(name='Version', description='The version of the baseline item.', example='1.0'),
      }
    ](name='BaselineItems', description='An array that contains baseline items.'),
    displayName?: string(name='DisplayName', description='The display name of the account.', example='test-account'),
    folderId?: string(name='FolderId', description='The ID of the parent folder.', example='fd-5ESoku****'),
    payerAccountUid?: long(name='PayerAccountUid', description='The ID of the billing account.', example='19534534552*****'),
  }(name='Inputs', description='The input parameters that are used when you enrolled the account.'),
  masterAccountUid?: long(name='MasterAccountUid', description='The ID of the master account to which the account belongs.', example='19534534552*****'),
  payerAccountUid?: long(name='PayerAccountUid', description='The ID of the billing account.', example='19534534552*****'),
  progress?: [ 
    {
      name?: string(name='Name', description='The name of the baseline item.', example='ACS-BP_ACCOUNT_FACTORY_VPC'),
      status?: string(name='Status', description='The status of applying the account baseline to the account. Valid values:

*   Pending: The account is waiting to be created.
*   Running: The account baseline is being applied to the account.
*   Finished: The account baseline is applied to the account.
*   Failed: The account baseline failed to be applied to the account.', example='Running'),
    }
  ](name='Progress', description='The progress of applying the account baseline to the account.'),
  requestId?: string(name='RequestId', description='The request ID.', example='768F908D-A66A-5A5D-816C-20C93CBBFEE3'),
  status?: string(name='Status', description='The creation status of the account. Valid values:

*   Pending: The account is waiting to be created.
*   Running: The account is being created.
*   Finished: The account is created.
*   Failed: The account failed to be created.
*   Scheduling: The account is being scheduled.
*   ScheduleFailed: The account failed to be scheduled.', example='Finished'),
  updateTime?: string(name='UpdateTime', description='The time when the information about the account was updated.', example='2021-11-01T02:38:27Z'),
}

model GetEnrolledAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEnrolledAccountResponseBody(name='body'),
}

async function getEnrolledAccountWithOptions(request: GetEnrolledAccountRequest, runtime: Util.RuntimeOptions): GetEnrolledAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountUid)) {
    query['AccountUid'] = request.accountUid;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetEnrolledAccount',
    version = '2021-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getEnrolledAccount(request: GetEnrolledAccountRequest): GetEnrolledAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEnrolledAccountWithOptions(request, runtime);
}

model ListAccountFactoryBaselinesRequest {
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page.

Valid values: 1 to 100. Default value: 10.', example='10'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request.', example='AAAAALHWGpGoYCcYMxiFfmlhvh62Xr2DzYbz/SAfc*****'),
  regionId?: string(name='RegionId', description='RegionId', example='cn-hangzhou'),
}

model ListAccountFactoryBaselinesResponseBody = {
  baselines?: [ 
    {
      baselineId?: string(name='BaselineId', description='The baseline ID.', example='afb-bp1durvn3lgqe28v****'),
      baselineName?: string(name='BaselineName', description='The name of the baseline.', example='Default'),
      createTime?: string(name='CreateTime', description='The time at which the baseline was created.', example='2021-11-30T09:09:28Z'),
      description?: string(name='Description', description='The description of the baseline.', example='Default baseline'),
      type?: string(name='Type', description='The type of the baseline. Valid values:

*   System: default baseline
*   Custom: custom baseline', example='Custom'),
      updateTime?: string(name='UpdateTime', description='The time when the baseline was updated.', example='2022-12-29T07:08:40Z'),
    }
  ](name='Baselines', description='An array that consists of baselines.'),
  nextToken?: string(name='NextToken', description='The returned value of NextToken is a pagination token, which can be used in the next request to retrieve a new page of results.', example='AAAAALHWGpGoYCcYMxiFfmlhvh62Xr2DzYbz/SAfc*****'),
  requestId?: string(name='RequestId', description='The request ID.', example='3245E413-7CDD-5287-8988-6A94DE8A8369'),
}

model ListAccountFactoryBaselinesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAccountFactoryBaselinesResponseBody(name='body'),
}

async function listAccountFactoryBaselinesWithOptions(request: ListAccountFactoryBaselinesRequest, runtime: Util.RuntimeOptions): ListAccountFactoryBaselinesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAccountFactoryBaselines',
    version = '2021-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAccountFactoryBaselines(request: ListAccountFactoryBaselinesRequest): ListAccountFactoryBaselinesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAccountFactoryBaselinesWithOptions(request, runtime);
}

model ListEnrolledAccountsRequest {
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page.

Valid values: 1 to 100. Default value: 10.', example='10'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request.', example='AAAAALHWGpGoYCcYMxiFfmlhvh62Xr2DzYbz/SAfc*****'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model ListEnrolledAccountsResponseBody = {
  enrolledAccounts?: [ 
    {
      accountUid?: long(name='AccountUid', description='The account ID.', example='19534534552*****'),
      baselineId?: string(name='BaselineId', description='The baseline ID.', example='afb-bp1durvn3lgqe28v****'),
      createTime?: string(name='CreateTime', description='The time at which the account was created.', example='2021-11-01T02:38:27Z'),
      displayName?: string(name='DisplayName', description='The display name of the account.', example='TestAccount'),
      folderId?: string(name='FolderId', description='The ID of the parent folder.', example='fd-5ESoku****'),
      payerAccountUid?: long(name='PayerAccountUid', description='The ID of the billing account.', example='13161210500*****'),
      status?: string(name='Status', description='The creation status of the account. Valid values:

*   Pending: The account is waiting to be created.
*   Running: The account is being created.
*   Finished: The account is created.
*   Failed: The account failed to be created.
*   Scheduling: The account is being scheduled.
*   ScheduleFailed: The account failed to be scheduled.', example='Running'),
      updateTime?: string(name='UpdateTime', description='The time when the information about the account was updated.', example='2021-11-01T02:38:27Z'),
    }
  ](name='EnrolledAccounts', description='The accounts.'),
  nextToken?: string(name='NextToken', description='The returned value of NextToken is a pagination token, which can be used in the next request to retrieve a new page of results.', example='AAAAALHWGpGoYCcYMxiFfmlhvh62Xr2DzYbz/SAfc*****'),
  requestId?: string(name='RequestId', description='The request ID.', example='768F908D-A66A-5A5D-816C-20C93CBBFEE3'),
}

model ListEnrolledAccountsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEnrolledAccountsResponseBody(name='body'),
}

async function listEnrolledAccountsWithOptions(request: ListEnrolledAccountsRequest, runtime: Util.RuntimeOptions): ListEnrolledAccountsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListEnrolledAccounts',
    version = '2021-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listEnrolledAccounts(request: ListEnrolledAccountsRequest): ListEnrolledAccountsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEnrolledAccountsWithOptions(request, runtime);
}

