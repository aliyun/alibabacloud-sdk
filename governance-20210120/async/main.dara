/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'governance';
  @version = '2021-01-20';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model BatchEnrollAccountsRequest {
  accounts?: [ 
    {
      accountUid?: long(name='AccountUid', example='12868156179****'),
    }
  ](name='Accounts', position='Query'),
  baselineId?: string(name='BaselineId', example='afb-bp1durvn3lgqe28v****', position='Query'),
  baselineItems?: [ 
    {
      config?: string(name='Config', example='{\\"Notifications\\":[{\\"GroupKey\\":\\"account_msg\\",\\"Contacts\\":[{\\"Name\\":\\"aa\\"}],\\"PmsgStatus\\":1,\\"EmailStatus\\":1,\\"SmsStatus\\":1}]}'),
      name?: string(name='Name', example='ACS-BP_ACCOUNT_FACTORY_VPC'),
      skip?: boolean(name='Skip', example='false'),
      version?: string(name='Version', example='1.0'),
    }
  ](name='BaselineItems', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model BatchEnrollAccountsResponseBody = {
  requestId?: string(name='RequestId', example='16B208DD-86BD-5E7D-AC93-FFD44B6FBDF1'),
}

model BatchEnrollAccountsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchEnrollAccountsResponseBody(name='body'),
}

async function batchEnrollAccounts(request: BatchEnrollAccountsRequest): BatchEnrollAccountsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchEnrollAccounts', 'POST', '/', 'json', false, 'json', request);
}

model CreateAccountFactoryBaselineRequest {
  baselineItems?: [ 
    {
      config?: string(name='Config', example='{\\"EnabledServices\\":[\\"CEN_TR\\",\\"CDT\\",\\"CMS\\",\\"KMS\\"]}'),
      name?: string(name='Name', example='ACS-BP_ACCOUNT_FACTORY_VPC'),
      version?: string(name='Version', example='1.0'),
    }
  ](name='BaselineItems', position='Query'),
  baselineName?: string(name='BaselineName', position='Query'),
  description?: string(name='Description', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', example='cn-hangzhou', position='Query'),
}

model CreateAccountFactoryBaselineResponseBody = {
  baselineId?: string(name='BaselineId'),
  requestId?: string(name='RequestId', example='A5592E2E-0FC4-557C-B989-DF229B5EBE13'),
}

model CreateAccountFactoryBaselineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAccountFactoryBaselineResponseBody(name='body'),
}

async function createAccountFactoryBaseline(request: CreateAccountFactoryBaselineRequest): CreateAccountFactoryBaselineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAccountFactoryBaseline', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAccountFactoryBaselineRequest {
  baselineId?: string(name='BaselineId', example='afb-bp1durvn3lgqe28v****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DeleteAccountFactoryBaselineResponseBody = {
  requestId?: string(name='RequestId', example='0F45D888-8C4D-55E5-ACA2-D1515159181D'),
}

model DeleteAccountFactoryBaselineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAccountFactoryBaselineResponseBody(name='body'),
}

async function deleteAccountFactoryBaseline(request: DeleteAccountFactoryBaselineRequest): DeleteAccountFactoryBaselineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAccountFactoryBaseline', 'POST', '/', 'json', false, 'json', request);
}

model EnrollAccountRequest {
  accountNamePrefix?: string(name='AccountNamePrefix', description='The prefix for the account name of the member.

*   If the account baseline is applied to an account that is newly created, you must configure this parameter.
*   If the account baseline is applied to an existing account, you do not need to configure this parameter.', example='test-account', position='Query'),
  accountUid?: long(name='AccountUid', description='The account ID.

*   If the account baseline is applied to an account that is newly created, you do not need to configure this parameter.
*   If the account baseline is applied to an existing account, you must configure this parameter.', example='12868156179****', position='Query'),
  baselineId?: string(name='BaselineId', description='The baseline ID.

If this parameter is left empty, the default baseline is used.', example='afb-bp1durvn3lgqe28v****', position='Query'),
  baselineItems?: [ 
    {
      config?: string(name='Config', description='The configurations of the baseline item.', example='{\\"Notifications\\":[{\\"GroupKey\\":\\"account_msg\\",\\"Contacts\\":[{\\"Name\\":\\"aa\\"}],\\"PmsgStatus\\":1,\\"EmailStatus\\":1,\\"SmsStatus\\":1}]}'),
      name?: string(name='Name', description='The name of the baseline item.', example='ACS-BP_ACCOUNT_FACTORY_VPC'),
      skip?: boolean(name='Skip', description='Specifies whether to skip the baseline item. Valid values:

*   false: The baseline item is not skipped.
*   true: The baseline item is skipped.', example='false'),
      version?: string(name='Version', description='The version of the baseline item.', example='1.0'),
    }
  ](name='BaselineItems', description='An array that contains baseline items.

If this parameter is specified, the configurations of the baseline items are merged with the baseline of the specified account. The configurations of the same baseline items are subject to the configuration of this parameter. We recommend that you leave this parameter empty and configure the `BaselineId` parameter to specify an account baseline and apply the configuration of the account baseline to the account.', position='Query'),
  displayName?: string(name='DisplayName', description='The display name of the account.

*   If the account baseline is applied to an account that is newly created, you must configure this parameter.
*   If the account baseline is applied to an existing account, you do not need to configure this parameter.', example='test-account', position='Query'),
  folderId?: string(name='FolderId', description='The ID of the parent folder.

*   If the account baseline is applied to an account that is newly created, you need to specify a parent folder. If you do not configure this parameter, the account is created in the Root folder.
*   If the account baseline is applied to an existing account, you do not need to configure this parameter.', example='fd-5ESoku****', position='Query'),
  payerAccountUid?: long(name='PayerAccountUid', description='The ID of the billing account.

*   If the account baseline is applied to an account that is newly created, you need to specify a billing account. If you do not configure this parameter, the self-pay settlement method is used for the account.
*   If the account baseline is applied to an existing account, you do not need to configure this parameter.', example='19534534552****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  resellAccountType?: string(name='ResellAccountType', description='The identity type of the member. Valid values:

*   resell (default): The member is an account for a reseller. A relationship is automatically established between the member and the reseller. The management account of the resource directory must be used as the billing account of the member.
*   non_resell: The member is not an account for a reseller. The member is an account that is not associated with a reseller. You can directly use the account to purchase Alibaba Cloud resources. The member is used as its own billing account.

> This parameter is available only for resellers at the international site (alibabacloud.com).', example='resell', position='Query'),
}

model EnrollAccountResponseBody = {
  accountUid?: long(name='AccountUid', description='The account ID.', example='143165363236****'),
  requestId?: string(name='RequestId', description='The request ID.', example='7071E5FA-515E-5F53-B335-B87D619C6A66'),
}

model EnrollAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnrollAccountResponseBody(name='body'),
}

/**
  * You can call this API operation to create a new account or manage an existing account and apply the account baseline to the account.
  * Accounts are created in asynchronous mode. After you create an account, you can apply the account baseline to the account. You can call the [GetEnrolledAccount API](~~GetEnrolledAccount~~) operation to view the details about the account to obtain the result of applying the account baseline to the account.
  *
 */
async function enrollAccount(request: EnrollAccountRequest): EnrollAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnrollAccount', 'POST', '/', 'json', false, 'json', request);
}

model GetAccountFactoryBaselineRequest {
  baselineId?: string(name='BaselineId', description='The baseline ID.', example='afb-bp1nf0enuzb89az*****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model GetAccountFactoryBaselineResponseBody = {
  baselineId?: string(name='BaselineId', description='The baseline ID.', example='afb-bp16ae2k8a3yo3d*****'),
  baselineItems?: [ 
    {
      config?: string(name='Config', description='The configuration of the baseline item.

The value is a JSON string.', example='{\\"Notifications\\":[{\\"GroupKey\\":\\"account_msg\\",\\"Contacts\\":[{\\"Name\\":\\"aa\\"}],\\"PmsgStatus\\":1,\\"EmailStatus\\":1,\\"SmsStatus\\":1}]}'),
      name?: string(name='Name', description='The name of the baseline item.', example='1097526274671790'),
      version?: string(name='Version', description='The version of the baseline item.', example='1.0'),
    }
  ](name='BaselineItems', description='The baseline items.'),
  baselineName?: string(name='BaselineName', description='The name of the baseline.', example='Default'),
  createTime?: string(name='CreateTime', description='The time when the baseline was created.', example='2022-11-28T00:46:34Z'),
  description?: string(name='Description', description='The description of the baseline.', example='Default baseline'),
  requestId?: string(name='RequestId', description='The request ID.', example='60D54503-F1F6-51B6-B6FA-A70CBDA2A68C'),
  type?: string(name='Type', description='The type of the baseline. Valid values:

*   System: default baseline.
*   Custom: custom baseline.', example='Custom'),
  updateTime?: string(name='UpdateTime', description='The time when the baseline was updated.', example='2022-11-02T01:00:07Z'),
}

model GetAccountFactoryBaselineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAccountFactoryBaselineResponseBody(name='body'),
}

async function getAccountFactoryBaseline(request: GetAccountFactoryBaselineRequest): GetAccountFactoryBaselineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAccountFactoryBaseline', 'POST', '/', 'json', false, 'json', request);
}

model GetEnrolledAccountRequest {
  accountUid: long(name='AccountUid', description='The account ID.', example='19534534552****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model GetEnrolledAccountResponseBody = {
  accountUid?: long(name='AccountUid', description='The account ID.', example='12868156179*****'),
  baselineId?: string(name='BaselineId', description='The ID of the baseline that is implemented.', example='afb-bp1adadfadsf***'),
  baselineItems?: [ 
    {
      config?: string(name='Config', description='The configurations of the baseline item.', example='{\\"Notifications\\":[{\\"GroupKey\\":\\"account_msg\\",\\"Contacts\\":[{\\"Name\\":\\"aa\\"}],\\"PmsgStatus\\":1,\\"EmailStatus\\":1,\\"SmsStatus\\":1}]}'),
      name?: string(name='Name', description='The name of the baseline item.', example='ACS-BP_ACCOUNT_FACTORY_VPC'),
      skip?: boolean(name='Skip', description='Indicates whether baseline item is skipped. Valid values:

*   false
*   true', example='false'),
      version?: string(name='Version', description='The version of the baseline item.', example='1.0'),
    }
  ](name='BaselineItems', description='An array that contains baseline items.'),
  createTime?: string(name='CreateTime', description='The time when the account was created.', example='2021-11-01T02:38:27Z'),
  displayName?: string(name='DisplayName', description='The display name of the account.', example='test-account'),
  errorInfo?: {
    code?: string(name='Code', description='The error code.', example='CompliancePackExists'),
    message?: string(name='Message', description='The error message.', example='The compliance pack already exists.'),
    recommend?: string(name='Recommend', description='The recommended solution.', example='https://next.api.aliyun.com/troubleshoot?q=CompliancePackExists\\\\u0026product=Config'),
    requestId?: string(name='RequestId', description='The request ID.', example='6D5EAA86-2D41-5CB7-8DA7-B60093ACAA4E'),
  }(name='ErrorInfo', description='The error message.

>  This parameter is returned if the value of `Status` is `Failed` or `ScheduleFailed`.'),
  folderId?: string(name='FolderId', description='The ID of the parent folder.', example='fd-5ESoku****'),
  initialized?: boolean(name='Initialized', description='Indicates whether the initialization is complete. Valid values:

*   false
*   true', example='true'),
  inputs?: {
    accountNamePrefix?: string(name='AccountNamePrefix', description='The prefix of the account name.', example='test-account'),
    accountUid?: long(name='AccountUid', description='The account ID.', example='12868156179*****'),
    baselineItems?: [ 
      {
        config?: string(name='Config', description='The configurations of the baseline item.', example='{\\"Contacts\\":[{\\"Name\\":\\"governance\\",\\"Email\\":\\"wibud****@gmail.com\\",\\"Mobile\\":\\"1234\\",\\"Position\\":\\"Other\\"}]}'),
        name?: string(name='Name', description='The name of the baseline item.', example='ACS-BP_ACCOUNT_FACTORY_VPC'),
        skip?: boolean(name='Skip', description='Indicates whether baseline item is skipped. Valid values:

*   false
*   true', example='false'),
        version?: string(name='Version', description='The version of the baseline item.', example='1.0'),
      }
    ](name='BaselineItems', description='The baseline items.'),
    displayName?: string(name='DisplayName', description='The display name of the account.', example='test-account'),
    folderId?: string(name='FolderId', description='The ID of the parent folder.', example='fd-5ESoku****'),
    payerAccountUid?: long(name='PayerAccountUid', description='The ID of the settlement account.', example='19534534552*****'),
  }(name='Inputs', description='The input parameters that are used when the account was registered.'),
  masterAccountUid?: long(name='MasterAccountUid', description='The ID of the management account of the resource directory to which the account belongs.', example='19534534552*****'),
  payerAccountUid?: long(name='PayerAccountUid', description='The ID of the settlement account.', example='19534534552*****'),
  progress?: [ 
    {
      name?: string(name='Name', description='The name of the baseline item.', example='ACS-BP_ACCOUNT_FACTORY_VPC'),
      status?: string(name='Status', description='The status of applying the baseline to the account. Valid values:

*   Pending: The baseline is pending to be applied to the account.
*   Running: The baseline is being applied to the account.
*   Finished: : The baseline is applied to the account.
*   Failed: : The baseline fails to be applied to the account.', example='Running'),
    }
  ](name='Progress', description='The progress of the applying the baseline to the account.'),
  requestId?: string(name='RequestId', description='The request ID.', example='768F908D-A66A-5A5D-816C-20C93CBBFEE3'),
  status?: string(name='Status', description='The status of the account. Valid values:

*   Pending: The account is pending to be created.
*   Running: The account is being created.
*   Finished: The account is created.
*   Failed: The account fails to be created.
*   Scheduling: The account is being scheduled.
*   ScheduleFailed: The account fails to be scheduled.', example='Finished'),
  updateTime?: string(name='UpdateTime', description='The time when the information about the account was updated.', example='2021-11-01T02:38:27Z'),
}

model GetEnrolledAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEnrolledAccountResponseBody(name='body'),
}

async function getEnrolledAccount(request: GetEnrolledAccountRequest): GetEnrolledAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEnrolledAccount', 'POST', '/', 'json', false, 'json', request);
}

model ListAccountFactoryBaselineItemsRequest {
  maxResults?: int32(name='MaxResults', example='10', position='Query'),
  names?: [ string ](name='Names', position='Query'),
  nextToken?: string(name='NextToken', example='AAAAACDGQdAEX3m42z3sQ+f3VTK2Xr2DzYbz/SAfc/zJRqod', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', example='cn-hangzhou', position='Query'),
  type?: string(name='Type', example='AccountFactory', position='Query'),
  versions?: [ string ](name='Versions', position='Query'),
}

model ListAccountFactoryBaselineItemsResponseBody = {
  baselineItems?: [ 
    {
      dependsOn?: [ 
        {
          name?: string(name='Name', example='ACS-BP_ACCOUNT_FACTORY_VPC'),
          type?: string(name='Type', example='AccountFactory'),
          version?: string(name='Version', example='1.0'),
        }
      ](name='DependsOn'),
      description?: string(name='Description', example='Notification.'),
      name?: string(name='Name', example='ACS-BP_ACCOUNT_FACTORY_ACCOUNT_NOTIFICATION'),
      type?: string(name='Type', example='AccountFactory'),
      version?: string(name='Version', example='1.0'),
    }
  ](name='BaselineItems'),
  nextToken?: string(name='NextToken', example='AAAAACDGQdAEX3m42z3sQ+f3VTK2Xr2DzYbz/SAfc/zJRqod'),
  requestId?: string(name='RequestId', example='B40D73D8-76AC-5D3C-AC63-4FC8AFCE6671'),
}

model ListAccountFactoryBaselineItemsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAccountFactoryBaselineItemsResponseBody(name='body'),
}

async function listAccountFactoryBaselineItems(request: ListAccountFactoryBaselineItemsRequest): ListAccountFactoryBaselineItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAccountFactoryBaselineItems', 'POST', '/', 'json', false, 'json', request);
}

model ListAccountFactoryBaselinesRequest {
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page.

Valid values: 1 to 100. Default value: 10.', example='10', position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request.', example='AAAAALHWGpGoYCcYMxiFfmlhvh62Xr2DzYbz/SAfc*****', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', example='cn-hangzhou', position='Query'),
}

model ListAccountFactoryBaselinesResponseBody = {
  baselines?: [ 
    {
      baselineId?: string(name='BaselineId', description='The baseline ID.', example='afb-bp1durvn3lgqe28v****'),
      baselineName?: string(name='BaselineName', description='The name of the baseline.', example='Default'),
      createTime?: string(name='CreateTime', description='The time at which the baseline was created.', example='2021-11-30T09:09:28Z'),
      description?: string(name='Description', description='The description of the baseline.', example='Default baseline'),
      type?: string(name='Type', description='The type of the baseline. Valid values:

*   System: default baseline
*   Custom: custom baseline', example='Custom'),
      updateTime?: string(name='UpdateTime', description='The time when the baseline was updated.', example='2022-12-29T07:08:40Z'),
    }
  ](name='Baselines', description='An array that consists of baselines.'),
  nextToken?: string(name='NextToken', description='The returned value of NextToken is a pagination token, which can be used in the next request to retrieve a new page of results.', example='AAAAALHWGpGoYCcYMxiFfmlhvh62Xr2DzYbz/SAfc*****'),
  requestId?: string(name='RequestId', description='The request ID.', example='3245E413-7CDD-5287-8988-6A94DE8A8369'),
}

model ListAccountFactoryBaselinesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAccountFactoryBaselinesResponseBody(name='body'),
}

async function listAccountFactoryBaselines(request: ListAccountFactoryBaselinesRequest): ListAccountFactoryBaselinesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAccountFactoryBaselines', 'POST', '/', 'json', false, 'json', request);
}

model ListEnrolledAccountsRequest {
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page.

Valid values: 1 to 100. Default value: 10.', example='10', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request.', example='AAAAALHWGpGoYCcYMxiFfmlhvh62Xr2DzYbz/SAfc*****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model ListEnrolledAccountsResponseBody = {
  enrolledAccounts?: [ 
    {
      accountUid?: long(name='AccountUid', description='The account ID.', example='19534534552*****'),
      baselineId?: string(name='BaselineId', description='The baseline ID.', example='afb-bp1durvn3lgqe28v****'),
      createTime?: string(name='CreateTime', description='The time at which the account was created.', example='2021-11-01T02:38:27Z'),
      displayName?: string(name='DisplayName', description='The display name of the account.', example='TestAccount'),
      folderId?: string(name='FolderId', description='The ID of the parent folder.', example='fd-5ESoku****'),
      payerAccountUid?: long(name='PayerAccountUid', description='The ID of the billing account.', example='13161210500*****'),
      status?: string(name='Status', description='The creation status of the account. Valid values:

*   Pending: The account is waiting to be created.
*   Running: The account is being created.
*   Finished: The account is created.
*   Failed: The account failed to be created.
*   Scheduling: The account is being scheduled.
*   ScheduleFailed: The account failed to be scheduled.', example='Running'),
      updateTime?: string(name='UpdateTime', description='The time when the information about the account was updated.', example='2021-11-01T02:38:27Z'),
    }
  ](name='EnrolledAccounts', description='The accounts.'),
  nextToken?: string(name='NextToken', description='The returned value of NextToken is a pagination token, which can be used in the next request to retrieve a new page of results.', example='AAAAALHWGpGoYCcYMxiFfmlhvh62Xr2DzYbz/SAfc*****'),
  requestId?: string(name='RequestId', description='The request ID.', example='768F908D-A66A-5A5D-816C-20C93CBBFEE3'),
}

model ListEnrolledAccountsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEnrolledAccountsResponseBody(name='body'),
}

async function listEnrolledAccounts(request: ListEnrolledAccountsRequest): ListEnrolledAccountsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEnrolledAccounts', 'POST', '/', 'json', false, 'json', request);
}

model ListEvaluationMetadataRequest {
  language?: string(name='Language', example='zh', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ListEvaluationMetadataResponseBody = {
  evaluationMetadata?: [ 
    {
      metadata?: [ 
        {
          category?: string(name='Category', example='Security'),
          description?: string(name='Description'),
          displayName?: string(name='DisplayName'),
          id?: string(name='Id', example='pxgtda****'),
          recommendationLevel?: string(name='RecommendationLevel', example='High'),
          remediationMetadata?: {
            remediation?: [ 
              {
                actions?: [ 
                  {
                    classification?: string(name='Classification', example='UnusedAccessKeyInRamUser'),
                    costDescription?: string(name='CostDescription'),
                    description?: string(name='Description'),
                    guidance?: [ 
                      {
                        buttonName?: string(name='ButtonName'),
                        buttonRef?: string(name='ButtonRef', example='https://ram.console.aliyun.com/users'),
                        content?: string(name='Content'),
                        title?: string(name='Title'),
                      }
                    ](name='Guidance'),
                    notice?: string(name='Notice'),
                    suggestion?: string(name='Suggestion'),
                  }
                ](name='Actions'),
                remediationType?: string(name='RemediationType', example='Manual'),
              }
            ](name='Remediation'),
          }(name='RemediationMetadata'),
          resourceMetadata?: {
            resourcePropertyMetadata?: [ 
              {
                displayName?: string(name='DisplayName'),
                propertyName?: string(name='PropertyName', example='AkLastUsedTime'),
                propertyType?: string(name='PropertyType', example='String'),
              }
            ](name='ResourcePropertyMetadata'),
          }(name='ResourceMetadata'),
          scope?: string(name='Scope', example='Account'),
          stage?: string(name='Stage', example='Released'),
        }
      ](name='Metadata'),
      type?: string(name='Type', example='Metric'),
    }
  ](name='EvaluationMetadata'),
  requestId?: string(name='RequestId', example='16B208DD-86BD-5E7D-AC93-FFD44B6FBDF1'),
}

model ListEvaluationMetadataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEvaluationMetadataResponseBody(name='body'),
}

async function listEvaluationMetadata(request: ListEvaluationMetadataRequest): ListEvaluationMetadataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEvaluationMetadata', 'POST', '/', 'json', false, 'json', request);
}

model ListEvaluationMetricDetailsRequest {
  accountId?: long(name='AccountId', example='103144549568****', position='Query'),
  id?: string(name='Id', example='xfyve5****', position='Query'),
  maxResults?: int32(name='MaxResults', example='5', position='Query'),
  nextToken?: string(name='NextToken', example='AAAAAGEaXR18y1rqykZHIqRuBejOqED4S3Xne33c7zbn****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ListEvaluationMetricDetailsResponseBody = {
  nextToken?: string(name='NextToken', example='AAAAAGEaXR18y1rqykZHIqRuBejOqED4S3Xne33c7zbn****'),
  requestId?: string(name='RequestId', example='AC9BD94C-D20C-4D27-88D4-89E8D75C****'),
  resources?: [ 
    {
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      resourceClassification?: string(name='ResourceClassification', example='RecentUnloginRamUser'),
      resourceId?: string(name='ResourceId', example='26435103783237****'),
      resourceName?: string(name='ResourceName'),
      resourceOwnerId?: long(name='ResourceOwnerId', example='176618589410****'),
      resourceProperties?: [ 
        {
          propertyName?: string(name='PropertyName', example='DisplayName'),
          propertyValue?: string(name='PropertyValue'),
        }
      ](name='ResourceProperties'),
      resourceType?: string(name='ResourceType', example='ACS::RAM::User'),
    }
  ](name='Resources'),
}

model ListEvaluationMetricDetailsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEvaluationMetricDetailsResponseBody(name='body'),
}

async function listEvaluationMetricDetails(request: ListEvaluationMetricDetailsRequest): ListEvaluationMetricDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEvaluationMetricDetails', 'POST', '/', 'json', false, 'json', request);
}

model ListEvaluationResultsRequest {
  accountId?: long(name='AccountId', example='176618589410****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ListEvaluationResultsResponseBody = {
  accountId?: long(name='AccountId', example='176618589410****'),
  requestId?: string(name='RequestId', example='BD57329E-131A-59F4-8746-E1CD8D7B****'),
  results?: {
    evaluationTime?: string(name='EvaluationTime', example='2023-12-13T03:35:00Z'),
    metricResults?: [ 
      {
        evaluationTime?: string(name='EvaluationTime', example='2023-12-13T03:34:02Z'),
        id?: string(name='Id', example='r7xdcu****'),
        resourcesSummary?: {
          nonCompliant?: int32(name='NonCompliant', example='2'),
        }(name='ResourcesSummary'),
        result?: double(name='Result', example='0.67'),
        risk?: string(name='Risk', example='Error'),
        status?: string(name='Status', example='Running'),
      }
    ](name='MetricResults'),
    status?: string(name='Status', example='Running'),
    totalScore?: double(name='TotalScore', example='0.6453'),
  }(name='Results'),
}

model ListEvaluationResultsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEvaluationResultsResponseBody(name='body'),
}

async function listEvaluationResults(request: ListEvaluationResultsRequest): ListEvaluationResultsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEvaluationResults', 'POST', '/', 'json', false, 'json', request);
}

model ListEvaluationScoreHistoryRequest {
  endDate?: string(name='EndDate', example='2024-07-11', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  startDate?: string(name='StartDate', example='2024-06-11', position='Query'),
}

model ListEvaluationScoreHistoryResponseBody = {
  requestId?: string(name='RequestId', example='AC9BD94C-D20C-4D27-88D4-89E8D75C051B'),
  scoreHistory?: {
    totalScoreHistory?: [ 
      {
        evaluationTime?: string(name='EvaluationTime', example='2024-06-30T03:34:02Z'),
        score?: double(name='Score', example='0.6753'),
      }
    ](name='TotalScoreHistory'),
  }(name='ScoreHistory'),
}

model ListEvaluationScoreHistoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEvaluationScoreHistoryResponseBody(name='body'),
}

async function listEvaluationScoreHistory(request: ListEvaluationScoreHistoryRequest): ListEvaluationScoreHistoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEvaluationScoreHistory', 'POST', '/', 'json', false, 'json', request);
}

model RunEvaluationRequest {
  accountId?: long(name='AccountId', example='176618589410****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  scope?: string(name='Scope', example='ResourceDirectory', position='Query'),
}

model RunEvaluationResponseBody = {
  requestId?: string(name='RequestId', example='2D3E2A3A-F2B8-578D-9659-3195F94A****'),
}

model RunEvaluationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunEvaluationResponseBody(name='body'),
}

async function runEvaluation(request: RunEvaluationRequest): RunEvaluationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunEvaluation', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAccountFactoryBaselineRequest {
  baselineId?: string(name='BaselineId', position='Query'),
  baselineItems?: [ 
    {
      config?: string(name='Config', example='{\\"EnabledServices\\":[\\"CEN_TR\\",\\"CDT\\",\\"CMS\\",\\"KMS\\"]}'),
      name?: string(name='Name', example='ACS-BP_ACCOUNT_FACTORY_VPC'),
      version?: string(name='Version', example='1.0'),
    }
  ](name='BaselineItems', position='Query'),
  baselineName?: string(name='BaselineName', position='Query'),
  description?: string(name='Description', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', example='cn-hangzhou', position='Query'),
}

model UpdateAccountFactoryBaselineResponseBody = {
  requestId?: string(name='RequestId', example='C18A891D-7B04-51A1-AAC6-201727A361CE'),
}

model UpdateAccountFactoryBaselineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAccountFactoryBaselineResponseBody(name='body'),
}

async function updateAccountFactoryBaseline(request: UpdateAccountFactoryBaselineRequest): UpdateAccountFactoryBaselineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAccountFactoryBaseline', 'POST', '/', 'json', false, 'json', request);
}

