/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'governance';
  @version = '2021-01-20';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model EnrollAccountRequest {
  accountNamePrefix?: string(name='AccountNamePrefix', description='账号名称前缀', position='Query'),
  accountUid?: long(name='AccountUid', description='注册账号ID', position='Query'),
  baselineItems?: [ 
    {
      config?: string(name='Config', description='基线项配置'),
      name?: string(name='Name', description='基线项名称'),
      skip?: boolean(name='Skip', description='是否跳过基线项'),
      version?: string(name='Version', description='基线项版本'),
    }
  ](name='BaselineItems', description='基线项配置数组', position='Query'),
  displayName?: string(name='DisplayName', description='账号显示名称', position='Query'),
  folderId?: string(name='FolderId', description='父资源夹ID', position='Query'),
  payerAccountUid?: long(name='PayerAccountUid', description='结算账号ID', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Query'),
}

model EnrollAccountResponseBody = {
  accountUid?: long(name='AccountUid', description='注册账号ID'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model EnrollAccountResponse = {
  headers: map[string]string(name='headers'),
  body: EnrollAccountResponseBody(name='body'),
}

async function enrollAccount(request: EnrollAccountRequest): EnrollAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnrollAccount', 'POST', '/', 'json', false, 'json', request);
}

model GetEnrolledAccountRequest {
  accountUid: long(name='AccountUid', description='账号ID', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Query'),
}

model GetEnrolledAccountResponseBody = {
  accountUid?: long(name='AccountUid', description='账号ID'),
  createTime?: string(name='CreateTime', description='创建时间'),
  displayName?: string(name='DisplayName', description='账号显示名称'),
  errorInfo?: {
    code?: string(name='Code', description='错误码'),
    message?: string(name='Message', description='错误信息'),
    recommend?: string(name='Recommend', description='错误处理建议'),
    requestId?: string(name='RequestId', description='请求ID'),
  }(name='ErrorInfo', description='错误信息'),
  folderId?: string(name='FolderId', description='父资源夹ID'),
  initialized?: boolean(name='Initialized', description='是否初始化完成'),
  inputs?: {
    accountNamePrefix?: string(name='AccountNamePrefix', description='账号名称前缀'),
    accountUid?: long(name='AccountUid', description='账号ID'),
    baselineItems?: [ 
      {
        config?: string(name='Config', description='基线项配置'),
        name?: string(name='Name', description='基线项名称'),
        skip?: boolean(name='Skip', description='是否跳过基线项'),
        version?: string(name='Version', description='基线项版本'),
      }
    ](name='BaselineItems', description='基线项配置数组'),
    displayName?: string(name='DisplayName', description='账号展示名称'),
    folderId?: string(name='FolderId', description='父资源夹ID'),
    payerAccountUid?: long(name='PayerAccountUid', description='结算账号ID'),
  }(name='Inputs', description='注册账号时的输入参数'),
  masterAccountUid?: long(name='MasterAccountUid', description='所属的Master账号ID'),
  payerAccountUid?: long(name='PayerAccountUid', description='结算账号ID'),
  progress?: [ 
    {
      name?: string(name='Name', description='基线项名称'),
      status?: string(name='Status', description='基线项实施状态'),
    }
  ](name='Progress', description='基线实施进度'),
  requestId?: string(name='RequestId', description='请求ID'),
  status?: string(name='Status', description='账号注册状态'),
  updateTime?: string(name='UpdateTime', description='更新时间'),
}

model GetEnrolledAccountResponse = {
  headers: map[string]string(name='headers'),
  body: GetEnrolledAccountResponseBody(name='body'),
}

async function getEnrolledAccount(request: GetEnrolledAccountRequest): GetEnrolledAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEnrolledAccount', 'POST', '/', 'json', false, 'json', request);
}

model ListEnrolledAccountsRequest {
  maxResults?: int32(name='MaxResults', description='每页的最大数据条数', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='查询返回结果下一页的令牌。首次调用API不需要NextToken', position='Query'),
  regionId?: string(name='RegionId', description='RegionId', position='Query'),
}

model ListEnrolledAccountsResponseBody = {
  enrolledAccounts?: [ 
    {
      accountUid?: long(name='AccountUid', description='账号ID'),
      createTime?: string(name='CreateTime', description='创建时间'),
      displayName?: string(name='DisplayName', description='账号显示名称'),
      folderId?: string(name='FolderId', description='父资源夹ID'),
      payerAccountUid?: long(name='PayerAccountUid', description='结算账号ID'),
      status?: string(name='Status', description='创建状态'),
      updateTime?: string(name='UpdateTime', description='更新时间'),
    }
  ](name='EnrolledAccounts', description='账号列表'),
  nextToken?: string(name='NextToken', description='查询返回结果下一页的令牌'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model ListEnrolledAccountsResponse = {
  headers: map[string]string(name='headers'),
  body: ListEnrolledAccountsResponseBody(name='body'),
}

async function listEnrolledAccounts(request: ListEnrolledAccountsRequest): ListEnrolledAccountsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEnrolledAccounts', 'POST', '/', 'json', false, 'json', request);
}

