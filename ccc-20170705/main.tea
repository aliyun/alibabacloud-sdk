/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  @endpointMap = {
    ap-northeast-1 = 'ccc.aliyuncs.com',
    ap-south-1 = 'ccc.aliyuncs.com',
    ap-southeast-1 = 'ccc.aliyuncs.com',
    ap-southeast-2 = 'ccc.aliyuncs.com',
    ap-southeast-3 = 'ccc.aliyuncs.com',
    ap-southeast-5 = 'ccc.aliyuncs.com',
    cn-beijing = 'ccc.aliyuncs.com',
    cn-chengdu = 'ccc.aliyuncs.com',
    cn-hongkong = 'ccc.aliyuncs.com',
    cn-huhehaote = 'ccc.aliyuncs.com',
    cn-qingdao = 'ccc.aliyuncs.com',
    cn-shenzhen = 'ccc.aliyuncs.com',
    cn-zhangjiakou = 'ccc.aliyuncs.com',
    eu-central-1 = 'ccc.aliyuncs.com',
    eu-west-1 = 'ccc.aliyuncs.com',
    me-east-1 = 'ccc.aliyuncs.com',
    us-east-1 = 'ccc.aliyuncs.com',
    us-west-1 = 'ccc.aliyuncs.com',
    cn-hangzhou-finance = 'ccc.aliyuncs.com',
    cn-shenzhen-finance-1 = 'ccc.aliyuncs.com',
    cn-shanghai-finance-1 = 'ccc.aliyuncs.com',
    cn-north-2-gov-1 = 'ccc.aliyuncs.com',
  };
  checkConfig(config);
  @endpoint = getEndpoint('ccc', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AbortPredictiveJobsRequest {
  all?: boolean(name='All'),
  instanceId?: string(name='InstanceId'),
  jobGroupId?: string(name='JobGroupId'),
  jobId?: [ string ](name='JobId'),
  skillGroupId?: string(name='SkillGroupId'),
}

model AbortPredictiveJobsResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AbortPredictiveJobsResponse = {
  headers: map[string]string(name='headers'),
  body: AbortPredictiveJobsResponseBody(name='body'),
}

async function abortPredictiveJobsWithOptions(request: AbortPredictiveJobsRequest, runtime: Util.RuntimeOptions): AbortPredictiveJobsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AbortPredictiveJobs', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function abortPredictiveJobs(request: AbortPredictiveJobsRequest): AbortPredictiveJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return abortPredictiveJobsWithOptions(request, runtime);
}

model AddAgentDeviceRequest {
  browserVersion?: string(name='BrowserVersion'),
  clientIp?: string(name='ClientIp'),
  clientPort?: string(name='ClientPort'),
  instanceId?: string(name='InstanceId'),
  remark?: string(name='Remark'),
}

model AddAgentDeviceResponseBody = {
  agentDeviceId?: long(name='AgentDeviceId'),
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddAgentDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: AddAgentDeviceResponseBody(name='body'),
}

async function addAgentDeviceWithOptions(request: AddAgentDeviceRequest, runtime: Util.RuntimeOptions): AddAgentDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddAgentDevice', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addAgentDevice(request: AddAgentDeviceRequest): AddAgentDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return addAgentDeviceWithOptions(request, runtime);
}

model AddBulkPhoneNumbersRequest {
  contactFlowId?: string(name='ContactFlowId'),
  instanceId?: string(name='InstanceId'),
  phoneNumber?: [ string ](name='PhoneNumber'),
  skillGroupId?: [ string ](name='SkillGroupId'),
  usage?: string(name='Usage'),
}

model AddBulkPhoneNumbersResponseBody = {
  arrearagePhoneNumbers?: {
    arrearagePhoneNumber?: [ string ](name='ArrearagePhoneNumber')
  }(name='ArrearagePhoneNumbers'),
  code?: string(name='Code'),
  failedPhoneNumbers?: {
    failedPhoneNumber?: [ string ](name='FailedPhoneNumber')
  }(name='FailedPhoneNumbers'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  phoneNumbers?: {
    phoneNumber?: [ 
    {
      allowOutbound?: boolean(name='AllowOutbound'),
      contactFlow?: {
        contactFlowDescription?: string(name='ContactFlowDescription'),
        contactFlowId?: string(name='ContactFlowId'),
        contactFlowName?: string(name='ContactFlowName'),
        instanceId?: string(name='InstanceId'),
        type?: string(name='Type'),
      }(name='ContactFlow'),
      instanceId?: string(name='InstanceId'),
      number?: string(name='Number'),
      phoneNumberDescription?: string(name='PhoneNumberDescription'),
      phoneNumberId?: string(name='PhoneNumberId'),
      remainingTime?: int32(name='RemainingTime'),
      skillGroups?: {
        skillGroup?: [ 
        {
          skillGroupId?: string(name='SkillGroupId'),
          skillGroupName?: string(name='SkillGroupName'),
        }
      ](name='SkillGroup')
      }(name='SkillGroups'),
      testOnly?: boolean(name='TestOnly'),
      trunks?: int32(name='Trunks'),
      usage?: string(name='Usage'),
    }
  ](name='PhoneNumber')
  }(name='PhoneNumbers'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  userdPhoneNumbers?: {
    userdPhoneNumber?: [ string ](name='UserdPhoneNumber')
  }(name='UserdPhoneNumbers'),
}

model AddBulkPhoneNumbersResponse = {
  headers: map[string]string(name='headers'),
  body: AddBulkPhoneNumbersResponseBody(name='body'),
}

async function addBulkPhoneNumbersWithOptions(request: AddBulkPhoneNumbersRequest, runtime: Util.RuntimeOptions): AddBulkPhoneNumbersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddBulkPhoneNumbers', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addBulkPhoneNumbers(request: AddBulkPhoneNumbersRequest): AddBulkPhoneNumbersResponse {
  var runtime = new Util.RuntimeOptions{};
  return addBulkPhoneNumbersWithOptions(request, runtime);
}

model AddJobsToPredictiveJobGroupRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  jobGroupId?: string(name='JobGroupId'),
  jobsJson?: [ string ](name='JobsJson'),
  skillGroupId?: string(name='SkillGroupId'),
}

model AddJobsToPredictiveJobGroupResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddJobsToPredictiveJobGroupResponse = {
  headers: map[string]string(name='headers'),
  body: AddJobsToPredictiveJobGroupResponseBody(name='body'),
}

async function addJobsToPredictiveJobGroupWithOptions(request: AddJobsToPredictiveJobGroupRequest, runtime: Util.RuntimeOptions): AddJobsToPredictiveJobGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddJobsToPredictiveJobGroup', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addJobsToPredictiveJobGroup(request: AddJobsToPredictiveJobGroupRequest): AddJobsToPredictiveJobGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return addJobsToPredictiveJobGroupWithOptions(request, runtime);
}

model AddPhoneNumberRequest {
  contactFlowId?: string(name='ContactFlowId'),
  instanceId?: string(name='InstanceId'),
  phoneNumber?: string(name='PhoneNumber'),
  usage?: string(name='Usage'),
}

model AddPhoneNumberResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  phoneNumber?: {
    allowOutbound?: boolean(name='AllowOutbound'),
    contactFlow?: {
      contactFlowDescription?: string(name='ContactFlowDescription'),
      contactFlowId?: string(name='ContactFlowId'),
      contactFlowName?: string(name='ContactFlowName'),
      instanceId?: string(name='InstanceId'),
      type?: string(name='Type'),
    }(name='ContactFlow'),
    instanceId?: string(name='InstanceId'),
    number?: string(name='Number'),
    phoneNumberDescription?: string(name='PhoneNumberDescription'),
    phoneNumberId?: string(name='PhoneNumberId'),
    remainingTime?: int32(name='RemainingTime'),
    testOnly?: boolean(name='TestOnly'),
    trunks?: int32(name='Trunks'),
    usage?: string(name='Usage'),
  }(name='PhoneNumber'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddPhoneNumberResponse = {
  headers: map[string]string(name='headers'),
  body: AddPhoneNumberResponseBody(name='body'),
}

async function addPhoneNumberWithOptions(request: AddPhoneNumberRequest, runtime: Util.RuntimeOptions): AddPhoneNumberResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddPhoneNumber', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addPhoneNumber(request: AddPhoneNumberRequest): AddPhoneNumberResponse {
  var runtime = new Util.RuntimeOptions{};
  return addPhoneNumberWithOptions(request, runtime);
}

model AddPhoneTagsRequest {
  concurrency?: int32(name='Concurrency'),
  instanceId?: string(name='InstanceId'),
  phoneNumberList?: [ string ](name='PhoneNumberList'),
  provider?: string(name='Provider'),
  regionNameCity?: string(name='RegionNameCity'),
  regionNameProvince?: string(name='RegionNameProvince'),
  serviceTag?: string(name='ServiceTag'),
  sipTag?: string(name='SipTag'),
  type?: int32(name='Type'),
}

model AddPhoneTagsResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddPhoneTagsResponse = {
  headers: map[string]string(name='headers'),
  body: AddPhoneTagsResponseBody(name='body'),
}

async function addPhoneTagsWithOptions(request: AddPhoneTagsRequest, runtime: Util.RuntimeOptions): AddPhoneTagsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddPhoneTags', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addPhoneTags(request: AddPhoneTagsRequest): AddPhoneTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return addPhoneTagsWithOptions(request, runtime);
}

model AssignJobsRequest {
  callingNumber?: [ string ](name='CallingNumber'),
  groupId?: string(name='GroupId'),
  instanceId?: string(name='InstanceId'),
  jobsJson?: [ string ](name='JobsJson'),
  scenarioId?: string(name='ScenarioId'),
  strategyJson?: string(name='StrategyJson'),
}

model AssignJobsResponseBody = {
  code?: string(name='Code'),
  groupId?: string(name='GroupId'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AssignJobsResponse = {
  headers: map[string]string(name='headers'),
  body: AssignJobsResponseBody(name='body'),
}

async function assignJobsWithOptions(request: AssignJobsRequest, runtime: Util.RuntimeOptions): AssignJobsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AssignJobs', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function assignJobs(request: AssignJobsRequest): AssignJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return assignJobsWithOptions(request, runtime);
}

model AssignUsersRequest {
  instanceId?: string(name='InstanceId'),
  roleId?: [ string ](name='RoleId'),
  skillGroupId?: [ string ](name='SkillGroupId'),
  skillLevel?: [ int32 ](name='SkillLevel'),
  userRamId?: [ string ](name='UserRamId'),
}

model AssignUsersResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AssignUsersResponse = {
  headers: map[string]string(name='headers'),
  body: AssignUsersResponseBody(name='body'),
}

async function assignUsersWithOptions(request: AssignUsersRequest, runtime: Util.RuntimeOptions): AssignUsersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AssignUsers', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function assignUsers(request: AssignUsersRequest): AssignUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return assignUsersWithOptions(request, runtime);
}

model CallOnlinePrivacyNumberRequest {
  instanceId?: string(name='InstanceId'),
  telA?: string(name='TelA'),
  telB?: string(name='TelB'),
}

model CallOnlinePrivacyNumberResponseBody = {
  code?: string(name='Code'),
  data?: {
    callId?: string(name='CallId'),
    dateCreated?: string(name='DateCreated'),
    represent?: string(name='Represent'),
    statusCode?: string(name='StatusCode'),
    telX?: string(name='TelX'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CallOnlinePrivacyNumberResponse = {
  headers: map[string]string(name='headers'),
  body: CallOnlinePrivacyNumberResponseBody(name='body'),
}

async function callOnlinePrivacyNumberWithOptions(request: CallOnlinePrivacyNumberRequest, runtime: Util.RuntimeOptions): CallOnlinePrivacyNumberResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CallOnlinePrivacyNumber', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function callOnlinePrivacyNumber(request: CallOnlinePrivacyNumberRequest): CallOnlinePrivacyNumberResponse {
  var runtime = new Util.RuntimeOptions{};
  return callOnlinePrivacyNumberWithOptions(request, runtime);
}

model CancelJobsRequest {
  all?: boolean(name='All'),
  groupId?: string(name='GroupId'),
  instanceId?: string(name='InstanceId'),
  jobId?: [ string ](name='JobId'),
  jobReferenceId?: [ string ](name='JobReferenceId'),
  scenarioId?: string(name='ScenarioId'),
}

model CancelJobsResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CancelJobsResponse = {
  headers: map[string]string(name='headers'),
  body: CancelJobsResponseBody(name='body'),
}

async function cancelJobsWithOptions(request: CancelJobsRequest, runtime: Util.RuntimeOptions): CancelJobsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CancelJobs', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function cancelJobs(request: CancelJobsRequest): CancelJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelJobsWithOptions(request, runtime);
}

model CheckNumberAvaliableRequest {
  callee?: string(name='Callee'),
  caller?: string(name='Caller'),
  instanceId?: string(name='InstanceId'),
}

model CheckNumberAvaliableResponseBody = {
  calleeAvaliable?: {
    avaliable?: boolean(name='Avaliable'),
    reason?: string(name='Reason'),
  }(name='CalleeAvaliable'),
  callerAvaliable?: {
    avaliable?: boolean(name='Avaliable'),
    reason?: string(name='Reason'),
  }(name='CallerAvaliable'),
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CheckNumberAvaliableResponse = {
  headers: map[string]string(name='headers'),
  body: CheckNumberAvaliableResponseBody(name='body'),
}

async function checkNumberAvaliableWithOptions(request: CheckNumberAvaliableRequest, runtime: Util.RuntimeOptions): CheckNumberAvaliableResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CheckNumberAvaliable', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function checkNumberAvaliable(request: CheckNumberAvaliableRequest): CheckNumberAvaliableResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkNumberAvaliableWithOptions(request, runtime);
}

model CommitContactFlowVersionModificationRequest {
  canvas?: string(name='Canvas'),
  contactFlowVersionId?: string(name='ContactFlowVersionId'),
  content?: string(name='Content'),
  instanceId?: string(name='InstanceId'),
}

model CommitContactFlowVersionModificationResponseBody = {
  code?: string(name='Code'),
  contactFlowVersion?: {
    canvas?: string(name='Canvas'),
    contactFlowVersionDescription?: string(name='ContactFlowVersionDescription'),
    contactFlowVersionId?: string(name='ContactFlowVersionId'),
    content?: string(name='Content'),
    lastModified?: string(name='LastModified'),
    lastModifiedBy?: string(name='LastModifiedBy'),
    lockedBy?: string(name='LockedBy'),
    status?: string(name='Status'),
    version?: string(name='Version'),
  }(name='ContactFlowVersion'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CommitContactFlowVersionModificationResponse = {
  headers: map[string]string(name='headers'),
  body: CommitContactFlowVersionModificationResponseBody(name='body'),
}

async function commitContactFlowVersionModificationWithOptions(request: CommitContactFlowVersionModificationRequest, runtime: Util.RuntimeOptions): CommitContactFlowVersionModificationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CommitContactFlowVersionModification', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function commitContactFlowVersionModification(request: CommitContactFlowVersionModificationRequest): CommitContactFlowVersionModificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return commitContactFlowVersionModificationWithOptions(request, runtime);
}

model CreateBatchJobsRequest {
  callingNumber?: [ string ](name='CallingNumber'),
  description?: string(name='Description'),
  instanceId?: string(name='InstanceId'),
  jobFilePath?: string(name='JobFilePath'),
  name?: string(name='Name'),
  scenarioId?: string(name='ScenarioId'),
  strategyJson?: string(name='StrategyJson'),
  submitted?: boolean(name='Submitted'),
}

model CreateBatchJobsResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  jobGroup?: {
    callingNumbers?: [ string ](name='CallingNumbers'),
    creationTime?: long(name='CreationTime'),
    jobFilePath?: string(name='JobFilePath'),
    jobGroupDescription?: string(name='JobGroupDescription'),
    jobGroupId?: string(name='JobGroupId'),
    jobGroupName?: string(name='JobGroupName'),
    scenarioId?: string(name='ScenarioId'),
    strategy?: {
      customized?: string(name='Customized'),
      endTime?: long(name='EndTime'),
      followUpStrategy?: string(name='FollowUpStrategy'),
      isTemplate?: boolean(name='IsTemplate'),
      maxAttemptsPerDay?: int32(name='MaxAttemptsPerDay'),
      minAttemptInterval?: int32(name='MinAttemptInterval'),
      repeatBy?: string(name='RepeatBy'),
      repeatDays?: [ string ](name='RepeatDays'),
      routingStrategy?: string(name='RoutingStrategy'),
      startTime?: long(name='StartTime'),
      strategyDescription?: string(name='StrategyDescription'),
      strategyId?: string(name='StrategyId'),
      strategyName?: string(name='StrategyName'),
      type?: string(name='Type'),
      workingTime?: [ 
        {
          beginTime?: string(name='BeginTime'),
          endTime?: string(name='EndTime'),
        }
      ](name='WorkingTime'),
    }(name='Strategy'),
  }(name='JobGroup'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateBatchJobsResponse = {
  headers: map[string]string(name='headers'),
  body: CreateBatchJobsResponseBody(name='body'),
}

async function createBatchJobsWithOptions(request: CreateBatchJobsRequest, runtime: Util.RuntimeOptions): CreateBatchJobsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateBatchJobs', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createBatchJobs(request: CreateBatchJobsRequest): CreateBatchJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return createBatchJobsWithOptions(request, runtime);
}

model CreateCabInstanceRequest {
  callCenterInstanceId?: string(name='CallCenterInstanceId'),
  instanceDescription?: string(name='InstanceDescription'),
  instanceName?: string(name='InstanceName'),
  maxConcurrentConversation?: int32(name='MaxConcurrentConversation'),
}

model CreateCabInstanceResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  instance?: {
    callCenterInstanceId?: string(name='CallCenterInstanceId'),
    creationTime?: long(name='CreationTime'),
    instanceDescription?: string(name='InstanceDescription'),
    instanceId?: string(name='InstanceId'),
    instanceName?: string(name='InstanceName'),
    maxConcurrentConversation?: int32(name='MaxConcurrentConversation'),
    owner?: string(name='Owner'),
  }(name='Instance'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateCabInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCabInstanceResponseBody(name='body'),
}

async function createCabInstanceWithOptions(request: CreateCabInstanceRequest, runtime: Util.RuntimeOptions): CreateCabInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateCabInstance', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createCabInstance(request: CreateCabInstanceRequest): CreateCabInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCabInstanceWithOptions(request, runtime);
}

model CreateContactFlowRequest {
  canvas?: string(name='Canvas'),
  content?: string(name='Content'),
  description?: string(name='Description'),
  instanceId?: string(name='InstanceId'),
  name?: string(name='Name'),
  type?: string(name='Type'),
}

model CreateContactFlowResponseBody = {
  code?: string(name='Code'),
  contactFlow?: {
    appliedVersion?: string(name='AppliedVersion'),
    contactFlowDescription?: string(name='ContactFlowDescription'),
    contactFlowId?: string(name='ContactFlowId'),
    contactFlowName?: string(name='ContactFlowName'),
    instanceId?: string(name='InstanceId'),
    phoneNumbers?: {
      phoneNumber?: [ 
      {
        allowOutbound?: boolean(name='AllowOutbound'),
        instanceId?: string(name='InstanceId'),
        number?: string(name='Number'),
        phoneNumberDescription?: string(name='PhoneNumberDescription'),
        phoneNumberId?: string(name='PhoneNumberId'),
        remainingTime?: int32(name='RemainingTime'),
        testOnly?: boolean(name='TestOnly'),
        trunks?: int32(name='Trunks'),
        usage?: string(name='Usage'),
      }
    ](name='PhoneNumber')
    }(name='PhoneNumbers'),
    type?: string(name='Type'),
    versions?: {
      contactFlowVersion?: [ 
      {
        canvas?: string(name='Canvas'),
        contactFlowVersionDescription?: string(name='ContactFlowVersionDescription'),
        contactFlowVersionId?: string(name='ContactFlowVersionId'),
        content?: string(name='Content'),
        lastModified?: string(name='LastModified'),
        lastModifiedBy?: string(name='LastModifiedBy'),
        lockedBy?: string(name='LockedBy'),
        status?: string(name='Status'),
        version?: string(name='Version'),
      }
    ](name='ContactFlowVersion')
    }(name='Versions'),
  }(name='ContactFlow'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateContactFlowResponse = {
  headers: map[string]string(name='headers'),
  body: CreateContactFlowResponseBody(name='body'),
}

async function createContactFlowWithOptions(request: CreateContactFlowRequest, runtime: Util.RuntimeOptions): CreateContactFlowResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateContactFlow', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createContactFlow(request: CreateContactFlowRequest): CreateContactFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return createContactFlowWithOptions(request, runtime);
}

model CreateFaultRequest {
  agentFilePath?: string(name='AgentFilePath'),
  agentId?: long(name='AgentId'),
  agentOssFileName?: string(name='AgentOssFileName'),
  browserVersion?: string(name='BrowserVersion'),
  clientIp?: string(name='ClientIp'),
  clientPort?: string(name='ClientPort'),
  connectId?: string(name='ConnectId'),
  customFilePath?: string(name='CustomFilePath'),
  customOssFileName?: string(name='CustomOssFileName'),
  description?: string(name='Description'),
  endTime?: long(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  microphoneEquipment?: string(name='MicrophoneEquipment'),
  microphoneList?: string(name='MicrophoneList'),
  operatingSystemVersion?: string(name='OperatingSystemVersion'),
  serviceIp?: string(name='ServiceIp'),
  servicePort?: string(name='ServicePort'),
  speakerEquipment?: string(name='SpeakerEquipment'),
  speakerList?: string(name='SpeakerList'),
  startTime?: long(name='StartTime'),
}

model CreateFaultResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateFaultResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFaultResponseBody(name='body'),
}

async function createFaultWithOptions(request: CreateFaultRequest, runtime: Util.RuntimeOptions): CreateFaultResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateFault', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createFault(request: CreateFaultRequest): CreateFaultResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFaultWithOptions(request, runtime);
}

model CreateInstanceRequest {
  adminRamId?: [ string ](name='AdminRamId'),
  description?: string(name='Description'),
  directoryId?: string(name='DirectoryId'),
  domainName?: string(name='DomainName'),
  name?: string(name='Name'),
  phoneNumber?: string(name='PhoneNumber'),
  phoneNumbers?: [ string ](name='PhoneNumbers'),
  storageMaxDays?: int32(name='StorageMaxDays'),
  storageMaxSize?: int32(name='StorageMaxSize'),
  userObject?: [ string ](name='UserObject'),
}

model CreateInstanceResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  instance?: {
    admin?: {
      user?: [ 
      {
        detail?: {
          department?: string(name='Department'),
          displayName?: string(name='DisplayName'),
          email?: string(name='Email'),
          loginName?: string(name='LoginName'),
          phone?: string(name='Phone'),
        }(name='Detail'),
        instanceId?: string(name='InstanceId'),
        ramId?: string(name='RamId'),
        userId?: string(name='UserId'),
      }
    ](name='User')
    }(name='Admin'),
    consoleUrl?: string(name='ConsoleUrl'),
    createdTime?: long(name='CreatedTime'),
    directoryId?: string(name='DirectoryId'),
    domainName?: string(name='DomainName'),
    failLoginNames?: {
      failLoginName?: [ string ](name='FailLoginName')
    }(name='FailLoginNames'),
    failPhoneNumbers?: {
      failPhoneNumber?: [ string ](name='FailPhoneNumber')
    }(name='FailPhoneNumbers'),
    instanceDescription?: string(name='InstanceDescription'),
    instanceId?: string(name='InstanceId'),
    instanceName?: string(name='InstanceName'),
    maxOnlineAgents?: int32(name='MaxOnlineAgents'),
    owner?: string(name='Owner'),
    phoneNumbers?: {
      phoneNumber?: [ 
      {
        allowOutbound?: boolean(name='AllowOutbound'),
        instanceId?: string(name='InstanceId'),
        number?: string(name='Number'),
        phoneNumberDescription?: string(name='PhoneNumberDescription'),
        phoneNumberId?: string(name='PhoneNumberId'),
        remainingTime?: int32(name='RemainingTime'),
        testOnly?: boolean(name='TestOnly'),
        trunks?: int32(name='Trunks'),
        usage?: string(name='Usage'),
      }
    ](name='PhoneNumber')
    }(name='PhoneNumbers'),
    status?: string(name='Status'),
    storageBucket?: string(name='StorageBucket'),
    storageMaxDays?: int32(name='StorageMaxDays'),
    storageMaxSize?: int32(name='StorageMaxSize'),
    successLoginNames?: {
      successLoginName?: [ string ](name='SuccessLoginName')
    }(name='SuccessLoginNames'),
    successPhoneNumbers?: {
      successPhoneNumber?: [ string ](name='SuccessPhoneNumber')
    }(name='SuccessPhoneNumbers'),
    tenantId?: string(name='TenantId'),
  }(name='Instance'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInstanceResponseBody(name='body'),
}

async function createInstanceWithOptions(request: CreateInstanceRequest, runtime: Util.RuntimeOptions): CreateInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateInstance', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInstanceWithOptions(request, runtime);
}

model CreateJobGroupRequest {
  callingNumber?: [ string ](name='CallingNumber'),
  description?: string(name='Description'),
  instanceId?: string(name='InstanceId'),
  name?: string(name='Name'),
  scenarioId?: string(name='ScenarioId'),
  strategyJson?: string(name='StrategyJson'),
}

model CreateJobGroupResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  jobGroup?: {
    callingNumbers?: [ string ](name='CallingNumbers'),
    creationTime?: long(name='CreationTime'),
    jobFilePath?: string(name='JobFilePath'),
    jobGroupDescription?: string(name='JobGroupDescription'),
    jobGroupId?: string(name='JobGroupId'),
    jobGroupName?: string(name='JobGroupName'),
    scenarioId?: string(name='ScenarioId'),
    strategy?: {
      customized?: string(name='Customized'),
      endTime?: long(name='EndTime'),
      followUpStrategy?: string(name='FollowUpStrategy'),
      isTemplate?: boolean(name='IsTemplate'),
      maxAttemptsPerDay?: int32(name='MaxAttemptsPerDay'),
      minAttemptInterval?: int32(name='MinAttemptInterval'),
      repeatBy?: string(name='RepeatBy'),
      repeatDays?: [ string ](name='RepeatDays'),
      routingStrategy?: string(name='RoutingStrategy'),
      startTime?: long(name='StartTime'),
      strategyDescription?: string(name='StrategyDescription'),
      strategyId?: string(name='StrategyId'),
      strategyName?: string(name='StrategyName'),
      type?: string(name='Type'),
      workingTime?: [ 
        {
          from?: string(name='From'),
          to?: string(name='To'),
        }
      ](name='WorkingTime'),
    }(name='Strategy'),
  }(name='JobGroup'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateJobGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateJobGroupResponseBody(name='body'),
}

async function createJobGroupWithOptions(request: CreateJobGroupRequest, runtime: Util.RuntimeOptions): CreateJobGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateJobGroup', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createJobGroup(request: CreateJobGroupRequest): CreateJobGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createJobGroupWithOptions(request, runtime);
}

model CreateMediaRequest {
  content?: string(name='Content'),
  description?: string(name='Description'),
  fileName?: string(name='FileName'),
  instanceId?: string(name='InstanceId'),
  name?: string(name='Name'),
  ossFileName?: string(name='OssFileName'),
  ossFilePath?: string(name='OssFilePath'),
  type?: string(name='Type'),
  uploadResult?: string(name='UploadResult'),
}

model CreateMediaResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  mediaUploadParam?: {
    fileName?: string(name='FileName'),
    id?: string(name='Id'),
    instance?: string(name='Instance'),
    name?: string(name='Name'),
    ossFileName?: string(name='OssFileName'),
    ossFilePath?: string(name='OssFilePath'),
  }(name='MediaUploadParam'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateMediaResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMediaResponseBody(name='body'),
}

async function createMediaWithOptions(request: CreateMediaRequest, runtime: Util.RuntimeOptions): CreateMediaResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateMedia', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createMedia(request: CreateMediaRequest): CreateMediaResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMediaWithOptions(request, runtime);
}

model CreatePredictiveJobGroupRequest {
  description?: string(name='Description'),
  instanceId?: string(name='InstanceId'),
  isDraft?: boolean(name='IsDraft'),
  jobFilePath?: string(name='JobFilePath'),
  jobsJson?: [ string ](name='JobsJson'),
  name?: string(name='Name'),
  ratio?: int32(name='Ratio'),
  skillGroupId?: string(name='SkillGroupId'),
  strategyJson?: string(name='StrategyJson'),
  timingSchedule?: boolean(name='TimingSchedule'),
}

model CreatePredictiveJobGroupResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  jobGroupId?: string(name='JobGroupId'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreatePredictiveJobGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePredictiveJobGroupResponseBody(name='body'),
}

async function createPredictiveJobGroupWithOptions(request: CreatePredictiveJobGroupRequest, runtime: Util.RuntimeOptions): CreatePredictiveJobGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreatePredictiveJobGroup', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createPredictiveJobGroup(request: CreatePredictiveJobGroupRequest): CreatePredictiveJobGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPredictiveJobGroupWithOptions(request, runtime);
}

model CreateScenarioRequest {
  description?: string(name='Description'),
  instanceId?: string(name='InstanceId'),
  name?: string(name='Name'),
  strategyJson?: string(name='StrategyJson'),
  surveysJson?: [ string ](name='SurveysJson'),
  type?: string(name='Type'),
}

model CreateScenarioResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  scenario?: {
    isTemplate?: boolean(name='IsTemplate'),
    scenarioDescription?: string(name='ScenarioDescription'),
    scenarioId?: string(name='ScenarioId'),
    scenarioName?: string(name='ScenarioName'),
    strategy?: {
      customized?: string(name='Customized'),
      endTime?: long(name='EndTime'),
      followUpStrategy?: string(name='FollowUpStrategy'),
      isTemplate?: boolean(name='IsTemplate'),
      maxAttemptsPerDay?: int32(name='MaxAttemptsPerDay'),
      minAttemptInterval?: int32(name='MinAttemptInterval'),
      repeatBy?: string(name='RepeatBy'),
      repeatDays?: [ string ](name='RepeatDays'),
      routingStrategy?: string(name='RoutingStrategy'),
      startTime?: long(name='StartTime'),
      strategyDescription?: string(name='StrategyDescription'),
      strategyId?: string(name='StrategyId'),
      strategyName?: string(name='StrategyName'),
      type?: string(name='Type'),
      workingTime?: [ 
        {
          beginTime?: string(name='BeginTime'),
          endTime?: string(name='EndTime'),
        }
      ](name='WorkingTime'),
    }(name='Strategy'),
    surveys?: [ 
      {
        beebotId?: string(name='BeebotId'),
        intents?: [ 
          {
            intentId?: string(name='IntentId'),
            nodeId?: string(name='NodeId'),
          }
        ](name='Intents'),
        role?: string(name='Role'),
        round?: int32(name='Round'),
        surveyDescription?: string(name='SurveyDescription'),
        surveyId?: string(name='SurveyId'),
        surveyName?: string(name='SurveyName'),
      }
    ](name='Surveys'),
    type?: string(name='Type'),
    variables?: [ 
      {
        key?: string(name='Key'),
        value?: string(name='Value'),
      }
    ](name='Variables'),
  }(name='Scenario'),
  success?: boolean(name='Success'),
}

model CreateScenarioResponse = {
  headers: map[string]string(name='headers'),
  body: CreateScenarioResponseBody(name='body'),
}

async function createScenarioWithOptions(request: CreateScenarioRequest, runtime: Util.RuntimeOptions): CreateScenarioResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateScenario', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createScenario(request: CreateScenarioRequest): CreateScenarioResponse {
  var runtime = new Util.RuntimeOptions{};
  return createScenarioWithOptions(request, runtime);
}

model CreateScenarioFromTemplateRequest {
  description?: string(name='Description'),
  instanceId?: string(name='InstanceId'),
  name?: string(name='Name'),
  templateId?: string(name='TemplateId'),
  variables?: string(name='Variables'),
}

model CreateScenarioFromTemplateResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  scenario?: {
    isTemplate?: boolean(name='IsTemplate'),
    scenarioDescription?: string(name='ScenarioDescription'),
    scenarioId?: string(name='ScenarioId'),
    scenarioName?: string(name='ScenarioName'),
    strategy?: {
      customized?: string(name='Customized'),
      endTime?: long(name='EndTime'),
      followUpStrategy?: string(name='FollowUpStrategy'),
      isTemplate?: boolean(name='IsTemplate'),
      maxAttemptsPerDay?: int32(name='MaxAttemptsPerDay'),
      minAttemptInterval?: int32(name='MinAttemptInterval'),
      repeatBy?: string(name='RepeatBy'),
      repeatDays?: [ string ](name='RepeatDays'),
      routingStrategy?: string(name='RoutingStrategy'),
      startTime?: long(name='StartTime'),
      strategyDescription?: string(name='StrategyDescription'),
      strategyId?: string(name='StrategyId'),
      strategyName?: string(name='StrategyName'),
      type?: string(name='Type'),
      workingTime?: [ 
        {
          beginTime?: string(name='BeginTime'),
          endTime?: string(name='EndTime'),
        }
      ](name='WorkingTime'),
    }(name='Strategy'),
    surveys?: [ 
      {
        beebotId?: string(name='BeebotId'),
        intents?: [ 
          {
            intentId?: string(name='IntentId'),
            nodeId?: string(name='NodeId'),
          }
        ](name='Intents'),
        role?: string(name='Role'),
        round?: int32(name='Round'),
        surveyDescription?: string(name='SurveyDescription'),
        surveyId?: string(name='SurveyId'),
        surveyName?: string(name='SurveyName'),
      }
    ](name='Surveys'),
    type?: string(name='Type'),
    variables?: [ 
      {
        key?: string(name='Key'),
        value?: string(name='Value'),
      }
    ](name='Variables'),
  }(name='Scenario'),
  success?: boolean(name='Success'),
}

model CreateScenarioFromTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateScenarioFromTemplateResponseBody(name='body'),
}

async function createScenarioFromTemplateWithOptions(request: CreateScenarioFromTemplateRequest, runtime: Util.RuntimeOptions): CreateScenarioFromTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateScenarioFromTemplate', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createScenarioFromTemplate(request: CreateScenarioFromTemplateRequest): CreateScenarioFromTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createScenarioFromTemplateWithOptions(request, runtime);
}

model CreateSkillGroupRequest {
  allowPrivateOutboundNumber?: boolean(name='AllowPrivateOutboundNumber'),
  description?: string(name='Description'),
  instanceId?: string(name='InstanceId'),
  name?: string(name='Name'),
  outboundPhoneNumberId?: [ string ](name='OutboundPhoneNumberId'),
  routingStrategy?: string(name='RoutingStrategy'),
  skillLevel?: [ int32 ](name='SkillLevel'),
  userId?: [ string ](name='UserId'),
}

model CreateSkillGroupResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  skillGroupId?: string(name='SkillGroupId'),
  success?: boolean(name='Success'),
}

model CreateSkillGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSkillGroupResponseBody(name='body'),
}

async function createSkillGroupWithOptions(request: CreateSkillGroupRequest, runtime: Util.RuntimeOptions): CreateSkillGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateSkillGroup', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createSkillGroup(request: CreateSkillGroupRequest): CreateSkillGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSkillGroupWithOptions(request, runtime);
}

model CreateSurveyRequest {
  corpora?: string(name='Corpora'),
  description?: string(name='Description'),
  flowJson?: string(name='FlowJson'),
  globalQuestions?: string(name='GlobalQuestions'),
  instanceId?: string(name='InstanceId'),
  name?: string(name='Name'),
  role?: string(name='Role'),
  round?: int32(name='Round'),
  scenarioId?: string(name='ScenarioId'),
  speechOptimizationParam?: string(name='SpeechOptimizationParam'),
}

model CreateSurveyResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  survey?: {
    asrCustomModel?: {
      corpora?: string(name='Corpora'),
      customModelStatus?: int32(name='CustomModelStatus'),
    }(name='AsrCustomModel'),
    description?: string(name='Description'),
    flow?: {
      flowId?: string(name='FlowId'),
      flowJson?: string(name='FlowJson'),
      isPublished?: boolean(name='IsPublished'),
    }(name='Flow'),
    globalQuestions?: string(name='GlobalQuestions'),
    hotWords?: string(name='HotWords'),
    id?: string(name='Id'),
    name?: string(name='Name'),
    role?: string(name='Role'),
    round?: int32(name='Round'),
    scenarioUuid?: string(name='ScenarioUuid'),
    speechOptimizationParam?: string(name='SpeechOptimizationParam'),
  }(name='Survey'),
}

model CreateSurveyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSurveyResponseBody(name='body'),
}

async function createSurveyWithOptions(request: CreateSurveyRequest, runtime: Util.RuntimeOptions): CreateSurveyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateSurvey', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createSurvey(request: CreateSurveyRequest): CreateSurveyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSurveyWithOptions(request, runtime);
}

model CreateUserRequest {
  displayName?: string(name='DisplayName'),
  email?: string(name='Email'),
  instanceId?: string(name='InstanceId'),
  loginName?: string(name='LoginName'),
  phone?: string(name='Phone'),
  privateOutboundNumberId?: string(name='PrivateOutboundNumberId'),
  roleId?: [ string ](name='RoleId'),
  skillGroupId?: [ string ](name='SkillGroupId'),
  skillLevel?: [ int32 ](name='SkillLevel'),
}

model CreateUserResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  userId?: string(name='UserId'),
}

model CreateUserResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUserResponseBody(name='body'),
}

async function createUserWithOptions(request: CreateUserRequest, runtime: Util.RuntimeOptions): CreateUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateUser', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createUser(request: CreateUserRequest): CreateUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUserWithOptions(request, runtime);
}

model CreateVoiceAppraiseRequest {
  contactFlowVersionId?: string(name='ContactFlowVersionId'),
  content?: string(name='Content'),
  instanceId?: string(name='InstanceId'),
  isAppraise?: boolean(name='IsAppraise'),
}

model CreateVoiceAppraiseResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateVoiceAppraiseResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVoiceAppraiseResponseBody(name='body'),
}

async function createVoiceAppraiseWithOptions(request: CreateVoiceAppraiseRequest, runtime: Util.RuntimeOptions): CreateVoiceAppraiseResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateVoiceAppraise', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createVoiceAppraise(request: CreateVoiceAppraiseRequest): CreateVoiceAppraiseResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVoiceAppraiseWithOptions(request, runtime);
}

model DeleteInstanceRequest {
  instanceId?: string(name='InstanceId'),
}

model DeleteInstanceResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteInstanceResponseBody(name='body'),
}

async function deleteInstanceWithOptions(request: DeleteInstanceRequest, runtime: Util.RuntimeOptions): DeleteInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteInstance', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteInstanceWithOptions(request, runtime);
}

model DeleteJobGroupRequest {
  instanceId?: string(name='InstanceId'),
  jobGroupId?: string(name='JobGroupId'),
}

model DeleteJobGroupResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteJobGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteJobGroupResponseBody(name='body'),
}

async function deleteJobGroupWithOptions(request: DeleteJobGroupRequest, runtime: Util.RuntimeOptions): DeleteJobGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteJobGroup', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteJobGroup(request: DeleteJobGroupRequest): DeleteJobGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteJobGroupWithOptions(request, runtime);
}

model DeleteMediaRequest {
  instanceId?: string(name='InstanceId'),
  name?: string(name='Name'),
}

model DeleteMediaResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteMediaResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteMediaResponseBody(name='body'),
}

async function deleteMediaWithOptions(request: DeleteMediaRequest, runtime: Util.RuntimeOptions): DeleteMediaResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteMedia', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteMedia(request: DeleteMediaRequest): DeleteMediaResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMediaWithOptions(request, runtime);
}

model DeletePhoneTagsRequest {
  instanceId?: string(name='InstanceId'),
  phoneNumberList?: [ string ](name='PhoneNumberList'),
}

model DeletePhoneTagsResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeletePhoneTagsResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePhoneTagsResponseBody(name='body'),
}

async function deletePhoneTagsWithOptions(request: DeletePhoneTagsRequest, runtime: Util.RuntimeOptions): DeletePhoneTagsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeletePhoneTags', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deletePhoneTags(request: DeletePhoneTagsRequest): DeletePhoneTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePhoneTagsWithOptions(request, runtime);
}

model DeleteSkillGroupRequest {
  instanceId?: string(name='InstanceId'),
  skillGroupId?: string(name='SkillGroupId'),
}

model DeleteSkillGroupResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteSkillGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSkillGroupResponseBody(name='body'),
}

async function deleteSkillGroupWithOptions(request: DeleteSkillGroupRequest, runtime: Util.RuntimeOptions): DeleteSkillGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteSkillGroup', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteSkillGroup(request: DeleteSkillGroupRequest): DeleteSkillGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSkillGroupWithOptions(request, runtime);
}

model DeleteSurveyRequest {
  instanceId?: string(name='InstanceId'),
  scenarioId?: string(name='ScenarioId'),
  surveyId?: string(name='SurveyId'),
}

model DeleteSurveyResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteSurveyResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSurveyResponseBody(name='body'),
}

async function deleteSurveyWithOptions(request: DeleteSurveyRequest, runtime: Util.RuntimeOptions): DeleteSurveyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteSurvey', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteSurvey(request: DeleteSurveyRequest): DeleteSurveyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSurveyWithOptions(request, runtime);
}

model DialExRequest {
  answerMode?: int32(name='AnswerMode'),
  callee?: string(name='Callee'),
  caller?: string(name='Caller'),
  instanceId?: string(name='InstanceId'),
  provider?: string(name='Provider'),
  routPoint?: string(name='RoutPoint'),
}

model DialExResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  statusCode?: string(name='StatusCode'),
  statusDesc?: string(name='StatusDesc'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
  timeStamp?: string(name='TimeStamp'),
}

model DialExResponse = {
  headers: map[string]string(name='headers'),
  body: DialExResponseBody(name='body'),
}

async function dialExWithOptions(request: DialExRequest, runtime: Util.RuntimeOptions): DialExResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DialEx', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function dialEx(request: DialExRequest): DialExResponse {
  var runtime = new Util.RuntimeOptions{};
  return dialExWithOptions(request, runtime);
}

model DialogueRequest {
  actionKey?: string(name='ActionKey'),
  actionParams?: string(name='ActionParams'),
  callId?: string(name='CallId'),
  callType?: string(name='CallType'),
  calledNumber?: string(name='CalledNumber'),
  callingNumber?: string(name='CallingNumber'),
  instanceId?: string(name='InstanceId'),
  scenarioId?: string(name='ScenarioId'),
  taskId?: string(name='TaskId'),
  utterance?: string(name='Utterance'),
}

model DialogueResponseBody = {
  code?: string(name='Code'),
  feedback?: {
    action?: string(name='Action'),
    actionParams?: string(name='ActionParams'),
    content?: string(name='Content'),
    interruptible?: boolean(name='Interruptible'),
  }(name='Feedback'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DialogueResponse = {
  headers: map[string]string(name='headers'),
  body: DialogueResponseBody(name='body'),
}

async function dialogueWithOptions(request: DialogueRequest, runtime: Util.RuntimeOptions): DialogueResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('Dialogue', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function dialogue(request: DialogueRequest): DialogueResponse {
  var runtime = new Util.RuntimeOptions{};
  return dialogueWithOptions(request, runtime);
}

model DisableTrunkProvidersRequest {
  providerName?: [ string ](name='ProviderName'),
}

model DisableTrunkProvidersResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DisableTrunkProvidersResponse = {
  headers: map[string]string(name='headers'),
  body: DisableTrunkProvidersResponseBody(name='body'),
}

async function disableTrunkProvidersWithOptions(request: DisableTrunkProvidersRequest, runtime: Util.RuntimeOptions): DisableTrunkProvidersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DisableTrunkProviders', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function disableTrunkProviders(request: DisableTrunkProvidersRequest): DisableTrunkProvidersResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableTrunkProvidersWithOptions(request, runtime);
}

model DownloadAllTypeRecordingRequest {
  channel?: string(name='Channel'),
  contactId?: string(name='ContactId'),
  instanceId?: string(name='InstanceId'),
}

model DownloadAllTypeRecordingResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  mediaDownloadParamList?: {
    mediaDownloadParam?: [ 
    {
      fileName?: string(name='FileName'),
      signatureUrl?: string(name='SignatureUrl'),
    }
  ](name='MediaDownloadParam')
  }(name='MediaDownloadParamList'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DownloadAllTypeRecordingResponse = {
  headers: map[string]string(name='headers'),
  body: DownloadAllTypeRecordingResponseBody(name='body'),
}

async function downloadAllTypeRecordingWithOptions(request: DownloadAllTypeRecordingRequest, runtime: Util.RuntimeOptions): DownloadAllTypeRecordingResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DownloadAllTypeRecording', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function downloadAllTypeRecording(request: DownloadAllTypeRecordingRequest): DownloadAllTypeRecordingResponse {
  var runtime = new Util.RuntimeOptions{};
  return downloadAllTypeRecordingWithOptions(request, runtime);
}

model DownloadCabRecordingRequest {
  instanceId?: string(name='InstanceId'),
  taskId?: string(name='TaskId'),
}

model DownloadCabRecordingResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  mediaDownloadParam?: {
    fileName?: string(name='FileName'),
    signatureUrl?: string(name='SignatureUrl'),
  }(name='MediaDownloadParam'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DownloadCabRecordingResponse = {
  headers: map[string]string(name='headers'),
  body: DownloadCabRecordingResponseBody(name='body'),
}

async function downloadCabRecordingWithOptions(request: DownloadCabRecordingRequest, runtime: Util.RuntimeOptions): DownloadCabRecordingResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DownloadCabRecording', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function downloadCabRecording(request: DownloadCabRecordingRequest): DownloadCabRecordingResponse {
  var runtime = new Util.RuntimeOptions{};
  return downloadCabRecordingWithOptions(request, runtime);
}

model DownloadOriginalStatisticsReportRequest {
  instanceId?: string(name='InstanceId'),
  jobGroupId?: string(name='JobGroupId'),
}

model DownloadOriginalStatisticsReportResponseBody = {
  code?: string(name='Code'),
  downloadParams?: {
    signatureUrl?: string(name='SignatureUrl'),
  }(name='DownloadParams'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DownloadOriginalStatisticsReportResponse = {
  headers: map[string]string(name='headers'),
  body: DownloadOriginalStatisticsReportResponseBody(name='body'),
}

async function downloadOriginalStatisticsReportWithOptions(request: DownloadOriginalStatisticsReportRequest, runtime: Util.RuntimeOptions): DownloadOriginalStatisticsReportResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DownloadOriginalStatisticsReport', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function downloadOriginalStatisticsReport(request: DownloadOriginalStatisticsReportRequest): DownloadOriginalStatisticsReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return downloadOriginalStatisticsReportWithOptions(request, runtime);
}

model DownloadRecordingRequest {
  channel?: string(name='Channel'),
  fileName?: string(name='FileName'),
  instanceId?: string(name='InstanceId'),
}

model DownloadRecordingResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  mediaDownloadParam?: {
    fileName?: string(name='FileName'),
    signatureUrl?: string(name='SignatureUrl'),
  }(name='MediaDownloadParam'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DownloadRecordingResponse = {
  headers: map[string]string(name='headers'),
  body: DownloadRecordingResponseBody(name='body'),
}

async function downloadRecordingWithOptions(request: DownloadRecordingRequest, runtime: Util.RuntimeOptions): DownloadRecordingResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DownloadRecording', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function downloadRecording(request: DownloadRecordingRequest): DownloadRecordingResponse {
  var runtime = new Util.RuntimeOptions{};
  return downloadRecordingWithOptions(request, runtime);
}

model DownloadUnreachableContactsRequest {
  instanceId?: string(name='InstanceId'),
  jobGroupId?: string(name='JobGroupId'),
}

model DownloadUnreachableContactsResponseBody = {
  code?: string(name='Code'),
  downloadParams?: {
    signatureUrl?: string(name='SignatureUrl'),
  }(name='DownloadParams'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DownloadUnreachableContactsResponse = {
  headers: map[string]string(name='headers'),
  body: DownloadUnreachableContactsResponseBody(name='body'),
}

async function downloadUnreachableContactsWithOptions(request: DownloadUnreachableContactsRequest, runtime: Util.RuntimeOptions): DownloadUnreachableContactsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DownloadUnreachableContacts', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function downloadUnreachableContacts(request: DownloadUnreachableContactsRequest): DownloadUnreachableContactsResponse {
  var runtime = new Util.RuntimeOptions{};
  return downloadUnreachableContactsWithOptions(request, runtime);
}

model FindUsersRequest {
  criteria?: string(name='Criteria'),
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model FindUsersResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  users?: {
    list?: {
      user?: [ 
      {
        detail?: {
          department?: string(name='Department'),
          displayName?: string(name='DisplayName'),
          email?: string(name='Email'),
          loginName?: string(name='LoginName'),
          phone?: string(name='Phone'),
        }(name='Detail'),
        instanceId?: string(name='InstanceId'),
        privateOutboundNumberId?: string(name='PrivateOutboundNumberId'),
        ramId?: string(name='RamId'),
        roles?: {
          role?: [ 
          {
            instanceId?: string(name='InstanceId'),
            roleDescription?: string(name='RoleDescription'),
            roleId?: string(name='RoleId'),
            roleName?: string(name='RoleName'),
          }
        ](name='Role')
        }(name='Roles'),
        skillLevels?: {
          skillLevel?: [ 
          {
            level?: int32(name='Level'),
            skill?: {
              instanceId?: string(name='InstanceId'),
              skillGroupDescription?: string(name='SkillGroupDescription'),
              skillGroupId?: string(name='SkillGroupId'),
              skillGroupName?: string(name='SkillGroupName'),
            }(name='Skill'),
            skillLevelId?: string(name='SkillLevelId'),
          }
        ](name='SkillLevel')
        }(name='SkillLevels'),
        userId?: string(name='UserId'),
      }
    ](name='User')
    }(name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Users'),
}

model FindUsersResponse = {
  headers: map[string]string(name='headers'),
  body: FindUsersResponseBody(name='body'),
}

async function findUsersWithOptions(request: FindUsersRequest, runtime: Util.RuntimeOptions): FindUsersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('FindUsers', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function findUsers(request: FindUsersRequest): FindUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return findUsersWithOptions(request, runtime);
}

model GenerateAgentStatisticReportRequest {
  agentId?: string(name='AgentId'),
  endDate?: string(name='EndDate'),
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  startDate?: string(name='StartDate'),
}

model GenerateAgentStatisticReportResponseBody = {
  code?: string(name='Code'),
  dataList?: {
    list?: {
      generateAgentStatistic?: [ 
      {
        agentId?: string(name='AgentId'),
        agentName?: string(name='AgentName'),
        averageReadyTime?: long(name='AverageReadyTime'),
        inbound?: {
          averageHoldTime?: long(name='AverageHoldTime'),
          averageRingTime?: long(name='AverageRingTime'),
          averageTalkTime?: long(name='AverageTalkTime'),
          averageWorkTime?: long(name='AverageWorkTime'),
          callsHandled?: long(name='CallsHandled'),
          callsOffered?: long(name='CallsOffered'),
          handleRate?: float(name='HandleRate'),
          maxHoldTime?: long(name='MaxHoldTime'),
          maxRingTime?: long(name='MaxRingTime'),
          maxTalkTime?: long(name='MaxTalkTime'),
          maxWorkTime?: long(name='MaxWorkTime'),
          satisfactionIndex?: float(name='SatisfactionIndex'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
          totalHoldTime?: long(name='TotalHoldTime'),
          totalRingTime?: long(name='TotalRingTime'),
          totalTalkTime?: long(name='TotalTalkTime'),
          totalWorkTime?: long(name='TotalWorkTime'),
        }(name='Inbound'),
        instanceId?: string(name='InstanceId'),
        loginName?: string(name='LoginName'),
        maxReadyTime?: long(name='MaxReadyTime'),
        occupancyRate?: float(name='OccupancyRate'),
        outbound?: {
          answerRate?: float(name='AnswerRate'),
          averageDialingTime?: long(name='AverageDialingTime'),
          averageHoldTime?: long(name='AverageHoldTime'),
          averageTalkTime?: long(name='AverageTalkTime'),
          averageWorkTime?: long(name='AverageWorkTime'),
          callsAnswered?: long(name='CallsAnswered'),
          callsDialed?: long(name='CallsDialed'),
          maxDialingTime?: long(name='MaxDialingTime'),
          maxHoldTime?: long(name='MaxHoldTime'),
          maxTalkTime?: long(name='MaxTalkTime'),
          maxWorkTime?: long(name='MaxWorkTime'),
          satisfactionIndex?: float(name='SatisfactionIndex'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
          totalDialingTime?: long(name='TotalDialingTime'),
          totalHoldTime?: long(name='TotalHoldTime'),
          totalTalkTime?: long(name='TotalTalkTime'),
          totalWorkTime?: long(name='TotalWorkTime'),
        }(name='Outbound'),
        overall?: {
          averageHoldTime?: long(name='AverageHoldTime'),
          averageTalkTime?: long(name='AverageTalkTime'),
          averageWorkTime?: long(name='AverageWorkTime'),
          maxHoldTime?: long(name='MaxHoldTime'),
          maxTalkTime?: long(name='MaxTalkTime'),
          maxWorkTime?: long(name='MaxWorkTime'),
          satisfactionIndex?: float(name='SatisfactionIndex'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
          totalCalls?: long(name='TotalCalls'),
          totalHoldTime?: long(name='TotalHoldTime'),
          totalTalkTime?: long(name='TotalTalkTime'),
          totalWorkTime?: long(name='TotalWorkTime'),
        }(name='Overall'),
        recordDate?: string(name='RecordDate'),
        skillGroupIds?: string(name='SkillGroupIds'),
        skillGroupNames?: string(name='SkillGroupNames'),
        totalBreakTime?: long(name='TotalBreakTime'),
        totalLoggedInTime?: long(name='TotalLoggedInTime'),
        totalReadyTime?: long(name='TotalReadyTime'),
      }
    ](name='GenerateAgentStatistic')
    }(name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='DataList'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GenerateAgentStatisticReportResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateAgentStatisticReportResponseBody(name='body'),
}

async function generateAgentStatisticReportWithOptions(request: GenerateAgentStatisticReportRequest, runtime: Util.RuntimeOptions): GenerateAgentStatisticReportResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GenerateAgentStatisticReport', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function generateAgentStatisticReport(request: GenerateAgentStatisticReportRequest): GenerateAgentStatisticReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateAgentStatisticReportWithOptions(request, runtime);
}

model GetAgentDataRequest {
  endDay?: string(name='EndDay'),
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  startDay?: string(name='StartDay'),
  userId?: string(name='UserId'),
}

model GetAgentDataResponseBody = {
  code?: string(name='Code'),
  dataList?: {
    list?: [ 
      {
        agentId?: string(name='AgentId'),
        agentName?: string(name='AgentName'),
        averageReadyTime?: long(name='AverageReadyTime'),
        inbound?: {
          averageHoldTime?: long(name='AverageHoldTime'),
          averageRingTime?: long(name='AverageRingTime'),
          averageTalkTime?: long(name='AverageTalkTime'),
          averageWorkTime?: long(name='AverageWorkTime'),
          callsHandled?: long(name='CallsHandled'),
          callsOffered?: long(name='CallsOffered'),
          handleRate?: float(name='HandleRate'),
          maxHoldTime?: long(name='MaxHoldTime'),
          maxRingTime?: long(name='MaxRingTime'),
          maxTalkTime?: long(name='MaxTalkTime'),
          maxWorkTime?: long(name='MaxWorkTime'),
          satisfactionIndex?: float(name='SatisfactionIndex'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
          totalHoldTime?: long(name='TotalHoldTime'),
          totalRingTime?: long(name='TotalRingTime'),
          totalTalkTime?: long(name='TotalTalkTime'),
          totalWorkTime?: long(name='TotalWorkTime'),
        }(name='Inbound'),
        instanceId?: string(name='InstanceId'),
        loginName?: string(name='LoginName'),
        maxReadyTime?: long(name='MaxReadyTime'),
        occupancyRate?: float(name='OccupancyRate'),
        outbound?: {
          answerRate?: float(name='AnswerRate'),
          averageDialingTime?: long(name='AverageDialingTime'),
          averageHoldTime?: long(name='AverageHoldTime'),
          averageTalkTime?: long(name='AverageTalkTime'),
          averageWorkTime?: long(name='AverageWorkTime'),
          callsAnswered?: long(name='CallsAnswered'),
          callsDialed?: long(name='CallsDialed'),
          maxDialingTime?: long(name='MaxDialingTime'),
          maxHoldTime?: long(name='MaxHoldTime'),
          maxTalkTime?: long(name='MaxTalkTime'),
          maxWorkTime?: long(name='MaxWorkTime'),
          satisfactionIndex?: float(name='SatisfactionIndex'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
          totalDialingTime?: long(name='TotalDialingTime'),
          totalHoldTime?: long(name='TotalHoldTime'),
          totalTalkTime?: long(name='TotalTalkTime'),
          totalWorkTime?: long(name='TotalWorkTime'),
        }(name='Outbound'),
        overall?: {
          averageHoldTime?: long(name='AverageHoldTime'),
          averageTalkTime?: long(name='AverageTalkTime'),
          averageWorkTime?: long(name='AverageWorkTime'),
          maxHoldTime?: long(name='MaxHoldTime'),
          maxTalkTime?: long(name='MaxTalkTime'),
          maxWorkTime?: long(name='MaxWorkTime'),
          satisfactionIndex?: float(name='SatisfactionIndex'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
          totalCalls?: long(name='TotalCalls'),
          totalHoldTime?: long(name='TotalHoldTime'),
          totalTalkTime?: long(name='TotalTalkTime'),
          totalWorkTime?: long(name='TotalWorkTime'),
        }(name='Overall'),
        recordDate?: string(name='RecordDate'),
        skillGroupIds?: string(name='SkillGroupIds'),
        skillGroupNames?: string(name='SkillGroupNames'),
        totalBreakTime?: long(name='TotalBreakTime'),
        totalLoggedInTime?: long(name='TotalLoggedInTime'),
        totalReadyTime?: long(name='TotalReadyTime'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='DataList'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetAgentDataResponse = {
  headers: map[string]string(name='headers'),
  body: GetAgentDataResponseBody(name='body'),
}

async function getAgentDataWithOptions(request: GetAgentDataRequest, runtime: Util.RuntimeOptions): GetAgentDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetAgentData', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getAgentData(request: GetAgentDataRequest): GetAgentDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAgentDataWithOptions(request, runtime);
}

model GetCallMeasureSummaryReportRequest {
  day?: int32(name='Day'),
  intervalType?: string(name='IntervalType'),
  month?: int32(name='Month'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  year?: int32(name='Year'),
}

model GetCallMeasureSummaryReportResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  numberReports?: {
    list?: {
      numberReport?: [ 
      {
        day?: int32(name='Day'),
        inboundCount?: long(name='InboundCount'),
        inboundDurationByMinute?: long(name='InboundDurationByMinute'),
        month?: int32(name='Month'),
        number?: string(name='Number'),
        outboundCount?: long(name='OutboundCount'),
        outboundDurationByMinute?: long(name='OutboundDurationByMinute'),
        year?: int32(name='Year'),
      }
    ](name='NumberReport')
    }(name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='NumberReports'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  summaryReport?: {
    day?: int32(name='Day'),
    inboundCount?: long(name='InboundCount'),
    inboundDurationByMinute?: long(name='InboundDurationByMinute'),
    month?: int32(name='Month'),
    outboundCount?: long(name='OutboundCount'),
    outboundDurationByMinute?: long(name='OutboundDurationByMinute'),
    year?: int32(name='Year'),
  }(name='SummaryReport'),
}

model GetCallMeasureSummaryReportResponse = {
  headers: map[string]string(name='headers'),
  body: GetCallMeasureSummaryReportResponseBody(name='body'),
}

async function getCallMeasureSummaryReportWithOptions(request: GetCallMeasureSummaryReportRequest, runtime: Util.RuntimeOptions): GetCallMeasureSummaryReportResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetCallMeasureSummaryReport', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getCallMeasureSummaryReport(request: GetCallMeasureSummaryReportRequest): GetCallMeasureSummaryReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCallMeasureSummaryReportWithOptions(request, runtime);
}

model GetConfigRequest {
  instanceId?: string(name='InstanceId'),
  name?: string(name='Name'),
  objectId?: string(name='ObjectId'),
  objectType?: string(name='ObjectType'),
}

model GetConfigResponseBody = {
  code?: string(name='Code'),
  configItem?: {
    name?: string(name='Name'),
    value?: string(name='Value'),
  }(name='ConfigItem'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetConfigResponse = {
  headers: map[string]string(name='headers'),
  body: GetConfigResponseBody(name='body'),
}

async function getConfigWithOptions(request: GetConfigRequest, runtime: Util.RuntimeOptions): GetConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetConfig', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getConfig(request: GetConfigRequest): GetConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return getConfigWithOptions(request, runtime);
}

model GetContactInfoByOutboundTaskIdRequest {
  instanceId?: string(name='InstanceId'),
  outboundTaskId?: string(name='OutboundTaskId'),
  skillGroupId?: string(name='SkillGroupId'),
}

model GetContactInfoByOutboundTaskIdResponseBody = {
  code?: string(name='Code'),
  contactIdentity?: {
    caller?: string(name='Caller'),
    contactReferrnceId?: string(name='ContactReferrnceId'),
    jobGroupId?: string(name='JobGroupId'),
    userPhone?: string(name='UserPhone'),
  }(name='ContactIdentity'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetContactInfoByOutboundTaskIdResponse = {
  headers: map[string]string(name='headers'),
  body: GetContactInfoByOutboundTaskIdResponseBody(name='body'),
}

async function getContactInfoByOutboundTaskIdWithOptions(request: GetContactInfoByOutboundTaskIdRequest, runtime: Util.RuntimeOptions): GetContactInfoByOutboundTaskIdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetContactInfoByOutboundTaskId', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getContactInfoByOutboundTaskId(request: GetContactInfoByOutboundTaskIdRequest): GetContactInfoByOutboundTaskIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getContactInfoByOutboundTaskIdWithOptions(request, runtime);
}

model GetConversationDetailByContactIdRequest {
  contactId?: string(name='ContactId'),
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model GetConversationDetailByContactIdResponseBody = {
  code?: string(name='Code'),
  dataList?: {
    list?: {
      qualityCheckPhrase?: [ 
      {
        begin?: long(name='Begin'),
        end?: long(name='End'),
        identity?: string(name='Identity'),
        role?: string(name='Role'),
        words?: string(name='Words'),
      }
    ](name='QualityCheckPhrase')
    }(name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='DataList'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetConversationDetailByContactIdResponse = {
  headers: map[string]string(name='headers'),
  body: GetConversationDetailByContactIdResponseBody(name='body'),
}

async function getConversationDetailByContactIdWithOptions(request: GetConversationDetailByContactIdRequest, runtime: Util.RuntimeOptions): GetConversationDetailByContactIdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetConversationDetailByContactId', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getConversationDetailByContactId(request: GetConversationDetailByContactIdRequest): GetConversationDetailByContactIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getConversationDetailByContactIdWithOptions(request, runtime);
}

model GetConversationListRequest {
  instanceId?: string(name='InstanceId'),
  taskId?: string(name='TaskId'),
}

model GetConversationListResponseBody = {
  code?: string(name='Code'),
  conversations?: [ 
    {
      script?: string(name='Script'),
      speaker?: string(name='Speaker'),
      summary?: [ 
        {
          category?: string(name='Category'),
          content?: string(name='Content'),
          summaryName?: string(name='SummaryName'),
        }
      ](name='Summary'),
      timestamp?: long(name='Timestamp'),
    }
  ](name='Conversations'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetConversationListResponse = {
  headers: map[string]string(name='headers'),
  body: GetConversationListResponseBody(name='body'),
}

async function getConversationListWithOptions(request: GetConversationListRequest, runtime: Util.RuntimeOptions): GetConversationListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetConversationList', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getConversationList(request: GetConversationListRequest): GetConversationListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getConversationListWithOptions(request, runtime);
}

model GetInstanceRequest {
  instanceId?: string(name='InstanceId'),
}

model GetInstanceResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  instance?: {
    admin?: {
      user?: [ 
      {
        detail?: {
          department?: string(name='Department'),
          displayName?: string(name='DisplayName'),
          email?: string(name='Email'),
          loginName?: string(name='LoginName'),
          phone?: string(name='Phone'),
        }(name='Detail'),
        instanceId?: string(name='InstanceId'),
        ramId?: string(name='RamId'),
        userId?: string(name='UserId'),
      }
    ](name='User')
    }(name='Admin'),
    consoleUrl?: string(name='ConsoleUrl'),
    createdTime?: long(name='CreatedTime'),
    directoryId?: string(name='DirectoryId'),
    domainName?: string(name='DomainName'),
    instanceDescription?: string(name='InstanceDescription'),
    instanceId?: string(name='InstanceId'),
    instanceName?: string(name='InstanceName'),
    maxOnlineAgents?: int32(name='MaxOnlineAgents'),
    owner?: string(name='Owner'),
    phoneNumbers?: {
      phoneNumber?: [ 
      {
        allowOutbound?: boolean(name='AllowOutbound'),
        instanceId?: string(name='InstanceId'),
        number?: string(name='Number'),
        phoneNumberDescription?: string(name='PhoneNumberDescription'),
        phoneNumberId?: string(name='PhoneNumberId'),
        remainingTime?: int32(name='RemainingTime'),
        testOnly?: boolean(name='TestOnly'),
        trunks?: int32(name='Trunks'),
        usage?: string(name='Usage'),
      }
    ](name='PhoneNumber')
    }(name='PhoneNumbers'),
    status?: string(name='Status'),
    storageBucket?: string(name='StorageBucket'),
    storageMaxDays?: int32(name='StorageMaxDays'),
    storageMaxSize?: int32(name='StorageMaxSize'),
    tenantId?: string(name='TenantId'),
  }(name='Instance'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: GetInstanceResponseBody(name='body'),
}

async function getInstanceWithOptions(request: GetInstanceRequest, runtime: Util.RuntimeOptions): GetInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetInstance', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getInstance(request: GetInstanceRequest): GetInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceWithOptions(request, runtime);
}

model GetInstanceStateRequest {
  instanceId?: string(name='InstanceId'),
}

model GetInstanceStateResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  realTimeInstanceState?: {
    agentStateDistributions?: {
      agentStateCount?: [ 
      {
        count?: long(name='Count'),
        state?: string(name='State'),
      }
    ](name='AgentStateCount')
    }(name='AgentStateDistributions'),
  }(name='RealTimeInstanceState'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetInstanceStateResponse = {
  headers: map[string]string(name='headers'),
  body: GetInstanceStateResponseBody(name='body'),
}

async function getInstanceStateWithOptions(request: GetInstanceStateRequest, runtime: Util.RuntimeOptions): GetInstanceStateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetInstanceState', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getInstanceState(request: GetInstanceStateRequest): GetInstanceStateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceStateWithOptions(request, runtime);
}

model GetInstanceSummaryReportRequest {
  endTime?: string(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  startTime?: string(name='StartTime'),
}

model GetInstanceSummaryReportResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  instanceSummaryReport?: {
    inbound?: {
      averageRingTime?: long(name='AverageRingTime'),
      averageTalkTime?: long(name='AverageTalkTime'),
      averageWaitTime?: long(name='AverageWaitTime'),
      averageWorkTime?: long(name='AverageWorkTime'),
      callsAbandonedInIVR?: long(name='CallsAbandonedInIVR'),
      callsAbandonedInQueue?: long(name='CallsAbandonedInQueue'),
      callsHandled?: long(name='CallsHandled'),
      callsIncomingIVR?: long(name='CallsIncomingIVR'),
      callsIncomingLine?: long(name='CallsIncomingLine'),
      callsIncomingQueue?: long(name='CallsIncomingQueue'),
      callsOffered?: long(name='CallsOffered'),
      handleRate?: float(name='HandleRate'),
      maxRingTime?: long(name='MaxRingTime'),
      maxTalkTime?: string(name='MaxTalkTime'),
      maxWaitTime?: long(name='MaxWaitTime'),
      maxWorkTime?: long(name='MaxWorkTime'),
      satisfactionIndex?: float(name='SatisfactionIndex'),
      satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
      satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
      serviceLevel20?: float(name='ServiceLevel20'),
      totalRingTime?: long(name='TotalRingTime'),
      totalTalkTime?: long(name='TotalTalkTime'),
      totalWaitTime?: long(name='TotalWaitTime'),
      totalWorkTime?: long(name='TotalWorkTime'),
    }(name='Inbound'),
    instanceId?: string(name='InstanceId'),
    outbound?: {
      answerRate?: float(name='AnswerRate'),
      averageDialingTime?: long(name='AverageDialingTime'),
      averageTalkTime?: long(name='AverageTalkTime'),
      averageWorkTime?: long(name='AverageWorkTime'),
      callsAnswered?: long(name='CallsAnswered'),
      callsDialed?: long(name='CallsDialed'),
      maxDialingTime?: long(name='MaxDialingTime'),
      maxTalkTime?: long(name='MaxTalkTime'),
      maxWorkTime?: long(name='MaxWorkTime'),
      satisfactionIndex?: float(name='SatisfactionIndex'),
      satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
      satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
      totalDialingTime?: long(name='TotalDialingTime'),
      totalTalkTime?: long(name='TotalTalkTime'),
      totalWorkTime?: long(name='TotalWorkTime'),
    }(name='Outbound'),
    overall?: {
      averageReadyTime?: long(name='AverageReadyTime'),
      averageTalkTime?: long(name='AverageTalkTime'),
      averageWorkTime?: long(name='AverageWorkTime'),
      maxReadyTime?: long(name='MaxReadyTime'),
      maxTalkTime?: long(name='MaxTalkTime'),
      maxWorkTime?: long(name='MaxWorkTime'),
      occupancyRate?: float(name='OccupancyRate'),
      satisfactionIndex?: float(name='SatisfactionIndex'),
      satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
      satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
      totalBreakTime?: long(name='TotalBreakTime'),
      totalCalls?: long(name='TotalCalls'),
      totalLoggedInTime?: long(name='TotalLoggedInTime'),
      totalReadyTime?: long(name='TotalReadyTime'),
      totalTalkTime?: long(name='TotalTalkTime'),
      totalWorkTime?: long(name='TotalWorkTime'),
    }(name='Overall'),
  }(name='InstanceSummaryReport'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetInstanceSummaryReportResponse = {
  headers: map[string]string(name='headers'),
  body: GetInstanceSummaryReportResponseBody(name='body'),
}

async function getInstanceSummaryReportWithOptions(request: GetInstanceSummaryReportRequest, runtime: Util.RuntimeOptions): GetInstanceSummaryReportResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetInstanceSummaryReport', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getInstanceSummaryReport(request: GetInstanceSummaryReportRequest): GetInstanceSummaryReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceSummaryReportWithOptions(request, runtime);
}

model GetInstanceSummaryReportByIntervalRequest {
  endTime?: string(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  interval?: string(name='Interval'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  startTime?: string(name='StartTime'),
}

model GetInstanceSummaryReportByIntervalResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  instanceTimeIntervalReport?: {
    instanceId?: string(name='InstanceId'),
    intervalList?: {
      instanceSummaryReport?: [ 
      {
        inbound?: {
          averageRingTime?: long(name='AverageRingTime'),
          averageTalkTime?: long(name='AverageTalkTime'),
          averageWaitTime?: long(name='AverageWaitTime'),
          averageWorkTime?: long(name='AverageWorkTime'),
          callsAbandonedInIVR?: long(name='CallsAbandonedInIVR'),
          callsAbandonedInQueue?: long(name='CallsAbandonedInQueue'),
          callsHandled?: long(name='CallsHandled'),
          callsIncomingIVR?: long(name='CallsIncomingIVR'),
          callsIncomingLine?: long(name='CallsIncomingLine'),
          callsIncomingQueue?: long(name='CallsIncomingQueue'),
          callsOffered?: long(name='CallsOffered'),
          handleRate?: float(name='HandleRate'),
          maxRingTime?: long(name='MaxRingTime'),
          maxTalkTime?: string(name='MaxTalkTime'),
          maxWaitTime?: long(name='MaxWaitTime'),
          maxWorkTime?: long(name='MaxWorkTime'),
          satisfactionIndex?: float(name='SatisfactionIndex'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
          serviceLevel20?: float(name='ServiceLevel20'),
          totalRingTime?: long(name='TotalRingTime'),
          totalTalkTime?: long(name='TotalTalkTime'),
          totalWaitTime?: long(name='TotalWaitTime'),
          totalWorkTime?: long(name='TotalWorkTime'),
        }(name='Inbound'),
        instanceId?: string(name='InstanceId'),
        outbound?: {
          answerRate?: float(name='AnswerRate'),
          averageDialingTime?: long(name='AverageDialingTime'),
          averageTalkTime?: long(name='AverageTalkTime'),
          averageWorkTime?: long(name='AverageWorkTime'),
          callsAnswered?: long(name='CallsAnswered'),
          callsDialed?: long(name='CallsDialed'),
          maxDialingTime?: long(name='MaxDialingTime'),
          maxTalkTime?: long(name='MaxTalkTime'),
          maxWorkTime?: long(name='MaxWorkTime'),
          satisfactionIndex?: float(name='SatisfactionIndex'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
          totalDialingTime?: long(name='TotalDialingTime'),
          totalTalkTime?: long(name='TotalTalkTime'),
          totalWorkTime?: long(name='TotalWorkTime'),
        }(name='Outbound'),
        overall?: {
          averageReadyTime?: long(name='AverageReadyTime'),
          averageTalkTime?: long(name='AverageTalkTime'),
          averageWorkTime?: long(name='AverageWorkTime'),
          maxReadyTime?: long(name='MaxReadyTime'),
          maxTalkTime?: long(name='MaxTalkTime'),
          maxWorkTime?: long(name='MaxWorkTime'),
          occupancyRate?: float(name='OccupancyRate'),
          satisfactionIndex?: float(name='SatisfactionIndex'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
          totalBreakTime?: long(name='TotalBreakTime'),
          totalCalls?: long(name='TotalCalls'),
          totalLoggedInTime?: long(name='TotalLoggedInTime'),
          totalReadyTime?: long(name='TotalReadyTime'),
          totalTalkTime?: long(name='TotalTalkTime'),
          totalWorkTime?: long(name='TotalWorkTime'),
        }(name='Overall'),
        timestamp?: string(name='Timestamp'),
      }
    ](name='InstanceSummaryReport')
    }(name='IntervalList'),
  }(name='InstanceTimeIntervalReport'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetInstanceSummaryReportByIntervalResponse = {
  headers: map[string]string(name='headers'),
  body: GetInstanceSummaryReportByIntervalResponseBody(name='body'),
}

async function getInstanceSummaryReportByIntervalWithOptions(request: GetInstanceSummaryReportByIntervalRequest, runtime: Util.RuntimeOptions): GetInstanceSummaryReportByIntervalResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetInstanceSummaryReportByInterval', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getInstanceSummaryReportByInterval(request: GetInstanceSummaryReportByIntervalRequest): GetInstanceSummaryReportByIntervalResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceSummaryReportByIntervalWithOptions(request, runtime);
}

model GetInstanceSummaryReportSinceMidnightRequest {
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model GetInstanceSummaryReportSinceMidnightResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  instanceSummaryReport?: {
    inbound?: {
      averageRingTime?: long(name='AverageRingTime'),
      averageTalkTime?: long(name='AverageTalkTime'),
      averageWaitTime?: long(name='AverageWaitTime'),
      averageWorkTime?: long(name='AverageWorkTime'),
      callsAbandonedInIVR?: long(name='CallsAbandonedInIVR'),
      callsAbandonedInQueue?: long(name='CallsAbandonedInQueue'),
      callsHandled?: long(name='CallsHandled'),
      callsIncomingIVR?: long(name='CallsIncomingIVR'),
      callsIncomingLine?: long(name='CallsIncomingLine'),
      callsIncomingQueue?: long(name='CallsIncomingQueue'),
      callsOffered?: long(name='CallsOffered'),
      handleRate?: float(name='HandleRate'),
      maxRingTime?: long(name='MaxRingTime'),
      maxTalkTime?: string(name='MaxTalkTime'),
      maxWaitTime?: long(name='MaxWaitTime'),
      maxWorkTime?: long(name='MaxWorkTime'),
      satisfactionIndex?: float(name='SatisfactionIndex'),
      satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
      satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
      serviceLevel20?: float(name='ServiceLevel20'),
      totalRingTime?: long(name='TotalRingTime'),
      totalTalkTime?: long(name='TotalTalkTime'),
      totalWaitTime?: long(name='TotalWaitTime'),
      totalWorkTime?: long(name='TotalWorkTime'),
    }(name='Inbound'),
    instanceId?: string(name='InstanceId'),
    outbound?: {
      answerRate?: float(name='AnswerRate'),
      averageDialingTime?: long(name='AverageDialingTime'),
      averageTalkTime?: long(name='AverageTalkTime'),
      averageWorkTime?: long(name='AverageWorkTime'),
      callsAnswered?: long(name='CallsAnswered'),
      callsDialed?: long(name='CallsDialed'),
      maxDialingTime?: long(name='MaxDialingTime'),
      maxTalkTime?: long(name='MaxTalkTime'),
      maxWorkTime?: long(name='MaxWorkTime'),
      satisfactionIndex?: float(name='SatisfactionIndex'),
      satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
      satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
      totalDialingTime?: long(name='TotalDialingTime'),
      totalTalkTime?: long(name='TotalTalkTime'),
      totalWorkTime?: long(name='TotalWorkTime'),
    }(name='Outbound'),
    overall?: {
      averageReadyTime?: long(name='AverageReadyTime'),
      averageTalkTime?: long(name='AverageTalkTime'),
      averageWorkTime?: long(name='AverageWorkTime'),
      maxReadyTime?: long(name='MaxReadyTime'),
      maxTalkTime?: long(name='MaxTalkTime'),
      maxWorkTime?: long(name='MaxWorkTime'),
      occupancyRate?: float(name='OccupancyRate'),
      satisfactionIndex?: float(name='SatisfactionIndex'),
      satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
      satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
      totalBreakTime?: long(name='TotalBreakTime'),
      totalCalls?: long(name='TotalCalls'),
      totalLoggedInTime?: long(name='TotalLoggedInTime'),
      totalReadyTime?: long(name='TotalReadyTime'),
      totalTalkTime?: long(name='TotalTalkTime'),
      totalWorkTime?: long(name='TotalWorkTime'),
    }(name='Overall'),
    timestamp?: string(name='Timestamp'),
  }(name='InstanceSummaryReport'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetInstanceSummaryReportSinceMidnightResponse = {
  headers: map[string]string(name='headers'),
  body: GetInstanceSummaryReportSinceMidnightResponseBody(name='body'),
}

async function getInstanceSummaryReportSinceMidnightWithOptions(request: GetInstanceSummaryReportSinceMidnightRequest, runtime: Util.RuntimeOptions): GetInstanceSummaryReportSinceMidnightResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetInstanceSummaryReportSinceMidnight', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getInstanceSummaryReportSinceMidnight(request: GetInstanceSummaryReportSinceMidnightRequest): GetInstanceSummaryReportSinceMidnightResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceSummaryReportSinceMidnightWithOptions(request, runtime);
}

model GetJobRequest {
  instanceId?: string(name='InstanceId'),
  jobId?: string(name='JobId'),
}

model GetJobResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  job?: {
    callingNumbers?: [ string ](name='CallingNumbers'),
    contacts?: [ 
      {
        contactId?: string(name='ContactId'),
        contactName?: string(name='ContactName'),
        honorific?: string(name='Honorific'),
        phoneNumber?: string(name='PhoneNumber'),
        referenceId?: string(name='ReferenceId'),
        role?: string(name='Role'),
        state?: string(name='State'),
      }
    ](name='Contacts'),
    extras?: [ 
      {
        key?: string(name='Key'),
        value?: string(name='Value'),
      }
    ](name='Extras'),
    failureReason?: string(name='FailureReason'),
    groupId?: string(name='GroupId'),
    jobId?: string(name='JobId'),
    priority?: int32(name='Priority'),
    referenceId?: string(name='ReferenceId'),
    scenarioId?: string(name='ScenarioId'),
    status?: string(name='Status'),
    strategyId?: string(name='StrategyId'),
    summary?: [ 
      {
        category?: string(name='Category'),
        content?: string(name='Content'),
        summaryName?: string(name='SummaryName'),
      }
    ](name='Summary'),
    systemPriority?: int32(name='SystemPriority'),
    tasks?: [ 
      {
        actualTime?: long(name='ActualTime'),
        brief?: string(name='Brief'),
        callId?: string(name='CallId'),
        calledNumber?: string(name='CalledNumber'),
        callingNumber?: string(name='CallingNumber'),
        chatbotId?: string(name='ChatbotId'),
        contact?: {
          contactId?: string(name='ContactId'),
          contactName?: string(name='ContactName'),
          honorific?: string(name='Honorific'),
          phoneNumber?: string(name='PhoneNumber'),
          referenceId?: string(name='ReferenceId'),
          role?: string(name='Role'),
          state?: string(name='State'),
        }(name='Contact'),
        conversation?: [ 
          {
            script?: string(name='Script'),
            speaker?: string(name='Speaker'),
            summary?: [ 
              {
                category?: string(name='Category'),
                content?: string(name='Content'),
                summaryName?: string(name='SummaryName'),
              }
            ](name='Summary'),
            timestamp?: long(name='Timestamp'),
          }
        ](name='Conversation'),
        duration?: int32(name='Duration'),
        jobId?: string(name='JobId'),
        planedTime?: long(name='PlanedTime'),
        scenarioId?: string(name='ScenarioId'),
        status?: string(name='Status'),
        taskId?: string(name='TaskId'),
      }
    ](name='Tasks'),
  }(name='Job'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetJobResponse = {
  headers: map[string]string(name='headers'),
  body: GetJobResponseBody(name='body'),
}

async function getJobWithOptions(request: GetJobRequest, runtime: Util.RuntimeOptions): GetJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetJob', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getJob(request: GetJobRequest): GetJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return getJobWithOptions(request, runtime);
}

model GetJobDataUploadParamsRequest {
  fileName?: string(name='FileName'),
  instanceId?: string(name='InstanceId'),
}

model GetJobDataUploadParamsResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  uploadParams?: {
    accessId?: string(name='AccessId'),
    expire?: int32(name='Expire'),
    folder?: string(name='Folder'),
    host?: string(name='Host'),
    policy?: string(name='Policy'),
    signature?: string(name='Signature'),
  }(name='UploadParams'),
}

model GetJobDataUploadParamsResponse = {
  headers: map[string]string(name='headers'),
  body: GetJobDataUploadParamsResponseBody(name='body'),
}

async function getJobDataUploadParamsWithOptions(request: GetJobDataUploadParamsRequest, runtime: Util.RuntimeOptions): GetJobDataUploadParamsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetJobDataUploadParams', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getJobDataUploadParams(request: GetJobDataUploadParamsRequest): GetJobDataUploadParamsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getJobDataUploadParamsWithOptions(request, runtime);
}

model GetJobFileUploadUrlRequest {
  fileName?: string(name='FileName'),
  instanceId?: string(name='InstanceId'),
}

model GetJobFileUploadUrlResponseBody = {
  code?: string(name='Code'),
  filePath?: string(name='FilePath'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  uploadUrl?: string(name='UploadUrl'),
}

model GetJobFileUploadUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetJobFileUploadUrlResponseBody(name='body'),
}

async function getJobFileUploadUrlWithOptions(request: GetJobFileUploadUrlRequest, runtime: Util.RuntimeOptions): GetJobFileUploadUrlResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetJobFileUploadUrl', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getJobFileUploadUrl(request: GetJobFileUploadUrlRequest): GetJobFileUploadUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getJobFileUploadUrlWithOptions(request, runtime);
}

model GetJobGroupRequest {
  instanceId?: string(name='InstanceId'),
  jobGroupId?: string(name='JobGroupId'),
}

model GetJobGroupResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  jobGroup?: {
    callingNumbers?: [ string ](name='CallingNumbers'),
    creationTime?: long(name='CreationTime'),
    description?: string(name='Description'),
    id?: string(name='Id'),
    jobFilePath?: string(name='JobFilePath'),
    name?: string(name='Name'),
    progress?: {
      categories?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Categories'),
      duration?: int32(name='Duration'),
      startTime?: long(name='StartTime'),
      status?: string(name='Status'),
      totalCompleted?: int32(name='TotalCompleted'),
      totalJobs?: int32(name='TotalJobs'),
      totalNotAnswered?: int32(name='TotalNotAnswered'),
    }(name='Progress'),
    scenarioId?: string(name='ScenarioId'),
    strategy?: {
      customized?: string(name='Customized'),
      description?: string(name='Description'),
      endTime?: long(name='EndTime'),
      followUpStrategy?: string(name='FollowUpStrategy'),
      id?: string(name='Id'),
      isTemplate?: boolean(name='IsTemplate'),
      maxAttemptsPerDay?: int32(name='MaxAttemptsPerDay'),
      minAttemptInterval?: int32(name='MinAttemptInterval'),
      name?: string(name='Name'),
      repeatBy?: string(name='RepeatBy'),
      repeatDays?: [ string ](name='RepeatDays'),
      routingStrategy?: string(name='RoutingStrategy'),
      startTime?: long(name='StartTime'),
      type?: string(name='Type'),
      workingTime?: [ 
        {
          beginTime?: string(name='BeginTime'),
          endTime?: string(name='EndTime'),
        }
      ](name='WorkingTime'),
    }(name='Strategy'),
  }(name='JobGroup'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetJobGroupResponse = {
  headers: map[string]string(name='headers'),
  body: GetJobGroupResponseBody(name='body'),
}

async function getJobGroupWithOptions(request: GetJobGroupRequest, runtime: Util.RuntimeOptions): GetJobGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetJobGroup', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getJobGroup(request: GetJobGroupRequest): GetJobGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return getJobGroupWithOptions(request, runtime);
}

model GetJobListRequest {
  instanceId?: string(name='InstanceId'),
  jobGroupId?: string(name='JobGroupId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  queryAll?: boolean(name='QueryAll'),
  status?: int32(name='Status'),
}

model GetJobListResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  jobs?: {
    list?: [ 
      {
        callingNumbers?: [ string ](name='CallingNumbers'),
        contacts?: [ 
          {
            contactId?: string(name='ContactId'),
            contactName?: string(name='ContactName'),
            honorific?: string(name='Honorific'),
            jobId?: string(name='JobId'),
            phoneNumber?: string(name='PhoneNumber'),
            referenceId?: string(name='ReferenceId'),
            role?: string(name='Role'),
            state?: string(name='State'),
          }
        ](name='Contacts'),
        extras?: [ 
          {
            key?: string(name='Key'),
            value?: string(name='Value'),
          }
        ](name='Extras'),
        failureReason?: string(name='FailureReason'),
        groupId?: string(name='GroupId'),
        jobId?: string(name='JobId'),
        priority?: int32(name='Priority'),
        referenceId?: string(name='ReferenceId'),
        scenarioId?: string(name='ScenarioId'),
        status?: string(name='Status'),
        strategyId?: string(name='StrategyId'),
        summary?: [ 
          {
            category?: string(name='Category'),
            content?: string(name='Content'),
            conversationDetailId?: string(name='ConversationDetailId'),
            groupId?: string(name='GroupId'),
            jobId?: string(name='JobId'),
            summaryId?: string(name='SummaryId'),
            summaryName?: string(name='SummaryName'),
            taskId?: string(name='TaskId'),
          }
        ](name='Summary'),
        systemPriority?: int32(name='SystemPriority'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Jobs'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetJobListResponse = {
  headers: map[string]string(name='headers'),
  body: GetJobListResponseBody(name='body'),
}

async function getJobListWithOptions(request: GetJobListRequest, runtime: Util.RuntimeOptions): GetJobListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetJobList', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getJobList(request: GetJobListRequest): GetJobListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getJobListWithOptions(request, runtime);
}

model GetJobStatusByCallIdRequest {
  callId?: string(name='CallId'),
  instanceId?: string(name='InstanceId'),
}

model GetJobStatusByCallIdResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  job?: {
    callingNumbers?: [ string ](name='CallingNumbers'),
    contacts?: [ 
      {
        contactId?: string(name='ContactId'),
        contactName?: string(name='ContactName'),
        honorific?: string(name='Honorific'),
        jobId?: string(name='JobId'),
        phoneNumber?: string(name='PhoneNumber'),
        referenceId?: string(name='ReferenceId'),
        role?: string(name='Role'),
        state?: string(name='State'),
      }
    ](name='Contacts'),
    extras?: [ 
      {
        key?: string(name='Key'),
        value?: string(name='Value'),
      }
    ](name='Extras'),
    failureReason?: string(name='FailureReason'),
    groupId?: string(name='GroupId'),
    jobId?: string(name='JobId'),
    priority?: int32(name='Priority'),
    referenceId?: string(name='ReferenceId'),
    scenarioId?: string(name='ScenarioId'),
    status?: string(name='Status'),
    strategyId?: string(name='StrategyId'),
    summary?: [ 
      {
        category?: string(name='Category'),
        content?: string(name='Content'),
        summaryId?: string(name='SummaryId'),
        summaryName?: string(name='SummaryName'),
      }
    ](name='Summary'),
    tasks?: [ 
      {
        actualTime?: long(name='ActualTime'),
        brief?: string(name='Brief'),
        callId?: string(name='CallId'),
        calledNumber?: string(name='CalledNumber'),
        callingNumber?: string(name='CallingNumber'),
        chatbotId?: string(name='ChatbotId'),
        contact?: {
          contactId?: string(name='ContactId'),
          contactName?: string(name='ContactName'),
          honorific?: string(name='Honorific'),
          jobId?: string(name='JobId'),
          phoneNumber?: string(name='PhoneNumber'),
          referenceId?: string(name='ReferenceId'),
          role?: string(name='Role'),
          state?: string(name='State'),
        }(name='Contact'),
        conversation?: [ 
          {
            conversationDetailId?: string(name='ConversationDetailId'),
            script?: string(name='Script'),
            speaker?: string(name='Speaker'),
            summary?: [ 
              {
                category?: string(name='Category'),
                content?: string(name='Content'),
                summaryId?: string(name='SummaryId'),
                summaryName?: string(name='SummaryName'),
              }
            ](name='Summary'),
            taskId?: string(name='TaskId'),
            timestamp?: long(name='Timestamp'),
          }
        ](name='Conversation'),
        duration?: int32(name='Duration'),
        endTime?: long(name='EndTime'),
        jobId?: string(name='JobId'),
        planedTime?: long(name='PlanedTime'),
        scenarioId?: string(name='ScenarioId'),
        status?: string(name='Status'),
        taskId?: string(name='TaskId'),
      }
    ](name='Tasks'),
  }(name='Job'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetJobStatusByCallIdResponse = {
  headers: map[string]string(name='headers'),
  body: GetJobStatusByCallIdResponseBody(name='body'),
}

async function getJobStatusByCallIdWithOptions(request: GetJobStatusByCallIdRequest, runtime: Util.RuntimeOptions): GetJobStatusByCallIdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetJobStatusByCallId', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getJobStatusByCallId(request: GetJobStatusByCallIdRequest): GetJobStatusByCallIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getJobStatusByCallIdWithOptions(request, runtime);
}

model GetJobTemplateDownloadParamsRequest {
  instanceId?: string(name='InstanceId'),
  scenarioId?: string(name='ScenarioId'),
}

model GetJobTemplateDownloadParamsResponseBody = {
  code?: string(name='Code'),
  downloadParams?: {
    signatureUrl?: string(name='SignatureUrl'),
  }(name='DownloadParams'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetJobTemplateDownloadParamsResponse = {
  headers: map[string]string(name='headers'),
  body: GetJobTemplateDownloadParamsResponseBody(name='body'),
}

async function getJobTemplateDownloadParamsWithOptions(request: GetJobTemplateDownloadParamsRequest, runtime: Util.RuntimeOptions): GetJobTemplateDownloadParamsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetJobTemplateDownloadParams', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getJobTemplateDownloadParams(request: GetJobTemplateDownloadParamsRequest): GetJobTemplateDownloadParamsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getJobTemplateDownloadParamsWithOptions(request, runtime);
}

model GetNumberRegionInfoRequest {
  instanceId?: string(name='InstanceId'),
  number?: string(name='Number'),
}

model GetNumberRegionInfoResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  phoneNumber?: {
    city?: string(name='City'),
    number?: string(name='Number'),
    province?: string(name='Province'),
  }(name='PhoneNumber'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetNumberRegionInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetNumberRegionInfoResponseBody(name='body'),
}

async function getNumberRegionInfoWithOptions(request: GetNumberRegionInfoRequest, runtime: Util.RuntimeOptions): GetNumberRegionInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetNumberRegionInfo', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getNumberRegionInfo(request: GetNumberRegionInfoRequest): GetNumberRegionInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNumberRegionInfoWithOptions(request, runtime);
}

model GetPredictiveJobGroupRequest {
  instanceId?: string(name='InstanceId'),
  jobGroupId?: string(name='JobGroupId'),
  skillGroupId?: string(name='SkillGroupId'),
}

model GetPredictiveJobGroupResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  jobGroup?: {
    creationTime?: long(name='CreationTime'),
    description?: string(name='Description'),
    instanceId?: string(name='InstanceId'),
    jobGroupId?: string(name='JobGroupId'),
    name?: string(name='Name'),
    progress?: {
      categories?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Categories'),
      duration?: int32(name='Duration'),
      startTime?: long(name='StartTime'),
      status?: string(name='Status'),
      totalCompleted?: int32(name='TotalCompleted'),
      totalJobs?: int32(name='TotalJobs'),
      totalNotAnswered?: int32(name='TotalNotAnswered'),
    }(name='Progress'),
    ratio?: long(name='Ratio'),
    skillGroupId?: string(name='SkillGroupId'),
    skillGroupName?: string(name='SkillGroupName'),
    strategy?: {
      endTime?: long(name='EndTime'),
      maxAttemptsPerDay?: int32(name='MaxAttemptsPerDay'),
      minAttemptInterval?: int32(name='MinAttemptInterval'),
      startTime?: long(name='StartTime'),
      strategyId?: string(name='StrategyId'),
      workingTime?: [ 
        {
          beginTime?: string(name='BeginTime'),
          endTime?: string(name='EndTime'),
        }
      ](name='WorkingTime'),
    }(name='Strategy'),
  }(name='JobGroup'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetPredictiveJobGroupResponse = {
  headers: map[string]string(name='headers'),
  body: GetPredictiveJobGroupResponseBody(name='body'),
}

async function getPredictiveJobGroupWithOptions(request: GetPredictiveJobGroupRequest, runtime: Util.RuntimeOptions): GetPredictiveJobGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetPredictiveJobGroup', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getPredictiveJobGroup(request: GetPredictiveJobGroupRequest): GetPredictiveJobGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPredictiveJobGroupWithOptions(request, runtime);
}

model GetPredictiveTaskDataRequest {
  instanceId?: string(name='InstanceId'),
  skillGroupId?: string(name='SkillGroupId'),
  taskId?: string(name='TaskId'),
}

model GetPredictiveTaskDataResponseBody = {
  code?: string(name='Code'),
  data?: {
    abandoned?: boolean(name='Abandoned'),
    answered?: boolean(name='Answered'),
    connected?: boolean(name='Connected'),
    contactId?: string(name='ContactId'),
    dialDuration?: long(name='DialDuration'),
    endTime?: long(name='EndTime'),
    jobGroupId?: string(name='JobGroupId'),
    queueDuration?: long(name='QueueDuration'),
    startTime?: long(name='StartTime'),
    talkDuration?: long(name='TalkDuration'),
    taskId?: string(name='TaskId'),
  }(name='Data'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: string(name='Success'),
}

model GetPredictiveTaskDataResponse = {
  headers: map[string]string(name='headers'),
  body: GetPredictiveTaskDataResponseBody(name='body'),
}

async function getPredictiveTaskDataWithOptions(request: GetPredictiveTaskDataRequest, runtime: Util.RuntimeOptions): GetPredictiveTaskDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetPredictiveTaskData', '2017-07-05', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getPredictiveTaskData(request: GetPredictiveTaskDataRequest): GetPredictiveTaskDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPredictiveTaskDataWithOptions(request, runtime);
}

model GetRecordOssUploadParamRequest {
  fileName?: string(name='FileName'),
  instanceId?: string(name='InstanceId'),
}

model GetRecordOssUploadParamResponseBody = {
  code?: string(name='Code'),
  dir?: string(name='Dir'),
  expires?: string(name='Expires'),
  host?: string(name='Host'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  ossAccessKeyId?: string(name='OssAccessKeyId'),
  ossFileName?: string(name='OssFileName'),
  policy?: string(name='Policy'),
  requestId?: string(name='RequestId'),
  signature?: string(name='Signature'),
  success?: boolean(name='Success'),
}

model GetRecordOssUploadParamResponse = {
  headers: map[string]string(name='headers'),
  body: GetRecordOssUploadParamResponseBody(name='body'),
}

async function getRecordOssUploadParamWithOptions(request: GetRecordOssUploadParamRequest, runtime: Util.RuntimeOptions): GetRecordOssUploadParamResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetRecordOssUploadParam', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getRecordOssUploadParam(request: GetRecordOssUploadParamRequest): GetRecordOssUploadParamResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRecordOssUploadParamWithOptions(request, runtime);
}

model GetRoutePointRequest {
  contactFlowId?: string(name='ContactFlowId'),
  instanceId?: string(name='InstanceId'),
}

model GetRoutePointResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  routePoint?: string(name='RoutePoint'),
  statusCode?: string(name='StatusCode'),
  statusDesc?: string(name='StatusDesc'),
  success?: boolean(name='Success'),
}

model GetRoutePointResponse = {
  headers: map[string]string(name='headers'),
  body: GetRoutePointResponseBody(name='body'),
}

async function getRoutePointWithOptions(request: GetRoutePointRequest, runtime: Util.RuntimeOptions): GetRoutePointResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetRoutePoint', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getRoutePoint(request: GetRoutePointRequest): GetRoutePointResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRoutePointWithOptions(request, runtime);
}

model GetScenarioRequest {
  instanceId?: string(name='InstanceId'),
  scenarioId?: string(name='ScenarioId'),
}

model GetScenarioResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  scenario?: {
    description?: string(name='Description'),
    id?: string(name='Id'),
    isTemplate?: boolean(name='IsTemplate'),
    name?: string(name='Name'),
    strategy?: {
      customized?: string(name='Customized'),
      description?: string(name='Description'),
      endTime?: long(name='EndTime'),
      followUpStrategy?: string(name='FollowUpStrategy'),
      id?: string(name='Id'),
      isTemplate?: boolean(name='IsTemplate'),
      maxAttemptsPerDay?: int32(name='MaxAttemptsPerDay'),
      minAttemptInterval?: int32(name='MinAttemptInterval'),
      name?: string(name='Name'),
      repeatBy?: string(name='RepeatBy'),
      repeatDays?: [ string ](name='RepeatDays'),
      routingStrategy?: string(name='RoutingStrategy'),
      startTime?: long(name='StartTime'),
      type?: string(name='Type'),
      workingTime?: [ 
        {
          beginTime?: string(name='BeginTime'),
          endTime?: string(name='EndTime'),
        }
      ](name='WorkingTime'),
    }(name='Strategy'),
    surveys?: [ 
      {
        beebotId?: string(name='BeebotId'),
        description?: string(name='Description'),
        id?: string(name='Id'),
        intents?: [ 
          {
            intentId?: string(name='IntentId'),
            nodeId?: string(name='NodeId'),
          }
        ](name='Intents'),
        name?: string(name='Name'),
        role?: string(name='Role'),
        round?: int32(name='Round'),
      }
    ](name='Surveys'),
    type?: string(name='Type'),
    variables?: [ 
      {
        key?: string(name='Key'),
        value?: string(name='Value'),
      }
    ](name='Variables'),
  }(name='Scenario'),
  success?: boolean(name='Success'),
}

model GetScenarioResponse = {
  headers: map[string]string(name='headers'),
  body: GetScenarioResponseBody(name='body'),
}

async function getScenarioWithOptions(request: GetScenarioRequest, runtime: Util.RuntimeOptions): GetScenarioResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetScenario', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getScenario(request: GetScenarioRequest): GetScenarioResponse {
  var runtime = new Util.RuntimeOptions{};
  return getScenarioWithOptions(request, runtime);
}

model GetServiceExtensionsRequest {
  instanceId?: string(name='InstanceId'),
  serviceType?: string(name='ServiceType'),
}

model GetServiceExtensionsResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  serviceExtensions?: {
    serviceExtension?: [ 
    {
      name?: string(name='Name'),
      number?: string(name='Number'),
    }
  ](name='ServiceExtension')
  }(name='ServiceExtensions'),
  success?: boolean(name='Success'),
}

model GetServiceExtensionsResponse = {
  headers: map[string]string(name='headers'),
  body: GetServiceExtensionsResponseBody(name='body'),
}

async function getServiceExtensionsWithOptions(request: GetServiceExtensionsRequest, runtime: Util.RuntimeOptions): GetServiceExtensionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetServiceExtensions', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getServiceExtensions(request: GetServiceExtensionsRequest): GetServiceExtensionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getServiceExtensionsWithOptions(request, runtime);
}

model GetSmsConfigRequest {
  instanceId?: string(name='InstanceId'),
  scenario?: [ int32 ](name='Scenario'),
}

model GetSmsConfigResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  smsConfigs?: {
    smsConfig?: [ 
    {
      description?: string(name='Description'),
      extra?: string(name='Extra'),
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
      id?: long(name='Id'),
      instance?: string(name='Instance'),
      name?: string(name='Name'),
      scenario?: int32(name='Scenario'),
      signName?: string(name='SignName'),
      templateCode?: string(name='TemplateCode'),
    }
  ](name='SmsConfig')
  }(name='SmsConfigs'),
  success?: boolean(name='Success'),
}

model GetSmsConfigResponse = {
  headers: map[string]string(name='headers'),
  body: GetSmsConfigResponseBody(name='body'),
}

async function getSmsConfigWithOptions(request: GetSmsConfigRequest, runtime: Util.RuntimeOptions): GetSmsConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetSmsConfig', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getSmsConfig(request: GetSmsConfigRequest): GetSmsConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSmsConfigWithOptions(request, runtime);
}

model GetSurveyRequest {
  instanceId?: string(name='InstanceId'),
  scenarioId?: string(name='ScenarioId'),
  surveyId?: string(name='SurveyId'),
}

model GetSurveyResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  survey?: {
    asrCustomModel?: {
      corpora?: string(name='Corpora'),
      customModelStatus?: int32(name='CustomModelStatus'),
    }(name='AsrCustomModel'),
    description?: string(name='Description'),
    flow?: {
      flowId?: string(name='FlowId'),
      flowJson?: string(name='FlowJson'),
      isPublished?: boolean(name='IsPublished'),
    }(name='Flow'),
    globalQuestions?: string(name='GlobalQuestions'),
    hotWords?: string(name='HotWords'),
    id?: string(name='Id'),
    name?: string(name='Name'),
    role?: string(name='Role'),
    round?: int32(name='Round'),
    scenarioUuid?: string(name='ScenarioUuid'),
    speechOptimizationParam?: string(name='SpeechOptimizationParam'),
  }(name='Survey'),
}

model GetSurveyResponse = {
  headers: map[string]string(name='headers'),
  body: GetSurveyResponseBody(name='body'),
}

async function getSurveyWithOptions(request: GetSurveyRequest, runtime: Util.RuntimeOptions): GetSurveyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetSurvey', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getSurvey(request: GetSurveyRequest): GetSurveyResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSurveyWithOptions(request, runtime);
}

model GetTURNCredentialsRequest {
  instanceId?: string(name='InstanceId'),
  userName?: string(name='UserName'),
}

model GetTURNCredentialsResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  password?: string(name='Password'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  username?: string(name='Username'),
}

model GetTURNCredentialsResponse = {
  headers: map[string]string(name='headers'),
  body: GetTURNCredentialsResponseBody(name='body'),
}

async function getTURNCredentialsWithOptions(request: GetTURNCredentialsRequest, runtime: Util.RuntimeOptions): GetTURNCredentialsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetTURNCredentials', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getTURNCredentials(request: GetTURNCredentialsRequest): GetTURNCredentialsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTURNCredentialsWithOptions(request, runtime);
}

model GetTURNServerListRequest {
  instanceId?: string(name='InstanceId'),
}

model GetTURNServerListResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  turnServerListConfig?: string(name='TurnServerListConfig'),
}

model GetTURNServerListResponse = {
  headers: map[string]string(name='headers'),
  body: GetTURNServerListResponseBody(name='body'),
}

async function getTURNServerListWithOptions(request: GetTURNServerListRequest, runtime: Util.RuntimeOptions): GetTURNServerListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetTURNServerList', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getTURNServerList(request: GetTURNServerListRequest): GetTURNServerListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTURNServerListWithOptions(request, runtime);
}

model GetTaskListRequest {
  instanceId?: string(name='InstanceId'),
  jobId?: string(name='JobId'),
}

model GetTaskListResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  tasks?: [ 
    {
      actualTime?: long(name='ActualTime'),
      brief?: string(name='Brief'),
      callId?: string(name='CallId'),
      calledNumber?: string(name='CalledNumber'),
      callingNumber?: string(name='CallingNumber'),
      chatbotId?: string(name='ChatbotId'),
      contact?: {
        contactId?: string(name='ContactId'),
        contactName?: string(name='ContactName'),
        honorific?: string(name='Honorific'),
        jobId?: string(name='JobId'),
        phoneNumber?: string(name='PhoneNumber'),
        referenceId?: string(name='ReferenceId'),
        role?: string(name='Role'),
        state?: string(name='State'),
      }(name='Contact'),
      conversation?: [ 
        {
          script?: string(name='Script'),
          speaker?: string(name='Speaker'),
          summary?: [ 
            {
              category?: string(name='Category'),
              content?: string(name='Content'),
              summaryName?: string(name='SummaryName'),
            }
          ](name='Summary'),
          timestamp?: long(name='Timestamp'),
        }
      ](name='Conversation'),
      duration?: int32(name='Duration'),
      jobId?: string(name='JobId'),
      planedTime?: long(name='PlanedTime'),
      scenarioId?: string(name='ScenarioId'),
      status?: string(name='Status'),
      taskId?: string(name='TaskId'),
    }
  ](name='Tasks'),
}

model GetTaskListResponse = {
  headers: map[string]string(name='headers'),
  body: GetTaskListResponseBody(name='body'),
}

async function getTaskListWithOptions(request: GetTaskListRequest, runtime: Util.RuntimeOptions): GetTaskListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetTaskList', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getTaskList(request: GetTaskListRequest): GetTaskListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTaskListWithOptions(request, runtime);
}

model GetUserRequest {
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
}

model GetUserResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  user?: {
    detail?: {
      department?: string(name='Department'),
      displayName?: string(name='DisplayName'),
      email?: string(name='Email'),
      loginName?: string(name='LoginName'),
      phone?: string(name='Phone'),
    }(name='Detail'),
    instanceId?: string(name='InstanceId'),
    ramId?: string(name='RamId'),
    roles?: {
      role?: [ 
      {
        instanceId?: string(name='InstanceId'),
        roleDescription?: string(name='RoleDescription'),
        roleId?: string(name='RoleId'),
        roleName?: string(name='RoleName'),
      }
    ](name='Role')
    }(name='Roles'),
    skillLevels?: {
      skillLevel?: [ 
      {
        level?: int32(name='Level'),
        skill?: {
          instanceId?: string(name='InstanceId'),
          skillGroupDescription?: string(name='SkillGroupDescription'),
          skillGroupId?: string(name='SkillGroupId'),
          skillGroupName?: string(name='SkillGroupName'),
        }(name='Skill'),
        skillLevelId?: string(name='SkillLevelId'),
      }
    ](name='SkillLevel')
    }(name='SkillLevels'),
    userId?: string(name='UserId'),
  }(name='User'),
}

model GetUserResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserResponseBody(name='body'),
}

async function getUserWithOptions(request: GetUserRequest, runtime: Util.RuntimeOptions): GetUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetUser', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getUser(request: GetUserRequest): GetUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUserWithOptions(request, runtime);
}

model GetUserByExtensionRequest {
  extension?: string(name='Extension'),
  instanceId?: string(name='InstanceId'),
}

model GetUserByExtensionResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  user?: {
    detail?: {
      department?: string(name='Department'),
      displayName?: string(name='DisplayName'),
      email?: string(name='Email'),
      extension?: string(name='Extension'),
      loginName?: string(name='LoginName'),
      phone?: string(name='Phone'),
    }(name='Detail'),
    instanceId?: string(name='InstanceId'),
    ramId?: string(name='RamId'),
    roles?: [ 
      {
        instanceId?: string(name='InstanceId'),
        roleDescription?: string(name='RoleDescription'),
        roleId?: string(name='RoleId'),
        roleName?: string(name='RoleName'),
      }
    ](name='Roles'),
    skillLevels?: [ 
      {
        level?: int32(name='Level'),
        skill?: {
          instanceId?: string(name='InstanceId'),
          skillGroupDescription?: string(name='SkillGroupDescription'),
          skillGroupId?: string(name='SkillGroupId'),
          skillGroupName?: string(name='SkillGroupName'),
        }(name='Skill'),
        skillLevelId?: string(name='SkillLevelId'),
      }
    ](name='SkillLevels'),
    userId?: string(name='UserId'),
  }(name='User'),
}

model GetUserByExtensionResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserByExtensionResponseBody(name='body'),
}

async function getUserByExtensionWithOptions(request: GetUserByExtensionRequest, runtime: Util.RuntimeOptions): GetUserByExtensionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetUserByExtension', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getUserByExtension(request: GetUserByExtensionRequest): GetUserByExtensionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUserByExtensionWithOptions(request, runtime);
}

model InflightTaskTimeoutRequest {
  instanceId?: string(name='InstanceId'),
  instanceOwnerId?: long(name='InstanceOwnerId'),
  taskId?: string(name='TaskId'),
}

model InflightTaskTimeoutResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model InflightTaskTimeoutResponse = {
  headers: map[string]string(name='headers'),
  body: InflightTaskTimeoutResponseBody(name='body'),
}

async function inflightTaskTimeoutWithOptions(request: InflightTaskTimeoutRequest, runtime: Util.RuntimeOptions): InflightTaskTimeoutResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('InflightTaskTimeout', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function inflightTaskTimeout(request: InflightTaskTimeoutRequest): InflightTaskTimeoutResponse {
  var runtime = new Util.RuntimeOptions{};
  return inflightTaskTimeoutWithOptions(request, runtime);
}

model LaunchAppraiseRequest {
  acid?: string(name='Acid'),
  instanceId?: string(name='InstanceId'),
}

model LaunchAppraiseResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model LaunchAppraiseResponse = {
  headers: map[string]string(name='headers'),
  body: LaunchAppraiseResponseBody(name='body'),
}

async function launchAppraiseWithOptions(request: LaunchAppraiseRequest, runtime: Util.RuntimeOptions): LaunchAppraiseResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('LaunchAppraise', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function launchAppraise(request: LaunchAppraiseRequest): LaunchAppraiseResponse {
  var runtime = new Util.RuntimeOptions{};
  return launchAppraiseWithOptions(request, runtime);
}

model LaunchShortMessageAppraiseRequest {
  acid?: string(name='Acid'),
  contactType?: int32(name='ContactType'),
  instanceId?: string(name='InstanceId'),
  phoneNumbers?: string(name='PhoneNumbers'),
  skillGroupId?: string(name='SkillGroupId'),
}

model LaunchShortMessageAppraiseResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model LaunchShortMessageAppraiseResponse = {
  headers: map[string]string(name='headers'),
  body: LaunchShortMessageAppraiseResponseBody(name='body'),
}

async function launchShortMessageAppraiseWithOptions(request: LaunchShortMessageAppraiseRequest, runtime: Util.RuntimeOptions): LaunchShortMessageAppraiseResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('LaunchShortMessageAppraise', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function launchShortMessageAppraise(request: LaunchShortMessageAppraiseRequest): LaunchShortMessageAppraiseResponse {
  var runtime = new Util.RuntimeOptions{};
  return launchShortMessageAppraiseWithOptions(request, runtime);
}

model ListAgentDevicesRequest {
  instanceId?: string(name='InstanceId'),
  ramIds?: string(name='RamIds'),
  startTime?: long(name='StartTime'),
  stopTime?: long(name='StopTime'),
}

model ListAgentDevicesResponseBody = {
  agentDeviceList?: {
    agentDevice?: [ 
    {
      browserVersion?: string(name='BrowserVersion'),
      clientIp?: string(name='ClientIp'),
      clientPort?: string(name='ClientPort'),
      instanceId?: string(name='InstanceId'),
      isLogin?: int32(name='IsLogin'),
      loginTime?: long(name='LoginTime'),
      ramId?: long(name='RamId'),
      remark?: string(name='Remark'),
    }
  ](name='AgentDevice')
  }(name='AgentDeviceList'),
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListAgentDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: ListAgentDevicesResponseBody(name='body'),
}

async function listAgentDevicesWithOptions(request: ListAgentDevicesRequest, runtime: Util.RuntimeOptions): ListAgentDevicesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListAgentDevices', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listAgentDevices(request: ListAgentDevicesRequest): ListAgentDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAgentDevicesWithOptions(request, runtime);
}

model ListAgentEventsRequest {
  event?: [ string ](name='Event'),
  instanceId?: string(name='InstanceId'),
  ramId?: [ string ](name='RamId'),
  startTime?: long(name='StartTime'),
  stopTime?: long(name='StopTime'),
}

model ListAgentEventsResponseBody = {
  agentEventList?: {
    agentEvent?: [ 
    {
      event?: string(name='Event'),
      eventTime?: long(name='EventTime'),
      instanceId?: string(name='InstanceId'),
      loginName?: string(name='LoginName'),
      ramId?: long(name='RamId'),
      skillGroupIds?: {
        skillGroup?: [ 
        {
          skillGroupId?: string(name='SkillGroupId'),
          skillGroupName?: string(name='SkillGroupName'),
        }
      ](name='SkillGroup')
      }(name='SkillGroupIds'),
    }
  ](name='AgentEvent')
  }(name='AgentEventList'),
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListAgentEventsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAgentEventsResponseBody(name='body'),
}

async function listAgentEventsWithOptions(request: ListAgentEventsRequest, runtime: Util.RuntimeOptions): ListAgentEventsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListAgentEvents', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listAgentEvents(request: ListAgentEventsRequest): ListAgentEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAgentEventsWithOptions(request, runtime);
}

model ListAgentStateLogsRequest {
  endTime?: long(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  ramId?: long(name='RamId'),
  startTime?: long(name='StartTime'),
}

model ListAgentStateLogsResponseBody = {
  agentStateLogPage?: {
    list?: [ 
      {
        connectId?: string(name='ConnectId'),
        contactId?: string(name='ContactId'),
        counterParty?: string(name='CounterParty'),
        instanceId?: string(name='InstanceId'),
        ramId?: long(name='RamId'),
        skillGroupIds?: string(name='SkillGroupIds'),
        state?: string(name='State'),
        stateCode?: string(name='StateCode'),
        stateTime?: long(name='StateTime'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='AgentStateLogPage'),
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListAgentStateLogsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAgentStateLogsResponseBody(name='body'),
}

async function listAgentStateLogsWithOptions(request: ListAgentStateLogsRequest, runtime: Util.RuntimeOptions): ListAgentStateLogsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListAgentStateLogs', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listAgentStateLogs(request: ListAgentStateLogsRequest): ListAgentStateLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAgentStateLogsWithOptions(request, runtime);
}

model ListAgentStatesRequest {
  agentIds?: string(name='AgentIds'),
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  skillGroupId?: string(name='SkillGroupId'),
  state?: string(name='State'),
}

model ListAgentStatesResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: {
      realTimeAgentState?: [ 
      {
        agentId?: string(name='AgentId'),
        agentName?: string(name='AgentName'),
        dn?: string(name='Dn'),
        instanceId?: string(name='InstanceId'),
        loginName?: string(name='LoginName'),
        state?: string(name='State'),
        stateDuration?: string(name='StateDuration'),
      }
    ](name='RealTimeAgentState')
    }(name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListAgentStatesResponse = {
  headers: map[string]string(name='headers'),
  body: ListAgentStatesResponseBody(name='body'),
}

async function listAgentStatesWithOptions(request: ListAgentStatesRequest, runtime: Util.RuntimeOptions): ListAgentStatesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListAgentStates', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listAgentStates(request: ListAgentStatesRequest): ListAgentStatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAgentStatesWithOptions(request, runtime);
}

model ListAgentSummaryReportsRequest {
  agentIds?: string(name='AgentIds'),
  endTime?: string(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  skillGroupId?: string(name='SkillGroupId'),
  startTime?: string(name='StartTime'),
}

model ListAgentSummaryReportsResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  pagedAgentSummaryReport?: {
    list?: {
      agentSummaryReport?: [ 
      {
        agentId?: string(name='AgentId'),
        agentName?: string(name='AgentName'),
        inbound?: {
          averageRingTime?: long(name='AverageRingTime'),
          averageTalkTime?: long(name='AverageTalkTime'),
          averageWorkTime?: long(name='AverageWorkTime'),
          callsHandled?: long(name='CallsHandled'),
          callsOffered?: long(name='CallsOffered'),
          handleRate?: float(name='HandleRate'),
          maxRingTime?: long(name='MaxRingTime'),
          maxTalkTime?: long(name='MaxTalkTime'),
          maxWorkTime?: long(name='MaxWorkTime'),
          satisfactionIndex?: float(name='SatisfactionIndex'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
          serviceLevel20?: float(name='ServiceLevel20'),
          totalRingTime?: long(name='TotalRingTime'),
          totalTalkTime?: long(name='TotalTalkTime'),
          totalWorkTime?: long(name='TotalWorkTime'),
        }(name='Inbound'),
        instanceId?: string(name='InstanceId'),
        loginName?: string(name='LoginName'),
        outbound?: {
          answerRate?: float(name='AnswerRate'),
          averageDialingTime?: long(name='AverageDialingTime'),
          averageTalkTime?: long(name='AverageTalkTime'),
          averageWorkTime?: long(name='AverageWorkTime'),
          callsAnswered?: long(name='CallsAnswered'),
          callsDialed?: long(name='CallsDialed'),
          maxDialingTime?: long(name='MaxDialingTime'),
          maxTalkTime?: long(name='MaxTalkTime'),
          maxWorkTime?: string(name='MaxWorkTime'),
          satisfactionIndex?: float(name='SatisfactionIndex'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
          totalDialingTime?: long(name='TotalDialingTime'),
          totalTalkTime?: long(name='TotalTalkTime'),
          totalWorkTime?: long(name='TotalWorkTime'),
        }(name='Outbound'),
        overall?: {
          averageReadyTime?: long(name='AverageReadyTime'),
          averageTalkTime?: long(name='AverageTalkTime'),
          averageWorkTime?: long(name='AverageWorkTime'),
          firstLogInTime?: string(name='FirstLogInTime'),
          lastLogOutTime?: string(name='LastLogOutTime'),
          maxReadyTime?: long(name='MaxReadyTime'),
          maxTalkTime?: long(name='MaxTalkTime'),
          maxWorkTime?: long(name='MaxWorkTime'),
          occupancyRate?: float(name='OccupancyRate'),
          oneTransferCalls?: long(name='OneTransferCalls'),
          satisfactionIndex?: float(name='SatisfactionIndex'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
          totalBreakTime?: long(name='TotalBreakTime'),
          totalCalls?: long(name='TotalCalls'),
          totalLoggedInTime?: long(name='TotalLoggedInTime'),
          totalReadyTime?: long(name='TotalReadyTime'),
          totalTalkTime?: long(name='TotalTalkTime'),
          totalWorkTime?: long(name='TotalWorkTime'),
        }(name='Overall'),
        skillGroupIds?: string(name='SkillGroupIds'),
        skillGroupNames?: string(name='SkillGroupNames'),
      }
    ](name='AgentSummaryReport')
    }(name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PagedAgentSummaryReport'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListAgentSummaryReportsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAgentSummaryReportsResponseBody(name='body'),
}

async function listAgentSummaryReportsWithOptions(request: ListAgentSummaryReportsRequest, runtime: Util.RuntimeOptions): ListAgentSummaryReportsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListAgentSummaryReports', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listAgentSummaryReports(request: ListAgentSummaryReportsRequest): ListAgentSummaryReportsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAgentSummaryReportsWithOptions(request, runtime);
}

model ListAgentSummaryReportsByIntervalRequest {
  agentIds?: string(name='AgentIds'),
  endTime?: string(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  interval?: string(name='Interval'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  skillGroupId?: string(name='SkillGroupId'),
  startTime?: string(name='StartTime'),
}

model ListAgentSummaryReportsByIntervalResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  pagedAgentSummaryReport?: {
    list?: {
      agentTimeIntervalReport?: [ 
      {
        agentId?: string(name='AgentId'),
        intervalList?: {
          agentSummaryReport?: [ 
          {
            agentId?: string(name='AgentId'),
            agentName?: string(name='AgentName'),
            inbound?: {
              averageRingTime?: long(name='AverageRingTime'),
              averageTalkTime?: long(name='AverageTalkTime'),
              averageWorkTime?: long(name='AverageWorkTime'),
              callsHandled?: long(name='CallsHandled'),
              callsOffered?: long(name='CallsOffered'),
              handleRate?: float(name='HandleRate'),
              maxRingTime?: long(name='MaxRingTime'),
              maxTalkTime?: long(name='MaxTalkTime'),
              maxWorkTime?: long(name='MaxWorkTime'),
              satisfactionIndex?: float(name='SatisfactionIndex'),
              satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
              satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
              serviceLevel20?: float(name='ServiceLevel20'),
              totalRingTime?: long(name='TotalRingTime'),
              totalTalkTime?: long(name='TotalTalkTime'),
              totalWorkTime?: long(name='TotalWorkTime'),
            }(name='Inbound'),
            instanceId?: string(name='InstanceId'),
            loginName?: string(name='LoginName'),
            outbound?: {
              answerRate?: float(name='AnswerRate'),
              averageDialingTime?: long(name='AverageDialingTime'),
              averageTalkTime?: long(name='AverageTalkTime'),
              averageWorkTime?: long(name='AverageWorkTime'),
              callsAnswered?: long(name='CallsAnswered'),
              callsDialed?: long(name='CallsDialed'),
              maxDialingTime?: long(name='MaxDialingTime'),
              maxTalkTime?: long(name='MaxTalkTime'),
              maxWorkTime?: long(name='MaxWorkTime'),
              satisfactionIndex?: float(name='SatisfactionIndex'),
              satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
              satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
              totalDialingTime?: long(name='TotalDialingTime'),
              totalTalkTime?: long(name='TotalTalkTime'),
              totalWorkTime?: long(name='TotalWorkTime'),
            }(name='Outbound'),
            overall?: {
              averageReadyTime?: long(name='AverageReadyTime'),
              averageTalkTime?: long(name='AverageTalkTime'),
              averageWorkTime?: long(name='AverageWorkTime'),
              firstLogInTime?: string(name='FirstLogInTime'),
              lastLogOutTime?: string(name='LastLogOutTime'),
              maxReadyTime?: long(name='MaxReadyTime'),
              maxTalkTime?: long(name='MaxTalkTime'),
              maxWorkTime?: long(name='MaxWorkTime'),
              occupancyRate?: float(name='OccupancyRate'),
              oneTransferCalls?: long(name='OneTransferCalls'),
              satisfactionIndex?: float(name='SatisfactionIndex'),
              satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
              satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
              totalBreakTime?: long(name='TotalBreakTime'),
              totalCalls?: long(name='TotalCalls'),
              totalLoggedInTime?: long(name='TotalLoggedInTime'),
              totalReadyTime?: long(name='TotalReadyTime'),
              totalTalkTime?: long(name='TotalTalkTime'),
              totalWorkTime?: long(name='TotalWorkTime'),
            }(name='Overall'),
            skillGroupIds?: string(name='SkillGroupIds'),
            skillGroupNames?: string(name='SkillGroupNames'),
            timestamp?: string(name='Timestamp'),
          }
        ](name='AgentSummaryReport')
        }(name='IntervalList'),
      }
    ](name='AgentTimeIntervalReport')
    }(name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PagedAgentSummaryReport'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListAgentSummaryReportsByIntervalResponse = {
  headers: map[string]string(name='headers'),
  body: ListAgentSummaryReportsByIntervalResponseBody(name='body'),
}

async function listAgentSummaryReportsByIntervalWithOptions(request: ListAgentSummaryReportsByIntervalRequest, runtime: Util.RuntimeOptions): ListAgentSummaryReportsByIntervalResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListAgentSummaryReportsByInterval', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listAgentSummaryReportsByInterval(request: ListAgentSummaryReportsByIntervalRequest): ListAgentSummaryReportsByIntervalResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAgentSummaryReportsByIntervalWithOptions(request, runtime);
}

model ListAgentSummaryReportsSinceMidnightRequest {
  agentIds?: string(name='AgentIds'),
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  skillGroupId?: string(name='SkillGroupId'),
}

model ListAgentSummaryReportsSinceMidnightResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  pagedAgentSummaryReport?: {
    list?: {
      agentSummaryReport?: [ 
      {
        agentId?: string(name='AgentId'),
        agentName?: string(name='AgentName'),
        inbound?: {
          averageRingTime?: long(name='AverageRingTime'),
          averageTalkTime?: long(name='AverageTalkTime'),
          averageWorkTime?: long(name='AverageWorkTime'),
          callsHandled?: long(name='CallsHandled'),
          callsOffered?: long(name='CallsOffered'),
          handleRate?: float(name='HandleRate'),
          maxRingTime?: long(name='MaxRingTime'),
          maxTalkTime?: long(name='MaxTalkTime'),
          maxWorkTime?: long(name='MaxWorkTime'),
          satisfactionIndex?: float(name='SatisfactionIndex'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
          serviceLevel20?: float(name='ServiceLevel20'),
          totalRingTime?: long(name='TotalRingTime'),
          totalTalkTime?: long(name='TotalTalkTime'),
          totalWorkTime?: long(name='TotalWorkTime'),
        }(name='Inbound'),
        instanceId?: string(name='InstanceId'),
        loginName?: string(name='LoginName'),
        outbound?: {
          answerRate?: float(name='AnswerRate'),
          averageDialingTime?: long(name='AverageDialingTime'),
          averageTalkTime?: long(name='AverageTalkTime'),
          averageWorkTime?: long(name='AverageWorkTime'),
          callsAnswered?: long(name='CallsAnswered'),
          callsDialed?: long(name='CallsDialed'),
          maxDialingTime?: long(name='MaxDialingTime'),
          maxTalkTime?: long(name='MaxTalkTime'),
          maxWorkTime?: string(name='MaxWorkTime'),
          satisfactionIndex?: float(name='SatisfactionIndex'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
          totalDialingTime?: long(name='TotalDialingTime'),
          totalTalkTime?: long(name='TotalTalkTime'),
          totalWorkTime?: long(name='TotalWorkTime'),
        }(name='Outbound'),
        overall?: {
          averageReadyTime?: long(name='AverageReadyTime'),
          averageTalkTime?: long(name='AverageTalkTime'),
          averageWorkTime?: long(name='AverageWorkTime'),
          maxReadyTime?: long(name='MaxReadyTime'),
          maxTalkTime?: long(name='MaxTalkTime'),
          maxWorkTime?: long(name='MaxWorkTime'),
          occupancyRate?: float(name='OccupancyRate'),
          oneTransferCalls?: long(name='OneTransferCalls'),
          satisfactionIndex?: float(name='SatisfactionIndex'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
          totalBreakTime?: long(name='TotalBreakTime'),
          totalCalls?: long(name='TotalCalls'),
          totalLoggedInTime?: long(name='TotalLoggedInTime'),
          totalReadyTime?: long(name='TotalReadyTime'),
          totalTalkTime?: long(name='TotalTalkTime'),
          totalWorkTime?: long(name='TotalWorkTime'),
        }(name='Overall'),
        skillGroupIds?: string(name='SkillGroupIds'),
        skillGroupNames?: string(name='SkillGroupNames'),
        timestamp?: string(name='Timestamp'),
      }
    ](name='AgentSummaryReport')
    }(name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PagedAgentSummaryReport'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListAgentSummaryReportsSinceMidnightResponse = {
  headers: map[string]string(name='headers'),
  body: ListAgentSummaryReportsSinceMidnightResponseBody(name='body'),
}

async function listAgentSummaryReportsSinceMidnightWithOptions(request: ListAgentSummaryReportsSinceMidnightRequest, runtime: Util.RuntimeOptions): ListAgentSummaryReportsSinceMidnightResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListAgentSummaryReportsSinceMidnight', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listAgentSummaryReportsSinceMidnight(request: ListAgentSummaryReportsSinceMidnightRequest): ListAgentSummaryReportsSinceMidnightResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAgentSummaryReportsSinceMidnightWithOptions(request, runtime);
}

model ListBasicStatisticsReportSubItemsRequest {
  instanceId?: string(name='InstanceId'),
  jobGroupId?: string(name='JobGroupId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  title?: string(name='Title'),
}

model ListBasicStatisticsReportSubItemsResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  subItems?: {
    list?: [ 
      {
        basicStatisticsReportSubItemName?: string(name='BasicStatisticsReportSubItemName'),
        count?: int32(name='Count'),
        percentage?: int32(name='Percentage'),
        row?: [ 
          {
            key?: string(name='Key'),
            value?: string(name='Value'),
          }
        ](name='Row'),
        value?: string(name='Value'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='SubItems'),
  success?: boolean(name='Success'),
}

model ListBasicStatisticsReportSubItemsResponse = {
  headers: map[string]string(name='headers'),
  body: ListBasicStatisticsReportSubItemsResponseBody(name='body'),
}

async function listBasicStatisticsReportSubItemsWithOptions(request: ListBasicStatisticsReportSubItemsRequest, runtime: Util.RuntimeOptions): ListBasicStatisticsReportSubItemsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListBasicStatisticsReportSubItems', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listBasicStatisticsReportSubItems(request: ListBasicStatisticsReportSubItemsRequest): ListBasicStatisticsReportSubItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listBasicStatisticsReportSubItemsWithOptions(request, runtime);
}

model ListCallDetailRecordsRequest {
  contactDisposition?: string(name='ContactDisposition'),
  contactId?: string(name='ContactId'),
  contactType?: string(name='ContactType'),
  criteria?: string(name='Criteria'),
  instanceId?: string(name='InstanceId'),
  orderBy?: string(name='OrderBy'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  phoneNumber?: string(name='PhoneNumber'),
  startTime?: long(name='StartTime'),
  stopTime?: long(name='StopTime'),
  withRecording?: boolean(name='WithRecording'),
}

model ListCallDetailRecordsResponseBody = {
  callDetailRecords?: {
    list?: {
      callDetailRecord?: [ 
      {
        agentNames?: string(name='AgentNames'),
        agents?: {
          callDetailAgent?: [ 
          {
            agentId?: string(name='AgentId'),
            feedback?: string(name='Feedback'),
            satisfaction?: string(name='Satisfaction'),
          }
        ](name='CallDetailAgent')
        }(name='Agents'),
        calledNumber?: string(name='CalledNumber'),
        callingNumber?: string(name='CallingNumber'),
        contactDisposition?: string(name='ContactDisposition'),
        contactId?: string(name='ContactId'),
        contactType?: string(name='ContactType'),
        duration?: int32(name='Duration'),
        feedback?: string(name='Feedback'),
        instanceId?: string(name='InstanceId'),
        recordings?: {
          recording?: [ 
          {
            agentId?: string(name='AgentId'),
            agentName?: string(name='AgentName'),
            contactId?: string(name='ContactId'),
            duration?: int32(name='Duration'),
            fileDescription?: string(name='FileDescription'),
            fileName?: string(name='FileName'),
            qualityCheckTaskId?: string(name='QualityCheckTaskId'),
            qualityCheckTid?: string(name='QualityCheckTid'),
            startTime?: long(name='StartTime'),
          }
        ](name='Recording')
        }(name='Recordings'),
        satisfaction?: int32(name='Satisfaction'),
        satisfactionDesc?: string(name='SatisfactionDesc'),
        skillGroupIdList?: string(name='SkillGroupIdList'),
        skillGroupNames?: string(name='SkillGroupNames'),
        startTime?: long(name='StartTime'),
      }
    ](name='CallDetailRecord')
    }(name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='CallDetailRecords'),
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListCallDetailRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: ListCallDetailRecordsResponseBody(name='body'),
}

async function listCallDetailRecordsWithOptions(request: ListCallDetailRecordsRequest, runtime: Util.RuntimeOptions): ListCallDetailRecordsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListCallDetailRecords', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listCallDetailRecords(request: ListCallDetailRecordsRequest): ListCallDetailRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCallDetailRecordsWithOptions(request, runtime);
}

model ListCallEventDetailByContactIdRequest {
  contactId?: string(name='ContactId'),
  instanceId?: string(name='InstanceId'),
}

model ListCallEventDetailByContactIdResponseBody = {
  code?: string(name='Code'),
  data?: {
    callType?: string(name='CallType'),
    callee?: string(name='Callee'),
    caller?: string(name='Caller'),
    events?: {
      callEventDetail?: [ 
      {
        agentName?: string(name='AgentName'),
        callMode?: string(name='CallMode'),
        detailData?: {
          eventType?: string(name='EventType'),
          hangUper?: string(name='HangUper'),
          helper?: string(name='Helper'),
          satisfactionalResearch?: string(name='SatisfactionalResearch'),
          skillGroup?: string(name='SkillGroup'),
        }(name='DetailData'),
        duration?: int32(name='Duration'),
        event?: string(name='Event'),
        status?: string(name='Status'),
        timeStamp?: string(name='TimeStamp'),
      }
    ](name='CallEventDetail')
    }(name='Events'),
    privacyNumber?: string(name='PrivacyNumber'),
    releaseAgent?: string(name='ReleaseAgent'),
    releaseReason?: string(name='ReleaseReason'),
    startTime?: string(name='StartTime'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListCallEventDetailByContactIdResponse = {
  headers: map[string]string(name='headers'),
  body: ListCallEventDetailByContactIdResponseBody(name='body'),
}

async function listCallEventDetailByContactIdWithOptions(request: ListCallEventDetailByContactIdRequest, runtime: Util.RuntimeOptions): ListCallEventDetailByContactIdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListCallEventDetailByContactId', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listCallEventDetailByContactId(request: ListCallEventDetailByContactIdRequest): ListCallEventDetailByContactIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCallEventDetailByContactIdWithOptions(request, runtime);
}

model ListCallMeasureSummaryReportsRequest {
  intervalType?: string(name='IntervalType'),
}

model ListCallMeasureSummaryReportsResponseBody = {
  callMeasureSummaryReportList?: {
    callMeasureSummaryReport?: [ 
    {
      day?: string(name='Day'),
      inboundCount?: long(name='InboundCount'),
      inboundDurationByMinute?: long(name='InboundDurationByMinute'),
      month?: string(name='Month'),
      outboundCount?: long(name='OutboundCount'),
      outboundDurationByMinute?: long(name='OutboundDurationByMinute'),
      year?: string(name='Year'),
    }
  ](name='CallMeasureSummaryReport')
  }(name='CallMeasureSummaryReportList'),
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListCallMeasureSummaryReportsResponse = {
  headers: map[string]string(name='headers'),
  body: ListCallMeasureSummaryReportsResponseBody(name='body'),
}

async function listCallMeasureSummaryReportsWithOptions(request: ListCallMeasureSummaryReportsRequest, runtime: Util.RuntimeOptions): ListCallMeasureSummaryReportsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListCallMeasureSummaryReports', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listCallMeasureSummaryReports(request: ListCallMeasureSummaryReportsRequest): ListCallMeasureSummaryReportsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCallMeasureSummaryReportsWithOptions(request, runtime);
}

model ListConfigRequest {
  configItem?: [ string ](name='ConfigItem'),
  instanceId?: string(name='InstanceId'),
}

model ListConfigResponseBody = {
  code?: string(name='Code'),
  configItems?: {
    configItem?: [ 
    {
      name?: string(name='Name'),
      value?: string(name='Value'),
    }
  ](name='ConfigItem')
  }(name='ConfigItems'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ListConfigResponseBody(name='body'),
}

async function listConfigWithOptions(request: ListConfigRequest, runtime: Util.RuntimeOptions): ListConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListConfig', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listConfig(request: ListConfigRequest): ListConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return listConfigWithOptions(request, runtime);
}

model ListContactFlowsRequest {
  instanceId?: string(name='InstanceId'),
}

model ListContactFlowsResponseBody = {
  code?: string(name='Code'),
  contactFlows?: {
    contactFlow?: [ 
    {
      appliedVersion?: string(name='AppliedVersion'),
      contactFlowDescription?: string(name='ContactFlowDescription'),
      contactFlowId?: string(name='ContactFlowId'),
      contactFlowName?: string(name='ContactFlowName'),
      instanceId?: string(name='InstanceId'),
      phoneNumbers?: {
        phoneNumber?: [ 
        {
          allowOutbound?: boolean(name='AllowOutbound'),
          instanceId?: string(name='InstanceId'),
          number?: string(name='Number'),
          phoneNumberDescription?: string(name='PhoneNumberDescription'),
          phoneNumberId?: string(name='PhoneNumberId'),
          remainingTime?: int32(name='RemainingTime'),
          testOnly?: boolean(name='TestOnly'),
          trunks?: int32(name='Trunks'),
          usage?: string(name='Usage'),
        }
      ](name='PhoneNumber')
      }(name='PhoneNumbers'),
      type?: string(name='Type'),
      versions?: {
        contactFlowVersion?: [ 
        {
          contactFlowVersionDescription?: string(name='ContactFlowVersionDescription'),
          contactFlowVersionId?: string(name='ContactFlowVersionId'),
          lastModified?: string(name='LastModified'),
          lastModifiedBy?: string(name='LastModifiedBy'),
          lockedBy?: string(name='LockedBy'),
          status?: string(name='Status'),
          version?: string(name='Version'),
        }
      ](name='ContactFlowVersion')
      }(name='Versions'),
    }
  ](name='ContactFlow')
  }(name='ContactFlows'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListContactFlowsResponse = {
  headers: map[string]string(name='headers'),
  body: ListContactFlowsResponseBody(name='body'),
}

async function listContactFlowsWithOptions(request: ListContactFlowsRequest, runtime: Util.RuntimeOptions): ListContactFlowsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListContactFlows', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listContactFlows(request: ListContactFlowsRequest): ListContactFlowsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listContactFlowsWithOptions(request, runtime);
}

model ListInstancesOfUserResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  instances?: {
    callCenterInstance?: [ 
    {
      admin?: {
        user?: [ 
        {
          detail?: {
            department?: string(name='Department'),
            displayName?: string(name='DisplayName'),
            email?: string(name='Email'),
            loginName?: string(name='LoginName'),
            phone?: string(name='Phone'),
          }(name='Detail'),
          instanceId?: string(name='InstanceId'),
          ramId?: string(name='RamId'),
          userId?: string(name='UserId'),
        }
      ](name='User')
      }(name='Admin'),
      consoleUrl?: string(name='ConsoleUrl'),
      createdTime?: long(name='CreatedTime'),
      directoryId?: string(name='DirectoryId'),
      domainName?: string(name='DomainName'),
      instanceDescription?: string(name='InstanceDescription'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      maxOnlineAgents?: int32(name='MaxOnlineAgents'),
      owner?: string(name='Owner'),
      phoneNumbers?: {
        phoneNumber?: [ 
        {
          allowOutbound?: boolean(name='AllowOutbound'),
          instanceId?: string(name='InstanceId'),
          number?: string(name='Number'),
          phoneNumberDescription?: string(name='PhoneNumberDescription'),
          phoneNumberId?: string(name='PhoneNumberId'),
          remainingTime?: int32(name='RemainingTime'),
          testOnly?: boolean(name='TestOnly'),
          trunks?: int32(name='Trunks'),
          usage?: string(name='Usage'),
        }
      ](name='PhoneNumber')
      }(name='PhoneNumbers'),
      status?: string(name='Status'),
      storageBucket?: string(name='StorageBucket'),
      storageMaxDays?: int32(name='StorageMaxDays'),
      storageMaxSize?: int32(name='StorageMaxSize'),
      tenantId?: string(name='TenantId'),
    }
  ](name='CallCenterInstance')
  }(name='Instances'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListInstancesOfUserResponse = {
  headers: map[string]string(name='headers'),
  body: ListInstancesOfUserResponseBody(name='body'),
}

async function listInstancesOfUserWithOptions(runtime: Util.RuntimeOptions): ListInstancesOfUserResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('ListInstancesOfUser', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listInstancesOfUser(): ListInstancesOfUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInstancesOfUserWithOptions(runtime);
}

model ListIvrTrackingDetailRequest {
  calledNumber?: string(name='CalledNumber'),
  callingNumber?: string(name='CallingNumber'),
  contactId?: string(name='ContactId'),
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  startTime?: long(name='StartTime'),
  stopTime?: long(name='StopTime'),
}

model ListIvrTrackingDetailResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  ivrTrackingDetails?: {
    list?: {
      ivrTrackingDetail?: [ 
      {
        calledNumber?: string(name='CalledNumber'),
        callingNumber?: string(name='CallingNumber'),
        contactId?: string(name='ContactId'),
        description?: string(name='Description'),
        deviceID?: string(name='DeviceID'),
        flowName?: string(name='FlowName'),
        inputData?: string(name='InputData'),
        nodeName?: string(name='NodeName'),
        nodeType?: string(name='NodeType'),
        outputData?: string(name='OutputData'),
        startTime?: long(name='StartTime'),
        status?: string(name='Status'),
        stopTime?: long(name='StopTime'),
        tenantId?: string(name='TenantId'),
      }
    ](name='IvrTrackingDetail')
    }(name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='IvrTrackingDetails'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListIvrTrackingDetailResponse = {
  headers: map[string]string(name='headers'),
  body: ListIvrTrackingDetailResponseBody(name='body'),
}

async function listIvrTrackingDetailWithOptions(request: ListIvrTrackingDetailRequest, runtime: Util.RuntimeOptions): ListIvrTrackingDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListIvrTrackingDetail', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listIvrTrackingDetail(request: ListIvrTrackingDetailRequest): ListIvrTrackingDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return listIvrTrackingDetailWithOptions(request, runtime);
}

model ListJobGroupsRequest {
  endTime?: long(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  startTime?: long(name='StartTime'),
}

model ListJobGroupsResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  jobGroups?: {
    list?: [ 
      {
        callingNumbers?: [ string ](name='CallingNumbers'),
        creationTime?: long(name='CreationTime'),
        description?: string(name='Description'),
        id?: string(name='Id'),
        jobFilePath?: string(name='JobFilePath'),
        name?: string(name='Name'),
        progress?: {
          categories?: [ 
            {
              key?: string(name='Key'),
              value?: string(name='Value'),
            }
          ](name='Categories'),
          duration?: int32(name='Duration'),
          startTime?: long(name='StartTime'),
          status?: string(name='Status'),
          totalCompleted?: int32(name='TotalCompleted'),
          totalJobs?: int32(name='TotalJobs'),
          totalNotAnswered?: int32(name='TotalNotAnswered'),
        }(name='Progress'),
        scenarioId?: string(name='ScenarioId'),
        strategy?: {
          customized?: string(name='Customized'),
          description?: string(name='Description'),
          endTime?: long(name='EndTime'),
          followUpStrategy?: string(name='FollowUpStrategy'),
          id?: string(name='Id'),
          isTemplate?: boolean(name='IsTemplate'),
          maxAttemptsPerDay?: int32(name='MaxAttemptsPerDay'),
          minAttemptInterval?: int32(name='MinAttemptInterval'),
          name?: string(name='Name'),
          repeatBy?: string(name='RepeatBy'),
          repeatDays?: [ string ](name='RepeatDays'),
          routingStrategy?: string(name='RoutingStrategy'),
          startTime?: long(name='StartTime'),
          type?: string(name='Type'),
          workingTime?: [ 
            {
              beginTime?: string(name='BeginTime'),
              endTime?: string(name='EndTime'),
            }
          ](name='WorkingTime'),
        }(name='Strategy'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='JobGroups'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListJobGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListJobGroupsResponseBody(name='body'),
}

async function listJobGroupsWithOptions(request: ListJobGroupsRequest, runtime: Util.RuntimeOptions): ListJobGroupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListJobGroups', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listJobGroups(request: ListJobGroupsRequest): ListJobGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listJobGroupsWithOptions(request, runtime);
}

model ListJobStatusRequest {
  contactName?: string(name='ContactName'),
  endTime?: long(name='EndTime'),
  groupId?: string(name='GroupId'),
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  phoneNumber?: string(name='PhoneNumber'),
  scenarioId?: string(name='ScenarioId'),
  startTime?: long(name='StartTime'),
  timeAlignment?: string(name='TimeAlignment'),
}

model ListJobStatusResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  jobs?: {
    list?: [ 
      {
        callingNumbers?: [ string ](name='CallingNumbers'),
        contacts?: [ 
          {
            contactId?: string(name='ContactId'),
            contactName?: string(name='ContactName'),
            honorific?: string(name='Honorific'),
            jobId?: string(name='JobId'),
            phoneNumber?: string(name='PhoneNumber'),
            referenceId?: string(name='ReferenceId'),
            role?: string(name='Role'),
            state?: string(name='State'),
          }
        ](name='Contacts'),
        extras?: [ 
          {
            key?: string(name='Key'),
            value?: string(name='Value'),
          }
        ](name='Extras'),
        failureReason?: string(name='FailureReason'),
        groupId?: string(name='GroupId'),
        jobId?: string(name='JobId'),
        priority?: int32(name='Priority'),
        referenceId?: string(name='ReferenceId'),
        scenarioId?: string(name='ScenarioId'),
        status?: string(name='Status'),
        strategyId?: string(name='StrategyId'),
        summary?: [ 
          {
            category?: string(name='Category'),
            content?: string(name='Content'),
            conversationDetailId?: string(name='ConversationDetailId'),
            groupId?: string(name='GroupId'),
            jobId?: string(name='JobId'),
            summaryId?: string(name='SummaryId'),
            summaryName?: string(name='SummaryName'),
            taskId?: string(name='TaskId'),
          }
        ](name='Summary'),
        tasks?: [ 
          {
            actualTime?: long(name='ActualTime'),
            brief?: string(name='Brief'),
            callId?: string(name='CallId'),
            calledNumber?: string(name='CalledNumber'),
            callingNumber?: string(name='CallingNumber'),
            chatbotId?: string(name='ChatbotId'),
            contact?: {
              contactId?: string(name='ContactId'),
              contactName?: string(name='ContactName'),
              honorific?: string(name='Honorific'),
              jobId?: string(name='JobId'),
              phoneNumber?: string(name='PhoneNumber'),
              referenceId?: string(name='ReferenceId'),
              role?: string(name='Role'),
              state?: string(name='State'),
            }(name='Contact'),
            duration?: int32(name='Duration'),
            jobId?: string(name='JobId'),
            planedTime?: long(name='PlanedTime'),
            scenarioId?: string(name='ScenarioId'),
            status?: string(name='Status'),
            taskId?: string(name='TaskId'),
          }
        ](name='Tasks'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Jobs'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListJobStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ListJobStatusResponseBody(name='body'),
}

async function listJobStatusWithOptions(request: ListJobStatusRequest, runtime: Util.RuntimeOptions): ListJobStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListJobStatus', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listJobStatus(request: ListJobStatusRequest): ListJobStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return listJobStatusWithOptions(request, runtime);
}

model ListJobsByGroupRequest {
  instanceId?: string(name='InstanceId'),
  jobFailureReason?: string(name='JobFailureReason'),
  jobGroupId?: string(name='JobGroupId'),
  jobStatus?: string(name='JobStatus'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListJobsByGroupResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  jobs?: {
    list?: [ 
      {
        callingNumbers?: [ string ](name='CallingNumbers'),
        contacts?: [ 
          {
            contactId?: string(name='ContactId'),
            contactName?: string(name='ContactName'),
            honorific?: string(name='Honorific'),
            jobId?: string(name='JobId'),
            phoneNumber?: string(name='PhoneNumber'),
            referenceId?: string(name='ReferenceId'),
            role?: string(name='Role'),
            state?: string(name='State'),
          }
        ](name='Contacts'),
        extras?: [ 
          {
            key?: string(name='Key'),
            value?: string(name='Value'),
          }
        ](name='Extras'),
        failureReason?: string(name='FailureReason'),
        groupId?: string(name='GroupId'),
        jobId?: string(name='JobId'),
        priority?: int32(name='Priority'),
        referenceId?: string(name='ReferenceId'),
        scenarioId?: string(name='ScenarioId'),
        status?: string(name='Status'),
        strategyId?: string(name='StrategyId'),
        summary?: [ 
          {
            category?: string(name='Category'),
            content?: string(name='Content'),
            conversationDetailId?: string(name='ConversationDetailId'),
            groupId?: string(name='GroupId'),
            jobId?: string(name='JobId'),
            summaryId?: string(name='SummaryId'),
            summaryName?: string(name='SummaryName'),
            taskId?: string(name='TaskId'),
          }
        ](name='Summary'),
        systemPriority?: int32(name='SystemPriority'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Jobs'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListJobsByGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ListJobsByGroupResponseBody(name='body'),
}

async function listJobsByGroupWithOptions(request: ListJobsByGroupRequest, runtime: Util.RuntimeOptions): ListJobsByGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListJobsByGroup', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listJobsByGroup(request: ListJobsByGroupRequest): ListJobsByGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return listJobsByGroupWithOptions(request, runtime);
}

model ListMediasRequest {
  instanceId?: string(name='InstanceId'),
  namePrefix?: string(name='NamePrefix'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListMediasResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  medias?: {
    list?: {
      media?: [ 
      {
        content?: string(name='Content'),
        description?: string(name='Description'),
        fileName?: string(name='FileName'),
        filePath?: string(name='FilePath'),
        instance?: string(name='Instance'),
        name?: string(name='Name'),
        ossFileName?: string(name='OssFileName'),
        status?: string(name='Status'),
        type?: string(name='Type'),
      }
    ](name='Media')
    }(name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Medias'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListMediasResponse = {
  headers: map[string]string(name='headers'),
  body: ListMediasResponseBody(name='body'),
}

async function listMediasWithOptions(request: ListMediasRequest, runtime: Util.RuntimeOptions): ListMediasResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListMedias', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listMedias(request: ListMediasRequest): ListMediasResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMediasWithOptions(request, runtime);
}

model ListOutboundPhoneNumberOfUserRequest {
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  userId?: string(name='UserId'),
}

model ListOutboundPhoneNumberOfUserResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  numberList?: {
    number?: [ string ](name='Number')
  }(name='NumberList'),
  outboundPhoneNumbers?: {
    phoneNumber?: [ 
    {
      allowOutbound?: boolean(name='AllowOutbound'),
      city?: string(name='City'),
      instanceId?: string(name='InstanceId'),
      number?: string(name='Number'),
      phoneNumberDescription?: string(name='PhoneNumberDescription'),
      phoneNumberId?: string(name='PhoneNumberId'),
      privacyNumber?: {
        bizId?: string(name='BizId'),
        extra?: string(name='Extra'),
        phoneNumber?: string(name='PhoneNumber'),
        poolId?: string(name='PoolId'),
        poolName?: string(name='PoolName'),
        regionNameCity?: string(name='RegionNameCity'),
        subId?: string(name='SubId'),
        telX?: string(name='TelX'),
        type?: string(name='Type'),
      }(name='PrivacyNumber'),
      privateFlag?: boolean(name='PrivateFlag'),
      province?: string(name='Province'),
      remainingTime?: int32(name='RemainingTime'),
      sipTelX?: string(name='SipTelX'),
      testOnly?: boolean(name='TestOnly'),
      trunks?: int32(name='Trunks'),
      usage?: string(name='Usage'),
    }
  ](name='PhoneNumber')
  }(name='OutboundPhoneNumbers'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListOutboundPhoneNumberOfUserResponse = {
  headers: map[string]string(name='headers'),
  body: ListOutboundPhoneNumberOfUserResponseBody(name='body'),
}

async function listOutboundPhoneNumberOfUserWithOptions(request: ListOutboundPhoneNumberOfUserRequest, runtime: Util.RuntimeOptions): ListOutboundPhoneNumberOfUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListOutboundPhoneNumberOfUser', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listOutboundPhoneNumberOfUser(request: ListOutboundPhoneNumberOfUserRequest): ListOutboundPhoneNumberOfUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOutboundPhoneNumberOfUserWithOptions(request, runtime);
}

model ListPhoneNumbersRequest {
  instanceId?: string(name='InstanceId'),
  outboundOnly?: boolean(name='OutboundOnly'),
}

model ListPhoneNumbersResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  phoneNumbers?: {
    phoneNumber?: [ 
    {
      allowOutbound?: boolean(name='AllowOutbound'),
      assignee?: string(name='Assignee'),
      city?: string(name='City'),
      contactFlow?: {
        contactFlowDescription?: string(name='ContactFlowDescription'),
        contactFlowId?: string(name='ContactFlowId'),
        contactFlowName?: string(name='ContactFlowName'),
        instanceId?: string(name='InstanceId'),
        type?: string(name='Type'),
      }(name='ContactFlow'),
      instanceId?: string(name='InstanceId'),
      number?: string(name='Number'),
      numberCommodityStatus?: int32(name='NumberCommodityStatus'),
      phoneNumberDescription?: string(name='PhoneNumberDescription'),
      phoneNumberId?: string(name='PhoneNumberId'),
      privacyNumber?: {
        bizId?: string(name='BizId'),
        extra?: string(name='Extra'),
        phoneNumber?: string(name='PhoneNumber'),
        poolId?: string(name='PoolId'),
        poolName?: string(name='PoolName'),
        regionNameCity?: string(name='RegionNameCity'),
        subId?: string(name='SubId'),
        telX?: string(name='TelX'),
        type?: string(name='Type'),
      }(name='PrivacyNumber'),
      province?: string(name='Province'),
      remainingTime?: int32(name='RemainingTime'),
      sipTelX?: string(name='SipTelX'),
      skillGroups?: {
        skillGroup?: [ 
        {
          skillGroupId?: string(name='SkillGroupId'),
          skillGroupName?: string(name='SkillGroupName'),
        }
      ](name='SkillGroup')
      }(name='SkillGroups'),
      testOnly?: boolean(name='TestOnly'),
      trunks?: int32(name='Trunks'),
      usage?: string(name='Usage'),
    }
  ](name='PhoneNumber')
  }(name='PhoneNumbers'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListPhoneNumbersResponse = {
  headers: map[string]string(name='headers'),
  body: ListPhoneNumbersResponseBody(name='body'),
}

async function listPhoneNumbersWithOptions(request: ListPhoneNumbersRequest, runtime: Util.RuntimeOptions): ListPhoneNumbersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListPhoneNumbers', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listPhoneNumbers(request: ListPhoneNumbersRequest): ListPhoneNumbersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPhoneNumbersWithOptions(request, runtime);
}

model ListPhoneTagsRequest {
  currentPage?: int32(name='CurrentPage'),
  instanceId?: string(name='InstanceId'),
  number?: string(name='Number'),
  numberGroupIds?: [ string ](name='NumberGroupIds'),
  outboundOnly?: boolean(name='OutboundOnly'),
  pageSize?: int32(name='PageSize'),
}

model ListPhoneTagsResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  phoneNumbers?: {
    list?: [ 
      {
        city?: string(name='City'),
        concurrency?: int32(name='Concurrency'),
        contactFlowId?: string(name='ContactFlowId'),
        createTime?: long(name='CreateTime'),
        instanceId?: string(name='InstanceId'),
        number?: string(name='Number'),
        phoneNumberDescription?: string(name='PhoneNumberDescription'),
        phoneNumberId?: string(name='PhoneNumberId'),
        provider?: string(name='Provider'),
        province?: string(name='Province'),
        serviceTag?: string(name='ServiceTag'),
        skillGroupIdList?: [ string ](name='SkillGroupIdList'),
        type?: int32(name='Type'),
        usage?: string(name='Usage'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PhoneNumbers'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListPhoneTagsResponse = {
  headers: map[string]string(name='headers'),
  body: ListPhoneTagsResponseBody(name='body'),
}

async function listPhoneTagsWithOptions(request: ListPhoneTagsRequest, runtime: Util.RuntimeOptions): ListPhoneTagsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListPhoneTags', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listPhoneTags(request: ListPhoneTagsRequest): ListPhoneTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPhoneTagsWithOptions(request, runtime);
}

model ListRealTimeAgentRequest {
  instanceId?: string(name='InstanceId'),
}

model ListRealTimeAgentResponseBody = {
  code?: string(name='Code'),
  data?: {
    user?: [ 
    {
      displayName?: string(name='DisplayName'),
      dn?: string(name='Dn'),
      phone?: string(name='Phone'),
      ramId?: string(name='RamId'),
      skillLevels?: {
        skillLevel?: [ 
        {
          level?: int32(name='Level'),
          skill?: {
            instanceId?: string(name='InstanceId'),
            skillGroupDescription?: string(name='SkillGroupDescription'),
            skillGroupId?: string(name='SkillGroupId'),
            skillGroupName?: string(name='SkillGroupName'),
          }(name='Skill'),
          skillLevelId?: string(name='SkillLevelId'),
        }
      ](name='SkillLevel')
      }(name='SkillLevels'),
      state?: string(name='State'),
      stateDesc?: string(name='StateDesc'),
    }
  ](name='User')
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListRealTimeAgentResponse = {
  headers: map[string]string(name='headers'),
  body: ListRealTimeAgentResponseBody(name='body'),
}

async function listRealTimeAgentWithOptions(request: ListRealTimeAgentRequest, runtime: Util.RuntimeOptions): ListRealTimeAgentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListRealTimeAgent', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listRealTimeAgent(request: ListRealTimeAgentRequest): ListRealTimeAgentResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRealTimeAgentWithOptions(request, runtime);
}

model ListRecentCallRecordsRequest {
  criteria?: string(name='Criteria'),
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  startTime?: long(name='StartTime'),
  stopTime?: long(name='StopTime'),
}

model ListRecentCallRecordsResponseBody = {
  callDetailRecords?: {
    list?: {
      callDetailRecord?: [ 
      {
        agentNames?: string(name='AgentNames'),
        agents?: {
          callDetailAgent?: [ 
          {
            agentId?: string(name='AgentId'),
            agentName?: string(name='AgentName'),
            contactId?: string(name='ContactId'),
            feedback?: string(name='Feedback'),
            holdTime?: int32(name='HoldTime'),
            queueTime?: int32(name='QueueTime'),
            ringTime?: int32(name='RingTime'),
            satisfaction?: string(name='Satisfaction'),
            skillGroupName?: string(name='SkillGroupName'),
            startTime?: long(name='StartTime'),
            talkTime?: int32(name='TalkTime'),
            workTime?: int32(name='WorkTime'),
          }
        ](name='CallDetailAgent')
        }(name='Agents'),
        calledNumber?: string(name='CalledNumber'),
        callingNumber?: string(name='CallingNumber'),
        contactDisposition?: string(name='ContactDisposition'),
        contactId?: string(name='ContactId'),
        contactType?: string(name='ContactType'),
        duration?: int32(name='Duration'),
        extraAttr?: string(name='ExtraAttr'),
        feedback?: string(name='Feedback'),
        instanceId?: string(name='InstanceId'),
        recordings?: {
          recording?: [ 
          {
            agentId?: string(name='AgentId'),
            agentName?: string(name='AgentName'),
            calledNumber?: string(name='CalledNumber'),
            callingNumber?: string(name='CallingNumber'),
            channel?: string(name='Channel'),
            contactId?: string(name='ContactId'),
            contactType?: string(name='ContactType'),
            duration?: int32(name='Duration'),
            fileDescription?: string(name='FileDescription'),
            fileName?: string(name='FileName'),
            filePath?: string(name='FilePath'),
            instanceId?: string(name='InstanceId'),
            startTime?: long(name='StartTime'),
          }
        ](name='Recording')
        }(name='Recordings'),
        satisfaction?: int32(name='Satisfaction'),
        satisfactionDesc?: string(name='SatisfactionDesc'),
        skillGroupNames?: string(name='SkillGroupNames'),
        startTime?: long(name='StartTime'),
      }
    ](name='CallDetailRecord')
    }(name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='CallDetailRecords'),
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListRecentCallRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: ListRecentCallRecordsResponseBody(name='body'),
}

async function listRecentCallRecordsWithOptions(request: ListRecentCallRecordsRequest, runtime: Util.RuntimeOptions): ListRecentCallRecordsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListRecentCallRecords', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listRecentCallRecords(request: ListRecentCallRecordsRequest): ListRecentCallRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRecentCallRecordsWithOptions(request, runtime);
}

model ListRecordingOfDualTrackRequest {
  agentId?: string(name='AgentId'),
  calledNumber?: string(name='CalledNumber'),
  callingNumber?: string(name='CallingNumber'),
  connectId?: string(name='ConnectId'),
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  startTime?: long(name='StartTime'),
  stopTime?: long(name='StopTime'),
}

model ListRecordingOfDualTrackResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  recordings?: {
    list?: {
      recording?: [ 
      {
        agentId?: string(name='AgentId'),
        agentName?: string(name='AgentName'),
        calledNumber?: string(name='CalledNumber'),
        callingNumber?: string(name='CallingNumber'),
        channel?: string(name='Channel'),
        contactId?: string(name='ContactId'),
        contactType?: string(name='ContactType'),
        duration?: int32(name='Duration'),
        fileDescription?: string(name='FileDescription'),
        fileName?: string(name='FileName'),
        filePath?: string(name='FilePath'),
        instanceId?: string(name='InstanceId'),
        startTime?: long(name='StartTime'),
      }
    ](name='Recording')
    }(name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Recordings'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListRecordingOfDualTrackResponse = {
  headers: map[string]string(name='headers'),
  body: ListRecordingOfDualTrackResponseBody(name='body'),
}

async function listRecordingOfDualTrackWithOptions(request: ListRecordingOfDualTrackRequest, runtime: Util.RuntimeOptions): ListRecordingOfDualTrackResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListRecordingOfDualTrack', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listRecordingOfDualTrack(request: ListRecordingOfDualTrackRequest): ListRecordingOfDualTrackResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRecordingOfDualTrackWithOptions(request, runtime);
}

model ListRecordingsRequest {
  agentId?: string(name='AgentId'),
  criteria?: string(name='Criteria'),
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  phoneNumber?: string(name='PhoneNumber'),
  startTime?: long(name='StartTime'),
  stopTime?: long(name='StopTime'),
}

model ListRecordingsResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  recordings?: {
    list?: {
      recording?: [ 
      {
        agentId?: string(name='AgentId'),
        agentName?: string(name='AgentName'),
        calledNumber?: string(name='CalledNumber'),
        callingNumber?: string(name='CallingNumber'),
        channel?: string(name='Channel'),
        contactId?: string(name='ContactId'),
        contactType?: string(name='ContactType'),
        duration?: int32(name='Duration'),
        fileDescription?: string(name='FileDescription'),
        fileName?: string(name='FileName'),
        filePath?: string(name='FilePath'),
        instanceId?: string(name='InstanceId'),
        startTime?: long(name='StartTime'),
      }
    ](name='Recording')
    }(name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Recordings'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListRecordingsResponse = {
  headers: map[string]string(name='headers'),
  body: ListRecordingsResponseBody(name='body'),
}

async function listRecordingsWithOptions(request: ListRecordingsRequest, runtime: Util.RuntimeOptions): ListRecordingsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListRecordings', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listRecordings(request: ListRecordingsRequest): ListRecordingsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRecordingsWithOptions(request, runtime);
}

model ListRecordingsByContactIdRequest {
  contactId?: string(name='ContactId'),
  instanceId?: string(name='InstanceId'),
}

model ListRecordingsByContactIdResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  recordings?: {
    recording?: [ 
    {
      agentId?: string(name='AgentId'),
      agentName?: string(name='AgentName'),
      calledNumber?: string(name='CalledNumber'),
      callingNumber?: string(name='CallingNumber'),
      channel?: string(name='Channel'),
      contactId?: string(name='ContactId'),
      contactType?: string(name='ContactType'),
      duration?: int32(name='Duration'),
      fileDescription?: string(name='FileDescription'),
      fileName?: string(name='FileName'),
      filePath?: string(name='FilePath'),
      instanceId?: string(name='InstanceId'),
      qualityCheckTaskId?: string(name='QualityCheckTaskId'),
      qualityCheckTid?: string(name='QualityCheckTid'),
      startTime?: long(name='StartTime'),
    }
  ](name='Recording')
  }(name='Recordings'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListRecordingsByContactIdResponse = {
  headers: map[string]string(name='headers'),
  body: ListRecordingsByContactIdResponseBody(name='body'),
}

async function listRecordingsByContactIdWithOptions(request: ListRecordingsByContactIdRequest, runtime: Util.RuntimeOptions): ListRecordingsByContactIdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListRecordingsByContactId', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listRecordingsByContactId(request: ListRecordingsByContactIdRequest): ListRecordingsByContactIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRecordingsByContactIdWithOptions(request, runtime);
}

model ListRolesRequest {
  instanceId?: string(name='InstanceId'),
}

model ListRolesResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  roles?: {
    role?: [ 
    {
      instanceId?: string(name='InstanceId'),
      roleDescription?: string(name='RoleDescription'),
      roleId?: string(name='RoleId'),
      roleName?: string(name='RoleName'),
    }
  ](name='Role')
  }(name='Roles'),
  success?: boolean(name='Success'),
}

model ListRolesResponse = {
  headers: map[string]string(name='headers'),
  body: ListRolesResponseBody(name='body'),
}

async function listRolesWithOptions(request: ListRolesRequest, runtime: Util.RuntimeOptions): ListRolesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListRoles', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listRoles(request: ListRolesRequest): ListRolesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRolesWithOptions(request, runtime);
}

model ListScenarioTemplatesResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  scenarioTemplates?: [ 
    {
      description?: string(name='Description'),
      id?: string(name='Id'),
      isTemplate?: boolean(name='IsTemplate'),
      name?: string(name='Name'),
      surveys?: [ 
        {
          beebotId?: string(name='BeebotId'),
          description?: string(name='Description'),
          flow?: {
            flowId?: string(name='FlowId'),
            flowJson?: string(name='FlowJson'),
            isPublished?: boolean(name='IsPublished'),
          }(name='Flow'),
          globalQuestions?: string(name='GlobalQuestions'),
          id?: string(name='Id'),
          intents?: [ 
            {
              intentId?: string(name='IntentId'),
              nodeId?: string(name='NodeId'),
            }
          ](name='Intents'),
          name?: string(name='Name'),
          role?: string(name='Role'),
          round?: int32(name='Round'),
        }
      ](name='Surveys'),
      type?: string(name='Type'),
      variables?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Variables'),
    }
  ](name='ScenarioTemplates'),
  success?: boolean(name='Success'),
}

model ListScenarioTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: ListScenarioTemplatesResponseBody(name='body'),
}

async function listScenarioTemplatesWithOptions(runtime: Util.RuntimeOptions): ListScenarioTemplatesResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('ListScenarioTemplates', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listScenarioTemplates(): ListScenarioTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listScenarioTemplatesWithOptions(runtime);
}

model ListScenariosRequest {
  instanceId?: string(name='InstanceId'),
}

model ListScenariosResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  scenarios?: [ 
    {
      description?: string(name='Description'),
      id?: string(name='Id'),
      isTemplate?: boolean(name='IsTemplate'),
      name?: string(name='Name'),
      strategy?: {
        customized?: string(name='Customized'),
        description?: string(name='Description'),
        endTime?: long(name='EndTime'),
        followUpStrategy?: string(name='FollowUpStrategy'),
        id?: string(name='Id'),
        isTemplate?: boolean(name='IsTemplate'),
        maxAttemptsPerDay?: int32(name='MaxAttemptsPerDay'),
        minAttemptInterval?: int32(name='MinAttemptInterval'),
        name?: string(name='Name'),
        repeatBy?: string(name='RepeatBy'),
        repeatDays?: [ string ](name='RepeatDays'),
        routingStrategy?: string(name='RoutingStrategy'),
        startTime?: long(name='StartTime'),
        type?: string(name='Type'),
        workingTime?: [ 
          {
            beginTime?: string(name='BeginTime'),
            endTime?: string(name='EndTime'),
          }
        ](name='WorkingTime'),
      }(name='Strategy'),
      surveys?: [ 
        {
          beebotId?: string(name='BeebotId'),
          description?: string(name='Description'),
          id?: string(name='Id'),
          intents?: [ 
            {
              intentId?: string(name='IntentId'),
              nodeId?: string(name='NodeId'),
            }
          ](name='Intents'),
          name?: string(name='Name'),
          role?: string(name='Role'),
          round?: int32(name='Round'),
        }
      ](name='Surveys'),
      type?: string(name='Type'),
      variables?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Variables'),
    }
  ](name='Scenarios'),
  success?: boolean(name='Success'),
}

model ListScenariosResponse = {
  headers: map[string]string(name='headers'),
  body: ListScenariosResponseBody(name='body'),
}

async function listScenariosWithOptions(request: ListScenariosRequest, runtime: Util.RuntimeOptions): ListScenariosResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListScenarios', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listScenarios(request: ListScenariosRequest): ListScenariosResponse {
  var runtime = new Util.RuntimeOptions{};
  return listScenariosWithOptions(request, runtime);
}

model ListSkillGroupStatesRequest {
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  skillGroupIds?: string(name='SkillGroupIds'),
}

model ListSkillGroupStatesResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: {
      realTimeSkillGroupState?: [ 
      {
        breakingAgents?: long(name='BreakingAgents'),
        instanceId?: string(name='InstanceId'),
        loggedInAgents?: long(name='LoggedInAgents'),
        longestCall?: long(name='LongestCall'),
        readyAgents?: long(name='ReadyAgents'),
        skillGroupId?: string(name='SkillGroupId'),
        skillGroupName?: string(name='SkillGroupName'),
        talkingAgents?: long(name='TalkingAgents'),
        waitingCalls?: long(name='WaitingCalls'),
        workingAgents?: long(name='WorkingAgents'),
      }
    ](name='RealTimeSkillGroupState')
    }(name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListSkillGroupStatesResponse = {
  headers: map[string]string(name='headers'),
  body: ListSkillGroupStatesResponseBody(name='body'),
}

async function listSkillGroupStatesWithOptions(request: ListSkillGroupStatesRequest, runtime: Util.RuntimeOptions): ListSkillGroupStatesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListSkillGroupStates', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listSkillGroupStates(request: ListSkillGroupStatesRequest): ListSkillGroupStatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSkillGroupStatesWithOptions(request, runtime);
}

model ListSkillGroupSummaryReportsRequest {
  endTime?: string(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  skillGroupIds?: string(name='SkillGroupIds'),
  startTime?: string(name='StartTime'),
}

model ListSkillGroupSummaryReportsResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  pagedSkillGroupSummaryReport?: {
    list?: {
      skillGroupSummaryReport?: [ 
      {
        inbound?: {
          abandonedInQueueOfQueueCount?: long(name='AbandonedInQueueOfQueueCount'),
          answeredByAgentOfQueueCount?: long(name='AnsweredByAgentOfQueueCount'),
          answeredByAgentOfQueueMaxWaitTimeDuration?: long(name='AnsweredByAgentOfQueueMaxWaitTimeDuration'),
          answeredByAgentOfQueueWaitTimeDuration?: long(name='AnsweredByAgentOfQueueWaitTimeDuration'),
          averageRingTime?: long(name='AverageRingTime'),
          averageTalkTime?: long(name='AverageTalkTime'),
          averageWorkTime?: long(name='AverageWorkTime'),
          callsHandled?: long(name='CallsHandled'),
          callsOffered?: long(name='CallsOffered'),
          giveUpByAgentOfQueueCount?: long(name='GiveUpByAgentOfQueueCount'),
          handleRate?: float(name='HandleRate'),
          inComingQueueOfQueueCount?: long(name='InComingQueueOfQueueCount'),
          maxRingTime?: long(name='MaxRingTime'),
          maxTalkTime?: string(name='MaxTalkTime'),
          maxWorkTime?: long(name='MaxWorkTime'),
          overFlowInQueueOfQueueCount?: long(name='OverFlowInQueueOfQueueCount'),
          queueMaxWaitTimeDuration?: long(name='QueueMaxWaitTimeDuration'),
          queueWaitTimeDuration?: long(name='QueueWaitTimeDuration'),
          satisfactionIndex?: float(name='SatisfactionIndex'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
          serviceLevel20?: float(name='ServiceLevel20'),
          totalRingTime?: long(name='TotalRingTime'),
          totalTalkTime?: long(name='TotalTalkTime'),
          totalWorkTime?: long(name='TotalWorkTime'),
        }(name='Inbound'),
        instanceId?: string(name='InstanceId'),
        outbound?: {
          answerRate?: float(name='AnswerRate'),
          averageDialingTime?: long(name='AverageDialingTime'),
          averageTalkTime?: long(name='AverageTalkTime'),
          averageWorkTime?: long(name='AverageWorkTime'),
          callsAnswered?: long(name='CallsAnswered'),
          callsDialed?: long(name='CallsDialed'),
          maxDialingTime?: long(name='MaxDialingTime'),
          maxTalkTime?: long(name='MaxTalkTime'),
          maxWorkTime?: long(name='MaxWorkTime'),
          satisfactionIndex?: float(name='SatisfactionIndex'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
          totalDialingTime?: long(name='TotalDialingTime'),
          totalTalkTime?: long(name='TotalTalkTime'),
          totalWorkTime?: long(name='TotalWorkTime'),
        }(name='Outbound'),
        overall?: {
          averageReadyTime?: long(name='AverageReadyTime'),
          averageTalkTime?: long(name='AverageTalkTime'),
          averageWorkTime?: long(name='AverageWorkTime'),
          maxReadyTime?: long(name='MaxReadyTime'),
          maxTalkTime?: long(name='MaxTalkTime'),
          maxWorkTime?: long(name='MaxWorkTime'),
          occupancyRate?: float(name='OccupancyRate'),
          satisfactionIndex?: float(name='SatisfactionIndex'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
          totalBreakTime?: long(name='TotalBreakTime'),
          totalCalls?: long(name='TotalCalls'),
          totalLoggedInTime?: long(name='TotalLoggedInTime'),
          totalReadyTime?: long(name='TotalReadyTime'),
          totalTalkTime?: long(name='TotalTalkTime'),
          totalWorkTime?: long(name='TotalWorkTime'),
        }(name='Overall'),
        skillGroupId?: string(name='SkillGroupId'),
        skillGroupName?: string(name='SkillGroupName'),
      }
    ](name='SkillGroupSummaryReport')
    }(name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PagedSkillGroupSummaryReport'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListSkillGroupSummaryReportsResponse = {
  headers: map[string]string(name='headers'),
  body: ListSkillGroupSummaryReportsResponseBody(name='body'),
}

async function listSkillGroupSummaryReportsWithOptions(request: ListSkillGroupSummaryReportsRequest, runtime: Util.RuntimeOptions): ListSkillGroupSummaryReportsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListSkillGroupSummaryReports', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listSkillGroupSummaryReports(request: ListSkillGroupSummaryReportsRequest): ListSkillGroupSummaryReportsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSkillGroupSummaryReportsWithOptions(request, runtime);
}

model ListSkillGroupSummaryReportsByIntervalRequest {
  endTime?: string(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  interval?: string(name='Interval'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  skillGroupIds?: string(name='SkillGroupIds'),
  startTime?: string(name='StartTime'),
}

model ListSkillGroupSummaryReportsByIntervalResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  pagedSkillGroupSummaryReport?: {
    list?: {
      skillGroupTimeIntervalReport?: [ 
      {
        intervalList?: {
          skillGroupSummaryReport?: [ 
          {
            inbound?: {
              abandonedInQueueOfQueueCount?: long(name='AbandonedInQueueOfQueueCount'),
              answeredByAgentOfQueueCount?: long(name='AnsweredByAgentOfQueueCount'),
              answeredByAgentOfQueueMaxWaitTimeDuration?: long(name='AnsweredByAgentOfQueueMaxWaitTimeDuration'),
              answeredByAgentOfQueueWaitTimeDuration?: long(name='AnsweredByAgentOfQueueWaitTimeDuration'),
              averageRingTime?: long(name='AverageRingTime'),
              averageTalkTime?: long(name='AverageTalkTime'),
              averageWorkTime?: long(name='AverageWorkTime'),
              callsHandled?: long(name='CallsHandled'),
              callsOffered?: long(name='CallsOffered'),
              giveUpByAgentOfQueueCount?: long(name='GiveUpByAgentOfQueueCount'),
              handleRate?: float(name='HandleRate'),
              inComingQueueOfQueueCount?: long(name='InComingQueueOfQueueCount'),
              maxRingTime?: long(name='MaxRingTime'),
              maxTalkTime?: long(name='MaxTalkTime'),
              maxWorkTime?: long(name='MaxWorkTime'),
              overFlowInQueueOfQueueCount?: long(name='OverFlowInQueueOfQueueCount'),
              queueMaxWaitTimeDuration?: long(name='QueueMaxWaitTimeDuration'),
              queueWaitTimeDuration?: long(name='QueueWaitTimeDuration'),
              satisfactionIndex?: float(name='SatisfactionIndex'),
              satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
              satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
              serviceLevel20?: float(name='ServiceLevel20'),
              totalRingTime?: long(name='TotalRingTime'),
              totalTalkTime?: long(name='TotalTalkTime'),
              totalWorkTime?: long(name='TotalWorkTime'),
            }(name='Inbound'),
            instanceId?: string(name='InstanceId'),
            outbound?: {
              answerRate?: float(name='AnswerRate'),
              averageDialingTime?: long(name='AverageDialingTime'),
              averageTalkTime?: long(name='AverageTalkTime'),
              averageWorkTime?: long(name='AverageWorkTime'),
              callsAnswered?: long(name='CallsAnswered'),
              callsDialed?: long(name='CallsDialed'),
              maxDialingTime?: long(name='MaxDialingTime'),
              maxTalkTime?: long(name='MaxTalkTime'),
              maxWorkTime?: long(name='MaxWorkTime'),
              satisfactionIndex?: float(name='SatisfactionIndex'),
              satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
              satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
              totalDialingTime?: long(name='TotalDialingTime'),
              totalTalkTime?: long(name='TotalTalkTime'),
              totalWorkTime?: long(name='TotalWorkTime'),
            }(name='Outbound'),
            overall?: {
              averageReadyTime?: long(name='AverageReadyTime'),
              averageTalkTime?: long(name='AverageTalkTime'),
              averageWorkTime?: long(name='AverageWorkTime'),
              maxReadyTime?: long(name='MaxReadyTime'),
              maxTalkTime?: long(name='MaxTalkTime'),
              maxWorkTime?: long(name='MaxWorkTime'),
              occupancyRate?: float(name='OccupancyRate'),
              satisfactionIndex?: float(name='SatisfactionIndex'),
              satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
              satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
              totalBreakTime?: long(name='TotalBreakTime'),
              totalCalls?: long(name='TotalCalls'),
              totalLoggedInTime?: long(name='TotalLoggedInTime'),
              totalReadyTime?: long(name='TotalReadyTime'),
              totalTalkTime?: long(name='TotalTalkTime'),
              totalWorkTime?: long(name='TotalWorkTime'),
            }(name='Overall'),
            skillGroupId?: string(name='SkillGroupId'),
            skillGroupName?: string(name='SkillGroupName'),
            timestamp?: string(name='Timestamp'),
          }
        ](name='SkillGroupSummaryReport')
        }(name='IntervalList'),
        skillGroupId?: string(name='SkillGroupId'),
      }
    ](name='SkillGroupTimeIntervalReport')
    }(name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PagedSkillGroupSummaryReport'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListSkillGroupSummaryReportsByIntervalResponse = {
  headers: map[string]string(name='headers'),
  body: ListSkillGroupSummaryReportsByIntervalResponseBody(name='body'),
}

async function listSkillGroupSummaryReportsByIntervalWithOptions(request: ListSkillGroupSummaryReportsByIntervalRequest, runtime: Util.RuntimeOptions): ListSkillGroupSummaryReportsByIntervalResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListSkillGroupSummaryReportsByInterval', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listSkillGroupSummaryReportsByInterval(request: ListSkillGroupSummaryReportsByIntervalRequest): ListSkillGroupSummaryReportsByIntervalResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSkillGroupSummaryReportsByIntervalWithOptions(request, runtime);
}

model ListSkillGroupSummaryReportsSinceMidnightRequest {
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  skillGroups?: string(name='SkillGroups'),
}

model ListSkillGroupSummaryReportsSinceMidnightResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  pagedSkillGroupSummaryReport?: {
    list?: {
      skillGroupSummaryReport?: [ 
      {
        inbound?: {
          abandonedInQueueOfQueueCount?: long(name='AbandonedInQueueOfQueueCount'),
          answeredByAgentOfQueueCount?: long(name='AnsweredByAgentOfQueueCount'),
          answeredByAgentOfQueueMaxWaitTimeDuration?: long(name='AnsweredByAgentOfQueueMaxWaitTimeDuration'),
          answeredByAgentOfQueueWaitTimeDuration?: long(name='AnsweredByAgentOfQueueWaitTimeDuration'),
          averageRingTime?: long(name='AverageRingTime'),
          averageTalkTime?: long(name='AverageTalkTime'),
          averageWorkTime?: long(name='AverageWorkTime'),
          callsHandled?: long(name='CallsHandled'),
          callsOffered?: long(name='CallsOffered'),
          giveUpByAgentOfQueueCount?: long(name='GiveUpByAgentOfQueueCount'),
          handleRate?: float(name='HandleRate'),
          inComingQueueOfQueueCount?: long(name='InComingQueueOfQueueCount'),
          maxRingTime?: long(name='MaxRingTime'),
          maxTalkTime?: string(name='MaxTalkTime'),
          maxWorkTime?: long(name='MaxWorkTime'),
          overFlowInQueueOfQueueCount?: long(name='OverFlowInQueueOfQueueCount'),
          queueMaxWaitTimeDuration?: long(name='QueueMaxWaitTimeDuration'),
          queueWaitTimeDuration?: long(name='QueueWaitTimeDuration'),
          satisfactionIndex?: float(name='SatisfactionIndex'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
          serviceLevel20?: float(name='ServiceLevel20'),
          totalRingTime?: long(name='TotalRingTime'),
          totalTalkTime?: long(name='TotalTalkTime'),
          totalWorkTime?: long(name='TotalWorkTime'),
        }(name='Inbound'),
        instanceId?: string(name='InstanceId'),
        outbound?: {
          answerRate?: float(name='AnswerRate'),
          averageDialingTime?: long(name='AverageDialingTime'),
          averageTalkTime?: long(name='AverageTalkTime'),
          averageWorkTime?: long(name='AverageWorkTime'),
          callsAnswered?: long(name='CallsAnswered'),
          callsDialed?: long(name='CallsDialed'),
          maxDialingTime?: long(name='MaxDialingTime'),
          maxTalkTime?: long(name='MaxTalkTime'),
          maxWorkTime?: long(name='MaxWorkTime'),
          satisfactionIndex?: float(name='SatisfactionIndex'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
          totalDialingTime?: long(name='TotalDialingTime'),
          totalTalkTime?: long(name='TotalTalkTime'),
          totalWorkTime?: long(name='TotalWorkTime'),
        }(name='Outbound'),
        overall?: {
          averageReadyTime?: long(name='AverageReadyTime'),
          averageTalkTime?: long(name='AverageTalkTime'),
          averageWorkTime?: long(name='AverageWorkTime'),
          maxReadyTime?: long(name='MaxReadyTime'),
          maxTalkTime?: long(name='MaxTalkTime'),
          maxWorkTime?: long(name='MaxWorkTime'),
          occupancyRate?: float(name='OccupancyRate'),
          satisfactionIndex?: float(name='SatisfactionIndex'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
          totalBreakTime?: long(name='TotalBreakTime'),
          totalCalls?: long(name='TotalCalls'),
          totalLoggedInTime?: long(name='TotalLoggedInTime'),
          totalReadyTime?: long(name='TotalReadyTime'),
          totalTalkTime?: long(name='TotalTalkTime'),
          totalWorkTime?: long(name='TotalWorkTime'),
        }(name='Overall'),
        skillGroupId?: string(name='SkillGroupId'),
        skillGroupName?: string(name='SkillGroupName'),
        timestamp?: string(name='Timestamp'),
      }
    ](name='SkillGroupSummaryReport')
    }(name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PagedSkillGroupSummaryReport'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListSkillGroupSummaryReportsSinceMidnightResponse = {
  headers: map[string]string(name='headers'),
  body: ListSkillGroupSummaryReportsSinceMidnightResponseBody(name='body'),
}

async function listSkillGroupSummaryReportsSinceMidnightWithOptions(request: ListSkillGroupSummaryReportsSinceMidnightRequest, runtime: Util.RuntimeOptions): ListSkillGroupSummaryReportsSinceMidnightResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListSkillGroupSummaryReportsSinceMidnight', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listSkillGroupSummaryReportsSinceMidnight(request: ListSkillGroupSummaryReportsSinceMidnightRequest): ListSkillGroupSummaryReportsSinceMidnightResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSkillGroupSummaryReportsSinceMidnightWithOptions(request, runtime);
}

model ListSkillGroupsRequest {
  instanceId?: string(name='InstanceId'),
}

model ListSkillGroupsResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  skillGroups?: {
    skillGroup?: [ 
    {
      accQueueName?: string(name='AccQueueName'),
      accSkillGroupName?: string(name='AccSkillGroupName'),
      instanceId?: string(name='InstanceId'),
      outboundPhoneNumbers?: {
        phoneNumber?: [ 
        {
          allowOutbound?: boolean(name='AllowOutbound'),
          instanceId?: string(name='InstanceId'),
          number?: string(name='Number'),
          phoneNumberDescription?: string(name='PhoneNumberDescription'),
          phoneNumberId?: string(name='PhoneNumberId'),
          remainingTime?: int32(name='RemainingTime'),
          testOnly?: boolean(name='TestOnly'),
          trunks?: int32(name='Trunks'),
          usage?: string(name='Usage'),
        }
      ](name='PhoneNumber')
      }(name='OutboundPhoneNumbers'),
      routingStrategy?: string(name='RoutingStrategy'),
      skillGroupDescription?: string(name='SkillGroupDescription'),
      skillGroupId?: string(name='SkillGroupId'),
      skillGroupName?: string(name='SkillGroupName'),
      userCount?: int32(name='UserCount'),
    }
  ](name='SkillGroup')
  }(name='SkillGroups'),
  success?: boolean(name='Success'),
}

model ListSkillGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListSkillGroupsResponseBody(name='body'),
}

async function listSkillGroupsWithOptions(request: ListSkillGroupsRequest, runtime: Util.RuntimeOptions): ListSkillGroupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListSkillGroups', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listSkillGroups(request: ListSkillGroupsRequest): ListSkillGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSkillGroupsWithOptions(request, runtime);
}

model ListSkillGroupsOfUserRequest {
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
}

model ListSkillGroupsOfUserResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  skillLevels?: {
    skillLevel?: [ 
    {
      level?: int32(name='Level'),
      skill?: {
        instanceId?: string(name='InstanceId'),
        outboundPhoneNumbers?: {
          phoneNumber?: [ 
          {
            allowOutbound?: boolean(name='AllowOutbound'),
            city?: string(name='City'),
            instanceId?: string(name='InstanceId'),
            number?: string(name='Number'),
            phoneNumberDescription?: string(name='PhoneNumberDescription'),
            phoneNumberId?: string(name='PhoneNumberId'),
            province?: string(name='Province'),
            remainingTime?: int32(name='RemainingTime'),
            testOnly?: boolean(name='TestOnly'),
            trunks?: int32(name='Trunks'),
            usage?: string(name='Usage'),
          }
        ](name='PhoneNumber')
        }(name='OutboundPhoneNumbers'),
        routingStrategy?: string(name='RoutingStrategy'),
        skillGroupDescription?: string(name='SkillGroupDescription'),
        skillGroupId?: string(name='SkillGroupId'),
        skillGroupName?: string(name='SkillGroupName'),
      }(name='Skill'),
      skillLevelId?: string(name='SkillLevelId'),
    }
  ](name='SkillLevel')
  }(name='SkillLevels'),
  success?: boolean(name='Success'),
}

model ListSkillGroupsOfUserResponse = {
  headers: map[string]string(name='headers'),
  body: ListSkillGroupsOfUserResponseBody(name='body'),
}

async function listSkillGroupsOfUserWithOptions(request: ListSkillGroupsOfUserRequest, runtime: Util.RuntimeOptions): ListSkillGroupsOfUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListSkillGroupsOfUser', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listSkillGroupsOfUser(request: ListSkillGroupsOfUserRequest): ListSkillGroupsOfUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSkillGroupsOfUserWithOptions(request, runtime);
}

model ListSurveysRequest {
  instanceId?: string(name='InstanceId'),
  scenarioId?: string(name='ScenarioId'),
}

model ListSurveysResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  surveys?: [ 
    {
      asrCustomModel?: {
        corpora?: string(name='Corpora'),
        customModelStatus?: int32(name='CustomModelStatus'),
      }(name='AsrCustomModel'),
      description?: string(name='Description'),
      flow?: {
        flowId?: string(name='FlowId'),
        flowJson?: string(name='FlowJson'),
        isPublished?: boolean(name='IsPublished'),
      }(name='Flow'),
      globalQuestions?: string(name='GlobalQuestions'),
      hotWords?: string(name='HotWords'),
      id?: string(name='Id'),
      name?: string(name='Name'),
      role?: string(name='Role'),
      round?: int32(name='Round'),
      scenarioUuid?: string(name='ScenarioUuid'),
      speechOptimizationParam?: string(name='SpeechOptimizationParam'),
    }
  ](name='Surveys'),
}

model ListSurveysResponse = {
  headers: map[string]string(name='headers'),
  body: ListSurveysResponseBody(name='body'),
}

async function listSurveysWithOptions(request: ListSurveysRequest, runtime: Util.RuntimeOptions): ListSurveysResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListSurveys', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listSurveys(request: ListSurveysRequest): ListSurveysResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSurveysWithOptions(request, runtime);
}

model ListTransferableSkillGroupsRequest {
  instanceId?: string(name='InstanceId'),
}

model ListTransferableSkillGroupsResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  skillGroups?: [ 
    {
      accQueueName?: string(name='AccQueueName'),
      accSkillGroupName?: string(name='AccSkillGroupName'),
      allowPrivateOutboundNumber?: boolean(name='AllowPrivateOutboundNumber'),
      instanceId?: string(name='InstanceId'),
      routingStrategy?: string(name='RoutingStrategy'),
      skillGroupDescription?: string(name='SkillGroupDescription'),
      skillGroupId?: string(name='SkillGroupId'),
      skillGroupName?: string(name='SkillGroupName'),
      userCount?: int32(name='UserCount'),
    }
  ](name='SkillGroups'),
  success?: boolean(name='Success'),
}

model ListTransferableSkillGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListTransferableSkillGroupsResponseBody(name='body'),
}

async function listTransferableSkillGroupsWithOptions(request: ListTransferableSkillGroupsRequest, runtime: Util.RuntimeOptions): ListTransferableSkillGroupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTransferableSkillGroups', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTransferableSkillGroups(request: ListTransferableSkillGroupsRequest): ListTransferableSkillGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTransferableSkillGroupsWithOptions(request, runtime);
}

model ListTrunkProvidersResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  trunkProviders?: [ 
    {
      providerName?: string(name='ProviderName'),
      status?: string(name='Status'),
    }
  ](name='TrunkProviders'),
}

model ListTrunkProvidersResponse = {
  headers: map[string]string(name='headers'),
  body: ListTrunkProvidersResponseBody(name='body'),
}

async function listTrunkProvidersWithOptions(runtime: Util.RuntimeOptions): ListTrunkProvidersResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('ListTrunkProviders', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTrunkProviders(): ListTrunkProvidersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTrunkProvidersWithOptions(runtime);
}

model ListTrunksOfSkillGroupRequest {
  instanceId?: string(name='InstanceId'),
  skillGroupId?: string(name='SkillGroupId'),
}

model ListTrunksOfSkillGroupResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  trunkConfigs?: [ 
    {
      primary?: boolean(name='Primary'),
      providerName?: string(name='ProviderName'),
    }
  ](name='TrunkConfigs'),
}

model ListTrunksOfSkillGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ListTrunksOfSkillGroupResponseBody(name='body'),
}

async function listTrunksOfSkillGroupWithOptions(request: ListTrunksOfSkillGroupRequest, runtime: Util.RuntimeOptions): ListTrunksOfSkillGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTrunksOfSkillGroup', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTrunksOfSkillGroup(request: ListTrunksOfSkillGroupRequest): ListTrunksOfSkillGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTrunksOfSkillGroupWithOptions(request, runtime);
}

model ListUnreachableContactsRequest {
  instanceId?: string(name='InstanceId'),
  jobGroupId?: string(name='JobGroupId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListUnreachableContactsResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  unreachableContacts?: {
    list?: [ 
      {
        contacts?: [ 
          {
            contactId?: string(name='ContactId'),
            contactName?: string(name='ContactName'),
            phoneNumber?: string(name='PhoneNumber'),
            referenceId?: string(name='ReferenceId'),
            role?: string(name='Role'),
            state?: string(name='State'),
          }
        ](name='Contacts'),
        totalAttempts?: int32(name='TotalAttempts'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='UnreachableContacts'),
}

model ListUnreachableContactsResponse = {
  headers: map[string]string(name='headers'),
  body: ListUnreachableContactsResponseBody(name='body'),
}

async function listUnreachableContactsWithOptions(request: ListUnreachableContactsRequest, runtime: Util.RuntimeOptions): ListUnreachableContactsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListUnreachableContacts', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listUnreachableContacts(request: ListUnreachableContactsRequest): ListUnreachableContactsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUnreachableContactsWithOptions(request, runtime);
}

model ListUsersRequest {
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListUsersResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  users?: {
    list?: {
      user?: [ 
      {
        detail?: {
          department?: string(name='Department'),
          displayName?: string(name='DisplayName'),
          email?: string(name='Email'),
          loginName?: string(name='LoginName'),
          phone?: string(name='Phone'),
        }(name='Detail'),
        instanceId?: string(name='InstanceId'),
        primary?: boolean(name='Primary'),
        privateOutboundNumberId?: string(name='PrivateOutboundNumberId'),
        ramId?: string(name='RamId'),
        roles?: {
          role?: [ 
          {
            instanceId?: string(name='InstanceId'),
            roleDescription?: string(name='RoleDescription'),
            roleId?: string(name='RoleId'),
            roleName?: string(name='RoleName'),
          }
        ](name='Role')
        }(name='Roles'),
        skillLevels?: {
          skillLevel?: [ 
          {
            level?: int32(name='Level'),
            skill?: {
              instanceId?: string(name='InstanceId'),
              skillGroupDescription?: string(name='SkillGroupDescription'),
              skillGroupId?: string(name='SkillGroupId'),
              skillGroupName?: string(name='SkillGroupName'),
            }(name='Skill'),
            skillLevelId?: string(name='SkillLevelId'),
          }
        ](name='SkillLevel')
        }(name='SkillLevels'),
        userId?: string(name='UserId'),
      }
    ](name='User')
    }(name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Users'),
}

model ListUsersResponse = {
  headers: map[string]string(name='headers'),
  body: ListUsersResponseBody(name='body'),
}

async function listUsersWithOptions(request: ListUsersRequest, runtime: Util.RuntimeOptions): ListUsersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListUsers', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listUsers(request: ListUsersRequest): ListUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUsersWithOptions(request, runtime);
}

model ListUsersOfSkillGroupRequest {
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  skillGroupId?: string(name='SkillGroupId'),
}

model ListUsersOfSkillGroupResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  users?: {
    list?: {
      user?: [ 
      {
        detail?: {
          department?: string(name='Department'),
          displayName?: string(name='DisplayName'),
          email?: string(name='Email'),
          loginName?: string(name='LoginName'),
          phone?: string(name='Phone'),
        }(name='Detail'),
        instanceId?: string(name='InstanceId'),
        ramId?: string(name='RamId'),
        roles?: {
          role?: [ 
          {
            instanceId?: string(name='InstanceId'),
            privileges?: {
              privilege?: [ 
              {
                privilegeDescription?: string(name='PrivilegeDescription'),
                privilegeId?: string(name='PrivilegeId'),
                privilegeName?: string(name='PrivilegeName'),
              }
            ](name='Privilege')
            }(name='Privileges'),
            roleDescription?: string(name='RoleDescription'),
            roleId?: string(name='RoleId'),
            roleName?: string(name='RoleName'),
            userCount?: int32(name='UserCount'),
          }
        ](name='Role')
        }(name='Roles'),
        skillLevels?: {
          skillLevel?: [ 
          {
            level?: int32(name='Level'),
            skill?: {
              instanceId?: string(name='InstanceId'),
              skillGroupDescription?: string(name='SkillGroupDescription'),
              skillGroupId?: string(name='SkillGroupId'),
              skillGroupName?: string(name='SkillGroupName'),
            }(name='Skill'),
            skillLevelId?: string(name='SkillLevelId'),
          }
        ](name='SkillLevel')
        }(name='SkillLevels'),
        userId?: string(name='UserId'),
      }
    ](name='User')
    }(name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Users'),
}

model ListUsersOfSkillGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ListUsersOfSkillGroupResponseBody(name='body'),
}

async function listUsersOfSkillGroupWithOptions(request: ListUsersOfSkillGroupRequest, runtime: Util.RuntimeOptions): ListUsersOfSkillGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListUsersOfSkillGroup', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listUsersOfSkillGroup(request: ListUsersOfSkillGroupRequest): ListUsersOfSkillGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUsersOfSkillGroupWithOptions(request, runtime);
}

model ListVoiceAppraiseRequest {
  instanceId?: string(name='InstanceId'),
}

model ListVoiceAppraiseResponseBody = {
  code?: string(name='Code'),
  contactFlow?: {
    appliedVersion?: string(name='AppliedVersion'),
    contactFlowDescription?: string(name='ContactFlowDescription'),
    contactFlowId?: string(name='ContactFlowId'),
    contactFlowName?: string(name='ContactFlowName'),
    instanceId?: string(name='InstanceId'),
    phoneNumbers?: {
      phoneNumber?: [ 
      {
        instanceId?: string(name='InstanceId'),
        number?: string(name='Number'),
        phoneNumberDescription?: string(name='PhoneNumberDescription'),
        phoneNumberId?: string(name='PhoneNumberId'),
        remainingTime?: int32(name='RemainingTime'),
        trunks?: int32(name='Trunks'),
      }
    ](name='PhoneNumber')
    }(name='PhoneNumbers'),
    type?: string(name='Type'),
    versions?: {
      contactFlowVersion?: [ 
      {
        contactFlowVersionDescription?: string(name='ContactFlowVersionDescription'),
        contactFlowVersionId?: string(name='ContactFlowVersionId'),
        content?: string(name='Content'),
        lastModified?: string(name='LastModified'),
        lastModifiedBy?: string(name='LastModifiedBy'),
        status?: string(name='Status'),
        version?: string(name='Version'),
      }
    ](name='ContactFlowVersion')
    }(name='Versions'),
  }(name='ContactFlow'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  notice?: string(name='Notice'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListVoiceAppraiseResponse = {
  headers: map[string]string(name='headers'),
  body: ListVoiceAppraiseResponseBody(name='body'),
}

async function listVoiceAppraiseWithOptions(request: ListVoiceAppraiseRequest, runtime: Util.RuntimeOptions): ListVoiceAppraiseResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListVoiceAppraise', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listVoiceAppraise(request: ListVoiceAppraiseRequest): ListVoiceAppraiseResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVoiceAppraiseWithOptions(request, runtime);
}

model ModifyAgentDeviceRequest {
  agentDeviceId?: long(name='AgentDeviceId'),
  instanceId?: string(name='InstanceId'),
  isLogin?: int32(name='IsLogin'),
}

model ModifyAgentDeviceResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyAgentDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAgentDeviceResponseBody(name='body'),
}

async function modifyAgentDeviceWithOptions(request: ModifyAgentDeviceRequest, runtime: Util.RuntimeOptions): ModifyAgentDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyAgentDevice', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyAgentDevice(request: ModifyAgentDeviceRequest): ModifyAgentDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAgentDeviceWithOptions(request, runtime);
}

model ModifyCabInstanceRequest {
  callCenterInstanceId?: string(name='CallCenterInstanceId'),
  instanceDescription?: string(name='InstanceDescription'),
  instanceId?: string(name='InstanceId'),
  instanceName?: string(name='InstanceName'),
  maxConcurrentConversation?: int32(name='MaxConcurrentConversation'),
}

model ModifyCabInstanceResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  instance?: {
    callCenterInstanceId?: string(name='CallCenterInstanceId'),
    creationTime?: long(name='CreationTime'),
    instanceDescription?: string(name='InstanceDescription'),
    instanceId?: string(name='InstanceId'),
    instanceName?: string(name='InstanceName'),
    maxConcurrentConversation?: int32(name='MaxConcurrentConversation'),
    owner?: string(name='Owner'),
  }(name='Instance'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyCabInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCabInstanceResponseBody(name='body'),
}

async function modifyCabInstanceWithOptions(request: ModifyCabInstanceRequest, runtime: Util.RuntimeOptions): ModifyCabInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyCabInstance', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyCabInstance(request: ModifyCabInstanceRequest): ModifyCabInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCabInstanceWithOptions(request, runtime);
}

model ModifyCallRatioRequest {
  instanceId?: string(name='InstanceId'),
  jobGroupId?: string(name='JobGroupId'),
  ratio?: int32(name='Ratio'),
  skillGroupId?: string(name='SkillGroupId'),
}

model ModifyCallRatioResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyCallRatioResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCallRatioResponseBody(name='body'),
}

async function modifyCallRatioWithOptions(request: ModifyCallRatioRequest, runtime: Util.RuntimeOptions): ModifyCallRatioResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyCallRatio', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyCallRatio(request: ModifyCallRatioRequest): ModifyCallRatioResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCallRatioWithOptions(request, runtime);
}

model ModifyPhoneNumberRequest {
  contactFlowId?: string(name='ContactFlowId'),
  instanceId?: string(name='InstanceId'),
  phoneNumberId?: string(name='PhoneNumberId'),
  skillGroupId?: [ string ](name='SkillGroupId'),
  usage?: string(name='Usage'),
}

model ModifyPhoneNumberResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  phoneNumber?: {
    allowOutbound?: boolean(name='AllowOutbound'),
    contactFlow?: {
      contactFlowDescription?: string(name='ContactFlowDescription'),
      contactFlowId?: string(name='ContactFlowId'),
      contactFlowName?: string(name='ContactFlowName'),
      instanceId?: string(name='InstanceId'),
      type?: string(name='Type'),
    }(name='ContactFlow'),
    instanceId?: string(name='InstanceId'),
    number?: string(name='Number'),
    phoneNumberDescription?: string(name='PhoneNumberDescription'),
    phoneNumberId?: string(name='PhoneNumberId'),
    remainingTime?: int32(name='RemainingTime'),
    skillGroups?: {
      skillGroup?: [ 
      {
        skillGroupId?: string(name='SkillGroupId'),
        skillGroupName?: string(name='SkillGroupName'),
      }
    ](name='SkillGroup')
    }(name='SkillGroups'),
    testOnly?: boolean(name='TestOnly'),
    trunks?: int32(name='Trunks'),
    usage?: string(name='Usage'),
  }(name='PhoneNumber'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyPhoneNumberResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyPhoneNumberResponseBody(name='body'),
}

async function modifyPhoneNumberWithOptions(request: ModifyPhoneNumberRequest, runtime: Util.RuntimeOptions): ModifyPhoneNumberResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyPhoneNumber', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyPhoneNumber(request: ModifyPhoneNumberRequest): ModifyPhoneNumberResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyPhoneNumberWithOptions(request, runtime);
}

model ModifyPhoneTagsRequest {
  instanceId?: string(name='InstanceId'),
  serviceTag?: string(name='ServiceTag'),
  skillGroupIdList?: [ string ](name='SkillGroupIdList'),
}

model ModifyPhoneTagsResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyPhoneTagsResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyPhoneTagsResponseBody(name='body'),
}

async function modifyPhoneTagsWithOptions(request: ModifyPhoneTagsRequest, runtime: Util.RuntimeOptions): ModifyPhoneTagsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyPhoneTags', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyPhoneTags(request: ModifyPhoneTagsRequest): ModifyPhoneTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyPhoneTagsWithOptions(request, runtime);
}

model ModifyPrimaryTrunksOfSkillGroupRequest {
  instanceId?: string(name='InstanceId'),
  primaryProviderName?: [ string ](name='PrimaryProviderName'),
  skillGroupId?: string(name='SkillGroupId'),
}

model ModifyPrimaryTrunksOfSkillGroupResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyPrimaryTrunksOfSkillGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyPrimaryTrunksOfSkillGroupResponseBody(name='body'),
}

async function modifyPrimaryTrunksOfSkillGroupWithOptions(request: ModifyPrimaryTrunksOfSkillGroupRequest, runtime: Util.RuntimeOptions): ModifyPrimaryTrunksOfSkillGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyPrimaryTrunksOfSkillGroup', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyPrimaryTrunksOfSkillGroup(request: ModifyPrimaryTrunksOfSkillGroupRequest): ModifyPrimaryTrunksOfSkillGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyPrimaryTrunksOfSkillGroupWithOptions(request, runtime);
}

model ModifyPrivacyNumberCallDetailRequest {
  callId?: string(name='CallId'),
  contactId?: string(name='ContactId'),
  instanceId?: string(name='InstanceId'),
}

model ModifyPrivacyNumberCallDetailResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyPrivacyNumberCallDetailResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyPrivacyNumberCallDetailResponseBody(name='body'),
}

async function modifyPrivacyNumberCallDetailWithOptions(request: ModifyPrivacyNumberCallDetailRequest, runtime: Util.RuntimeOptions): ModifyPrivacyNumberCallDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyPrivacyNumberCallDetail', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyPrivacyNumberCallDetail(request: ModifyPrivacyNumberCallDetailRequest): ModifyPrivacyNumberCallDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyPrivacyNumberCallDetailWithOptions(request, runtime);
}

model ModifyScenarioRequest {
  description?: string(name='Description'),
  instanceId?: string(name='InstanceId'),
  name?: string(name='Name'),
  scenarioId?: string(name='ScenarioId'),
  variables?: string(name='Variables'),
}

model ModifyScenarioResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  scenario?: {
    isTemplate?: boolean(name='IsTemplate'),
    scenarioDescription?: string(name='ScenarioDescription'),
    scenarioId?: string(name='ScenarioId'),
    scenarioName?: string(name='ScenarioName'),
    strategy?: {
      customized?: string(name='Customized'),
      endTime?: long(name='EndTime'),
      followUpStrategy?: string(name='FollowUpStrategy'),
      isTemplate?: boolean(name='IsTemplate'),
      maxAttemptsPerDay?: int32(name='MaxAttemptsPerDay'),
      minAttemptInterval?: int32(name='MinAttemptInterval'),
      repeatBy?: string(name='RepeatBy'),
      repeatDays?: [ string ](name='RepeatDays'),
      routingStrategy?: string(name='RoutingStrategy'),
      startTime?: long(name='StartTime'),
      strategyDescription?: string(name='StrategyDescription'),
      strategyId?: string(name='StrategyId'),
      strategyName?: string(name='StrategyName'),
      type?: string(name='Type'),
      workingTime?: [ 
        {
          beginTime?: string(name='BeginTime'),
          endTime?: string(name='EndTime'),
        }
      ](name='WorkingTime'),
    }(name='Strategy'),
    surveys?: [ 
      {
        beebotId?: string(name='BeebotId'),
        intents?: [ 
          {
            intentId?: string(name='IntentId'),
            nodeId?: string(name='NodeId'),
          }
        ](name='Intents'),
        role?: string(name='Role'),
        round?: int32(name='Round'),
        surveyDescription?: string(name='SurveyDescription'),
        surveyId?: string(name='SurveyId'),
        surveyName?: string(name='SurveyName'),
      }
    ](name='Surveys'),
    type?: string(name='Type'),
    variables?: [ 
      {
        key?: string(name='Key'),
        value?: string(name='Value'),
      }
    ](name='Variables'),
  }(name='Scenario'),
  success?: boolean(name='Success'),
}

model ModifyScenarioResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyScenarioResponseBody(name='body'),
}

async function modifyScenarioWithOptions(request: ModifyScenarioRequest, runtime: Util.RuntimeOptions): ModifyScenarioResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyScenario', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyScenario(request: ModifyScenarioRequest): ModifyScenarioResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyScenarioWithOptions(request, runtime);
}

model ModifySkillGroupRequest {
  allowPrivateOutboundNumber?: boolean(name='AllowPrivateOutboundNumber'),
  description?: string(name='Description'),
  instanceId?: string(name='InstanceId'),
  name?: string(name='Name'),
  outboundPhoneNumberId?: [ string ](name='OutboundPhoneNumberId'),
  routingStrategy?: string(name='RoutingStrategy'),
  skillGroupId?: string(name='SkillGroupId'),
  skillLevel?: [ int32 ](name='SkillLevel'),
  userId?: [ string ](name='UserId'),
}

model ModifySkillGroupResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifySkillGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySkillGroupResponseBody(name='body'),
}

async function modifySkillGroupWithOptions(request: ModifySkillGroupRequest, runtime: Util.RuntimeOptions): ModifySkillGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifySkillGroup', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifySkillGroup(request: ModifySkillGroupRequest): ModifySkillGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySkillGroupWithOptions(request, runtime);
}

model ModifySkillGroupOfUserRequest {
  instanceId?: string(name='InstanceId'),
  roleId?: [ string ](name='RoleId'),
  skillGroupId?: [ string ](name='SkillGroupId'),
  skillLevel?: [ int32 ](name='SkillLevel'),
  userId?: string(name='UserId'),
}

model ModifySkillGroupOfUserResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifySkillGroupOfUserResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySkillGroupOfUserResponseBody(name='body'),
}

async function modifySkillGroupOfUserWithOptions(request: ModifySkillGroupOfUserRequest, runtime: Util.RuntimeOptions): ModifySkillGroupOfUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifySkillGroupOfUser', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifySkillGroupOfUser(request: ModifySkillGroupOfUserRequest): ModifySkillGroupOfUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySkillGroupOfUserWithOptions(request, runtime);
}

model ModifySkillGroupOutboundNumbersRequest {
  instanceId?: string(name='InstanceId'),
  operationType?: int32(name='OperationType'),
  outboundPhoneNumberId?: [ string ](name='OutboundPhoneNumberId'),
  skillGroupId?: string(name='SkillGroupId'),
}

model ModifySkillGroupOutboundNumbersResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifySkillGroupOutboundNumbersResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySkillGroupOutboundNumbersResponseBody(name='body'),
}

async function modifySkillGroupOutboundNumbersWithOptions(request: ModifySkillGroupOutboundNumbersRequest, runtime: Util.RuntimeOptions): ModifySkillGroupOutboundNumbersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifySkillGroupOutboundNumbers', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifySkillGroupOutboundNumbers(request: ModifySkillGroupOutboundNumbersRequest): ModifySkillGroupOutboundNumbersResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySkillGroupOutboundNumbersWithOptions(request, runtime);
}

model ModifySurveyRequest {
  corpora?: string(name='Corpora'),
  description?: string(name='Description'),
  flowId?: string(name='FlowId'),
  flowJson?: string(name='FlowJson'),
  globalQuestions?: string(name='GlobalQuestions'),
  instanceId?: string(name='InstanceId'),
  name?: string(name='Name'),
  role?: string(name='Role'),
  round?: int32(name='Round'),
  scenarioId?: string(name='ScenarioId'),
  speechOptimizationParam?: string(name='SpeechOptimizationParam'),
  surveyId?: string(name='SurveyId'),
}

model ModifySurveyResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  survey?: {
    asrCustomModel?: {
      corpora?: string(name='Corpora'),
      customModelStatus?: int32(name='CustomModelStatus'),
    }(name='AsrCustomModel'),
    description?: string(name='Description'),
    flow?: {
      flowId?: string(name='FlowId'),
      flowJson?: string(name='FlowJson'),
      isPublished?: boolean(name='IsPublished'),
    }(name='Flow'),
    globalQuestions?: string(name='GlobalQuestions'),
    hotWords?: string(name='HotWords'),
    id?: string(name='Id'),
    name?: string(name='Name'),
    role?: string(name='Role'),
    round?: int32(name='Round'),
    scenarioUuid?: string(name='ScenarioUuid'),
    speechOptimizationParam?: string(name='SpeechOptimizationParam'),
  }(name='Survey'),
}

model ModifySurveyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySurveyResponseBody(name='body'),
}

async function modifySurveyWithOptions(request: ModifySurveyRequest, runtime: Util.RuntimeOptions): ModifySurveyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifySurvey', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifySurvey(request: ModifySurveyRequest): ModifySurveyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySurveyWithOptions(request, runtime);
}

model ModifyUserRequest {
  displayName?: string(name='DisplayName'),
  email?: string(name='Email'),
  instanceId?: string(name='InstanceId'),
  phone?: string(name='Phone'),
  privateOutboundNumberId?: string(name='PrivateOutboundNumberId'),
  roleId?: [ string ](name='RoleId'),
  skillGroupId?: [ string ](name='SkillGroupId'),
  skillLevel?: [ int32 ](name='SkillLevel'),
  userId?: string(name='UserId'),
}

model ModifyUserResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyUserResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyUserResponseBody(name='body'),
}

async function modifyUserWithOptions(request: ModifyUserRequest, runtime: Util.RuntimeOptions): ModifyUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyUser', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyUser(request: ModifyUserRequest): ModifyUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyUserWithOptions(request, runtime);
}

model PickGlobalOutboundNumbersRequest {
  calleeNumber?: string(name='CalleeNumber'),
  count?: int32(name='Count'),
  instanceId?: string(name='InstanceId'),
  isVirtual?: boolean(name='IsVirtual'),
  skillGroupId?: [ string ](name='SkillGroupId'),
}

model PickGlobalOutboundNumbersResponseBody = {
  code?: string(name='Code'),
  dialNumberPairs?: {
    dialNumberPair?: [ 
    {
      callee?: {
        city?: string(name='City'),
        number?: string(name='Number'),
        province?: string(name='Province'),
      }(name='Callee'),
      caller?: {
        city?: string(name='City'),
        number?: string(name='Number'),
        province?: string(name='Province'),
      }(name='Caller'),
    }
  ](name='DialNumberPair')
  }(name='DialNumberPairs'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PickGlobalOutboundNumbersResponse = {
  headers: map[string]string(name='headers'),
  body: PickGlobalOutboundNumbersResponseBody(name='body'),
}

async function pickGlobalOutboundNumbersWithOptions(request: PickGlobalOutboundNumbersRequest, runtime: Util.RuntimeOptions): PickGlobalOutboundNumbersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PickGlobalOutboundNumbers', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function pickGlobalOutboundNumbers(request: PickGlobalOutboundNumbersRequest): PickGlobalOutboundNumbersResponse {
  var runtime = new Util.RuntimeOptions{};
  return pickGlobalOutboundNumbersWithOptions(request, runtime);
}

model PickLocalNumberRequest {
  calleeNumber?: string(name='CalleeNumber'),
  candidateNumber?: [ string ](name='CandidateNumber'),
  instanceId?: string(name='InstanceId'),
}

model PickLocalNumberResponseBody = {
  code?: string(name='Code'),
  data?: {
    callee?: {
      city?: string(name='City'),
      number?: string(name='Number'),
      province?: string(name='Province'),
    }(name='Callee'),
    caller?: {
      city?: string(name='City'),
      number?: string(name='Number'),
      province?: string(name='Province'),
    }(name='Caller'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PickLocalNumberResponse = {
  headers: map[string]string(name='headers'),
  body: PickLocalNumberResponseBody(name='body'),
}

async function pickLocalNumberWithOptions(request: PickLocalNumberRequest, runtime: Util.RuntimeOptions): PickLocalNumberResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PickLocalNumber', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function pickLocalNumber(request: PickLocalNumberRequest): PickLocalNumberResponse {
  var runtime = new Util.RuntimeOptions{};
  return pickLocalNumberWithOptions(request, runtime);
}

model PickOutboundNumbersRequest {
  calleeNumber?: string(name='CalleeNumber'),
  candidateNumber?: [ string ](name='CandidateNumber'),
  count?: int32(name='Count'),
  instanceId?: string(name='InstanceId'),
}

model PickOutboundNumbersResponseBody = {
  code?: string(name='Code'),
  dialNumberPairs?: {
    dialNumberPair?: [ 
    {
      callee?: {
        city?: string(name='City'),
        number?: string(name='Number'),
        province?: string(name='Province'),
      }(name='Callee'),
      caller?: {
        city?: string(name='City'),
        number?: string(name='Number'),
        province?: string(name='Province'),
      }(name='Caller'),
    }
  ](name='DialNumberPair')
  }(name='DialNumberPairs'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PickOutboundNumbersResponse = {
  headers: map[string]string(name='headers'),
  body: PickOutboundNumbersResponseBody(name='body'),
}

async function pickOutboundNumbersWithOptions(request: PickOutboundNumbersRequest, runtime: Util.RuntimeOptions): PickOutboundNumbersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PickOutboundNumbers', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function pickOutboundNumbers(request: PickOutboundNumbersRequest): PickOutboundNumbersResponse {
  var runtime = new Util.RuntimeOptions{};
  return pickOutboundNumbersWithOptions(request, runtime);
}

model PublishContactFlowVersionRequest {
  contactFlowVersionId?: string(name='ContactFlowVersionId'),
  instanceId?: string(name='InstanceId'),
  useTianGong?: boolean(name='UseTianGong'),
}

model PublishContactFlowVersionResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PublishContactFlowVersionResponse = {
  headers: map[string]string(name='headers'),
  body: PublishContactFlowVersionResponseBody(name='body'),
}

async function publishContactFlowVersionWithOptions(request: PublishContactFlowVersionRequest, runtime: Util.RuntimeOptions): PublishContactFlowVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PublishContactFlowVersion', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function publishContactFlowVersion(request: PublishContactFlowVersionRequest): PublishContactFlowVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return publishContactFlowVersionWithOptions(request, runtime);
}

model PublishPredictiveJobGroupRequest {
  instanceId?: string(name='InstanceId'),
  jobGroupId?: string(name='JobGroupId'),
  skillGroupId?: string(name='SkillGroupId'),
}

model PublishPredictiveJobGroupResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PublishPredictiveJobGroupResponse = {
  headers: map[string]string(name='headers'),
  body: PublishPredictiveJobGroupResponseBody(name='body'),
}

async function publishPredictiveJobGroupWithOptions(request: PublishPredictiveJobGroupRequest, runtime: Util.RuntimeOptions): PublishPredictiveJobGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PublishPredictiveJobGroup', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function publishPredictiveJobGroup(request: PublishPredictiveJobGroupRequest): PublishPredictiveJobGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return publishPredictiveJobGroupWithOptions(request, runtime);
}

model PublishSurveyRequest {
  instanceId?: string(name='InstanceId'),
  scenarioId?: string(name='ScenarioId'),
  surveyId?: string(name='SurveyId'),
}

model PublishSurveyResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PublishSurveyResponse = {
  headers: map[string]string(name='headers'),
  body: PublishSurveyResponseBody(name='body'),
}

async function publishSurveyWithOptions(request: PublishSurveyRequest, runtime: Util.RuntimeOptions): PublishSurveyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PublishSurvey', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function publishSurvey(request: PublishSurveyRequest): PublishSurveyResponse {
  var runtime = new Util.RuntimeOptions{};
  return publishSurveyWithOptions(request, runtime);
}

model RefreshTokenRequest {
  instanceId?: string(name='InstanceId'),
}

model RefreshTokenResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  token?: {
    signData?: string(name='SignData'),
    signature?: string(name='Signature'),
  }(name='Token'),
}

model RefreshTokenResponse = {
  headers: map[string]string(name='headers'),
  body: RefreshTokenResponseBody(name='body'),
}

async function refreshTokenWithOptions(request: RefreshTokenRequest, runtime: Util.RuntimeOptions): RefreshTokenResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RefreshToken', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function refreshToken(request: RefreshTokenRequest): RefreshTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return refreshTokenWithOptions(request, runtime);
}

model RemovePhoneNumberRequest {
  instanceId?: string(name='InstanceId'),
  phoneNumberId?: string(name='PhoneNumberId'),
}

model RemovePhoneNumberResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RemovePhoneNumberResponse = {
  headers: map[string]string(name='headers'),
  body: RemovePhoneNumberResponseBody(name='body'),
}

async function removePhoneNumberWithOptions(request: RemovePhoneNumberRequest, runtime: Util.RuntimeOptions): RemovePhoneNumberResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemovePhoneNumber', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removePhoneNumber(request: RemovePhoneNumberRequest): RemovePhoneNumberResponse {
  var runtime = new Util.RuntimeOptions{};
  return removePhoneNumberWithOptions(request, runtime);
}

model RemoveUsersRequest {
  instanceId?: string(name='InstanceId'),
  userId?: [ string ](name='UserId'),
}

model RemoveUsersResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RemoveUsersResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveUsersResponseBody(name='body'),
}

async function removeUsersWithOptions(request: RemoveUsersRequest, runtime: Util.RuntimeOptions): RemoveUsersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveUsers', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeUsers(request: RemoveUsersRequest): RemoveUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeUsersWithOptions(request, runtime);
}

model RemoveUsersFromSkillGroupRequest {
  instanceId?: string(name='InstanceId'),
  skillGroupId?: string(name='SkillGroupId'),
  userId?: [ string ](name='UserId'),
}

model RemoveUsersFromSkillGroupResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RemoveUsersFromSkillGroupResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveUsersFromSkillGroupResponseBody(name='body'),
}

async function removeUsersFromSkillGroupWithOptions(request: RemoveUsersFromSkillGroupRequest, runtime: Util.RuntimeOptions): RemoveUsersFromSkillGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveUsersFromSkillGroup', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeUsersFromSkillGroup(request: RemoveUsersFromSkillGroupRequest): RemoveUsersFromSkillGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeUsersFromSkillGroupWithOptions(request, runtime);
}

model RequestLoginInfoRequest {
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
}

model RequestLoginInfoResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  loginInfo?: {
    agentServerUrl?: string(name='AgentServerUrl'),
    displayName?: string(name='DisplayName'),
    extension?: string(name='Extension'),
    phoneNumber?: string(name='PhoneNumber'),
    region?: string(name='Region'),
    roles?: {
      role?: [ 
      {
        instanceId?: string(name='InstanceId'),
        roleDescription?: string(name='RoleDescription'),
        roleId?: string(name='RoleId'),
        roleName?: string(name='RoleName'),
      }
    ](name='Role')
    }(name='Roles'),
    signData?: string(name='SignData'),
    signature?: string(name='Signature'),
    tenantId?: string(name='TenantId'),
    userName?: string(name='UserName'),
    webRtcUrl?: string(name='WebRtcUrl'),
  }(name='LoginInfo'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RequestLoginInfoResponse = {
  headers: map[string]string(name='headers'),
  body: RequestLoginInfoResponseBody(name='body'),
}

async function requestLoginInfoWithOptions(request: RequestLoginInfoRequest, runtime: Util.RuntimeOptions): RequestLoginInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RequestLoginInfo', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function requestLoginInfo(request: RequestLoginInfoRequest): RequestLoginInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return requestLoginInfoWithOptions(request, runtime);
}

model ResetUserStatusRequest {
  instanceId?: string(name='InstanceId'),
  ramIdList?: [ long ](name='RamIdList'),
}

model ResetUserStatusResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ResetUserStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ResetUserStatusResponseBody(name='body'),
}

async function resetUserStatusWithOptions(request: ResetUserStatusRequest, runtime: Util.RuntimeOptions): ResetUserStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ResetUserStatus', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function resetUserStatus(request: ResetUserStatusRequest): ResetUserStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetUserStatusWithOptions(request, runtime);
}

model ResumeJobsRequest {
  all?: boolean(name='All'),
  groupId?: string(name='GroupId'),
  instanceId?: string(name='InstanceId'),
  jobId?: [ string ](name='JobId'),
  jobReferenceId?: [ string ](name='JobReferenceId'),
  scenarioId?: string(name='ScenarioId'),
}

model ResumeJobsResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ResumeJobsResponse = {
  headers: map[string]string(name='headers'),
  body: ResumeJobsResponseBody(name='body'),
}

async function resumeJobsWithOptions(request: ResumeJobsRequest, runtime: Util.RuntimeOptions): ResumeJobsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ResumeJobs', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function resumeJobs(request: ResumeJobsRequest): ResumeJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return resumeJobsWithOptions(request, runtime);
}

model ResumePredictiveJobsRequest {
  all?: boolean(name='All'),
  instanceId?: string(name='InstanceId'),
  jobGroupId?: string(name='JobGroupId'),
  jobId?: [ string ](name='JobId'),
  skillGroupId?: string(name='SkillGroupId'),
}

model ResumePredictiveJobsResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ResumePredictiveJobsResponse = {
  headers: map[string]string(name='headers'),
  body: ResumePredictiveJobsResponseBody(name='body'),
}

async function resumePredictiveJobsWithOptions(request: ResumePredictiveJobsRequest, runtime: Util.RuntimeOptions): ResumePredictiveJobsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ResumePredictiveJobs', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function resumePredictiveJobs(request: ResumePredictiveJobsRequest): ResumePredictiveJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return resumePredictiveJobsWithOptions(request, runtime);
}

model SaveStatsRequest {
  callId?: string(name='CallId'),
  callStartTime?: long(name='CallStartTime'),
  calleeNumber?: string(name='CalleeNumber'),
  callerNumber?: string(name='CallerNumber'),
  instanceId?: string(name='InstanceId'),
  recordTime?: long(name='RecordTime'),
  stats?: string(name='Stats'),
  tenantId?: string(name='TenantId'),
  uid?: string(name='Uid'),
}

model SaveStatsResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  rowCount?: long(name='RowCount'),
  success?: boolean(name='Success'),
}

model SaveStatsResponse = {
  headers: map[string]string(name='headers'),
  body: SaveStatsResponseBody(name='body'),
}

async function saveStatsWithOptions(request: SaveStatsRequest, runtime: Util.RuntimeOptions): SaveStatsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SaveStats', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function saveStats(request: SaveStatsRequest): SaveStatsResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveStatsWithOptions(request, runtime);
}

model SaveTerminalLogRequest {
  appName?: string(name='AppName'),
  callId?: string(name='CallId'),
  content?: string(name='Content'),
  dataType?: int32(name='DataType'),
  instanceId?: string(name='InstanceId'),
  jobId?: string(name='JobId'),
  methodName?: string(name='MethodName'),
  status?: string(name='Status'),
  uniqueRequestId?: string(name='UniqueRequestId'),
}

model SaveTerminalLogResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  timeStamp?: long(name='TimeStamp'),
}

model SaveTerminalLogResponse = {
  headers: map[string]string(name='headers'),
  body: SaveTerminalLogResponseBody(name='body'),
}

async function saveTerminalLogWithOptions(request: SaveTerminalLogRequest, runtime: Util.RuntimeOptions): SaveTerminalLogResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SaveTerminalLog', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function saveTerminalLog(request: SaveTerminalLogRequest): SaveTerminalLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveTerminalLogWithOptions(request, runtime);
}

model SaveWebRTCStatsRequest {
  callId?: string(name='CallId'),
  callStartTime?: long(name='CallStartTime'),
  calleeNumber?: string(name='CalleeNumber'),
  callerNumber?: string(name='CallerNumber'),
  instanceId?: string(name='InstanceId'),
  recordTime?: long(name='RecordTime'),
  stats?: string(name='Stats'),
  tenantId?: string(name='TenantId'),
  uid?: string(name='Uid'),
}

model SaveWebRTCStatsResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  rowCount?: long(name='RowCount'),
  success?: boolean(name='Success'),
}

model SaveWebRTCStatsResponse = {
  headers: map[string]string(name='headers'),
  body: SaveWebRTCStatsResponseBody(name='body'),
}

async function saveWebRTCStatsWithOptions(request: SaveWebRTCStatsRequest, runtime: Util.RuntimeOptions): SaveWebRTCStatsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SaveWebRTCStats', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function saveWebRTCStats(request: SaveWebRTCStatsRequest): SaveWebRTCStatsResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveWebRTCStatsWithOptions(request, runtime);
}

model SendPredefinedShortMessageRequest {
  configId?: long(name='ConfigId'),
  instanceId?: string(name='InstanceId'),
  phoneNumbers?: string(name='PhoneNumbers'),
  templateParam?: string(name='TemplateParam'),
}

model SendPredefinedShortMessageResponseBody = {
  bizId?: string(name='BizId'),
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SendPredefinedShortMessageResponse = {
  headers: map[string]string(name='headers'),
  body: SendPredefinedShortMessageResponseBody(name='body'),
}

async function sendPredefinedShortMessageWithOptions(request: SendPredefinedShortMessageRequest, runtime: Util.RuntimeOptions): SendPredefinedShortMessageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SendPredefinedShortMessage', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function sendPredefinedShortMessage(request: SendPredefinedShortMessageRequest): SendPredefinedShortMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendPredefinedShortMessageWithOptions(request, runtime);
}

model StartBack2BackCallRequest {
  callCenterNumber?: string(name='CallCenterNumber'),
  callee?: string(name='Callee'),
  caller?: string(name='Caller'),
  instanceId?: string(name='InstanceId'),
  workflowId?: string(name='WorkflowId'),
}

model StartBack2BackCallResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  statusCode?: string(name='StatusCode'),
  statusDesc?: string(name='StatusDesc'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
  timeStamp?: string(name='TimeStamp'),
}

model StartBack2BackCallResponse = {
  headers: map[string]string(name='headers'),
  body: StartBack2BackCallResponseBody(name='body'),
}

async function startBack2BackCallWithOptions(request: StartBack2BackCallRequest, runtime: Util.RuntimeOptions): StartBack2BackCallResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartBack2BackCall', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startBack2BackCall(request: StartBack2BackCallRequest): StartBack2BackCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return startBack2BackCallWithOptions(request, runtime);
}

model StartJobRequest {
  callingNumber?: [ string ](name='CallingNumber'),
  groupId?: string(name='GroupId'),
  instanceId?: string(name='InstanceId'),
  jobJson?: string(name='JobJson'),
  scenarioId?: string(name='ScenarioId'),
  selfHostedCallCenter?: boolean(name='SelfHostedCallCenter'),
}

model StartJobResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskIds?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='TaskIds'),
}

model StartJobResponse = {
  headers: map[string]string(name='headers'),
  body: StartJobResponseBody(name='body'),
}

async function startJobWithOptions(request: StartJobRequest, runtime: Util.RuntimeOptions): StartJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartJob', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startJob(request: StartJobRequest): StartJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return startJobWithOptions(request, runtime);
}

model SubmitBatchJobsRequest {
  instanceId?: string(name='InstanceId'),
  jobGroupId?: string(name='JobGroupId'),
}

model SubmitBatchJobsResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SubmitBatchJobsResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitBatchJobsResponseBody(name='body'),
}

async function submitBatchJobsWithOptions(request: SubmitBatchJobsRequest, runtime: Util.RuntimeOptions): SubmitBatchJobsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitBatchJobs', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitBatchJobs(request: SubmitBatchJobsRequest): SubmitBatchJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitBatchJobsWithOptions(request, runtime);
}

model SubmitCabRecordingRequest {
  earlyMediaRecording?: string(name='EarlyMediaRecording'),
  instanceId?: string(name='InstanceId'),
  instanceOwnerId?: long(name='InstanceOwnerId'),
  mergedRecording?: string(name='MergedRecording'),
  resourceRecording?: string(name='ResourceRecording'),
  taskId?: string(name='TaskId'),
}

model SubmitCabRecordingResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SubmitCabRecordingResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitCabRecordingResponseBody(name='body'),
}

async function submitCabRecordingWithOptions(request: SubmitCabRecordingRequest, runtime: Util.RuntimeOptions): SubmitCabRecordingResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitCabRecording', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitCabRecording(request: SubmitCabRecordingRequest): SubmitCabRecordingResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitCabRecordingWithOptions(request, runtime);
}

model SuspendJobsRequest {
  all?: boolean(name='All'),
  groupId?: string(name='GroupId'),
  instanceId?: string(name='InstanceId'),
  jobId?: [ string ](name='JobId'),
  jobReferenceId?: [ string ](name='JobReferenceId'),
  scenarioId?: string(name='ScenarioId'),
}

model SuspendJobsResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SuspendJobsResponse = {
  headers: map[string]string(name='headers'),
  body: SuspendJobsResponseBody(name='body'),
}

async function suspendJobsWithOptions(request: SuspendJobsRequest, runtime: Util.RuntimeOptions): SuspendJobsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SuspendJobs', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function suspendJobs(request: SuspendJobsRequest): SuspendJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return suspendJobsWithOptions(request, runtime);
}

model SuspendPredictiveJobsRequest {
  all?: boolean(name='All'),
  instanceId?: string(name='InstanceId'),
  jobGroupId?: string(name='JobGroupId'),
  jobId?: [ string ](name='JobId'),
  skillGroupId?: string(name='SkillGroupId'),
}

model SuspendPredictiveJobsResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SuspendPredictiveJobsResponse = {
  headers: map[string]string(name='headers'),
  body: SuspendPredictiveJobsResponseBody(name='body'),
}

async function suspendPredictiveJobsWithOptions(request: SuspendPredictiveJobsRequest, runtime: Util.RuntimeOptions): SuspendPredictiveJobsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SuspendPredictiveJobs', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function suspendPredictiveJobs(request: SuspendPredictiveJobsRequest): SuspendPredictiveJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return suspendPredictiveJobsWithOptions(request, runtime);
}

model TaskPreparingRequest {
  instanceId?: string(name='InstanceId'),
  instanceOwnerId?: long(name='InstanceOwnerId'),
  jobId?: string(name='JobId'),
}

model TaskPreparingResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model TaskPreparingResponse = {
  headers: map[string]string(name='headers'),
  body: TaskPreparingResponseBody(name='body'),
}

async function taskPreparingWithOptions(request: TaskPreparingRequest, runtime: Util.RuntimeOptions): TaskPreparingResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TaskPreparing', '2017-07-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function taskPreparing(request: TaskPreparingRequest): TaskPreparingResponse {
  var runtime = new Util.RuntimeOptions{};
  return taskPreparingWithOptions(request, runtime);
}

