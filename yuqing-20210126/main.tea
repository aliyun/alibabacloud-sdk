/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('yuqing', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AlarmData {
  alarmLevel?: string(name='alarmLevel', description='预警规则等级'),
  alarmMsgId?: long(name='alarmMsgId', description='舆情消息id'),
  alarmRuleId?: long(name='alarmRuleId', description='预警规则id'),
  alarmRuleName?: string(name='alarmRuleName', description='预警规则名称'),
  alarmTimestamp?: long(name='alarmTimestamp', description='预警时间'),
  authorName?: string(name='authorName', description='舆情作者名字'),
  content?: string(name='content', description='舆情内容（不完整）'),
  docIdStr?: string(name='docIdStr', description='舆情文章唯一id'),
  docMediaType?: string(name='docMediaType', description='舆情消息类型'),
  gmtModifiedTimestamp?: long(name='gmtModifiedTimestamp', description='最后更新时间'),
  mediaName?: string(name='mediaName', description='媒体名字'),
  memos?: [ string ](name='memos', description='备注列表'),
  message?: YuqingMessage(name='message', description='舆情消息体'),
  modifierName?: string(name='modifierName', description='最后修改舆情的用户名称'),
  modifierOutNo?: string(name='modifierOutNo', description='员工工号'),
  projectId?: long(name='projectId', description='项目id'),
  projectName?: string(name='projectName', description='舆情命中的预警项目名称'),
  selfContentSignStr?: string(name='selfContentSignStr', description='文章签名'),
  sourceUrl?: string(name='sourceUrl', description='url地址'),
  state?: string(name='state', description='预警消息状态'),
  tags?: [ string ](name='tags', description='预警的标签列表'),
  title?: string(name='title', description='舆情标题'),
  type?: string(name='type', description='预警规则类型，枚举值'),
}

model AlarmQueryCondition {
  alarmRuleId?: [ long ](name='alarmRuleId', description='规则id列表'),
  docIds?: [ long ](name='docIds', description='舆情消息id列表'),
  docMediaType?: [ string ](name='docMediaType', description='查询数据的消息类型'),
  endTime?: long(name='endTime', description='查询结束时间,毫秒'),
  ids?: [ long ](name='ids', description='预警id列表'),
  isQueryUpdateTime?: boolean(name='isQueryUpdateTime', description='是否使用更新时间作为筛选'),
  levels?: [ string ](name='levels', description='预警等级过滤列表'),
  pageNow?: long(name='pageNow', description='当前页'),
  pageSize?: long(name='pageSize', description='分页大小'),
  projecIds?: [ long ](name='projecIds', description='舆情项目id'),
  startTime?: long(name='startTime', description='查询开始时间,毫秒'),
  status?: [ string ](name='status', description='预警状态列表'),
  tagIds?: [ long ](name='tagIds', description='标签id列表'),
  type?: string(name='type', description='预警规则类型'),
}

model BizTagTree {
  gmtCreateTimestamp?: long(name='gmtCreateTimestamp', description='创建时间，毫秒'),
  gmtModifiedTimestamp?: long(name='gmtModifiedTimestamp', description='修改时间，毫秒'),
  id?: long(name='id', description='标签id'),
  name?: string(name='name', description='标签名字'),
  parentId?: long(name='parentId', description='父亲id'),
  status?: long(name='status', description='标签状态，1表示激活，0表示不激活'),
  tagIdPath?: string(name='tagIdPath', description='标签节点树'),
  tagNamePath?: string(name='tagNamePath', description='标签节点名字树'),
  uidCreate?: string(name='uidCreate', description='创建人id'),
  uidModified?: string(name='uidModified', description='修改人id'),
  unameCreate?: string(name='unameCreate', description='创建人名字'),
  unameModified?: string(name='unameModified', description='修改人名字'),
}

model Filter {
  criteria?: string(name='criteria', description='筛选模板配置内容'),
  filterGroupId?: long(name='filterGroupId', description='筛选模板所属id'),
  gmtCreateTimestamp?: long(name='gmtCreateTimestamp', description='创建日期，毫秒'),
  gmtModifiedTimestamp?: long(name='gmtModifiedTimestamp', description='修改时间，毫秒'),
  id?: long(name='id', description='筛选模板id'),
  name?: string(name='name', description='筛选模板名称'),
  valid?: long(name='valid', description='状态。1：有效，0：无效'),
}

model FinanceEvent {
  entityArea?: string(name='entityArea', description='实体地理位置'),
  entityCrn?: string(name='entityCrn', description='实体唯一id，统一社会信用代码'),
  entityId?: string(name='entityId', description='实体ID'),
  entityName?: string(name='entityName', description='实体名称'),
  entityRelevanceScore?: string(name='entityRelevanceScore', description='实体相关度得分'),
  entitySummary?: string(name='entitySummary', description='实体的事件摘要描述'),
  entityType?: string(name='entityType', description='实体类型，枚举值'),
  eventCode?: long(name='eventCode', description='事件码'),
  eventId?: string(name='eventId', description='事件id'),
  eventName?: string(name='eventName', description='事件名称'),
}

model HotspotSearchCondition {
  active?: boolean(name='active', description='是否在榜'),
  crawlerTimeEndFilter?: long(name='crawlerTimeEndFilter', description='爬取时间的最大值（不含）'),
  crawlerTimeStartFilter?: long(name='crawlerTimeStartFilter', description='爬取时间的最小值（含）'),
  enableKeywordHighlight?: boolean(name='enableKeywordHighlight', description='是否要进行关键词高亮显示'),
  mediaSubType?: string(name='mediaSubType', description='媒体子类型：头条热搜，微博热搜'),
  mediaType?: string(name='mediaType', description='媒体类型：热搜、热榜还是话题'),
  pageNow?: int32(name='pageNow', description='当前页'),
  pageSize?: int32(name='pageSize', description='页大小'),
  posKeywords?: string(name='posKeywords', description='关键词'),
  queryWithoutKeyword?: boolean(name='queryWithoutKeyword', description='默认false，表示需要指定关键词来查询'),
  sortBy?: string(name='sortBy', description='排序字段'),
  sortByDirection?: string(name='sortByDirection', description='排序方式： 正序(+)、倒序(-)'),
  titleIncludingWordsIdx?: string(name='titleIncludingWordsIdx', description='标题包含词'),
}

model Project {
  assKeywords?: string(name='assKeywords', description='搭配词'),
  defaultFilterId?: long(name='defaultFilterId', description='项目的默认过滤模板ID'),
  extCriteria?: string(name='extCriteria', description='高级用法，非关键词配置，如at用户，标题排除词。'),
  gmtCreateTimestamp?: long(name='gmtCreateTimestamp', description='项目创建时间，毫秒'),
  gmtModifiedTimestamp?: long(name='gmtModifiedTimestamp', description='项目修改时间，毫秒'),
  id?: long(name='id', description='舆情项目ID'),
  name?: string(name='name', description='项目名称'),
  negKeywords?: string(name='negKeywords', description='排除词'),
  pid?: long(name='pid', description='项目父ID，如果没有父项目则为0'),
  posKeywords?: string(name='posKeywords', description='项目关键词'),
  projectGroupId?: long(name='projectGroupId', description='项目归属分组ID，0代表没有分组'),
  projectType?: long(name='projectType', description='0:通用舆情项目，1：金融舆情项目'),
  projectTypeName?: string(name='projectTypeName', description='舆情项目类型名称'),
  subProjectIds?: [ long ](name='subProjectIds', description='项目的子项目ID列表'),
  teamId?: long(name='teamId', description='团队id'),
  uidCreate?: string(name='uidCreate', description='项目创建人uid'),
  uidModified?: string(name='uidModified', description='项目修改人uid'),
  unameCreate?: string(name='unameCreate', description='项目创建人名称'),
  unameModified?: string(name='unameModified', description='项目修改人名称'),
  valid?: long(name='valid', description='状态，1为生效，0为失效。'),
}

model ProjectGroup {
  gmtCreateTimestamp?: long(name='gmtCreateTimestamp', description='项目分组创建时间'),
  gmtModifiedTimestamp?: long(name='gmtModifiedTimestamp', description='项目分组修改时间'),
  id?: long(name='id', description='项目分组id，唯一标识项目分组'),
  name?: string(name='name', description='项目分组名称'),
  parentId?: long(name='parentId', description='父项目分组id，0为默认值，表示无父项目分组'),
  projectGroupType?: long(name='projectGroupType', description='项目分组类型，0表示通用舆情，2表示金融舆情'),
  uidCreate?: string(name='uidCreate', description='项目创建人uid'),
  unameCreate?: string(name='unameCreate', description='项目分组创建人名称'),
  valid?: long(name='valid', description='是否有效，1表示有效，0表示无效'),
}

model ReportNotifyRecord {
  conf?: string(name='conf', description='配置： 如图片宽度/接收人/抄送人等'),
  cpId?: long(name='cpId', description='自定义页面id'),
  gmtCreateFormat?: string(name='gmtCreateFormat', description='格式化的创建时间'),
  gmtCreateTimestamp?: long(name='gmtCreateTimestamp', description='创建时间，毫秒'),
  gmtModifiedTimestamp?: long(name='gmtModifiedTimestamp', description='修改时间，毫秒'),
  id?: long(name='id', description='记录id'),
  shareKey?: string(name='shareKey', description='cpId对应的共享key，用于共享报告'),
  subject?: string(name='subject', description='主题'),
  success?: long(name='success', description='是否成功的标志，1表示成功，否则表示不成功'),
  type?: long(name='type', description='类型： 如邮件、钉钉等'),
  uidCreate?: string(name='uidCreate', description='创建人id'),
  unameCreate?: string(name='unameCreate', description='创建人名字'),
  valid?: long(name='valid', description='状态，1为生效，0为失效。'),
}

model SearchCondition {
  advertisementFilter?: boolean(name='advertisementFilter', description='广告取值true or false'),
  alipayAccountFilter?: string(name='alipayAccountFilter', description='支付宝内部的2088账号'),
  assKeywordsIdx?: string(name='assKeywordsIdx', description='搭配词，json字符串数组'),
  authorFollowersCountMaxFilter?: long(name='authorFollowersCountMaxFilter', description='粉丝数上限'),
  authorFollowersCountMinFilter?: long(name='authorFollowersCountMinFilter', description='粉丝数下限'),
  authorNameIdx?: string(name='authorNameIdx', description='指定用户名，多个用户用英文逗号隔开'),
  authorVerifyTypeFilter?: string(name='authorVerifyTypeFilter', description='作者认证类型，多个用,隔开'),
  bizTagsIdx?: string(name='bizTagsIdx', description='业务自定义标签字段过滤'),
  bkzFilter?: boolean(name='bkzFilter', description='暴恐政取值true or false'),
  commentsCountMaxFilter?: long(name='commentsCountMaxFilter', description='评论数上限'),
  commentsCountMinFilter?: long(name='commentsCountMinFilter', description='评论数下限'),
  contentLengthMaxFilter?: long(name='contentLengthMaxFilter', description='内容长度上限'),
  contentLengthMinFilter?: long(name='contentLengthMinFilter', description='内容长度下限'),
  docAnswersCountMaxFilter?: long(name='docAnswersCountMaxFilter', description='答案数上限'),
  docAnswersCountMinFilter?: long(name='docAnswersCountMinFilter', description='答案数下限'),
  docAreaIdx?: string(name='docAreaIdx', description='提级地域'),
  docContentSignIdx?: string(name='docContentSignIdx', description='相似文章索引Id,，多个用英文逗号隔开'),
  docCreateTimeEndFilter?: long(name='docCreateTimeEndFilter', description='创建时间戳上限'),
  docCreateTimeStartFilter?: long(name='docCreateTimeStartFilter', description='创建时间戳下限'),
  docPublishTimeEndFilter?: long(name='docPublishTimeEndFilter', description='发布时间戳上限'),
  docPublishTimeStartFilter?: long(name='docPublishTimeStartFilter', description='发布时间戳下限'),
  docUpdateTimeEndFilter?: long(name='docUpdateTimeEndFilter', description='文章更新时间上限'),
  docUpdateTimeStartFilter?: long(name='docUpdateTimeStartFilter', description='更新时间戳下限'),
  duplicateRemoval?: boolean(name='duplicateRemoval', description='返回的数据是否去重，默认true'),
  emotionScoreMaxFilter?: double(name='emotionScoreMaxFilter', description='情感分值上限，范围-10~10'),
  emotionScoreMinFilter?: double(name='emotionScoreMinFilter', description='情感分值下限，范围-10~10'),
  enableKeywordHighlight?: boolean(name='enableKeywordHighlight', description='是否要进行关键词高亮显示'),
  entityName?: string(name='entityName', description='公司全名称'),
  eroticismFilter?: boolean(name='eroticismFilter', description='色情取值true or false'),
  excludeAuthorNameIdx?: string(name='excludeAuthorNameIdx', description='排除指定用户名，多个用户用英文逗号隔开'),
  excludingMediaHostsFilter?: string(name='excludingMediaHostsFilter', description='排除指定Host'),
  excludingMediaPoolIdsFilter?: string(name='excludingMediaPoolIdsFilter', description='排除指定媒体库ids，媒体库在舆情平台上定义'),
  filterId?: long(name='filterId', description='舆情筛选模板Id'),
  financeEntityAreaFilter?: string(name='financeEntityAreaFilter', description='实体所在地，主要指的是公司'),
  financeEntityRelevanceScoreMaxFilter?: double(name='financeEntityRelevanceScoreMaxFilter', description='实体关联度得分上限'),
  financeEntityRelevanceScoreMinFilter?: double(name='financeEntityRelevanceScoreMinFilter', description='实体关联度得分下限'),
  financeEventCodeFilter?: string(name='financeEventCodeFilter', description='金融事件id，支持多个'),
  gamblingFilter?: boolean(name='gamblingFilter', description='赌博取值true or false'),
  hotspotTitleIdx?: string(name='hotspotTitleIdx', description='热搜标题倒排'),
  illegalAdvertisementFilter?: boolean(name='illegalAdvertisementFilter', description='违规广告取值true or false'),
  likesCountMaxFilter?: long(name='likesCountMaxFilter', description='点赞数上限'),
  likesCountMinFilter?: long(name='likesCountMinFilter', description='点赞数下限'),
  mediaHostsFilter?: string(name='mediaHostsFilter', description='指定Host'),
  mediaInfluenceScoreMaxFilter?: double(name='mediaInfluenceScoreMaxFilter', description='媒体影响分上限'),
  mediaInfluenceScoreMinFilter?: double(name='mediaInfluenceScoreMinFilter', description='媒体影响分下限'),
  mediaNameFilter?: string(name='mediaNameFilter', description='媒体名称'),
  mediaPoolIdsFilter?: string(name='mediaPoolIdsFilter', description='指定媒体库ids，媒体库在舆情平台上定义'),
  mediaPropagationScoreMaxFilter?: double(name='mediaPropagationScoreMaxFilter', description='媒体传播分上限取值范围：0-10分'),
  mediaPropagationScoreMinFilter?: double(name='mediaPropagationScoreMinFilter', description='媒体传播分下限取值范围：0-10分'),
  mediaTypeFilter?: string(name='mediaTypeFilter', description='枚举字符串如：WEIBO-WEIBO'),
  messageTypeFilter?: string(name='messageTypeFilter', description='枚举字符串如：COMMENT'),
  negKeywordsIdx?: string(name='negKeywordsIdx', description='排除关键词'),
  pageNow?: int32(name='pageNow', description='指定页码'),
  pageSize?: int32(name='pageSize', description='指定每页大小，最大50'),
  parentIdsIdx?: string(name='parentIdsIdx', description='父文章docId'),
  posKeywordsIdx?: string(name='posKeywordsIdx', description='格式同AssKeywordsIdx，如果指定了AssKeywordsIdx，两者要同时满足。'),
  primaryKeyIdx?: string(name='primaryKeyIdx', description='舆情文章id，支持多值'),
  projectId?: long(name='projectId', description='舆情项目Id'),
  readsCountMaxFilter?: long(name='readsCountMaxFilter', description='阅读数上限'),
  readsCountMinFilter?: long(name='readsCountMinFilter', description='阅读数下限'),
  relevanceScoreMaxFilter?: double(name='relevanceScoreMaxFilter', description='相关性分上限'),
  relevanceScoreMinFilter?: double(name='relevanceScoreMinFilter', description='相关性分下限'),
  repostsCountMaxFilter?: long(name='repostsCountMaxFilter', description='转发数上限'),
  repostsCountMinFilter?: long(name='repostsCountMinFilter', description='转发数下限'),
  reprintFromFilter?: string(name='reprintFromFilter', description='文章转载来源名称'),
  sortBy?: string(name='sortBy', description='排序字段枚举'),
  sortByDirection?: string(name='sortByDirection', description='如\'+\'是升序，\'-\'是降序'),
  spamFilter?: boolean(name='spamFilter', description='垃圾取值true or false'),
  suspicionSpamFilter?: boolean(name='suspicionSpamFilter', description='疑似垃圾取值true or false'),
  titleExcludingWordsIdx?: string(name='titleExcludingWordsIdx', description='标题不包含的关键词'),
  titleIncludingWordsIdx?: string(name='titleIncludingWordsIdx', description='标题包含的关键词'),
  usedIndexModeSwitch?: string(name='usedIndexModeSwitch', description='指定索引模式,KEYWORD|CREATE_TIME'),
}

model StatisticPoint {
  key?: string(name='key', description='聚合字段结果值'),
  value?: double(name='value', description='聚合结果值'),
}

model YuqingHotspotMessage {
  category?: string(name='category', description='分类'),
  commentsCount?: long(name='commentsCount', description='评论数'),
  crawlerTimeFmt?: string(name='crawlerTimeFmt', description='爬虫爬取的时间'),
  discussesCount?: long(name='discussesCount', description='讨论数'),
  docContent?: string(name='docContent', description='内容，热榜数据中存在着文章，热文就是有内容的'),
  docId?: string(name='docId', description='文档id'),
  docTitle?: string(name='docTitle', description='标题，例如话题的标题就是话题本身'),
  docUrl?: string(name='docUrl', description='链接地址'),
  firstExistTimestamp?: long(name='firstExistTimestamp', description='第一次上榜的时间'),
  firstHotValue?: long(name='firstHotValue', description='首次上榜热度'),
  firstRank?: int32(name='firstRank', description='首次上榜排名'),
  followersCount?: long(name='followersCount', description='跟随量'),
  hotValue?: long(name='hotValue', description='热度值'),
  hotspotType?: string(name='hotspotType', description='热搜内容类型'),
  lastExistTimestamp?: long(name='lastExistTimestamp', description='最后一次上榜的时间'),
  lastRank?: int32(name='lastRank', description='下榜排名'),
  maxHotValue?: long(name='maxHotValue', description='最大的热度值'),
  maxRank?: int32(name='maxRank', description='在榜单中的最高排名'),
  mediaSubType?: string(name='mediaSubType', description='渠道子类型'),
  mediaType?: string(name='mediaType', description='渠道类型'),
  originalCount?: long(name='originalCount', description='原创人数'),
  rank?: int32(name='rank', description='热搜在热搜榜的位置'),
  readsCount?: long(name='readsCount', description='阅读数'),
  screenName?: string(name='screenName', description='用户名'),
  totalExistTimestamp?: long(name='totalExistTimestamp', description='在榜总时间'),
  userId?: string(name='userId', description='用户id'),
  videoCount?: long(name='videoCount', description='视频量'),
}

model YuqingMessage {
  advertisement?: boolean(name='advertisement', description='广告'),
  alipayAccount?: long(name='alipayAccount', description='2088账号'),
  appStoreAppName?: string(name='appStoreAppName', description='应用名称'),
  appStoreAppScore?: long(name='appStoreAppScore', description='appstore应用评分'),
  appStoreName?: string(name='appStoreName', description='应用市场名称'),
  atAuthorNames?: [ string ](name='atAuthorNames', description='被at的用户名列表'),
  authorAvatarUrl?: string(name='authorAvatarUrl', description='用户头像地址'),
  authorFollowersCount?: long(name='authorFollowersCount', description='作者粉丝数'),
  authorFriendsCount?: long(name='authorFriendsCount', description='作者好友数'),
  authorId?: string(name='authorId', description='外部平台作者id'),
  authorName?: string(name='authorName', description='作者名称'),
  authorProfileUrl?: string(name='authorProfileUrl', description='个人主页地址'),
  authorStatusesCount?: long(name='authorStatusesCount', description='发布微博数'),
  authorVerifyType?: string(name='authorVerifyType', description='作者认证类型'),
  bkz?: boolean(name='bkz', description='敏感暴恐政'),
  contentAudioText?: string(name='contentAudioText', description='音频识别出来的文字'),
  contentAudioUrls?: string(name='contentAudioUrls', description='音频地址'),
  contentEmotionType?: int32(name='contentEmotionType', description='情感的正负面，-1代表负面，1代表非负面'),
  contentImageText?: string(name='contentImageText', description='从图片识别出来文字'),
  contentImageUrls?: string(name='contentImageUrls', description='内容中的图片列表'),
  contentVideoText?: string(name='contentVideoText', description='视频识别出来的文字'),
  contentVideoUrls?: string(name='contentVideoUrls', description='视频地址'),
  docAnswersCount?: long(name='docAnswersCount', description='回答数'),
  docAreas?: [ string ](name='docAreas', description='新闻用内容提取的地名,微博用用户的地名,映射归一化'),
  docCommentsCount?: long(name='docCommentsCount', description='文章评论数'),
  docContent?: string(name='docContent', description='舆情消息内容'),
  docContentBrief?: string(name='docContentBrief', description='文章内容概要，无Html标签，最长保留200个字'),
  docContentSign?: string(name='docContentSign', description='文章内容签名，如果是转发微博或者其他有父内容的doc，计算的是父文章的得分。一般用于去重，相同的doc_content_sign说明内容相同'),
  docCreateTime?: long(name='docCreateTime', description='舆情文章入库时间戳'),
  docFocusArticleCount?: long(name='docFocusArticleCount', description='文章的关注数'),
  docId?: string(name='docId', description='舆情文章唯一ID'),
  docLikesCount?: long(name='docLikesCount', description='文章点赞数'),
  docMessageType?: string(name='docMessageType', description='舆情消息类型:转发,评论/回复, 原文,群聊等'),
  docParentId?: string(name='docParentId', description='父文章DocID, 比如转发微博的父Id是源微博DocId'),
  docPublishTime?: long(name='docPublishTime', description='舆情文章的发布时间戳'),
  docReadsCount?: long(name='docReadsCount', description='阅读数'),
  docRepostsCount?: long(name='docRepostsCount', description='转载数'),
  docSelfContentSign?: string(name='docSelfContentSign', description='文章自身的内容签名，转发微博计算的是转发内容的contentSign，与父微博无关'),
  docTitle?: string(name='docTitle', description='文章的标题'),
  docTitleBrief?: string(name='docTitleBrief', description='文章标题，无Html标签'),
  docUrl?: string(name='docUrl', description='原文链接'),
  docUserDefineJson?: string(name='docUserDefineJson', description='业务自定义字段透传docUserDefineJson'),
  emotionScore?: string(name='emotionScore', description='情感得分'),
  entityAlias?: string(name='entityAlias', description='实体别名'),
  entityRelevancyScore?: string(name='entityRelevancyScore', description='实体相关度得分，0-1,两位小数'),
  eroticism?: boolean(name='eroticism', description='是否色情内容'),
  eroticismScoreFmt?: string(name='eroticismScoreFmt', description='内容的暴恐政色得分，0-10，值越大说明内容越敏感'),
  financeEvents?: [
    FinanceEvent
  ](name='financeEvents', description='舆情文章提取出来的金融事件列表'),
  gambling?: boolean(name='gambling', description='是否涉及赌博'),
  highlightAssKeywords?: [ string ](name='highlightAssKeywords', description='如果查询条件中有搭配词，那么这个字段存储文章中命中的搭配词列表'),
  highlightKeywords?: [ string ](name='highlightKeywords', description='在指定关键词、搭配词的情况下，返回文章内命中的词列表'),
  highlightPosKeywords?: [ string ](name='highlightPosKeywords', description='如果查询条件中有关键词，那么这个字段保存文章中命中的关键词列表'),
  imageCount?: long(name='imageCount', description='文章内容中的图片个数'),
  mediaHosts?: [ string ](name='mediaHosts', description='站点来源host列表'),
  mediaInfluenceLevel?: int32(name='mediaInfluenceLevel', description='媒体影响力等级，0-4，值越大影响力越大'),
  mediaInfluenceScore?: string(name='mediaInfluenceScore', description='媒体影响力 0-10,两位小数'),
  mediaName?: string(name='mediaName', description='媒体名称'),
  mediaPropagationScore?: string(name='mediaPropagationScore', description='媒体传播得分，0-10,两位小数'),
  mediaQunName?: string(name='mediaQunName', description='IM软件群聊天名称'),
  mediaResCity?: string(name='mediaResCity', description='媒体地域信息: 城市'),
  mediaResCountry?: string(name='mediaResCountry', description='媒体地域信息: 国家'),
  mediaResProvince?: string(name='mediaResProvince', description='媒体地域信息: 省份'),
  mediaType?: string(name='mediaType', description='媒体类型，枚举值'),
  originalMedia?: [ string ](name='originalMedia', description='疑似首发媒体列表'),
  relevanceScoreFmt?: string(name='relevanceScoreFmt', description='关键词/搭配词与文章内容的相关性得分，0-10分，值越大相关性越高'),
  similarNumber?: int32(name='similarNumber', description='相似文章数'),
  spam?: boolean(name='spam', description='是否垃圾内容'),
  ueEmotionScore?: string(name='ueEmotionScore', description='用户情感分值'),
  weiboCommentId?: string(name='weiboCommentId', description='微博评论的外部ID'),
  weiboMid?: string(name='weiboMid', description='微博外部ID'),
}

model AggregateSearchYuqingRequest {
  aggregateFunction?: string(name='aggregateFunction', description='聚合函数'),
  groupByKey?: string(name='groupByKey', description='聚合字段名字,枚举值'),
  groupLimits?: long(name='groupLimits', description='聚合结果条数'),
  requestId?: string(name='requestId', description='请求id'),
  searchCondition?: SearchCondition(name='searchCondition', description='查询舆情条件'),
  teamHashId?: string(name='teamHashId', description='舆情团队HashId'),
}

model AggregateSearchYuqingResponseBody = {
  aggResultList?: [
    StatisticPoint
  ](name='aggResultList', description='聚合结果列表'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model AggregateSearchYuqingResponse = {
  headers: map[string]string(name='headers'),
  body: AggregateSearchYuqingResponseBody(name='body'),
}

async function aggregateSearchYuqing(request: AggregateSearchYuqingRequest): AggregateSearchYuqingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return aggregateSearchYuqingWithOptions(request, headers, runtime);
}

async function aggregateSearchYuqingWithOptions(request: AggregateSearchYuqingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AggregateSearchYuqingResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.requestId)) {
    query.requestId = request.requestId;
  }
  if (!Util.isUnset(request.teamHashId)) {
    query.teamHashId = request.teamHashId;
  }

  var body : map[string]any= {};
  if (!Util.isUnset(request.aggregateFunction)) {
    body.aggregateFunction = request.aggregateFunction;
  }
  if (!Util.isUnset(request.groupByKey)) {
    body.groupByKey = request.groupByKey;
  }
  if (!Util.isUnset(request.groupLimits)) {
    body.groupLimits = request.groupLimits;
  }
  if (!Util.isUnset(request.searchCondition)) {
    body.searchCondition = request.searchCondition;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequestWithForm('AggregateSearchYuqing', '2021-01-26', 'HTTPS', 'POST', 'AK', `/openapi/aliyun/aggSearch.json`, 'json', req, runtime);
}

model CreateProjectRequest {
  createUserId?: string(name='createUserId', description='创建者uid'),
  createUserName?: string(name='createUserName', description='创建者名称'),
  project?: Project(name='project', description='舆情项目对象'),
  requestId?: string(name='requestId', description='请求id'),
  teamHashId?: string(name='teamHashId', description='舆情团队HashId'),
}

model CreateProjectResponseBody = {
  id?: long(name='id', description='舆情项目id'),
  requestId?: string(name='requestId', description='请求id'),
}

model CreateProjectResponse = {
  headers: map[string]string(name='headers'),
  body: CreateProjectResponseBody(name='body'),
}

async function createProject(request: CreateProjectRequest): CreateProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createProjectWithOptions(request, headers, runtime);
}

async function createProjectWithOptions(request: CreateProjectRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateProjectResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.requestId)) {
    query.requestId = request.requestId;
  }
  if (!Util.isUnset(request.teamHashId)) {
    query.teamHashId = request.teamHashId;
  }

  var body : map[string]any= {};
  if (!Util.isUnset(request.createUserId)) {
    body.createUserId = request.createUserId;
  }
  if (!Util.isUnset(request.createUserName)) {
    body.createUserName = request.createUserName;
  }
  if (!Util.isUnset(request.project)) {
    body.project = request.project;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequestWithForm('CreateProject', '2021-01-26', 'HTTPS', 'POST', 'AK', `/openapi/aliyun/createProject.json`, 'json', req, runtime);
}

model DeleteProjectRequest {
  id?: long(name='id', description='舆情项目id'),
  modifiedUserId?: string(name='modifiedUserId', description='修改人uid'),
  modifiedUserName?: string(name='modifiedUserName', description='修改人名称'),
  requestId?: string(name='requestId', description='请求id'),
  teamHashId?: string(name='teamHashId', description='舆情团队HashId'),
}

model DeleteProjectResponseBody = {
  id?: long(name='id', description='被删除的项目id'),
  requestId?: string(name='requestId', description='请求id'),
}

model DeleteProjectResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteProjectResponseBody(name='body'),
}

async function deleteProject(request: DeleteProjectRequest): DeleteProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteProjectWithOptions(request, headers, runtime);
}

async function deleteProjectWithOptions(request: DeleteProjectRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteProjectResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.requestId)) {
    query.requestId = request.requestId;
  }
  if (!Util.isUnset(request.teamHashId)) {
    query.teamHashId = request.teamHashId;
  }

  var body : map[string]any= {};
  if (!Util.isUnset(request.id)) {
    body.id = request.id;
  }
  if (!Util.isUnset(request.modifiedUserId)) {
    body.modifiedUserId = request.modifiedUserId;
  }
  if (!Util.isUnset(request.modifiedUserName)) {
    body.modifiedUserName = request.modifiedUserName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequestWithForm('DeleteProject', '2021-01-26', 'HTTPS', 'POST', 'AK', `/openapi/aliyun/deleteProject.json`, 'json', req, runtime);
}

model GetAnalysisComponentResultRequest {
  analysisId?: long(name='analysisId', description='分析任务Id'),
  requestId?: string(name='requestId', description='请求id'),
  teamHashId?: string(name='teamHashId', description='舆情团队HashId'),
}

model GetAnalysisComponentResultResponseBody = {
  analysisId?: long(name='analysisId', description='任务Id'),
  requestId?: string(name='requestId', description='Id of the request'),
  resultJson?: string(name='resultJson', description='任务结果json。参考opinion.analysis.component.query的result_json'),
}

model GetAnalysisComponentResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetAnalysisComponentResultResponseBody(name='body'),
}

async function getAnalysisComponentResult(request: GetAnalysisComponentResultRequest): GetAnalysisComponentResultResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getAnalysisComponentResultWithOptions(request, headers, runtime);
}

async function getAnalysisComponentResultWithOptions(request: GetAnalysisComponentResultRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAnalysisComponentResultResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.analysisId)) {
    query.analysisId = request.analysisId;
  }
  if (!Util.isUnset(request.requestId)) {
    query.requestId = request.requestId;
  }
  if (!Util.isUnset(request.teamHashId)) {
    query.teamHashId = request.teamHashId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('GetAnalysisComponentResult', '2021-01-26', 'HTTPS', 'GET', 'AK', `/openapi/aliyun/getAnalysisComponentResult.json`, 'json', req, runtime);
}

model GetMessageDetailRequest {
  docId?: string(name='docId', description='舆情文章Id'),
  requestId?: string(name='requestId', description='请求id'),
  teamHashId?: string(name='teamHashId', description='舆情团队HashId'),
}

model GetMessageDetailResponseBody = {
  data?: string(name='data', description='舆情消息体'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model GetMessageDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetMessageDetailResponseBody(name='body'),
}

async function getMessageDetail(request: GetMessageDetailRequest): GetMessageDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getMessageDetailWithOptions(request, headers, runtime);
}

async function getMessageDetailWithOptions(request: GetMessageDetailRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetMessageDetailResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.docId)) {
    query.docId = request.docId;
  }
  if (!Util.isUnset(request.requestId)) {
    query.requestId = request.requestId;
  }
  if (!Util.isUnset(request.teamHashId)) {
    query.teamHashId = request.teamHashId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('GetMessageDetail', '2021-01-26', 'HTTPS', 'GET', 'AK', `/openapi/aliyun/getMessageFromHbase.json`, 'json', req, runtime);
}

model ListHotspotMessageRequest {
  hotspotSearchCondition?: HotspotSearchCondition(name='hotspotSearchCondition', description='热搜查询参数'),
  requestId?: string(name='requestId', description='请求id'),
  teamHashId?: string(name='teamHashId', description='舆情团队HashId'),
}

model ListHotspotMessageResponseBody = {
  hotspotMessages?: [
    YuqingHotspotMessage
  ](name='hotspotMessages', description='热搜结果信息列表数组'),
  requestId?: string(name='requestId', description='Id of the request'),
  totalCount?: long(name='totalCount', description='总条数'),
}

model ListHotspotMessageResponse = {
  headers: map[string]string(name='headers'),
  body: ListHotspotMessageResponseBody(name='body'),
}

async function listHotspotMessage(request: ListHotspotMessageRequest): ListHotspotMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listHotspotMessageWithOptions(request, headers, runtime);
}

async function listHotspotMessageWithOptions(request: ListHotspotMessageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListHotspotMessageResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.requestId)) {
    query.requestId = request.requestId;
  }
  if (!Util.isUnset(request.teamHashId)) {
    query.teamHashId = request.teamHashId;
  }

  var body : map[string]any= {};
  if (!Util.isUnset(request.hotspotSearchCondition)) {
    body.hotspotSearchCondition = request.hotspotSearchCondition;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequestWithForm('ListHotspotMessage', '2021-01-26', 'HTTPS', 'POST', 'AK', `/openapi/aliyun/searchHotspotDetail.json`, 'json', req, runtime);
}

model ListYuqingMessagesRequest {
  requestId?: string(name='requestId', description='请求id'),
  searchCondition?: SearchCondition(name='searchCondition', description='查询过滤参数，多个过滤参数之间是且的关系。例如:过滤实例名称为i-a123、i-b123，且实例状态为Stopped：&Filter.1.Name=InstanceName&Filter.1.Value.1=i-a123&Filter.1.Value.2=i-b123&Filter.2.Name=Status&Filter.2.Value=Stopped。'),
  teamHashId?: string(name='teamHashId', description='舆情团队HashId'),
}

model ListYuqingMessagesResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
  totalCount?: long(name='totalCount', description='总记录数。'),
  yuqingMessages?: [
    YuqingMessage
  ](name='yuqingMessages', description='数组，返回示例目录。'),
}

model ListYuqingMessagesResponse = {
  headers: map[string]string(name='headers'),
  body: ListYuqingMessagesResponseBody(name='body'),
}

async function listYuqingMessages(request: ListYuqingMessagesRequest): ListYuqingMessagesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listYuqingMessagesWithOptions(request, headers, runtime);
}

async function listYuqingMessagesWithOptions(request: ListYuqingMessagesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListYuqingMessagesResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.requestId)) {
    query.requestId = request.requestId;
  }
  if (!Util.isUnset(request.teamHashId)) {
    query.teamHashId = request.teamHashId;
  }

  var body : map[string]any= {};
  if (!Util.isUnset(request.searchCondition)) {
    body.searchCondition = request.searchCondition;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequestWithForm('ListYuqingMessages', '2021-01-26', 'HTTPS', 'POST', 'AK', `/openapi/aliyun/searchMessages.json`, 'json', req, runtime);
}

model QueryAlarmDataListRequest {
  alarmQuery?: AlarmQueryCondition(name='alarmQuery'),
  orderByKey?: string(name='orderByKey', description='排序方式'),
  requestId?: string(name='requestId', description='请求id'),
  teamHashId?: string(name='teamHashId', description='舆情团队HashId'),
}

model QueryAlarmDataListResponseBody = {
  pages?: [
    AlarmData
  ](name='pages', description='预警列表'),
  requestId?: string(name='requestId', description='Id of the request'),
  totalCount?: long(name='totalCount', description='总条数'),
}

model QueryAlarmDataListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAlarmDataListResponseBody(name='body'),
}

async function queryAlarmDataList(request: QueryAlarmDataListRequest): QueryAlarmDataListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return queryAlarmDataListWithOptions(request, headers, runtime);
}

async function queryAlarmDataListWithOptions(request: QueryAlarmDataListRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAlarmDataListResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.alarmQuery)) {
    query.alarmQuery = request.alarmQuery;
  }
  if (!Util.isUnset(request.orderByKey)) {
    query.orderByKey = request.orderByKey;
  }
  if (!Util.isUnset(request.requestId)) {
    query.requestId = request.requestId;
  }
  if (!Util.isUnset(request.teamHashId)) {
    query.teamHashId = request.teamHashId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('QueryAlarmDataList', '2021-01-26', 'HTTPS', 'GET', 'AK', `/openapi/aliyun/queryAlarmDataList.json`, 'json', req, runtime);
}

model QueryAnalysisComponentRequest {
  analyseType?: string(name='analyseType', description='分析任务类型名称，具体可以填写的值可以在舆情平台查看'),
  requestId?: string(name='requestId', description='请求id'),
  searchCondition?: SearchCondition(name='searchCondition', description='搜索舆情条件'),
  teamHashId?: string(name='teamHashId', description='舆情团队HashId'),
}

model QueryAnalysisComponentResponseBody = {
  analysisId?: long(name='analysisId', description='分析任务Id，用于查询这个任务对应的结果。如果是快速完成类型的分析，会直接返回结果。如果无结果返回，业务方可以根据这个id轮询查询结果。'),
  requestId?: string(name='requestId', description='Id of the request'),
  resultJson?: string(name='resultJson', description='分析任务返回的结果json字符串，不同分析任务返回的json格式不一样。'),
}

model QueryAnalysisComponentResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAnalysisComponentResponseBody(name='body'),
}

async function queryAnalysisComponent(request: QueryAnalysisComponentRequest): QueryAnalysisComponentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return queryAnalysisComponentWithOptions(request, headers, runtime);
}

async function queryAnalysisComponentWithOptions(request: QueryAnalysisComponentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAnalysisComponentResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.requestId)) {
    query.requestId = request.requestId;
  }
  if (!Util.isUnset(request.teamHashId)) {
    query.teamHashId = request.teamHashId;
  }

  var body : map[string]any= {};
  if (!Util.isUnset(request.analyseType)) {
    body.analyseType = request.analyseType;
  }
  if (!Util.isUnset(request.searchCondition)) {
    body.searchCondition = request.searchCondition;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequestWithForm('QueryAnalysisComponent', '2021-01-26', 'HTTPS', 'POST', 'AK', `/openapi/aliyun/queryAnalysisComponent.json`, 'json', req, runtime);
}

model QueryFilterListRequest {
  filterId?: long(name='filterId', description='指定筛选模板id查询'),
  pageNow?: long(name='pageNow', description='当前查询的第几页，从1开始'),
  pageSize?: long(name='pageSize', description='查询每页的数据量'),
  requestId?: string(name='requestId', description='请求id'),
  teamHashId?: string(name='teamHashId', description='舆情团队HashId'),
}

model QueryFilterListResponseBody = {
  filters?: [
    Filter
  ](name='filters', description='筛选模板列表。'),
  requestId?: string(name='requestId', description='Id of the request'),
  totalCount?: long(name='totalCount', description='总条数'),
}

model QueryFilterListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryFilterListResponseBody(name='body'),
}

async function queryFilterList(request: QueryFilterListRequest): QueryFilterListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return queryFilterListWithOptions(request, headers, runtime);
}

async function queryFilterListWithOptions(request: QueryFilterListRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryFilterListResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.filterId)) {
    query.filterId = request.filterId;
  }
  if (!Util.isUnset(request.pageNow)) {
    query.pageNow = request.pageNow;
  }
  if (!Util.isUnset(request.pageSize)) {
    query.pageSize = request.pageSize;
  }
  if (!Util.isUnset(request.requestId)) {
    query.requestId = request.requestId;
  }
  if (!Util.isUnset(request.teamHashId)) {
    query.teamHashId = request.teamHashId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('QueryFilterList', '2021-01-26', 'HTTPS', 'GET', 'AK', `/openapi/aliyun/queryFilterList.json`, 'json', req, runtime);
}

model QueryProjectListRequest {
  pageNow?: long(name='pageNow', description='当前页数，从1开始'),
  pageSize?: long(name='pageSize', description='分页大小'),
  projectGroupId?: long(name='projectGroupId', description='所属项目分组id'),
  projectId?: long(name='projectId', description='指定舆情项目id'),
  requestId?: string(name='requestId', description='请求id'),
  teamHashId?: string(name='teamHashId', description='舆情团队HashId'),
}

model QueryProjectListResponseBody = {
  projectList?: [
    Project
  ](name='projectList', description='舆情项目列表,参考Project对象'),
  requestId?: string(name='requestId', description='Id of the request'),
  totalCount?: long(name='totalCount', description='总记录数'),
}

model QueryProjectListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryProjectListResponseBody(name='body'),
}

async function queryProjectList(request: QueryProjectListRequest): QueryProjectListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return queryProjectListWithOptions(request, headers, runtime);
}

async function queryProjectListWithOptions(request: QueryProjectListRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryProjectListResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.pageNow)) {
    query.pageNow = request.pageNow;
  }
  if (!Util.isUnset(request.pageSize)) {
    query.pageSize = request.pageSize;
  }
  if (!Util.isUnset(request.projectGroupId)) {
    query.projectGroupId = request.projectGroupId;
  }
  if (!Util.isUnset(request.projectId)) {
    query.projectId = request.projectId;
  }
  if (!Util.isUnset(request.requestId)) {
    query.requestId = request.requestId;
  }
  if (!Util.isUnset(request.teamHashId)) {
    query.teamHashId = request.teamHashId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('QueryProjectList', '2021-01-26', 'HTTPS', 'GET', 'AK', `/openapi/aliyun/queryProjectList.json`, 'json', req, runtime);
}

model QueryReportNotifiesRequest {
  cpId?: long(name='cpId', description='自定义页面id'),
  createEndTimestamp?: long(name='createEndTimestamp', description='创建截止时间,毫秒'),
  createStartTimestamp?: long(name='createStartTimestamp', description='创建开始时间，毫秒'),
  pageNow?: long(name='pageNow', description='当前页数，从1开始'),
  pageSize?: long(name='pageSize', description='分页大小'),
  requestId?: string(name='requestId', description='请求id'),
  subject?: string(name='subject', description='主题'),
  teamHashId?: string(name='teamHashId', description='舆情团队HashId'),
  type?: long(name='type', description='类型： 如邮件、钉钉等'),
}

model QueryReportNotifiesResponseBody = {
  reportNotifyRecordList?: [
    ReportNotifyRecord
  ](name='reportNotifyRecordList', description='报告历史发送信息'),
  requestId?: string(name='requestId', description='Id of the request'),
  totalCount?: long(name='totalCount', description='总数量'),
}

model QueryReportNotifiesResponse = {
  headers: map[string]string(name='headers'),
  body: QueryReportNotifiesResponseBody(name='body'),
}

async function queryReportNotifies(request: QueryReportNotifiesRequest): QueryReportNotifiesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return queryReportNotifiesWithOptions(request, headers, runtime);
}

async function queryReportNotifiesWithOptions(request: QueryReportNotifiesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryReportNotifiesResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.cpId)) {
    query.cpId = request.cpId;
  }
  if (!Util.isUnset(request.createEndTimestamp)) {
    query.createEndTimestamp = request.createEndTimestamp;
  }
  if (!Util.isUnset(request.createStartTimestamp)) {
    query.createStartTimestamp = request.createStartTimestamp;
  }
  if (!Util.isUnset(request.pageNow)) {
    query.pageNow = request.pageNow;
  }
  if (!Util.isUnset(request.pageSize)) {
    query.pageSize = request.pageSize;
  }
  if (!Util.isUnset(request.requestId)) {
    query.requestId = request.requestId;
  }
  if (!Util.isUnset(request.subject)) {
    query.subject = request.subject;
  }
  if (!Util.isUnset(request.teamHashId)) {
    query.teamHashId = request.teamHashId;
  }
  if (!Util.isUnset(request.type)) {
    query.type = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('QueryReportNotifies', '2021-01-26', 'HTTPS', 'GET', 'AK', `/openapi/aliyun/queryReportNotifies.json`, 'json', req, runtime);
}

model QueryTagNodesRequest {
  requestId?: string(name='requestId', description='请求id'),
  teamHashId?: string(name='teamHashId', description='舆情团队HashId'),
}

model QueryTagNodesResponseBody = {
  bizTagTreeList?: [
    BizTagTree
  ](name='bizTagTreeList', description='标签列表'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model QueryTagNodesResponse = {
  headers: map[string]string(name='headers'),
  body: QueryTagNodesResponseBody(name='body'),
}

async function queryTagNodes(request: QueryTagNodesRequest): QueryTagNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return queryTagNodesWithOptions(request, headers, runtime);
}

async function queryTagNodesWithOptions(request: QueryTagNodesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTagNodesResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.requestId)) {
    query.requestId = request.requestId;
  }
  if (!Util.isUnset(request.teamHashId)) {
    query.teamHashId = request.teamHashId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('QueryTagNodes', '2021-01-26', 'HTTPS', 'GET', 'AK', `/openapi/aliyun/queryTagNodes.json`, 'json', req, runtime);
}

model UpdateProjectRequest {
  isInfo?: boolean(name='isInfo', description='默认更新关键词'),
  project?: Project(name='project', description='舆情项目对象'),
  projectId?: long(name='projectId', description='项目id'),
  requestId?: string(name='requestId', description='请求id'),
  teamHashId?: string(name='teamHashId', description='舆情团队HashId'),
  updateUserId?: string(name='updateUserId', description='修改者uid'),
  updateUserName?: string(name='updateUserName', description='修改者名称'),
}

model UpdateProjectResponseBody = {
  id?: long(name='id', description='被修改的项目id'),
  requestId?: string(name='requestId', description='请求id'),
}

model UpdateProjectResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateProjectResponseBody(name='body'),
}

async function updateProject(request: UpdateProjectRequest): UpdateProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateProjectWithOptions(request, headers, runtime);
}

async function updateProjectWithOptions(request: UpdateProjectRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateProjectResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.requestId)) {
    query.requestId = request.requestId;
  }
  if (!Util.isUnset(request.teamHashId)) {
    query.teamHashId = request.teamHashId;
  }

  var body : map[string]any= {};
  if (!Util.isUnset(request.isInfo)) {
    body.isInfo = request.isInfo;
  }
  if (!Util.isUnset(request.project)) {
    body.project = request.project;
  }
  if (!Util.isUnset(request.projectId)) {
    body.projectId = request.projectId;
  }
  if (!Util.isUnset(request.updateUserId)) {
    body.updateUserId = request.updateUserId;
  }
  if (!Util.isUnset(request.updateUserName)) {
    body.updateUserName = request.updateUserName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequestWithForm('UpdateProject', '2021-01-26', 'HTTPS', 'POST', 'AK', `/openapi/aliyun/updateProject.json`, 'json', req, runtime);
}

model UpdatePropagationRequest {
  requestId?: string(name='requestId', description='请求id'),
  teamHashId?: string(name='teamHashId', description='舆情团队HashId'),
  weiboUrls?: [ string ](name='weiboUrls', description='微博源地址'),
}

model UpdatePropagationResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model UpdatePropagationResponse = {
  headers: map[string]string(name='headers'),
  body: UpdatePropagationResponseBody(name='body'),
}

async function updatePropagation(request: UpdatePropagationRequest): UpdatePropagationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updatePropagationWithOptions(request, headers, runtime);
}

async function updatePropagationWithOptions(request: UpdatePropagationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdatePropagationResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.requestId)) {
    query.requestId = request.requestId;
  }
  if (!Util.isUnset(request.teamHashId)) {
    query.teamHashId = request.teamHashId;
  }

  var body : map[string]any= {};
  if (!Util.isUnset(request.weiboUrls)) {
    body.weiboUrls = request.weiboUrls;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequestWithForm('UpdatePropagation', '2021-01-26', 'HTTPS', 'POST', 'AK', `/openapi/aliyun/updatePropagation.json`, 'json', req, runtime);
}

