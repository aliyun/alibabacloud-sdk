/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'RAI';
  @version = '2024-07-01';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model BatchContentAsyncDetectRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  sceneName?: string(name='SceneName', example='""', position='Query'),
  serviceName?: string(name='ServiceName', example='textDetection', position='Query'),
  serviceParameterList?: [ 
    {
      content?: string(name='content', example='"XXXXXXXX"'),
    }
  ](name='serviceParameterList', position='Body'),
}

model BatchContentAsyncDetectResponseBody = {
  code?: string(name='Code', example='00000'),
  data?: {
    taskId?: string(name='TaskId', example='19657954336'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='""'),
  requestId?: string(name='RequestId', example='9736C44E-F718-566B-821F-710216aAAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****F68692'),
  success?: boolean(name='Success', example='True'),
}

model BatchContentAsyncDetectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchContentAsyncDetectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchContentAsyncDetect  BatchContentAsyncDetectRequest
  * @return BatchContentAsyncDetectResponse
 */
async function batchContentAsyncDetect(request: BatchContentAsyncDetectRequest): BatchContentAsyncDetectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchContentAsyncDetect', 'POST', '/', 'json', false, 'json', request);
}

model BatchContentSyncDetectRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  sceneName?: string(name='SceneName', example='""', position='Query'),
  serviceName?: string(name='ServiceName', example='textDetection
imageDetection', position='Query'),
  serviceParameterList?: [ 
    {
      content?: string(name='content'),
    }
  ](name='serviceParameterList', position='Body'),
}

model BatchContentSyncDetectResponseBody = {
  code?: string(name='Code', example='00000'),
  data?: {
    detectResultList?: [ 
      {
        riskInfo?: string(name='RiskInfo'),
        riskResult?: int32(name='RiskResult', example='1'),
      }
    ](name='DetectResultList'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='""'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
}

model BatchContentSyncDetectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchContentSyncDetectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchContentSyncDetect  BatchContentSyncDetectRequest
  * @return BatchContentSyncDetectResponse
 */
async function batchContentSyncDetect(request: BatchContentSyncDetectRequest): BatchContentSyncDetectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchContentSyncDetect', 'POST', '/', 'json', false, 'json', request);
}

model CheckAccountRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
}

model CheckAccountResponseBody = {
  code?: string(name='Code', example='00000'),
  data?: {
    checkResult?: int32(name='CheckResult', example='1'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='""'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
}

model CheckAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckAccountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckAccount  CheckAccountRequest
  * @return CheckAccountResponse
 */
async function checkAccount(request: CheckAccountRequest): CheckAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckAccount', 'POST', '/', 'json', false, 'json', request);
}

model ContentAsyncDetectRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  sceneName?: string(name='SceneName', example='""', position='Query'),
  serviceName?: string(name='ServiceName', example='textDetection', position='Query'),
  serviceParameter?: {
    content?: string(name='content'),
  }(name='serviceParameter', position='Body'),
}

model ContentAsyncDetectResponseBody = {
  code?: string(name='Code', example='00000'),
  data?: {
    taskId?: string(name='TaskId', example='5d85cd38-03b2-49fd-86b2-be85c4b13215'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='""'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
}

model ContentAsyncDetectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ContentAsyncDetectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ContentAsyncDetect  ContentAsyncDetectRequest
  * @return ContentAsyncDetectResponse
 */
async function contentAsyncDetect(request: ContentAsyncDetectRequest): ContentAsyncDetectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ContentAsyncDetect', 'POST', '/', 'json', false, 'json', request);
}

model ContentSyncDetectRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  sceneName?: string(name='SceneName', example='""', position='Query'),
  serviceName?: string(name='ServiceName', example='textDetection', position='Query'),
  serviceParameter?: {
    content?: string(name='content'),
  }(name='serviceParameter', position='Body'),
}

model ContentSyncDetectResponseBody = {
  code?: string(name='Code', example='00000'),
  data?: {
    riskInfo?: string(name='RiskInfo'),
    riskResult?: int32(name='RiskResult', example='1'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='""'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
}

model ContentSyncDetectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ContentSyncDetectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ContentSyncDetect  ContentSyncDetectRequest
  * @return ContentSyncDetectResponse
 */
async function contentSyncDetect(request: ContentSyncDetectRequest): ContentSyncDetectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ContentSyncDetect', 'POST', '/', 'json', false, 'json', request);
}

model GetContentDetectResultRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  taskId?: string(name='TaskId', example='5d85cd38-03b2-49fd-86b2-be85c4b13215', position='Query'),
}

model GetContentDetectResultResponseBody = {
  code?: string(name='Code', example='00000'),
  data?: {
    detectResultList?: [ 
      {
        riskInfo?: string(name='RiskInfo'),
        riskResult?: int32(name='RiskResult', example='1'),
        status?: int32(name='Status', example='2'),
      }
    ](name='DetectResultList'),
    processedCount?: int32(name='ProcessedCount', example='10'),
    taskId?: string(name='TaskId'),
    taskStatus?: int32(name='TaskStatus', example='2'),
    totalCount?: int32(name='TotalCount', example='10'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='""'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
}

model GetContentDetectResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetContentDetectResultResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetContentDetectResult  GetContentDetectResultRequest
  * @return GetContentDetectResultResponse
 */
async function getContentDetectResult(request: GetContentDetectResultRequest): GetContentDetectResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetContentDetectResult', 'POST', '/', 'json', false, 'json', request);
}

model ListSensitiveWordRequest {
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
}

model ListSensitiveWordResponseBody = {
  code?: string(name='Code', example='00000'),
  data?: {
    maxCount?: int32(name='MaxCount', example='10000'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    sensitiveWordList?: [ 
      {
        id?: long(name='Id', example='387907'),
        label?: string(name='Label'),
        word?: string(name='Word'),
      }
    ](name='SensitiveWordList'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='""'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
}

model ListSensitiveWordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSensitiveWordResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSensitiveWord  ListSensitiveWordRequest
  * @return ListSensitiveWordResponse
 */
async function listSensitiveWord(request: ListSensitiveWordRequest): ListSensitiveWordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSensitiveWord', 'POST', '/', 'json', false, 'json', request);
}

model RegisterAccountRequest {
  memo?: string(name='Memo', example='"user api register"', position='Query'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
}

model RegisterAccountResponseBody = {
  code?: string(name='Code', example='00000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='""'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
}

model RegisterAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RegisterAccountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RegisterAccount  RegisterAccountRequest
  * @return RegisterAccountResponse
 */
async function registerAccount(request: RegisterAccountRequest): RegisterAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RegisterAccount', 'POST', '/', 'json', false, 'json', request);
}

model SyncSensitiveWordRequest {
  bodyData?: {
    sensitiveWordList?: [ 
      {
        id?: int32(name='Id', example='341806'),
        label?: string(name='Label'),
        status?: int32(name='Status'),
        word?: string(name='Word'),
      }
    ](name='SensitiveWordList'),
  }(name='BodyData', shrink='json', position='Body'),
  commit?: boolean(name='Commit', example='true', position='Query'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
}

model SyncSensitiveWordResponseBody = {
  code?: string(name='Code', example='00000'),
  data?: {
    sensitiveWordErrorList?: [ 
      {
        errMessage?: string(name='ErrMessage', example='""'),
        errStatus?: int32(name='ErrStatus', example='1'),
        index?: long(name='Index', example='0'),
        label?: string(name='Label', example='contraband'),
        word?: string(name='Word'),
      }
    ](name='SensitiveWordErrorList'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='""'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
}

model SyncSensitiveWordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SyncSensitiveWordResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SyncSensitiveWord  SyncSensitiveWordRequest
  * @return SyncSensitiveWordResponse
 */
async function syncSensitiveWord(request: SyncSensitiveWordRequest): SyncSensitiveWordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SyncSensitiveWord', 'POST', '/', 'json', true, 'form', request);
}

