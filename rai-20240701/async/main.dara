/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'RAI';
  @version = '2024-07-01';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model BatchContentAsyncDetectRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  sceneName?: string(name='SceneName', example='""', position='Query'),
  serviceName?: string(name='ServiceName', example='textDetection', position='Query'),
  serviceParameterList?: [ 
    {
      content?: string(name='content', example='"XXXXXXXX"'),
    }
  ](name='serviceParameterList', position='Body'),
}

model BatchContentAsyncDetectResponseBody = {
  code?: string(name='Code', example='00000'),
  data?: {
    taskId?: string(name='TaskId', example='19657954336'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='""'),
  requestId?: string(name='RequestId', example='9736C44E-F718-566B-821F-710216aAAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****F68692'),
  success?: boolean(name='Success', example='True'),
}

model BatchContentAsyncDetectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchContentAsyncDetectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchContentAsyncDetect  BatchContentAsyncDetectRequest
  * @return BatchContentAsyncDetectResponse
 */
async function batchContentAsyncDetect(request: BatchContentAsyncDetectRequest): BatchContentAsyncDetectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchContentAsyncDetect', 'POST', '/', 'json', false, 'json', request);
}

model BatchContentSyncDetectRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  sceneName?: string(name='SceneName', example='""', position='Query'),
  serviceName?: string(name='ServiceName', example='textDetection
imageDetection', position='Query'),
  serviceParameterList?: [ 
    {
      content?: string(name='content'),
    }
  ](name='serviceParameterList', position='Body'),
}

model BatchContentSyncDetectResponseBody = {
  code?: string(name='Code', example='00000'),
  data?: {
    detectResultList?: [ 
      {
        riskInfo?: string(name='RiskInfo'),
        riskResult?: int32(name='RiskResult', example='1'),
      }
    ](name='DetectResultList'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='""'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
}

model BatchContentSyncDetectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchContentSyncDetectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchContentSyncDetect  BatchContentSyncDetectRequest
  * @return BatchContentSyncDetectResponse
 */
async function batchContentSyncDetect(request: BatchContentSyncDetectRequest): BatchContentSyncDetectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchContentSyncDetect', 'POST', '/', 'json', false, 'json', request);
}

model CheckAccountRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
}

model CheckAccountResponseBody = {
  code?: string(name='Code', example='00000'),
  data?: {
    checkResult?: int32(name='CheckResult', example='1'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='""'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
}

model CheckAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckAccountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckAccount  CheckAccountRequest
  * @return CheckAccountResponse
 */
async function checkAccount(request: CheckAccountRequest): CheckAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckAccount', 'POST', '/', 'json', false, 'json', request);
}

model ContentAsyncDetectRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  sceneName?: string(name='SceneName', example='""', position='Query'),
  serviceName?: string(name='ServiceName', example='textDetection', position='Query'),
  serviceParameter?: {
    content?: string(name='content'),
  }(name='serviceParameter', position='Body'),
}

model ContentAsyncDetectResponseBody = {
  code?: string(name='Code', example='00000'),
  data?: {
    taskId?: string(name='TaskId', example='5d85cd38-03b2-49fd-86b2-be85c4b13215'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='""'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
}

model ContentAsyncDetectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ContentAsyncDetectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ContentAsyncDetect  ContentAsyncDetectRequest
  * @return ContentAsyncDetectResponse
 */
async function contentAsyncDetect(request: ContentAsyncDetectRequest): ContentAsyncDetectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ContentAsyncDetect', 'POST', '/', 'json', false, 'json', request);
}

model ContentSyncDetectRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  sceneName?: string(name='SceneName', example='""', position='Query'),
  serviceName?: string(name='ServiceName', example='textDetection', position='Query'),
  serviceParameter?: {
    content?: string(name='content'),
  }(name='serviceParameter', position='Body'),
}

model ContentSyncDetectResponseBody = {
  code?: string(name='Code', example='00000'),
  data?: {
    riskInfo?: string(name='RiskInfo'),
    riskResult?: int32(name='RiskResult', example='1'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='""'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
}

model ContentSyncDetectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ContentSyncDetectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ContentSyncDetect  ContentSyncDetectRequest
  * @return ContentSyncDetectResponse
 */
async function contentSyncDetect(request: ContentSyncDetectRequest): ContentSyncDetectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ContentSyncDetect', 'POST', '/', 'json', false, 'json', request);
}

model CreateModelInstanceRequest {
  easServiceId?: string(name='EasServiceId', example='eas-m-12345678', position='Query'),
  easServiceName?: string(name='EasServiceName', example='demo', position='Query'),
  modelCallName?: string(name='ModelCallName', example='demo', position='Query'),
  modelCategoryId?: long(name='ModelCategoryId', example='1', position='Query'),
  modelToken?: string(name='ModelToken', description='EAS Token', example='MzJiMDI5MDliODc0MTlkYmI0ZDhlYmExYjczYTIyZTE3Zm********', position='Query'),
  modelUrl?: string(name='ModelUrl', example='http://12345*****.cn-shanghai.aliyuncs.com/api/predict/demo', position='Query'),
  modelVpcUrl?: string(name='ModelVpcUrl', example='http://12345*****.vpc.cn-shanghai.aliyuncs.com/api/predict/demo', position='Query'),
  workspaceId?: long(name='WorkspaceId', example='643168', position='Query'),
}

model CreateModelInstanceResponseBody = {
  code?: string(name='Code', example='00000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='""'),
  modelInstanceId?: long(name='ModelInstanceId', example='1'),
  requestId?: string(name='RequestId', description='Id of the request', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****F68692'),
  success?: boolean(name='Success', example='True'),
}

model CreateModelInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateModelInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateModelInstance  CreateModelInstanceRequest
  * @return CreateModelInstanceResponse
 */
async function createModelInstance(request: CreateModelInstanceRequest): CreateModelInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateModelInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreatePolicyRequest {
  contentSafeModelInstanceId?: long(name='ContentSafeModelInstanceId', position='Query'),
  enableSensitiveInputCheck?: int32(name='EnableSensitiveInputCheck', position='Query'),
  enableSensitiveOutputCheck?: int32(name='EnableSensitiveOutputCheck', position='Query'),
  harmfulCategoryConfigInfoList?: [ 
    {
      categoryId?: long(name='CategoryId', description='Harmful category ID', example='1'),
      categoryLabel?: string(name='CategoryLabel', description='Category name', example='Morality'),
      categoryType?: int32(name='CategoryType', description='0: Text
1: Image', example='0'),
      inputOutputType?: int32(name='InputOutputType', description='Model input/output type
0: Input
1: Output', example='0'),
      isEnabled?: int32(name='IsEnabled', description='Whether it is enabled
0: Not enabled
1: Enabled', example='1'),
      securityLevel?: int32(name='SecurityLevel', description='Security level
0: Low
1: Medium
2: High', example='0'),
    }
  ](name='HarmfulCategoryConfigInfoList', description='List of harmful category configurations', shrink='json', position='Query'),
  inputSafeAnswer?: string(name='InputSafeAnswer', position='Query'),
  inputSafeAnswerSwitch?: int32(name='InputSafeAnswerSwitch', position='Query'),
  isSidecarPolicy?: int32(name='IsSidecarPolicy', position='Query'),
  outputSafeAnswer?: string(name='OutputSafeAnswer', position='Query'),
  outputSafeAnswerSwitch?: int32(name='OutputSafeAnswerSwitch', position='Query'),
  policyName?: string(name='PolicyName', description='Detection policy name.', example='testPolicy', position='Query'),
  promptAttackInfo?: {
    isEnabled?: int32(name='IsEnabled', description='Prompt attack configuration switch
0: Off
1: On', example='1'),
    securityLevel?: int32(name='SecurityLevel', description='Security level
0: Low
1: Medium
2: High', example='1'),
  }(name='PromptAttackInfo', description='Prompt attack detection result object', shrink='json', position='Query'),
  promptAttackInfoList?: [ 
    {
      categoryId?: long(name='CategoryId', description='Harmful category ID', example='1'),
      categoryLabel?: string(name='CategoryLabel', description='Category name', example='Role Play'),
      isEnabled?: int32(name='IsEnabled', description='Prompt attack configuration switch
0: Off
1: On', example='1'),
      securityLevel?: int32(name='SecurityLevel', description='Security level
0: Low
1: Medium
2: High', example='1'),
    }
  ](name='PromptAttackInfoList', description='List of prompt attacks', shrink='json', position='Query'),
  promptAttackModelInstanceId?: long(name='PromptAttackModelInstanceId', position='Query'),
  regionId?: string(name='RegionId', description='Region ID.', example='cn-shanghai', position='Query'),
  regularExpressList?: [ 
    {
      actionType?: int32(name='ActionType'),
      regularExpress?: string(name='RegularExpress'),
      regularExpressName?: string(name='RegularExpressName'),
    }
  ](name='RegularExpressList', shrink='json', position='Query'),
  sceneType?: int32(name='SceneType', position='Query'),
  sensitiveConfigList?: [ 
    {
      actionType?: int32(name='ActionType'),
      isEnabled?: int32(name='IsEnabled'),
      sensitiveConfigId?: long(name='SensitiveConfigId'),
    }
  ](name='SensitiveConfigList', shrink='json', position='Query'),
  sensitiveTopicList?: [ 
    {
      categoryType?: int32(name='CategoryType'),
      securityLevel?: int32(name='SecurityLevel'),
      topicDefinition?: string(name='TopicDefinition'),
      topicExampleInfoList?: [ 
        {
          content?: string(name='Content'),
          exampleType?: int32(name='ExampleType'),
        }
      ](name='TopicExampleInfoList'),
      topicName?: string(name='TopicName'),
    }
  ](name='SensitiveTopicList', shrink='json', position='Query'),
  sensitiveTopicModelInstanceId?: long(name='SensitiveTopicModelInstanceId', position='Query'),
  sensitiveWordList?: [ 
    {
      label?: string(name='Label'),
      word?: string(name='Word'),
    }
  ](name='SensitiveWordList', shrink='json', position='Query'),
  topicConfigInfoList?: [ 
    {
      categoryType?: int32(name='CategoryType', description='0: Text
1: Image', example='0'),
      inputOutputType?: int32(name='InputOutputType', description='Model input/output type
0: Input
1: Output', example='0'),
      securityLevel?: int32(name='SecurityLevel', description='Security level
0: Low
1: Medium
2: High', example='1'),
      topicId?: long(name='TopicId', description='Sensitive topic ID', example='4'),
      topicName?: string(name='TopicName', description='Topic Name', example='Buss.'),
    }
  ](name='TopicConfigInfoList', description='List of sensitive topics', shrink='json', position='Query'),
  wordGroupInfoList?: [ 
    {
      groupId?: long(name='GroupId', description='Keyword group ID.', example='1'),
      groupName?: string(name='GroupName', description='Keyword group name', example='testGroup'),
      inputOutputType?: int32(name='InputOutputType', description='Model input/output type
0: Input
1: Output', example='0'),
    }
  ](name='WordGroupInfoList', description='List of keyword group objects', shrink='json', position='Query'),
  workspaceId?: long(name='WorkspaceId', description='Workspace ID', example='608226', position='Query'),
}

model CreatePolicyResponseBody = {
  code?: string(name='Code', description='Status code, 00000 indicates success; others indicate failure.', example='00000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='Message', description='If there is an error, returns the error message.', example='""'),
  policyId?: long(name='PolicyId', description='Policy ID.', example='16'),
  policyIdentifier?: string(name='PolicyIdentifier', description='Policy identifier', example='2tehcwesh4xx'),
  requestId?: string(name='RequestId', description='Request ID', example='74D2A967-2CE0-519B-B623-38D851734EC5'),
  success?: boolean(name='Success', description='Whether the operation was successful. true indicates success, false indicates failure.', example='True'),
}

model CreatePolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreatePolicy  CreatePolicyRequest
  * @return CreatePolicyResponse
 */
async function createPolicy(request: CreatePolicyRequest): CreatePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePolicy', 'POST', '/', 'json', false, 'json', request);
}

model CreateTopicRequest {
  bodyData?: {
    topicExampleInfoList?: [ 
      {
        content?: string(name='Content'),
        exampleType?: int32(name='ExampleType', example='1'),
      }
    ](name='TopicExampleInfoList'),
  }(name='BodyData', shrink='json', position='Body'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  topicDefinition?: string(name='TopicDefinition', position='Query'),
  topicName?: string(name='TopicName', position='Query'),
  workspaceId?: long(name='WorkspaceId', example='643168', position='Query'),
}

model CreateTopicResponseBody = {
  code?: string(name='Code', example='00000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='""'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
  topicId?: long(name='TopicId', example='217'),
}

model CreateTopicResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTopicResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateTopic  CreateTopicRequest
  * @return CreateTopicResponse
 */
async function createTopic(request: CreateTopicRequest): CreateTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTopic', 'POST', '/', 'json', true, 'form', request);
}

model CreateWordGroupRequest {
  bodyData?: {
    wordInfoList?: [ 
      {
        label?: string(name='Label', description='Label', example='Buss.'),
        word?: string(name='Word', description='Keyword', example='Inv.'),
      }
    ](name='WordInfoList', description='Keyword group list'),
  }(name='BodyData', description='Request object', shrink='json', position='Body'),
  commit?: boolean(name='Commit', description='Whether to commit.
false: Not actually saved, only checked
true: Commit and save', example='true', position='Query'),
  groupName?: string(name='GroupName', description='Keyword group name', example='testGroup', position='Query'),
  regionId?: string(name='RegionId', description='Region ID.', example='cn-shanghai', position='Query'),
  workspaceId?: long(name='WorkspaceId', description='Workspace ID', example='643168', position='Query'),
}

model CreateWordGroupResponseBody = {
  code?: string(name='Code', description='Status code, 00000 indicates success; others indicate failure.', example='00000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='Message', description='If there is an error, returns the error message.', example='""'),
  requestId?: string(name='RequestId', description='Request ID', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. true: Call succeeded. false: Call failed.', example='True'),
  wordErrorInfoList?: [ 
    {
      errorMessage?: string(name='ErrorMessage', description='Error message description', example='Keyword can not be empty'),
      errorStatus?: int32(name='ErrorStatus', description='Error status information.', example='1'),
      index?: long(name='Index', description='Position of the error information in the array.', example='1'),
      label?: string(name='Label', description='Label', example='Buss.'),
      word?: string(name='Word', description='Keyword', example='Inv.'),
    }
  ](name='WordErrorInfoList', description='Error information list'),
}

model CreateWordGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWordGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateWordGroup  CreateWordGroupRequest
  * @return CreateWordGroupResponse
 */
async function createWordGroup(request: CreateWordGroupRequest): CreateWordGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateWordGroup', 'POST', '/', 'json', true, 'form', request);
}

model DeleteModelInstanceRequest {
  modelInstanceIdList?: [ long ](name='ModelInstanceIdList', shrink='json', position='Query'),
}

model DeleteModelInstanceResponseBody = {
  code?: string(name='Code', example='00000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='""'),
  requestId?: string(name='RequestId', description='Id of the request', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
}

model DeleteModelInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteModelInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteModelInstance  DeleteModelInstanceRequest
  * @return DeleteModelInstanceResponse
 */
async function deleteModelInstance(request: DeleteModelInstanceRequest): DeleteModelInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteModelInstance', 'POST', '/', 'json', false, 'json', request);
}

model DeletePolicyRequest {
  policyIdList?: [ long ](name='PolicyIdList', description='List of detection policy IDs', shrink='json', position='Query'),
  regionId?: string(name='RegionId', description='Region ID.', example='cn-shanghai', position='Query'),
}

model DeletePolicyResponseBody = {
  code?: string(name='Code', description='Status code, 00000 indicates success; others indicate failure.', example='00000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='HTTP status code description', example='200'),
  message?: string(name='Message', description='Error message', example='""'),
  requestId?: string(name='RequestId', description='Request ID', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful. true means success, false means failure.', example='True'),
}

model DeletePolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeletePolicy  DeletePolicyRequest
  * @return DeletePolicyResponse
 */
async function deletePolicy(request: DeletePolicyRequest): DeletePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePolicy', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTopicRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  topicIdList?: [ long ](name='TopicIdList', shrink='json', position='Query'),
}

model DeleteTopicResponseBody = {
  code?: string(name='Code', example='00000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='""'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
}

model DeleteTopicResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTopicResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteTopic  DeleteTopicRequest
  * @return DeleteTopicResponse
 */
async function deleteTopic(request: DeleteTopicRequest): DeleteTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTopic', 'POST', '/', 'json', false, 'json', request);
}

model DeleteWordGroupRequest {
  groupIdList?: [ long ](name='GroupIdList', description='List of keyword strategy IDs.', shrink='json', position='Query'),
  regionId?: string(name='RegionId', description='Region ID.', example='cn-shanghai', position='Query'),
}

model DeleteWordGroupResponseBody = {
  code?: string(name='Code', description='Result code, 200 indicates success; others indicate failure.', example='00000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='HTTP status code.', example='200'),
  message?: string(name='Message', description='If an error occurs, returns the error message.', example='""'),
  requestId?: string(name='RequestId', description='Request ID.', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful. Possible values:
- True indicates success.
- False indicates failure.', example='True'),
}

model DeleteWordGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteWordGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteWordGroup  DeleteWordGroupRequest
  * @return DeleteWordGroupResponse
 */
async function deleteWordGroup(request: DeleteWordGroupRequest): DeleteWordGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteWordGroup', 'POST', '/', 'json', false, 'json', request);
}

model GetContentDetectResultRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  taskId?: string(name='TaskId', example='5d85cd38-03b2-49fd-86b2-be85c4b13215', position='Query'),
}

model GetContentDetectResultResponseBody = {
  code?: string(name='Code', example='00000'),
  data?: {
    detectResultList?: [ 
      {
        riskInfo?: string(name='RiskInfo'),
        riskResult?: int32(name='RiskResult', example='1'),
        status?: int32(name='Status', example='2'),
      }
    ](name='DetectResultList'),
    processedCount?: int32(name='ProcessedCount', example='10'),
    taskId?: string(name='TaskId'),
    taskStatus?: int32(name='TaskStatus', example='2'),
    totalCount?: int32(name='TotalCount', example='10'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='""'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
}

model GetContentDetectResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetContentDetectResultResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetContentDetectResult  GetContentDetectResultRequest
  * @return GetContentDetectResultResponse
 */
async function getContentDetectResult(request: GetContentDetectResultRequest): GetContentDetectResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetContentDetectResult', 'POST', '/', 'json', false, 'json', request);
}

model GetModelInputContentDetectResultRequest {
  regionId?: string(name='RegionId', description='Region ID.', example='cn-shanghai', position='Query'),
  taskId?: string(name='TaskId', description='Task ID.', example='5d85cd38-03b2-49fd-86b2-be85c4b13215', position='Query'),
}

model GetModelInputContentDetectResultResponseBody = {
  code?: string(name='Code', description='Status code, 00000 indicates success; others indicate failure.', example='00000'),
  detectResultList?: [ 
    {
      riskResult?: int32(name='RiskResult', description='0: No risk
1: Risk exists', example='0'),
      status?: int32(name='Status', description='0: Queued
1: Processing
2: Completed
3: Failed', example='2'),
      traceInfo?: {
        blockWord?: {
          blockWordGroupInfoList?: [ 
            {
              blockWordList?: [ 
                {
                  word?: string(name='Word', description='Word', example='testWord'),
                  wordLabel?: string(name='WordLabel', description='Label', example='testLabel'),
                }
              ](name='BlockWordList', description='Keyword detection result object list'),
              groupName?: string(name='GroupName', description='Keyword group name', example='testGroup'),
            }
          ](name='BlockWordGroupInfoList', description='Keyword detection result object list'),
          riskResult?: int32(name='RiskResult', description='0: No risk
1: Risk exists', example='0'),
        }(name='BlockWord', description='Detected keywords'),
        denyTopics?: {
          confidenceScore?: double(name='ConfidenceScore', description='ConfidenceScore', example='0.0'),
          riskResult?: int32(name='RiskResult', description='0: No risk
1: Risk exists', example='1'),
          topicInfoList?: [ 
            {
              categoryType?: int32(name='CategoryType', description='0: Text
1: Image', example='0'),
              riskResult?: int32(name='RiskResult', description='0: No risk
1: Risk exists', example='1'),
              securityLevel?: int32(name='SecurityLevel', description='Security level
0: Low
1: Medium
2: High', example='0'),
              topicName?: string(name='TopicName', description='Topic name', example='Buss.'),
            }
          ](name='TopicInfoList', description='List of sensitive topics'),
        }(name='DenyTopics', description='Sensitive topic object list'),
        harmfulCategories?: {
          confidenceScore?: double(name='ConfidenceScore', description='Confidence score', example='0.0'),
          harmfulCategoryInfoList?: [ 
            {
              categoryLabel?: string(name='CategoryLabel', description='Category name', example='Morality'),
              categoryType?: int32(name='CategoryType', description='0: Text
1: Image', example='0'),
              riskResult?: int32(name='RiskResult', description='0: No risk
1: Risk exists', example='0'),
              securityLevel?: int32(name='SecurityLevel', description='Security level
0: Low
1: Medium
2: High', example='0'),
              subCategoryLabel?: string(name='SubCategoryLabel', description='Sub-category label', example='morality_ethics'),
            }
          ](name='HarmfulCategoryInfoList', description='List of harmful category objects'),
          riskResult?: int32(name='RiskResult', description='0: No risk
1: Risk exists', example='0'),
        }(name='HarmfulCategories', description='List of harmful category result objects'),
        promptAttack?: {
          confidenceScore?: double(name='ConfidenceScore', description='Confidence score', example='0.0'),
          promptAttackInfo?: string(name='PromptAttackInfo', description='Prompt attack detection result object', example='Role Play'),
          promptAttackInfoList?: [ 
            {
              categoryLabel?: string(name='CategoryLabel', description='Category name', example='Role Play'),
              categoryType?: int32(name='CategoryType', description='0: Text
1: Image', example='0'),
              riskResult?: int32(name='RiskResult', description='0: No risk
1: Risk exists', example='0'),
              securityLevel?: int32(name='SecurityLevel', description='Security level
0: Low
1: Medium
2: High', example='0'),
            }
          ](name='PromptAttackInfoList', description='Prompt attack list'),
          riskResult?: int32(name='RiskResult', description='0: No risk
1: Risk exists', example='0'),
          securityLevel?: int32(name='SecurityLevel', description='Security level
0: Low
1: Medium
2: High', example='0'),
        }(name='PromptAttack', description='Prompt attack information'),
      }(name='TraceInfo', description='Inspection result'),
    }
  ](name='DetectResultList', description='Detection result object'),
  httpStatusCode?: int32(name='HttpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='Message', description='Error message.', example='""'),
  processedCount?: int32(name='ProcessedCount', description='Number of processed items in the task.', example='1'),
  requestId?: string(name='RequestId', description='Request ID', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful. true means success, false means failure.', example='True'),
  taskId?: string(name='TaskId', description='Task ID.', example='5d85cd38-03b2-49fd-86b2-be85c4b13215'),
  taskStatus?: int32(name='TaskStatus', description='Task processing status:
0: Queued
1: Processing
2: Completed
3: Failed', example='2'),
  totalCount?: int32(name='TotalCount', description='Total number of items', example='1'),
}

model GetModelInputContentDetectResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetModelInputContentDetectResultResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetModelInputContentDetectResult  GetModelInputContentDetectResultRequest
  * @return GetModelInputContentDetectResultResponse
 */
async function getModelInputContentDetectResult(request: GetModelInputContentDetectResultRequest): GetModelInputContentDetectResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetModelInputContentDetectResult', 'POST', '/', 'json', false, 'json', request);
}

model GetModelInstanceInfoRequest {
  modelInstanceId?: long(name='ModelInstanceId', example='123', position='Query'),
  sceneType?: int32(name='SceneType', example='2', position='Query'),
}

model GetModelInstanceInfoResponseBody = {
  code?: string(name='Code', example='00000'),
  description?: string(name='Description', example='opencompass-vllm07-acc'),
  easServiceId?: string(name='EasServiceId', example='eas-m-12345678'),
  easServiceName?: string(name='EasServiceName', example='rai_content_detection_model'),
  gmtModified?: long(name='GmtModified', example='1634122349000'),
  harmfulCategoryConfigInfoList?: [ 
    {
      categoryId?: long(name='CategoryId', example='1'),
      categoryLabel?: string(name='CategoryLabel'),
      categoryType?: int32(name='CategoryType', example='0'),
      inputOutputType?: int32(name='InputOutputType', example='0'),
      securityLevel?: int32(name='SecurityLevel', example='1'),
    }
  ](name='HarmfulCategoryConfigInfoList'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  isSupportImage?: boolean(name='IsSupportImage', example='False'),
  isSupportText?: boolean(name='IsSupportText', example='True'),
  message?: string(name='Message', example='""'),
  modelCallName?: string(name='ModelCallName', example='demo'),
  modelCategoryId?: long(name='ModelCategoryId', example='1'),
  modelInstanceId?: long(name='ModelInstanceId', example='123'),
  modelSource?: int32(name='ModelSource', example='1'),
  modelToken?: string(name='ModelToken', example='MzJiMDI5MDliODc0MTlkYmI0ZDhlYmExYjczYTIyZTE3Zm********'),
  modelUrl?: string(name='ModelUrl', example='http://12345*****.cn-shanghai.aliyuncs.com/api/predict/echo'),
  modelVpcUrl?: string(name='ModelVpcUrl', example='http://12345*****.vpc.cn-shanghai.aliyuncs.com/api/predict/demo'),
  promptAttackInfoList?: [ 
    {
      categoryId?: long(name='CategoryId', example='1'),
      categoryLabel?: string(name='CategoryLabel'),
      securityLevel?: int32(name='SecurityLevel', example='1'),
    }
  ](name='PromptAttackInfoList'),
  requestId?: string(name='RequestId', description='Id of the request', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
}

model GetModelInstanceInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetModelInstanceInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetModelInstanceInfo  GetModelInstanceInfoRequest
  * @return GetModelInstanceInfoResponse
 */
async function getModelInstanceInfo(request: GetModelInstanceInfoRequest): GetModelInstanceInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetModelInstanceInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetModelOutputContentDetectResultRequest {
  regionId?: string(name='RegionId', description='Region ID.', example='cn-shanghai', position='Query'),
  taskId?: string(name='TaskId', description='Task ID.', example='5d85cd38-03b2-49fd-86b2-be85c4b13215', position='Query'),
}

model GetModelOutputContentDetectResultResponseBody = {
  code?: string(name='Code', description='Status code, 00000 indicates success; others indicate failure.', example='00000'),
  detectResultList?: [ 
    {
      riskResult?: int32(name='RiskResult', description='0: No risk
1: Risk exists', example='0'),
      status?: int32(name='Status', description='0: Queued
1: Processing
2: Completed
3: Failed', example='2'),
      traceInfo?: {
        blockWord?: {
          blockWordGroupInfoList?: [ 
            {
              blockWordList?: [ 
                {
                  word?: string(name='Word', description='Word', example='testWord'),
                  wordLabel?: string(name='WordLabel', description='Label', example='testLabel'),
                }
              ](name='BlockWordList', description='List of keyword detection results'),
              groupName?: string(name='GroupName', description='Keyword group name', example='testGroup'),
            }
          ](name='BlockWordGroupInfoList', description='List of keyword detection result objects'),
          riskResult?: int32(name='RiskResult', description='0: No risk
1: Risk exists', example='0'),
        }(name='BlockWord', description='Detected keywords'),
        denyTopics?: {
          confidenceScore?: double(name='ConfidenceScore', description='Confidence score', example='0.0'),
          riskResult?: int32(name='RiskResult', description='0: No risk
1: Risk exists', example='0'),
          topicInfoList?: [ 
            {
              categoryType?: int32(name='CategoryType', description='0: Text
1: Image', example='0'),
              riskResult?: int32(name='RiskResult', description='0: No risk
1: Risk exists', example='0'),
              securityLevel?: int32(name='SecurityLevel', description='Security level
0: Low
1: Medium
2: High', example='0'),
              topicName?: string(name='TopicName', description='Topic name', example='Buss.'),
            }
          ](name='TopicInfoList', description='List of sensitive topics'),
        }(name='DenyTopics', description='Sensitive topic object list'),
        harmfulCategories?: {
          confidenceScore?: double(name='ConfidenceScore', description='Confidence score', example='0.0'),
          harmfulCategoryInfoList?: [ 
            {
              categoryLabel?: string(name='CategoryLabel', description='Category name', example='Morality'),
              categoryType?: int32(name='CategoryType', description='0: Text
1: Image', example='0'),
              riskResult?: int32(name='RiskResult', description='0: No risk
1: Risk exists', example='0'),
              securityLevel?: int32(name='SecurityLevel', description='Security level
0: Low
1: Medium
2: High', example='1'),
              subCategoryLabel?: string(name='SubCategoryLabel', description='Sub-category label', example='morality_ethics'),
            }
          ](name='HarmfulCategoryInfoList', description='List of harmful category objects'),
          riskResult?: int32(name='RiskResult', description='0: No risk
1: Risk exists', example='0'),
        }(name='HarmfulCategories', description='List of harmful category result objects'),
        promptAttack?: {
          confidenceScore?: double(name='ConfidenceScore', description='Confidence score', example='0.0'),
          promptAttackInfo?: string(name='PromptAttackInfo', description='Prompt attack detection result object', example='Role Play'),
          promptAttackInfoList?: [ 
            {
              categoryLabel?: string(name='CategoryLabel', description='Category name', example='Role Play'),
              categoryType?: int32(name='CategoryType', description='0: Text
1: Image', example='0'),
              riskResult?: int32(name='RiskResult', description='0: No risk
1: Risk exists', example='1'),
              securityLevel?: int32(name='SecurityLevel', description='Security level
0: Low
1: Medium
2: High', example='0'),
            }
          ](name='PromptAttackInfoList', description='Prompt attack list'),
          riskResult?: int32(name='RiskResult', description='0: No risk
1: Risk exists', example='0'),
          securityLevel?: int32(name='SecurityLevel', description='Security level
0: Low
1: Medium
2: High', example='1'),
        }(name='PromptAttack', description='PromptAttack'),
      }(name='TraceInfo', description='Inspection results'),
    }
  ](name='DetectResultList', description='List of detection result objects'),
  httpStatusCode?: int32(name='HttpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='Message', description='Error message.', example='""'),
  processedCount?: int32(name='ProcessedCount', description='Number of processed items in the task.', example='1'),
  requestId?: string(name='RequestId', description='Request ID', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', description='Whether the operation was successful. true indicates success, false indicates failure.', example='True'),
  taskId?: string(name='TaskId', description='Task ID.', example='5d85cd38-03b2-49fd-86b2-be85c4b13215'),
  taskStatus?: int32(name='TaskStatus', description='Task processing status:
0: Queued
1: Processing
2: Completed
3: Failed', example='2'),
  totalCount?: int32(name='TotalCount', description='Total number of items', example='1'),
}

model GetModelOutputContentDetectResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetModelOutputContentDetectResultResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetModelOutputContentDetectResult  GetModelOutputContentDetectResultRequest
  * @return GetModelOutputContentDetectResultResponse
 */
async function getModelOutputContentDetectResult(request: GetModelOutputContentDetectResultRequest): GetModelOutputContentDetectResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetModelOutputContentDetectResult', 'POST', '/', 'json', false, 'json', request);
}

model GetPolicyDefaultOptionsRequest {
  regionId?: string(name='RegionId', description='Region ID.', example='cn-shanghai', position='Query'),
}

model GetPolicyDefaultOptionsResponseBody = {
  code?: string(name='Code', description='Status code, 00000 indicates success; others indicate failure.', example='00000'),
  enableSensitiveInputCheck?: int32(name='EnableSensitiveInputCheck'),
  enableSensitiveOutputCheck?: int32(name='EnableSensitiveOutputCheck'),
  harmfulCategoryInfoList?: [ 
    {
      categoryId?: long(name='CategoryId', description='Harmful category ID', example='1'),
      categoryLabel?: string(name='CategoryLabel', description='Category name', example='Morality'),
      categoryType?: int32(name='CategoryType', description='0: Text
1: Image', example='0'),
      inputOutputType?: int32(name='InputOutputType', description='Model input/output type
0: Input
1: Output', example='0'),
      isEnabled?: int32(name='IsEnabled', description='Harmful category configuration switch
0: Off
1: On', example='True'),
      securityLevel?: int32(name='SecurityLevel', description='Security level
0: Low
1: Medium
2: High', example='2'),
    }
  ](name='HarmfulCategoryInfoList', description='List of harmful category objects'),
  httpStatusCode?: int32(name='HttpStatusCode', description='HTTP status code', example='200'),
  inputSafeAnswer?: string(name='InputSafeAnswer'),
  inputSafeAnswerSwitch?: int32(name='InputSafeAnswerSwitch'),
  message?: string(name='Message', description='Return message.', example='""'),
  outputSafeAnswer?: string(name='OutputSafeAnswer'),
  outputSafeAnswerSwitch?: int32(name='OutputSafeAnswerSwitch'),
  promptAttackInfo?: {
    isEnabled?: int32(name='IsEnabled', description='Harmful category configuration switch
0: Off
1: On', example='1'),
    securityLevel?: int32(name='SecurityLevel', description='Security level
0: Low
1: Medium
2: High', example='1'),
  }(name='PromptAttackInfo', description='Prompt attack detection result object'),
  promptAttackInfoList?: [ 
    {
      categoryId?: long(name='CategoryId', description='Harmful category ID', example='1'),
      categoryLabel?: string(name='CategoryLabel', description='Category name', example='Role Play'),
      isEnabled?: int32(name='IsEnabled', description='Prompt attack configuration switch
0: Off
1: On', example='1'),
      securityLevel?: int32(name='SecurityLevel', description='Security level
0: Low
1: Medium
2: High', example='0'),
    }
  ](name='PromptAttackInfoList', description='Prompt attack list'),
  requestId?: string(name='RequestId', description='Request ID', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  sensitiveDataTypeList?: [ 
    {
      actionType?: int32(name='ActionType'),
      dataType?: string(name='DataType'),
      example?: string(name='Example'),
      exampleProcessed?: string(name='ExampleProcessed'),
      isEnabled?: int32(name='IsEnabled'),
      matchAndReplace?: string(name='MatchAndReplace'),
      sensitiveConfigId?: long(name='SensitiveConfigId'),
      sensitiveName?: string(name='SensitiveName'),
    }
  ](name='SensitiveDataTypeList'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful. `true` means success, `false` means failure.', example='True'),
  topicConfigInfoList?: [ 
    {
      categoryType?: int32(name='CategoryType', description='0: Text
1: Image', example='0'),
      inputOutputType?: int32(name='InputOutputType', description='Model input/output type
0: Input
1: Output', example='0'),
      securityLevel?: int32(name='SecurityLevel', description='Security level
0: Low
1: Medium
2: High', example='0'),
      topicId?: long(name='TopicId', description='Sensitive topic ID', example='4'),
      topicName?: string(name='TopicName', description='Topic name', example='Buss.'),
    }
  ](name='TopicConfigInfoList', description='Sensitive topic list'),
  wordGroupInfoList?: [ 
    {
      groupId?: long(name='GroupId', description='Keyword group ID.', example='1'),
      groupName?: string(name='GroupName', description='Keyword group name', example='testGroup'),
      inputOutputType?: int32(name='InputOutputType', description='Model input/output type
0: Input
1: Output', example='0'),
    }
  ](name='WordGroupInfoList', description='List of keyword group objects'),
}

model GetPolicyDefaultOptionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPolicyDefaultOptionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPolicyDefaultOptions  GetPolicyDefaultOptionsRequest
  * @return GetPolicyDefaultOptionsResponse
 */
async function getPolicyDefaultOptions(request: GetPolicyDefaultOptionsRequest): GetPolicyDefaultOptionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPolicyDefaultOptions', 'POST', '/', 'json', false, 'json', request);
}

model GetPolicyInfoRequest {
  policyId?: long(name='PolicyId', description='Detection policy ID', example='16', position='Query'),
  regionId?: string(name='RegionId', description='Region ID.', example='cn-shanghai', position='Query'),
}

model GetPolicyInfoResponseBody = {
  code?: string(name='Code', description='Result code, 00000 indicates success; others indicate failure.', example='00000'),
  contentSafeModelInfo?: {
    easServiceName?: string(name='EasServiceName'),
    modelInstanceId?: long(name='ModelInstanceId'),
  }(name='ContentSafeModelInfo'),
  enableSensitiveInputCheck?: int32(name='EnableSensitiveInputCheck'),
  enableSensitiveOutputCheck?: int32(name='EnableSensitiveOutputCheck'),
  gmtModified?: long(name='GmtModified', description='Policy modification time', example='1634122349000'),
  harmfulCategoryConfigInfoList?: [ 
    {
      categoryConfigId?: long(name='CategoryConfigId', description='Harmful category configuration ID', example='1'),
      categoryId?: long(name='CategoryId'),
      categoryLabel?: string(name='CategoryLabel', description='Category name', example='Morality'),
      categoryType?: int32(name='CategoryType', description='0: Text
1: Image', example='0'),
      inputOutputType?: int32(name='InputOutputType', description='Model input/output type
0: Input
1: Output', example='0'),
      isEnabled?: int32(name='IsEnabled', description='Harmful category configuration switch
0: Off
1: On', example='1'),
      securityLevel?: int32(name='SecurityLevel', description='Security level
0: Low
1: Medium
2: High', example='1'),
    }
  ](name='HarmfulCategoryConfigInfoList', description='Harmful category configuration list'),
  httpStatusCode?: int32(name='HttpStatusCode', description='HTTP status code', example='200'),
  inputSafeAnswer?: string(name='InputSafeAnswer'),
  inputSafeAnswerSwitch?: int32(name='InputSafeAnswerSwitch'),
  isSidecarPolicy?: int32(name='IsSidecarPolicy'),
  message?: string(name='Message', description='Error message.', example='""'),
  outputSafeAnswer?: string(name='OutputSafeAnswer'),
  outputSafeAnswerSwitch?: int32(name='OutputSafeAnswerSwitch'),
  policyIdentifier?: string(name='PolicyIdentifier', description='Policy identifier', example='x1bc5xgs4uhx'),
  policyName?: string(name='PolicyName', description='Detection policy name.', example='testPolicy'),
  promptAttackInfo?: {
    isEnabled?: int32(name='IsEnabled', description='Prompt attack configuration switch
0: Off
1: On', example='true'),
    securityLevel?: int32(name='SecurityLevel', description='Security level
0: Low
1: Medium
2: High', example='1'),
  }(name='PromptAttackInfo', description='Prompt attack detection result object'),
  promptAttackInfoList?: [ 
    {
      categoryConfigId?: long(name='CategoryConfigId', description='Harmful category configuration ID', example='1'),
      categoryId?: long(name='CategoryId'),
      categoryLabel?: string(name='CategoryLabel', description='Category name', example='Role Play'),
      isEnabled?: int32(name='IsEnabled', description='Harmful category configuration switch
0: Off
1: On', example='1'),
      securityLevel?: int32(name='SecurityLevel', description='Security level
0: Low
1: Medium
2: High', example='1'),
    }
  ](name='PromptAttackInfoList', description='Prompt attack list'),
  promptAttackModelInfo?: {
    easServiceName?: string(name='EasServiceName'),
    modelInstanceId?: long(name='ModelInstanceId'),
  }(name='PromptAttackModelInfo'),
  regularExpressList?: [ 
    {
      actionType?: int32(name='ActionType'),
      inputOutputType?: int32(name='InputOutputType'),
      isEnabled?: int32(name='IsEnabled'),
      matchAndReplace?: string(name='MatchAndReplace'),
      regularExpress?: string(name='RegularExpress'),
      regularExpressId?: long(name='RegularExpressId'),
      regularExpressName?: string(name='RegularExpressName'),
    }
  ](name='RegularExpressList'),
  requestId?: string(name='RequestId', description='Request ID', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  sceneType?: int32(name='SceneType'),
  sensitiveConfigList?: [ 
    {
      actionType?: int32(name='ActionType'),
      inputOutputType?: int32(name='InputOutputType'),
      isEnabled?: int32(name='IsEnabled'),
      matchAndReplace?: string(name='MatchAndReplace'),
      sensitiveConfigId?: long(name='SensitiveConfigId'),
      sensitiveName?: string(name='SensitiveName'),
    }
  ](name='SensitiveConfigList'),
  sensitiveTopicList?: [ 
    {
      categoryType?: int32(name='CategoryType'),
      inputOutputType?: int32(name='InputOutputType'),
      securityLevel?: int32(name='SecurityLevel'),
      topicDefinition?: string(name='TopicDefinition'),
      topicExampleInfoList?: [ 
        {
          content?: string(name='Content'),
          exampleType?: long(name='ExampleType'),
        }
      ](name='TopicExampleInfoList'),
      topicId?: long(name='TopicId'),
      topicName?: string(name='TopicName'),
    }
  ](name='SensitiveTopicList'),
  sensitiveTopicModelInfo?: {
    easServiceName?: string(name='EasServiceName'),
    modelInstanceId?: long(name='ModelInstanceId'),
  }(name='SensitiveTopicModelInfo'),
  sensitiveWordList?: [ 
    {
      inputOutputType?: int32(name='InputOutputType'),
      label?: string(name='Label'),
      word?: string(name='Word'),
    }
  ](name='SensitiveWordList'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful. `true` for success, `false` for failure.', example='True'),
  topicConfigInfoList?: [ 
    {
      categoryType?: int32(name='CategoryType', description='0: Text
1: Image', example='0'),
      inputOutputType?: int32(name='InputOutputType', description='Model input/output type
0: Input
1: Output', example='0'),
      securityLevel?: int32(name='SecurityLevel', description='Security level
0: Low
1: Medium
2: High', example='1'),
      topicId?: long(name='TopicId', description='Sensitive topic ID', example='3'),
      topicName?: string(name='TopicName', description='Topic name', example='Buss.'),
    }
  ](name='TopicConfigInfoList', description='Sensitive topic list'),
  wordGroupInfoList?: [ 
    {
      groupId?: long(name='GroupId', description='Keyword group ID.', example='1'),
      groupName?: string(name='GroupName', description='Keyword group name', example='testGroup'),
      inputOutputType?: int32(name='InputOutputType', description='Model input/output type
0: Input
1: Output', example='0'),
    }
  ](name='WordGroupInfoList', description='Keyword group object list'),
}

model GetPolicyInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPolicyInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPolicyInfo  GetPolicyInfoRequest
  * @return GetPolicyInfoResponse
 */
async function getPolicyInfo(request: GetPolicyInfoRequest): GetPolicyInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPolicyInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetTopicRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  topicId?: long(name='TopicId', example='216', position='Query'),
}

model GetTopicResponseBody = {
  code?: string(name='Code', example='00000'),
  gmtModified?: long(name='GmtModified', example='1634122349000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='""'),
  policyInfoList?: [ 
    {
      policyId?: long(name='PolicyId', example='16'),
      policyIdentifier?: string(name='PolicyIdentifier', example='x1bc5xgs4uhx'),
      policyName?: string(name='PolicyName'),
    }
  ](name='PolicyInfoList'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
  topicDefinition?: string(name='TopicDefinition'),
  topicExampleInfoList?: [ 
    {
      content?: string(name='Content'),
      exampleId?: long(name='ExampleId', example='2'),
      exampleType?: int32(name='ExampleType', example='0'),
    }
  ](name='TopicExampleInfoList'),
  topicName?: string(name='TopicName', example='test_topic'),
}

model GetTopicResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTopicResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTopic  GetTopicRequest
  * @return GetTopicResponse
 */
async function getTopic(request: GetTopicRequest): GetTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTopic', 'POST', '/', 'json', false, 'json', request);
}

model GetWordGroupRequest {
  groupId?: long(name='GroupId', description='Keyword group ID.', example='1', position='Query'),
  regionId?: string(name='RegionId', description='Region ID.', example='cn-shanghai', position='Query'),
}

model GetWordGroupResponseBody = {
  code?: string(name='Code', description='Status code, 00000 indicates success; others indicate failure.', example='00000'),
  groupName?: string(name='GroupName', description='Keyword group name.', example='testGroup'),
  httpStatusCode?: int32(name='HttpStatusCode', description='HTTP status code.', example='200'),
  message?: string(name='Message', description='If there is an error, returns the error message.', example='""'),
  requestId?: string(name='RequestId', description='Request ID.', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful.', example='True'),
  totalCount?: int32(name='TotalCount', description='Total count.', example='1'),
  wordInfoList?: [ 
    {
      label?: string(name='Label', description='Label.', example='Buss.'),
      word?: string(name='Word', description='Keyword.', example='Inv.'),
      wordId?: long(name='WordId', description='ID of the successfully added word.', example='1'),
    }
  ](name='WordInfoList', description='Keyword group list.'),
}

model GetWordGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWordGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetWordGroup  GetWordGroupRequest
  * @return GetWordGroupResponse
 */
async function getWordGroup(request: GetWordGroupRequest): GetWordGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetWordGroup', 'POST', '/', 'json', false, 'json', request);
}

model ListModelCategoryRequest {
  contentSafeImageSupported?: int32(name='ContentSafeImageSupported', example='False', position='Query'),
  contentSafeTextSupported?: int32(name='ContentSafeTextSupported', example='True', position='Query'),
  modelCategoryName?: string(name='ModelCategoryName', example='demo', position='Query'),
  modelSource?: string(name='ModelSource', example='1', position='Query'),
  promptAttackTextSupported?: int32(name='PromptAttackTextSupported', example='False', position='Query'),
  sensitiveTopicTextSupported?: int32(name='SensitiveTopicTextSupported', example='False', position='Query'),
}

model ListModelCategoryResponseBody = {
  code?: string(name='Code', example='00000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='""'),
  modelCategoryInfoList?: [ 
    {
      contentSafeImageSupported?: int32(name='ContentSafeImageSupported', example='False'),
      contentSafeTextSupported?: int32(name='ContentSafeTextSupported', example='True'),
      modelCategoryId?: long(name='ModelCategoryId', example='2'),
      modelCategoryName?: string(name='ModelCategoryName', example='Qwen2.5-3B-Intruct-PAI-Guard'),
      modelSource?: int32(name='ModelSource', example='1'),
      priority?: int32(name='Priority', example='12'),
      promptAttackTextSupported?: int32(name='PromptAttackTextSupported', example='False'),
      sensitiveTopicTextSupported?: int32(name='SensitiveTopicTextSupported', example='True'),
    }
  ](name='ModelCategoryInfoList'),
  requestId?: string(name='RequestId', description='Id of the request', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
}

model ListModelCategoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListModelCategoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListModelCategory  ListModelCategoryRequest
  * @return ListModelCategoryResponse
 */
async function listModelCategory(request: ListModelCategoryRequest): ListModelCategoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListModelCategory', 'POST', '/', 'json', false, 'json', request);
}

model ListModelInstanceRequest {
  easServiceName?: string(name='EasServiceName', example='rai_content_detection_model', position='Query'),
  isSidecarPolicy?: int32(name='IsSidecarPolicy', example='1', position='Query'),
  isSupportContentSafe?: int32(name='IsSupportContentSafe', example='True', position='Query'),
  isSupportPromptAttack?: int32(name='IsSupportPromptAttack', example='False', position='Query'),
  isSupportSensitiveTopic?: int32(name='IsSupportSensitiveTopic', example='True', position='Query'),
  modelSource?: string(name='ModelSource', example='1', position='Query'),
  order?: string(name='Order', example='asc', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  sortBy?: string(name='SortBy', example='GmtModified', position='Query'),
  workspaceId?: long(name='WorkspaceId', example='643168', position='Query'),
}

model ListModelInstanceResponseBody = {
  code?: string(name='Code', example='00000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='""'),
  modelInstanceInfoList?: [ 
    {
      easServiceName?: string(name='EasServiceName', example='torch_rank_v1'),
      gmtModified?: long(name='GmtModified', example='1749450490000'),
      isSupportContentSafe?: int32(name='IsSupportContentSafe', example='True'),
      isSupportImage?: boolean(name='IsSupportImage', example='False'),
      isSupportPromptAttack?: int32(name='IsSupportPromptAttack', example='False'),
      isSupportSensitiveTopic?: int32(name='IsSupportSensitiveTopic', example='True'),
      isSupportText?: boolean(name='IsSupportText', example='True'),
      modelInstanceId?: long(name='ModelInstanceId', example='123'),
      modelSource?: int32(name='ModelSource', example='1'),
      workspaceId?: long(name='WorkspaceId', example='608226'),
    }
  ](name='ModelInstanceInfoList'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', description='Id of the request', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListModelInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListModelInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListModelInstance  ListModelInstanceRequest
  * @return ListModelInstanceResponse
 */
async function listModelInstance(request: ListModelInstanceRequest): ListModelInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListModelInstance', 'POST', '/', 'json', false, 'json', request);
}

model ListPolicyRequest {
  isSidecarPolicy?: int32(name='IsSidecarPolicy', position='Query'),
  order?: string(name='Order', description='Sort order. The value range is as follows:

- asc (default): ascending

- desc: descending', example='asc', position='Query'),
  pageNumber?: int32(name='PageNumber', description='Page number.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='Page size, the maximum number of results returned per page.
Maximum limit: 100.', example='10', position='Query'),
  policyIdentifier?: string(name='PolicyIdentifier', description='Policy identifier.', example='x1bc5xgs4uhx', position='Query'),
  policyName?: string(name='PolicyName', description='Detection policy name.', example='testPolicy', position='Query'),
  regionId?: string(name='RegionId', description='Region ID.', example='cn-shanghai', position='Query'),
  sceneType?: int32(name='SceneType', position='Query'),
  sortBy?: string(name='SortBy', description='Sort field.', example='GmtModified', position='Query'),
  workspaceId?: long(name='WorkspaceId', description='Workspace ID.', example='62****', position='Query'),
}

model ListPolicyResponseBody = {
  code?: string(name='Code', description='Status code, 00000 indicates success; other values indicate failure.', example='00000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='HTTP status code description.', example='200'),
  message?: string(name='Message', description='If there is an error, returns the error message.', example='""'),
  pageNumber?: int32(name='PageNumber', description='Page number, consistent with the PageNumber in the request.', example='1'),
  pageSize?: int32(name='PageSize', description='Page size, the maximum number of results returned per page.', example='10'),
  policyInfoList?: [ 
    {
      gmtModified?: long(name='GmtModified', description='Modification time.', example='1731204769000'),
      isSidecarPolicy?: int32(name='IsSidecarPolicy'),
      policyId?: long(name='PolicyId', description='Tag policy ID.', example='16'),
      policyIdentifier?: string(name='PolicyIdentifier', description='Policy identifier.', example='x1bc5xgs4uhx'),
      policyName?: string(name='PolicyName', description='Permission policy name.', example='testPolicy'),
      sceneType?: int32(name='SceneType'),
    }
  ](name='PolicyInfoList', description='List of policy objects.'),
  requestId?: string(name='RequestId', description='Request ID.', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Possible values are:
- True: Call succeeded.
- False: Call failed.', example='True'),
  totalCount?: int32(name='TotalCount', description='Total count.', example='1'),
}

model ListPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPolicy  ListPolicyRequest
  * @return ListPolicyResponse
 */
async function listPolicy(request: ListPolicyRequest): ListPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPolicy', 'POST', '/', 'json', false, 'json', request);
}

model ListTopicRequest {
  order?: string(name='Order', example='asc', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  sortBy?: string(name='SortBy', example='GmtModified', position='Query'),
  topicName?: string(name='TopicName', example='client_exposure_logs', position='Query'),
  workspaceId?: long(name='WorkspaceId', example='643168', position='Query'),
}

model ListTopicResponseBody = {
  code?: string(name='Code', example='00000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='""'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
  topicInfoList?: [ 
    {
      gmtModified?: long(name='GmtModified', example='1597738932000'),
      policyInfoList?: [ 
        {
          policyId?: long(name='PolicyId', example='412'),
          policyIdentifier?: string(name='PolicyIdentifier', example='bqi1c3s99qx3'),
          policyName?: string(name='PolicyName'),
        }
      ](name='PolicyInfoList'),
      topicDefinition?: string(name='TopicDefinition'),
      topicId?: long(name='TopicId', example='216'),
      topicName?: string(name='TopicName'),
    }
  ](name='TopicInfoList'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListTopicResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTopicResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTopic  ListTopicRequest
  * @return ListTopicResponse
 */
async function listTopic(request: ListTopicRequest): ListTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTopic', 'POST', '/', 'json', false, 'json', request);
}

model ListWordGroupRequest {
  groupName?: string(name='GroupName', description='Keyword group name.', example='testGroup', position='Query'),
  order?: string(name='Order', description='When performing a paginated query, sort the specified field in ascending or descending order. Values are as follows:
* asc: Ascending.
* desc: Descending.', example='asc', position='Query'),
  pageNumber?: int32(name='PageNumber', description='Page number.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='Page size, the maximum number of results returned per page.
Maximum limit: 100.', example='10', position='Query'),
  regionId?: string(name='RegionId', description='Region ID.', example='cn-shanghai', position='Query'),
  sortBy?: string(name='SortBy', description='Sort field.', example='GmtModified', position='Query'),
  workspaceId?: long(name='WorkspaceId', description='Workspace ID.', example='620***', position='Query'),
}

model ListWordGroupResponseBody = {
  code?: string(name='Code', description='Status code, 00000 indicates success; other values indicate failure.', example='00000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='HTTP status code.', example='200'),
  message?: string(name='Message', description='If an error occurs, returns the error message.', example='""'),
  pageNumber?: int32(name='PageNumber', description='Page number.', example='1'),
  pageSize?: int32(name='PageSize', description='Page size, the maximum number of results returned per page.
Maximum limit: 100.', example='10'),
  requestId?: string(name='RequestId', description='Request ID.', example='BE2558EC-A9EA-5276-ADB5-107B09CF3D11'),
  success?: boolean(name='Success', description='Indicates whether the call was successful: true means the call was successful; false means the call failed.', example='True'),
  totalCount?: int32(name='TotalCount', description='Total count.', example='1'),
  wordGroupInfoList?: [ 
    {
      gmtModified?: long(name='GmtModified', description='Policy modification time.', example='1673578650000'),
      groupId?: long(name='GroupId', description='Keyword group ID.', example='16'),
      groupName?: string(name='GroupName', description='Keyword group name.', example='testGroup'),
      policyInfoList?: [ 
        {
          policyId?: long(name='PolicyId', description='Detection policy ID.', example='16'),
          policyIdentifier?: string(name='PolicyIdentifier', description='Policy identifier.', example='mai934jhuekf'),
          policyName?: string(name='PolicyName', description='Detection policy name.', example='testPoliy'),
        }
      ](name='PolicyInfoList', description='List of associated policy objects.'),
    }
  ](name='WordGroupInfoList', description='List of keyword group objects.'),
}

model ListWordGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWordGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListWordGroup  ListWordGroupRequest
  * @return ListWordGroupResponse
 */
async function listWordGroup(request: ListWordGroupRequest): ListWordGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListWordGroup', 'POST', '/', 'json', false, 'json', request);
}

model ModelInputContentAsyncDetectRequest {
  bodyData?: {
    content?: string(name='Content', description='1. The text content to be reviewed, with a maximum limit of 10000 characters (including English and Chinese).
2. Or the URL address of the image to be reviewed.', example='the content to be checked'),
  }(name='BodyData', description='Request object', shrink='json', position='Body'),
  policyIdentifier?: string(name='PolicyIdentifier', description='Policy ID', example='x1bc5xgs4uhx', position='Query'),
  regionId?: string(name='RegionId', description='Region ID.', example='cn-shanghai', position='Query'),
  sceneName?: string(name='SceneName', description='Scene name.', example='""', position='Query'),
  serviceName?: string(name='ServiceName', description='Service name', example='textDetection
imageDetection', position='Query'),
}

model ModelInputContentAsyncDetectResponseBody = {
  code?: string(name='Code', description='Result code, 00000 indicates success; others indicate failure.', example='00000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='Message', description='Error message', example='""'),
  requestId?: string(name='RequestId', description='Request ID', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', description='操作是否成功。true表示成功，false表示失败。', example='True'),
  taskId?: string(name='TaskId', description='Task ID.', example='5d85cd38-03b2-49fd-86b2-be85c4b13215'),
}

model ModelInputContentAsyncDetectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModelInputContentAsyncDetectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModelInputContentAsyncDetect  ModelInputContentAsyncDetectRequest
  * @return ModelInputContentAsyncDetectResponse
 */
async function modelInputContentAsyncDetect(request: ModelInputContentAsyncDetectRequest): ModelInputContentAsyncDetectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModelInputContentAsyncDetect', 'POST', '/', 'json', true, 'form', request);
}

model ModelInputContentSyncDetectRequest {
  bodyData?: {
    content?: string(name='Content', description='1. The text content to be checked, with a maximum limit of 10,000 characters (including English and Chinese).
2. Or the URL address of the image to be checked.', example='要检测的内容'),
  }(name='BodyData', description='Request object', shrink='json', position='Body'),
  policyIdentifier?: string(name='PolicyIdentifier', description='Policy Identifier', example='x1bc5xgs4uhx', position='Query'),
  regionId?: string(name='RegionId', description='Region ID.', example='cn-shanghai', position='Query'),
  sceneName?: string(name='SceneName', description='Scene name.', example='""', position='Query'),
  serviceName?: string(name='ServiceName', description='Service name', example='textDetection
imageDetection', position='Query'),
}

model ModelInputContentSyncDetectResponseBody = {
  code?: string(name='Code', description='Result code, 00000 indicates success; others indicate failure.', example='00000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='Message', description='Error message.', example='""'),
  requestId?: string(name='RequestId', description='Request ID', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  riskResult?: int32(name='RiskResult', description='0: No risk
1: Risk exists', example='0'),
  safeAnswer?: string(name='SafeAnswer'),
  success?: boolean(name='Success', description='Whether the operation was successful. true indicates success, false indicates failure.', example='True'),
  traceInfo?: {
    blockWord?: {
      blockWordGroupInfoList?: [ 
        {
          blockWordList?: [ 
            {
              word?: string(name='Word', description='Keyword', example='testWord'),
              wordLabel?: string(name='WordLabel', description='Label', example='testLabel'),
            }
          ](name='BlockWordList', description='List of keyword detection results'),
          groupName?: string(name='GroupName', description='Keyword group name', example='testGroup'),
        }
      ](name='BlockWordGroupInfoList', description='List of keyword detection result objects'),
      riskResult?: int32(name='RiskResult', description='0: No risk
1: Risk exists', example='0'),
    }(name='BlockWord', description='Detected keywords'),
    denyTopics?: {
      confidenceScore?: double(name='ConfidenceScore', description='Confidence score', example='0.0'),
      riskResult?: int32(name='RiskResult', description='0: No risk
1: Risk exists', example='1'),
      topicInfoList?: [ 
        {
          categoryType?: int32(name='CategoryType', description='0: Text
1: Image', example='0'),
          riskResult?: int32(name='RiskResult', description='0: No risk
1: Risk exists', example='0'),
          securityLevel?: int32(name='SecurityLevel', description='Security level
0: Low
1: Medium
2: High', example='0'),
          topicName?: string(name='TopicName', description='Topic name', example='Buss.'),
        }
      ](name='TopicInfoList', description='Sensitive topic list'),
    }(name='DenyTopics', description='Sensitive topic object list'),
    harmfulCategories?: {
      confidenceScore?: double(name='ConfidenceScore', description='Confidence score', example='0.0'),
      harmfulCategoryInfoList?: [ 
        {
          categoryLabel?: string(name='CategoryLabel', description='Category name', example='Morality'),
          categoryType?: int32(name='CategoryType', description='0: Text
1: Image', example='0'),
          riskResult?: int32(name='RiskResult', description='0: No risk
1: Risk exists', example='0'),
          securityLevel?: int32(name='SecurityLevel', description='Security level
0: Low
1: Medium
2: High', example='1'),
          subCategoryLabel?: string(name='SubCategoryLabel', description='Subcategory label', example='morality_ethics'),
        }
      ](name='HarmfulCategoryInfoList', description='List of harmful category objects'),
      riskResult?: int32(name='RiskResult', description='0: No risk
1: Risk exists', example='0'),
    }(name='HarmfulCategories', description='HarmfulCategories'),
    promptAttack?: {
      confidenceScore?: double(name='ConfidenceScore', description='Confidence score', example='0.0'),
      promptAttackInfo?: string(name='PromptAttackInfo', description='Prompt attack detection result object', example='Role Play'),
      promptAttackInfoList?: [ 
        {
          categoryLabel?: string(name='CategoryLabel', description='Category name', example='Role Play'),
          categoryType?: int32(name='CategoryType', description='0: Text
1: Image', example='0'),
          riskResult?: int32(name='RiskResult', description='0: No risk
1: Risk exists', example='0'),
          securityLevel?: int32(name='SecurityLevel', description='Security level
0: Low
1: Medium
2: High', example='1'),
        }
      ](name='PromptAttackInfoList', description='List of prompt attack objects'),
      riskResult?: int32(name='RiskResult', description='0: No risk
1: Risk exists', example='0'),
      securityLevel?: int32(name='SecurityLevel', description='Security level
0: Low
1: Medium
2: High', example='1'),
    }(name='PromptAttack', description='Prompt attack information'),
    sensitiveType?: {
      maskedContent?: string(name='MaskedContent'),
      riskResult?: int32(name='RiskResult'),
      sensitiveTypeInfoList?: [ 
        {
          actionType?: int32(name='ActionType'),
          maskedContent?: string(name='MaskedContent'),
          sensitiveCategory?: int32(name='SensitiveCategory'),
          sensitiveContent?: string(name='SensitiveContent'),
          sensitiveTypeName?: string(name='SensitiveTypeName'),
        }
      ](name='SensitiveTypeInfoList'),
    }(name='SensitiveType'),
  }(name='TraceInfo', description='Inspection result'),
}

model ModelInputContentSyncDetectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModelInputContentSyncDetectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModelInputContentSyncDetect  ModelInputContentSyncDetectRequest
  * @return ModelInputContentSyncDetectResponse
 */
async function modelInputContentSyncDetect(request: ModelInputContentSyncDetectRequest): ModelInputContentSyncDetectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModelInputContentSyncDetect', 'POST', '/', 'json', true, 'form', request);
}

model ModelOutputContentAsyncDetectRequest {
  bodyData?: {
    content?: string(name='Content', description='1. The text content to be reviewed, with a maximum limit of 10000 characters (including English and Chinese).
2. Or the URL address of the image to be reviewed.', example='the content to be checked'),
  }(name='BodyData', description='Request object', shrink='json', position='Body'),
  policyIdentifier?: string(name='PolicyIdentifier', description='Policy ID', example='x1bc5xgs4uhx', position='Query'),
  regionId?: string(name='RegionId', description='Region ID.', example='cn-shanghai', position='Query'),
  sceneName?: string(name='SceneName', description='Scene name.', example='""', position='Query'),
  serviceName?: string(name='ServiceName', description='Service name', example='textDetection
imageDetection', position='Query'),
}

model ModelOutputContentAsyncDetectResponseBody = {
  code?: string(name='Code', description='Status code, 00000 indicates success; others indicate failure.', example='00000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='Message', description='Error message', example='""'),
  requestId?: string(name='RequestId', description='Request ID', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', description='操作是否成功。true表示成功，false表示失败。', example='True'),
  taskId?: string(name='TaskId', description='Task ID.', example='5d85cd38-03b2-49fd-86b2-be85c4b13215'),
}

model ModelOutputContentAsyncDetectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModelOutputContentAsyncDetectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModelOutputContentAsyncDetect  ModelOutputContentAsyncDetectRequest
  * @return ModelOutputContentAsyncDetectResponse
 */
async function modelOutputContentAsyncDetect(request: ModelOutputContentAsyncDetectRequest): ModelOutputContentAsyncDetectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModelOutputContentAsyncDetect', 'POST', '/', 'json', true, 'form', request);
}

model ModelOutputContentSyncDetectRequest {
  bodyData?: {
    content?: string(name='Content', description='1. The text content to be reviewed, with a maximum limit of 10,000 characters (including English and Chinese).
2. Or the URL address of the image to be reviewed.', example='the content to be checked'),
  }(name='BodyData', description='Request object', shrink='json', position='Body'),
  policyIdentifier?: string(name='PolicyIdentifier', description='Policy ID', example='x1bc5xgs4uhx', position='Query'),
  regionId?: string(name='RegionId', description='Region ID.', example='cn-shanghai', position='Query'),
  sceneName?: string(name='SceneName', description='Scene name.', example='""', position='Query'),
  serviceName?: string(name='ServiceName', description='Service name', example='textDetection
imageDetection', position='Query'),
}

model ModelOutputContentSyncDetectResponseBody = {
  code?: string(name='Code', description='Status code, 00000 indicates success; others indicate failure.', example='00000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='Message', description='Error message.', example='""'),
  requestId?: string(name='RequestId', description='Request ID', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  riskInfo?: string(name='RiskInfo', description='Risk labels, separated by commas if multiple.', example='“”'),
  riskResult?: int32(name='RiskResult', description='0: No risk
1: Risk exists', example='0'),
  safeAnswer?: string(name='SafeAnswer'),
  success?: boolean(name='Success', description='操作是否成功。true表示成功，false表示失败。', example='True'),
  traceInfo?: {
    blockWord?: {
      blockWordGroupInfoList?: [ 
        {
          blockWordList?: [ 
            {
              word?: string(name='Word', description='Keyword', example='testWord'),
              wordLabel?: string(name='WordLabel', description='Label', example='testLabel'),
            }
          ](name='BlockWordList', description='List of keyword detection result objects'),
          groupName?: string(name='GroupName', description='Keyword group name', example='testGroup'),
        }
      ](name='BlockWordGroupInfoList', description='List of keyword detection result objects'),
      riskResult?: int32(name='RiskResult', description='0: No risk
1: Risk exists', example='0'),
    }(name='BlockWord', description='Detected keywords'),
    denyTopics?: {
      confidenceScore?: double(name='ConfidenceScore', description='Confidence score', example='0.0'),
      riskResult?: int32(name='RiskResult', description='0: No risk
1: Risk present', example='0'),
      topicInfoList?: [ 
        {
          categoryType?: int32(name='CategoryType', description='0: Text
1: Image', example='0'),
          riskResult?: int32(name='RiskResult', description='0: No risk
1: Risk present', example='1'),
          securityLevel?: int32(name='SecurityLevel', description='Security level
0: Low
1: Medium
2: High', example='0'),
          topicName?: string(name='TopicName', description='Topic name', example='Buss.'),
        }
      ](name='TopicInfoList', description='Sensitive topic list'),
    }(name='DenyTopics', description='Sensitive topic object list'),
    harmfulCategories?: {
      confidenceScore?: double(name='ConfidenceScore', description='Confidence score', example='0.0'),
      harmfulCategoryInfoList?: [ 
        {
          categoryLabel?: string(name='CategoryLabel', description='Category name', example='Morality'),
          categoryType?: int32(name='CategoryType', description='0: Text
1: Image', example='0'),
          riskResult?: int32(name='RiskResult', description='0: No risk
1: Risk exists', example='0'),
          securityLevel?: int32(name='SecurityLevel', description='Security level
0: Low
1: Medium
2: High', example='1'),
          subCategoryLabel?: string(name='SubCategoryLabel', description='Subcategory label', example='morality_ethics'),
        }
      ](name='HarmfulCategoryInfoList', description='List of harmful category objects'),
      riskResult?: int32(name='RiskResult', description='0: No risk
1: Risk exists', example='0'),
    }(name='HarmfulCategories', description='HarmfulCategories'),
    promptAttack?: {
      confidenceScore?: double(name='ConfidenceScore', description='Confidence score', example='0.0'),
      promptAttackInfo?: string(name='PromptAttackInfo', description='Prompt attack detection result object', example='Role Play'),
      promptAttackInfoList?: [ 
        {
          categoryLabel?: string(name='CategoryLabel', description='Category name', example='Role Play'),
          categoryType?: int32(name='CategoryType', description='0: Text
1: Image', example='0'),
          riskResult?: int32(name='RiskResult', description='0: No risk
1: Risk present', example='1'),
          securityLevel?: int32(name='SecurityLevel', description='Security level
0: Low
1: Medium
2: High', example='0'),
        }
      ](name='PromptAttackInfoList', description='List of prompt attacks'),
      riskResult?: int32(name='RiskResult', description='0: No risk
1: Risk exists', example='0'),
      securityLevel?: int32(name='SecurityLevel', description='Security level
0: Low
1: Medium
2: High', example='0'),
    }(name='PromptAttack', description='Prompt attack information'),
    sensitiveType?: {
      maskedContent?: string(name='MaskedContent'),
      riskResult?: int32(name='RiskResult'),
      sensitiveTypeInfoList?: [ 
        {
          actionType?: int32(name='ActionType'),
          maskedContent?: string(name='MaskedContent'),
          sensitiveCategory?: int32(name='SensitiveCategory'),
          sensitiveContent?: string(name='SensitiveContent'),
          sensitiveTypeName?: string(name='SensitiveTypeName'),
        }
      ](name='SensitiveTypeInfoList'),
    }(name='SensitiveType'),
  }(name='TraceInfo', description='Inspection result'),
}

model ModelOutputContentSyncDetectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModelOutputContentSyncDetectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModelOutputContentSyncDetect  ModelOutputContentSyncDetectRequest
  * @return ModelOutputContentSyncDetectResponse
 */
async function modelOutputContentSyncDetect(request: ModelOutputContentSyncDetectRequest): ModelOutputContentSyncDetectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModelOutputContentSyncDetect', 'POST', '/', 'json', true, 'form', request);
}

model RegisterAccountRequest {
  memo?: string(name='Memo', example='"user api register"', position='Query'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
}

model RegisterAccountResponseBody = {
  code?: string(name='Code', example='00000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='""'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
}

model RegisterAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RegisterAccountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RegisterAccount  RegisterAccountRequest
  * @return RegisterAccountResponse
 */
async function registerAccount(request: RegisterAccountRequest): RegisterAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RegisterAccount', 'POST', '/', 'json', false, 'json', request);
}

model UpdateModelInstanceRequest {
  description?: string(name='Description', example='vllm==0.9.0', position='Query'),
  easServiceId?: string(name='EasServiceId', example='eas-m-12345678', position='Query'),
  easServiceName?: string(name='EasServiceName', example='rai_content_detection_model', position='Query'),
  modelCallName?: string(name='ModelCallName', example='demo', position='Query'),
  modelCategoryId?: long(name='ModelCategoryId', example='1', position='Query'),
  modelInstanceId?: long(name='ModelInstanceId', example='123', position='Query'),
  modelToken?: string(name='ModelToken', example='MzJiMDI5MDliODc0MTlkYmI0ZDhlYmExYjczYTIyZTE3Zm********', position='Query'),
  modelUrl?: string(name='ModelUrl', example='http://12345*****.cn-shanghai.aliyuncs.com/api/predict/echo', position='Query'),
  modelVpcUrl?: string(name='ModelVpcUrl', example='http://12345*****.vpc.cn-shanghai.aliyuncs.com/api/predict/demo', position='Query'),
  workspaceId?: long(name='WorkspaceId', example='608226', position='Query'),
}

model UpdateModelInstanceResponseBody = {
  code?: string(name='Code', example='00000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='""'),
  modelInstanceId?: long(name='ModelInstanceId', example='1'),
  requestId?: string(name='RequestId', description='Id of the request', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
}

model UpdateModelInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateModelInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateModelInstance  UpdateModelInstanceRequest
  * @return UpdateModelInstanceResponse
 */
async function updateModelInstance(request: UpdateModelInstanceRequest): UpdateModelInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateModelInstance', 'POST', '/', 'json', false, 'json', request);
}

model UpdatePolicyRequest {
  contentSafeModelInstanceId?: long(name='ContentSafeModelInstanceId', position='Query'),
  enableSensitiveInputCheck?: int32(name='EnableSensitiveInputCheck', position='Query'),
  enableSensitiveOutputCheck?: int32(name='EnableSensitiveOutputCheck', position='Query'),
  harmfulCategoryConfigInfoList?: [ 
    {
      categoryConfigId?: long(name='CategoryConfigId', description='Harmful category configuration ID', example='1'),
      categoryId?: long(name='CategoryId'),
      categoryLabel?: string(name='CategoryLabel', description='Category name', example='Morality'),
      categoryType?: int32(name='CategoryType', description='0: Text
1: Image', example='0'),
      inputOutputType?: int32(name='InputOutputType', description='Model input/output type
0: Input
1: Output', example='0'),
      isEnabled?: int32(name='IsEnabled', description='Prompt attack configuration switch
0: Off
1: On', example='1'),
      securityLevel?: int32(name='SecurityLevel', description='Security level
0: Low
1: Medium
2: High', example='2'),
    }
  ](name='HarmfulCategoryConfigInfoList', description='List of harmful category configurations', shrink='json', position='Query'),
  inputSafeAnswer?: string(name='InputSafeAnswer', position='Query'),
  inputSafeAnswerSwitch?: int32(name='InputSafeAnswerSwitch', position='Query'),
  isSidecarPolicy?: int32(name='IsSidecarPolicy', position='Query'),
  outputSafeAnswer?: string(name='OutputSafeAnswer', position='Query'),
  outputSafeAnswerSwitch?: int32(name='OutputSafeAnswerSwitch', position='Query'),
  policyId?: long(name='PolicyId', description='Detection policy ID', example='16', position='Query'),
  policyName?: string(name='PolicyName', description='Detection policy name.', example='testPolicy', position='Query'),
  promptAttackInfo?: {
    isEnabled?: int32(name='IsEnabled', description='Prompt attack configuration switch
0: Off
1: On', example='1'),
    securityLevel?: int32(name='SecurityLevel', description='Security level
0: Low
1: Medium
2: High', example='2'),
  }(name='PromptAttackInfo', description='Prompt attack detection result object', shrink='json', position='Query'),
  promptAttackInfoList?: [ 
    {
      categoryConfigId?: long(name='CategoryConfigId', description='Harmful category configuration ID', example='1'),
      categoryId?: long(name='CategoryId'),
      categoryLabel?: string(name='CategoryLabel', description='Category name', example='Role Play'),
      isEnabled?: int32(name='IsEnabled', description='Prompt attack configuration switch
0: Off
1: On', example='1'),
      securityLevel?: int32(name='SecurityLevel', description='Security level
0: Low
1: Medium
2: High', example='1'),
    }
  ](name='PromptAttackInfoList', description='List of prompt attacks', shrink='json', position='Query'),
  promptAttackModelInstanceId?: long(name='PromptAttackModelInstanceId', position='Query'),
  regionId?: string(name='RegionId', description='Region ID.', example='cn-shanghai', position='Query'),
  regularExpressList?: [ 
    {
      actionType?: int32(name='ActionType'),
      regularExpress?: string(name='RegularExpress'),
      regularExpressName?: string(name='RegularExpressName'),
    }
  ](name='RegularExpressList', shrink='json', position='Query'),
  sceneType?: int32(name='SceneType', position='Query'),
  sensitiveConfigList?: [ 
    {
      actionType?: int32(name='ActionType'),
      isEnabled?: int32(name='IsEnabled'),
      sensitiveConfigId?: long(name='SensitiveConfigId'),
    }
  ](name='SensitiveConfigList', shrink='json', position='Query'),
  sensitiveTopicList?: [ 
    {
      categoryType?: int32(name='CategoryType'),
      securityLevel?: int32(name='SecurityLevel'),
      topicDefinition?: string(name='TopicDefinition'),
      topicExampleInfoList?: [ 
        {
          content?: string(name='Content'),
          exampleType?: int32(name='ExampleType'),
        }
      ](name='TopicExampleInfoList'),
      topicName?: string(name='TopicName'),
    }
  ](name='SensitiveTopicList', shrink='json', position='Query'),
  sensitiveTopicModelInstanceId?: long(name='SensitiveTopicModelInstanceId', position='Query'),
  sensitiveWordList?: [ 
    {
      label?: string(name='Label'),
      word?: string(name='Word'),
    }
  ](name='SensitiveWordList', shrink='json', position='Query'),
  topicConfigInfoList?: [ 
    {
      categoryType?: int32(name='CategoryType', description='0: Text
1: Image', example='0'),
      inputOutputType?: int32(name='InputOutputType', description='Model input/output type
0: Input
1: Output', example='0'),
      securityLevel?: int32(name='SecurityLevel', description='Security level
0: Low
1: Medium
2: High', example='1'),
      topicId?: long(name='TopicId', description='Sensitive topic ID', example='3'),
      topicName?: string(name='TopicName', description='Topic name', example='Buss.'),
    }
  ](name='TopicConfigInfoList', description='List of sensitive topics', shrink='json', position='Query'),
  wordGroupInfoList?: [ 
    {
      groupId?: long(name='GroupId', description='Keyword group ID.', example='5fa285a60a9342e097cb7a3491ec00cc'),
      groupName?: string(name='GroupName', description='Keyword group name', example='testGroup'),
      inputOutputType?: int32(name='InputOutputType', description='Model input/output type
0: Input
1: Output', example='0'),
    }
  ](name='WordGroupInfoList', description='List of keyword group objects', shrink='json', position='Query'),
  workspaceId?: long(name='WorkspaceId', position='Query'),
}

model UpdatePolicyResponseBody = {
  code?: string(name='Code', description='Status code, 00000 indicates success; others indicate failure.', example='00000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='HTTP status code.', example='200'),
  message?: string(name='Message', description='Return message.', example='""'),
  requestId?: string(name='RequestId', description='Request ID', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', description='Whether the operation was successful. true indicates success, false indicates failure.', example='True'),
}

model UpdatePolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdatePolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdatePolicy  UpdatePolicyRequest
  * @return UpdatePolicyResponse
 */
async function updatePolicy(request: UpdatePolicyRequest): UpdatePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdatePolicy', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTopicRequest {
  bodyData?: {
    topicExampleInfoList?: [ 
      {
        content?: string(name='Content'),
        exampleType?: int32(name='ExampleType', example='0'),
      }
    ](name='TopicExampleInfoList'),
  }(name='BodyData', shrink='json', position='Body'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  topicDefinition?: string(name='TopicDefinition', position='Query'),
  topicId?: long(name='TopicId', example='216', position='Query'),
  topicName?: string(name='TopicName', position='Query'),
}

model UpdateTopicResponseBody = {
  code?: string(name='Code', example='00000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='""'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****F68692'),
  success?: boolean(name='Success', example='True'),
}

model UpdateTopicResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTopicResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateTopic  UpdateTopicRequest
  * @return UpdateTopicResponse
 */
async function updateTopic(request: UpdateTopicRequest): UpdateTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTopic', 'POST', '/', 'json', true, 'form', request);
}

model UpdateWordGroupRequest {
  bodyData?: {
    wordInfoList?: [ 
      {
        label?: string(name='Label', description='Label.', example='Buss.'),
        word?: string(name='Word', description='Keyword.', example='Inv.'),
      }
    ](name='WordInfoList', description='List of keyword groups.'),
  }(name='BodyData', description='Request object.', shrink='json', position='Body'),
  commit?: boolean(name='Commit', description='Whether to commit.
false: Not actually saved, only checked
true: Commit and save', example='true', position='Query'),
  groupId?: long(name='GroupId', description='Keyword group ID.', example='1', position='Query'),
  groupName?: string(name='GroupName', description='Keyword group name.', example='testGroup', position='Query'),
  regionId?: string(name='RegionId', description='Region ID.', example='cn-shanghai', position='Query'),
  wordInfoListModified?: boolean(name='WordInfoListModified', description='Whether the keyword information has been modified.', example='true', position='Query'),
}

model UpdateWordGroupResponseBody = {
  code?: string(name='Code', description='Status code, 00000 indicates success; others indicate failure.', example='00000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='HTTP status code.', example='200'),
  message?: string(name='Message', description='If there is an error, return the error message.', example='""'),
  requestId?: string(name='RequestId', description='Request ID.', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', description='Whether it was successful.', example='True'),
  wordErrorInfoList?: [ 
    {
      errorMessage?: string(name='ErrorMessage', description='Error message description.', example='Keyword can not be empty'),
      errorStatus?: int32(name='ErrorStatus', description='Error status information.', example='1'),
      index?: long(name='Index', description='Position of the error information in the array.', example='1'),
      label?: string(name='Label', description='Label.', example='Buss.'),
      word?: string(name='Word', description='Keyword.', example='Inv.'),
    }
  ](name='WordErrorInfoList', description='List of error information.'),
}

model UpdateWordGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWordGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateWordGroup  UpdateWordGroupRequest
  * @return UpdateWordGroupResponse
 */
async function updateWordGroup(request: UpdateWordGroupRequest): UpdateWordGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateWordGroup', 'POST', '/', 'json', true, 'form', request);
}

