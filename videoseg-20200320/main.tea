import OSS;
import OpenPlatform;
import RPCUtil;
import OSSUtil;
import Util;
import Credential;
import FileForm;

type @endpoint = string
type @regionId = string
type @protocol = string
type @userAgent = string
type @endpointType = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @openPlatformEndpoint = string
type @credential = Credential

model Config {
  accessKeyId?: string,
  accessKeySecret?: string,
  type?: string,
  securityToken?: string,
  endpoint: string,
  protocol?: string,
  regionId: string,
  userAgent?: string,
  readTimeout?: number,
  connectTimeout?: number,
  httpProxy?: string,
  httpsProxy?: string,
  noProxy?: string,
  socks5Proxy?: string,
  socks5NetWork?: string,
  maxIdleConns?: number,
  endpointType?: string,
  openPlatformEndpoint?: string,
}

init(config: Config){
  if (Util.isUnset(config)) {
    throw {
      name = "ParameterMissing",
      message = "'config' can not be unset"
    };
  }

  if (Util.empty(config.regionId)) {
    throw {
      name = "ParameterMissing",
      message = "'config.regionId' can not be empty"
    };
  }

  if (Util.empty(config.endpoint)) {
    throw {
      name = "ParameterMissing",
      message = "'config.endpoint' can not be empty"
    };
  }

  if (Util.empty(config.type)) {
    config.type = 'access_key';
  }
  var credentialConfig = new Credential.Config{
    accessKeyId =  config.accessKeyId,
    type = config.type,
    accessKeySecret =  config.accessKeySecret,
    securityToken = config.securityToken,
  };
  @credential = new Credential(credentialConfig);
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @regionId = config.regionId;
  @userAgent = config.userAgent;
  @readTimeout = config.readTimeout;
  @connectTimeout = config.connectTimeout;
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = config.maxIdleConns;
  @endpointType = config.endpointType;
  @openPlatformEndpoint = config.openPlatformEndpoint;
}

api _request(action: string, protocol: string, method: string, authType: string, query: object, body: object, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = '/';
  __request.query = RPCUtil.query({
    Action = action,
    Format = 'json',
    RegionId = @regionId,
    Timestamp = RPCUtil.getTimestamp(),
    Version = '2020-03-20',
    SignatureNonce = Util.getNonce(),
    ...query,
  });
  if (!Util.isUnset(body)) {
    var tmp = Util.anyifyMapValue(RPCUtil.query(body));
    __request.body = Util.toFormString(tmp);
  }
  __request.headers = {
    host = RPCUtil.getHost('videoseg', @regionId, @endpoint),
    user-agent = getUserAgent(),
  };
  if (!Util.equalString(authType, 'Anonymous')) {
    var accessKeyId = getAccessKeyId();
    var accessKeySecret = getAccessKeySecret();
    __request.query.SignatureMethod = 'HMAC-SHA1';
    __request.query.SignatureVersion = '1.0';
    __request.query.AccessKeyId = accessKeyId;
    __request.query.Signature = RPCUtil.getSignature(__request, accessKeySecret);
  }
} returns {
  var obj = Util.readAsJSON(__response.body);
  var res = Util.assertAsMap(obj);
  if (Util.is4xx(__response.statusCode) || Util.is5xx(__response.statusCode)) {
  throw {
      message = res.Message,
      data = res,
      code = res.Code,
    }
  }
  return res;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

model SegmentVideoBodyRequest = {
  videoUrl: string(name='VideoUrl', description='videoUrl'),
}

model SegmentVideoBodyResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    videoUrl: string(name='VideoUrl', description='videoUrl'),
  }(name='Data', description='data'),
}

async function segmentVideoBody(request: SegmentVideoBodyRequest, runtime: Util.RuntimeOptions): SegmentVideoBodyResponse {
  return _request('SegmentVideoBody', 'HTTPS', 'POST', 'AK', null, request, runtime);
}

model SegmentVideoBodyAdvanceRequest = {
  videoUrlObject: readable(description='VideoUrlObject', name='VideoUrlObject'),
}

async function segmentVideoBodyAdvance(request: SegmentVideoBodyAdvanceRequest, runtime: Util.RuntimeOptions): SegmentVideoBodyResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new OpenPlatform.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'videoseg',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.videoUrlObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var segmentVideoBodyreq = new SegmentVideoBodyRequest{};
  RPCUtil.convert(request, segmentVideoBodyreq);
  segmentVideoBodyreq.videoUrl = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var segmentVideoBodyResp = segmentVideoBody(segmentVideoBodyreq, runtime);
  return segmentVideoBodyResp;
}

model GetAsyncJobResultRequest = {
  jobId: string(name='JobId', description='jobId'),
}

model GetAsyncJobResultResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    jobId: string(name='JobId', description='jobId'),
    status: string(name='Status', description='status'),
    result: string(name='Result', description='result'),
    errorCode: string(name='ErrorCode', description='errorCode'),
    errorMessage: string(name='ErrorMessage', description='errorMessage'),
  }(name='Data', description='data'),
}

async function getAsyncJobResult(request: GetAsyncJobResultRequest, runtime: Util.RuntimeOptions): GetAsyncJobResultResponse {
  return _request('GetAsyncJobResult', 'HTTPS', 'POST', 'AK', null, request, runtime);
}

function getUserAgent(): string {
  var userAgent = Util.getUserAgent(@userAgent);
  return userAgent;
}

async function getAccessKeyId(): string{
  if (Util.isUnset(@credential)) {
    return '';
  }
  var accessKeyId = @credential.getAccessKeyId();
  return accessKeyId;
}

async function getAccessKeySecret(): string{
  if (Util.isUnset(@credential)) {
    return '';
  }
  var secret = @credential.getAccessKeySecret();
  return secret;
}

