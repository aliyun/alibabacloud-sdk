/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Ft';
  @version = '2018-07-13';
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-2-pop = 'ft.aliyuncs.com',
    ap-south-1 = 'ft.aliyuncs.com',
    ap-southeast-1 = 'ft.aliyuncs.com',
    ap-southeast-2 = 'ft.aliyuncs.com',
    ap-southeast-3 = 'ft.aliyuncs.com',
    ap-southeast-5 = 'ft.aliyuncs.com',
    cn-beijing = 'ft.aliyuncs.com',
    cn-beijing-finance-1 = 'ft.aliyuncs.com',
    cn-beijing-finance-pop = 'ft.aliyuncs.com',
    cn-beijing-gov-1 = 'ft.aliyuncs.com',
    cn-beijing-nu16-b01 = 'ft.aliyuncs.com',
    cn-chengdu = 'ft.aliyuncs.com',
    cn-edge-1 = 'ft.aliyuncs.com',
    cn-fujian = 'ft.aliyuncs.com',
    cn-haidian-cm12-c01 = 'ft.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'ft.aliyuncs.com',
    cn-hangzhou-finance = 'ft.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'ft.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'ft.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'ft.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'ft.aliyuncs.com',
    cn-hangzhou-test-306 = 'ft.aliyuncs.com',
    cn-hongkong-finance-pop = 'ft.aliyuncs.com',
    cn-huhehaote = 'ft.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'ft.aliyuncs.com',
    cn-qingdao = 'ft.aliyuncs.com',
    cn-qingdao-nebula = 'ft.aliyuncs.com',
    cn-shanghai-et15-b01 = 'ft.aliyuncs.com',
    cn-shanghai-et2-b01 = 'ft.aliyuncs.com',
    cn-shanghai-finance-1 = 'ft.aliyuncs.com',
    cn-shanghai-inner = 'ft.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'ft.aliyuncs.com',
    cn-shenzhen-finance-1 = 'ft.aliyuncs.com',
    cn-shenzhen-inner = 'ft.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'ft.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'ft.aliyuncs.com',
    cn-wuhan = 'ft.aliyuncs.com',
    cn-wulanchabu = 'ft.aliyuncs.com',
    cn-yushanfang = 'ft.aliyuncs.com',
    cn-zhangbei = 'ft.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'ft.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'ft.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'ft.aliyuncs.com',
    eu-central-1 = 'ft.aliyuncs.com',
    eu-west-1 = 'ft.aliyuncs.com',
    eu-west-1-oxs = 'ft.aliyuncs.com',
    me-east-1 = 'ft.aliyuncs.com',
    rus-west-1-pop = 'ft.aliyuncs.com',
    us-west-1 = 'ft.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model BatchAuditTest01Request {
  batchAuditTest01?: string(name='BatchAuditTest01', position='Query'),
  demo01?: string(name='Demo01', position='Query'),
  name?: string(name='Name', position='Query'),
  test010101?: boolean(name='Test010101', position='Body'),
}

model BatchAuditTest01ResponseBody = {
  demo01?: {
    demo011?: {
      demo011?: [ 
      {
        demo0111?: string(name='Demo0111'),
      }
    ](name='Demo011')
    }(name='Demo011'),
  }(name='Demo01'),
  name?: string(name='Name'),
  requestId?: string(name='RequestId'),
}

model BatchAuditTest01Response = {
  headers: map[string]string(name='headers'),
  body: BatchAuditTest01ResponseBody(name='body'),
}

async function batchAuditTest01(request: BatchAuditTest01Request): BatchAuditTest01Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchAuditTest01', 'POST', '/', 'json', true, 'form', request);
}

model FTApiAliasApiRequest {
  name?: string(name='Name', position='Query'),
}

model FTApiAliasApiResponseBody = {
  name?: string(name='Name'),
  requestId?: string(name='RequestId'),
}

model FTApiAliasApiResponse = {
  headers: map[string]string(name='headers'),
  body: FTApiAliasApiResponseBody(name='body'),
}

async function fTApiAliasApi(request: FTApiAliasApiRequest): FTApiAliasApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FTApiAliasApi', 'POST', '/', 'json', false, 'json', request);
}

model FtDynamicAddressDubboRequest {
  intValue?: int32(name='IntValue', position='Query'),
  stringValue?: string(name='StringValue', position='Query'),
}

model FtDynamicAddressDubboResponseBody = {
  intValue?: int32(name='IntValue'),
  requestId?: string(name='RequestId'),
  stringValue?: string(name='StringValue'),
}

model FtDynamicAddressDubboResponse = {
  headers: map[string]string(name='headers'),
  body: FtDynamicAddressDubboResponseBody(name='body'),
}

async function ftDynamicAddressDubbo(request: FtDynamicAddressDubboRequest): FtDynamicAddressDubboResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FtDynamicAddressDubbo', 'POST', '/', 'json', false, 'json', request);
}

model FtDynamicAddressHsfRequest {
}

model FtDynamicAddressHsfResponseBody = {
  requestId?: string(name='RequestId'),
}

model FtDynamicAddressHsfResponse = {
  headers: map[string]string(name='headers'),
  body: FtDynamicAddressHsfResponseBody(name='body'),
}

async function ftDynamicAddressHsf(request: FtDynamicAddressHsfRequest): FtDynamicAddressHsfResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FtDynamicAddressHsf', 'POST', '/', 'json', false, 'json', request);
}

model FtDynamicAddressHttpVpcRequest {
  booleanParam?: boolean(name='BooleanParam', position='Query'),
  defaultValue?: map[string]any(name='DefaultValue', shrink='json', position='Query'),
  otherParam?: map[string]any(name='OtherParam', shrink='json', position='Query'),
  p1?: string(name='P1', position='Query'),
  stringValue?: map[string]any(name='StringValue', shrink='json', position='Query'),
}

model FtDynamicAddressHttpVpcResponseBody = {
  params?: string(name='Params'),
  serviceRpcSign?: string(name='ServiceRpcSign'),
}

model FtDynamicAddressHttpVpcResponse = {
  headers: map[string]string(name='headers'),
  body: FtDynamicAddressHttpVpcResponseBody(name='body'),
}

async function ftDynamicAddressHttpVpc(request: FtDynamicAddressHttpVpcRequest): FtDynamicAddressHttpVpcResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FtDynamicAddressHttpVpc', 'POST', '/', 'json', false, 'json', request);
}

model FtEagleEyeRequest {
  name?: string(name='Name', position='Query'),
}

model FtEagleEyeResponseBody = {
  name?: string(name='Name'),
  requestId?: string(name='RequestId'),
  eagleEyeTraceId?: string(name='eagleEyeTraceId'),
}

model FtEagleEyeResponse = {
  headers: map[string]string(name='headers'),
  body: FtEagleEyeResponseBody(name='body'),
}

async function ftEagleEye(request: FtEagleEyeRequest): FtEagleEyeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FtEagleEye', 'POST', '/', 'json', false, 'json', request);
}

model FtFlowSpecialRequest {
  name?: string(name='Name', position='Query'),
}

model FtFlowSpecialResponseBody = {
  name?: string(name='Name'),
  requestId?: string(name='RequestId'),
}

model FtFlowSpecialResponse = {
  headers: map[string]string(name='headers'),
  body: FtFlowSpecialResponseBody(name='body'),
}

async function ftFlowSpecial(request: FtFlowSpecialRequest): FtFlowSpecialResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FtFlowSpecial', 'POST', '/', 'json', false, 'json', request);
}

model FtGatedLaunchPolicy4Request {
  isGatedLaunch?: string(name='IsGatedLaunch', position='Query'),
}

model FtGatedLaunchPolicy4ResponseBody = {
  isGatedLaunch?: string(name='IsGatedLaunch'),
  requestId?: string(name='RequestId'),
}

model FtGatedLaunchPolicy4Response = {
  headers: map[string]string(name='headers'),
  body: FtGatedLaunchPolicy4ResponseBody(name='body'),
}

async function ftGatedLaunchPolicy4(request: FtGatedLaunchPolicy4Request): FtGatedLaunchPolicy4Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FtGatedLaunchPolicy4', 'POST', '/', 'json', false, 'json', request);
}

model FtIpFlowControlRequest {
  name?: string(name='Name', position='Query'),
}

model FtIpFlowControlResponseBody = {
  name?: string(name='Name'),
  requestId?: string(name='RequestId'),
}

model FtIpFlowControlResponse = {
  headers: map[string]string(name='headers'),
  body: FtIpFlowControlResponseBody(name='body'),
}

async function ftIpFlowControl(request: FtIpFlowControlRequest): FtIpFlowControlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FtIpFlowControl', 'POST', '/', 'json', false, 'json', request);
}

model FtParamListRequest {
  disk?: [ 
    {
      size?: [ string ](name='Size'),
      type?: [ string ](name='Type'),
    }
  ](name='Disk', position='Query'),
  name?: string(name='Name', position='Query'),
}

model FtParamListResponseBody = {
  name?: string(name='Name'),
  requestId?: string(name='RequestId'),
}

model FtParamListResponse = {
  headers: map[string]string(name='headers'),
  body: FtParamListResponseBody(name='body'),
}

async function ftParamList(request: FtParamListRequest): FtParamListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FtParamList', 'POST', '/', 'json', false, 'json', request);
}

model TestFlowStrategy01Request {
  names?: map[string]any(name='Names', shrink='json', position='Body'),
}

model TestFlowStrategy01ResponseBody = {
  list?: [ string ](name='List'),
  names?: [ string ](name='Names'),
  requestId?: string(name='RequestId'),
}

model TestFlowStrategy01Response = {
  headers: map[string]string(name='headers'),
  body: TestFlowStrategy01ResponseBody(name='body'),
}

async function testFlowStrategy01(request: TestFlowStrategy01Request): TestFlowStrategy01Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TestFlowStrategy01', 'PUT', '/', 'json', true, 'form', request);
}

model TestHttpApiRequest {
  booleanParam?: boolean(name='BooleanParam', position='Query'),
  defaultValue?: map[string]any(name='DefaultValue', shrink='json', position='Query'),
  otherParam?: map[string]any(name='OtherParam', shrink='json', position='Query'),
  stringValue?: map[string]any(name='StringValue', shrink='json', position='Query'),
}

model TestHttpApiResponseBody = {
  params?: string(name='Params'),
  serviceRpcSign?: string(name='ServiceRpcSign'),
}

model TestHttpApiResponse = {
  headers: map[string]string(name='headers'),
  body: TestHttpApiResponseBody(name='body'),
}

async function testHttpApi(request: TestHttpApiRequest): TestHttpApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TestHttpApi', 'POST', '/', 'json', false, 'json', request);
}

