/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @signatureAlgorithm = 'v2';
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-2-pop = 'ft.aliyuncs.com',
    ap-south-1 = 'ft.aliyuncs.com',
    ap-southeast-1 = 'ft.aliyuncs.com',
    ap-southeast-2 = 'ft.aliyuncs.com',
    ap-southeast-3 = 'ft.aliyuncs.com',
    ap-southeast-5 = 'ft.aliyuncs.com',
    cn-beijing = 'ft.aliyuncs.com',
    cn-beijing-finance-1 = 'ft.aliyuncs.com',
    cn-beijing-finance-pop = 'ft.aliyuncs.com',
    cn-beijing-gov-1 = 'ft.aliyuncs.com',
    cn-beijing-nu16-b01 = 'ft.aliyuncs.com',
    cn-chengdu = 'ft.aliyuncs.com',
    cn-edge-1 = 'ft.aliyuncs.com',
    cn-fujian = 'ft.aliyuncs.com',
    cn-haidian-cm12-c01 = 'ft.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'ft.aliyuncs.com',
    cn-hangzhou-finance = 'ft.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'ft.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'ft.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'ft.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'ft.aliyuncs.com',
    cn-hangzhou-test-306 = 'ft.aliyuncs.com',
    cn-hongkong-finance-pop = 'ft.aliyuncs.com',
    cn-huhehaote = 'ft.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'ft.aliyuncs.com',
    cn-qingdao = 'ft.aliyuncs.com',
    cn-qingdao-nebula = 'ft.aliyuncs.com',
    cn-shanghai-et15-b01 = 'ft.aliyuncs.com',
    cn-shanghai-et2-b01 = 'ft.aliyuncs.com',
    cn-shanghai-finance-1 = 'ft.aliyuncs.com',
    cn-shanghai-inner = 'ft.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'ft.aliyuncs.com',
    cn-shenzhen-finance-1 = 'ft.aliyuncs.com',
    cn-shenzhen-inner = 'ft.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'ft.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'ft.aliyuncs.com',
    cn-wuhan = 'ft.aliyuncs.com',
    cn-wulanchabu = 'ft.aliyuncs.com',
    cn-yushanfang = 'ft.aliyuncs.com',
    cn-zhangbei = 'ft.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'ft.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'ft.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'ft.aliyuncs.com',
    eu-central-1 = 'ft.aliyuncs.com',
    eu-west-1 = 'ft.aliyuncs.com',
    eu-west-1-oxs = 'ft.aliyuncs.com',
    me-east-1 = 'ft.aliyuncs.com',
    rus-west-1-pop = 'ft.aliyuncs.com',
    us-west-1 = 'ft.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('ft', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model BatchAuditTest01Request {
  batchAuditTest01?: string(name='BatchAuditTest01'),
  demo01?: string(name='Demo01'),
  name?: string(name='Name'),
  test010101?: boolean(name='Test010101'),
}

model BatchAuditTest01ResponseBody = {
  demo01?: {
    demo011?: {
      demo011?: [ 
      {
        demo0111?: string(name='Demo0111'),
      }
    ](name='Demo011')
    }(name='Demo011'),
  }(name='Demo01'),
  name?: string(name='Name'),
  requestId?: string(name='RequestId'),
}

model BatchAuditTest01Response = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchAuditTest01ResponseBody(name='body'),
}

async function batchAuditTest01WithOptions(request: BatchAuditTest01Request, runtime: Util.RuntimeOptions): BatchAuditTest01Response {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.batchAuditTest01)) {
    query['BatchAuditTest01'] = request.batchAuditTest01;
  }
  if (!Util.isUnset(request.demo01)) {
    query['Demo01'] = request.demo01;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.test010101)) {
    body['Test010101'] = request.test010101;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchAuditTest01',
    version = '2018-07-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchAuditTest01(request: BatchAuditTest01Request): BatchAuditTest01Response {
  var runtime = new Util.RuntimeOptions{};
  return batchAuditTest01WithOptions(request, runtime);
}

model FTApiAliasApiRequest {
  name?: string(name='Name'),
}

model FTApiAliasApiResponseBody = {
  name?: string(name='Name'),
  requestId?: string(name='RequestId'),
}

model FTApiAliasApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FTApiAliasApiResponseBody(name='body'),
}

async function fTApiAliasApiWithOptions(request: FTApiAliasApiRequest, runtime: Util.RuntimeOptions): FTApiAliasApiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FTApiAliasApi',
    version = '2018-07-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function fTApiAliasApi(request: FTApiAliasApiRequest): FTApiAliasApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return fTApiAliasApiWithOptions(request, runtime);
}

model FtDynamicAddressDubboRequest {
  intValue?: int32(name='IntValue'),
  stringValue?: string(name='StringValue'),
}

model FtDynamicAddressDubboResponseBody = {
  intValue?: int32(name='IntValue'),
  requestId?: string(name='RequestId'),
  stringValue?: string(name='StringValue'),
}

model FtDynamicAddressDubboResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FtDynamicAddressDubboResponseBody(name='body'),
}

async function ftDynamicAddressDubboWithOptions(request: FtDynamicAddressDubboRequest, runtime: Util.RuntimeOptions): FtDynamicAddressDubboResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.intValue)) {
    query['IntValue'] = request.intValue;
  }
  if (!Util.isUnset(request.stringValue)) {
    query['StringValue'] = request.stringValue;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FtDynamicAddressDubbo',
    version = '2018-07-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function ftDynamicAddressDubbo(request: FtDynamicAddressDubboRequest): FtDynamicAddressDubboResponse {
  var runtime = new Util.RuntimeOptions{};
  return ftDynamicAddressDubboWithOptions(request, runtime);
}

model FtDynamicAddressHsfResponseBody = {
  requestId?: string(name='RequestId'),
}

model FtDynamicAddressHsfResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FtDynamicAddressHsfResponseBody(name='body'),
}

async function ftDynamicAddressHsfWithOptions(runtime: Util.RuntimeOptions): FtDynamicAddressHsfResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'FtDynamicAddressHsf',
    version = '2018-07-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function ftDynamicAddressHsf(): FtDynamicAddressHsfResponse {
  var runtime = new Util.RuntimeOptions{};
  return ftDynamicAddressHsfWithOptions(runtime);
}

model FtDynamicAddressHttpVpcRequest {
  booleanParam?: boolean(name='BooleanParam'),
  defaultValue?: map[string]any(name='DefaultValue'),
  otherParam?: map[string]any(name='OtherParam'),
  p1?: string(name='P1'),
  stringValue?: map[string]any(name='StringValue'),
}

model FtDynamicAddressHttpVpcShrinkRequest {
  booleanParam?: boolean(name='BooleanParam'),
  defaultValueShrink?: string(name='DefaultValue'),
  otherParamShrink?: string(name='OtherParam'),
  p1?: string(name='P1'),
  stringValueShrink?: string(name='StringValue'),
}

model FtDynamicAddressHttpVpcResponseBody = {
  params?: string(name='Params'),
  serviceRpcSign?: string(name='ServiceRpcSign'),
}

model FtDynamicAddressHttpVpcResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FtDynamicAddressHttpVpcResponseBody(name='body'),
}

async function ftDynamicAddressHttpVpcWithOptions(tmpReq: FtDynamicAddressHttpVpcRequest, runtime: Util.RuntimeOptions): FtDynamicAddressHttpVpcResponse {
  Util.validateModel(tmpReq);
  var request = new FtDynamicAddressHttpVpcShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.defaultValue)) {
    request.defaultValueShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.defaultValue, 'DefaultValue', 'json');
  }
  if (!Util.isUnset(tmpReq.otherParam)) {
    request.otherParamShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.otherParam, 'OtherParam', 'json');
  }
  if (!Util.isUnset(tmpReq.stringValue)) {
    request.stringValueShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.stringValue, 'StringValue', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.booleanParam)) {
    query['BooleanParam'] = request.booleanParam;
  }
  if (!Util.isUnset(request.defaultValueShrink)) {
    query['DefaultValue'] = request.defaultValueShrink;
  }
  if (!Util.isUnset(request.otherParamShrink)) {
    query['OtherParam'] = request.otherParamShrink;
  }
  if (!Util.isUnset(request.p1)) {
    query['P1'] = request.p1;
  }
  if (!Util.isUnset(request.stringValueShrink)) {
    query['StringValue'] = request.stringValueShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FtDynamicAddressHttpVpc',
    version = '2018-07-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function ftDynamicAddressHttpVpc(request: FtDynamicAddressHttpVpcRequest): FtDynamicAddressHttpVpcResponse {
  var runtime = new Util.RuntimeOptions{};
  return ftDynamicAddressHttpVpcWithOptions(request, runtime);
}

model FtEagleEyeRequest {
  name?: string(name='Name'),
}

model FtEagleEyeResponseBody = {
  name?: string(name='Name'),
  requestId?: string(name='RequestId'),
  eagleEyeTraceId?: string(name='eagleEyeTraceId'),
}

model FtEagleEyeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FtEagleEyeResponseBody(name='body'),
}

async function ftEagleEyeWithOptions(request: FtEagleEyeRequest, runtime: Util.RuntimeOptions): FtEagleEyeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FtEagleEye',
    version = '2018-07-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function ftEagleEye(request: FtEagleEyeRequest): FtEagleEyeResponse {
  var runtime = new Util.RuntimeOptions{};
  return ftEagleEyeWithOptions(request, runtime);
}

model FtFlowSpecialRequest {
  name?: string(name='Name'),
}

model FtFlowSpecialResponseBody = {
  name?: string(name='Name'),
  requestId?: string(name='RequestId'),
}

model FtFlowSpecialResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FtFlowSpecialResponseBody(name='body'),
}

async function ftFlowSpecialWithOptions(request: FtFlowSpecialRequest, runtime: Util.RuntimeOptions): FtFlowSpecialResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FtFlowSpecial',
    version = '2018-07-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function ftFlowSpecial(request: FtFlowSpecialRequest): FtFlowSpecialResponse {
  var runtime = new Util.RuntimeOptions{};
  return ftFlowSpecialWithOptions(request, runtime);
}

model FtGatedLaunchPolicy4Request {
  isGatedLaunch?: string(name='IsGatedLaunch'),
}

model FtGatedLaunchPolicy4ResponseBody = {
  isGatedLaunch?: string(name='IsGatedLaunch'),
  requestId?: string(name='RequestId'),
}

model FtGatedLaunchPolicy4Response = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FtGatedLaunchPolicy4ResponseBody(name='body'),
}

async function ftGatedLaunchPolicy4WithOptions(request: FtGatedLaunchPolicy4Request, runtime: Util.RuntimeOptions): FtGatedLaunchPolicy4Response {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.isGatedLaunch)) {
    query['IsGatedLaunch'] = request.isGatedLaunch;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FtGatedLaunchPolicy4',
    version = '2018-07-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function ftGatedLaunchPolicy4(request: FtGatedLaunchPolicy4Request): FtGatedLaunchPolicy4Response {
  var runtime = new Util.RuntimeOptions{};
  return ftGatedLaunchPolicy4WithOptions(request, runtime);
}

model FtIpFlowControlRequest {
  name?: string(name='Name'),
}

model FtIpFlowControlResponseBody = {
  name?: string(name='Name'),
  requestId?: string(name='RequestId'),
}

model FtIpFlowControlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FtIpFlowControlResponseBody(name='body'),
}

async function ftIpFlowControlWithOptions(request: FtIpFlowControlRequest, runtime: Util.RuntimeOptions): FtIpFlowControlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FtIpFlowControl',
    version = '2018-07-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function ftIpFlowControl(request: FtIpFlowControlRequest): FtIpFlowControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return ftIpFlowControlWithOptions(request, runtime);
}

model FtParamListRequest {
  disk?: [ 
    {
      size?: [ string ](name='Size'),
      type?: [ string ](name='Type'),
    }
  ](name='Disk'),
  name?: string(name='Name'),
}

model FtParamListResponseBody = {
  name?: string(name='Name'),
  requestId?: string(name='RequestId'),
}

model FtParamListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FtParamListResponseBody(name='body'),
}

async function ftParamListWithOptions(request: FtParamListRequest, runtime: Util.RuntimeOptions): FtParamListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.disk)) {
    query['Disk'] = request.disk;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FtParamList',
    version = '2018-07-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function ftParamList(request: FtParamListRequest): FtParamListResponse {
  var runtime = new Util.RuntimeOptions{};
  return ftParamListWithOptions(request, runtime);
}

model TestFlowStrategy01Request {
  names?: map[string]any(name='Names'),
}

model TestFlowStrategy01ShrinkRequest {
  namesShrink?: string(name='Names'),
}

model TestFlowStrategy01ResponseBody = {
  list?: [ string ](name='List'),
  names?: [ string ](name='Names'),
  requestId?: string(name='RequestId'),
}

model TestFlowStrategy01Response = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TestFlowStrategy01ResponseBody(name='body'),
}

async function testFlowStrategy01WithOptions(tmpReq: TestFlowStrategy01Request, runtime: Util.RuntimeOptions): TestFlowStrategy01Response {
  Util.validateModel(tmpReq);
  var request = new TestFlowStrategy01ShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.names)) {
    request.namesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.names, 'Names', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.namesShrink)) {
    body['Names'] = request.namesShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TestFlowStrategy01',
    version = '2018-07-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'PUT',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function testFlowStrategy01(request: TestFlowStrategy01Request): TestFlowStrategy01Response {
  var runtime = new Util.RuntimeOptions{};
  return testFlowStrategy01WithOptions(request, runtime);
}

model TestHttpApiRequest {
  booleanParam?: boolean(name='BooleanParam'),
  defaultValue?: map[string]any(name='DefaultValue'),
  otherParam?: map[string]any(name='OtherParam'),
  stringValue?: map[string]any(name='StringValue'),
}

model TestHttpApiShrinkRequest {
  booleanParam?: boolean(name='BooleanParam'),
  defaultValueShrink?: string(name='DefaultValue'),
  otherParamShrink?: string(name='OtherParam'),
  stringValueShrink?: string(name='StringValue'),
}

model TestHttpApiResponseBody = {
  params?: string(name='Params'),
  serviceRpcSign?: string(name='ServiceRpcSign'),
}

model TestHttpApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TestHttpApiResponseBody(name='body'),
}

async function testHttpApiWithOptions(tmpReq: TestHttpApiRequest, runtime: Util.RuntimeOptions): TestHttpApiResponse {
  Util.validateModel(tmpReq);
  var request = new TestHttpApiShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.defaultValue)) {
    request.defaultValueShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.defaultValue, 'DefaultValue', 'json');
  }
  if (!Util.isUnset(tmpReq.otherParam)) {
    request.otherParamShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.otherParam, 'OtherParam', 'json');
  }
  if (!Util.isUnset(tmpReq.stringValue)) {
    request.stringValueShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.stringValue, 'StringValue', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.booleanParam)) {
    query['BooleanParam'] = request.booleanParam;
  }
  if (!Util.isUnset(request.defaultValueShrink)) {
    query['DefaultValue'] = request.defaultValueShrink;
  }
  if (!Util.isUnset(request.otherParamShrink)) {
    query['OtherParam'] = request.otherParamShrink;
  }
  if (!Util.isUnset(request.stringValueShrink)) {
    query['StringValue'] = request.stringValueShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TestHttpApi',
    version = '2018-07-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function testHttpApi(request: TestHttpApiRequest): TestHttpApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return testHttpApiWithOptions(request, runtime);
}

