/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'safconsole';
  @version = '2021-01-12';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model RevokeFeedbackRequest {
  sampleType: string(name='SampleType', position='Body'),
  value: string(name='Value', position='Body'),
}

model RevokeFeedbackResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RevokeFeedbackResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RevokeFeedbackResponseBody(name='body'),
}

async function revokeFeedback(request: RevokeFeedbackRequest): RevokeFeedbackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RevokeFeedback', 'POST', '/', 'json', true, 'form', request);
}

model SendFeedbackRequest {
  riskLabel?: string(name='RiskLabel', position='Query'),
  sampleType: string(name='SampleType', position='Query'),
  value: string(name='Value', position='Query'),
}

model SendFeedbackResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model SendFeedbackResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SendFeedbackResponseBody(name='body'),
}

async function sendFeedback(request: SendFeedbackRequest): SendFeedbackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendFeedback', 'POST', '/', 'json', false, 'json', request);
}

model UploadSampleApiRequest {
  dataType: string(name='DataType', example='ip', position='Query'),
  dataValue: string(name='DataValue', example='["123.124.125.126","123.124.125.127"]', position='Query'),
  sampleType: string(name='SampleType', example='block', position='Query'),
  service: string(name='Service', example='account_abuse,coupon_abuse,account_takeover', position='Query'),
}

model UploadSampleApiResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='4A91D2D1-AEC9-1658-ABCE-5A39DE66A5C2'),
}

model UploadSampleApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UploadSampleApiResponseBody(name='body'),
}

async function uploadSampleApi(request: UploadSampleApiRequest): UploadSampleApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UploadSampleApi', 'POST', '/', 'json', false, 'json', request);
}

