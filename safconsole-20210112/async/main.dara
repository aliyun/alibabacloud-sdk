/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'safconsole';
  @version = '2021-01-12';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model RevokeFeedbackRequest {
  sampleType: string(name='SampleType', description='Sample type. For phone number type samples, input PHONE; for email type samples, input EMAIL; for account type samples, input ACCOUNT.

This parameter is required.', example='PHONE', position='Body'),
  value: string(name='Value', description='Sample value.

This parameter is required.', example='10000000000', position='Body'),
}

model RevokeFeedbackResponseBody = {
  code?: string(name='Code', description='Interface status or POP error code. Value explanations are as follows: 2xx: Success. 3xx: Redirect. 4xx: Request error. 5xx: Server error.', example='200'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='Public parameter, each request ID is unique and can be used for troubleshooting and problem localization.', example='4A91D2D1-AEC9-1658-ABCE-5A39DE66A5C2'),
}

model RevokeFeedbackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RevokeFeedbackResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RevokeFeedback  RevokeFeedbackRequest
  * @return RevokeFeedbackResponse
 */
async function revokeFeedback(request: RevokeFeedbackRequest): RevokeFeedbackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RevokeFeedback', 'POST', '/', 'json', true, 'form', request);
}

model SendFeedbackRequest {
  reason?: string(name='Reason', position='Query'),
  riskLabel?: string(name='RiskLabel', description='Sample labels. User-defined, separated by commas.', example='OTHERS', position='Query'),
  sampleType: string(name='SampleType', description='Sample type. For phone number type samples, input PHONE; for email type samples, input EMAIL; for account type samples, input ACCOUNT.

This parameter is required.', example='PHONE', position='Query'),
  value: string(name='Value', description='Sample value.

This parameter is required.', example='10000000000', position='Query'),
}

model SendFeedbackResponseBody = {
  code?: int32(name='Code', description='Interface status or POP error code. The values are as follows: 2xx: Success. 3xx: Redirect. 4xx: Request error. 5xx: Server error.', example='200'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='Public parameter, each request ID is unique and can be used for troubleshooting and problem localization.', example='4A91D2D1-AEC9-1658-ABCE-5A39DE66A5C2'),
}

model SendFeedbackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendFeedbackResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SendFeedback  SendFeedbackRequest
  * @return SendFeedbackResponse
 */
async function sendFeedback(request: SendFeedbackRequest): SendFeedbackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendFeedback', 'POST', '/', 'json', false, 'json', request);
}

model UploadSampleApiRequest {
  dataType: string(name='DataType', description='The data type of the sample

- Phone number: mobile
- MD5 of phone number: mobileMd5
- IP: ip
- Unique device ID: umid
- Account ID: accountId
- IMEI: imei
- MD5 of IMEI: imeiMd5
- OAID: oaid
- MD5 of OAID: oaidMd5
- Android ID: androidId
- MD5 of Android ID: androidIdMd5

This parameter is required.', example='ip', position='Query'),
  dataValue: string(name='DataValue', description='Specific value of the sample, to be passed in JSON format. Do not exceed 1000 entries at a time.

This parameter is required.', example='["123.124.125.126","123.124.125.127"]', position='Query'),
  sampleType: string(name='SampleType', description='The type of the sample

- Blacklist: block

- Whitelist: pass

This parameter is required.', example='block', position='Query'),
  service: string(name='Service', description='List of effective services, separate multiple services with commas

- Basic/Enhanced Registration Risk Identification: account_abuse
- Basic/Enhanced Marketing Risk Identification: coupon_abuse
- Basic/Enhanced Login Risk Identification: account_takeover

This parameter is required.', example='account_abuse,coupon_abuse,account_takeover', position='Query'),
}

model UploadSampleApiResponseBody = {
  code?: string(name='Code', description='Request code returned', example='200'),
  message?: string(name='Message', description='Error message returned', example='null'),
  requestId?: string(name='RequestId', description='ID of the request', example='4A91D2D1-AEC9-1658-ABCE-5A39DE66A5C2'),
  success?: string(name='Success', description='Indicator of whether the access was successful', example='true'),
}

model UploadSampleApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UploadSampleApiResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UploadSampleApi  UploadSampleApiRequest
  * @return UploadSampleApiResponse
 */
async function uploadSampleApi(request: UploadSampleApiRequest): UploadSampleApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UploadSampleApi', 'POST', '/', 'json', false, 'json', request);
}

