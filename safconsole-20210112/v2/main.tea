/**
 *
 */
import OpenApi;
import OpenApi.OpenApiUtil;

extends OpenApi;


init(config: OpenApiUtil.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('safconsole', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!$isNull(endpoint)) {
    return endpoint;
  }
  
  if (!$isNull(endpointMap) && !$isNull(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return OpenApiUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model RevokeFeedbackRequest {
  sampleType?: string(name='SampleType', description='Sample type. For phone number type samples, input PHONE; for email type samples, input EMAIL; for account type samples, input ACCOUNT.

This parameter is required.', example='PHONE'),
  value?: string(name='Value', description='Sample value.

This parameter is required.', example='10000000000'),
}

model RevokeFeedbackResponseBody = {
  code?: string(name='Code', description='Interface status or POP error code. Value explanations are as follows: 2xx: Success. 3xx: Redirect. 4xx: Request error. 5xx: Server error.', example='200'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='Public parameter, each request ID is unique and can be used for troubleshooting and problem localization.', example='4A91D2D1-AEC9-1658-ABCE-5A39DE66A5C2'),
}

model RevokeFeedbackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RevokeFeedbackResponseBody(name='body'),
}

/**
 * @summary Used for external deletion of community samples in risk identification services.
 *
 * @param request RevokeFeedbackRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RevokeFeedbackResponse
 */
@context("revokeFeedbackWithContext")
async function revokeFeedbackWithOptions(request: RevokeFeedbackRequest, runtime: $RuntimeOptions): RevokeFeedbackResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.sampleType)) {
    body['SampleType'] = request.sampleType;
  }
  if (!$isNull(request.value)) {
    body['Value'] = request.value;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'RevokeFeedback',
    version = '2021-01-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Used for external deletion of community samples in risk identification services.
 *
 * @param request RevokeFeedbackRequest
 * @return RevokeFeedbackResponse
 */
async function revokeFeedback(request: RevokeFeedbackRequest): RevokeFeedbackResponse {
  var runtime = new $RuntimeOptions{};
  return revokeFeedbackWithOptions(request, runtime);
}

model SendFeedbackRequest {
  reason?: string(name='Reason'),
  riskLabel?: string(name='RiskLabel', description='Sample labels. User-defined, separated by commas.', example='OTHERS'),
  sampleType?: string(name='SampleType', description='Sample type. For phone number type samples, input PHONE; for email type samples, input EMAIL; for account type samples, input ACCOUNT.

This parameter is required.', example='PHONE'),
  value?: string(name='Value', description='Sample value.

This parameter is required.', example='10000000000'),
}

model SendFeedbackResponseBody = {
  code?: int32(name='Code', description='Interface status or POP error code. The values are as follows: 2xx: Success. 3xx: Redirect. 4xx: Request error. 5xx: Server error.', example='200'),
  message?: string(name='Message', description='Return message.', example='success'),
  requestId?: string(name='RequestId', description='Public parameter, each request ID is unique and can be used for troubleshooting and problem localization.', example='4A91D2D1-AEC9-1658-ABCE-5A39DE66A5C2'),
}

model SendFeedbackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendFeedbackResponseBody(name='body'),
}

/**
 * @summary Used for the external creation of community samples in risk identification services.
 *
 * @param request SendFeedbackRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SendFeedbackResponse
 */
@context("sendFeedbackWithContext")
async function sendFeedbackWithOptions(request: SendFeedbackRequest, runtime: $RuntimeOptions): SendFeedbackResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.reason)) {
    query['Reason'] = request.reason;
  }
  if (!$isNull(request.riskLabel)) {
    query['RiskLabel'] = request.riskLabel;
  }
  if (!$isNull(request.sampleType)) {
    query['SampleType'] = request.sampleType;
  }
  if (!$isNull(request.value)) {
    query['Value'] = request.value;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'SendFeedback',
    version = '2021-01-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Used for the external creation of community samples in risk identification services.
 *
 * @param request SendFeedbackRequest
 * @return SendFeedbackResponse
 */
async function sendFeedback(request: SendFeedbackRequest): SendFeedbackResponse {
  var runtime = new $RuntimeOptions{};
  return sendFeedbackWithOptions(request, runtime);
}

model UploadSampleApiRequest {
  dataType?: string(name='DataType', description='The data type of the sample

- Phone number: mobile
- MD5 of phone number: mobileMd5
- IP: ip
- Unique device ID: umid
- Account ID: accountId
- IMEI: imei
- MD5 of IMEI: imeiMd5
- OAID: oaid
- MD5 of OAID: oaidMd5
- Android ID: androidId
- MD5 of Android ID: androidIdMd5

This parameter is required.', example='ip'),
  dataValue?: string(name='DataValue', description='Specific value of the sample, to be passed in JSON format. Do not exceed 1000 entries at a time.

This parameter is required.', example='["123.124.125.126","123.124.125.127"]'),
  sampleType?: string(name='SampleType', description='The type of the sample

- Blacklist: block

- Whitelist: pass

This parameter is required.', example='block'),
  service?: string(name='Service', description='List of effective services, separate multiple services with commas

- Basic/Enhanced Registration Risk Identification: account_abuse
- Basic/Enhanced Marketing Risk Identification: coupon_abuse
- Basic/Enhanced Login Risk Identification: account_takeover

This parameter is required.', example='account_abuse,coupon_abuse,account_takeover'),
}

model UploadSampleApiResponseBody = {
  code?: string(name='Code', description='Request code returned', example='200'),
  message?: string(name='Message', description='Error message returned', example='null'),
  requestId?: string(name='RequestId', description='ID of the request', example='4A91D2D1-AEC9-1658-ABCE-5A39DE66A5C2'),
  success?: string(name='Success', description='Indicator of whether the access was successful', example='true'),
}

model UploadSampleApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UploadSampleApiResponseBody(name='body'),
}

/**
 * @summary Single User API for Sample Creation
 *
 * @param request UploadSampleApiRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UploadSampleApiResponse
 */
@context("uploadSampleApiWithContext")
async function uploadSampleApiWithOptions(request: UploadSampleApiRequest, runtime: $RuntimeOptions): UploadSampleApiResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.dataType)) {
    query['DataType'] = request.dataType;
  }
  if (!$isNull(request.dataValue)) {
    query['DataValue'] = request.dataValue;
  }
  if (!$isNull(request.sampleType)) {
    query['SampleType'] = request.sampleType;
  }
  if (!$isNull(request.service)) {
    query['Service'] = request.service;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UploadSampleApi',
    version = '2021-01-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Single User API for Sample Creation
 *
 * @param request UploadSampleApiRequest
 * @return UploadSampleApiResponse
 */
async function uploadSampleApi(request: UploadSampleApiRequest): UploadSampleApiResponse {
  var runtime = new $RuntimeOptions{};
  return uploadSampleApiWithOptions(request, runtime);
}

