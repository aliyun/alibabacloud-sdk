/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'energyExpertExternal';
  @version = '2022-09-23';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CarbonEmissionElecSummaryItem {
  carbonEmissionData?: double(name='carbonEmissionData'),
  dataUnit?: string(name='dataUnit'),
  name?: string(name='name'),
  ratio?: double(name='ratio'),
  rawData?: double(name='rawData'),
}

model ConstituteItem {
  carbonEmissionData?: double(name='carbonEmissionData'),
  dataUnit?: string(name='dataUnit'),
  emissionSource?: string(name='emissionSource'),
  emissionSourceKey?: string(name='emissionSourceKey'),
  enterpriseName?: string(name='enterpriseName'),
  envGasEmissions?: [ 
    {
      carbonEmissionData?: double(name='carbonEmissionData'),
      gasEmissionData?: double(name='gasEmissionData'),
      name?: string(name='name'),
      type?: string(name='type'),
    }
  ](name='envGasEmissions'),
  name?: string(name='name'),
  nameKey?: string(name='nameKey'),
  ratio?: double(name='ratio'),
  rawData?: double(name='rawData'),
  subConstituteItems?: [
    ConstituteItem
  ](name='subConstituteItems'),
}

model ContentItem {
  extInfo?: [ 
    {
      alignment?: string(name='alignment', example='center'),
      index?: long(name='index', example='8'),
      level?: long(name='level', example='2'),
      pageNum?: [ long ](name='pageNum'),
      pos?: [ 
        {
          x?: long(name='x', example='1'),
          y?: long(name='y', example='2'),
        }
      ](name='pos'),
      subType?: string(name='subType', example='picture'),
      text?: string(name='text', example='版面内容'),
      type?: string(name='type', example='table'),
      uniqueId?: string(name='uniqueId', example='88c712db271443dd4e3697cb9b5dab3a'),
    }
  ](name='extInfo'),
  score?: double(name='score', example='0.45'),
  text?: string(name='text'),
  type?: string(name='type', example='img'),
}

model EpdInventoryConstituteItem {
  carbonEmission?: double(name='carbonEmission'),
  factor?: string(name='factor'),
  factorDataset?: string(name='factorDataset'),
  factorId?: string(name='factorId'),
  factorType?: int32(name='factorType'),
  factorUnit?: string(name='factorUnit'),
  inventoryId?: long(name='inventoryId'),
  inventoryUnit?: string(name='inventoryUnit'),
  inventoryValue?: double(name='inventoryValue'),
  inventoryValuePerProduct?: double(name='inventoryValuePerProduct'),
  inventoryValuePerProductUnit?: string(name='inventoryValuePerProductUnit'),
  items?: [
    EpdInventoryConstituteItem
  ](name='items'),
  name?: string(name='name'),
  num?: long(name='num'),
  percent?: double(name='percent'),
  quantity?: double(name='quantity'),
  resourceType?: string(name='resourceType'),
  state?: int32(name='state'),
  unit?: string(name='unit'),
}

model GwpInventoryConstitute {
  byResourceType?: [
    GwpResourceConstitute
  ](name='byResourceType'),
  carbonEmission?: double(name='carbonEmission'),
  items?: [
    GwpInventoryConstitute
  ](name='items'),
  name?: string(name='name'),
  percent?: double(name='percent'),
  resourceType?: int32(name='resourceType'),
  unit?: string(name='unit'),
}

model GwpResourceConstitute {
  carbonEmission?: double(name='carbonEmission'),
  name?: string(name='name'),
  percent?: string(name='percent'),
  resourceType?: int32(name='resourceType'),
  unit?: string(name='unit'),
}

model OrgEmission {
  carbonEmissionData?: double(name='carbonEmissionData'),
  moduleEmissionList?: [ 
    {
      carbonEmissionData?: double(name='carbonEmissionData'),
      name?: string(name='name'),
      nameKey?: string(name='nameKey'),
      ratio?: double(name='ratio'),
    }
  ](name='moduleEmissionList'),
  name?: string(name='name'),
  nameKey?: string(name='nameKey'),
  ratio?: double(name='ratio'),
  subEmissionItems?: [
    OrgEmission
  ](name='subEmissionItems'),
  weightingCarbonEmissionData?: double(name='weightingCarbonEmissionData'),
  weightingProportion?: double(name='weightingProportion'),
  weightingRatio?: double(name='weightingRatio'),
}

model BatchSaveInstructionStatusRequest {
  factoryId: string(name='factoryId', description='This parameter is required.', example='***', position='Body'),
  pKey?: string(name='pKey', example='ib', position='Body'),
  statusList?: string(name='statusList', position='Body'),
}

model BatchSaveInstructionStatusResponseBody = {
  data?: boolean(name='data', description='true', example='true'),
  requestId?: string(name='requestId', description='Id of the request', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
}

model BatchSaveInstructionStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchSaveInstructionStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchSaveInstructionStatus  BatchSaveInstructionStatusRequest
  * @return BatchSaveInstructionStatusResponse
 */
async function batchSaveInstructionStatus(request: BatchSaveInstructionStatusRequest): BatchSaveInstructionStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BatchSaveInstructionStatus', 'POST', '/api/v1/carbon/hvac/batchSaveInstructionStatus', 'json', false, 'json', request);
}

model BatchUpdateSystemRunningPlanRequest {
  controlType?: int32(name='controlType', example='0', position='Body'),
  dateType?: int32(name='dateType', example='0', position='Body'),
  earliestStartupTime?: string(name='earliestStartupTime', example='05:00:00', position='Body'),
  endTime: string(name='endTime', description='This parameter is required.', example='2024-08-30', position='Body'),
  factoryId: string(name='factoryId', description='This parameter is required.', example='***', position='Body'),
  latestShutdownTime?: string(name='latestShutdownTime', example='05:30:00', position='Body'),
  maxCarbonDioxide?: double(name='maxCarbonDioxide', example='37.1', position='Body'),
  maxTem?: double(name='maxTem', example='25.3', position='Body'),
  minTem?: double(name='minTem', example='20.1', position='Body'),
  seasonMode?: int32(name='seasonMode', example='0', position='Body'),
  startTime: string(name='startTime', description='This parameter is required.', example='2024-08-21', position='Body'),
  systemId: string(name='systemId', description='This parameter is required.', example='system1', position='Body'),
  workingEndTime?: string(name='workingEndTime', example='05:30:00', position='Body'),
  workingStartTime?: string(name='workingStartTime', example='05:00:00', position='Body'),
}

model BatchUpdateSystemRunningPlanResponseBody = {
  data?: boolean(name='data', example='true'),
  requestId?: string(name='requestId', description='Id of the request', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
}

model BatchUpdateSystemRunningPlanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchUpdateSystemRunningPlanResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchUpdateSystemRunningPlan  BatchUpdateSystemRunningPlanRequest
  * @return BatchUpdateSystemRunningPlanResponse
 */
async function batchUpdateSystemRunningPlan(request: BatchUpdateSystemRunningPlanRequest): BatchUpdateSystemRunningPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BatchUpdateSystemRunningPlan', 'POST', '/api/v1/carbon/hvac/batchUpdateSystemRunningPlan', 'json', false, 'json', request);
}

model EditProhibitedDevicesRequest {
  factoryId: string(name='factoryId', description='This parameter is required.', example='***', position='Body'),
  hvacDeviceConfigVOList: [ 
    {
      buildingId?: string(name='buildingId', example='build_01'),
      deviceId?: string(name='deviceId', example='id1'),
      deviceName?: string(name='deviceName', example='name1'),
      deviceType: string(name='deviceType', description='This parameter is required.', example='1'),
      fenceId?: string(name='fenceId', example='fence_01'),
      floorId?: string(name='floorId', example='floor_01'),
      isForbidden: int32(name='isForbidden', description='This parameter is required.', example='1'),
      isUnfavorableArea?: int32(name='isUnfavorableArea', example='1'),
    }
  ](name='hvacDeviceConfigVOList', description='This parameter is required.', position='Body'),
  systemId: string(name='systemId', description='This parameter is required.', example='system1', position='Body'),
}

model EditProhibitedDevicesResponseBody = {
  data?: boolean(name='data', example='true'),
  requestId?: string(name='requestId', description='Id of the request', example='9bc20a5a-b26b-4c28-922a-7cd10b61f96f'),
}

model EditProhibitedDevicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EditProhibitedDevicesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EditProhibitedDevices  EditProhibitedDevicesRequest
  * @return EditProhibitedDevicesResponse
 */
async function editProhibitedDevices(request: EditProhibitedDevicesRequest): EditProhibitedDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'EditProhibitedDevices', 'POST', '/api/v1/carbon/hvac/editProhibitedDevices', 'json', false, 'json', request);
}

model EditUnfavorableAreaDevicesRequest {
  factoryId: string(name='factoryId', description='This parameter is required.', example='***', position='Body'),
  hvacDeviceConfigVOList: [ 
    {
      buildingId?: string(name='buildingId', example='buildingId1'),
      deviceId?: string(name='deviceId', example='id1'),
      deviceName?: string(name='deviceName', example='name1'),
      deviceType: string(name='deviceType', description='This parameter is required.', example='1'),
      fenceId?: string(name='fenceId', example='fenceId1'),
      floorId?: string(name='floorId', example='floorId2'),
      isForbidden?: int32(name='isForbidden', example='1'),
      isUnfavorableArea: int32(name='isUnfavorableArea', description='This parameter is required.', example='1'),
    }
  ](name='hvacDeviceConfigVOList', description='This parameter is required.', position='Body'),
  systemId: string(name='systemId', description='This parameter is required.', example='system1', position='Body'),
}

model EditUnfavorableAreaDevicesResponseBody = {
  data?: boolean(name='data', example='true'),
  requestId?: string(name='requestId', description='Id of the request', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
}

model EditUnfavorableAreaDevicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EditUnfavorableAreaDevicesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EditUnfavorableAreaDevices  EditUnfavorableAreaDevicesRequest
  * @return EditUnfavorableAreaDevicesResponse
 */
async function editUnfavorableAreaDevices(request: EditUnfavorableAreaDevicesRequest): EditUnfavorableAreaDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'EditUnfavorableAreaDevices', 'POST', '/api/v1/carbon/hvac/editUnfavorableAreaDevices', 'json', false, 'json', request);
}

model GenerateResultRequest {
  code: string(name='code', description='The enterprise code.

This parameter is required.', example='C-20080808-1', position='Body'),
  productId: long(name='productId', description='The product id.

This parameter is required.', example='1024', position='Body'),
  productType: long(name='productType', description='Product type: 1 indicates that the carbon footprint of the product is requested, and 5 indicates that the carbon footprint of the supply chain is requested.

This parameter is required.', example='1', position='Body'),
}

model GenerateResultResponseBody = {
  data?: boolean(name='data', description='The returned data. `true` indicates that the request is successful, `false` indicates that the request fails.', example='true'),
  requestId?: string(name='requestId', description='The ID of the request. The value is unique for each request. This facilitates subsequent troubleshooting.', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
}

model GenerateResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateResultResponseBody(name='body'),
}

/**
  * @description Given a product ID, this API initiates a task to calculate the carbon footprint result for the corresponding product. The task\\"s status can be checked using the `IsCompleted` API. Following the generation of results, other result inquiry APIs can be accessed for display content.
  * @param request  the request parameters of GenerateResult  GenerateResultRequest
  * @return GenerateResultResponse
 */
async function generateResult(request: GenerateResultRequest): GenerateResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GenerateResult', 'POST', '/api/v1/carbon/footprint/result/generate', 'json', false, 'json', request);
}

model GetAreaElecConstituteRequest {
  code: string(name='code', description='The enterprise code.

This parameter is required.', example='Z-20240115-2', position='Body'),
  year: int32(name='year', description='Year.

This parameter is required.', example='2024', position='Body'),
}

model GetAreaElecConstituteResponseBody = {
  code?: string(name='code', description='The code returned for the request. A value of Success indicates that the request was successful. Other values indicate that the request failed. You can troubleshoot the error by viewing the error message returned.', example='200'),
  data?: {
    light?: [
      CarbonEmissionElecSummaryItem
    ](name='light', description='Photoelectric power consumption and carbon emission data of each enterprise.'),
    nuclear?: [
      CarbonEmissionElecSummaryItem
    ](name='nuclear', description='Data on nuclear power consumption and carbon emissions at each enterprise.'),
    renewing?: [
      CarbonEmissionElecSummaryItem
    ](name='renewing', description='Data on renewable electricity consumption and carbon emissions at each enterprise.'),
    urban?: [
      CarbonEmissionElecSummaryItem
    ](name='urban', description='Data on mains electricity consumption and carbon emission of each enterprise.'),
    water?: [
      CarbonEmissionElecSummaryItem
    ](name='water', description='Hydropower consumption and carbon emission data of each enterprise.'),
    wind?: [
      CarbonEmissionElecSummaryItem
    ](name='wind', description='Wind power consumption and carbon emission data of each enterprise.'),
    zero?: [
      CarbonEmissionElecSummaryItem
    ](name='zero', description='Data of zero electricity consumption and carbon emission of each enterprise.'),
  }(name='data', description='The returned data.'),
  requestId?: string(name='requestId', description='The request ID.', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
}

model GetAreaElecConstituteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAreaElecConstituteResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAreaElecConstitute  GetAreaElecConstituteRequest
  * @return GetAreaElecConstituteResponse
 */
async function getAreaElecConstitute(request: GetAreaElecConstituteRequest): GetAreaElecConstituteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAreaElecConstitute', 'POST', '/api/v1/carbon/emission/analysis/elec/area', 'json', false, 'json', request);
}

model GetCarbonEmissionTrendRequest {
  code: string(name='code', description='The enterprise code.

This parameter is required.', example='C-20240119-1', position='Body'),
  moduleCode?: string(name='moduleCode', description='Module code.', example='carbonInventory.check.scope_1_direct_ghg_emissions', position='Body'),
  moduleType?: int32(name='moduleType', description='Module type.', example='3', position='Body'),
  trendType: int32(name='trendType', description='Trend Type.

This parameter is required.', example='0', position='Body'),
  yearList: [ int32 ](name='yearList', description='The list of inventory year.

This parameter is required.', position='Body'),
}

model GetCarbonEmissionTrendResponseBody = {
  data?: {
    actualEmissionList?: [ 
      {
        items?: [ 
          {
            carbonEmissionData?: double(name='carbonEmissionData', description='Carbon emissions.', example='20.22'),
            month?: int32(name='month', description='The month.', example='11'),
            year?: string(name='year', description='The year.', example='2024'),
          }
        ](name='items', description='Data item list.'),
        year?: string(name='year', description='The year.', example='2024'),
      }
    ](name='actualEmissionList', description='Actual emission list.'),
    targetEmissionList?: [ 
      {
        items?: [ 
          {
            carbonEmissionData?: double(name='carbonEmissionData', description='Carbon emissions.', example='20.22'),
            month?: int32(name='month', description='The month.', example='10'),
            year?: string(name='year', description='The year.', example='2024'),
          }
        ](name='items', description='Data item list.'),
        year?: string(name='year', description='The year.', example='2024'),
      }
    ](name='targetEmissionList', description='Target Emission List.'),
  }(name='data', description='The response parameters.'),
  requestId?: string(name='requestId', description='Id of the request.', example='9bc20a5a-b26b-4c28-922a-7cd10b61f96f'),
}

model GetCarbonEmissionTrendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCarbonEmissionTrendResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetCarbonEmissionTrend  GetCarbonEmissionTrendRequest
  * @return GetCarbonEmissionTrendResponse
 */
async function getCarbonEmissionTrend(request: GetCarbonEmissionTrendRequest): GetCarbonEmissionTrendResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetCarbonEmissionTrend', 'POST', '/api/v1/carbon/emission/analysis/trend', 'json', false, 'json', request);
}

model GetDataItemListRequest {
  code: string(name='code', description='The enterprise code.

This parameter is required.', example='C-202302-01', position='Body'),
}

model GetDataItemListResponseBody = {
  data?: [ 
    {
      code?: string(name='code', description='The identifier of the data item.', example='demo_api_code'),
      name?: string(name='name', description='The name of the data item.', example='name_bbb'),
      period?: int32(name='period', description='Data filling method, 1: monthly value 2: annual value.', example='1'),
      unit?: string(name='unit', description='The data item unit.', example='kg'),
    }
  ](name='data', description='Response parameters.'),
  requestId?: string(name='requestId', description='The request ID.', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
}

model GetDataItemListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataItemListResponseBody(name='body'),
}

/**
  * @description - obtain data item detail list under the current enterprise.
  * @param request  the request parameters of GetDataItemList  GetDataItemListRequest
  * @return GetDataItemListResponse
 */
async function getDataItemList(request: GetDataItemListRequest): GetDataItemListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDataItemList', 'POST', '/api/v1/carbon/emission/data/item/list', 'json', false, 'json', request);
}

model GetDataQualityAnalysisRequest {
  code: string(name='code', description='The enterprise code.

This parameter is required.', example='C-20080808-1', position='Body'),
  dataQualityEvaluationType: long(name='dataQualityEvaluationType', description='Data quality assessment type: 1 is DQI and 2 is DQR.

This parameter is required.', example='1', position='Body'),
  productId: long(name='productId', description='The product id.

This parameter is required.', example='1024', position='Body'),
  productType: long(name='productType', description='Product type: 1 indicates that the carbon footprint of the product is requested, and 5 indicates that the carbon footprint of the supply chain is requested.

This parameter is required.', example='1', position='Body'),
}

model GetDataQualityAnalysisResponseBody = {
  data?: {
    dataQuality?: [ 
      {
        inventory?: string(name='inventory', description='Inventory name', example='energy'),
        score?: {
          g1?: double(name='g1', description='Data quality evaluation indicator 1: activity data credibility.', example='3'),
          g2?: double(name='g2', description='Data quality evaluation indicator 2: data factor reliability.', example='3'),
          g3?: double(name='g3', description='Data quality evaluation indicator 3: time representativeness.', example='3'),
          g4?: double(name='g4', description='Data quality evaluation indicator 4: geographic representativeness.', example='3'),
        }(name='score', description='Score. The distribution ranges from 1 to 5. A value closer to 1 indicates better data quality.'),
      }
    ](name='dataQuality', description='Score of each inventory.'),
    dataQualityResult?: {
      dataQualityScore?: double(name='data_quality_score', description='The score. This parameter is applicable to DQR results. The distribution ranges from 1 to 5. A value closer to 1 indicates better data quality. The number of valid digits is kept to four decimal places.', example='1.2345'),
      g1?: double(name='g1', description='Data quality evaluation indicator 1: activity data credibility.', example='1.2345'),
      g2?: double(name='g2', description='Data quality evaluation indicator 2: data factor reliability.', example='1.2345'),
      g3?: double(name='g3', description='Data quality evaluation indicator 3: time representativeness.', example='1.2345'),
      g4?: double(name='g4', description='Data quality evaluation indicator 4: geographic representativeness.', example='1.2345'),
    }(name='dataQualityResult', description='Data quality result.'),
    sensitivityList?: [ 
      {
        id?: string(name='id', description='Inventory id', example='1'),
        inventory?: string(name='inventory', description='Name of the inventory item.', example='energy'),
        reductionList?: [ string ](name='reductionList', description='List of emission reduction measures.'),
        sensitivity?: double(name='sensitivity', description='Sensitivity percentage.', example='91.7'),
      }
    ](name='sensitivityList', description='Sensitivity analysis list'),
    uncertainty?: string(name='uncertainty', description='Uncertainty value. The model\\"s overall percentage uncertainty results. "10.00%" symbolizes a 10.00% uncertainty, indicating that the carbon footprint lies within ±10.00%. This is derived from a weighted aggregation of individual inventory uncertainties.', example='10.00'),
    uncertaintyValues?: [ 
      {
        inventory?: string(name='inventory', description='The name of the inventory. Format: process name / inventory name.', example='process-1/inventory-1'),
        uncertaintyContribution?: string(name='uncertaintyContribution', description='Inventory uncertainty absolute contribution size. The impact of the quality of each inventory data on the carbon footprint results in the modeling process, when the uncertain contribution of a list is large, please improve its data quality as much as possible to improve the accuracy of carbon footprint analysis. The meaning of "1.4964" is not determined to contribute 1.4964 kgCO₂ e/unit, where unit is the unit of the product.', example='1.4964'),
      }
    ](name='uncertaintyValues', description='Uncertainty list'),
  }(name='data', description='The response parameters.'),
  requestId?: string(name='requestId', description='The ID of the request. The value is unique for each request. This facilitates subsequent troubleshooting.', example='4A0AEC56-5C9A-5D47-93DF-7227836FFF82'),
}

model GetDataQualityAnalysisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataQualityAnalysisResponseBody(name='body'),
}

/**
  * @description This API returns the data quality evaluation results based on the user-provided product ID. It\\"s useful for understanding the data quality of the carbon emission factors for each inventory of the product.
  * @param request  the request parameters of GetDataQualityAnalysis  GetDataQualityAnalysisRequest
  * @return GetDataQualityAnalysisResponse
 */
async function getDataQualityAnalysis(request: GetDataQualityAnalysisRequest): GetDataQualityAnalysisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDataQualityAnalysis', 'POST', '/api/v1/carbon/footprint/data/quality/analysis', 'json', false, 'json', request);
}

model GetDeviceInfoRequest {
  deviceId: string(name='deviceId', description='The ID of the device.

This parameter is required.', example='pn_69873', position='Query'),
  ds: string(name='ds', description='The time string in the YYYY-mm-dd format.

This parameter is required.', example='2022-07-26', position='Query'),
  factoryId: string(name='factoryId', description='The ID of the site.

This parameter is required.', example='pn_95', position='Query'),
}

model GetDeviceInfoResponseBody = {
  code?: string(name='code', description='The code returned for the request. A value of Success indicates that the request was successful. Other values indicate that the request failed. You can troubleshoot the error by viewing the error message returned.', example='Success'),
  data?: {
    deviceId?: string(name='deviceId', description='The ID of the device.', example='pn_69873'),
    deviceName?: string(name='deviceName', description='The name of the device.', example='Main transformer 4#'),
    firstTypeName?: string(name='firstTypeName', description='The level 1 meter type.', example='Electric meter'),
    recordList?: [ 
      {
        identifier?: string(name='identifier', description='The device identifier.', example='Ia'),
        paramName?: string(name='paramName', description='The parameter name.', example='Phase A current'),
        statisticsDate?: string(name='statisticsDate', description='The date on which the statistics were collected.', example='2022-07-26 00:00:00'),
        type?: string(name='type', description='The type of the measuring point.', example='DOUBLE'),
        unit?: string(name='unit', description='The unit of the parameter value.', example='A'),
        value?: double(name='value', description='The value of the measuring point.', example='20.00'),
      }
    ](name='recordList', description='The device parameters.'),
    secondTypeName?: string(name='secondTypeName', description='The level 2 meter type.', example='Gateway meter'),
  }(name='data', description='The data returned.'),
  httpCode?: int32(name='httpCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='True'),
}

model GetDeviceInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDeviceInfoResponseBody(name='body'),
}

/**
  * @description *   You can call this operation to query the parameters of a data collection device based on the device ID. If the verification is passed, the device parameters are returned. If the verification fails, a null value is returned.
  * *   You can query the parameters of a single device by day. If data of the device does not exist, a null value is returned.
  * - By current, endpoint only supports Hangzhou: `energyexpertexternal.cn-hangzhou.aliyuncs.com`.
  * - To use this API, you need to be added to the whitelist. Please contact us through  <props="china">[official website](https://energy.aliyun.com/ifa/web/defaultLoginPage?adapter=aliyun#/consult?source=%E8%83%BD%E8%80%97%E5%AE%9D%E7%99%BB%E5%BD%95%E9%A1%B5%EF%BC%88WEB%EF%BC%89) 
  * <props="intl">[official website](https://energy.alibabacloud.com/common?adapter=aliyun&lang=en-US#/home/en) to apply for whitelist activation.
  * @param request  the request parameters of GetDeviceInfo  GetDeviceInfoRequest
  * @return GetDeviceInfoResponse
 */
async function getDeviceInfo(request: GetDeviceInfoRequest): GetDeviceInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDeviceInfo', 'GET', '/api/external/getDeviceInfo', 'json', false, 'json', request);
}

model GetDeviceListRequest {
  factoryId: string(name='factoryId', description='The ID of the site.

This parameter is required.', example='pn_95', position='Query'),
}

model GetDeviceListResponseBody = {
  code?: string(name='code', description='The response code.', example='Success'),
  data?: {
    code?: string(name='code', description='The code returned for the request.', example='Success'),
    deviceList?: [ 
      {
        deviceId?: string(name='deviceId', description='The device ID.', example='pn_69873'),
        deviceName?: string(name='deviceName', description='The device name.', example='Main transformer 4#'),
        firstTypeName?: string(name='firstTypeName', description='The level 1 meter type.', example='Electric meter'),
        info?: {
          constKva?: int32(name='constKva', description='The rated capacity.
Unit is kVA.', example='100'),
          ct?: int32(name='ct', description='The transformation ratio of current.', example='1'),
          magnification?: int32(name='magnification', description='The magnification ratio.', example='80'),
          pressure?: int32(name='pressure', description='The high and low voltage.', example='0'),
          pt?: int32(name='pt', description='The transformation ratio of voltage.', example='80'),
        }(name='info', description='The device information.'),
        parentDevice?: string(name='parentDevice', description='The ID of the parent device.', example='pn_6987'),
        secondTypeName?: string(name='secondTypeName', description='The level 2 meter type.', example='Gateway meter'),
      }
    ](name='deviceList', description='The devices.'),
    factoryId?: string(name='factoryId', description='The ID of the site.', example='pn_95'),
    httpCode?: int32(name='httpCode', description='The HTTP status code.', example='200'),
    success?: boolean(name='success', description='Indicates whether the request was successful.', example='True'),
  }(name='data', description='The data returned.'),
  httpCode?: int32(name='httpCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model GetDeviceListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDeviceListResponseBody(name='body'),
}

/**
  * @description *   You can query the information about data collection devices of a site based on the ID of the site. If the verification is passed, the information about the devices of the site is returned. If the verification fails, a null value is returned.
  * *   Virtual meters at the site are not returned.
  * - By current, endpoint only supports Hangzhou: `energyexpertexternal.cn-hangzhou.aliyuncs.com`.
  * - To use this API, you need to be added to the whitelist. Please contact us through  <props="china">[official website](https://energy.aliyun.com/ifa/web/defaultLoginPage?adapter=aliyun#/consult?source=%E8%83%BD%E8%80%97%E5%AE%9D%E7%99%BB%E5%BD%95%E9%A1%B5%EF%BC%88WEB%EF%BC%89) 
  * <props="intl">[official website](https://energy.alibabacloud.com/common?adapter=aliyun&lang=en-US#/home/en) to apply for whitelist activation.
  * @param request  the request parameters of GetDeviceList  GetDeviceListRequest
  * @return GetDeviceListResponse
 */
async function getDeviceList(request: GetDeviceListRequest): GetDeviceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDeviceList', 'GET', '/api/external/getDeviceList', 'json', false, 'json', request);
}

model GetDocExtractionResultRequest {
  taskId: string(name='taskId', description='- Task ID.
- taskId is obtained from the SubmitDocExtractionTaskAdvance and SubmitDocExtractionTask interfaces.

This parameter is required.', example='97693b4c-17a8-4198-aa28-798d3c855577mhrv', position='Body'),
}

model GetDocExtractionResultResponseBody = {
  data?: {
    kvListInfo?: [ 
      {
        context?: {
          confidence?: {
            keyConfidence?: double(name='keyConfidence', description='Key confidence level', example='0.9994202852249146'),
            valueConfidence?: double(name='valueConfidence', description='value confidence level', example='0.9794202852249146'),
          }(name='confidence', description='Confidence level'),
          key?: [
            ContentItem
          ](name='key', description='Details of key recall information'),
          value?: [
            ContentItem
          ](name='value', description='Details of value recall information'),
        }(name='context', description='Recalled content'),
        keyName?: string(name='keyName', description='Field key name', example='Tenant'),
        keyValue?: string(name='keyValue', description='Field key value', example='Alibaba Cloud XXX Co., Ltd.'),
      }
    ](name='kvListInfo', description='Details of document parsing results'),
  }(name='data', description='Returned data structure.'),
  requestId?: string(name='requestId', description='ID of the request', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
}

model GetDocExtractionResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDocExtractionResultResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDocExtractionResult  GetDocExtractionResultRequest
  * @return GetDocExtractionResultResponse
 */
async function getDocExtractionResult(request: GetDocExtractionResultRequest): GetDocExtractionResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDocExtractionResult', 'POST', '/api/v2/aidoc/document/getDocExtractionResult', 'json', false, 'json', request);
}

model GetDocParsingResultRequest {
  returnFormat?: string(name='returnFormat', description='- The document parsing result supports two formats: markdown and json.
- By default, the result is returned in markdown format.', example='md', position='Body'),
  taskId: string(name='taskId', description='- Task ID.
- The taskId is obtained from the SubmitDocParsingTaskAdvance or SubmitDocParsingTask interfaces.

This parameter is required.', example='2c22388d-e2ed-44fe-99e6-99922f15e7bb', position='Body'),
}

model GetDocParsingResultResponseBody = {
  data?: {
    content?: string(name='content', description='- The parsed content of the document.
- The format (markdown or json) is determined by the returnFormat parameter. For specific format details, refer to: [json return structure](https://www.alibabacloud.com/help/en/energy-expert/developer-reference/interface-attached-information#b644b6255cojj)', example='{\\"doc_info\\":{\\"languages\\":[\\"zh\\",\\"en\\"],\\"doc_type\\":\\"pdf\\",\\"pdf_toc\\":[{\\"title\\":\\"封面\\",\\"level\\":0,\\"page\\":0}],\\"pages\\":366,\\"page_list\\":[{\\"imageWidth\\":596,\\"imageHeight\\":842,\\"pageIdAllDocs\\":0,\\"fileIndex\\":0,\\"pageIdCurDoc\\":0,\\"angle\\":0}],\\"doc_data\\":[{\\"uniqueId\\":\\"about_us_para\\",\\"page_num\\":\\"01\\",\\"index\\":\\"xxx\\",\\"name\\":\\"xxx\\",\\"type\\":\\"xxxx\\",\\"subType\\":\\"xxx\\",\\"text\\":\\"xxx\\",\\"before_text\\":\\"xxx\\",\\"after_text\\":\\"xxx\\",\\"extInfo\\":[{\\"uniqueId\\":\\"b0x1x0\\",\\"pos\\":[{\\"x\\":229,\\"y\\":208},{\\"x\\":421,\\"y\\":208},{\\"x\\":421,\\"y\\":242},{\\"x\\":229,\\"y\\":242}],\\"text\\":\\"Kurt Götze\\",\\"type\\":\\"Text\\",\\"subType\\":\\"Text\\",\\"pageNum\\":[0],\\"index\\":0}]}]}}'),
  }(name='data', description='Returned result.'),
  requestId?: string(name='requestId', description='ID of the request', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
}

model GetDocParsingResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDocParsingResultResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDocParsingResult  GetDocParsingResultRequest
  * @return GetDocParsingResultResponse
 */
async function getDocParsingResult(request: GetDocParsingResultRequest): GetDocParsingResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDocParsingResult', 'POST', '/api/v2/aidoc/document/getDocParsingResult', 'json', false, 'json', request);
}

model GetDocumentAnalyzeResultRequest {
  jobId: string(name='jobId', description='Job ID, specifying which document\\"s parsing result to query. This is a return parameter from the \\"Submit Document Parsing Job\\" interface.

This parameter is required.', example='bfce2248-1546-4298-8bcf-70ac26e69646', position='Body'),
}

model GetDocumentAnalyzeResultResponseBody = {
  data?: {
    kvListInfo?: [ 
      {
        context?: {
          confidence?: {
            keyConfidence?: double(name='keyConfidence', description='Confidence of Key', example='0.9994202852249146'),
            valueConfidence?: double(name='valueConfidence', description='Confidence of Value', example='0.9794202852249146'),
          }(name='confidence', description='Confidence'),
          key?: [
            ContentItem
          ](name='key', description='Key Recall Information'),
          value?: [
            ContentItem
          ](name='value', description='Value Recall Information'),
        }(name='context', description='Recalled Content'),
        keyName?: string(name='keyName', description='Field Key Name', example='Tenant'),
        keyValue?: string(name='keyValue', description='Field Key Value', example='Aliyun XXX Co., Ltd.'),
      }
    ](name='kvListInfo', description='Document Parsing Result'),
  }(name='data', description='Returned Data'),
  requestId?: string(name='requestId', description='Request ID', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
}

model GetDocumentAnalyzeResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDocumentAnalyzeResultResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDocumentAnalyzeResult  GetDocumentAnalyzeResultRequest
  * @return GetDocumentAnalyzeResultResponse
 */
async function getDocumentAnalyzeResult(request: GetDocumentAnalyzeResultRequest): GetDocumentAnalyzeResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDocumentAnalyzeResult', 'POST', '/api/v1/aidoc/document/getDocumentAnalyzeResult', 'json', false, 'json', request);
}

model GetElecConstituteRequest {
  code: string(name='code', description='The enterprise code.

This parameter is required.', example='C-20240202-01', position='Body'),
  year: int32(name='year', description='Year.

This parameter is required.', example='2024', position='Body'),
}

model GetElecConstituteResponseBody = {
  data?: {
    light?: {
      carbonEmissionData?: double(name='carbonEmissionData', description='Carbon emission.', example='1.2'),
      dataUnit?: string(name='dataUnit', description='The unit.', example='kWh'),
      name?: string(name='name', description='The name.', example='light'),
      nameKey?: string(name='nameKey', description='The unique identifier of name.', example='carbonInventory.check.light_electricity'),
      ratio?: double(name='ratio', description='Proportion of electricity consumption to all electricity consumption in the month: example value: 0.5 (i. e., 50%)', example='0.2'),
      rawData?: double(name='rawData', description='Electricity consumption', example='1.2'),
    }(name='light', description='Photoelectric power consumption and carbon emission data of each enterprise.'),
    nuclear?: {
      carbonEmissionData?: double(name='carbonEmissionData', description='Carbon emission.', example='2.3'),
      dataUnit?: string(name='dataUnit', description='The unit.', example='kWh'),
      name?: string(name='name', description='The name.', example='nuclear'),
      nameKey?: string(name='nameKey', description='The unique identifier of name.', example='carbonInventory.check.nuclear_electricity'),
      ratio?: double(name='ratio', description='Proportion of electricity consumption to all electricity consumption in the month: example value: 0.5 (i. e., 50%)', example='0.6'),
      rawData?: double(name='rawData', description='Electricity consumption', example='2'),
    }(name='nuclear', description='Data on nuclear power consumption and carbon emissions at each enterprise.'),
    renewing?: {
      carbonEmissionData?: double(name='carbonEmissionData', description='Carbon emission.', example='2.3'),
      dataUnit?: string(name='dataUnit', description='The unit.', example='kWh'),
      name?: string(name='name', description='The name.', example='renewing'),
      nameKey?: string(name='nameKey', description='The unique identifier of name.', example='carbonInventory.carbonEmissionAnalysis.components.CarbonDetail.keZaiShengZiYuan'),
      ratio?: double(name='ratio', description='Proportion of electricity consumption to all electricity consumption in the month: example value: 0.5 (i. e., 50%)', example='0.44'),
      rawData?: double(name='rawData', description='Electricity consumption', example='4.3'),
    }(name='renewing', description='Data on renewable electricity consumption and carbon emissions at each enterprise.'),
    urban?: {
      carbonEmissionData?: double(name='carbonEmissionData', description='Carbon emission.', example='1.2'),
      dataUnit?: string(name='dataUnit', description='The unit.', example='kWh'),
      name?: string(name='name', description='The name.', example='urban'),
      nameKey?: string(name='nameKey', description='The unique identifier of name.', example='carbonInventory.check.urban_electricity'),
      ratio?: double(name='ratio', description='Proportion of electricity consumption to all electricity consumption in the month: example value: 0.5 (i. e., 50%)', example='0.4'),
      rawData?: double(name='rawData', description='Electricity consumption', example='1.2'),
    }(name='urban', description='Data on mains power electricity consumption and carbon emission of each enterprise.'),
    water?: {
      carbonEmissionData?: double(name='carbonEmissionData', description='Carbon emission.', example='2.1'),
      dataUnit?: string(name='dataUnit', description='The unit.', example='kWh'),
      name?: string(name='name', description='The name.', example='water'),
      nameKey?: string(name='nameKey', description='The unique identifier of name.', example='carbonInventory.check.water_electricity'),
      ratio?: double(name='ratio', description='Proportion of electricity consumption to all electricity consumption in the month: example value: 0.5 (i. e., 50%)', example='0.4'),
      rawData?: double(name='rawData', description='Electricity consumption', example='1.2'),
    }(name='water', description='Hydropower consumption and carbon emission data of each enterprise.'),
    wind?: {
      carbonEmissionData?: double(name='carbonEmissionData', description='Carbon emission.', example='1.2'),
      dataUnit?: string(name='dataUnit', description='The unit.', example='kWh'),
      name?: string(name='name', description='The name.', example='wind'),
      nameKey?: string(name='nameKey', description='The unique identifier of name.', example='carbonInventory.check.wind_electricity'),
      ratio?: double(name='ratio', description='Proportion of electricity consumption to all electricity consumption in the month: example value: 0.5 (i. e., 50%)', example='0.3'),
      rawData?: double(name='rawData', description='Electricity consumption', example='1.1'),
    }(name='wind', description='Wind power consumption and carbon emission data of each enterprise.'),
    zero?: {
      carbonEmissionData?: double(name='carbonEmissionData', description='Carbon emission.', example='1.2'),
      dataUnit?: string(name='dataUnit', description='The unit.', example='kWh'),
      name?: string(name='name', description='The name.', example='zero'),
      nameKey?: string(name='nameKey', description='The unique identifier of name.', example='carbonInventory.carbonEmissionAnalysis.components.CarbonDetail.lingTanDianLi'),
      ratio?: double(name='ratio', description='Proportion of electricity consumption to all electricity consumption in the month: example value: 0.5 (i. e., 50%)', example='0.33'),
      rawData?: double(name='rawData', description='Electricity consumption', example='444.3'),
    }(name='zero', description='Data of zero electricity consumption and carbon emission of each enterprise.'),
  }(name='data', description='The returned data.'),
  requestId?: string(name='requestId', description='Id of the request.', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
}

model GetElecConstituteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetElecConstituteResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetElecConstitute  GetElecConstituteRequest
  * @return GetElecConstituteResponse
 */
async function getElecConstitute(request: GetElecConstituteRequest): GetElecConstituteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetElecConstitute', 'POST', '/api/v1/carbon/emission/analysis/elec/constitute', 'json', false, 'json', request);
}

model GetElecTrendRequest {
  code: string(name='code', description='The enterprise code.

This parameter is required.', example='C-20240115-3', position='Body'),
  yearList: [ int32 ](name='yearList', description='List of years.

This parameter is required.', position='Body'),
}

model GetElecTrendResponseBody = {
  code?: string(name='code', description='The code returned for the request. A value of Success indicates that the request was successful. Other values indicate that the request failed. You can troubleshoot the error by viewing the error message returned.', example='200'),
  data?: {
    light?: [ 
      {
        carbonEmissionData?: double(name='carbonEmissionData', description='Carbon emissions', example='3.14'),
        dataUnit?: string(name='dataUnit', description='The unit.', example='kWh'),
        month?: int32(name='month', description='Month', example='12'),
        name?: string(name='name', description='Power type name.', example='Solar Power'),
        nameKey?: string(name='nameKey', description='Power Type Code', example='carbonInventory.check.light_electricity'),
        ratio?: double(name='ratio', description='Proportion of electricity consumption to all electricity consumption in the month: example value: 0.5 (i. e. 50%).', example='0.5'),
        rawData?: double(name='rawData', description='Electricity consumption', example='3.14'),
        year?: string(name='year', description='Year', example='2024'),
      }
    ](name='light', description='Photoelectricity monthly electricity consumption and carbon emissions and other data.'),
    nuclear?: [ 
      {
        carbonEmissionData?: double(name='carbonEmissionData', description='Carbon emissions', example='3.14'),
        dataUnit?: string(name='dataUnit', description='The price unit.', example='kWh'),
        month?: int32(name='month', description='Month', example='12'),
        name?: string(name='name', description='Power Type Name', example='Nuclear power'),
        nameKey?: string(name='nameKey', description='Power Type Code', example='carbonInventory.check.nuclear_electricity'),
        ratio?: double(name='ratio', description='Proportion of electricity consumption to all electricity consumption in the month: example value: 0.5 (i. e., 50%)', example='0.5'),
        rawData?: double(name='rawData', description='Electricity consumption', example='3.14'),
        year?: string(name='year', description='Year', example='2024'),
      }
    ](name='nuclear', description='Monthly electricity consumption and carbon emissions data for nuclear power'),
    renewing?: [ 
      {
        carbonEmissionData?: double(name='carbonEmissionData', description='Carbon emissions', example='3.14'),
        dataUnit?: string(name='dataUnit', description='The price unit.', example='kWh'),
        month?: int32(name='month', description='Month', example='12'),
        name?: string(name='name', description='Power Type Name', example='Renewable electricity'),
        nameKey?: string(name='nameKey', description='Power Type Code', example='carbonInventory.carbonEmissionAnalysis.components.CarbonDetail.lingTanDianLi'),
        ratio?: double(name='ratio', description='Proportion of electricity consumption to all electricity consumption in the month: example value: 0.5 (i. e., 50%)', example='0.5'),
        rawData?: double(name='rawData', description='Electricity consumption', example='3.14'),
        year?: string(name='year', description='Year', example='2024'),
      }
    ](name='renewing', description='Monthly data on renewable electricity consumption and carbon emissions'),
    urban?: [ 
      {
        carbonEmissionData?: double(name='carbonEmissionData', description='Carbon emissions', example='3.14'),
        dataUnit?: string(name='dataUnit', description='The price unit.', example='kWh'),
        month?: int32(name='month', description='Month', example='12'),
        name?: string(name='name', description='Power Type Name', example='Grid power'),
        nameKey?: string(name='nameKey', description='Power Type Code', example='carbonInventory.check.urban_electricity'),
        ratio?: double(name='ratio', description='Proportion of electricity consumption to all electricity consumption in the month: example value: 0.5 (i. e. 50%).', example='0.5'),
        rawData?: double(name='rawData', description='Electricity consumption', example='3.14'),
        year?: string(name='year', description='Year', example='2024'),
      }
    ](name='urban', description='Data such as monthly electricity consumption and carbon emissions from the mains.'),
    water?: [ 
      {
        carbonEmissionData?: double(name='carbonEmissionData', description='Carbon emissions', example='3.14'),
        dataUnit?: string(name='dataUnit', description='The unit.', example='kWh'),
        month?: int32(name='month', description='Month', example='12'),
        name?: string(name='name', description='Power Type Name', example='Hydro power'),
        nameKey?: string(name='nameKey', description='Power Type Code', example='carbonInventory.check.water_electricity'),
        ratio?: double(name='ratio', description='Proportion of electricity consumption to all electricity consumption in the month: example value: 0.5 (i. e. 50%).', example='0.5'),
        rawData?: double(name='rawData', description='Electricity consumption', example='3.14'),
        year?: string(name='year', description='Year', example='2024'),
      }
    ](name='water', description='Monthly data on electricity consumption and carbon emissions for hydropower.'),
    wind?: [ 
      {
        carbonEmissionData?: double(name='carbonEmissionData', description='Carbon emissions', example='3.14'),
        dataUnit?: string(name='dataUnit', description='The price unit.', example='kWh'),
        month?: int32(name='month', description='Month', example='12'),
        name?: string(name='name', description='Power Type Name', example='Wind power'),
        nameKey?: string(name='nameKey', description='Power Type Code', example='carbonInventory.check.wind_electricity'),
        ratio?: double(name='ratio', description='Proportion of electricity consumption to all electricity consumption in the month: example value: 0.5 (i. e., 50%)', example='0.5'),
        rawData?: double(name='rawData', description='Electricity consumption', example='3.14'),
        year?: string(name='year', description='Year', example='2024'),
      }
    ](name='wind', description='Monthly wind power consumption and carbon emission data'),
    zero?: [ 
      {
        carbonEmissionData?: double(name='carbonEmissionData', description='Carbon emissions', example='3.14'),
        dataUnit?: string(name='dataUnit', description='The price unit.', example='kWh'),
        month?: int32(name='month', description='Month', example='12'),
        name?: string(name='name', description='Power Type Name', example='Zero carbon electricity'),
        nameKey?: string(name='nameKey', description='Power Type Code', example='carbonInventory.carbonEmissionAnalysis.components.CarbonDetail.lingTanDianLi'),
        ratio?: double(name='ratio', description='Proportion of electricity consumption to all electricity consumption in the month: example value: 0.5 (i. e., 50%)', example='0.5'),
        rawData?: double(name='rawData', description='Electricity consumption', example='3.14'),
        year?: string(name='year', description='Year', example='2024'),
      }
    ](name='zero', description='Zero electricity monthly electricity consumption and carbon emissions and other data.'),
  }(name='data', description='The returned data.'),
  requestId?: string(name='requestId', description='The request ID.', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
}

model GetElecTrendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetElecTrendResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetElecTrend  GetElecTrendRequest
  * @return GetElecTrendResponse
 */
async function getElecTrend(request: GetElecTrendRequest): GetElecTrendResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetElecTrend', 'POST', '/api/v1/carbon/emission/analysis/elec/trend', 'json', false, 'json', request);
}

model GetEmissionSourceConstituteRequest {
  code: string(name='code', description='The enterprise code.

This parameter is required.', example='C-20240119-1', position='Body'),
  moduleCode?: string(name='moduleCode', description='Module code.', example='carbonInventory.check.scope_1_direct_ghg_emissions', position='Body'),
  moduleType: int32(name='moduleType', description='Module type.

This parameter is required.', example='3', position='Body'),
  year: int32(name='year', description='Year of inventory.

This parameter is required.', example='2024', position='Body'),
}

model GetEmissionSourceConstituteResponseBody = {
  data?: [
    ConstituteItem
  ](name='data', description='Response parameters'),
  requestId?: string(name='requestId', description='Id of the request', example='9bc20a5a-b26b-4c28-922a-7cd10b61f96f'),
}

model GetEmissionSourceConstituteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEmissionSourceConstituteResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetEmissionSourceConstitute  GetEmissionSourceConstituteRequest
  * @return GetEmissionSourceConstituteResponse
 */
async function getEmissionSourceConstitute(request: GetEmissionSourceConstituteRequest): GetEmissionSourceConstituteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetEmissionSourceConstitute', 'POST', '/api/v1/carbon/emission/analysis/constitute', 'json', false, 'json', request);
}

model GetEmissionSummaryRequest {
  code: string(name='code', description='The enterprise code.

This parameter is required.', example='C-20240119-1', position='Body'),
  moduleCode?: string(name='moduleCode', description='Module code.', example='carbonInventory.check.scope_1_direct_ghg_emissions', position='Body'),
  moduleType?: int32(name='moduleType', description='Module type.', example='3', position='Body'),
  year: int32(name='year', description='Year of inventory.

This parameter is required.', example='2024', position='Body'),
}

model GetEmissionSummaryResponseBody = {
  data?: {
    actualEmissionRatio?: double(name='actualEmissionRatio', description='Percentage of scheduled.', example='2.7657'),
    carbonSaveConversion?: double(name='carbonSaveConversion', description='Carbon emissions reduction.', example='0.0'),
    currentPeriodCarbonEmissionData?: double(name='currentPeriodCarbonEmissionData', description='Statistical indicators for this cycle.', example='276.4'),
    isWeighting?: boolean(name='isWeighting', description='Whether to show the weighting ratio carbon emission.', example='true'),
    lastPeriodCarbonEmissionData?: double(name='lastPeriodCarbonEmissionData', description='Last period statistical indicators.', example='9.40100'),
    lastPeriodWeightingCarbonEmissionData?: double(name='lastPeriodWeightingCarbonEmissionData', description='Calculation of carbon emissions based on shareholding ratio in the last cycle.', example='8.4609'),
    ratio?: double(name='ratio', description='Year-on-year.', example='28.410'),
    totalCarbonEmissionData?: double(name='totalCarbonEmissionData', description='Total carbon emissions.', example='276.46'),
    weightingCarbonEmissionData?: double(name='weightingCarbonEmissionData', description='Calculate carbon emissions by share ratio', example='248.81400'),
    weightingRatio?: double(name='weightingRatio', description='Year-on-year of weighting ratio carbon emissions.', example='28.4102'),
  }(name='data', description='Details of summarized data'),
  requestId?: string(name='requestId', description='Id of the request.', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
}

model GetEmissionSummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEmissionSummaryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetEmissionSummary  GetEmissionSummaryRequest
  * @return GetEmissionSummaryResponse
 */
async function getEmissionSummary(request: GetEmissionSummaryRequest): GetEmissionSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetEmissionSummary', 'POST', '/api/v1/carbon/emission/analysis/summary', 'json', false, 'json', request);
}

model GetEpdInventoryConstituteRequest {
  code: string(name='code', description='The enterprise code.

This parameter is required.', example='C-20080808-1', position='Body'),
  productId: long(name='productId', description='The product id.

This parameter is required.', example='1024', position='Body'),
  productType: long(name='productType', description='Product type: 1 indicates that the carbon footprint of the product is requested, and 5 indicates that the carbon footprint of the supply chain is requested.

This parameter is required.', example='1', position='Body'),
}

model GetEpdInventoryConstituteResponseBody = {
  data?: [
    EpdInventoryConstituteItem
  ](name='data', description='List of environmental impact results.'),
  requestId?: string(name='requestId', description='The ID of the request. The value is unique for each request. This facilitates subsequent troubleshooting.', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
}

model GetEpdInventoryConstituteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEpdInventoryConstituteResponseBody(name='body'),
}

/**
  * @description This API returns the emission amounts for various environmental impact categories at different levels for the given product ID. It helps understand the emission quantities for different environmental impact categories and inventories of the product.
  * @param request  the request parameters of GetEpdInventoryConstitute  GetEpdInventoryConstituteRequest
  * @return GetEpdInventoryConstituteResponse
 */
async function getEpdInventoryConstitute(request: GetEpdInventoryConstituteRequest): GetEpdInventoryConstituteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetEpdInventoryConstitute', 'POST', '/api/v1/carbon/footprint/result/epd/inventory/constitute', 'json', false, 'json', request);
}

model GetEpdSummaryRequest {
  code: string(name='code', description='The enterprise code.

This parameter is required.', example='C-20080808-1', position='Body'),
  productId: long(name='productId', description='The product id.

This parameter is required.', example='1024', position='Body'),
  productType: long(name='productType', description='Product type: 1 indicates that the carbon footprint of the product is requested, and 5 indicates that the carbon footprint of the supply chain is requested.

This parameter is required.', example='1', position='Body'),
}

model GetEpdSummaryResponseBody = {
  data?: [ 
    {
      carbonEmission?: double(name='carbonEmission', description='Emissions. The result is maintained up to 31 decimal places for precise intermediate calculation and subsequently truncated for display. It is advised to pair the emissions figure with the unit of the environmental impact result for a comprehensive understanding.', example='1009.976265540000000000000000000000'),
      indicator?: string(name='indicator', description='The evaluation index adopted for the environmental impact', example='GWP100a'),
      key?: string(name='key', description='The category key. The environmental impact category. Currently, a maximum of 19 categories are supported. Enumeration refers to [Carbon Footprint Appendices](https://carbon-doc.oss-cn-hangzhou.aliyuncs.com/CarbonFootprintAppendices-en.pdf).', example='gwp'),
      method?: string(name='method', description='Calculation method standard', example='CML v4.8 2016'),
      name?: string(name='name', description='The name of the category.', example='climate change'),
      num?: long(name='num', description='Category num: the unique serial number of the environmental impact category. A maximum of 19 categories are supported. Enumeration refers to [Carbon Footprint Appendices](https://carbon-doc.oss-cn-hangzhou.aliyuncs.com/CarbonFootprintAppendices-en.pdf).', example='1'),
      preUnit?: string(name='preUnit', description='Environmental impact result Value Unit.', example='kg CO2-Eq'),
      state?: long(name='state', description='The data status. 1 indicates that the calculation is accurate, 2 indicates that the default data is used, and 3 indicates that the missing factor uses the value of 0.', example='1'),
    }
  ](name='data', description='Response parameters'),
  requestId?: string(name='requestId', description='The ID of the request. The value is unique for each request. This facilitates subsequent troubleshooting.', example='B91B5559-065A-55C3-8D75-DA218EBFD1DC'),
}

model GetEpdSummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEpdSummaryResponseBody(name='body'),
}

/**
  * @description This API takes a product ID from the user and returns the summary of environmental impact generated for the product. This info helps understand the overall emissions for different environmental impact categories of the product.
  * @param request  the request parameters of GetEpdSummary  GetEpdSummaryRequest
  * @return GetEpdSummaryResponse
 */
async function getEpdSummary(request: GetEpdSummaryRequest): GetEpdSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetEpdSummary', 'POST', '/api/v1/carbon/footprint/result/epd/summary', 'json', false, 'json', request);
}

model GetFootprintListRequest {
  code: string(name='code', description='The enterprise code.

This parameter is required.', example='C-20080808-1', position='Body'),
  currentPage: long(name='currentPage', description='The pagination parameter. The number of the page that starts from 1.

This parameter is required.', example='1', position='Body'),
  pageSize: long(name='pageSize', description='The number of entries returned on each page.

This parameter is required.', example='10', position='Body'),
  productType: long(name='productType', description='Product type: 1 indicates that the carbon footprint of the product is requested, and 5 indicates that the carbon footprint of the supply chain is requested.

This parameter is required.', example='1', position='Body'),
}

model GetFootprintListResponseBody = {
  data?: {
    currentPage?: long(name='currentPage', description='The page number.', example='1'),
    pageSize?: long(name='pageSize', description='The number of entries returned on each page.', example='10'),
    records?: [ 
      {
        amount?: double(name='amount', description='The amount of the product.', example='100.0000000000000000000000000'),
        authStatus?: long(name='authStatus', description='Authentication status enumeration value, please refer to [link](https://carbon-doc.oss-cn-hangzhou.aliyuncs.com/CarbonFootprintAppendices-en.pdf).', example='1'),
        checkEndTime?: string(name='checkEndTime', description='Calculation end time.', example='2024/01/31'),
        checkStartTime?: string(name='checkStartTime', description='Calculation start time.', example='2024/01/01'),
        code?: string(name='code', description='The enterprise code.', example='C-20080808-1'),
        createdBy?: string(name='createdBy', description='The user who created it.', example='Energy Expert'),
        id?: long(name='id', description='The product ID.', example='1024'),
        isDemoModel?: long(name='isDemoModel', description='Indicates whether the demo model is a built-in model. A value of 1 indicates a true value and a value of 0 indicates a false value.', example='1'),
        lifeCycle?: string(name='lifeCycle', description='The literal expression corresponding to lifeCycleType, `From Cradle to Gate` and `From Cradle to Grave`.', example='From Cradle to Gate'),
        lifeCycleType?: long(name='lifeCycleType', description='1 is `From Cradle to Gate`, and 2 is `From Cradle to Grave`.', example='1'),
        name?: string(name='name', description='The product name.', example='Carbon-footprint-demo'),
        type?: string(name='type', description='Product category enumeration value, please refer to [Carbon Footprint Appendices](https://carbon-doc.oss-cn-hangzhou.aliyuncs.com/CarbonFootprintAppendices-en.pdf).', example='158-159'),
        unit?: string(name='unit', description='Unit enumeration value. Please refer to [Carbon Footprint Appendices](https://carbon-doc.oss-cn-hangzhou.aliyuncs.com/CarbonFootprintAppendices-en.pdf).', example='1-4'),
      }
    ](name='records', description='Product Detail List.'),
    total?: long(name='total', description='The total number of entries returned.', example='21'),
    totalPage?: long(name='totalPage', description='Total Pages', example='3'),
  }(name='data', description='The response parameters.'),
  requestId?: string(name='requestId', description='The ID of the request. The value is unique for each request. This facilitates subsequent troubleshooting.', example='06DA2909-7736-5738-AA31-ACD617D828F1'),
}

model GetFootprintListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFootprintListResponseBody(name='body'),
}

/**
  * @description With user-specified parameters such as enterprise code, current page, and page size, this API returns a list of matching product carbon footprints (or supply chain carbon footprints), including product names and product IDs. The product ID can be used as input parameters in other APIs to get the corresponding product\\"s detailed information.
  * @param request  the request parameters of GetFootprintList  GetFootprintListRequest
  * @return GetFootprintListResponse
 */
async function getFootprintList(request: GetFootprintListRequest): GetFootprintListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetFootprintList', 'POST', '/api/v1/carbon/footprint/product/list', 'json', false, 'json', request);
}

model GetGasConstituteRequest {
  code: string(name='code', description='The enterprise code.

This parameter is required.', example='C-20240115-3', position='Body'),
  moduleCode?: string(name='moduleCode', description='Module code.', example='carbonInventory.check.scope_1_direct_ghg_emissions', position='Body'),
  moduleType: int32(name='moduleType', description='Module type.

This parameter is required.', example='3', position='Body'),
  year: int32(name='year', description='Year

This parameter is required.', example='2024', position='Body'),
}

model GetGasConstituteResponseBody = {
  data?: [ 
    {
      carbonEmissionData?: double(name='carbonEmissionData', description='Carbon emissions', example='3.14'),
      gasEmissionData?: double(name='gasEmissionData', description='Gas emissions', example='3.14'),
      name?: string(name='name', description='Name of gas', example='CO₂'),
      ratio?: double(name='ratio', description='Proportion of carbon emissions. Example value: 0.5 (50%)', example='0.5'),
      type?: int32(name='type', description='Gas Type', example='1'),
    }
  ](name='data', description='The data returned.'),
  requestId?: string(name='requestId', description='The request ID.', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
}

model GetGasConstituteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetGasConstituteResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetGasConstitute  GetGasConstituteRequest
  * @return GetGasConstituteResponse
 */
async function getGasConstitute(request: GetGasConstituteRequest): GetGasConstituteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetGasConstitute', 'POST', '/api/v1/carbon/emission/analysis/gas/constitute', 'json', false, 'json', request);
}

model GetGwpBenchmarkListRequest {
  code: string(name='code', description='The enterprise code.

This parameter is required.', example='C-20080808-1', position='Body'),
  productId: long(name='productId', description='The product id.

This parameter is required.', example='1024', position='Body'),
  productType: long(name='productType', description='Product type: 1 indicates that the carbon footprint of the product is requested, and 5 indicates that the carbon footprint of the supply chain is requested.

This parameter is required.', example='1', position='Body'),
}

model GetGwpBenchmarkListResponseBody = {
  data?: {
    items?: [ 
      {
        activeReduction?: double(name='activeReduction', description='`activeReduction=benchmarkEmission-carbonEmission` Generally, baseline emissions are greater than inventory emissions. Maintain four decimal places. Unit pertains to a higher-level unit.', example='0.2169'),
        benchmarkEmission?: double(name='benchmarkEmission', description='Benchmark emissions. Maintain four decimal places. Unit pertains to a higher-level unit.', example='0.0108'),
        benchmarkName?: string(name='benchmarkName', description='Benchmark name', example='old-energy'),
        carbonEmission?: double(name='carbonEmission', description='Inventory emissions. Maintain four decimal places. Unit pertains to a higher-level unit.', example='-0.2061'),
        name?: string(name='name', description='name', example='new-energy'),
        percent?: string(name='percent', description='Unused temporarily.', example='null'),
      }
    ](name='items', description='Active carbon reduction ranking list.'),
    unit?: string(name='unit', description='unit of emissions. The default value is `kgCO₂e/productUnit`. 
The `productUnit` is the unit selected for the product. The unit value is changed to `tCO₂e/productUnit` or `gCO₂e/productUnit`. For more information, see the remarks in the quantity column.', example='kgCO₂e/kg'),
  }(name='data', description='The response parameters.'),
  requestId?: string(name='requestId', description='The ID of the request. The value is unique for each request. This facilitates subsequent troubleshooting.', example='A8AEC6D9-A359-5169-BD1A-BD848BA60D65'),
}

model GetGwpBenchmarkListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetGwpBenchmarkListResponseBody(name='body'),
}

/**
  * @description This interface returns a list of proactive carbon reduction information given product ID. It\\"s used to understand the carbon reduction efforts at various levels of the product.
  * @param request  the request parameters of GetGwpBenchmarkList  GetGwpBenchmarkListRequest
  * @return GetGwpBenchmarkListResponse
 */
async function getGwpBenchmarkList(request: GetGwpBenchmarkListRequest): GetGwpBenchmarkListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetGwpBenchmarkList', 'POST', '/api/v1/carbon/footprint/result/gwp/benchmark/list', 'json', false, 'json', request);
}

model GetGwpBenchmarkSummaryRequest {
  code: string(name='code', description='The enterprise code.

This parameter is required.', example='C-20080808-1', position='Body'),
  productId: long(name='productId', description='The product id.

This parameter is required.', example='1024', position='Body'),
  productType: long(name='productType', description='Product type: 1 indicates that the carbon footprint of the product is requested, and 5 indicates that the carbon footprint of the supply chain is requested.

This parameter is required.', example='1', position='Body'),
}

model GetGwpBenchmarkSummaryResponseBody = {
  data?: {
    items?: [ 
      {
        name?: string(name='name', description='Name of carbon reduction details.', example='Energy-Replacement'),
        percent?: string(name='percent', description='Percentage of emissions. The value is of the string type. Two decimal places are reserved for numbers. For example, "99.01" indicates the 99.01% of this type of emissions to the total emissions. Note that the returned string itself does not contain a percent sign.', example='99.01'),
        quantity?: long(name='quantity', description='Emission amount is presented with four decimal places. Normally, modeling doesn\\"t result in negative values, but users can represent carbon reductions as negatives. The amount, paired with the unit, defines the emissions. Both are dynamically adjusted. If emissions exceed `1000 kgCO₂e/productUnit`, they convert to `tCO₂e/productUnit`. If they fall below `1 kgCO₂e/productUnit`, they convert to `gCO₂e/productUnit`. Otherwise, they stay in `kgCO₂e/productUnit`.', example='9.9763'),
        unit?: string(name='unit', description='Unit of emissions. The default value is `kgCO₂e/productUnit.` `productUnit` is the unit selected for the product. The unit value is changed to `tCO₂e/productUnit` or `gCO₂e/productUnit`. For more information, see the remarks in the quantity column.', example='kgCO₂e/kg'),
      }
    ](name='items', description='Carbon Reduction Contribution Top4 Details.'),
    quantity?: long(name='quantity', description='Emission amount is presented with four decimal places. Normally, modeling doesn\\"t result in negative values, but users can represent carbon reductions as negatives. The amount, paired with the unit, defines the emissions. Both are dynamically adjusted. If emissions exceed `1000 kgCO₂e/productUnit`, they convert to `tCO₂e/productUnit`. If they fall below `1 kgCO₂e/productUnit`, they convert to `gCO₂e/productUnit`. Otherwise, they stay in `kgCO₂e/productUnit`.', example='1000.0000'),
    unit?: string(name='unit', description='Unit of emissions. The default value is `kgCO₂e/productUnit.` `productUnit` is the unit selected for the product. The unit value is changed to `tCO₂e/productUnit` or `gCO₂e/productUnit`. For more information, see the remarks in the quantity column.', example='kgCO₂e/t'),
  }(name='data', description='The response parameters.'),
  requestId?: string(name='requestId', description='The ID of the request. The value is unique for each request. This facilitates subsequent troubleshooting.', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
}

model GetGwpBenchmarkSummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetGwpBenchmarkSummaryResponseBody(name='body'),
}

/**
  * @description The API takes a product ID and returns data on the carbon emissions reduction along with a list of the top four contributors to carbon reduction. This info helps understand the total carbon reduction of the product and its main sources.
  * @param request  the request parameters of GetGwpBenchmarkSummary  GetGwpBenchmarkSummaryRequest
  * @return GetGwpBenchmarkSummaryResponse
 */
async function getGwpBenchmarkSummary(request: GetGwpBenchmarkSummaryRequest): GetGwpBenchmarkSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetGwpBenchmarkSummary', 'POST', '/api/v1/carbon/footprint/result/gwp/benchmark/summary', 'json', false, 'json', request);
}

model GetGwpInventoryConstituteRequest {
  code: string(name='code', description='The enterprise code.

This parameter is required.', example='C-20080808-1', position='Body'),
  productId: long(name='productId', description='The product id.

This parameter is required.', example='1024', position='Body'),
  productType: long(name='productType', description='Product type: 1 indicates that the carbon footprint of the product is requested, and 5 indicates that the carbon footprint of the supply chain is requested.

This parameter is required.', example='1', position='Body'),
}

model GetGwpInventoryConstituteResponseBody = {
  data?: {
    byResourceType?: [
      GwpInventoryConstitute
    ](name='byResourceType', description='Aggregated by resource type of an inventory.'),
    carbonEmission?: double(name='carbonEmission', description='Emission quantity: may be positive, negative, or 0. To ensure the calculation accuracy, 24 decimal places are reserved for the calculation process. We recommend that you intercept data based on your business requirements.', example='1009.976265540000000000000000000000'),
    items?: [
      GwpInventoryConstitute
    ](name='items', description='Organized by hierarchy from high to low, according to the flow-> process-> inventory hierarchy.'),
    name?: string(name='name', description='The name.', example='This is not used for displaying'),
    unit?: string(name='unit', description='Emission Unit.', example='kgCO₂e/t'),
  }(name='data', description='The response parameters.'),
  requestId?: string(name='requestId', description='The ID of the request. The value is unique for each request. This facilitates subsequent troubleshooting.', example='06DA2909-7736-5738-AA31-ACD617D828F1'),
}

model GetGwpInventoryConstituteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetGwpInventoryConstituteResponseBody(name='body'),
}

/**
  * @description Used to obtain the carbon emission composition analysis of a specified product. Carbon emission composition analysis includes two analysis dimensions: inventory and type. In the rendering effect, including a hierarchical list and pie chart.
  * @param request  the request parameters of GetGwpInventoryConstitute  GetGwpInventoryConstituteRequest
  * @return GetGwpInventoryConstituteResponse
 */
async function getGwpInventoryConstitute(request: GetGwpInventoryConstituteRequest): GetGwpInventoryConstituteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetGwpInventoryConstitute', 'POST', '/api/v1/carbon/footprint/result/gwp/inventory/constitute', 'json', false, 'json', request);
}

model GetGwpInventorySummaryRequest {
  code: string(name='code', description='The enterprise code.

This parameter is required.', example='C-20080808-1', position='Body'),
  productId: long(name='productId', description='The product id.

This parameter is required.', example='1024', position='Body'),
  productType: long(name='productType', description='Product type: 1 indicates that the carbon footprint of the product is requested, and 5 indicates that the carbon footprint of the supply chain is requested.

This parameter is required.', example='1', position='Body'),
}

model GetGwpInventorySummaryResponseBody = {
  data?: {
    items?: [ 
      {
        name?: string(name='name', description='Inventory resource type name.', example='Energy'),
        percent?: string(name='percent', description='Percentage.', example='99.01'),
        quantity?: double(name='quantity', description='Quantity.', example='9.9763'),
        unit?: string(name='unit', description='The unit.', example='kgCO₂e/Piece(s)'),
      }
    ](name='items', description='Top 4 types of carbon footprint contribution.'),
    quantity?: double(name='quantity', description='The emission quantity.', example='1.0100'),
    resultGenerateTime?: long(name='resultGenerateTime', description='The time when the result was generated, in the millisecond timestamp format.', example='1709108026000'),
    unit?: string(name='unit', description='Emission Unit.', example='tCO₂e/Piece(s)'),
  }(name='data', description='The returned results.'),
  requestId?: string(name='requestId', description='The ID of the request. The value is unique for each request. This facilitates subsequent troubleshooting.', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
}

model GetGwpInventorySummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetGwpInventorySummaryResponseBody(name='body'),
}

/**
  * @description Returns the total carbon footprint data for the user-specified product ID, along with details on the top four contributors to the carbon footprint, helping to understand the overall carbon footprint and its main components.
  * @param request  the request parameters of GetGwpInventorySummary  GetGwpInventorySummaryRequest
  * @return GetGwpInventorySummaryResponse
 */
async function getGwpInventorySummary(request: GetGwpInventorySummaryRequest): GetGwpInventorySummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetGwpInventorySummary', 'POST', '/api/v1/carbon/footprint/result/gwp/inventory/summary', 'json', false, 'json', request);
}

model GetInventoryListRequest {
  code: string(name='code', description='The enterprise code.

This parameter is required.', example='C-20080808-1', position='Body'),
  emissionType: string(name='emissionType', description='Type of emission

>  Valid values: footprint | emission. Meaning: footprint: all inventories are involved in the calculation; emission: only inventories with positive and zero emissions are involved in the calculation, and negative numbers are not involved in the calculation.

This parameter is required.', example='footprint', position='Body'),
  group: string(name='group', description='Group by

>  Valid values: resource | process | resourceType | processType. Meaning: resource: aggregation by inventory group, process: aggregation by operation group, resourceType: aggregation by inventory type, processType: aggregation by phase group

This parameter is required.', example='resource', position='Body'),
  methodType: string(name='methodType', description='The type of the obtained environmental impact: gwp indicates the carbon footprint of climate change. 
<props="intl">[For more information, see the environment impact category enumeration.](https://www.alibabacloud.com/help/en/energy-expert/developer-reference/enumerated-values-of-energy-expert#RhGn7)

This parameter is required.', example='gwp', position='Body'),
  productId: long(name='productId', description='The product id.

This parameter is required.', example='1024', position='Body'),
  productType: long(name='productType', description='Product type: 1 indicates that the carbon footprint of the product is requested, and 5 indicates that the carbon footprint of the supply chain is requested.

This parameter is required.', example='1', position='Body'),
}

model GetInventoryListResponseBody = {
  data?: {
    items?: [ 
      {
        carbonEmission?: double(name='carbonEmission', description='Emission quantity: may be positive, negative, or 0. To ensure the calculation accuracy, 24 decimal places are reserved for the calculation process. We recommend that you intercept data based on your business requirements.', example='1000.000000000000000000000000000000'),
        name?: string(name='name', description='Name 

> The name is related to the request parameters group. Request parameters: resource, return name parameter meaning: list name; request parameters: process, return name parameter meaning: process name; request parameters: resourceType, return name parameter meaning: inventory resource type name; request parameters: processType, return name parameter meaning: flow name.', example='Energy'),
        percent?: string(name='percent', description='Percentage', example='99.01'),
        processName?: string(name='processName', description='Process Name: It is only meaningful when the request parameters group is resource.', example='Process-1'),
      }
    ](name='items', description='Inventory detail.'),
    productUnit?: string(name='productUnit', description='Unit of product.', example='kg'),
    unit?: string(name='unit', description='Emission Unit: The default value is kgCO₂ /productUnit. productUnit is the unit selected for the product. The unit value is changed to tCO₂ e/productUnit or gCO₂ e/productUnit based on the emission quantity. For more information, see the quantity column.', example='kgCO₂e/kg'),
  }(name='data', description='The response parameters.'),
  requestId?: string(name='requestId', description='The ID of the request. The value is unique for each request. This facilitates subsequent troubleshooting.', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
}

model GetInventoryListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInventoryListResponseBody(name='body'),
}

/**
  * @description This interface retrieves a descending order list of emissions for a specified product ID, environmental impact method, group level, and calculation method. It\\"s used to understand various environmental impact emission scenarios.
  * @param request  the request parameters of GetInventoryList  GetInventoryListRequest
  * @return GetInventoryListResponse
 */
async function getInventoryList(request: GetInventoryListRequest): GetInventoryListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetInventoryList', 'POST', '/api/v1/carbon/footprint/result/inventory/list', 'json', false, 'json', request);
}

model GetOrgAndFactoryRequest {
}

model GetOrgAndFactoryResponseBody = {
  code?: string(name='code', description='The code returned for the request.', example='Success'),
  data?: [ 
    {
      aliyunPk?: string(name='aliyunPk', description='The Alibaba Cloud account ID.', example='1319617584664960'),
      factoryList?: [ 
        {
          factoryId?: string(name='factoryId', description='The site ID.', example='pn_95'),
          factoryName?: string(name='factoryName', description='The site name.', example='Ledi Industrial Park 1'),
        }
      ](name='factoryList', description='The sites.'),
      organizationId?: string(name='organizationId', description='The enterprise ID.', example='6265f42XXXX2fec150'),
      organizationName?: string(name='organizationName', description='The enterprise name.', example='Ledi Industrial Park'),
    }
  ](name='data', description='data'),
  httpCode?: int32(name='httpCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='True'),
}

model GetOrgAndFactoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOrgAndFactoryResponseBody(name='body'),
}

/**
  * @description *   If an activated site exists, the information about the site and the organization to which the site belongs is returned. If no activated site exists, null is returned.
  * - By current, endpoint only supports Hangzhou: `energyexpertexternal.cn-hangzhou.aliyuncs.com`.
  * - To use this API, you need to be added to the whitelist. Please contact us through  <props="china">[official website](https://energy.aliyun.com/ifa/web/defaultLoginPage?adapter=aliyun#/consult?source=%E8%83%BD%E8%80%97%E5%AE%9D%E7%99%BB%E5%BD%95%E9%A1%B5%EF%BC%88WEB%EF%BC%89) 
  * <props="intl">[official website](https://energy.alibabacloud.com/common?adapter=aliyun&lang=en-US#/home/en) to apply for whitelist activation.
  * @param request  the request parameters of GetOrgAndFactory  GetOrgAndFactoryRequest
  * @return GetOrgAndFactoryResponse
 */
async function getOrgAndFactory(request: GetOrgAndFactoryRequest): GetOrgAndFactoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetOrgAndFactory', 'GET', '/api/external/getOrgAndFactory', 'json', false, 'json', request);
}

model GetOrgConstituteRequest {
  code: string(name='code', description='The enterprise code.

This parameter is required.', example='Z-20240115-2', position='Body'),
  moduleCode?: string(name='moduleCode', description='Module code.', example='carbonInventory.check.scope_1_direct_ghg_emissions', position='Body'),
  moduleType: int32(name='moduleType', description='Module type.

This parameter is required.', example='3', position='Body'),
  year: int32(name='year', description='Year.

This parameter is required.', example='2024', position='Body'),
}

model GetOrgConstituteResponseBody = {
  data?: OrgEmission(name='data', description='The data returned.'),
  requestId?: string(name='requestId', description='The request ID.', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
}

model GetOrgConstituteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOrgConstituteResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetOrgConstitute  GetOrgConstituteRequest
  * @return GetOrgConstituteResponse
 */
async function getOrgConstitute(request: GetOrgConstituteRequest): GetOrgConstituteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetOrgConstitute', 'POST', '/api/v1/carbon/emission/analysis/org', 'json', false, 'json', request);
}

model GetPcrInfoRequest {
  code: string(name='code', description='The enterprise code.

This parameter is required.', example='C-20080808-1', position='Body'),
  productId: string(name='productId', description='The product id.

This parameter is required.', example='1024', position='Body'),
  productType: long(name='productType', description='Product type: 1 indicates that the carbon footprint of the product is requested, and 5 indicates that the carbon footprint of the supply chain is requested.

This parameter is required.', example='1', position='Body'),
}

model GetPcrInfoResponseBody = {
  data?: {
    createTime?: string(name='createTime', description='The timestamp when the report was created. The timestamp is in milliseconds.', example='1709109790532'),
    name?: string(name='name', description='Report name', example='report name'),
    url?: string(name='url', description='Download url link.', example='https://energy.alibabacloud.com'),
  }(name='data', description='The response parameters.'),
  requestId?: string(name='requestId', description='The ID of the request. The value is unique for each request. This facilitates subsequent troubleshooting.', example='4A0AEC56-5C9A-5D47-93DF-7227836FFF82'),
}

model GetPcrInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPcrInfoResponseBody(name='body'),
}

/**
  * @description With the user-specified product ID, this interface retrieves detailed information and download links for previously generated PCR reports. To use it, two conditions must be met: 1) the result has already been generated; 2) the PCR report has been created.
  * @param request  the request parameters of GetPcrInfo  GetPcrInfoRequest
  * @return GetPcrInfoResponse
 */
async function getPcrInfo(request: GetPcrInfoRequest): GetPcrInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetPcrInfo', 'POST', '/api/v1/carbon/footprint/result/pcr/detail', 'json', false, 'json', request);
}

model GetReductionProposalRequest {
  code: string(name='code', description='The enterprise code.

This parameter is required.', example='C-20080808-1', position='Body'),
  dataQualityEvaluationType: int32(name='dataQualityEvaluationType', description='The type of the data quality evaluation. 1 is DQI and 2 is DQR.

This parameter is required.', example='1', position='Body'),
  productId: long(name='productId', description='The product id.

This parameter is required.', example='1024', position='Body'),
  productType: long(name='productType', description='Product type: 1 indicates that the carbon footprint of the product is requested, and 5 indicates that the carbon footprint of the supply chain is requested.

This parameter is required.', example='1', position='Body'),
}

model GetReductionProposalResponseBody = {
  data?: {
    reduction?: string(name='reduction', description='Proactive carbon reduction recommendations and advice.', example='Reduce one-drop usage'),
    reductionEvaluation?: string(name='reductionEvaluation', description='Active carbon reduction assessment.', example='Trying Energy Expert for a more detailed assessment.'),
  }(name='data', description='The returned data.'),
  requestId?: string(name='requestId', description='The ID of the request. The value is unique for each request. This facilitates subsequent troubleshooting.', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
}

model GetReductionProposalResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetReductionProposalResponseBody(name='body'),
}

/**
  * @description This API returns carbon reduction proposals based on the product ID. It\\"s useful for understanding optimization tips to reduce the carbon emissions associated with a product.
  * @param request  the request parameters of GetReductionProposal  GetReductionProposalRequest
  * @return GetReductionProposalResponse
 */
async function getReductionProposal(request: GetReductionProposalRequest): GetReductionProposalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetReductionProposal', 'POST', '/api/v1/carbon/footprint/result/reduction/proposal', 'json', false, 'json', request);
}

model GetVLExtractionResultRequest {
  taskId: string(name='taskId', description='- taskID.

- The taskId is obtained from the interfaces SubmitVLExtractionTaskAdvance and SubmitVLExtractionTask.

This parameter is required.', example='1436b6f5-ddea-4308-9d1c-60939e5d5ea8', position='Body'),
}

model GetVLExtractionResultResponseBody = {
  data?: {
    kvListInfo?: [ 
      {
        context?: {
          confidence?: {
            keyConfidence?: double(name='keyConfidence', description='Confidence of Key', example='0.9994202852249146'),
            valueConfidence?: double(name='valueConfidence', description='Confidence of Value', example='0.9794202852249146'),
          }(name='confidence', description='Confidence'),
          key?: [
            ContentItem
          ](name='key', description='Key recall information details'),
          value?: [
            ContentItem
          ](name='value', description='Value Recall Information'),
        }(name='context', description='Recall content'),
        keyName?: string(name='keyName', description='Field Key name', example='Tenant'),
        keyValue?: string(name='keyValue', description='Field key value', example='Alibaba Cloud XXX Co., Ltd.'),
      }
    ](name='kvListInfo', description='Document Parsing Result'),
  }(name='data', description='Returned Data'),
  requestId?: string(name='requestId', description='Id of the request', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
}

model GetVLExtractionResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetVLExtractionResultResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetVLExtractionResult  GetVLExtractionResultRequest
  * @return GetVLExtractionResultResponse
 */
async function getVLExtractionResult(request: GetVLExtractionResultRequest): GetVLExtractionResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetVLExtractionResult', 'POST', '/api/v2/aidoc/document/getVLExtractionResult', 'json', false, 'json', request);
}

model IsCompletedRequest {
  code: string(name='code', description='The enterprise code.

This parameter is required.', example='C-20080808-1', position='Body'),
  productId: long(name='productId', description='The product id.

This parameter is required.', example='1024', position='Body'),
  productType: long(name='productType', description='Product type: 1 indicates that the carbon footprint of the product is requested, and 5 indicates that the carbon footprint of the supply chain is requested.

This parameter is required.', example='1', position='Body'),
}

model IsCompletedResponseBody = {
  data?: {
    modifiedTime?: long(name='modifiedTime', description='Modified time in milliseconds, e.g. 1711438780000.', example='1711438780000'),
    taskKey?: string(name='taskKey', description='The unique key of this generation task.', example='550c2b7b-f2e0-4176-ab0a-53ea4b355721'),
    taskShortResult?: string(name='taskShortResult', description='Unused temporarily.', example='null'),
    taskStatus?: string(name='taskStatus', description='The status of the report generation task. The possible values are `running`, `success`, and `error`, which mean generating, generating succeeded, and generating failed, respectively. If you encounter a result generation failure, check the model, correct the model, and then generate the result again.', example='running'),
  }(name='data', description='The response parameters.'),
  requestId?: string(name='requestId', description='The ID of the request. The value is unique for each request. This facilitates subsequent troubleshooting.', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
}

model IsCompletedResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IsCompletedResponseBody(name='body'),
}

/**
  * @description This API checks the completion status of generating a report. It should be used before calling other result APIs, as they will only display content once the report generation is complete.
  * @param request  the request parameters of IsCompleted  IsCompletedRequest
  * @return IsCompletedResponse
 */
async function isCompleted(request: IsCompletedRequest): IsCompletedResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'IsCompleted', 'POST', '/api/v1/carbon/footprint/result/completed', 'json', false, 'json', request);
}

model PushDeviceDataRequest {
  deviceType: string(name='deviceType', description='The type of the device. [View device type definitions](https://carbon-doc.oss-cn-hangzhou.aliyuncs.com/Deviceappendixes-en.pdf)

This parameter is required.', example='1', position='Body'),
  devices: [ 
    {
      data: map[string]any(name='data', description='Measuring point information To avoid accuracy problems, the measurement point data is uniformly transmitted to the string. The function of missing required fields cannot be used normally. Some functions may be affected due to the lack of recommend fields. For details, please refer to the notes of equipment measuring points in the appendix. [Reference Point Definition](https://carbon-doc.oss-cn-hangzhou.aliyuncs.com/Deviceappendixes-en.pdf
)

This parameter is required.', example='{
			"dp_imp": "329.0",
			"F": "148.0",
			"eq_imp": "363.0",
			"Ep_imp_1": "128.0",
			"Ep_imp_2": "157.0",
			"Ua": "226.0",
			"Ub": "285.0",
			"Ep_imp": "325.0",
			"Uc": "342.0",
			"Ep_imp_3": "109.0",
			"Ep_imp_4": "94.0",
			"P": "514.0",
			"Pa": "443.0",
			"Q": "265.0",
			"dp_exp": "261.0",
			"eq_exp": "399.0",
			"COSQ": "223.0",
			"Ia": "240.0",
			"Ib": "216.0",
			"Ic": "229.0",
			"Ep_exp": "115.0",
			"VdisPer": "120.0"
		}'),
      deviceId: string(name='deviceId', description='If the deviceType parameter is set to 12, 13, or 17, you must set the system_id parameter. The field name is still device_id. If the deviceType parameter is set to 15 or 16, no Other situations will be transmitted.

This parameter is required.', example='device_code_xxx'),
      recordTime: string(name='recordTime', description='Data generation time of measuring point.

This parameter is required.', example='2021-09-08 18:40:00'),
    }
  ](name='devices', description='List of devices to which data is pushed.

This parameter is required.', position='Body'),
}

model PushDeviceDataResponseBody = {
  data?: string(name='data', description='Whether the data is pushed successfully. Success is returned.', example='success'),
  requestId?: string(name='requestId', description='The request ID.', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
}

model PushDeviceDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PushDeviceDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PushDeviceData  PushDeviceDataRequest
  * @return PushDeviceDataResponse
 */
async function pushDeviceData(request: PushDeviceDataRequest): PushDeviceDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PushDeviceData', 'POST', '/api/v1/data/increment/push', 'json', false, 'json', request);
}

model PushItemDataRequest {
  code: string(name='code', description='The enterprise code.

This parameter is required.', example='C-20210223-01', position='Body'),
  items: {
    code: string(name='code', description='API data identification.<props="intl">For details: [GetDataItemList ](https://www.alibabacloud.com/help/en/energy-expert/developer-reference/api-energyexpertexternal-2022-09-23-getdataitemlist)

This parameter is required.', example='demo_api_code'),
    month: string(name='month', description='The month.

This parameter is required.', example='1'),
    value: double(name='value', description='The value of the data item.

This parameter is required.', example='1.11'),
  }(name='items', description='List of data to be pushed.

This parameter is required.', position='Body'),
  year: string(name='year', description='The year of the data created.

This parameter is required.', example='2024', position='Body'),
}

model PushItemDataResponseBody = {
  data?: boolean(name='data', description='Whether the data is pushed successfully.', example='true'),
  requestId?: string(name='requestId', description='The request ID.', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
}

model PushItemDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PushItemDataResponseBody(name='body'),
}

/**
  * @description - This interface is used for individual data item data.
  * - Data items can link data to services such as carbon footprints and carbon inventories.
  * - Depending on the platform configuration, active data on a yearly and monthly basis is supported.
  * @param request  the request parameters of PushItemData  PushItemDataRequest
  * @return PushItemDataResponse
 */
async function pushItemData(request: PushItemDataRequest): PushItemDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PushItemData', 'POST', '/api/v1/carbon/emission/data/item/push', 'json', false, 'json', request);
}

model RecalculateCarbonEmissionRequest {
  code: string(name='code', description='The enterprise code.

This parameter is required.', example='C-20240202-01', position='Body'),
  year: string(name='year', description='Year of inventory.

This parameter is required.', example='2024', position='Body'),
}

model RecalculateCarbonEmissionResponseBody = {
  data?: boolean(name='data', description='The returned data. A value of true indicates that the request is successful. A value of false indicates that the request fails.', example='true'),
  requestId?: string(name='requestId', description='The request ID.', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
}

model RecalculateCarbonEmissionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RecalculateCarbonEmissionResponseBody(name='body'),
}

/**
  * @description - After uploading the data items, you need to call this interface to recalculate the carbon inventory data.
  * @param request  the request parameters of RecalculateCarbonEmission  RecalculateCarbonEmissionRequest
  * @return RecalculateCarbonEmissionResponse
 */
async function recalculateCarbonEmission(request: RecalculateCarbonEmissionRequest): RecalculateCarbonEmissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RecalculateCarbonEmission', 'POST', '/api/v1/carbon/emission/data/item/recalculate', 'json', false, 'json', request);
}

model SendDocumentAskQuestionRequest {
  folderId?: string(name='folderId', description='Folder ID, used to specify the range of documents for the query. If it is empty, it indicates that all documents under the tenant will be queried.', example='1a851c4a-1d65-11ef-99a7-ssfsfdd', position='Body'),
  prompt: string(name='prompt', description='The question queried by the user

This parameter is required.', example='Total carbon emissions in 2023', position='Body'),
  sessionId?: string(name='sessionId', description='Q&A session ID, used to record multiple Q&A interactions of the same user. If it is empty, it indicates that sessions are not distinguished.', example='bfce2248-1546-4298-8bcf-70ac26e69646', position='Body'),
}

model SendDocumentAskQuestionResponseBody = {
  data?: {
    answer?: string(name='answer', description='Q&A result', example='Carbon emissions in 2023 totaled 4.681 million tons'),
    document?: [ string ](name='document', description='Documents associated with the answer returned by the query'),
  }(name='data', description='Returned data'),
  requestId?: string(name='requestId', description='Request ID', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
}

model SendDocumentAskQuestionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendDocumentAskQuestionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SendDocumentAskQuestion  SendDocumentAskQuestionRequest
  * @return SendDocumentAskQuestionResponse
 */
async function sendDocumentAskQuestion(request: SendDocumentAskQuestionRequest): SendDocumentAskQuestionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SendDocumentAskQuestion', 'POST', '/api/v1/aidoc/document/sendDocumentAskQuestion', 'json', false, 'json', request);
}

model SetRunningPlanRequest {
  controlType?: int32(name='controlType', example='0', position='Body'),
  dateType?: int32(name='dateType', example='0', position='Body'),
  earliestStartupTime?: string(name='earliestStartupTime', example='05:00:00', position='Body'),
  endTime?: string(name='endTime', example='2024-07-21', position='Body'),
  factoryId: string(name='factoryId', description='This parameter is required.', example='***', position='Body'),
  latestShutdownTime?: string(name='latestShutdownTime', example='05:30:00', position='Body'),
  maxCarbonDioxide?: double(name='maxCarbonDioxide', example='2.1', position='Body'),
  maxTem?: double(name='maxTem', example='3.1', position='Body'),
  minTem?: double(name='minTem', example='2.1', position='Body'),
  pKey?: string(name='pKey', example='ib', position='Body'),
  seasonMode?: int32(name='seasonMode', example='0', position='Body'),
  startTime?: string(name='startTime', example='2024-07-20', position='Body'),
  statisticsTime?: string(name='statisticsTime', example='2024-07-31', position='Body'),
  systemId: string(name='systemId', description='This parameter is required.', example='system1', position='Body'),
  workingEndTime?: string(name='workingEndTime', example='05:30:00', position='Body'),
  workingStartTime?: string(name='workingStartTime', example='05:00:00', position='Body'),
}

model SetRunningPlanResponseBody = {
  data?: boolean(name='data', example='true'),
  requestId?: string(name='requestId', description='Id of the request', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
}

model SetRunningPlanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetRunningPlanResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetRunningPlan  SetRunningPlanRequest
  * @return SetRunningPlanResponse
 */
async function setRunningPlan(request: SetRunningPlanRequest): SetRunningPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SetRunningPlan', 'POST', '/api/v1/carbon/hvac/setRunningPlan', 'json', false, 'json', request);
}

