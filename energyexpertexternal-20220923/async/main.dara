/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'energyExpertExternal';
  @version = '2022-09-23';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model GetDeviceInfoRequest {
  deviceId: string(name='deviceId', example='pn_69873', position='Query'),
  ds: string(name='ds', example='2022-07-26', position='Query'),
  factoryId: string(name='factoryId', example='pn_95', position='Query'),
}

model GetDeviceInfoResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    deviceId?: string(name='deviceId', example='pn_69873'),
    deviceName?: string(name='deviceName'),
    firstTypeName?: string(name='firstTypeName'),
    recordList?: [ 
      {
        identifier?: string(name='identifier', example='Ia'),
        paramName?: string(name='paramName'),
        statisticsDate?: string(name='statisticsDate', example='2022-07-26 00:00:00'),
        type?: string(name='type', example='DOUBLE'),
        unit?: string(name='unit', example='A'),
        value?: double(name='value', example='20.00'),
      }
    ](name='recordList'),
    secondTypeName?: string(name='secondTypeName'),
  }(name='data'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
  success?: boolean(name='success'),
}

model GetDeviceInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetDeviceInfoResponseBody(name='body'),
}

async function getDeviceInfo(request: GetDeviceInfoRequest): GetDeviceInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDeviceInfo', 'GET', '/api/external/getDeviceInfo', 'json', false, 'json', request);
}

model GetDeviceListRequest {
  factoryId: string(name='factoryId', example='pn_95', position='Query'),
}

model GetDeviceListResponseBody = {
  code?: string(name='code'),
  data?: {
    code?: string(name='code', example='Success'),
    deviceList?: [ 
      {
        deviceId?: string(name='deviceId', example='pn_69873'),
        deviceName?: string(name='deviceName'),
        firstTypeName?: string(name='firstTypeName'),
        info?: {
          constKva?: int32(name='constKva', example='100'),
          ct?: int32(name='ct', example='1'),
          magnification?: int32(name='magnification', example='80'),
          pressure?: int32(name='pressure', example='0'),
          pt?: int32(name='pt', example='80'),
        }(name='info'),
        parentDevice?: string(name='parentDevice', example='pn_6987'),
        secondTypeName?: string(name='secondTypeName'),
      }
    ](name='deviceList'),
    factoryId?: string(name='factoryId', example='pn_95'),
    httpCode?: int32(name='httpCode', example='200'),
    success?: boolean(name='success'),
  }(name='data'),
  httpCode?: int32(name='httpCode'),
  requestId?: string(name='requestId', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
  success?: boolean(name='success'),
}

model GetDeviceListResponse = {
  headers: map[string]string(name='headers'),
  body: GetDeviceListResponseBody(name='body'),
}

async function getDeviceList(request: GetDeviceListRequest): GetDeviceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDeviceList', 'GET', '/api/external/getDeviceList', 'json', false, 'json', request);
}

model GetOrgAndFactoryRequest {
}

model GetOrgAndFactoryResponseBody = {
  code?: string(name='code', example='Success'),
  data?: [ 
    {
      aliyunPk?: string(name='aliyunPk'),
      factoryList?: [ 
        {
          factoryId?: string(name='factoryId', example='pn_95'),
          factoryName?: string(name='factoryName'),
        }
      ](name='factoryList'),
      organizationId?: string(name='organizationId'),
      organizationName?: string(name='organizationName'),
    }
  ](name='data'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
  success?: boolean(name='success'),
}

model GetOrgAndFactoryResponse = {
  headers: map[string]string(name='headers'),
  body: GetOrgAndFactoryResponseBody(name='body'),
}

async function getOrgAndFactory(request: GetOrgAndFactoryRequest): GetOrgAndFactoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetOrgAndFactory', 'GET', '/api/external/getOrgAndFactory', 'json', false, 'json', request);
}

