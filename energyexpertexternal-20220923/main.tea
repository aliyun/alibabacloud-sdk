/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('energyexpertexternal', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model GetDeviceInfoRequest {
  deviceId?: string(name='deviceId', example='pn_69873'),
  ds?: string(name='ds', example='2022-07-26'),
  factoryId?: string(name='factoryId', example='pn_95'),
}

model GetDeviceInfoResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    deviceId?: string(name='deviceId', example='pn_69873'),
    deviceName?: string(name='deviceName'),
    firstTypeName?: string(name='firstTypeName'),
    recordList?: [ 
      {
        identifier?: string(name='identifier', example='Ia'),
        paramName?: string(name='paramName'),
        statisticsDate?: string(name='statisticsDate', example='2022-07-26 00:00:00'),
        type?: string(name='type', example='DOUBLE'),
        unit?: string(name='unit', example='A'),
        value?: double(name='value', example='20.00'),
      }
    ](name='recordList'),
    secondTypeName?: string(name='secondTypeName'),
  }(name='data'),
  errorMessage?: string(name='errorMessage', example='Access was denied, message: Unauthorized.'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', description='Id of the request', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
  success?: boolean(name='success', example='True'),
}

model GetDeviceInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDeviceInfoResponseBody(name='body'),
}

async function getDeviceInfoWithOptions(request: GetDeviceInfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDeviceInfoResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.deviceId)) {
    query['deviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.ds)) {
    query['ds'] = request.ds;
  }
  if (!Util.isUnset(request.factoryId)) {
    query['factoryId'] = request.factoryId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDeviceInfo',
    version = '2022-09-23',
    protocol = 'HTTPS',
    pathname = `/api/external/getDeviceInfo`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDeviceInfo(request: GetDeviceInfoRequest): GetDeviceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getDeviceInfoWithOptions(request, headers, runtime);
}

model GetDeviceListRequest {
  factoryId?: string(name='factoryId', example='pn_95'),
}

model GetDeviceListResponseBody = {
  data?: {
    code?: string(name='code', example='Success'),
    deviceList?: [ 
      {
        deviceId?: string(name='deviceId', example='pn_69873'),
        deviceName?: string(name='deviceName'),
        firstTypeName?: string(name='firstTypeName'),
        info?: {
          constKva?: int32(name='constKva', example='100'),
          ct?: int32(name='ct', example='1'),
          magnification?: int32(name='magnification', example='80'),
          pressure?: int32(name='pressure', example='0'),
          pt?: int32(name='pt', example='80'),
        }(name='info'),
        parentDevice?: string(name='parentDevice', example='pn_6987'),
        secondTypeName?: string(name='secondTypeName'),
      }
    ](name='deviceList'),
    errorMessage?: string(name='errorMessage', example='Access was denied, message: Unauthorized.'),
    factoryId?: string(name='factoryId', example='pn_95'),
    httpCode?: int32(name='httpCode', example='200'),
    success?: boolean(name='success', example='True'),
  }(name='data'),
  requestId?: string(name='requestId', description='Id of the request', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
}

model GetDeviceListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDeviceListResponseBody(name='body'),
}

async function getDeviceListWithOptions(request: GetDeviceListRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDeviceListResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.factoryId)) {
    query['factoryId'] = request.factoryId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDeviceList',
    version = '2022-09-23',
    protocol = 'HTTPS',
    pathname = `/api/external/getDeviceList`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDeviceList(request: GetDeviceListRequest): GetDeviceListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getDeviceListWithOptions(request, headers, runtime);
}

model GetOrgAndFactoryResponseBody = {
  code?: string(name='code', example='Success'),
  data?: [ 
    {
      aliyunPk?: string(name='aliyunPk', example='1319617584664960'),
      factoryList?: [ 
        {
          factoryId?: string(name='factoryId', example='pn_95'),
          factoryName?: string(name='factoryName'),
        }
      ](name='factoryList'),
      organizationName?: string(name='organizationName'),
    }
  ](name='data', description='data'),
  errorMessage?: string(name='errorMessage', example='Access was denied, message: Unauthorized.'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', description='Id of the request', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
  success?: boolean(name='success', example='True'),
}

model GetOrgAndFactoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOrgAndFactoryResponseBody(name='body'),
}

async function getOrgAndFactoryWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): GetOrgAndFactoryResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetOrgAndFactory',
    version = '2022-09-23',
    protocol = 'HTTPS',
    pathname = `/api/external/getOrgAndFactory`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getOrgAndFactory(): GetOrgAndFactoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getOrgAndFactoryWithOptions(headers, runtime);
}

