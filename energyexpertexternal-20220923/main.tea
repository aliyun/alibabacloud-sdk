/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('energyexpertexternal', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CarbonEmissionElecSummaryItem {
  carbonEmissionData?: double(name='carbonEmissionData'),
  dataUnit?: string(name='dataUnit'),
  name?: string(name='name'),
  ratio?: double(name='ratio'),
  rawData?: double(name='rawData'),
}

model ConstituteItem {
  carbonEmissionData?: double(name='carbonEmissionData'),
  dataUnit?: string(name='dataUnit'),
  emissionSource?: string(name='emissionSource'),
  emissionSourceKey?: string(name='emissionSourceKey'),
  enterpriseName?: string(name='enterpriseName'),
  envGasEmissions?: [ 
    {
      carbonEmissionData?: double(name='carbonEmissionData'),
      gasEmissionData?: double(name='gasEmissionData'),
      name?: string(name='name'),
      type?: string(name='type'),
    }
  ](name='envGasEmissions'),
  name?: string(name='name'),
  nameKey?: string(name='nameKey'),
  ratio?: double(name='ratio'),
  rawData?: double(name='rawData'),
  subConstituteItems?: [
    ConstituteItem
  ](name='subConstituteItems'),
}

model EpdInventoryConstituteItem {
  carbonEmission?: double(name='carbonEmission'),
  factor?: string(name='factor'),
  factorDataset?: string(name='factorDataset'),
  factorId?: string(name='factorId'),
  factorType?: int32(name='factorType'),
  factorUnit?: string(name='factorUnit'),
  inventoryId?: long(name='inventoryId'),
  inventoryUnit?: string(name='inventoryUnit'),
  inventoryValue?: double(name='inventoryValue'),
  inventoryValuePerProduct?: double(name='inventoryValuePerProduct'),
  inventoryValuePerProductUnit?: string(name='inventoryValuePerProductUnit'),
  items?: [
    EpdInventoryConstituteItem
  ](name='items'),
  name?: string(name='name'),
  num?: long(name='num'),
  percent?: double(name='percent'),
  quantity?: double(name='quantity'),
  resourceType?: string(name='resourceType'),
  state?: int32(name='state'),
  unit?: string(name='unit'),
}

model GwpInventoryConstitute {
  byResourceType?: [
    GwpResourceConstitute
  ](name='byResourceType'),
  carbonEmission?: double(name='carbonEmission'),
  items?: [
    GwpInventoryConstitute
  ](name='items'),
  name?: string(name='name'),
  percent?: double(name='percent'),
  resourceType?: int32(name='resourceType'),
  unit?: string(name='unit'),
}

model GwpResourceConstitute {
  carbonEmission?: double(name='carbonEmission'),
  name?: string(name='name'),
  percent?: string(name='percent'),
  resourceType?: int32(name='resourceType'),
  unit?: string(name='unit'),
}

model OrgEmission {
  carbonEmissionData?: double(name='carbonEmissionData'),
  moduleEmissionList?: [ 
    {
      carbonEmissionData?: double(name='carbonEmissionData'),
      name?: string(name='name'),
      nameKey?: string(name='nameKey'),
      ratio?: double(name='ratio'),
    }
  ](name='moduleEmissionList'),
  name?: string(name='name'),
  nameKey?: string(name='nameKey'),
  ratio?: double(name='ratio'),
  subEmissionItems?: [
    OrgEmission
  ](name='subEmissionItems'),
  weightingCarbonEmissionData?: double(name='weightingCarbonEmissionData'),
  weightingProportion?: double(name='weightingProportion'),
  weightingRatio?: double(name='weightingRatio'),
}

model GenerateResultRequest {
  code?: string(name='code', description='The enterprise code.', example='C-20080808-1'),
  productId?: long(name='productId', description='The product id.', example='1024'),
  productType?: long(name='productType', description='Product type: 1 indicates that the carbon footprint of the product is requested, and 5 indicates that the carbon footprint of the supply chain is requested.', example='1'),
}

model GenerateResultResponseBody = {
  data?: boolean(name='data', description='The returned data. `true` indicates that the request is successful, `false` indicates that the request fails.', example='true'),
  requestId?: string(name='requestId', description='The ID of the request. The value is unique for each request. This facilitates subsequent troubleshooting.', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
}

model GenerateResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateResultResponseBody(name='body'),
}

async function generateResultWithOptions(request: GenerateResultRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GenerateResultResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.code)) {
    body['code'] = request.code;
  }
  if (!Util.isUnset(request.productId)) {
    body['productId'] = request.productId;
  }
  if (!Util.isUnset(request.productType)) {
    body['productType'] = request.productType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GenerateResult',
    version = '2022-09-23',
    protocol = 'HTTPS',
    pathname = `/api/v1/carbon/footprint/result/generate`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function generateResult(request: GenerateResultRequest): GenerateResultResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return generateResultWithOptions(request, headers, runtime);
}

model GetAreaElecConstituteRequest {
  code?: string(name='code', description='The enterprise code.', example='Z-20240115-2'),
  year?: int32(name='year', description='Year.', example='2024'),
}

model GetAreaElecConstituteResponseBody = {
  code?: string(name='code', description='The code returned for the request. A value of Success indicates that the request was successful. Other values indicate that the request failed. You can troubleshoot the error by viewing the error message returned.', example='200'),
  data?: {
    light?: [
      CarbonEmissionElecSummaryItem
    ](name='light', description='Photoelectric power consumption and carbon emission data of each enterprise.'),
    nuclear?: [
      CarbonEmissionElecSummaryItem
    ](name='nuclear', description='Data on nuclear power consumption and carbon emissions at each enterprise.'),
    renewing?: [
      CarbonEmissionElecSummaryItem
    ](name='renewing', description='Data on renewable electricity consumption and carbon emissions at each enterprise.'),
    urban?: [
      CarbonEmissionElecSummaryItem
    ](name='urban', description='Data on mains electricity consumption and carbon emission of each enterprise.'),
    water?: [
      CarbonEmissionElecSummaryItem
    ](name='water', description='Hydropower consumption and carbon emission data of each enterprise.'),
    wind?: [
      CarbonEmissionElecSummaryItem
    ](name='wind', description='Wind power consumption and carbon emission data of each enterprise.'),
    zero?: [
      CarbonEmissionElecSummaryItem
    ](name='zero', description='Data of zero electricity consumption and carbon emission of each enterprise.'),
  }(name='data', description='The returned data.'),
  requestId?: string(name='requestId', description='The request ID.', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
}

model GetAreaElecConstituteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAreaElecConstituteResponseBody(name='body'),
}

async function getAreaElecConstituteWithOptions(request: GetAreaElecConstituteRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAreaElecConstituteResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.code)) {
    body['code'] = request.code;
  }
  if (!Util.isUnset(request.year)) {
    body['year'] = request.year;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetAreaElecConstitute',
    version = '2022-09-23',
    protocol = 'HTTPS',
    pathname = `/api/v1/carbon/emission/analysis/elec/area`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAreaElecConstitute(request: GetAreaElecConstituteRequest): GetAreaElecConstituteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getAreaElecConstituteWithOptions(request, headers, runtime);
}

model GetCarbonEmissionTrendRequest {
  code?: string(name='code', description='The enterprise code.', example='C-20240119-1'),
  moduleCode?: string(name='moduleCode', description='Module code.', example='carbonInventory.check.scope_1_direct_ghg_emissions'),
  moduleType?: int32(name='moduleType', description='Module type.', example='3'),
  trendType?: int32(name='trendType', description='Trend Type.', example='0'),
  yearList?: [ int32 ](name='yearList', description='The list of inventory year.'),
}

model GetCarbonEmissionTrendResponseBody = {
  data?: {
    actualEmissionList?: [ 
      {
        items?: [ 
          {
            carbonEmissionData?: double(name='carbonEmissionData', description='Carbon emissions.', example='20.22'),
            month?: int32(name='month', description='The month.', example='11'),
            year?: string(name='year', description='The year.', example='2024'),
          }
        ](name='items', description='Data item list.'),
        year?: string(name='year', description='The year.', example='2024'),
      }
    ](name='actualEmissionList', description='Actual emission list.'),
    targetEmissionList?: [ 
      {
        items?: [ 
          {
            carbonEmissionData?: double(name='carbonEmissionData', description='Carbon emissions.', example='20.22'),
            month?: int32(name='month', description='The month.', example='10'),
            year?: string(name='year', description='The year.', example='2024'),
          }
        ](name='items', description='Data item list.'),
        year?: string(name='year', description='The year.', example='2024'),
      }
    ](name='targetEmissionList', description='Target Emission List.'),
  }(name='data', description='The response parameters.'),
  requestId?: string(name='requestId', description='Id of the request.', example='9bc20a5a-b26b-4c28-922a-7cd10b61f96f'),
}

model GetCarbonEmissionTrendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCarbonEmissionTrendResponseBody(name='body'),
}

async function getCarbonEmissionTrendWithOptions(request: GetCarbonEmissionTrendRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetCarbonEmissionTrendResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.code)) {
    body['code'] = request.code;
  }
  if (!Util.isUnset(request.moduleCode)) {
    body['moduleCode'] = request.moduleCode;
  }
  if (!Util.isUnset(request.moduleType)) {
    body['moduleType'] = request.moduleType;
  }
  if (!Util.isUnset(request.trendType)) {
    body['trendType'] = request.trendType;
  }
  if (!Util.isUnset(request.yearList)) {
    body['yearList'] = request.yearList;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetCarbonEmissionTrend',
    version = '2022-09-23',
    protocol = 'HTTPS',
    pathname = `/api/v1/carbon/emission/analysis/trend`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCarbonEmissionTrend(request: GetCarbonEmissionTrendRequest): GetCarbonEmissionTrendResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getCarbonEmissionTrendWithOptions(request, headers, runtime);
}

model GetDataItemListRequest {
  code?: string(name='code', description='The enterprise code.', example='C-202302-01'),
}

model GetDataItemListResponseBody = {
  data?: [ 
    {
      code?: string(name='code', description='The identifier of the data item.', example='item_code'),
      name?: string(name='name', description='The name of the data item.', example='name_bbb'),
      period?: int32(name='period', description='Data filling method, 1: monthly value 2: annual value.', example='1'),
      unit?: string(name='unit', description='The data item unit.', example='kg'),
    }
  ](name='data', description='Response parameters.'),
  requestId?: string(name='requestId', description='The request ID.', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
}

model GetDataItemListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataItemListResponseBody(name='body'),
}

async function getDataItemListWithOptions(request: GetDataItemListRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDataItemListResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.code)) {
    body['code'] = request.code;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDataItemList',
    version = '2022-09-23',
    protocol = 'HTTPS',
    pathname = `/api/v1/carbon/emission/data/item/list`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDataItemList(request: GetDataItemListRequest): GetDataItemListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getDataItemListWithOptions(request, headers, runtime);
}

model GetDataQualityAnalysisRequest {
  code?: string(name='code', description='The enterprise code.', example='C-20080808-1'),
  dataQualityEvaluationType?: long(name='dataQualityEvaluationType', description='Data quality assessment type: 1 is DQI and 2 is DQR.', example='1'),
  productId?: long(name='productId', description='The product id.', example='1024'),
  productType?: long(name='productType', description='Product type: 1 indicates that the carbon footprint of the product is requested, and 5 indicates that the carbon footprint of the supply chain is requested.', example='1'),
}

model GetDataQualityAnalysisResponseBody = {
  data?: {
    dataQuality?: [ 
      {
        inventory?: string(name='inventory', description='Inventory name', example='energy'),
        score?: {
          g1?: double(name='g1', description='Data quality evaluation indicator 1: activity data credibility.', example='3'),
          g2?: double(name='g2', description='Data quality evaluation indicator 2: data factor reliability.', example='3'),
          g3?: double(name='g3', description='Data quality evaluation indicator 3: time representativeness.', example='3'),
          g4?: double(name='g4', description='Data quality evaluation indicator 4: geographic representativeness.', example='3'),
        }(name='score', description='Score. The distribution ranges from 1 to 5. A value closer to 1 indicates better data quality.'),
      }
    ](name='dataQuality', description='Score of each inventory.'),
    dataQualityResult?: {
      dataQualityScore?: double(name='data_quality_score', description='The score. This parameter is applicable to DQR results. The distribution ranges from 1 to 5. A value closer to 1 indicates better data quality. The number of valid digits is kept to four decimal places.', example='1.2345'),
      g1?: double(name='g1', description='Data quality evaluation indicator 1: activity data credibility.', example='1.2345'),
      g2?: double(name='g2', description='Data quality evaluation indicator 2: data factor reliability.', example='1.2345'),
      g3?: double(name='g3', description='Data quality evaluation indicator 3: time representativeness.', example='1.2345'),
      g4?: double(name='g4', description='Data quality evaluation indicator 4: geographic representativeness.', example='1.2345'),
    }(name='dataQualityResult', description='Data quality result.'),
    sensitivityList?: [ 
      {
        id?: string(name='id', description='Inventory id', example='1'),
        inventory?: string(name='inventory', description='Name of the inventory item.', example='energy'),
        reductionList?: [ string ](name='reductionList', description='List of emission reduction measures.'),
        sensitivity?: double(name='sensitivity', description='Sensitivity percentage.', example='91.7'),
      }
    ](name='sensitivityList', description='Sensitivity analysis list'),
    uncertainty?: string(name='uncertainty', description='Uncertainty value. The model\\"s overall percentage uncertainty results. "10.00%" symbolizes a 10.00% uncertainty, indicating that the carbon footprint lies within ±10.00%. This is derived from a weighted aggregation of individual inventory uncertainties.', example='10.00'),
    uncertaintyValues?: [ 
      {
        inventory?: string(name='inventory', description='The name of the inventory. Format: process name / inventory name.', example='process-1/inventory-1'),
        uncertaintyContribution?: string(name='uncertaintyContribution', description='Inventory uncertainty absolute contribution size. The impact of the quality of each inventory data on the carbon footprint results in the modeling process, when the uncertain contribution of a list is large, please improve its data quality as much as possible to improve the accuracy of carbon footprint analysis. The meaning of "1.4964" is not determined to contribute 1.4964 kgCO₂ e/unit, where unit is the unit of the product.', example='1.4964'),
      }
    ](name='uncertaintyValues', description='Uncertainty list'),
  }(name='data', description='The response parameters.'),
  requestId?: string(name='requestId', description='The ID of the request. The value is unique for each request. This facilitates subsequent troubleshooting.', example='4A0AEC56-5C9A-5D47-93DF-7227836FFF82'),
}

model GetDataQualityAnalysisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataQualityAnalysisResponseBody(name='body'),
}

async function getDataQualityAnalysisWithOptions(request: GetDataQualityAnalysisRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDataQualityAnalysisResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.code)) {
    body['code'] = request.code;
  }
  if (!Util.isUnset(request.dataQualityEvaluationType)) {
    body['dataQualityEvaluationType'] = request.dataQualityEvaluationType;
  }
  if (!Util.isUnset(request.productId)) {
    body['productId'] = request.productId;
  }
  if (!Util.isUnset(request.productType)) {
    body['productType'] = request.productType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDataQualityAnalysis',
    version = '2022-09-23',
    protocol = 'HTTPS',
    pathname = `/api/v1/carbon/footprint/data/quality/analysis`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDataQualityAnalysis(request: GetDataQualityAnalysisRequest): GetDataQualityAnalysisResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getDataQualityAnalysisWithOptions(request, headers, runtime);
}

model GetDeviceInfoRequest {
  deviceId?: string(name='deviceId', description='The ID of the device.', example='pn_69873'),
  ds?: string(name='ds', description='The date on which the statistics are collected.', example='2022-07-26'),
  factoryId?: string(name='factoryId', description='The ID of the site.', example='pn_95'),
}

model GetDeviceInfoResponseBody = {
  code?: string(name='code', description='The code returned for the request. A value of Success indicates that the request was successful. Other values indicate that the request failed. You can troubleshoot the error by viewing the error message returned.', example='Success'),
  data?: {
    deviceId?: string(name='deviceId', description='The ID of the device.', example='pn_69873'),
    deviceName?: string(name='deviceName', description='The name of the device.', example='Main transformer 4#'),
    firstTypeName?: string(name='firstTypeName', description='The level 1 meter type.', example='Electric meter'),
    recordList?: [ 
      {
        identifier?: string(name='identifier', description='The identifier of the device.', example='Ia'),
        paramName?: string(name='paramName', description='The name of the parameter.', example='Phase A current'),
        statisticsDate?: string(name='statisticsDate', description='The date on which the statistics were collected.', example='2022-07-26 00:00:00'),
        type?: string(name='type', description='The type of the measuring point.', example='DOUBLE'),
        unit?: string(name='unit', description='The unit of the parameter value.', example='A'),
        value?: double(name='value', description='The value of the measuring point.', example='20.00'),
      }
    ](name='recordList', description='The device parameters.'),
    secondTypeName?: string(name='secondTypeName', description='The level 2 meter type.', example='Gateway meter'),
  }(name='data', description='The data returned.'),
  httpCode?: int32(name='httpCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='requestId', description='The ID of the request.', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='True'),
}

model GetDeviceInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDeviceInfoResponseBody(name='body'),
}

/**
  * *   You can call this operation to query the parameters of a data collection device based on the device ID. If the verification is passed, the device parameters are returned. If the verification fails, a null value is returned.
  * *   You can query the parameters of a single device by day. If data of the device does not exist, a null value is returned.
  *
  * @param request GetDeviceInfoRequest
  * @param headers map
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetDeviceInfoResponse
 */
async function getDeviceInfoWithOptions(request: GetDeviceInfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDeviceInfoResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.deviceId)) {
    query['deviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.ds)) {
    query['ds'] = request.ds;
  }
  if (!Util.isUnset(request.factoryId)) {
    query['factoryId'] = request.factoryId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDeviceInfo',
    version = '2022-09-23',
    protocol = 'HTTPS',
    pathname = `/api/external/getDeviceInfo`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   You can call this operation to query the parameters of a data collection device based on the device ID. If the verification is passed, the device parameters are returned. If the verification fails, a null value is returned.
  * *   You can query the parameters of a single device by day. If data of the device does not exist, a null value is returned.
  *
  * @param request GetDeviceInfoRequest
  * @return GetDeviceInfoResponse
 */
async function getDeviceInfo(request: GetDeviceInfoRequest): GetDeviceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getDeviceInfoWithOptions(request, headers, runtime);
}

model GetDeviceListRequest {
  factoryId?: string(name='factoryId', description='The ID of the site.', example='pn_95'),
}

model GetDeviceListResponseBody = {
  code?: string(name='code', description='The code returned for the request.', example='Success'),
  data?: {
    code?: string(name='code', description='The code returned for the request.', example='Success'),
    deviceList?: [ 
      {
        deviceId?: string(name='deviceId', description='The ID of the device.', example='pn_69873'),
        deviceName?: string(name='deviceName', description='The name of the device.', example='Main transformer 4#'),
        firstTypeName?: string(name='firstTypeName', description='The level 1 meter type.', example='Electric meter'),
        info?: {
          constKva?: int32(name='constKva', description='The rated capacity.', example='100'),
          ct?: int32(name='ct', description='The transformation ratio of current.', example='1'),
          magnification?: int32(name='magnification', description='The magnification ratio.', example='80'),
          pressure?: int32(name='pressure', description='The high and low voltage.', example='0'),
          pt?: int32(name='pt', description='The transformation ratio of voltage.', example='80'),
        }(name='info', description='The information about the device.'),
        parentDevice?: string(name='parentDevice', description='The ID of the parent device.', example='pn_6987'),
        secondTypeName?: string(name='secondTypeName', description='The level 2 meter type.', example='Gateway meter'),
      }
    ](name='deviceList', description='The devices.'),
    factoryId?: string(name='factoryId', description='The ID of the site.', example='pn_95'),
    httpCode?: int32(name='httpCode', description='The HTTP status code.', example='200'),
    success?: boolean(name='success', description='Indicates whether the request was successful.', example='True'),
  }(name='data', description='The data returned.'),
  httpCode?: int32(name='httpCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='requestId', description='The ID of the request.', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model GetDeviceListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDeviceListResponseBody(name='body'),
}

/**
  * *   You can query the information about data collection devices of a site based on the ID of the site. If the verification is passed, the information about the devices of the site is returned. If the verification fails, a null value is returned.
  * *   Virtual meters at the site are not returned.
  *
  * @param request GetDeviceListRequest
  * @param headers map
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetDeviceListResponse
 */
async function getDeviceListWithOptions(request: GetDeviceListRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDeviceListResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.factoryId)) {
    query['factoryId'] = request.factoryId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDeviceList',
    version = '2022-09-23',
    protocol = 'HTTPS',
    pathname = `/api/external/getDeviceList`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   You can query the information about data collection devices of a site based on the ID of the site. If the verification is passed, the information about the devices of the site is returned. If the verification fails, a null value is returned.
  * *   Virtual meters at the site are not returned.
  *
  * @param request GetDeviceListRequest
  * @return GetDeviceListResponse
 */
async function getDeviceList(request: GetDeviceListRequest): GetDeviceListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getDeviceListWithOptions(request, headers, runtime);
}

model GetElecConstituteRequest {
  code?: string(name='code', description='The enterprise code.', example='C-20240202-01'),
  year?: int32(name='year', description='Year.', example='2024'),
}

model GetElecConstituteResponseBody = {
  data?: {
    light?: {
      carbonEmissionData?: double(name='carbonEmissionData', description='Carbon emission.', example='1.2'),
      dataUnit?: string(name='dataUnit', description='The unit.', example='kWh'),
      name?: string(name='name', description='The name.', example='light'),
      nameKey?: string(name='nameKey', description='The unique identifier of name.', example='carbonInventory.check.light_electricity'),
      ratio?: double(name='ratio', description='Proportion of electricity consumption to all electricity consumption in the month: example value: 0.5 (i. e., 50%)', example='0.2'),
      rawData?: double(name='rawData', description='Electricity consumption', example='1.2'),
    }(name='light', description='Photoelectric power consumption and carbon emission data of each enterprise.'),
    nuclear?: {
      carbonEmissionData?: double(name='carbonEmissionData', description='Carbon emission.', example='2.3'),
      dataUnit?: string(name='dataUnit', description='The unit.', example='kWh'),
      name?: string(name='name', description='The name.', example='nuclear'),
      nameKey?: string(name='nameKey', description='The unique identifier of name.', example='carbonInventory.check.nuclear_electricity'),
      ratio?: double(name='ratio', description='Proportion of electricity consumption to all electricity consumption in the month: example value: 0.5 (i. e., 50%)', example='0.6'),
      rawData?: double(name='rawData', description='Electricity consumption', example='2'),
    }(name='nuclear', description='Data on nuclear power consumption and carbon emissions at each enterprise.'),
    renewing?: {
      carbonEmissionData?: double(name='carbonEmissionData', description='Carbon emission.', example='2.3'),
      dataUnit?: string(name='dataUnit', description='The unit.', example='kWh'),
      name?: string(name='name', description='The name.', example='renewing'),
      nameKey?: string(name='nameKey', description='The unique identifier of name.', example='carbonInventory.carbonEmissionAnalysis.components.CarbonDetail.keZaiShengZiYuan'),
      ratio?: double(name='ratio', description='Proportion of electricity consumption to all electricity consumption in the month: example value: 0.5 (i. e., 50%)', example='0.44'),
      rawData?: double(name='rawData', description='Electricity consumption', example='4.3'),
    }(name='renewing', description='Data on renewable electricity consumption and carbon emissions at each enterprise.'),
    urban?: {
      carbonEmissionData?: double(name='carbonEmissionData', description='Carbon emission.', example='1.2'),
      dataUnit?: string(name='dataUnit', description='The unit.', example='kWh'),
      name?: string(name='name', description='The name.', example='urban'),
      nameKey?: string(name='nameKey', description='The unique identifier of name.', example='carbonInventory.check.urban_electricity'),
      ratio?: double(name='ratio', description='Proportion of electricity consumption to all electricity consumption in the month: example value: 0.5 (i. e., 50%)', example='0.4'),
      rawData?: double(name='rawData', description='Electricity consumption', example='1.2'),
    }(name='urban', description='Data on mains power electricity consumption and carbon emission of each enterprise.'),
    water?: {
      carbonEmissionData?: double(name='carbonEmissionData', description='Carbon emission.', example='2.1'),
      dataUnit?: string(name='dataUnit', description='The unit.', example='kWh'),
      name?: string(name='name', description='The name.', example='water'),
      nameKey?: string(name='nameKey', description='The unique identifier of name.', example='carbonInventory.check.water_electricity'),
      ratio?: double(name='ratio', description='Proportion of electricity consumption to all electricity consumption in the month: example value: 0.5 (i. e., 50%)', example='0.4'),
      rawData?: double(name='rawData', description='Electricity consumption', example='1.2'),
    }(name='water', description='Hydropower consumption and carbon emission data of each enterprise.'),
    wind?: {
      carbonEmissionData?: double(name='carbonEmissionData', description='Carbon emission.', example='1.2'),
      dataUnit?: string(name='dataUnit', description='The unit.', example='kWh'),
      name?: string(name='name', description='The name.', example='wind'),
      nameKey?: string(name='nameKey', description='The unique identifier of name.', example='carbonInventory.check.wind_electricity'),
      ratio?: double(name='ratio', description='Proportion of electricity consumption to all electricity consumption in the month: example value: 0.5 (i. e., 50%)', example='0.3'),
      rawData?: double(name='rawData', description='Electricity consumption', example='1.1'),
    }(name='wind', description='Wind power consumption and carbon emission data of each enterprise.'),
    zero?: {
      carbonEmissionData?: double(name='carbonEmissionData', description='Carbon emission.', example='1.2'),
      dataUnit?: string(name='dataUnit', description='The unit.', example='kWh'),
      name?: string(name='name', description='The name.', example='zero'),
      nameKey?: string(name='nameKey', description='The unique identifier of name.', example='carbonInventory.carbonEmissionAnalysis.components.CarbonDetail.lingTanDianLi'),
      ratio?: double(name='ratio', description='Proportion of electricity consumption to all electricity consumption in the month: example value: 0.5 (i. e., 50%)', example='0.33'),
      rawData?: double(name='rawData', description='Electricity consumption', example='444.3'),
    }(name='zero', description='Data of zero electricity consumption and carbon emission of each enterprise.'),
  }(name='data', description='The returned data.'),
  requestId?: string(name='requestId', description='Id of the request.', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
}

model GetElecConstituteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetElecConstituteResponseBody(name='body'),
}

async function getElecConstituteWithOptions(request: GetElecConstituteRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetElecConstituteResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.code)) {
    body['code'] = request.code;
  }
  if (!Util.isUnset(request.year)) {
    body['year'] = request.year;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetElecConstitute',
    version = '2022-09-23',
    protocol = 'HTTPS',
    pathname = `/api/v1/carbon/emission/analysis/elec/constitute`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getElecConstitute(request: GetElecConstituteRequest): GetElecConstituteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getElecConstituteWithOptions(request, headers, runtime);
}

model GetElecTrendRequest {
  code?: string(name='code', description='The enterprise code.', example='C-20240115-3'),
  yearList?: [ int32 ](name='yearList', description='List of years.'),
}

model GetElecTrendResponseBody = {
  code?: string(name='code', description='The code returned for the request. A value of Success indicates that the request was successful. Other values indicate that the request failed. You can troubleshoot the error by viewing the error message returned.', example='200'),
  data?: {
    light?: [ 
      {
        carbonEmissionData?: double(name='carbonEmissionData', description='Carbon emissions', example='3.14'),
        dataUnit?: string(name='dataUnit', description='The unit.', example='kWh'),
        month?: int32(name='month', description='Month', example='12'),
        name?: string(name='name', description='Power type name.', example='Solar Power'),
        nameKey?: string(name='nameKey', description='Power Type Code', example='carbonInventory.check.light_electricity'),
        ratio?: double(name='ratio', description='Proportion of electricity consumption to all electricity consumption in the month: example value: 0.5 (i. e. 50%).', example='0.5'),
        rawData?: double(name='rawData', description='Electricity consumption', example='3.14'),
        year?: string(name='year', description='Year', example='2024'),
      }
    ](name='light', description='Photoelectricity monthly electricity consumption and carbon emissions and other data.'),
    nuclear?: [ 
      {
        carbonEmissionData?: double(name='carbonEmissionData', description='Carbon emissions', example='3.14'),
        dataUnit?: string(name='dataUnit', description='The price unit.', example='kWh'),
        month?: int32(name='month', description='Month', example='12'),
        name?: string(name='name', description='Power Type Name', example='Nuclear power'),
        nameKey?: string(name='nameKey', description='Power Type Code', example='carbonInventory.check.nuclear_electricity'),
        ratio?: double(name='ratio', description='Proportion of electricity consumption to all electricity consumption in the month: example value: 0.5 (i. e., 50%)', example='0.5'),
        rawData?: double(name='rawData', description='Electricity consumption', example='3.14'),
        year?: string(name='year', description='Year', example='2024'),
      }
    ](name='nuclear', description='Monthly electricity consumption and carbon emissions data for nuclear power'),
    renewing?: [ 
      {
        carbonEmissionData?: double(name='carbonEmissionData', description='Carbon emissions', example='3.14'),
        dataUnit?: string(name='dataUnit', description='The price unit.', example='kWh'),
        month?: int32(name='month', description='Month', example='12'),
        name?: string(name='name', description='Power Type Name', example='Renewable electricity'),
        nameKey?: string(name='nameKey', description='Power Type Code', example='carbonInventory.carbonEmissionAnalysis.components.CarbonDetail.lingTanDianLi'),
        ratio?: double(name='ratio', description='Proportion of electricity consumption to all electricity consumption in the month: example value: 0.5 (i. e., 50%)', example='0.5'),
        rawData?: double(name='rawData', description='Electricity consumption', example='3.14'),
        year?: string(name='year', description='Year', example='2024'),
      }
    ](name='renewing', description='Monthly data on renewable electricity consumption and carbon emissions'),
    urban?: [ 
      {
        carbonEmissionData?: double(name='carbonEmissionData', description='Carbon emissions', example='3.14'),
        dataUnit?: string(name='dataUnit', description='The price unit.', example='kWh'),
        month?: int32(name='month', description='Month', example='12'),
        name?: string(name='name', description='Power Type Name', example='Grid power'),
        nameKey?: string(name='nameKey', description='Power Type Code', example='carbonInventory.check.urban_electricity'),
        ratio?: double(name='ratio', description='Proportion of electricity consumption to all electricity consumption in the month: example value: 0.5 (i. e. 50%).', example='0.5'),
        rawData?: double(name='rawData', description='Electricity consumption', example='3.14'),
        year?: string(name='year', description='Year', example='2024'),
      }
    ](name='urban', description='Data such as monthly electricity consumption and carbon emissions from the mains.'),
    water?: [ 
      {
        carbonEmissionData?: double(name='carbonEmissionData', description='Carbon emissions', example='3.14'),
        dataUnit?: string(name='dataUnit', description='The unit.', example='kWh'),
        month?: int32(name='month', description='Month', example='12'),
        name?: string(name='name', description='Power Type Name', example='Hydro power'),
        nameKey?: string(name='nameKey', description='Power Type Code', example='carbonInventory.check.water_electricity'),
        ratio?: double(name='ratio', description='Proportion of electricity consumption to all electricity consumption in the month: example value: 0.5 (i. e. 50%).', example='0.5'),
        rawData?: double(name='rawData', description='Electricity consumption', example='3.14'),
        year?: string(name='year', description='Year', example='2024'),
      }
    ](name='water', description='Monthly data on electricity consumption and carbon emissions for hydropower.'),
    wind?: [ 
      {
        carbonEmissionData?: double(name='carbonEmissionData', description='Carbon emissions', example='3.14'),
        dataUnit?: string(name='dataUnit', description='The price unit.', example='kWh'),
        month?: int32(name='month', description='Month', example='12'),
        name?: string(name='name', description='Power Type Name', example='Wind power'),
        nameKey?: string(name='nameKey', description='Power Type Code', example='carbonInventory.check.wind_electricity'),
        ratio?: double(name='ratio', description='Proportion of electricity consumption to all electricity consumption in the month: example value: 0.5 (i. e., 50%)', example='0.5'),
        rawData?: double(name='rawData', description='Electricity consumption', example='3.14'),
        year?: string(name='year', description='Year', example='2024'),
      }
    ](name='wind', description='Monthly wind power consumption and carbon emission data'),
    zero?: [ 
      {
        carbonEmissionData?: double(name='carbonEmissionData', description='Carbon emissions', example='3.14'),
        dataUnit?: string(name='dataUnit', description='The price unit.', example='kWh'),
        month?: int32(name='month', description='Month', example='12'),
        name?: string(name='name', description='Power Type Name', example='Zero carbon electricity'),
        nameKey?: string(name='nameKey', description='Power Type Code', example='carbonInventory.carbonEmissionAnalysis.components.CarbonDetail.lingTanDianLi'),
        ratio?: double(name='ratio', description='Proportion of electricity consumption to all electricity consumption in the month: example value: 0.5 (i. e., 50%)', example='0.5'),
        rawData?: double(name='rawData', description='Electricity consumption', example='3.14'),
        year?: string(name='year', description='Year', example='2024'),
      }
    ](name='zero', description='Zero electricity monthly electricity consumption and carbon emissions and other data.'),
  }(name='data', description='The returned data.'),
  requestId?: string(name='requestId', description='The request ID.', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
}

model GetElecTrendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetElecTrendResponseBody(name='body'),
}

async function getElecTrendWithOptions(request: GetElecTrendRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetElecTrendResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.code)) {
    body['code'] = request.code;
  }
  if (!Util.isUnset(request.yearList)) {
    body['yearList'] = request.yearList;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetElecTrend',
    version = '2022-09-23',
    protocol = 'HTTPS',
    pathname = `/api/v1/carbon/emission/analysis/elec/trend`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getElecTrend(request: GetElecTrendRequest): GetElecTrendResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getElecTrendWithOptions(request, headers, runtime);
}

model GetEmissionSourceConstituteRequest {
  code?: string(name='code', description='The enterprise code.', example='C-20240119-1'),
  moduleCode?: string(name='moduleCode', description='Module code.', example='carbonInventory.check.scope_1_direct_ghg_emissions '),
  moduleType?: int32(name='moduleType', description='Module type.', example='3'),
  year?: int32(name='year', description='Year of inventory.', example='2024'),
}

model GetEmissionSourceConstituteResponseBody = {
  data?: [
    ConstituteItem
  ](name='data', description='Response parameters'),
  requestId?: string(name='requestId', description='Id of the request', example='9bc20a5a-b26b-4c28-922a-7cd10b61f96f'),
}

model GetEmissionSourceConstituteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEmissionSourceConstituteResponseBody(name='body'),
}

async function getEmissionSourceConstituteWithOptions(request: GetEmissionSourceConstituteRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetEmissionSourceConstituteResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.code)) {
    body['code'] = request.code;
  }
  if (!Util.isUnset(request.moduleCode)) {
    body['moduleCode'] = request.moduleCode;
  }
  if (!Util.isUnset(request.moduleType)) {
    body['moduleType'] = request.moduleType;
  }
  if (!Util.isUnset(request.year)) {
    body['year'] = request.year;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetEmissionSourceConstitute',
    version = '2022-09-23',
    protocol = 'HTTPS',
    pathname = `/api/v1/carbon/emission/analysis/constitute`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getEmissionSourceConstitute(request: GetEmissionSourceConstituteRequest): GetEmissionSourceConstituteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getEmissionSourceConstituteWithOptions(request, headers, runtime);
}

model GetEmissionSummaryRequest {
  code?: string(name='code', description='The enterprise code.', example='C-20240119-1'),
  moduleCode?: string(name='moduleCode', description='Module code.', example='carbonInventory.check.scope_1_direct_ghg_emissions'),
  moduleType?: int32(name='moduleType', description='Module type.', example='3'),
  year?: int32(name='year', description='Year of inventory.', example='2024'),
}

model GetEmissionSummaryResponseBody = {
  data?: {
    actualEmissionRatio?: double(name='actualEmissionRatio', description='Percentage of scheduled.', example='2.7657'),
    carbonSaveConversion?: double(name='carbonSaveConversion', description='Carbon emissions reduction.', example='0.0'),
    currentPeriodCarbonEmissionData?: double(name='currentPeriodCarbonEmissionData', description='Statistical indicators for this cycle.', example='276.4'),
    isWeighting?: boolean(name='isWeighting', description='Whether to show the weighting ratio carbon emission.', example='true'),
    lastPeriodCarbonEmissionData?: double(name='lastPeriodCarbonEmissionData', description='Last period statistical indicators.', example='9.40100'),
    lastPeriodWeightingCarbonEmissionData?: double(name='lastPeriodWeightingCarbonEmissionData', description='Calculation of carbon emissions based on shareholding ratio in the last cycle.', example='8.4609'),
    ratio?: double(name='ratio', description='Year-on-year.', example='28.410'),
    totalCarbonEmissionData?: double(name='totalCarbonEmissionData', description='Total carbon emissions.', example='276.46'),
    weightingCarbonEmissionData?: double(name='weightingCarbonEmissionData', description='Calculate carbon emissions by share ratio', example='248.81400'),
    weightingRatio?: double(name='weightingRatio', description='Year-on-year of weighting ratio carbon emissions.', example='28.4102'),
  }(name='data', description='Details of summarized data'),
  requestId?: string(name='requestId', description='Id of the request.', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
}

model GetEmissionSummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEmissionSummaryResponseBody(name='body'),
}

async function getEmissionSummaryWithOptions(request: GetEmissionSummaryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetEmissionSummaryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.code)) {
    body['code'] = request.code;
  }
  if (!Util.isUnset(request.moduleCode)) {
    body['moduleCode'] = request.moduleCode;
  }
  if (!Util.isUnset(request.moduleType)) {
    body['moduleType'] = request.moduleType;
  }
  if (!Util.isUnset(request.year)) {
    body['year'] = request.year;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetEmissionSummary',
    version = '2022-09-23',
    protocol = 'HTTPS',
    pathname = `/api/v1/carbon/emission/analysis/summary`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getEmissionSummary(request: GetEmissionSummaryRequest): GetEmissionSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getEmissionSummaryWithOptions(request, headers, runtime);
}

model GetEpdInventoryConstituteRequest {
  code?: string(name='code', description='The enterprise code.', example='C-20080808-1'),
  productId?: long(name='productId', description='The product id.', example='1024'),
  productType?: long(name='productType', description='Product type: 1 indicates that the carbon footprint of the product is requested, and 5 indicates that the carbon footprint of the supply chain is requested.', example='1'),
}

model GetEpdInventoryConstituteResponseBody = {
  data?: [
    EpdInventoryConstituteItem
  ](name='data', description='List of environmental impact results.'),
  requestId?: string(name='requestId', description='The ID of the request. The value is unique for each request. This facilitates subsequent troubleshooting.', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
}

model GetEpdInventoryConstituteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEpdInventoryConstituteResponseBody(name='body'),
}

async function getEpdInventoryConstituteWithOptions(request: GetEpdInventoryConstituteRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetEpdInventoryConstituteResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.code)) {
    body['code'] = request.code;
  }
  if (!Util.isUnset(request.productId)) {
    body['productId'] = request.productId;
  }
  if (!Util.isUnset(request.productType)) {
    body['productType'] = request.productType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetEpdInventoryConstitute',
    version = '2022-09-23',
    protocol = 'HTTPS',
    pathname = `/api/v1/carbon/footprint/result/epd/inventory/constitute`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getEpdInventoryConstitute(request: GetEpdInventoryConstituteRequest): GetEpdInventoryConstituteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getEpdInventoryConstituteWithOptions(request, headers, runtime);
}

model GetEpdSummaryRequest {
  code?: string(name='code', description='The enterprise code.', example='C-20080808-1'),
  productId?: long(name='productId', description='The product id.', example='1024'),
  productType?: long(name='productType', description='Product type: 1 indicates that the carbon footprint of the product is requested, and 5 indicates that the carbon footprint of the supply chain is requested.', example='1'),
}

model GetEpdSummaryResponseBody = {
  data?: [ 
    {
      carbonEmission?: double(name='carbonEmission', description='Emissions. The result is maintained up to 31 decimal places for precise intermediate calculation and subsequently truncated for display. It is advised to pair the emissions figure with the unit of the environmental impact result for a comprehensive understanding.', example='1009.976265540000000000000000000000'),
      indicator?: string(name='indicator', description='The evaluation index adopted for the environmental impact', example='GWP100a'),
      key?: string(name='key', description='The category key. The environmental impact category. Currently, a maximum of 19 categories are supported. Enumeration refers to [Carbon Footprint Appendices](https://carbon-doc.oss-cn-hangzhou.aliyuncs.com/CarbonFootprintAppendices-en.pdf).', example='gwp'),
      method?: string(name='method', description='Calculation method standard', example='CML v4.8 2016'),
      name?: string(name='name', description='The name of the category.', example='climate change'),
      num?: long(name='num', description='Category num: the unique serial number of the environmental impact category. A maximum of 19 categories are supported. Enumeration refers to [Carbon Footprint Appendices](https://carbon-doc.oss-cn-hangzhou.aliyuncs.com/CarbonFootprintAppendices-en.pdf).', example='1'),
      preUnit?: string(name='preUnit', description='Environmental impact result Value Unit.', example='kg CO2-Eq'),
      state?: long(name='state', description='The data status. 1 indicates that the calculation is accurate, 2 indicates that the default data is used, and 3 indicates that the missing factor uses the value of 0.', example='1'),
    }
  ](name='data', description='Response parameters'),
  requestId?: string(name='requestId', description='The ID of the request. The value is unique for each request. This facilitates subsequent troubleshooting.', example='B91B5559-065A-55C3-8D75-DA218EBFD1DC'),
}

model GetEpdSummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEpdSummaryResponseBody(name='body'),
}

async function getEpdSummaryWithOptions(request: GetEpdSummaryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetEpdSummaryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.code)) {
    body['code'] = request.code;
  }
  if (!Util.isUnset(request.productId)) {
    body['productId'] = request.productId;
  }
  if (!Util.isUnset(request.productType)) {
    body['productType'] = request.productType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetEpdSummary',
    version = '2022-09-23',
    protocol = 'HTTPS',
    pathname = `/api/v1/carbon/footprint/result/epd/summary`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getEpdSummary(request: GetEpdSummaryRequest): GetEpdSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getEpdSummaryWithOptions(request, headers, runtime);
}

model GetFootprintListRequest {
  code?: string(name='code', description='The enterprise code.', example='C-20080808-1'),
  currentPage?: long(name='currentPage', description='The pagination parameter. The number of the page that starts from 1.', example='1'),
  pageSize?: long(name='pageSize', description='The number of entries returned on each page.', example='10'),
  productType?: long(name='productType', description='Product type: 1 indicates that the carbon footprint of the product is requested, and 5 indicates that the carbon footprint of the supply chain is requested.', example='1'),
}

model GetFootprintListResponseBody = {
  data?: {
    currentPage?: long(name='currentPage', description='The page number.', example='1'),
    pageSize?: long(name='pageSize', description='The number of entries returned on each page.', example='10'),
    records?: [ 
      {
        amount?: double(name='amount', description='The amount of the product.', example='100.0000000000000000000000000'),
        authStatus?: long(name='authStatus', description='Authentication status enumeration value, please refer to [link](https://carbon-doc.oss-cn-hangzhou.aliyuncs.com/CarbonFootprintAppendices-en.pdf).', example='1'),
        checkEndTime?: string(name='checkEndTime', description='Calculation end time.', example='2024/01/31'),
        checkStartTime?: string(name='checkStartTime', description='Calculation start time.', example='2024/01/01'),
        code?: string(name='code', description='The enterprise code.', example='C-20080808-1'),
        createdBy?: string(name='createdBy', description='The user who created it.', example='Energy Expert'),
        id?: long(name='id', description='The product ID.', example='1024'),
        isDemoModel?: long(name='isDemoModel', description='Indicates whether the demo model is a built-in model. A value of 1 indicates a true value and a value of 0 indicates a false value.', example='1'),
        lifeCycle?: string(name='lifeCycle', description='The literal expression corresponding to lifeCycleType, `From Cradle to Gate` and `From Cradle to Grave`.', example='From Cradle to Gate'),
        lifeCycleType?: long(name='lifeCycleType', description='1 is `From Cradle to Gate`, and 2 is `From Cradle to Grave`.', example='1'),
        name?: string(name='name', description='The product name.', example='Carbon-footprint-demo'),
        type?: string(name='type', description='Product category enumeration value, please refer to [Carbon Footprint Appendices](https://carbon-doc.oss-cn-hangzhou.aliyuncs.com/CarbonFootprintAppendices-en.pdf).', example='158-159'),
        unit?: string(name='unit', description='Unit enumeration value. Please refer to [Carbon Footprint Appendices](https://carbon-doc.oss-cn-hangzhou.aliyuncs.com/CarbonFootprintAppendices-en.pdf).', example='1-4'),
      }
    ](name='records', description='Product Detail List.'),
    total?: long(name='total', description='The total number of entries returned.', example='21'),
    totalPage?: long(name='totalPage', description='Total Pages', example='3'),
  }(name='data', description='The response parameters.'),
  requestId?: string(name='requestId', description='The ID of the request. The value is unique for each request. This facilitates subsequent troubleshooting.', example='06DA2909-7736-5738-AA31-ACD617D828F1'),
}

model GetFootprintListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFootprintListResponseBody(name='body'),
}

async function getFootprintListWithOptions(request: GetFootprintListRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetFootprintListResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.code)) {
    body['code'] = request.code;
  }
  if (!Util.isUnset(request.currentPage)) {
    body['currentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['pageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productType)) {
    body['productType'] = request.productType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetFootprintList',
    version = '2022-09-23',
    protocol = 'HTTPS',
    pathname = `/api/v1/carbon/footprint/product/list`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getFootprintList(request: GetFootprintListRequest): GetFootprintListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getFootprintListWithOptions(request, headers, runtime);
}

model GetGasConstituteRequest {
  code?: string(name='code', description='The enterprise code.', example='C-20240115-3'),
  moduleCode?: string(name='moduleCode', description='Module code.', example='carbonInventory.check.scope_1_direct_ghg_emissions'),
  moduleType?: int32(name='moduleType', description='Module type.', example='3'),
  year?: int32(name='year', description='Year', example='2024'),
}

model GetGasConstituteResponseBody = {
  data?: [ 
    {
      carbonEmissionData?: double(name='carbonEmissionData', description='Carbon emissions', example='3.14'),
      gasEmissionData?: double(name='gasEmissionData', description='Gas emissions', example='3.14'),
      name?: string(name='name', description='Name of gas', example='CO₂'),
      ratio?: double(name='ratio', description='Proportion of carbon emissions. Example value: 0.5 (50%)', example='0.5'),
      type?: int32(name='type', description='Gas Type', example='1'),
    }
  ](name='data', description='The data returned.'),
  requestId?: string(name='requestId', description='The request ID.', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
}

model GetGasConstituteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetGasConstituteResponseBody(name='body'),
}

async function getGasConstituteWithOptions(request: GetGasConstituteRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetGasConstituteResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.code)) {
    body['code'] = request.code;
  }
  if (!Util.isUnset(request.moduleCode)) {
    body['moduleCode'] = request.moduleCode;
  }
  if (!Util.isUnset(request.moduleType)) {
    body['moduleType'] = request.moduleType;
  }
  if (!Util.isUnset(request.year)) {
    body['year'] = request.year;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetGasConstitute',
    version = '2022-09-23',
    protocol = 'HTTPS',
    pathname = `/api/v1/carbon/emission/analysis/gas/constitute`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getGasConstitute(request: GetGasConstituteRequest): GetGasConstituteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getGasConstituteWithOptions(request, headers, runtime);
}

model GetGwpBenchmarkListRequest {
  code?: string(name='code', description='The enterprise code.', example='C-20080808-1'),
  productId?: long(name='productId', description='The product id.', example='1024'),
  productType?: long(name='productType', description='Product type: 1 indicates that the carbon footprint of the product is requested, and 5 indicates that the carbon footprint of the supply chain is requested.', example='1'),
}

model GetGwpBenchmarkListResponseBody = {
  data?: {
    items?: [ 
      {
        activeReduction?: double(name='activeReduction', description='`activeReduction=benchmarkEmission-carbonEmission` Generally, baseline emissions are greater than inventory emissions. Maintain four decimal places. Unit pertains to a higher-level unit.', example='0.2169'),
        benchmarkEmission?: double(name='benchmarkEmission', description='Benchmark emissions. Maintain four decimal places. Unit pertains to a higher-level unit.', example='0.0108'),
        benchmarkName?: string(name='benchmarkName', description='Benchmark name', example='old-energy'),
        carbonEmission?: double(name='carbonEmission', description='Inventory emissions. Maintain four decimal places. Unit pertains to a higher-level unit.', example='-0.2061'),
        name?: string(name='name', description='name', example='new-energy'),
        percent?: string(name='percent', description='Unused temporarily.', example='null'),
      }
    ](name='items', description='Active carbon reduction ranking list.'),
    unit?: string(name='unit', description='unit of emissions. The default value is `kgCO₂e/productUnit`. 
The `productUnit` is the unit selected for the product. The unit value is changed to `tCO₂e/productUnit` or `gCO₂e/productUnit`. For more information, see the remarks in the quantity column.', example='kgCO₂e/kg'),
  }(name='data', description='The response parameters.'),
  requestId?: string(name='requestId', description='The ID of the request. The value is unique for each request. This facilitates subsequent troubleshooting.', example='A8AEC6D9-A359-5169-BD1A-BD848BA60D65'),
}

model GetGwpBenchmarkListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetGwpBenchmarkListResponseBody(name='body'),
}

async function getGwpBenchmarkListWithOptions(request: GetGwpBenchmarkListRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetGwpBenchmarkListResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.code)) {
    body['code'] = request.code;
  }
  if (!Util.isUnset(request.productId)) {
    body['productId'] = request.productId;
  }
  if (!Util.isUnset(request.productType)) {
    body['productType'] = request.productType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetGwpBenchmarkList',
    version = '2022-09-23',
    protocol = 'HTTPS',
    pathname = `/api/v1/carbon/footprint/result/gwp/benchmark/list`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getGwpBenchmarkList(request: GetGwpBenchmarkListRequest): GetGwpBenchmarkListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getGwpBenchmarkListWithOptions(request, headers, runtime);
}

model GetGwpBenchmarkSummaryRequest {
  code?: string(name='code', description='The enterprise code.', example='C-20080808-1'),
  productId?: long(name='productId', description='The product id.', example='1024'),
  productType?: long(name='productType', description='Product type: 1 indicates that the carbon footprint of the product is requested, and 5 indicates that the carbon footprint of the supply chain is requested.', example='1'),
}

model GetGwpBenchmarkSummaryResponseBody = {
  data?: {
    items?: [ 
      {
        name?: string(name='name', description='Name of carbon reduction details.', example='Energy-Replacement'),
        percent?: string(name='percent', description='Percentage of emissions. The value is of the string type. Two decimal places are reserved for numbers. For example, "99.01" indicates the 99.01% of this type of emissions to the total emissions. Note that the returned string itself does not contain a percent sign.', example='99.01'),
        quantity?: long(name='quantity', description='Emission amount is presented with four decimal places. Normally, modeling doesn\\"t result in negative values, but users can represent carbon reductions as negatives. The amount, paired with the unit, defines the emissions. Both are dynamically adjusted. If emissions exceed `1000 kgCO₂e/productUnit`, they convert to `tCO₂e/productUnit`. If they fall below `1 kgCO₂e/productUnit`, they convert to `gCO₂e/productUnit`. Otherwise, they stay in `kgCO₂e/productUnit`.', example='9.9763'),
        unit?: string(name='unit', description='Unit of emissions. The default value is `kgCO₂e/productUnit.` `productUnit` is the unit selected for the product. The unit value is changed to `tCO₂e/productUnit` or `gCO₂e/productUnit`. For more information, see the remarks in the quantity column.', example='kgCO₂e/kg'),
      }
    ](name='items', description='Carbon Reduction Contribution Top4 Details.'),
    quantity?: long(name='quantity', description='Emission amount is presented with four decimal places. Normally, modeling doesn\\"t result in negative values, but users can represent carbon reductions as negatives. The amount, paired with the unit, defines the emissions. Both are dynamically adjusted. If emissions exceed `1000 kgCO₂e/productUnit`, they convert to `tCO₂e/productUnit`. If they fall below `1 kgCO₂e/productUnit`, they convert to `gCO₂e/productUnit`. Otherwise, they stay in `kgCO₂e/productUnit`.', example='1000.0000'),
    unit?: string(name='unit', description='Unit of emissions. The default value is `kgCO₂e/productUnit.` `productUnit` is the unit selected for the product. The unit value is changed to `tCO₂e/productUnit` or `gCO₂e/productUnit`. For more information, see the remarks in the quantity column.', example='kgCO₂e/t'),
  }(name='data', description='The response parameters.'),
  requestId?: string(name='requestId', description='The ID of the request. The value is unique for each request. This facilitates subsequent troubleshooting.', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
}

model GetGwpBenchmarkSummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetGwpBenchmarkSummaryResponseBody(name='body'),
}

async function getGwpBenchmarkSummaryWithOptions(request: GetGwpBenchmarkSummaryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetGwpBenchmarkSummaryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.code)) {
    body['code'] = request.code;
  }
  if (!Util.isUnset(request.productId)) {
    body['productId'] = request.productId;
  }
  if (!Util.isUnset(request.productType)) {
    body['productType'] = request.productType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetGwpBenchmarkSummary',
    version = '2022-09-23',
    protocol = 'HTTPS',
    pathname = `/api/v1/carbon/footprint/result/gwp/benchmark/summary`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getGwpBenchmarkSummary(request: GetGwpBenchmarkSummaryRequest): GetGwpBenchmarkSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getGwpBenchmarkSummaryWithOptions(request, headers, runtime);
}

model GetGwpInventoryConstituteRequest {
  code?: string(name='code', description='The enterprise code.', example='C-20080808-1'),
  productId?: long(name='productId', description='The product id.', example='1024'),
  productType?: long(name='productType', description='Product type: 1 indicates that the carbon footprint of the product is requested, and 5 indicates that the carbon footprint of the supply chain is requested.', example='1'),
}

model GetGwpInventoryConstituteResponseBody = {
  data?: {
    byResourceType?: [
      GwpInventoryConstitute
    ](name='byResourceType', description='Aggregated by resource type of an inventory.'),
    carbonEmission?: double(name='carbonEmission', description='Emission quantity: may be positive, negative, or 0. To ensure the calculation accuracy, 24 decimal places are reserved for the calculation process. We recommend that you intercept data based on your business requirements.', example='1009.976265540000000000000000000000'),
    items?: [
      GwpInventoryConstitute
    ](name='items', description='Organized by hierarchy from high to low, according to the flow-> process-> inventory hierarchy.'),
    name?: string(name='name', description='The name.', example='This is not used for displaying'),
    unit?: string(name='unit', description='Emission Unit.', example='kgCO₂e/t'),
  }(name='data', description='The response parameters.'),
  requestId?: string(name='requestId', description='The ID of the request. The value is unique for each request. This facilitates subsequent troubleshooting.', example='06DA2909-7736-5738-AA31-ACD617D828F1'),
}

model GetGwpInventoryConstituteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetGwpInventoryConstituteResponseBody(name='body'),
}

async function getGwpInventoryConstituteWithOptions(request: GetGwpInventoryConstituteRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetGwpInventoryConstituteResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.code)) {
    body['code'] = request.code;
  }
  if (!Util.isUnset(request.productId)) {
    body['productId'] = request.productId;
  }
  if (!Util.isUnset(request.productType)) {
    body['productType'] = request.productType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetGwpInventoryConstitute',
    version = '2022-09-23',
    protocol = 'HTTPS',
    pathname = `/api/v1/carbon/footprint/result/gwp/inventory/constitute`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getGwpInventoryConstitute(request: GetGwpInventoryConstituteRequest): GetGwpInventoryConstituteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getGwpInventoryConstituteWithOptions(request, headers, runtime);
}

model GetGwpInventorySummaryRequest {
  code?: string(name='code', description='The enterprise code.', example='C-20080808-1'),
  productId?: long(name='productId', description='The product id.', example='1024'),
  productType?: long(name='productType', description='Product type: 1 indicates that the carbon footprint of the product is requested, and 5 indicates that the carbon footprint of the supply chain is requested.', example='1'),
}

model GetGwpInventorySummaryResponseBody = {
  data?: {
    items?: [ 
      {
        name?: string(name='name', description='Inventory resource type name.', example='Energy'),
        percent?: string(name='percent', description='Percentage.', example='99.01'),
        quantity?: double(name='quantity', description='Quantity.', example='9.9763'),
        unit?: string(name='unit', description='The unit.', example='kgCO₂e/Piece(s)'),
      }
    ](name='items', description='Top 4 types of carbon footprint contribution.'),
    quantity?: double(name='quantity', description='The emission quantity.', example='1.0100'),
    resultGenerateTime?: long(name='resultGenerateTime', description='The time when the result was generated, in the millisecond timestamp format.', example='1709108026000'),
    unit?: string(name='unit', description='Emission Unit.', example='tCO₂e/Piece(s)'),
  }(name='data', description='The returned results.'),
  requestId?: string(name='requestId', description='The ID of the request. The value is unique for each request. This facilitates subsequent troubleshooting.', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
}

model GetGwpInventorySummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetGwpInventorySummaryResponseBody(name='body'),
}

async function getGwpInventorySummaryWithOptions(request: GetGwpInventorySummaryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetGwpInventorySummaryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.code)) {
    body['code'] = request.code;
  }
  if (!Util.isUnset(request.productId)) {
    body['productId'] = request.productId;
  }
  if (!Util.isUnset(request.productType)) {
    body['productType'] = request.productType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetGwpInventorySummary',
    version = '2022-09-23',
    protocol = 'HTTPS',
    pathname = `/api/v1/carbon/footprint/result/gwp/inventory/summary`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getGwpInventorySummary(request: GetGwpInventorySummaryRequest): GetGwpInventorySummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getGwpInventorySummaryWithOptions(request, headers, runtime);
}

model GetInventoryListRequest {
  code?: string(name='code', description='The enterprise code.', example='C-20080808-1'),
  emissionType?: string(name='emissionType', description='Type of emission

>  Valid values: footprint | emission. Meaning: footprint: all inventories are involved in the calculation; emission: only inventories with positive and zero emissions are involved in the calculation, and negative numbers are not involved in the calculation.', example='footprint'),
  group?: string(name='group', description='Group by

>  Valid values: resource | process | resourceType | processType. Meaning: resource: aggregation by inventory group, process: aggregation by operation group, resourceType: aggregation by inventory type, processType: aggregation by phase group', example='resource'),
  methodType?: string(name='methodType', description='The type of the obtained environmental impact: gwp indicates the carbon footprint of climate change. For more information, see the type value of the enumerated values.', example='gwp'),
  productId?: long(name='productId', description='The product id.', example='1024'),
  productType?: long(name='productType', description='Product type: 1 indicates that the carbon footprint of the product is requested, and 5 indicates that the carbon footprint of the supply chain is requested.', example='1'),
}

model GetInventoryListResponseBody = {
  data?: {
    items?: [ 
      {
        carbonEmission?: double(name='carbonEmission', description='Emission quantity: may be positive, negative, or 0. To ensure the calculation accuracy, 24 decimal places are reserved for the calculation process. We recommend that you intercept data based on your business requirements.', example='1000.000000000000000000000000000000'),
        name?: string(name='name', description='Name 

> The name is related to the request parameters group. Request parameters: resource, return name parameter meaning: list name; request parameters: process, return name parameter meaning: process name; request parameters: resourceType, return name parameter meaning: inventory resource type name; request parameters: processType, return name parameter meaning: flow name.', example='Energy'),
        percent?: string(name='percent', description='Percentage', example='99.01'),
        processName?: string(name='processName', description='Process Name: It is only meaningful when the request parameters group is resource.', example='Process-1'),
      }
    ](name='items', description='Inventory detail.'),
    productUnit?: string(name='productUnit', description='Unit of product.', example='kg'),
    unit?: string(name='unit', description='Emission Unit: The default value is kgCO₂ /productUnit. productUnit is the unit selected for the product. The unit value is changed to tCO₂ e/productUnit or gCO₂ e/productUnit based on the emission quantity. For more information, see the quantity column.', example='kgCO₂e/kg'),
  }(name='data', description='The response parameters.'),
  requestId?: string(name='requestId', description='The ID of the request. The value is unique for each request. This facilitates subsequent troubleshooting.', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
}

model GetInventoryListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInventoryListResponseBody(name='body'),
}

async function getInventoryListWithOptions(request: GetInventoryListRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetInventoryListResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.code)) {
    body['code'] = request.code;
  }
  if (!Util.isUnset(request.emissionType)) {
    body['emissionType'] = request.emissionType;
  }
  if (!Util.isUnset(request.group)) {
    body['group'] = request.group;
  }
  if (!Util.isUnset(request.methodType)) {
    body['methodType'] = request.methodType;
  }
  if (!Util.isUnset(request.productId)) {
    body['productId'] = request.productId;
  }
  if (!Util.isUnset(request.productType)) {
    body['productType'] = request.productType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetInventoryList',
    version = '2022-09-23',
    protocol = 'HTTPS',
    pathname = `/api/v1/carbon/footprint/result/inventory/list`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getInventoryList(request: GetInventoryListRequest): GetInventoryListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getInventoryListWithOptions(request, headers, runtime);
}

model GetOrgAndFactoryResponseBody = {
  code?: string(name='code', description='The code returned for the request.', example='Success'),
  data?: [ 
    {
      aliyunPk?: string(name='aliyunPk', description='The ID of the Alibaba Cloud account.', example='1319617584664960'),
      factoryList?: [ 
        {
          factoryId?: string(name='factoryId', description='The ID of the site.', example='pn_95'),
          factoryName?: string(name='factoryName', description='The name of the site.', example='Ledi Industrial Park 1'),
        }
      ](name='factoryList', description='The sites.'),
      organizationId?: string(name='organizationId', description='The ID of the organization.', example='6265f42XXXX2fec150'),
      organizationName?: string(name='organizationName', description='The name of the organization.', example='Ledi Industrial Park'),
    }
  ](name='data', description='data'),
  httpCode?: int32(name='httpCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='requestId', description='The ID of the request.', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='True'),
}

model GetOrgAndFactoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOrgAndFactoryResponseBody(name='body'),
}

/**
  * *   You can set multiple request parameters to filter query results. Specified parameters have logical AND relations. Parameters without assigned values are not used as filtering conditions.
  * *   The x-acs-caller-uid header is used to check whether the activated service plan is the required service plan. If the verification is passed, the information about the organizations and sites that are activated by using the Alibaba Cloud account is returned. If the verification fails, a null value is returned.
  * *   If activated organizations and sites exist, the data of the organizations and sites is returned. If no organization or site data exists, a null value is returned.
  *
  * @param headers map
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetOrgAndFactoryResponse
 */
async function getOrgAndFactoryWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): GetOrgAndFactoryResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetOrgAndFactory',
    version = '2022-09-23',
    protocol = 'HTTPS',
    pathname = `/api/external/getOrgAndFactory`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   You can set multiple request parameters to filter query results. Specified parameters have logical AND relations. Parameters without assigned values are not used as filtering conditions.
  * *   The x-acs-caller-uid header is used to check whether the activated service plan is the required service plan. If the verification is passed, the information about the organizations and sites that are activated by using the Alibaba Cloud account is returned. If the verification fails, a null value is returned.
  * *   If activated organizations and sites exist, the data of the organizations and sites is returned. If no organization or site data exists, a null value is returned.
  *
  * @return GetOrgAndFactoryResponse
 */
async function getOrgAndFactory(): GetOrgAndFactoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getOrgAndFactoryWithOptions(headers, runtime);
}

model GetOrgConstituteRequest {
  code?: string(name='code', description='The enterprise code.', example='Z-20240115-2'),
  moduleCode?: string(name='moduleCode', description='Module code.', example='carbonInventory.check.scope_1_direct_ghg_emissions'),
  moduleType?: int32(name='moduleType', description='Module type.', example='3'),
  year?: int32(name='year', description='Year.', example='2024'),
}

model GetOrgConstituteResponseBody = {
  data?: OrgEmission(name='data', description='The data returned.'),
  requestId?: string(name='requestId', description='The request ID.', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
}

model GetOrgConstituteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOrgConstituteResponseBody(name='body'),
}

async function getOrgConstituteWithOptions(request: GetOrgConstituteRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetOrgConstituteResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.code)) {
    body['code'] = request.code;
  }
  if (!Util.isUnset(request.moduleCode)) {
    body['moduleCode'] = request.moduleCode;
  }
  if (!Util.isUnset(request.moduleType)) {
    body['moduleType'] = request.moduleType;
  }
  if (!Util.isUnset(request.year)) {
    body['year'] = request.year;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetOrgConstitute',
    version = '2022-09-23',
    protocol = 'HTTPS',
    pathname = `/api/v1/carbon/emission/analysis/org`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getOrgConstitute(request: GetOrgConstituteRequest): GetOrgConstituteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getOrgConstituteWithOptions(request, headers, runtime);
}

model GetPcrInfoRequest {
  code?: string(name='code', description='The enterprise code.', example='C-20080808-1'),
  productId?: string(name='productId', description='The product id.', example='1024'),
  productType?: long(name='productType', description='Product type: 1 indicates that the carbon footprint of the product is requested, and 5 indicates that the carbon footprint of the supply chain is requested.', example='1'),
}

model GetPcrInfoResponseBody = {
  data?: {
    createTime?: string(name='createTime', description='The timestamp when the report was created. The timestamp is in milliseconds.', example='1709109790532'),
    name?: string(name='name', description='Report name', example='report name'),
    url?: string(name='url', description='Download url link.', example='https://energy.alibabacloud.com'),
  }(name='data', description='The response parameters.'),
  requestId?: string(name='requestId', description='The ID of the request. The value is unique for each request. This facilitates subsequent troubleshooting.', example='4A0AEC56-5C9A-5D47-93DF-7227836FFF82'),
}

model GetPcrInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPcrInfoResponseBody(name='body'),
}

async function getPcrInfoWithOptions(request: GetPcrInfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetPcrInfoResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.code)) {
    body['code'] = request.code;
  }
  if (!Util.isUnset(request.productId)) {
    body['productId'] = request.productId;
  }
  if (!Util.isUnset(request.productType)) {
    body['productType'] = request.productType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetPcrInfo',
    version = '2022-09-23',
    protocol = 'HTTPS',
    pathname = `/api/v1/carbon/footprint/result/pcr/detail`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getPcrInfo(request: GetPcrInfoRequest): GetPcrInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getPcrInfoWithOptions(request, headers, runtime);
}

model GetReductionProposalRequest {
  code?: string(name='code', description='The enterprise code.', example='C-20080808-1'),
  dataQualityEvaluationType?: int32(name='dataQualityEvaluationType', description='The type of the data quality evaluation. 1 is DQI and 2 is DQR.', example='1'),
  productId?: long(name='productId', description='The product id.', example='1024'),
  productType?: long(name='productType', description='Product type: 1 indicates that the carbon footprint of the product is requested, and 5 indicates that the carbon footprint of the supply chain is requested.', example='1'),
}

model GetReductionProposalResponseBody = {
  data?: {
    reduction?: string(name='reduction', description='Proactive carbon reduction recommendations and advice.', example='Reduce one-drop usage'),
    reductionEvaluation?: string(name='reductionEvaluation', description='Active carbon reduction assessment.', example='Trying Energy Expert for a more detailed assessment.'),
  }(name='data', description='The returned data.'),
  requestId?: string(name='requestId', description='The ID of the request. The value is unique for each request. This facilitates subsequent troubleshooting.', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
}

model GetReductionProposalResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetReductionProposalResponseBody(name='body'),
}

async function getReductionProposalWithOptions(request: GetReductionProposalRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetReductionProposalResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.code)) {
    body['code'] = request.code;
  }
  if (!Util.isUnset(request.dataQualityEvaluationType)) {
    body['dataQualityEvaluationType'] = request.dataQualityEvaluationType;
  }
  if (!Util.isUnset(request.productId)) {
    body['productId'] = request.productId;
  }
  if (!Util.isUnset(request.productType)) {
    body['productType'] = request.productType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetReductionProposal',
    version = '2022-09-23',
    protocol = 'HTTPS',
    pathname = `/api/v1/carbon/footprint/result/reduction/proposal`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getReductionProposal(request: GetReductionProposalRequest): GetReductionProposalResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getReductionProposalWithOptions(request, headers, runtime);
}

model IsCompletedRequest {
  code?: string(name='code', description='The enterprise code.', example='C-20080808-1'),
  productId?: long(name='productId', description='The product id.', example='1024'),
  productType?: long(name='productType', description='Product type: 1 indicates that the carbon footprint of the product is requested, and 5 indicates that the carbon footprint of the supply chain is requested.', example='1'),
}

model IsCompletedResponseBody = {
  data?: {
    modifiedTime?: long(name='modifiedTime', description='Modified time in milliseconds, e.g. 1711438780000.', example='1711438780000'),
    taskKey?: string(name='taskKey', description='The unique key of this generation task.', example='550c2b7b-f2e0-4176-ab0a-53ea4b355721'),
    taskShortResult?: string(name='taskShortResult', description='Unused temporarily.', example='null'),
    taskStatus?: string(name='taskStatus', description='The status of the report generation task. The possible values are `running`, `success`, and `error`, which mean generating, generating succeeded, and generating failed, respectively. If you encounter a result generation failure, check the model, correct the model, and then generate the result again.', example='running'),
  }(name='data', description='The response parameters.'),
  requestId?: string(name='requestId', description='The ID of the request. The value is unique for each request. This facilitates subsequent troubleshooting.', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
}

model IsCompletedResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IsCompletedResponseBody(name='body'),
}

async function isCompletedWithOptions(request: IsCompletedRequest, headers: map[string]string, runtime: Util.RuntimeOptions): IsCompletedResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.code)) {
    body['code'] = request.code;
  }
  if (!Util.isUnset(request.productId)) {
    body['productId'] = request.productId;
  }
  if (!Util.isUnset(request.productType)) {
    body['productType'] = request.productType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'IsCompleted',
    version = '2022-09-23',
    protocol = 'HTTPS',
    pathname = `/api/v1/carbon/footprint/result/completed`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function isCompleted(request: IsCompletedRequest): IsCompletedResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return isCompletedWithOptions(request, headers, runtime);
}

model PushDeviceDataRequest {
  deviceType?: string(name='deviceType', description='The type of the device. [View device type definitions](https://carbon-doc.oss-cn-hangzhou.aliyuncs.com/Deviceappendixes-en.pdf)', example='1'),
  devices?: [ 
    {
      data?: map[string]any(name='data', description='Measuring point information To avoid accuracy problems, the measurement point data is uniformly transmitted to the string. The function of missing required fields cannot be used normally. Some functions may be affected due to the lack of recommend fields. For details, please refer to the notes of equipment measuring points in the appendix. [Reference Point Definition](https://carbon-doc.oss-cn-hangzhou.aliyuncs.com/Deviceappendixes-en.pdf
)', example='{
			"dp_imp": "329.0",
			"F": "148.0",
			"eq_imp": "363.0",
			"Ep_imp_1": "128.0",
			"Ep_imp_2": "157.0",
			"Ua": "226.0",
			"Ub": "285.0",
			"Ep_imp": "325.0",
			"Uc": "342.0",
			"Ep_imp_3": "109.0",
			"Ep_imp_4": "94.0",
			"P": "514.0",
			"Pa": "443.0",
			"Q": "265.0",
			"dp_exp": "261.0",
			"eq_exp": "399.0",
			"COSQ": "223.0",
			"Ia": "240.0",
			"Ib": "216.0",
			"Ic": "229.0",
			"Ep_exp": "115.0",
			"VdisPer": "120.0"
		}'),
      deviceId?: string(name='deviceId', description='If the deviceType parameter is set to 12, 13, or 17, you must set the system_id parameter. The field name is still device_id. If the deviceType parameter is set to 15 or 16, no Other situations will be transmitted.', example='device_code_xxx'),
      recordTime?: string(name='recordTime', description='Data generation time of measuring point.', example='2021-09-08 18:40:00'),
    }
  ](name='devices', description='List of devices to which data is pushed.'),
}

model PushDeviceDataResponseBody = {
  data?: string(name='data', description='Whether the data is pushed successfully. Success is returned.', example='success'),
  requestId?: string(name='requestId', description='The request ID.', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
}

model PushDeviceDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PushDeviceDataResponseBody(name='body'),
}

async function pushDeviceDataWithOptions(request: PushDeviceDataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PushDeviceDataResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.deviceType)) {
    body['deviceType'] = request.deviceType;
  }
  if (!Util.isUnset(request.devices)) {
    body['devices'] = request.devices;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PushDeviceData',
    version = '2022-09-23',
    protocol = 'HTTPS',
    pathname = `/api/v1/data/increment/push`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pushDeviceData(request: PushDeviceDataRequest): PushDeviceDataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return pushDeviceDataWithOptions(request, headers, runtime);
}

model PushItemDataRequest {
  code?: string(name='code', description='The enterprise code.', example='C-20210223-01'),
  items?: {
    code?: string(name='code', description='The data item code.', example='xxx'),
    month?: string(name='month', description='The month.', example='1'),
    value?: double(name='value', description='The value of the data item.', example='1.11'),
  }(name='items', description='Push data list.'),
  year?: string(name='year', description='The year of the data created.', example='2024'),
}

model PushItemDataResponseBody = {
  data?: boolean(name='data', description='Whether the data is pushed successfully.', example='true'),
  requestId?: string(name='requestId', description='The request ID.', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
}

model PushItemDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PushItemDataResponseBody(name='body'),
}

/**
  * N/A.
  *
  * @param request PushItemDataRequest
  * @param headers map
  * @param runtime runtime options for this request RuntimeOptions
  * @return PushItemDataResponse
 */
async function pushItemDataWithOptions(request: PushItemDataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PushItemDataResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.code)) {
    body['code'] = request.code;
  }
  if (!Util.isUnset(request.items)) {
    body['items'] = request.items;
  }
  if (!Util.isUnset(request.year)) {
    body['year'] = request.year;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PushItemData',
    version = '2022-09-23',
    protocol = 'HTTPS',
    pathname = `/api/v1/carbon/emission/data/item/push`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * N/A.
  *
  * @param request PushItemDataRequest
  * @return PushItemDataResponse
 */
async function pushItemData(request: PushItemDataRequest): PushItemDataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return pushItemDataWithOptions(request, headers, runtime);
}

model RecalculateCarbonEmissionRequest {
  code?: string(name='code', description='The enterprise code.', example='C-20240202-01'),
  year?: string(name='year', description='Year of inventory.', example='2024'),
}

model RecalculateCarbonEmissionResponseBody = {
  data?: boolean(name='data', description='The returned data. A value of true indicates that the request is successful. A value of false indicates that the request fails.', example='true'),
  requestId?: string(name='requestId', description='The request ID.', example='83A5A7DD-8974-5769-952E-590A97BEA34E'),
}

model RecalculateCarbonEmissionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RecalculateCarbonEmissionResponseBody(name='body'),
}

async function recalculateCarbonEmissionWithOptions(request: RecalculateCarbonEmissionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RecalculateCarbonEmissionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.code)) {
    body['code'] = request.code;
  }
  if (!Util.isUnset(request.year)) {
    body['year'] = request.year;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RecalculateCarbonEmission',
    version = '2022-09-23',
    protocol = 'HTTPS',
    pathname = `/api/v1/carbon/emission/data/item/recalculate`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recalculateCarbonEmission(request: RecalculateCarbonEmissionRequest): RecalculateCarbonEmissionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return recalculateCarbonEmissionWithOptions(request, headers, runtime);
}

