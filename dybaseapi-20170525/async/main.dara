/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Dybaseapi';
  @version = '2017-05-25';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model QueryTokenForMnsQueueRequest {
  messageType: string(name='MessageType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  queueName?: string(name='QueueName', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryTokenForMnsQueueResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  messageTokenDTO?: {
    accessKeyId?: string(name='AccessKeyId'),
    accessKeySecret?: string(name='AccessKeySecret'),
    createTime?: string(name='CreateTime'),
    expireTime?: string(name='ExpireTime'),
    securityToken?: string(name='SecurityToken'),
  }(name='MessageTokenDTO'),
  requestId?: string(name='RequestId'),
}

model QueryTokenForMnsQueueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryTokenForMnsQueueResponseBody(name='body'),
}

async function queryTokenForMnsQueue(request: QueryTokenForMnsQueueRequest): QueryTokenForMnsQueueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTokenForMnsQueue', 'POST', '/', 'json', false, 'json', request);
}

