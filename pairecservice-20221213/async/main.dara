/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'PaiRecService';
  @version = '2022-12-13';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ApplyEngineConfigRequest {
  engineConfigId?: string(name='EngineConfigId', example='2', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId?: string(name='InstanceId', example='pairec-cn-***test', position='Query'),
}

model ApplyEngineConfigResponseBody = {
  requestId?: string(name='RequestId', example='F8F613A9-DF1C-551A-88E1-397A3981A785'),
}

model ApplyEngineConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApplyEngineConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ApplyEngineConfig  ApplyEngineConfigRequest
  * @return ApplyEngineConfigResponse
 */
async function applyEngineConfig(request: ApplyEngineConfigRequest): ApplyEngineConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ApplyEngineConfig', 'POST', '/api/v1/engineconfigs/{EngineConfigId}/action/apply', 'json', false, 'json', request);
}

model BackflowFeatureConsistencyCheckJobDataRequest {
  regionId?: string(name='RegionId', position='Host'),
  featureConsistencyCheckJobConfigId: string(name='FeatureConsistencyCheckJobConfigId', description='This parameter is required.', example='4', position='Body'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-********', position='Body'),
  itemFeatures: string(name='ItemFeatures', description='This parameter is required.', example='[\\"{\\\\\\"itemid\\\\\\":{\\\\\\"value\\\\\\":1010,\\\\\\"type\\\\\\":\\\\\\"string\\\\\\"}}\\"]', position='Body'),
  logItemId: string(name='LogItemId', description='This parameter is required.', example='9010', position='Body'),
  logRequestId: string(name='LogRequestId', description='This parameter is required.', example='728C5E01-ABF6-5AA8-B9FC-B3BA05DECC77', position='Body'),
  logRequestTime: long(name='LogRequestTime', description='This parameter is required.', example='1693900981465', position='Body'),
  logUserId: string(name='LogUserId', description='This parameter is required.', example='1010', position='Body'),
  sceneName: string(name='SceneName', description='This parameter is required.', example='video-feed', position='Body'),
  scores: string(name='Scores', description='This parameter is required.', example='[\\"{\\\\\\"dbmtl_probs_is_valid_play\\\\\\":0.00032182207107543945,\\\\\\"dbmtl_y_play_time\\\\\\":0.0043269748210906982}\\"]', position='Body'),
  userFeatures: string(name='UserFeatures', description='This parameter is required.', example='{\\"userid\\":{\\"value\\":1010,\\"type\\":\\"string\\"},\\"click_5_seq\\":{\\"value\\":\\"9001;9002;9003;9004;9005\\",\\"type\\":\\"string\\"}}', position='Body'),
}

model BackflowFeatureConsistencyCheckJobDataResponseBody = {
  requestId?: string(name='RequestId', example='BDB621CB-A81E-5D39-8793-39A365CBCC74'),
}

model BackflowFeatureConsistencyCheckJobDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BackflowFeatureConsistencyCheckJobDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BackflowFeatureConsistencyCheckJobData  BackflowFeatureConsistencyCheckJobDataRequest
  * @return BackflowFeatureConsistencyCheckJobDataResponse
 */
async function backflowFeatureConsistencyCheckJobData(request: BackflowFeatureConsistencyCheckJobDataRequest): BackflowFeatureConsistencyCheckJobDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BackflowFeatureConsistencyCheckJobData', 'POST', '/api/v1/featureconsistencycheck/jobs/action/backflowdata', 'json', false, 'json', request);
}

model CheckInstanceResourcesRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-test1', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  type: string(name='Type', description='This parameter is required.', example='OSS', position='Body'),
  uri?: string(name='Uri', example='bucket-test-123', position='Body'),
}

model CheckInstanceResourcesResponseBody = {
  requestId?: string(name='RequestId', example='9763624B-5FBB-5E3A-9193-B1ADB554CEAE'),
  resources?: [ 
    {
      status?: string(name='Status', example='Success'),
      type?: string(name='Type', example='OSS'),
      uri?: string(name='Uri', example='bucket-test-123'),
    }
  ](name='Resources'),
}

model CheckInstanceResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckInstanceResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckInstanceResources  CheckInstanceResourcesRequest
  * @return CheckInstanceResourcesResponse
 */
async function checkInstanceResources(request: CheckInstanceResourcesRequest): CheckInstanceResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CheckInstanceResources', 'POST', '/api/v1/instances/{InstanceId}/action/checkresources', 'json', false, 'json', request);
}

model CheckTrafficControlTaskExpressionRequest {
  regionId?: string(name='RegionId', position='Host'),
  expression: string(name='Expression', description='This parameter is required.', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
  tableMetaId: string(name='TableMetaId', description='This parameter is required.', position='Query'),
}

model CheckTrafficControlTaskExpressionResponseBody = {
  isValie?: boolean(name='IsValie'),
  reason?: string(name='Reason'),
  requestId?: string(name='RequestId'),
}

model CheckTrafficControlTaskExpressionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckTrafficControlTaskExpressionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckTrafficControlTaskExpression  CheckTrafficControlTaskExpressionRequest
  * @return CheckTrafficControlTaskExpressionResponse
 */
async function checkTrafficControlTaskExpression(request: CheckTrafficControlTaskExpressionRequest): CheckTrafficControlTaskExpressionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CheckTrafficControlTaskExpression', 'GET', '/api/v1/trafficcontroltasks/action/checkexpression', 'json', false, 'json', request);
}

model CloneEngineConfigRequest {
  engineConfigId?: string(name='EngineConfigId', example='1', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  configValue?: string(name='ConfigValue', example='{}', position='Body'),
  description?: string(name='Description', position='Body'),
  environment?: string(name='Environment', example='Pre', position='Body'),
  instanceId?: string(name='InstanceId', example='pairec-cn-********', position='Body'),
}

model CloneEngineConfigResponseBody = {
  engineConfigId?: string(name='EngineConfigId', example='2'),
  requestId?: string(name='RequestId', example='A04CB8C0-E74A-5E83-BC61-64D153574EC7'),
}

model CloneEngineConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CloneEngineConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CloneEngineConfig  CloneEngineConfigRequest
  * @return CloneEngineConfigResponse
 */
async function cloneEngineConfig(request: CloneEngineConfigRequest): CloneEngineConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CloneEngineConfig', 'POST', '/api/v1/engineconfigs/{EngineConfigId}/action/clone', 'json', false, 'json', request);
}

model CloneExperimentRequest {
  experimentId: string(name='ExperimentId', description='This parameter is required.', example='experiment_test', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-abcdefg1234', position='Body'),
}

model CloneExperimentResponseBody = {
  experimentId?: string(name='ExperimentId', example='3'),
  requestId?: string(name='RequestId', description='Id of the request', example='F8F613A9-DF1C-551A-88E1-397A3981A785'),
}

model CloneExperimentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CloneExperimentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CloneExperiment  CloneExperimentRequest
  * @return CloneExperimentResponse
 */
async function cloneExperiment(request: CloneExperimentRequest): CloneExperimentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CloneExperiment', 'POST', '/api/v1/experiments/{ExperimentId}/action/clone', 'json', false, 'json', request);
}

model CloneExperimentGroupRequest {
  experimentGroupId: string(name='ExperimentGroupId', description='This parameter is required.', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  environment: string(name='Environment', description='This parameter is required.', example='Daily', position='Body'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-abcdefg1234', position='Body'),
  layerId: string(name='LayerId', description='This parameter is required.', example='3', position='Body'),
}

model CloneExperimentGroupResponseBody = {
  experimentGroupId?: string(name='ExperimentGroupId', example='3'),
  requestId?: string(name='RequestId', description='Id of the request', example='12A65C6C-AFA1-59B2-9A66-A9E0BB73F0E5'),
}

model CloneExperimentGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CloneExperimentGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CloneExperimentGroup  CloneExperimentGroupRequest
  * @return CloneExperimentGroupResponse
 */
async function cloneExperimentGroup(request: CloneExperimentGroupRequest): CloneExperimentGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CloneExperimentGroup', 'POST', '/api/v1/experimentgroups/{ExperimentGroupId}/action/clone', 'json', false, 'json', request);
}

model CloneFeatureConsistencyCheckJobConfigRequest {
  sourceFeatureConsistencyCheckJobConfigId: string(name='SourceFeatureConsistencyCheckJobConfigId', description='This parameter is required.', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-********', position='Body'),
}

model CloneFeatureConsistencyCheckJobConfigResponseBody = {
  featureConsistencyCheckId?: string(name='FeatureConsistencyCheckId', example='4'),
  requestId?: string(name='RequestId', example='74D958EF-3598-56FA-8296-FF1575CE43DF'),
}

model CloneFeatureConsistencyCheckJobConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CloneFeatureConsistencyCheckJobConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CloneFeatureConsistencyCheckJobConfig  CloneFeatureConsistencyCheckJobConfigRequest
  * @return CloneFeatureConsistencyCheckJobConfigResponse
 */
async function cloneFeatureConsistencyCheckJobConfig(request: CloneFeatureConsistencyCheckJobConfigRequest): CloneFeatureConsistencyCheckJobConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CloneFeatureConsistencyCheckJobConfig', 'POST', '/api/v1/featureconsistencycheck/jobconfigs/{SourceFeatureConsistencyCheckJobConfigId}/action/clone', 'json', false, 'json', request);
}

model CloneLaboratoryRequest {
  laboratoryId: string(name='LaboratoryId', description='This parameter is required.', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  cloneExperimentGroup: boolean(name='CloneExperimentGroup', description='This parameter is required.', example='true', position='Body'),
  environment: string(name='Environment', description='This parameter is required.', example='Daily', position='Body'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-abcdefg1234', position='Body'),
}

model CloneLaboratoryResponseBody = {
  laboratoryId?: string(name='LaboratoryId', example='3'),
  requestId?: string(name='RequestId', description='Id of the request', example='01D22D08-BA20-5F35-8302-99115F288220'),
}

model CloneLaboratoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CloneLaboratoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CloneLaboratory  CloneLaboratoryRequest
  * @return CloneLaboratoryResponse
 */
async function cloneLaboratory(request: CloneLaboratoryRequest): CloneLaboratoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CloneLaboratory', 'POST', '/api/v1/laboratories/{LaboratoryId}/action/clone', 'json', false, 'json', request);
}

model CloneTrafficControlTaskRequest {
  trafficControlTaskId?: string(name='TrafficControlTaskId', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId?: string(name='InstanceId', position='Body'),
}

model CloneTrafficControlTaskResponseBody = {
  requestId?: string(name='RequestId'),
  trafficControlTaskId?: string(name='TrafficControlTaskId'),
}

model CloneTrafficControlTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CloneTrafficControlTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CloneTrafficControlTask  CloneTrafficControlTaskRequest
  * @return CloneTrafficControlTaskResponse
 */
async function cloneTrafficControlTask(request: CloneTrafficControlTaskRequest): CloneTrafficControlTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CloneTrafficControlTask', 'POST', '/api/v1/trafficcontroltasks/{TrafficControlTaskId}/action/clone', 'json', false, 'json', request);
}

model CreateABMetricRequest {
  regionId?: string(name='RegionId', position='Host'),
  definition: string(name='Definition', description='This parameter is required.', example='sum(click_cnt)', position='Body'),
  description: string(name='Description', description='This parameter is required.', position='Body'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-test1', position='Body'),
  leftMetricId?: string(name='LeftMetricId', example='2', position='Body'),
  name: string(name='Name', description='This parameter is required.', example='pv', position='Body'),
  operator?: string(name='Operator', example='Division', position='Body'),
  realtime: boolean(name='Realtime', description='This parameter is required.', example='false', position='Body'),
  resultResourceId?: string(name='ResultResourceId', example='3', position='Body'),
  rightMetricId?: string(name='RightMetricId', example='3', position='Body'),
  sceneId: string(name='SceneId', description='This parameter is required.', example='1', position='Body'),
  statisticsCycle?: int32(name='StatisticsCycle', example='1', position='Body'),
  tableMetaId: string(name='TableMetaId', description='This parameter is required.', example='2', position='Body'),
  type: string(name='Type', description='This parameter is required.', example='Single', position='Body'),
}

model CreateABMetricResponseBody = {
  ABMetricId?: string(name='ABMetricId', example='1'),
  requestId?: string(name='RequestId', example='F7AC05FF-EDE7-5C2B-B9AE-33D6DF4178BA'),
}

model CreateABMetricResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateABMetricResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateABMetric  CreateABMetricRequest
  * @return CreateABMetricResponse
 */
async function createABMetric(request: CreateABMetricRequest): CreateABMetricResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateABMetric', 'POST', '/api/v1/abmetrics', 'json', false, 'json', request);
}

model CreateABMetricGroupRequest {
  regionId?: string(name='RegionId', position='Host'),
  ABMetricIds: string(name='ABMetricIds', description='This parameter is required.', example='1,2', position='Body'),
  description: string(name='Description', description='This parameter is required.', position='Body'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-test1', position='Body'),
  name: string(name='Name', description='This parameter is required.', example='visits', position='Body'),
  realtime: boolean(name='Realtime', description='This parameter is required.', example='false', position='Body'),
  sceneId: string(name='SceneId', description='This parameter is required.', example='1', position='Body'),
}

model CreateABMetricGroupResponseBody = {
  ABMetricGroupId?: string(name='ABMetricGroupId', example='1'),
  requestId?: string(name='RequestId', example='E15A1443-7917-5BE0-AE70-25538ECF398D'),
}

model CreateABMetricGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateABMetricGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateABMetricGroup  CreateABMetricGroupRequest
  * @return CreateABMetricGroupResponse
 */
async function createABMetricGroup(request: CreateABMetricGroupRequest): CreateABMetricGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateABMetricGroup', 'POST', '/api/v1/abmetricgroups', 'json', false, 'json', request);
}

model CreateCalculationJobsRequest {
  regionId?: string(name='RegionId', position='Host'),
  ABMetricIds: string(name='ABMetricIds', description='This parameter is required.', example='2,3,4', position='Body'),
  endDate: string(name='EndDate', description='This parameter is required.', example='2023-01-03', position='Body'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-test1', position='Body'),
  startDate: string(name='StartDate', description='This parameter is required.', example='2023-01-01', position='Body'),
}

model CreateCalculationJobsResponseBody = {
  calculationJobIds?: [ string ](name='CalculationJobIds'),
  requestId?: string(name='RequestId', example='8C27790E-CCA5-56BB-BA17-646295DEC0A2'),
}

model CreateCalculationJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCalculationJobsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateCalculationJobs  CreateCalculationJobsRequest
  * @return CreateCalculationJobsResponse
 */
async function createCalculationJobs(request: CreateCalculationJobsRequest): CreateCalculationJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateCalculationJobs', 'POST', '/api/v1/batch/calculationjobs/create', 'json', false, 'json', request);
}

model CreateCrowdRequest {
  regionId?: string(name='RegionId', position='Host'),
  description: string(name='Description', description='This parameter is required.', example='This is a test.', position='Body'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-abcdefg1234', position='Body'),
  label?: string(name='Label', example='os=android', position='Body'),
  name: string(name='Name', description='This parameter is required.', example='xx人群', position='Body'),
  source?: string(name='Source', example='ManualInput', position='Body'),
  users?: string(name='Users', example='user1,user2,user3', position='Body'),
}

model CreateCrowdResponseBody = {
  crowdId?: string(name='CrowdId', example='3'),
  requestId?: string(name='RequestId', description='Id of the request', example='59CE7EC6-F268-5D71-9215-32922CC50D72'),
}

model CreateCrowdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCrowdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateCrowd  CreateCrowdRequest
  * @return CreateCrowdResponse
 */
async function createCrowd(request: CreateCrowdRequest): CreateCrowdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateCrowd', 'POST', '/api/v1/crowds', 'json', false, 'json', request);
}

model CreateEngineConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  configValue?: string(name='ConfigValue', example='{}', position='Body'),
  description?: string(name='Description', position='Body'),
  environment?: string(name='Environment', example='Pre', position='Body'),
  instanceId?: string(name='InstanceId', example='pairec-cn-***test', position='Body'),
  name?: string(name='Name', example='engine_config_v1', position='Body'),
}

model CreateEngineConfigResponseBody = {
  engineConfigId?: string(name='EngineConfigId', example='1'),
  requestId?: string(name='RequestId', example='E15A1443-7917-5BE0-AE70-25538ECF398D'),
}

model CreateEngineConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateEngineConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateEngineConfig  CreateEngineConfigRequest
  * @return CreateEngineConfigResponse
 */
async function createEngineConfig(request: CreateEngineConfigRequest): CreateEngineConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateEngineConfig', 'POST', '/api/v1/engineconfigs', 'json', false, 'json', request);
}

model CreateExperimentRequest {
  regionId?: string(name='RegionId', position='Host'),
  config?: string(name='Config', example='{"RankBy": "Score"}', position='Body'),
  debugCrowdId?: string(name='DebugCrowdId', example='3', position='Body'),
  debugUsers?: string(name='DebugUsers', example='1124512470******,1124512471******,1124512472******', position='Body'),
  description: string(name='Description', description='This parameter is required.', example='This is a test.', position='Body'),
  experimentGroupId: string(name='ExperimentGroupId', description='This parameter is required.', example='3', position='Body'),
  flowPercent?: int32(name='FlowPercent', example='100', position='Body'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-test1', position='Body'),
  name: string(name='Name', description='This parameter is required.', example='experiment_test', position='Body'),
  type: string(name='Type', description='This parameter is required.', example='Baseline', position='Body'),
}

model CreateExperimentResponseBody = {
  experimentId?: string(name='ExperimentId', example='3'),
  requestId?: string(name='RequestId', description='Id of the request', example='3AAA45F6-0798-5461-9360-81D133823CE7'),
}

model CreateExperimentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateExperimentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateExperiment  CreateExperimentRequest
  * @return CreateExperimentResponse
 */
async function createExperiment(request: CreateExperimentRequest): CreateExperimentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateExperiment', 'POST', '/api/v1/experiments', 'json', false, 'json', request);
}

model CreateExperimentGroupRequest {
  regionId?: string(name='RegionId', position='Host'),
  config?: string(name='Config', example='{"RankBy": "Score"}', position='Body'),
  crowdId?: string(name='CrowdId', example='1', position='Body'),
  crowdTargetType?: string(name='CrowdTargetType', position='Body'),
  debugCrowdId?: string(name='DebugCrowdId', example='3', position='Body'),
  debugUsers?: string(name='DebugUsers', example='1124512470******,1124512471******,1124512472******', position='Body'),
  description?: string(name='Description', example='This is a test.', position='Body'),
  distributionTimeDuration?: int32(name='DistributionTimeDuration', example='3', position='Body'),
  distributionType?: string(name='DistributionType', example='UserId', position='Body'),
  filter?: string(name='Filter', example='gender=male', position='Body'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-test1', position='Body'),
  layerId: string(name='LayerId', description='This parameter is required.', example='3', position='Body'),
  name: string(name='Name', description='This parameter is required.', example='experiment_group_test', position='Body'),
  needAA: boolean(name='NeedAA', description='This parameter is required.', example='true', position='Body'),
  randomFlow?: long(name='RandomFlow', position='Body'),
  reservedBuckets?: string(name='ReservedBuckets', example='1,2,3', position='Body'),
}

model CreateExperimentGroupResponseBody = {
  experimentGroupId?: string(name='ExperimentGroupId', example='3'),
  requestId?: string(name='RequestId', description='Id of the request', example='A04CB8C0-E74A-5E83-BC61-64D153574EC7'),
}

model CreateExperimentGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateExperimentGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateExperimentGroup  CreateExperimentGroupRequest
  * @return CreateExperimentGroupResponse
 */
async function createExperimentGroup(request: CreateExperimentGroupRequest): CreateExperimentGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateExperimentGroup', 'POST', '/api/v1/experimentgroups', 'json', false, 'json', request);
}

model CreateFeatureConsistencyCheckJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  environment: string(name='Environment', description='This parameter is required.', example='Pre', position='Body'),
  featureConsistencyCheckJobConfigId: string(name='FeatureConsistencyCheckJobConfigId', description='This parameter is required.', example='3', position='Body'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-********', position='Body'),
  samplingDuration: int32(name='SamplingDuration', description='This parameter is required.', example='10', position='Body'),
}

model CreateFeatureConsistencyCheckJobResponseBody = {
  featureConsistencyCheckJobId?: string(name='FeatureConsistencyCheckJobId', example='4'),
  requestId?: string(name='RequestId', example='7D59453C-48AA-5FC5-8848-2D373BD1A17F'),
}

model CreateFeatureConsistencyCheckJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFeatureConsistencyCheckJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateFeatureConsistencyCheckJob  CreateFeatureConsistencyCheckJobRequest
  * @return CreateFeatureConsistencyCheckJobResponse
 */
async function createFeatureConsistencyCheckJob(request: CreateFeatureConsistencyCheckJobRequest): CreateFeatureConsistencyCheckJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateFeatureConsistencyCheckJob', 'POST', '/api/v1/featureconsistencycheck/jobs', 'json', false, 'json', request);
}

model CreateFeatureConsistencyCheckJobConfigRequest {
  regionId?: string(name='RegionId', example='feature1,feature2', position='Host'),
  compareFeature: boolean(name='CompareFeature', description='This parameter is required.', example='true', position='Body'),
  datasetId?: string(name='DatasetId', position='Body'),
  datasetMountPath?: string(name='DatasetMountPath', position='Body'),
  datasetName?: string(name='DatasetName', position='Body'),
  datasetType?: string(name='DatasetType', position='Body'),
  datasetUri?: string(name='DatasetUri', position='Body'),
  defaultRoute?: string(name='DefaultRoute', position='Body'),
  easServiceName: string(name='EasServiceName', description='This parameter is required.', example='service_123', position='Body'),
  easyRecPackagePath?: string(name='EasyRecPackagePath', example='oss://*******', position='Body'),
  easyRecVersion?: string(name='EasyRecVersion', example='1.3.60', position='Body'),
  featureDisplayExclude?: string(name='FeatureDisplayExclude', example='feature1,feature2', position='Body'),
  featureLandingResourceId: string(name='FeatureLandingResourceId', description='This parameter is required.', example='reso-********', position='Body'),
  featurePriority?: string(name='FeaturePriority', example='feature1,feature2,feature3', position='Body'),
  featureStoreItemId?: string(name='FeatureStoreItemId', position='Body'),
  featureStoreModelId?: string(name='FeatureStoreModelId', position='Body'),
  featureStoreProjectId?: string(name='FeatureStoreProjectId', position='Body'),
  featureStoreProjectName?: string(name='FeatureStoreProjectName', position='Body'),
  featureStoreSeqFeatureView?: string(name='FeatureStoreSeqFeatureView', position='Body'),
  featureStoreUserId?: string(name='FeatureStoreUserId', position='Body'),
  fgJarVersion?: string(name='FgJarVersion', example='1.0.0', position='Body'),
  fgJsonFileName: string(name='FgJsonFileName', description='This parameter is required.', example='file.json', position='Body'),
  generateZip: boolean(name='GenerateZip', description='This parameter is required.', example='true', position='Body'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-********', position='Body'),
  itemIdField?: string(name='ItemIdField', example='item_id', position='Body'),
  itemTable?: string(name='ItemTable', example='item_table', position='Body'),
  itemTablePartitionField?: string(name='ItemTablePartitionField', example='ds', position='Body'),
  itemTablePartitionFieldFormat?: string(name='ItemTablePartitionFieldFormat', example='yyyymmdd', position='Body'),
  name: string(name='Name', description='This parameter is required.', example='feature_consistency_check1', position='Body'),
  ossResourceId?: string(name='OssResourceId', example='reso-********', position='Body'),
  predictWorkerCount?: int32(name='PredictWorkerCount', position='Body'),
  predictWorkerCpu?: int32(name='PredictWorkerCpu', position='Body'),
  predictWorkerMemory?: int32(name='PredictWorkerMemory', position='Body'),
  sampleRate: double(name='SampleRate', description='This parameter is required.', example='0.89', position='Body'),
  sceneId: string(name='SceneId', description='This parameter is required.', example='3', position='Body'),
  securityGroupId?: string(name='SecurityGroupId', position='Body'),
  serviceId: string(name='ServiceId', description='This parameter is required.', example='4', position='Body'),
  switchId?: string(name='SwitchId', position='Body'),
  useFeatureStore: boolean(name='UseFeatureStore', description='This parameter is required.', position='Body'),
  userIdField?: string(name='UserIdField', example='user_id', position='Body'),
  userTable?: string(name='UserTable', example='user_table', position='Body'),
  userTablePartitionField?: string(name='UserTablePartitionField', example='ds', position='Body'),
  userTablePartitionFieldFormat?: string(name='UserTablePartitionFieldFormat', example='yyyymmdd', position='Body'),
  vpcId?: string(name='VpcId', position='Body'),
  workflowName?: string(name='WorkflowName', example='work_flow_1', position='Body'),
  workspaceId?: string(name='WorkspaceId', position='Body'),
}

model CreateFeatureConsistencyCheckJobConfigResponseBody = {
  featureConsistencyCheckJobConfigId?: string(name='FeatureConsistencyCheckJobConfigId', example='4'),
  requestId?: string(name='RequestId', example='E15A1443-7917-5BE0-AE70-25538ECF398D'),
}

model CreateFeatureConsistencyCheckJobConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFeatureConsistencyCheckJobConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateFeatureConsistencyCheckJobConfig  CreateFeatureConsistencyCheckJobConfigRequest
  * @return CreateFeatureConsistencyCheckJobConfigResponse
 */
async function createFeatureConsistencyCheckJobConfig(request: CreateFeatureConsistencyCheckJobConfigRequest): CreateFeatureConsistencyCheckJobConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateFeatureConsistencyCheckJobConfig', 'POST', '/api/v1/featureconsistencycheck/jobconfigs', 'json', false, 'json', request);
}

model CreateInstanceResourceRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-test1', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  category: string(name='Category', description='This parameter is required.', example='DataManagement', position='Body'),
  group: string(name='Group', description='This parameter is required.', example='storage', position='Body'),
  type: string(name='Type', description='This parameter is required.', example='OSS', position='Body'),
  uri: string(name='Uri', description='This parameter is required.', example='bucket-test-123', position='Body'),
}

model CreateInstanceResourceResponseBody = {
  requestId?: string(name='RequestId', example='6CF1E160-3F36-5E73-A170-C75504F05BBC'),
  resourceId?: string(name='ResourceId', example='reso-2s416t***'),
}

model CreateInstanceResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateInstanceResourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateInstanceResource  CreateInstanceResourceRequest
  * @return CreateInstanceResourceResponse
 */
async function createInstanceResource(request: CreateInstanceResourceRequest): CreateInstanceResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateInstanceResource', 'POST', '/api/v1/instances/{InstanceId}/resources', 'json', false, 'json', request);
}

model CreateLaboratoryRequest {
  regionId?: string(name='RegionId', position='Host'),
  bucketCount?: int32(name='BucketCount', example='24', position='Body'),
  bucketType: string(name='BucketType', description='This parameter is required.', example='UidHash', position='Body'),
  buckets?: string(name='Buckets', example='1,2,3,10-20', position='Body'),
  debugCrowdId?: string(name='DebugCrowdId', example='3', position='Body'),
  debugUsers?: string(name='DebugUsers', example='1124512470******,1124512471******,1124512472******', position='Body'),
  description?: string(name='Description', example='This is a test.', position='Body'),
  environment: string(name='Environment', description='This parameter is required.', example='Daily', position='Body'),
  filter?: string(name='Filter', example='filter=xxx', position='Body'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-abcdefg1234', position='Body'),
  name: string(name='Name', description='This parameter is required.', example='laboratory1', position='Body'),
  sceneId: string(name='SceneId', description='This parameter is required.', example='3', position='Body'),
  type: string(name='Type', description='This parameter is required.', example='Base', position='Body'),
}

model CreateLaboratoryResponseBody = {
  laboratoryId?: string(name='LaboratoryId', example='3'),
  requestId?: string(name='RequestId', description='Id of the request', example='42391E6D-822C-58F8-9F7E-D991BB86D6AD'),
}

model CreateLaboratoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLaboratoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateLaboratory  CreateLaboratoryRequest
  * @return CreateLaboratoryResponse
 */
async function createLaboratory(request: CreateLaboratoryRequest): CreateLaboratoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateLaboratory', 'POST', '/api/v1/laboratories', 'json', false, 'json', request);
}

model CreateLayerRequest {
  regionId?: string(name='RegionId', position='Host'),
  description: string(name='Description', description='This parameter is required.', example='This is a test.', position='Body'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-abcdefg1234', position='Body'),
  laboratoryId: string(name='LaboratoryId', description='This parameter is required.', example='3', position='Body'),
  name: string(name='Name', description='This parameter is required.', example='layer1', position='Body'),
}

model CreateLayerResponseBody = {
  layerId?: string(name='LayerId', example='3'),
  requestId?: string(name='RequestId', description='Id of the request', example='59CE7EC6-F268-5D71-9215-32922CC50D72'),
}

model CreateLayerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLayerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateLayer  CreateLayerRequest
  * @return CreateLayerResponse
 */
async function createLayer(request: CreateLayerRequest): CreateLayerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateLayer', 'POST', '/api/v1/layers', 'json', false, 'json', request);
}

model CreateParamRequest {
  regionId?: string(name='RegionId', position='Host'),
  environment?: string(name='Environment', example='Daily', position='Body'),
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234', position='Body'),
  name?: string(name='Name', example='home', position='Body'),
  sceneId?: string(name='SceneId', example='4', position='Body'),
  value?: string(name='Value', example='house', position='Body'),
}

model CreateParamResponseBody = {
  paramId?: long(name='ParamId', example='4'),
  requestId?: string(name='RequestId', description='Id of the request', example='F8F613A9-DF1C-551A-88E1-397A3981A785'),
}

model CreateParamResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateParamResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateParam  CreateParamRequest
  * @return CreateParamResponse
 */
async function createParam(request: CreateParamRequest): CreateParamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateParam', 'POST', '/api/v1/params', 'json', false, 'json', request);
}

model CreateResourceRuleRequest {
  regionId?: string(name='RegionId', position='Host'),
  description?: string(name='Description', position='Body'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Body'),
  metricOperationType: string(name='MetricOperationType', description='This parameter is required.', position='Body'),
  metricPullInfo?: string(name='MetricPullInfo', position='Body'),
  metricPullPeriod?: string(name='MetricPullPeriod', position='Body'),
  name: string(name='Name', description='This parameter is required.', position='Body'),
  ruleComputingDefinition: string(name='RuleComputingDefinition', description='This parameter is required.', position='Body'),
  ruleItems: [ 
    {
      description?: string(name='Description'),
      maxValue: double(name='MaxValue', description='This parameter is required.'),
      minValue: double(name='MinValue', description='This parameter is required.'),
      name: string(name='Name', description='This parameter is required.'),
      value: double(name='Value', description='This parameter is required.'),
    }
  ](name='RuleItems', description='This parameter is required.', position='Body'),
}

model CreateResourceRuleResponseBody = {
  requestId?: string(name='RequestId'),
  resourceRuleId?: string(name='ResourceRuleId'),
}

model CreateResourceRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateResourceRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateResourceRule  CreateResourceRuleRequest
  * @return CreateResourceRuleResponse
 */
async function createResourceRule(request: CreateResourceRuleRequest): CreateResourceRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateResourceRule', 'POST', '/api/v1/resourcerules', 'json', false, 'json', request);
}

model CreateResourceRuleItemRequest {
  resourceRuleId: string(name='ResourceRuleId', description='This parameter is required.', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  description?: string(name='Description', position='Body'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Body'),
  maxValue: double(name='MaxValue', description='This parameter is required.', position='Body'),
  minValue: double(name='MinValue', description='This parameter is required.', position='Body'),
  name: string(name='Name', description='This parameter is required.', position='Body'),
  value: double(name='Value', description='This parameter is required.', position='Body'),
}

model CreateResourceRuleItemResponseBody = {
  requestId?: string(name='RequestId'),
  resourceRuleItemId?: string(name='ResourceRuleItemId'),
}

model CreateResourceRuleItemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateResourceRuleItemResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateResourceRuleItem  CreateResourceRuleItemRequest
  * @return CreateResourceRuleItemResponse
 */
async function createResourceRuleItem(request: CreateResourceRuleItemRequest): CreateResourceRuleItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateResourceRuleItem', 'POST', '/api/v1/resourcerules/{ResourceRuleId}/items', 'json', false, 'json', request);
}

model CreateSceneRequest {
  regionId?: string(name='RegionId', position='Host'),
  description?: string(name='Description', example='This is a test.', position='Body'),
  flows?: [ 
    {
      flowCode?: string(name='FlowCode', example='liuliang1'),
      flowName?: string(name='FlowName', example='流量1'),
    }
  ](name='Flows', position='Body'),
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234', position='Body'),
  name?: string(name='Name', example='scene1', position='Body'),
}

model CreateSceneResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='FCF741D8-9C30-578E-807F-B935487DB34A'),
  sceneId?: string(name='SceneId', example='3'),
}

model CreateSceneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSceneResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateScene  CreateSceneRequest
  * @return CreateSceneResponse
 */
async function createScene(request: CreateSceneRequest): CreateSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateScene', 'POST', '/api/v1/scenes', 'json', false, 'json', request);
}

model CreateSubCrowdRequest {
  crowdId: string(name='CrowdId', description='This parameter is required.', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-test1', position='Body'),
  source: string(name='Source', description='This parameter is required.', example='ManualInput', position='Body'),
  users: string(name='Users', description='This parameter is required.', example='user1,user2,user3', position='Body'),
}

model CreateSubCrowdResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='9763624B-5FBB-5E3A-9193-B1ADB554CEAE'),
  subCrowdId?: string(name='SubCrowdId', example='3'),
}

model CreateSubCrowdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSubCrowdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateSubCrowd  CreateSubCrowdRequest
  * @return CreateSubCrowdResponse
 */
async function createSubCrowd(request: CreateSubCrowdRequest): CreateSubCrowdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateSubCrowd', 'POST', '/api/v1/crowds/{CrowdId}/subcrowds', 'json', false, 'json', request);
}

model CreateTableMetaRequest {
  regionId?: string(name='RegionId', position='Host'),
  description: string(name='Description', description='This parameter is required.', example='this is a test table', position='Body'),
  fields: [ 
    {
      dataType?: string(name='DataType'),
      isDimensionField: boolean(name='IsDimensionField', description='This parameter is required.', example='false'),
      isPartitionField: string(name='IsPartitionField', description='This parameter is required.'),
      meaning: string(name='Meaning', description='This parameter is required.', example='this is gender of people'),
      name: string(name='Name', description='This parameter is required.', example='gender'),
      type: string(name='Type', description='This parameter is required.', example='BIGINT'),
    }
  ](name='Fields', description='This parameter is required.', position='Body'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-test123', position='Body'),
  module: string(name='Module', description='This parameter is required.', example='ABTest', position='Body'),
  name: string(name='Name', description='This parameter is required.', example='table_test', position='Body'),
  resourceId: string(name='ResourceId', description='This parameter is required.', example='reso-2s416t146ffjc3yefx', position='Body'),
  tableName: string(name='TableName', description='This parameter is required.', example='table_mysql', position='Body'),
}

model CreateTableMetaResponseBody = {
  requestId?: string(name='RequestId', example='728C5E01-ABF6-5AA8-B9FC-B3BA05DECC77'),
  tableMetaId?: string(name='TableMetaId', example='2'),
}

model CreateTableMetaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTableMetaResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateTableMeta  CreateTableMetaRequest
  * @return CreateTableMetaResponse
 */
async function createTableMeta(request: CreateTableMetaRequest): CreateTableMetaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateTableMeta', 'POST', '/api/v1/tablemetas', 'json', false, 'json', request);
}

model CreateTrafficControlTargetRequest {
  regionId?: string(name='RegionId', position='Host'),
  endTime?: string(name='EndTime', position='Body'),
  event?: string(name='Event', position='Body'),
  itemConditionArray?: string(name='ItemConditionArray', position='Body'),
  itemConditionExpress?: string(name='ItemConditionExpress', position='Body'),
  itemConditionType?: string(name='ItemConditionType', position='Body'),
  name?: string(name='Name', position='Body'),
  newProductRegulation?: boolean(name='NewProductRegulation', position='Body'),
  recallName?: string(name='RecallName', position='Body'),
  startTime?: string(name='StartTime', position='Body'),
  statisPeriod?: string(name='StatisPeriod', position='Body'),
  status?: string(name='Status', position='Body'),
  toleranceValue?: long(name='ToleranceValue', position='Body'),
  trafficControlTaskId?: string(name='TrafficControlTaskId', position='Body'),
  value?: float(name='Value', position='Body'),
}

model CreateTrafficControlTargetResponseBody = {
  requestId?: string(name='RequestId'),
  trafficControlTargetId?: string(name='TrafficControlTargetId'),
}

model CreateTrafficControlTargetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTrafficControlTargetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateTrafficControlTarget  CreateTrafficControlTargetRequest
  * @return CreateTrafficControlTargetResponse
 */
async function createTrafficControlTarget(request: CreateTrafficControlTargetRequest): CreateTrafficControlTargetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateTrafficControlTarget', 'POST', '/api/v1/trafficcontroltargets', 'json', false, 'json', request);
}

model CreateTrafficControlTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  behaviorTableMetaId?: string(name='BehaviorTableMetaId', example='1', position='Body'),
  controlGranularity?: string(name='ControlGranularity', example='Global', position='Body'),
  controlLogic?: string(name='ControlLogic', example='Guaranteed', position='Body'),
  controlType?: string(name='ControlType', example='Percent', position='Body'),
  description?: string(name='Description', example='this is a test task', position='Body'),
  endTime?: string(name='EndTime', example='2024-03-26', position='Body'),
  executionTime?: string(name='ExecutionTime', example='TimeRange', position='Body'),
  instanceId?: string(name='InstanceId', example='pairec-cn-***test', position='Body'),
  itemConditionArray?: string(name='ItemConditionArray', example='[{\\"field\\":\\"status\\",\\"option\\":\\"=\\",\\"value\\":\\"1\\"}]', position='Body'),
  itemConditionExpress?: string(name='ItemConditionExpress', example='status=1', position='Body'),
  itemConditionType?: string(name='ItemConditionType', example='Array', position='Body'),
  itemTableMetaId?: string(name='ItemTableMetaId', example='3', position='Body'),
  name?: string(name='Name', example='task-1', position='Body'),
  preExperimentIds?: string(name='PreExperimentIds', position='Body'),
  prodExperimentIds?: string(name='ProdExperimentIds', position='Body'),
  sceneId?: string(name='SceneId', example='1', position='Body'),
  serviceId: string(name='ServiceId', description='This parameter is required.', position='Body'),
  startTime?: string(name='StartTime', example='2024-03-25', position='Body'),
  statisBehaviorConditionArray?: string(name='StatisBehaviorConditionArray', example='[{\\"field\\":\\"click\\",\\"option\\":\\"<=\\",\\"value\\":\\"30\\"}]', position='Body'),
  statisBehaviorConditionExpress?: string(name='StatisBehaviorConditionExpress', example='click=30', position='Body'),
  statisBehaviorConditionType?: string(name='StatisBehaviorConditionType', example='Array', position='Body'),
  trafficControlTargets?: [ 
    {
      endTime?: string(name='EndTime', example='2024-04-25'),
      event?: string(name='Event', example='click'),
      itemConditionArray?: string(name='ItemConditionArray', example='[{\\"field\\":\\"status\\",\\"option\\":\\"=\\",\\"value\\":\\"1\\"}]'),
      itemConditionExpress?: string(name='ItemConditionExpress', example='status=1'),
      itemConditionType?: string(name='ItemConditionType', example='Array'),
      name?: string(name='Name', example='target_1'),
      newProductRegulation?: boolean(name='NewProductRegulation', example='false'),
      recallName?: string(name='RecallName', example='recall_1'),
      startTime?: string(name='StartTime', example='2024-03-25'),
      statisPeriod?: string(name='StatisPeriod', example='Daily'),
      status?: string(name='Status', example='Opened'),
      toleranceValue?: long(name='ToleranceValue', example='20'),
      value?: float(name='Value', example='100'),
    }
  ](name='TrafficControlTargets', position='Body'),
  userConditionArray?: string(name='UserConditionArray', example='[{\\"field\\":\\"gender\\",\\"option\\":\\"=\\",\\"value\\":\\"male\\"}]', position='Body'),
  userConditionExpress?: string(name='UserConditionExpress', example='age<=30&&(3<=level<=6)&&gender=male', position='Body'),
  userConditionType?: string(name='UserConditionType', example='Array', position='Body'),
  userTableMetaId?: string(name='UserTableMetaId', example='2', position='Body'),
}

model CreateTrafficControlTaskResponseBody = {
  requestId?: string(name='RequestId', example='42391E6D-822C-58F8-9F7E-D991BB86D6AD'),
  trafficControlTaskId?: string(name='TrafficControlTaskId', example='1'),
}

model CreateTrafficControlTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTrafficControlTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateTrafficControlTask  CreateTrafficControlTaskRequest
  * @return CreateTrafficControlTaskResponse
 */
async function createTrafficControlTask(request: CreateTrafficControlTaskRequest): CreateTrafficControlTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateTrafficControlTask', 'POST', '/api/v1/trafficcontroltasks', 'json', false, 'json', request);
}

model DebugResourceRuleRequest {
  resourceRuleId: string(name='ResourceRuleId', description='This parameter is required.', position='Path'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
  metricInfo: map[string]any(name='MetricInfo', description='This parameter is required.', shrink='json', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DebugResourceRuleResponseBody = {
  currentValues?: map[string]any(name='CurrentValues'),
  outputValues?: map[string]any(name='OutputValues'),
  requestId?: string(name='RequestId'),
}

model DebugResourceRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DebugResourceRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DebugResourceRule  DebugResourceRuleRequest
  * @return DebugResourceRuleResponse
 */
async function debugResourceRule(request: DebugResourceRuleRequest): DebugResourceRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DebugResourceRule', 'POST', '/api/v1/resourcerules/{ResourceRuleId}/action/debug', 'json', false, 'json', request);
}

model DeleteABMetricRequest {
  ABMetricId: string(name='ABMetricId', description='This parameter is required.', example='1', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-test1', position='Query'),
}

model DeleteABMetricResponseBody = {
  requestId?: string(name='RequestId', example='728C5E01-ABF6-5AA8-B9FC-B3BA05DECC77'),
}

model DeleteABMetricResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteABMetricResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteABMetric  DeleteABMetricRequest
  * @return DeleteABMetricResponse
 */
async function deleteABMetric(request: DeleteABMetricRequest): DeleteABMetricResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteABMetric', 'DELETE', '/api/v1/abmetrics/{ABMetricId}', 'json', false, 'json', request);
}

model DeleteABMetricGroupRequest {
  ABMetricGroupId: string(name='ABMetricGroupId', description='This parameter is required.', example='1', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-test1', position='Query'),
}

model DeleteABMetricGroupResponseBody = {
  requestId?: string(name='RequestId', example='BDB621CB-A81E-5D39-8793-39A365CBCC74'),
}

model DeleteABMetricGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteABMetricGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteABMetricGroup  DeleteABMetricGroupRequest
  * @return DeleteABMetricGroupResponse
 */
async function deleteABMetricGroup(request: DeleteABMetricGroupRequest): DeleteABMetricGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteABMetricGroup', 'DELETE', '/api/v1/abmetricgroups/{ABMetricGroupId}', 'json', false, 'json', request);
}

model DeleteCrowdRequest {
  crowdId: string(name='CrowdId', description='This parameter is required.', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-abcdefg1234', position='Query'),
}

model DeleteCrowdResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='A04CB8C0-E74A-5E83-BC61-64D153574EC7'),
}

model DeleteCrowdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCrowdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteCrowd  DeleteCrowdRequest
  * @return DeleteCrowdResponse
 */
async function deleteCrowd(request: DeleteCrowdRequest): DeleteCrowdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteCrowd', 'DELETE', '/api/v1/crowds/{CrowdId}', 'json', false, 'json', request);
}

model DeleteEngineConfigRequest {
  engineConfigId?: string(name='EngineConfigId', example='21', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId?: string(name='InstanceId', example='pairec-cn-***test1', position='Query'),
}

model DeleteEngineConfigResponseBody = {
  requestId?: string(name='RequestId', example='F7AC05FF-EDE7-5C2B-B9AE-33D6DF4178BA'),
}

model DeleteEngineConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEngineConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteEngineConfig  DeleteEngineConfigRequest
  * @return DeleteEngineConfigResponse
 */
async function deleteEngineConfig(request: DeleteEngineConfigRequest): DeleteEngineConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteEngineConfig', 'DELETE', '/api/v1/engineconfigs/{EngineConfigId}', 'json', false, 'json', request);
}

model DeleteExperimentRequest {
  experimentId: string(name='ExperimentId', description='This parameter is required.', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-abcdefg1234', position='Query'),
}

model DeleteExperimentResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='2A734D87-2212-5C84-B63A-1AC87CA843D4'),
}

model DeleteExperimentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteExperimentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteExperiment  DeleteExperimentRequest
  * @return DeleteExperimentResponse
 */
async function deleteExperiment(request: DeleteExperimentRequest): DeleteExperimentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteExperiment', 'DELETE', '/api/v1/experiments/{ExperimentId}', 'json', false, 'json', request);
}

model DeleteExperimentGroupRequest {
  experimentGroupId: string(name='ExperimentGroupId', description='This parameter is required.', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-abcdefg1234', position='Query'),
}

model DeleteExperimentGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='A009D9BE-C85E-57B2-AE05-BD78BB6EBF50'),
}

model DeleteExperimentGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteExperimentGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteExperimentGroup  DeleteExperimentGroupRequest
  * @return DeleteExperimentGroupResponse
 */
async function deleteExperimentGroup(request: DeleteExperimentGroupRequest): DeleteExperimentGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteExperimentGroup', 'DELETE', '/api/v1/experimentgroups/{ExperimentGroupId}', 'json', false, 'json', request);
}

model DeleteInstanceResourceRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-test123', position='Path'),
  resourceId: string(name='ResourceId', description='This parameter is required.', example='reso-2s416t***', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model DeleteInstanceResourceResponseBody = {
  requestId?: string(name='RequestId', example='7D59453C-48AA-5FC5-8848-2D373BD1A17F'),
}

model DeleteInstanceResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteInstanceResourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteInstanceResource  DeleteInstanceResourceRequest
  * @return DeleteInstanceResourceResponse
 */
async function deleteInstanceResource(request: DeleteInstanceResourceRequest): DeleteInstanceResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteInstanceResource', 'DELETE', '/api/v1/instances/{InstanceId}/resources/{ResourceId}', 'json', false, 'json', request);
}

model DeleteLaboratoryRequest {
  laboratoryId: string(name='LaboratoryId', description='This parameter is required.', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-abcdefg1234', position='Query'),
}

model DeleteLaboratoryResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='1C0898E5-9220-5443-B2D9-445FF0688215'),
}

model DeleteLaboratoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteLaboratoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteLaboratory  DeleteLaboratoryRequest
  * @return DeleteLaboratoryResponse
 */
async function deleteLaboratory(request: DeleteLaboratoryRequest): DeleteLaboratoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteLaboratory', 'DELETE', '/api/v1/laboratories/{LaboratoryId}', 'json', false, 'json', request);
}

model DeleteLayerRequest {
  layerId?: string(name='LayerId', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234', position='Query'),
}

model DeleteLayerResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='8F457D79-C4A2-5E8C-83E4-0D089456E2AC'),
}

model DeleteLayerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteLayerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteLayer  DeleteLayerRequest
  * @return DeleteLayerResponse
 */
async function deleteLayer(request: DeleteLayerRequest): DeleteLayerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteLayer', 'DELETE', '/api/v1/layers/{LayerId}', 'json', false, 'json', request);
}

model DeleteParamRequest {
  paramId?: string(name='ParamId', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234', position='Query'),
}

model DeleteParamResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='F0AB6527-093F-5C44-B3BD-42C8C210C619'),
}

model DeleteParamResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteParamResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteParam  DeleteParamRequest
  * @return DeleteParamResponse
 */
async function deleteParam(request: DeleteParamRequest): DeleteParamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteParam', 'DELETE', '/api/v1/params/{ParamId}', 'json', false, 'json', request);
}

model DeleteResourceRuleRequest {
  resourceRuleId: string(name='ResourceRuleId', description='This parameter is required.', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
}

model DeleteResourceRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteResourceRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteResourceRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteResourceRule  DeleteResourceRuleRequest
  * @return DeleteResourceRuleResponse
 */
async function deleteResourceRule(request: DeleteResourceRuleRequest): DeleteResourceRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteResourceRule', 'DELETE', '/api/v1/resourcerules/{ResourceRuleId}', 'json', false, 'json', request);
}

model DeleteResourceRuleItemRequest {
  resourceRuleId: string(name='ResourceRuleId', description='This parameter is required.', position='Path'),
  resourceRuleItemId: string(name='ResourceRuleItemId', description='This parameter is required.', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
}

model DeleteResourceRuleItemResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteResourceRuleItemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteResourceRuleItemResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteResourceRuleItem  DeleteResourceRuleItemRequest
  * @return DeleteResourceRuleItemResponse
 */
async function deleteResourceRuleItem(request: DeleteResourceRuleItemRequest): DeleteResourceRuleItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteResourceRuleItem', 'DELETE', '/api/v1/resourcerules/{ResourceRuleId}/items/{ResourceRuleItemId}', 'json', false, 'json', request);
}

model DeleteSceneRequest {
  sceneId?: string(name='SceneId', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234', position='Query'),
}

model DeleteSceneResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='D75C43DC-3D3A-5CC8-9AAC-8C77306C433B'),
}

model DeleteSceneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSceneResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteScene  DeleteSceneRequest
  * @return DeleteSceneResponse
 */
async function deleteScene(request: DeleteSceneRequest): DeleteSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteScene', 'DELETE', '/api/v1/scenes/{SceneId}', 'json', false, 'json', request);
}

model DeleteSubCrowdRequest {
  crowdId: string(name='CrowdId', description='This parameter is required.', example='3', position='Path'),
  subCrowdId: string(name='SubCrowdId', description='This parameter is required.', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-abcdefg1234', position='Query'),
}

model DeleteSubCrowdResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='EE97D06A-2AA0-5AD9-B6CF-8A267924D691'),
}

model DeleteSubCrowdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSubCrowdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteSubCrowd  DeleteSubCrowdRequest
  * @return DeleteSubCrowdResponse
 */
async function deleteSubCrowd(request: DeleteSubCrowdRequest): DeleteSubCrowdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteSubCrowd', 'DELETE', '/api/v1/crowds/{CrowdId}/subcrowds/{SubCrowdId}', 'json', false, 'json', request);
}

model DeleteTableMetaRequest {
  tableMetaId: string(name='TableMetaId', description='This parameter is required.', example='2', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
}

model DeleteTableMetaResponseBody = {
  requestId?: string(name='RequestId', example='728C5E01-ABF6-5AA8-B9FC-B3BA05DECC77'),
}

model DeleteTableMetaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTableMetaResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteTableMeta  DeleteTableMetaRequest
  * @return DeleteTableMetaResponse
 */
async function deleteTableMeta(request: DeleteTableMetaRequest): DeleteTableMetaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteTableMeta', 'DELETE', '/api/v1/tablemetas/{TableMetaId}', 'json', false, 'json', request);
}

model DeleteTrafficControlTargetRequest {
  trafficControlTargetId?: string(name='TrafficControlTargetId', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId?: string(name='InstanceId', position='Query'),
}

model DeleteTrafficControlTargetResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteTrafficControlTargetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTrafficControlTargetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteTrafficControlTarget  DeleteTrafficControlTargetRequest
  * @return DeleteTrafficControlTargetResponse
 */
async function deleteTrafficControlTarget(request: DeleteTrafficControlTargetRequest): DeleteTrafficControlTargetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteTrafficControlTarget', 'DELETE', '/api/v1/trafficcontroltargets/{TrafficControlTargetId}', 'json', false, 'json', request);
}

model DeleteTrafficControlTaskRequest {
  trafficControlTaskId?: string(name='TrafficControlTaskId', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId?: string(name='InstanceId', position='Query'),
}

model DeleteTrafficControlTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteTrafficControlTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTrafficControlTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteTrafficControlTask  DeleteTrafficControlTaskRequest
  * @return DeleteTrafficControlTaskResponse
 */
async function deleteTrafficControlTask(request: DeleteTrafficControlTaskRequest): DeleteTrafficControlTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteTrafficControlTask', 'DELETE', '/api/v1/trafficcontroltasks/{TrafficControlTaskId}', 'json', false, 'json', request);
}

model GenerateTrafficControlTaskCodeRequest {
  trafficControlTaskId: string(name='TrafficControlTaskId', description='This parameter is required.', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  environment?: string(name='Environment', position='Body'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Body'),
}

model GenerateTrafficControlTaskCodeResponseBody = {
  code?: string(name='Code'),
  preNeedConfig?: boolean(name='PreNeedConfig'),
  requestId?: string(name='RequestId'),
}

model GenerateTrafficControlTaskCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateTrafficControlTaskCodeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GenerateTrafficControlTaskCode  GenerateTrafficControlTaskCodeRequest
  * @return GenerateTrafficControlTaskCodeResponse
 */
async function generateTrafficControlTaskCode(request: GenerateTrafficControlTaskCodeRequest): GenerateTrafficControlTaskCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GenerateTrafficControlTaskCode', 'POST', '/api/v1/trafficcontroltasks/{TrafficControlTaskId}/action/generatecode', 'json', false, 'json', request);
}

model GenerateTrafficControlTaskConfigRequest {
  trafficControlTaskId?: string(name='TrafficControlTaskId', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId?: string(name='InstanceId', position='Body'),
}

model GenerateTrafficControlTaskConfigResponseBody = {
  config?: string(name='Config'),
  requestId?: string(name='RequestId'),
}

model GenerateTrafficControlTaskConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateTrafficControlTaskConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GenerateTrafficControlTaskConfig  GenerateTrafficControlTaskConfigRequest
  * @return GenerateTrafficControlTaskConfigResponse
 */
async function generateTrafficControlTaskConfig(request: GenerateTrafficControlTaskConfigRequest): GenerateTrafficControlTaskConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GenerateTrafficControlTaskConfig', 'POST', '/api/v1/trafficcontroltasks/{TrafficControlTaskId}/action/generateconfig', 'json', false, 'json', request);
}

model GetABMetricRequest {
  ABMetricId: string(name='ABMetricId', description='This parameter is required.', example='1', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-test1', position='Query'),
}

model GetABMetricResponseBody = {
  definition?: string(name='Definition', example='sum(click_cnt)'),
  description?: string(name='Description'),
  leftMetricId?: string(name='LeftMetricId', example='3'),
  name?: string(name='Name', example='pv'),
  operator?: string(name='Operator', example='Division'),
  realtime?: string(name='Realtime', example='false'),
  requestId?: string(name='RequestId', example='728C5E01-ABF6-5AA8-B9FC-B3BA05DECC77'),
  resultResourceId?: string(name='ResultResourceId', example='5'),
  resultTableMetaId?: string(name='ResultTableMetaId', example='3'),
  rightMetricId?: string(name='RightMetricId', example='2'),
  sceneId?: string(name='SceneId', example='1'),
  sceneName?: string(name='SceneName', example='home_feed'),
  statisticsCycle?: int32(name='StatisticsCycle', example='1'),
  tableMetaId?: string(name='TableMetaId', example='2'),
  type?: string(name='Type', example='Single'),
}

model GetABMetricResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetABMetricResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetABMetric  GetABMetricRequest
  * @return GetABMetricResponse
 */
async function getABMetric(request: GetABMetricRequest): GetABMetricResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetABMetric', 'GET', '/api/v1/abmetrics/{ABMetricId}', 'json', false, 'json', request);
}

model GetABMetricGroupRequest {
  ABMetricGroupId: string(name='ABMetricGroupId', description='This parameter is required.', example='1', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-test1', position='Query'),
}

model GetABMetricGroupResponseBody = {
  ABMetricIds?: string(name='ABMetricIds', example='1,2'),
  ABMetricNames?: string(name='ABMetricNames', example='pv,uv'),
  description?: string(name='Description'),
  name?: string(name='Name', example='visits'),
  owner?: string(name='Owner', example='2799614***'),
  realtime?: boolean(name='Realtime', example='false'),
  requestId?: string(name='RequestId', example='01D22D08-BA20-5F35-8302-99115F288220'),
  sceneId?: string(name='SceneId', example='1'),
}

model GetABMetricGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetABMetricGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetABMetricGroup  GetABMetricGroupRequest
  * @return GetABMetricGroupResponse
 */
async function getABMetricGroup(request: GetABMetricGroupRequest): GetABMetricGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetABMetricGroup', 'GET', '/api/v1/abmetricgroups/{ABMetricGroupId}', 'json', false, 'json', request);
}

model GetCalculationJobRequest {
  calculationJobId: string(name='CalculationJobId', description='This parameter is required.', example='1', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-test1', position='Query'),
}

model GetCalculationJobResponseBody = {
  ABMetricId?: string(name='ABMetricId', example='1'),
  ABMetricName?: string(name='ABMetricName', example='pv'),
  bizDate?: string(name='BizDate', example='2021-12-15'),
  config?: string(name='Config', example='{}'),
  gmtRanTime?: string(name='GmtRanTime', example='2021-12-15T23:24:33.132+08:00'),
  jobMessage?: [ string ](name='JobMessage'),
  jobSource?: string(name='JobSource', example='CronOffline'),
  requestId?: string(name='RequestId', example='7D59453C-48AA-5FC5-8848-2D373BD1A17F'),
  status?: string(name='Status', example='Success'),
}

model GetCalculationJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCalculationJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetCalculationJob  GetCalculationJobRequest
  * @return GetCalculationJobResponse
 */
async function getCalculationJob(request: GetCalculationJobRequest): GetCalculationJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetCalculationJob', 'GET', '/api/v1/calculationjobs/{CalculationJobId}', 'json', false, 'json', request);
}

model GetEngineConfigRequest {
  engineConfigId?: string(name='EngineConfigId', example='9', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId?: string(name='InstanceId', example='pairec-cn-***test', position='Query'),
}

model GetEngineConfigResponseBody = {
  configValue?: string(name='ConfigValue', example='{}'),
  description?: string(name='Description'),
  environment?: string(name='Environment', example='Pre'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2024-01-03T02:28:00.000Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2024-08-27T12:00:00Z'),
  gmtReleasedTime?: string(name='GmtReleasedTime', example='2024-01-03 02:28:00'),
  name?: string(name='Name', example='engine_config_v1'),
  requestId?: string(name='RequestId', example='59CE7EC6-F268-5D71-9215-32922CC50D72'),
  status?: string(name='Status', example='Released'),
}

model GetEngineConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEngineConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetEngineConfig  GetEngineConfigRequest
  * @return GetEngineConfigResponse
 */
async function getEngineConfig(request: GetEngineConfigRequest): GetEngineConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetEngineConfig', 'GET', '/api/v1/engineconfigs/{EngineConfigId}', 'json', false, 'json', request);
}

model GetExperimentRequest {
  experimentId: string(name='ExperimentId', description='This parameter is required.', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-test1', position='Query'),
}

model GetExperimentResponseBody = {
  aliasExperimentId?: string(name='AliasExperimentId', example='L1#EG1#E1'),
  buckets?: string(name='Buckets', example='1,2,3'),
  config?: string(name='Config', example='{}'),
  debugCrowdId?: string(name='DebugCrowdId', example='3'),
  debugUsers?: string(name='DebugUsers', example='uid1,uid2,uid3'),
  description?: string(name='Description', example='This is a test.'),
  experimentGroupId?: string(name='ExperimentGroupId', example='3'),
  flowPercent?: int32(name='FlowPercent', example='100'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-12-15T23:24:33.132+08:00'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-12-15T23:24:33.132+08:00'),
  laboratoryId?: string(name='LaboratoryId', example='3'),
  layerId?: string(name='LayerId', example='3'),
  name?: string(name='Name', example='experiment_test1'),
  requestId?: string(name='RequestId', description='Id of the request', example='74D958EF-3598-56FA-8296-FF1575CE43DF'),
  sceneId?: string(name='SceneId', example='3'),
  status?: string(name='Status', example='Offline'),
  type?: string(name='Type', example='Baseline'),
}

model GetExperimentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetExperimentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetExperiment  GetExperimentRequest
  * @return GetExperimentResponse
 */
async function getExperiment(request: GetExperimentRequest): GetExperimentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetExperiment', 'GET', '/api/v1/experiments/{ExperimentId}', 'json', false, 'json', request);
}

model GetExperimentGroupRequest {
  experimentGroupId: string(name='ExperimentGroupId', description='This parameter is required.', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-abcdefg1234', position='Query'),
}

model GetExperimentGroupResponseBody = {
  config?: string(name='Config', example='{"RankBy": "Score"}'),
  crowdId?: string(name='CrowdId', example='3'),
  crowdTargetType?: string(name='CrowdTargetType'),
  debugCrowdId?: string(name='DebugCrowdId', example='4'),
  debugUsers?: string(name='DebugUsers', example='1124512470******,1124512471******,1124512472******'),
  description?: string(name='Description', example='This is a test.'),
  distributionTimeDuration?: int32(name='DistributionTimeDuration', example='5'),
  distributionType?: string(name='DistributionType', example='UserId'),
  filter?: string(name='Filter', example='gender=female'),
  holdingBuckets?: string(name='HoldingBuckets'),
  laboratoryId?: string(name='LaboratoryId', example='4'),
  layerId?: string(name='LayerId', example='3'),
  name?: string(name='Name', example='experiment_group1'),
  needAA?: boolean(name='NeedAA', example='true'),
  owner?: string(name='Owner', example='1124512470******'),
  randomFlow?: long(name='RandomFlow'),
  requestId?: string(name='RequestId', description='Id of the request', example='BDB621CB-A81E-5D39-8793-39A365CBCC74'),
  reservedBuckets?: string(name='ReservedBuckets', example='1,2,3,4'),
  sceneId?: string(name='SceneId', example='1'),
  status?: string(name='Status', example='Offline'),
}

model GetExperimentGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetExperimentGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetExperimentGroup  GetExperimentGroupRequest
  * @return GetExperimentGroupResponse
 */
async function getExperimentGroup(request: GetExperimentGroupRequest): GetExperimentGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetExperimentGroup', 'GET', '/api/v1/experimentgroups/{ExperimentGroupId}', 'json', false, 'json', request);
}

model GetFeatureConsistencyCheckJobRequest {
  featureConsistencyCheckJobId?: string(name='FeatureConsistencyCheckJobId', example='4', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId?: string(name='InstanceId', example='pairec-cn-********', position='Query'),
}

model GetFeatureConsistencyCheckJobResponseBody = {
  config?: string(name='Config', example='{}'),
  featureConsistencyCheckJobConfigId?: string(name='FeatureConsistencyCheckJobConfigId', example='5'),
  featureConsistencyCheckJobConfigName?: string(name='FeatureConsistencyCheckJobConfigName', example='feature_consistency_check_1'),
  gmtEndTime?: string(name='GmtEndTime', example='2021-12-15T23:24:33.132+08:00'),
  gmtStartTime?: string(name='GmtStartTime', example='2021-12-15T23:24:33.132+08:00'),
  logs?: [ string ](name='Logs'),
  requestId?: string(name='RequestId', example='A04CB8C0-E74A-5E83-BC61-64D153574EC7'),
  status?: string(name='Status', example='Running'),
}

model GetFeatureConsistencyCheckJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFeatureConsistencyCheckJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetFeatureConsistencyCheckJob  GetFeatureConsistencyCheckJobRequest
  * @return GetFeatureConsistencyCheckJobResponse
 */
async function getFeatureConsistencyCheckJob(request: GetFeatureConsistencyCheckJobRequest): GetFeatureConsistencyCheckJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetFeatureConsistencyCheckJob', 'GET', '/api/v1/featureconsistencycheck/jobs/{FeatureConsistencyCheckJobId}', 'json', false, 'json', request);
}

model GetFeatureConsistencyCheckJobConfigRequest {
  featureConsistencyCheckJobConfigId: string(name='FeatureConsistencyCheckJobConfigId', description='This parameter is required.', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-********', position='Query'),
}

model GetFeatureConsistencyCheckJobConfigResponseBody = {
  compareFeature?: boolean(name='CompareFeature', example='true'),
  datasetId?: string(name='DatasetId'),
  datasetMountPath?: string(name='DatasetMountPath'),
  datasetName?: string(name='DatasetName'),
  datasetType?: string(name='DatasetType'),
  datasetUri?: string(name='DatasetUri'),
  defaultRoute?: string(name='DefaultRoute'),
  easServiceName?: string(name='EasServiceName', example='eas_service_1'),
  easyRecPackagePath?: string(name='EasyRecPackagePath', example='oss://*******'),
  easyRecVersion?: string(name='EasyRecVersion', example='1.3.60'),
  featureDisplayExclude?: string(name='FeatureDisplayExclude', example='feature1,feature2'),
  featureLandingResourceId?: string(name='FeatureLandingResourceId', example='reso-********'),
  featureLandingResourceUri?: string(name='FeatureLandingResourceUri', example='mc_project_1'),
  featurePriority?: string(name='FeaturePriority', example='feature1,feature2,feature3'),
  featureStoreItemId?: string(name='FeatureStoreItemId'),
  featureStoreModelId?: string(name='FeatureStoreModelId'),
  featureStoreProjectId?: string(name='FeatureStoreProjectId'),
  featureStoreProjectName?: string(name='FeatureStoreProjectName'),
  featureStoreSeqFeatureView?: string(name='FeatureStoreSeqFeatureView'),
  featureStoreUserId?: string(name='FeatureStoreUserId'),
  fgJarVersion?: string(name='FgJarVersion', example='1.0.0'),
  fgJsonFileName?: string(name='FgJsonFileName', example='file.json'),
  generateZip?: boolean(name='GenerateZip', example='true'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-12-15T23:24:33.132+08:00'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-12-15T23:24:33.132+08:00'),
  itemIdField?: string(name='ItemIdField', example='item_id'),
  itemTable?: string(name='ItemTable', example='item_table'),
  itemTablePartitionField?: string(name='ItemTablePartitionField', example='ds'),
  itemTablePartitionFieldFormat?: string(name='ItemTablePartitionFieldFormat', example='yyyymmdd'),
  latestJobGmtSamplingEndTime?: string(name='LatestJobGmtSamplingEndTime', example='2021-12-15T23:24:33.132+08:00'),
  latestJobGmtSamplingStartTime?: string(name='LatestJobGmtSamplingStartTime', example='2021-12-15T23:24:33.132+08:00'),
  latestJobId?: string(name='LatestJobId', example='3'),
  name?: string(name='Name', example='feature_consistency_check1'),
  ossBucket?: string(name='OssBucket', example='oss_bucket_1'),
  ossResourceId?: string(name='OssResourceId', example='reso-********'),
  predictWorkerCount?: int32(name='PredictWorkerCount'),
  predictWorkerCpu?: int32(name='PredictWorkerCpu'),
  predictWorkerMemory?: int32(name='PredictWorkerMemory'),
  requestId?: string(name='RequestId', example='728C5E01-ABF6-5AA8-B9FC-B3BA05DECC77'),
  sampleRate?: string(name='SampleRate', example='0.89'),
  sceneId?: string(name='SceneId', example='3'),
  sceneName?: string(name='SceneName', example='scene1'),
  securityGroupId?: string(name='SecurityGroupId'),
  serviceId?: string(name='ServiceId', example='4'),
  serviceName?: string(name='ServiceName', example='service1'),
  status?: string(name='Status', example='Editable'),
  switchId?: string(name='SwitchId'),
  useFeatureStore?: boolean(name='UseFeatureStore'),
  userIdField?: string(name='UserIdField', example='user_id'),
  userTable?: string(name='UserTable', example='user_table'),
  userTablePartitionField?: string(name='UserTablePartitionField', example='ds'),
  userTablePartitionFieldFormat?: string(name='UserTablePartitionFieldFormat', example='yyyymmdd'),
  vpcId?: string(name='VpcId'),
  workflowName?: string(name='WorkflowName', example='work_flow_1'),
  workspaceId?: string(name='WorkspaceId'),
}

model GetFeatureConsistencyCheckJobConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFeatureConsistencyCheckJobConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetFeatureConsistencyCheckJobConfig  GetFeatureConsistencyCheckJobConfigRequest
  * @return GetFeatureConsistencyCheckJobConfigResponse
 */
async function getFeatureConsistencyCheckJobConfig(request: GetFeatureConsistencyCheckJobConfigRequest): GetFeatureConsistencyCheckJobConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetFeatureConsistencyCheckJobConfig', 'GET', '/api/v1/featureconsistencycheck/jobconfigs/{FeatureConsistencyCheckJobConfigId}', 'json', false, 'json', request);
}

model GetInstanceRequest {
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model GetInstanceResponseBody = {
  chargeType?: string(name='ChargeType', example='Subscription'),
  commodityCode?: string(name='CommodityCode', example='airec_developers_public_cn'),
  config?: {
    dataManagements?: [ 
      {
        componentCode?: string(name='ComponentCode', example='storage'),
        meta?: map[string]any(name='Meta'),
        type?: string(name='Type', example='OSS'),
      }
    ](name='DataManagements'),
    engines?: [ 
      {
        componentCode?: string(name='ComponentCode', example='feature'),
        meta?: map[string]any(name='Meta'),
        type?: string(name='Type', example='Hologres'),
      }
    ](name='Engines'),
    monitors?: [ 
      {
        componentCode?: string(name='ComponentCode', example='featuresets'),
        meta?: map[string]any(name='Meta'),
        type?: string(name='Type', example='Platform'),
      }
    ](name='Monitors'),
  }(name='Config'),
  expiredTime?: string(name='ExpiredTime', example='2022-12-14 00:00:00.0'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2022-10-13 17:34:52.0'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2022-11-05 09:02:30.0'),
  instanceId?: string(name='InstanceId', example='pairec-test1'),
  operatingTool?: {
    isEnable?: boolean(name='IsEnable'),
  }(name='OperatingTool'),
  regionId?: string(name='RegionId', example='cn-shenzhen'),
  requestId?: string(name='RequestId', example='728C5E01-ABF6-5AA8-B9FC-B3BA05DECC77'),
  status?: string(name='Status', example='Initializing'),
  type?: string(name='Type', example='basic'),
}

model GetInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetInstance  GetInstanceRequest
  * @return GetInstanceResponse
 */
async function getInstance(request: GetInstanceRequest): GetInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetInstance', 'GET', '/api/v1/instances/{InstanceId}', 'json', false, 'json', request);
}

model GetInstanceResourceRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-test1', position='Path'),
  resourceId: string(name='ResourceId', description='This parameter is required.', example='reso-2s416t***', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model GetInstanceResourceResponseBody = {
  category?: string(name='Category', example='DataManagement'),
  config?: string(name='Config', example='{}'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2020-10-13 17:34:52'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2020-10-13 17:34:52'),
  group?: string(name='Group', example='storage'),
  requestId?: string(name='RequestId', example='D75C43DC-3D3A-5CC8-9AAC-8C77306C433B'),
  resourceId?: string(name='ResourceId', example='reso-2s416t***'),
  type?: string(name='Type', example='OSS'),
  uri?: string(name='Uri', example='bucket-test-123'),
}

model GetInstanceResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceResourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetInstanceResource  GetInstanceResourceRequest
  * @return GetInstanceResourceResponse
 */
async function getInstanceResource(request: GetInstanceResourceRequest): GetInstanceResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetInstanceResource', 'GET', '/api/v1/instances/{InstanceId}/resources/{ResourceId}', 'json', false, 'json', request);
}

model GetInstanceResourceTableRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-test1', position='Path'),
  resourceId: string(name='ResourceId', description='This parameter is required.', example='reso-2s416t***', position='Path'),
  tableName: string(name='TableName', description='This parameter is required.', example='test_table', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model GetInstanceResourceTableResponseBody = {
  fields?: [ 
    {
      isDimensionField?: boolean(name='IsDimensionField', example='false'),
      isPartitionField?: boolean(name='IsPartitionField'),
      meaning?: string(name='Meaning', example='""'),
      name?: string(name='Name', example='age'),
      type?: string(name='Type', example='BIGINT'),
    }
  ](name='Fields'),
  requestId?: string(name='RequestId', example='74D958EF-3598-56FA-8296-FF1575CE43DF'),
  tableName?: string(name='TableName', example='test_table'),
}

model GetInstanceResourceTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceResourceTableResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetInstanceResourceTable  GetInstanceResourceTableRequest
  * @return GetInstanceResourceTableResponse
 */
async function getInstanceResourceTable(request: GetInstanceResourceTableRequest): GetInstanceResourceTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetInstanceResourceTable', 'GET', '/api/v1/instances/{InstanceId}/resources/{ResourceId}/tables/{TableName}', 'json', false, 'json', request);
}

model GetLaboratoryRequest {
  laboratoryId: string(name='LaboratoryId', description='This parameter is required.', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-test1', position='Query'),
}

model GetLaboratoryResponseBody = {
  bucketCount?: int32(name='BucketCount', example='100'),
  bucketType?: string(name='BucketType', example='Filter'),
  buckets?: string(name='Buckets', example='1,2,3,10-20'),
  crowdId?: string(name='CrowdId', example='3'),
  debugCrowdId?: string(name='DebugCrowdId', example='3'),
  debugUsers?: string(name='DebugUsers', example='user1,user2,user3'),
  description?: string(name='Description', example='This is a test.'),
  environment?: string(name='Environment', example='Daily'),
  filter?: string(name='Filter', example='filter=xxx'),
  name?: string(name='Name', example='laboratory1'),
  requestId?: string(name='RequestId', description='Id of the request', example='1C0898E5-9220-5443-B2D9-445FF0688215'),
  sceneId?: string(name='SceneId', example='3'),
  status?: string(name='Status', example='Offline'),
  type?: string(name='Type', example='Base'),
}

model GetLaboratoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLaboratoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetLaboratory  GetLaboratoryRequest
  * @return GetLaboratoryResponse
 */
async function getLaboratory(request: GetLaboratoryRequest): GetLaboratoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetLaboratory', 'GET', '/api/v1/laboratories/{LaboratoryId}', 'json', false, 'json', request);
}

model GetLayerRequest {
  layerId: string(name='LayerId', description='This parameter is required.', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-abcdefg1234', position='Query'),
}

model GetLayerResponseBody = {
  description?: string(name='Description', example='This is a test.'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  laboratoryId?: string(name='LaboratoryId', example='3'),
  name?: string(name='Name', example='layer1'),
  requestId?: string(name='RequestId', description='Id of the request', example='EE97D06A-2AA0-5AD9-B6CF-8A267924D691'),
  residualFlow?: long(name='ResidualFlow'),
  sceneId?: string(name='SceneId', example='4'),
}

model GetLayerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLayerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetLayer  GetLayerRequest
  * @return GetLayerResponse
 */
async function getLayer(request: GetLayerRequest): GetLayerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetLayer', 'GET', '/api/v1/layers/{LayerId}', 'json', false, 'json', request);
}

model GetResourceRuleRequest {
  resourceRuleId: string(name='ResourceRuleId', description='This parameter is required.', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
}

model GetResourceRuleResponseBody = {
  description?: string(name='Description'),
  metricOperationType?: string(name='MetricOperationType'),
  metricPullInfo?: string(name='MetricPullInfo'),
  metricPullPeriod?: string(name='MetricPullPeriod'),
  name?: string(name='Name'),
  requestId?: string(name='RequestId'),
  resourceRuleId?: string(name='ResourceRuleId'),
  ruleComputingDefinition?: string(name='RuleComputingDefinition'),
  ruleItems?: [ 
    {
      description?: string(name='Description'),
      maxValue?: string(name='MaxValue'),
      minValue?: string(name='MinValue'),
      name?: string(name='Name'),
      value?: string(name='Value'),
    }
  ](name='RuleItems'),
}

model GetResourceRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetResourceRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetResourceRule  GetResourceRuleRequest
  * @return GetResourceRuleResponse
 */
async function getResourceRule(request: GetResourceRuleRequest): GetResourceRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetResourceRule', 'GET', '/api/v1/resourcerules/{ResourceRuleId}', 'json', false, 'json', request);
}

model GetSceneRequest {
  sceneId?: string(name='SceneId', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234', position='Query'),
}

model GetSceneResponseBody = {
  description?: string(name='Description', example='This is a test.'),
  flows?: [ 
    {
      flowCode?: string(name='FlowCode', example='liuliang1'),
      flowName?: string(name='FlowName', example='流量1'),
    }
  ](name='Flows'),
  name?: string(name='Name', example='scene1'),
  requestId?: string(name='RequestId', description='Id of the request', example='B8987BF7-6028-5B17-80E0-251B7BD67BBA'),
}

model GetSceneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSceneResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetScene  GetSceneRequest
  * @return GetSceneResponse
 */
async function getScene(request: GetSceneRequest): GetSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetScene', 'GET', '/api/v1/scenes/{SceneId}', 'json', false, 'json', request);
}

model GetSubCrowdRequest {
  crowdId: string(name='CrowdId', description='This parameter is required.', example='3', position='Path'),
  subCrowdId: string(name='SubCrowdId', description='This parameter is required.', example='4', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-abcdefg1234', position='Query'),
}

model GetSubCrowdResponseBody = {
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-12-15T23:24:33.132+08:00'),
  quantity?: string(name='Quantity', example='3'),
  requestId?: string(name='RequestId', description='Id of the request', example='01D22D08-BA20-5F35-8302-99115F288220'),
  source?: string(name='Source', example='ManualInput'),
  users?: string(name='Users', example='user1,user2'),
}

model GetSubCrowdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSubCrowdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSubCrowd  GetSubCrowdRequest
  * @return GetSubCrowdResponse
 */
async function getSubCrowd(request: GetSubCrowdRequest): GetSubCrowdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetSubCrowd', 'GET', '/api/v1/crowds/{CrowdId}/subcrowds/{SubCrowdId}', 'json', false, 'json', request);
}

model GetTableMetaRequest {
  tableMetaId: string(name='TableMetaId', description='This parameter is required.', example='2', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
}

model GetTableMetaResponseBody = {
  canDelete?: boolean(name='CanDelete', example='false'),
  config?: string(name='Config'),
  description?: string(name='Description', example='this is a test table'),
  fields?: [ 
    {
      isDimensionField?: boolean(name='IsDimensionField', example='false'),
      meaning?: string(name='Meaning', example='the gender of people'),
      name?: string(name='Name', example='gender'),
      type?: string(name='Type', example='BIGINT'),
    }
  ](name='Fields'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-12-15:24:33'),
  gmtImportedTime?: string(name='GmtImportedTime'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-12-15:24:33'),
  module?: string(name='Module', example='ABTest'),
  name?: string(name='Name', example='test_table'),
  requestId?: string(name='RequestId', example='28C5E01-ABF6-5AA8-B9FC-B3BA05DECC77'),
  resourceId?: string(name='ResourceId', example='reso-wkgo***'),
  tableMetaId?: string(name='TableMetaId'),
  tableName?: string(name='TableName', example='table_mysql'),
  type?: string(name='Type', example='MaxCompute'),
  url?: string(name='Url', example='https://dmc-xxx.com/dm/table/xxx'),
}

model GetTableMetaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTableMetaResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTableMeta  GetTableMetaRequest
  * @return GetTableMetaResponse
 */
async function getTableMeta(request: GetTableMetaRequest): GetTableMetaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTableMeta', 'GET', '/api/v1/tablemetas/{TableMetaId}', 'json', false, 'json', request);
}

model GetTrafficControlTargetRequest {
  trafficControlTargetId: string(name='TrafficControlTargetId', description='This parameter is required.', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
}

model GetTrafficControlTargetResponseBody = {
  endTime?: string(name='EndTime'),
  event?: string(name='Event'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  itemConditionArray?: string(name='ItemConditionArray'),
  itemConditionExpress?: string(name='ItemConditionExpress'),
  itemConditionType?: string(name='ItemConditionType'),
  name?: string(name='Name'),
  newProductRegulation?: boolean(name='NewProductRegulation'),
  recallName?: string(name='RecallName'),
  requestId?: string(name='RequestId'),
  splitParts?: {
    setPoints?: [ long ](name='SetPoints'),
    setValues?: [ long ](name='SetValues'),
    timePoints?: [ long ](name='TimePoints'),
  }(name='SplitParts'),
  startTime?: string(name='StartTime'),
  statisPeriod?: string(name='StatisPeriod'),
  status?: string(name='Status'),
  toleranceValue?: long(name='ToleranceValue'),
  trafficControlTargetId?: string(name='TrafficControlTargetId'),
  value?: float(name='Value'),
}

model GetTrafficControlTargetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTrafficControlTargetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTrafficControlTarget  GetTrafficControlTargetRequest
  * @return GetTrafficControlTargetResponse
 */
async function getTrafficControlTarget(request: GetTrafficControlTargetRequest): GetTrafficControlTargetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTrafficControlTarget', 'GET', '/api/v1/trafficcontroltargets/{TrafficControlTargetId}', 'json', false, 'json', request);
}

model GetTrafficControlTaskRequest {
  trafficControlTaskId: string(name='TrafficControlTaskId', description='This parameter is required.', position='Path'),
  controlTargetFilter?: string(name='ControlTargetFilter', position='Query'),
  environment?: string(name='Environment', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  version?: string(name='Version', position='Query'),
}

model GetTrafficControlTaskResponseBody = {
  behaviorTableMetaId?: string(name='BehaviorTableMetaId'),
  controlGranularity?: string(name='ControlGranularity'),
  controlLogic?: string(name='ControlLogic'),
  controlType?: string(name='ControlType'),
  description?: string(name='Description'),
  endTime?: string(name='EndTime'),
  everPublished?: boolean(name='EverPublished'),
  executionTime?: string(name='ExecutionTime'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifiedTime?: string(name='GmtModifiedTime'),
  itemConditionArray?: string(name='ItemConditionArray'),
  itemConditionExpress?: string(name='ItemConditionExpress'),
  itemConditionType?: string(name='ItemConditionType'),
  itemTableMetaId?: string(name='ItemTableMetaId'),
  name?: string(name='Name'),
  preExperimentIds?: string(name='PreExperimentIds'),
  prepubStatus?: string(name='PrepubStatus'),
  prodExperimentIds?: string(name='ProdExperimentIds'),
  productStatus?: string(name='ProductStatus'),
  requestId?: string(name='RequestId'),
  sceneId?: string(name='SceneId'),
  sceneName?: string(name='SceneName'),
  serviceId?: string(name='ServiceId'),
  startTime?: string(name='StartTime'),
  statisBehaviorConditionArray?: string(name='StatisBehaviorConditionArray'),
  statisBehaviorConditionExpress?: string(name='StatisBehaviorConditionExpress'),
  statisBehaviorConditionType?: string(name='StatisBehaviorConditionType'),
  trafficControlTargets?: [ 
    {
      endTime?: string(name='EndTime'),
      event?: string(name='Event'),
      gmtCreateTime?: string(name='GmtCreateTime'),
      gmtModifiedTime?: string(name='GmtModifiedTime'),
      itemConditionArray?: string(name='ItemConditionArray'),
      itemConditionExpress?: string(name='ItemConditionExpress'),
      itemConditionType?: string(name='ItemConditionType'),
      name?: string(name='Name'),
      newProductRegulation?: boolean(name='NewProductRegulation'),
      recallName?: string(name='RecallName'),
      splitParts?: {
        setPoints?: [ int32 ](name='SetPoints'),
        setValues?: [ long ](name='SetValues'),
        timePoints?: [ int32 ](name='TimePoints'),
      }(name='SplitParts'),
      startTime?: string(name='StartTime'),
      statisPeriod?: string(name='StatisPeriod'),
      status?: string(name='Status'),
      toleranceValue?: long(name='ToleranceValue'),
      trafficControlTargetId?: string(name='TrafficControlTargetId'),
      value?: float(name='Value'),
    }
  ](name='TrafficControlTargets'),
  trafficControlTaskId?: string(name='TrafficControlTaskId'),
  userConditionArray?: string(name='UserConditionArray'),
  userConditionExpress?: string(name='UserConditionExpress'),
  userConditionType?: string(name='UserConditionType'),
  userTableMetaId?: string(name='UserTableMetaId'),
}

model GetTrafficControlTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTrafficControlTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTrafficControlTask  GetTrafficControlTaskRequest
  * @return GetTrafficControlTaskResponse
 */
async function getTrafficControlTask(request: GetTrafficControlTaskRequest): GetTrafficControlTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTrafficControlTask', 'GET', '/api/v1/trafficcontroltasks/{TrafficControlTaskId}', 'json', false, 'json', request);
}

model GetTrafficControlTaskTrafficRequest {
  trafficControlTaskId?: string(name='TrafficControlTaskId', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  environment?: string(name='Environment', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
}

model GetTrafficControlTaskTrafficResponseBody = {
  requestId?: string(name='RequestId'),
  trafficControlTaskTrafficInfo?: {
    targetTraffics?: [ 
      {
        data?: map[string]TrafficControlTaskTrafficInfoTargetTrafficsDataValue(name='Data'),
        trafficContorlTargetId?: string(name='TrafficContorlTargetId'),
      }
    ](name='TargetTraffics'),
    taskTraffics?: map[string]TrafficControlTaskTrafficInfoTaskTrafficsValue(name='TaskTraffics'),
  }(name='TrafficControlTaskTrafficInfo'),
}

model GetTrafficControlTaskTrafficResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTrafficControlTaskTrafficResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTrafficControlTaskTraffic  GetTrafficControlTaskTrafficRequest
  * @return GetTrafficControlTaskTrafficResponse
 */
async function getTrafficControlTaskTraffic(request: GetTrafficControlTaskTrafficRequest): GetTrafficControlTaskTrafficResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTrafficControlTaskTraffic', 'GET', '/api/v1/trafficcontroltasks/{TrafficControlTaskId}/trafficinfo', 'json', false, 'json', request);
}

model ListABMetricGroupsRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-test1', position='Query'),
  order?: string(name='Order', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  realtime?: boolean(name='Realtime', example='false', position='Query'),
  sceneId?: string(name='SceneId', example='1', position='Query'),
  sortBy?: string(name='SortBy', position='Query'),
}

model ListABMetricGroupsResponseBody = {
  ABMetricGroups?: [ 
    {
      ABMetricGroupId?: string(name='ABMetricGroupId', example='1'),
      ABMetricIds?: string(name='ABMetricIds', example='1,2'),
      ABMetricNames?: string(name='ABMetricNames', example='pv,uv'),
      description?: string(name='Description'),
      name?: string(name='Name', example='visits'),
      owner?: string(name='Owner', example='2799614***'),
      realtime?: boolean(name='Realtime', example='false'),
      sceneId?: string(name='SceneId', example='1'),
    }
  ](name='ABMetricGroups'),
  requestId?: string(name='RequestId', example='E15A1443-7917-5BE0-AE70-25538ECF398D'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListABMetricGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListABMetricGroupsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListABMetricGroups  ListABMetricGroupsRequest
  * @return ListABMetricGroupsResponse
 */
async function listABMetricGroups(request: ListABMetricGroupsRequest): ListABMetricGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListABMetricGroups', 'GET', '/api/v1/abmetricgroups', 'json', false, 'json', request);
}

model ListABMetricsRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-test1', position='Query'),
  name?: string(name='Name', example='home', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  realtime?: boolean(name='Realtime', example='false', position='Query'),
  sceneId?: string(name='SceneId', example='1', position='Query'),
  tableMetaId?: string(name='TableMetaId', example='1', position='Query'),
  type?: string(name='Type', example='Single', position='Query'),
}

model ListABMetricsResponseBody = {
  ABMetrics?: [ 
    {
      ABMetricId?: string(name='ABMetricId', example='1'),
      definition?: string(name='Definition', example='sum(click_cnt)'),
      description?: string(name='Description'),
      leftMetricId?: string(name='LeftMetricId', example='3'),
      name?: string(name='Name', example='pv'),
      operator?: string(name='Operator', example='Division'),
      realtime?: string(name='Realtime', example='false'),
      resultResourceId?: string(name='ResultResourceId', example='3'),
      resultTableMetaId?: string(name='ResultTableMetaId', example='2'),
      rightMetricId?: string(name='RightMetricId', example='2'),
      sceneId?: string(name='SceneId', example='1'),
      sceneName?: string(name='SceneName', example='home_feed'),
      statisticsCycle?: int32(name='StatisticsCycle', example='1'),
      tableMetaId?: string(name='TableMetaId', example='1'),
      type?: string(name='Type', example='Single'),
    }
  ](name='ABMetrics'),
  requestId?: string(name='RequestId', example='F7AC05FF-EDE7-5C2B-B9AE-33D6DF4178BA'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListABMetricsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListABMetricsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListABMetrics  ListABMetricsRequest
  * @return ListABMetricsResponse
 */
async function listABMetrics(request: ListABMetricsRequest): ListABMetricsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListABMetrics', 'GET', '/api/v1/abmetrics', 'json', false, 'json', request);
}

model ListCalculationJobsRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-test1', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  sceneId: string(name='SceneId', description='This parameter is required.', example='1', position='Query'),
  status?: string(name='Status', example='Success', position='Query'),
}

model ListCalculationJobsResponseBody = {
  calculationJobs?: [ 
    {
      ABMetricName?: string(name='ABMetricName', example='pv'),
      bizDate?: string(name='BizDate', example='2021-12-15'),
      calculationJobId?: string(name='CalculationJobId', example='2'),
      config?: string(name='Config', example='{}'),
      gmtRanTime?: string(name='GmtRanTime', example='2021-12-15T23:24:33.132+08:00'),
      jobMessage?: [ string ](name='JobMessage'),
      jobSource?: string(name='JobSource', example='CronOffline'),
      status?: string(name='Status', example='Success'),
    }
  ](name='CalculationJobs'),
  requestId?: string(name='RequestId', example='F7AC05FF-EDE7-5C2B-B9AE-33D6DF4178BA'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListCalculationJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCalculationJobsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListCalculationJobs  ListCalculationJobsRequest
  * @return ListCalculationJobsResponse
 */
async function listCalculationJobs(request: ListCalculationJobsRequest): ListCalculationJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListCalculationJobs', 'GET', '/api/v1/calculationjobs', 'json', false, 'json', request);
}

model ListCrowdUsersRequest {
  crowdId: string(name='CrowdId', description='This parameter is required.', example='1', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-abcdefg1234', position='Query'),
}

model ListCrowdUsersResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='F0AB6527-093F-5C44-B3BD-42C8C210C619'),
  totalCount?: long(name='TotalCount', example='3'),
  users?: [ string ](name='Users'),
}

model ListCrowdUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCrowdUsersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListCrowdUsers  ListCrowdUsersRequest
  * @return ListCrowdUsersResponse
 */
async function listCrowdUsers(request: ListCrowdUsersRequest): ListCrowdUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListCrowdUsers', 'GET', '/api/v1/crowds/{CrowdId}/users', 'json', false, 'json', request);
}

model ListCrowdsRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-abcdefg1234', position='Query'),
}

model ListCrowdsResponseBody = {
  crowds?: [ 
    {
      crowdId?: string(name='CrowdId', example='3'),
      description?: string(name='Description', example='This is a test.'),
      gmtCreateTime?: string(name='GmtCreateTime', example='2021-12-15T23:24:33.132+08:00'),
      label?: string(name='Label', example='os=android'),
      name?: string(name='Name', example='crowd1'),
      quantity?: string(name='Quantity', example='10'),
      source?: string(name='Source', example='ManualInput'),
      users?: string(name='Users', example='user1,user2'),
    }
  ](name='Crowds'),
  requestId?: string(name='RequestId', description='Id of the request', example='9763624B-5FBB-5E3A-9193-B1ADB554CEAE'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListCrowdsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCrowdsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListCrowds  ListCrowdsRequest
  * @return ListCrowdsResponse
 */
async function listCrowds(request: ListCrowdsRequest): ListCrowdsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListCrowds', 'GET', '/api/v1/crowds', 'json', false, 'json', request);
}

model ListEngineConfigsRequest {
  regionId?: string(name='RegionId', position='Host'),
  environment?: string(name='Environment', example='Pre', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-***test', position='Query'),
  name?: string(name='Name', example='engine_config_v1', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  status?: string(name='Status', example='Released', position='Query'),
  version?: string(name='Version', example='latest', position='Query'),
}

model ListEngineConfigsResponseBody = {
  engineConfigs?: [ 
    {
      configValue?: string(name='ConfigValue', example='{}'),
      description?: string(name='Description'),
      engineConfigId?: string(name='EngineConfigId', example='2'),
      environment?: string(name='Environment', example='Pre'),
      gmtCreateTime?: string(name='GmtCreateTime', example='2023-08-07T01:43:42Z'),
      gmtModifiedTime?: string(name='GmtModifiedTime', example='2023-08-27T12:00:00Z'),
      gmtReleasedTime?: string(name='GmtReleasedTime', example='2023-08-29 12:00:00'),
      name?: string(name='Name', example='engine_config_v1'),
      status?: string(name='Status', example='Released'),
      version?: string(name='Version', example='20230509161300'),
    }
  ](name='EngineConfigs'),
  requestId?: string(name='RequestId', example='74D958EF-3598-56FA-8296-FF1575CE43DF'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListEngineConfigsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEngineConfigsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListEngineConfigs  ListEngineConfigsRequest
  * @return ListEngineConfigsResponse
 */
async function listEngineConfigs(request: ListEngineConfigsRequest): ListEngineConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListEngineConfigs', 'GET', '/api/v1/engineconfigs', 'json', false, 'json', request);
}

model ListExperimentGroupsRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-abcdefg1234', position='Query'),
  layerId?: string(name='LayerId', example='3', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  status?: string(name='Status', example='Online', position='Query'),
  timeRangeEnd?: string(name='TimeRangeEnd', position='Query'),
  timeRangeStart?: string(name='TimeRangeStart', position='Query'),
}

model ListExperimentGroupsResponseBody = {
  experimentGroups?: [ 
    {
      config?: string(name='Config', example='{}'),
      crowdId?: string(name='CrowdId', example='3'),
      crowdTargetType?: string(name='CrowdTargetType'),
      debugCrowdId?: string(name='DebugCrowdId', example='4'),
      debugUsers?: string(name='DebugUsers', example='1124512470******,1124512471******,1124512472******'),
      description?: string(name='Description', example='This is a test.'),
      distributionTimeDuration?: int32(name='DistributionTimeDuration', example='5'),
      distributionType?: string(name='DistributionType', example='UserId'),
      experimentGroupId?: string(name='ExperimentGroupId', example='3'),
      filter?: string(name='Filter', example='gender=female'),
      holdingBuckets?: string(name='HoldingBuckets'),
      laboratoryId?: string(name='LaboratoryId', example='4'),
      layerId?: string(name='LayerId', example='3'),
      name?: string(name='Name', example='experiment_group1'),
      needAA?: boolean(name='NeedAA', example='true'),
      owner?: string(name='Owner', example='1124512470******'),
      randomFlow?: long(name='RandomFlow'),
      reservedBuckets?: string(name='ReservedBuckets', example='1,2,3,4'),
      sceneId?: string(name='SceneId', example='1'),
      status?: string(name='Status', example='Offline'),
    }
  ](name='ExperimentGroups'),
  requestId?: string(name='RequestId', description='Id of the request', example='59CE7EC6-F268-5D71-9215-32922CC50D72'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListExperimentGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListExperimentGroupsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListExperimentGroups  ListExperimentGroupsRequest
  * @return ListExperimentGroupsResponse
 */
async function listExperimentGroups(request: ListExperimentGroupsRequest): ListExperimentGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListExperimentGroups', 'GET', '/api/v1/experimentgroups', 'json', false, 'json', request);
}

model ListExperimentsRequest {
  regionId?: string(name='RegionId', position='Host'),
  experimentGroupId?: string(name='ExperimentGroupId', example='3', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-test1', position='Query'),
  query?: string(name='Query', example='experiment_test1', position='Query'),
  status?: string(name='Status', example='Offline', position='Query'),
}

model ListExperimentsResponseBody = {
  experiments?: [ 
    {
      aliasExperimentId?: string(name='AliasExperimentId', example='L1#EG1#E1'),
      buckets?: string(name='Buckets', example='1,2,3'),
      config?: string(name='Config', example='{}'),
      debugCrowdId?: string(name='DebugCrowdId', example='3'),
      debugUsers?: string(name='DebugUsers', example='uid1,uid2,uid3'),
      description?: string(name='Description', example='This is a test.'),
      experimentGroupId?: string(name='ExperimentGroupId', example='3'),
      experimentId?: string(name='ExperimentId', example='3'),
      flowPercent?: int32(name='FlowPercent', example='100'),
      gmtCreateTime?: string(name='GmtCreateTime', example='2021-12-15T23:24:33.132+08:00'),
      gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-12-15T23:24:33.132+08:00'),
      laboratoryId?: string(name='LaboratoryId', example='3'),
      layerId?: string(name='LayerId', example='3'),
      name?: string(name='Name', example='experiment_test1'),
      sceneId?: string(name='SceneId', example='3'),
      status?: string(name='Status', example='Offline'),
      type?: string(name='Type', example='Baseline'),
    }
  ](name='Experiments'),
  requestId?: string(name='RequestId', description='Id of the request', example='68075085-1A7D-55C2-B51D-7AD9B02A6DD6'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListExperimentsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListExperimentsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListExperiments  ListExperimentsRequest
  * @return ListExperimentsResponse
 */
async function listExperiments(request: ListExperimentsRequest): ListExperimentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListExperiments', 'GET', '/api/v1/experiments', 'json', false, 'json', request);
}

model ListFeatureConsistencyCheckJobConfigsRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-********', position='Query'),
  order?: string(name='Order', example='ASC', position='Query'),
  pageNumber?: string(name='PageNumber', example='1', position='Query'),
  pageSize?: string(name='PageSize', example='10', position='Query'),
  sortBy?: string(name='SortBy', example='GmtCreateTime', position='Query'),
}

model ListFeatureConsistencyCheckJobConfigsResponseBody = {
  featureConsistencyCheckConfigs?: [ 
    {
      compareFeature?: boolean(name='CompareFeature', example='true'),
      datasetId?: string(name='DatasetId'),
      datasetMountPath?: string(name='DatasetMountPath'),
      datasetName?: string(name='DatasetName'),
      datasetType?: string(name='DatasetType'),
      datasetUri?: string(name='DatasetUri'),
      defaultRoute?: string(name='DefaultRoute'),
      easServiceName?: string(name='EasServiceName', example='eas_service_1'),
      easyRecPackagePath?: string(name='EasyRecPackagePath', example='oss://*******'),
      easyRecVersion?: string(name='EasyRecVersion', example='1.3.60'),
      featureConsistencyCheckJobConfigId?: string(name='FeatureConsistencyCheckJobConfigId', example='3'),
      featureDisplayExclude?: string(name='FeatureDisplayExclude', example='feature1,feature2'),
      featureLandingResourceId?: string(name='FeatureLandingResourceId', example='reso-********'),
      featureLandingResourceUri?: string(name='FeatureLandingResourceUri', example='mc_project_1'),
      featurePriority?: string(name='FeaturePriority', example='feature1,feature2,feature3'),
      featureStoreItemId?: string(name='FeatureStoreItemId'),
      featureStoreModelId?: string(name='FeatureStoreModelId'),
      featureStoreProjectId?: string(name='FeatureStoreProjectId'),
      featureStoreProjectName?: string(name='FeatureStoreProjectName'),
      featureStoreSeqFeatureView?: string(name='FeatureStoreSeqFeatureView'),
      featureStoreUserId?: string(name='FeatureStoreUserId'),
      fgJarVersion?: string(name='FgJarVersion', example='1.0.0'),
      fgJsonFileName?: string(name='FgJsonFileName', example='file.json'),
      generateZip?: boolean(name='GenerateZip', example='true'),
      gmtCreateTime?: string(name='GmtCreateTime', example='2021-12-15T23:24:33.132+08:00'),
      gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-12-15T23:24:33.132+08:00'),
      itemIdField?: string(name='ItemIdField', example='item_id'),
      itemTable?: string(name='ItemTable', example='item_table'),
      itemTablePartitionField?: string(name='ItemTablePartitionField', example='ds'),
      itemTablePartitionFieldFormat?: string(name='ItemTablePartitionFieldFormat', example='yyyymmdd'),
      latestJobGmtSamplingEndTime?: string(name='LatestJobGmtSamplingEndTime', example='2021-12-15T23:24:33.132+08:00'),
      latestJobGmtSamplingStartTime?: string(name='LatestJobGmtSamplingStartTime', example='2021-12-15T23:24:33.132+08:00'),
      latestJobId?: string(name='LatestJobId', example='3'),
      name?: string(name='Name', example='feature_consistency_check1'),
      ossBucket?: string(name='OssBucket', example='oss_bucket_1'),
      ossResourceId?: string(name='OssResourceId', example='reso-********'),
      predictWorkerCount?: int32(name='PredictWorkerCount'),
      predictWorkerCpu?: int32(name='PredictWorkerCpu'),
      predictWorkerMemory?: int32(name='PredictWorkerMemory'),
      sampleRate?: string(name='SampleRate', example='0.89'),
      sceneId?: string(name='SceneId', example='3'),
      sceneName?: string(name='SceneName', example='scene1'),
      securityGroupId?: string(name='SecurityGroupId'),
      serviceId?: string(name='ServiceId', example='4'),
      serviceName?: string(name='ServiceName', example='service1'),
      status?: string(name='Status', example='Editable'),
      switchId?: string(name='SwitchId'),
      useFeatureStore?: string(name='UseFeatureStore'),
      userIdField?: string(name='UserIdField', example='user_id'),
      userTable?: string(name='UserTable', example='user_table'),
      userTablePartitionField?: string(name='UserTablePartitionField', example='ds'),
      userTablePartitionFieldFormat?: string(name='UserTablePartitionFieldFormat', example='yyyymmdd'),
      vpcId?: string(name='VpcId'),
      workflowName?: string(name='WorkflowName', example='work_flow_1'),
      workspaceId?: string(name='WorkspaceId'),
    }
  ](name='FeatureConsistencyCheckConfigs'),
  requestId?: string(name='RequestId', example='FCF741D8-9C30-578E-807F-B935487DB34A'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListFeatureConsistencyCheckJobConfigsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFeatureConsistencyCheckJobConfigsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListFeatureConsistencyCheckJobConfigs  ListFeatureConsistencyCheckJobConfigsRequest
  * @return ListFeatureConsistencyCheckJobConfigsResponse
 */
async function listFeatureConsistencyCheckJobConfigs(request: ListFeatureConsistencyCheckJobConfigsRequest): ListFeatureConsistencyCheckJobConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListFeatureConsistencyCheckJobConfigs', 'GET', '/api/v1/featureconsistencycheck/jobconfigs', 'json', false, 'json', request);
}

model ListFeatureConsistencyCheckJobFeatureReportsRequest {
  featureConsistencyCheckJobId: string(name='FeatureConsistencyCheckJobId', description='This parameter is required.', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-********', position='Query'),
  logItemId: string(name='LogItemId', description='This parameter is required.', example='9010', position='Query'),
  logRequestId: string(name='LogRequestId', description='This parameter is required.', example='F7AC05FF-EDE7-5C2B-B9AE-33D6DF4178BA', position='Query'),
  logUserId: string(name='LogUserId', description='This parameter is required.', example='1010', position='Query'),
}

model ListFeatureConsistencyCheckJobFeatureReportsResponseBody = {
  dataPath?: string(name='DataPath', example='https://********'),
  ossPath?: string(name='OssPath', example='oss://********'),
  reportsOfFeatureDiff?: [ 
    {
      featureName?: string(name='FeatureName', example='gender'),
      logItemId?: string(name='LogItemId', example='9010'),
      logRequestId?: string(name='LogRequestId', example='F7AC05FF-EDE7-5C2B-B9AE-33D6DF4178BA'),
      logUserId?: string(name='LogUserId', example='1010'),
      offlineValue?: string(name='OfflineValue', example='male'),
      onlineValue?: string(name='OnlineValue', example='male'),
    }
  ](name='ReportsOfFeatureDiff'),
  requestId?: string(name='RequestId', example='BBD41FBF-E75C-551A-92FA-CAD654AA006F'),
}

model ListFeatureConsistencyCheckJobFeatureReportsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFeatureConsistencyCheckJobFeatureReportsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListFeatureConsistencyCheckJobFeatureReports  ListFeatureConsistencyCheckJobFeatureReportsRequest
  * @return ListFeatureConsistencyCheckJobFeatureReportsResponse
 */
async function listFeatureConsistencyCheckJobFeatureReports(request: ListFeatureConsistencyCheckJobFeatureReportsRequest): ListFeatureConsistencyCheckJobFeatureReportsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListFeatureConsistencyCheckJobFeatureReports', 'GET', '/api/v1/featureconsistencycheck/jobs/{FeatureConsistencyCheckJobId}/featurereports', 'json', false, 'json', request);
}

model ListFeatureConsistencyCheckJobScoreReportsRequest {
  featureConsistencyCheckJobId: string(name='FeatureConsistencyCheckJobId', description='This parameter is required.', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  excludeRequestIds?: [ string ](name='ExcludeRequestIds', shrink='json', position='Query'),
  instanceId?: string(name='InstanceId', example='pairec-cn-********', position='Query'),
}

model ListFeatureConsistencyCheckJobScoreReportsResponseBody = {
  dataPath?: string(name='DataPath', example='http://*******'),
  ossPath?: string(name='OssPath', example='oss://********'),
  reportsOfScoreDiff?: [ 
    {
      logItemId?: string(name='LogItemId', example='4'),
      logRequestId?: string(name='LogRequestId', example='323'),
      logUserId?: string(name='LogUserId', example='3'),
      scoreDiff?: string(name='ScoreDiff', example='0.00000234'),
      scoreDiffDetail?: string(name='ScoreDiffDetail', example='{}'),
    }
  ](name='ReportsOfScoreDiff'),
  requestId?: string(name='RequestId', example='F0AB6527-093F-5C44-B3BD-42C8C210C619'),
}

model ListFeatureConsistencyCheckJobScoreReportsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFeatureConsistencyCheckJobScoreReportsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListFeatureConsistencyCheckJobScoreReports  ListFeatureConsistencyCheckJobScoreReportsRequest
  * @return ListFeatureConsistencyCheckJobScoreReportsResponse
 */
async function listFeatureConsistencyCheckJobScoreReports(request: ListFeatureConsistencyCheckJobScoreReportsRequest): ListFeatureConsistencyCheckJobScoreReportsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListFeatureConsistencyCheckJobScoreReports', 'GET', '/api/v1/featureconsistencycheck/jobs/{FeatureConsistencyCheckJobId}/scorereports', 'json', false, 'json', request);
}

model ListFeatureConsistencyCheckJobsRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-********', position='Query'),
  order?: string(name='Order', example='ASC', position='Query'),
  pageNumber?: string(name='PageNumber', example='1', position='Query'),
  pageSize?: string(name='PageSize', example='10', position='Query'),
  sortBy?: string(name='SortBy', example='GmtCreateTime', position='Query'),
  status?: string(name='Status', example='Running', position='Query'),
}

model ListFeatureConsistencyCheckJobsResponseBody = {
  featureConsistencyCheckJobs?: [ 
    {
      config?: string(name='Config', example='{}'),
      featureConsistencyCheckJobConfigId?: string(name='FeatureConsistencyCheckJobConfigId', example='5'),
      featureConsistencyCheckJobConfigName?: string(name='FeatureConsistencyCheckJobConfigName', example='feature_consistency_check_1'),
      featureConsistencyCheckJobId?: string(name='FeatureConsistencyCheckJobId', example='4'),
      gmtEndTime?: string(name='GmtEndTime', example='2021-12-15T23:24:33.132+08:00'),
      gmtStartTime?: string(name='GmtStartTime', example='2021-12-15T23:24:33.132+08:00'),
      logs?: [ string ](name='Logs'),
      status?: string(name='Status', example='Running'),
    }
  ](name='FeatureConsistencyCheckJobs'),
  requestId?: string(name='RequestId', example='A04CB8C0-E74A-5E83-BC61-64D153574EC7'),
  totalCount?: string(name='TotalCount', example='10'),
}

model ListFeatureConsistencyCheckJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFeatureConsistencyCheckJobsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListFeatureConsistencyCheckJobs  ListFeatureConsistencyCheckJobsRequest
  * @return ListFeatureConsistencyCheckJobsResponse
 */
async function listFeatureConsistencyCheckJobs(request: ListFeatureConsistencyCheckJobsRequest): ListFeatureConsistencyCheckJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListFeatureConsistencyCheckJobs', 'GET', '/api/v1/featureconsistencycheck/jobs', 'json', false, 'json', request);
}

model ListInstanceResourcesRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-test1', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  category?: string(name='Category', example='DataManagement', position='Query'),
  group?: string(name='Group', example='storage', position='Query'),
  type?: string(name='Type', example='OSS', position='Query'),
}

model ListInstanceResourcesResponseBody = {
  requestId?: string(name='RequestId', example='9763624B-5FBB-5E3A-9193-B1ADB554CEAE'),
  resources?: [ 
    {
      category?: string(name='Category', example='DataManagement'),
      config?: string(name='Config', example='{}'),
      gmtCreateAt?: string(name='GmtCreateAt', example='2020-10-13 17:34:52'),
      gmtModifiedAt?: string(name='GmtModifiedAt', example='2020-10-13 17:34:52'),
      group?: string(name='Group', example='storage'),
      resourceId?: string(name='ResourceId', example='reso-2s416t***'),
      type?: string(name='Type', example='OSS'),
      uri?: string(name='Uri', example='bucket-test-123'),
    }
  ](name='Resources'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListInstanceResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstanceResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListInstanceResources  ListInstanceResourcesRequest
  * @return ListInstanceResourcesResponse
 */
async function listInstanceResources(request: ListInstanceResourcesRequest): ListInstanceResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInstanceResources', 'GET', '/api/v1/instances/{InstanceId}/resources', 'json', false, 'json', request);
}

model ListInstancesRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId?: string(name='InstanceId', example='pairec-test1', position='Query'),
  order?: string(name='Order', example='Desc', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='50', position='Query'),
  sortBy?: string(name='SortBy', example='Type', position='Query'),
  type?: string(name='Type', example='basic', position='Query'),
}

model ListInstancesResponseBody = {
  instances?: [ 
    {
      chargeType?: string(name='ChargeType', example='Subscription'),
      commodityCode?: string(name='CommodityCode', example='airec_developers_public_cn'),
      config?: {
        dataManagements?: [ 
          {
            componentCode?: string(name='ComponentCode', example='storage'),
            meta?: map[string]any(name='Meta'),
            type?: string(name='Type', example='OSS'),
          }
        ](name='DataManagements'),
        engines?: [ 
          {
            componentCode?: string(name='ComponentCode', example='feature'),
            meta?: map[string]any(name='Meta'),
            type?: string(name='Type', example='Hologres'),
          }
        ](name='Engines'),
        monitors?: [ 
          {
            componentCode?: string(name='ComponentCode', example='featuresets'),
            meta?: map[string]any(name='Meta'),
            type?: string(name='Type', example='Platform'),
          }
        ](name='Monitors'),
      }(name='Config'),
      expiredTime?: string(name='ExpiredTime', example='2022-12-14 00:00:00.0'),
      gmtCreateTime?: string(name='GmtCreateTime', example='2022-10-13 17:34:52.0'),
      gmtModifiedTime?: string(name='GmtModifiedTime', example='2022-11-05 09:02:30.0'),
      instanceId?: string(name='InstanceId', example='pairec-test1'),
      operatingTool?: {
        isEnable?: boolean(name='IsEnable'),
      }(name='OperatingTool'),
      regionId?: string(name='RegionId', example='cn-shenzhen'),
      status?: string(name='Status', example='Initializing'),
      type?: string(name='Type', example='basic'),
    }
  ](name='Instances'),
  requestId?: string(name='RequestId', example='BDB621CB-A81E-5D39-8793-39A365CBCC74'),
  totalCount?: int32(name='TotalCount', example='7'),
}

model ListInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListInstances  ListInstancesRequest
  * @return ListInstancesResponse
 */
async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInstances', 'GET', '/api/v1/instances', 'json', false, 'json', request);
}

model ListLaboratoriesRequest {
  regionId?: string(name='RegionId', position='Host'),
  environment?: string(name='Environment', example='Daily', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-test1', position='Query'),
  sceneId: string(name='SceneId', description='This parameter is required.', example='3', position='Query'),
  status?: string(name='Status', example='Offline', position='Query'),
}

model ListLaboratoriesResponseBody = {
  laboratories?: [ 
    {
      bucketCount?: int32(name='BucketCount', example='100'),
      bucketType?: string(name='BucketType', example='Filter'),
      buckets?: string(name='Buckets', example='1,2,3,10-20'),
      crowdId?: string(name='CrowdId', example='3'),
      debugCrowdId?: string(name='DebugCrowdId', example='3'),
      debugUsers?: string(name='DebugUsers', example='user1,user2,user3'),
      description?: string(name='Description', example='This is a test.'),
      environment?: string(name='Environment', example='Daily'),
      filter?: string(name='Filter', example='filter=xxx'),
      laboratoryId?: string(name='LaboratoryId', example='3'),
      name?: string(name='Name', example='laboratory1'),
      sceneId?: string(name='SceneId', example='3'),
      status?: string(name='Status', example='Offline'),
      type?: string(name='Type', example='Base'),
    }
  ](name='Laboratories'),
  requestId?: string(name='RequestId', description='Id of the request', example='1C0898E5-9220-5443-B2D9-445FF0688215'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListLaboratoriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLaboratoriesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListLaboratories  ListLaboratoriesRequest
  * @return ListLaboratoriesResponse
 */
async function listLaboratories(request: ListLaboratoriesRequest): ListLaboratoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListLaboratories', 'GET', '/api/v1/laboratories', 'json', false, 'json', request);
}

model ListLayersRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-abcdefg1234', position='Query'),
  laboratoryId: string(name='LaboratoryId', description='This parameter is required.', example='3', position='Query'),
}

model ListLayersResponseBody = {
  layers?: [ 
    {
      description?: string(name='Description', example='This is a test.'),
      gmtCreateTime?: string(name='GmtCreateTime'),
      laboratoryId?: string(name='LaboratoryId', example='3'),
      layerId?: string(name='LayerId', example='3'),
      name?: string(name='Name', example='layer1'),
      residualFlow?: long(name='ResidualFlow'),
      sceneId?: string(name='SceneId', example='3'),
    }
  ](name='Layers'),
  requestId?: string(name='RequestId', description='Id of the request', example='518C64F6-DFF7-11ED-85B0-00163E14B3D1'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListLayersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLayersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListLayers  ListLayersRequest
  * @return ListLayersResponse
 */
async function listLayers(request: ListLayersRequest): ListLayersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListLayers', 'GET', '/api/v1/layers', 'json', false, 'json', request);
}

model ListParamsRequest {
  regionId?: string(name='RegionId', position='Host'),
  environment?: string(name='Environment', example='Daily', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-abcdefg1234', position='Query'),
  name?: string(name='Name', example='home', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='50', position='Query'),
  sceneId: string(name='SceneId', description='This parameter is required.', example='3', position='Query'),
}

model ListParamsResponseBody = {
  params?: [ 
    {
      environment?: string(name='Environment', example='Daily'),
      gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-12-15T23:24:33.132+08:00'),
      name?: string(name='Name', example='home'),
      paramId?: string(name='ParamId', example='4'),
      value?: string(name='Value', example='house'),
    }
  ](name='Params'),
  requestId?: string(name='RequestId', description='Id of the request', example='A2D07551-38DA-531E-9B22-877D1D86A579'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListParamsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListParamsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListParams  ListParamsRequest
  * @return ListParamsResponse
 */
async function listParams(request: ListParamsRequest): ListParamsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListParams', 'GET', '/api/v1/params', 'json', false, 'json', request);
}

model ListResourceRulesRequest {
  regionId?: string(name='RegionId', position='Host'),
  all?: boolean(name='All', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
  order?: string(name='Order', position='Query'),
  pageNumber?: long(name='PageNumber', position='Query'),
  pageSize?: long(name='PageSize', position='Query'),
  resourceRuleId?: string(name='ResourceRuleId', position='Query'),
  resourceRuleName?: string(name='ResourceRuleName', position='Query'),
  sortBy?: string(name='SortBy', position='Query'),
}

model ListResourceRulesResponseBody = {
  requestId?: string(name='RequestId'),
  resourceRules?: [ 
    {
      description?: string(name='Description'),
      metricOperationType?: string(name='MetricOperationType'),
      metricPullInfo?: string(name='MetricPullInfo'),
      metricPullPeriod?: string(name='MetricPullPeriod'),
      name?: string(name='Name'),
      resourceRuleId?: string(name='ResourceRuleId'),
      ruleComputingDefinition?: string(name='RuleComputingDefinition'),
      ruleItems?: [ 
        {
          description?: string(name='Description'),
          maxValue?: string(name='MaxValue'),
          minValue?: string(name='MinValue'),
          name?: string(name='Name'),
          value?: string(name='Value'),
        }
      ](name='RuleItems'),
    }
  ](name='ResourceRules'),
  totalCount?: long(name='TotalCount'),
}

model ListResourceRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListResourceRulesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListResourceRules  ListResourceRulesRequest
  * @return ListResourceRulesResponse
 */
async function listResourceRules(request: ListResourceRulesRequest): ListResourceRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListResourceRules', 'GET', '/api/v1/resourcerules', 'json', false, 'json', request);
}

model ListScenesRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234', position='Query'),
  name?: string(name='Name', example='scene1', position='Query'),
}

model ListScenesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='B8987BF7-6028-5B17-80E0-251B7BD67BBA'),
  scenes?: [ 
    {
      description?: string(name='Description', example='This is a test.'),
      flows?: [ 
        {
          flowCode?: string(name='FlowCode', example='liuliang1'),
          flowName?: string(name='FlowName', example='流量1'),
        }
      ](name='Flows'),
      name?: string(name='Name', example='scene1'),
      sceneId?: string(name='SceneId', example='3'),
    }
  ](name='Scenes'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListScenesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListScenesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListScenes  ListScenesRequest
  * @return ListScenesResponse
 */
async function listScenes(request: ListScenesRequest): ListScenesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListScenes', 'GET', '/api/v1/scenes', 'json', false, 'json', request);
}

model ListSubCrowdsRequest {
  crowdId: string(name='CrowdId', description='This parameter is required.', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-abcdefg1234', position='Query'),
}

model ListSubCrowdsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='C5AEB79E-FAA4-5DCE-8CD7-1CAF549ECC3E'),
  subCrowds?: [ 
    {
      gmtCreateTime?: string(name='GmtCreateTime', example='2021-12-15T23:24:33.132+08:00'),
      quantity?: int32(name='Quantity', example='2'),
      source?: string(name='Source', example='ManualInput'),
      subCrowdId?: string(name='SubCrowdId', example='3'),
      users?: string(name='Users', example='user1,user2'),
    }
  ](name='SubCrowds'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListSubCrowdsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSubCrowdsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSubCrowds  ListSubCrowdsRequest
  * @return ListSubCrowdsResponse
 */
async function listSubCrowds(request: ListSubCrowdsRequest): ListSubCrowdsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSubCrowds', 'GET', '/api/v1/crowds/{CrowdId}/subcrowds', 'json', false, 'json', request);
}

model ListTableMetasRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-test1', position='Query'),
  module: string(name='Module', description='This parameter is required.', example='ABTest', position='Query'),
  name?: string(name='Name', example='test1', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  type?: string(name='Type', example='MaxCompute', position='Query'),
}

model ListTableMetasResponseBody = {
  requestId?: string(name='RequestId', example='728C5E01-ABF6-5AA8-B9FC-B3BA05DECC77'),
  tableMetas?: [ 
    {
      canDelete?: boolean(name='CanDelete', example='true'),
      config?: string(name='Config'),
      description?: string(name='Description', example='this is a test table'),
      fields?: [ 
        {
          isDimensionField?: boolean(name='IsDimensionField', example='false'),
          meaning?: string(name='Meaning', example='the gender of people'),
          name?: string(name='Name', example='gender'),
          type?: string(name='Type', example='BIGINT'),
        }
      ](name='Fields'),
      gmtCreateTime?: string(name='GmtCreateTime', example='2021-12-12 12:24:33'),
      gmtImportedTime?: string(name='GmtImportedTime', example='imprecation'),
      gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-12-12 12:24:33'),
      module?: string(name='Module', example='ABTest'),
      name?: string(name='Name', example='test_table'),
      resourceId?: string(name='ResourceId', example='reso-2s416t***'),
      tableMetaId?: string(name='TableMetaId', example='3'),
      tableName?: string(name='TableName', example='table_mysql'),
      type?: string(name='Type', example='MaxCompute'),
      url?: string(name='Url', example='https://dmc-xxx.com/dm/table/xxx'),
    }
  ](name='TableMetas'),
  totalCount?: long(name='TotalCount', example='20'),
}

model ListTableMetasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTableMetasResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTableMetas  ListTableMetasRequest
  * @return ListTableMetasResponse
 */
async function listTableMetas(request: ListTableMetasRequest): ListTableMetasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTableMetas', 'GET', '/api/v1/tablemetas', 'json', false, 'json', request);
}

model ListTrafficControlTargetTrafficHistoryRequest {
  trafficControlTargetId?: string(name='TrafficControlTargetId', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  endTime?: string(name='EndTime', position='Query'),
  environment?: string(name='Environment', position='Query'),
  experimentGroupId?: string(name='ExperimentGroupId', position='Query'),
  experimentId?: string(name='ExperimentId', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  itemId?: string(name='ItemId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
  threshold?: string(name='Threshold', position='Query'),
}

model ListTrafficControlTargetTrafficHistoryResponseBody = {
  requestId?: string(name='RequestId'),
  totalCount?: string(name='TotalCount'),
  trafficControlTaskTrafficHistories?: [ 
    {
      experimentId?: string(name='ExperimentId'),
      itemId?: string(name='ItemId'),
      recordTime?: string(name='RecordTime'),
      trafficControlTargetAimTraffic?: double(name='TrafficControlTargetAimTraffic'),
      trafficControlTargetTraffic?: double(name='TrafficControlTargetTraffic'),
      trafficControlTaskTraffic?: double(name='TrafficControlTaskTraffic'),
    }
  ](name='TrafficControlTaskTrafficHistories'),
}

model ListTrafficControlTargetTrafficHistoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTrafficControlTargetTrafficHistoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTrafficControlTargetTrafficHistory  ListTrafficControlTargetTrafficHistoryRequest
  * @return ListTrafficControlTargetTrafficHistoryResponse
 */
async function listTrafficControlTargetTrafficHistory(request: ListTrafficControlTargetTrafficHistoryRequest): ListTrafficControlTargetTrafficHistoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTrafficControlTargetTrafficHistory', 'GET', '/api/v1/trafficcontroltargets/{TrafficControlTargetId}/traffichistories', 'json', false, 'json', request);
}

model ListTrafficControlTasksRequest {
  regionId?: string(name='RegionId', position='Host'),
  all?: boolean(name='All', position='Query'),
  controlTargetFilter?: string(name='ControlTargetFilter', position='Query'),
  environment?: string(name='Environment', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  name?: string(name='Name', position='Query'),
  order?: string(name='Order', position='Query'),
  pageNumber?: string(name='PageNumber', position='Query'),
  pageSize?: string(name='PageSize', position='Query'),
  sceneId?: string(name='SceneId', position='Query'),
  sortBy?: string(name='SortBy', position='Query'),
  status?: string(name='Status', position='Query'),
  trafficControlTaskId?: string(name='TrafficControlTaskId', position='Query'),
  version?: string(name='Version', position='Query'),
}

model ListTrafficControlTasksResponseBody = {
  requestId?: string(name='RequestId'),
  totalCount?: string(name='TotalCount'),
  trafficControlTasks?: [ 
    {
      behaviorTableMetaId?: string(name='BehaviorTableMetaId'),
      controlGranularity?: string(name='ControlGranularity'),
      controlLogic?: string(name='ControlLogic'),
      controlType?: string(name='ControlType'),
      description?: string(name='Description'),
      endTime?: string(name='EndTime'),
      everPublished?: boolean(name='EverPublished'),
      executionTime?: string(name='ExecutionTime'),
      gmtCreateTime?: string(name='GmtCreateTime'),
      gmtModifiedTime?: string(name='GmtModifiedTime'),
      itemConditionArray?: string(name='ItemConditionArray'),
      itemConditionExpress?: string(name='ItemConditionExpress'),
      itemConditionType?: string(name='ItemConditionType'),
      itemTableMetaId?: string(name='ItemTableMetaId'),
      name?: string(name='Name'),
      preExperimentIds?: string(name='PreExperimentIds'),
      prepubStatus?: string(name='PrepubStatus'),
      prodExperimentIds?: string(name='ProdExperimentIds'),
      productStatus?: string(name='ProductStatus'),
      sceneId?: string(name='SceneId'),
      sceneName?: string(name='SceneName'),
      serviceId?: string(name='ServiceId'),
      startTime?: string(name='StartTime'),
      statisBahaviorConditionExpress?: string(name='StatisBahaviorConditionExpress'),
      statisBehaviorConditionArray?: string(name='StatisBehaviorConditionArray'),
      statisBehaviorConditionType?: string(name='StatisBehaviorConditionType'),
      trafficControlTargets?: [ 
        {
          endTime?: string(name='EndTime'),
          event?: string(name='Event'),
          gmtCreateTime?: string(name='GmtCreateTime'),
          gmtModifiedTime?: string(name='GmtModifiedTime'),
          itemConditionArray?: string(name='ItemConditionArray'),
          itemConditionExpress?: string(name='ItemConditionExpress'),
          itemConditionType?: string(name='ItemConditionType'),
          name?: string(name='Name'),
          newProductRegulation?: boolean(name='NewProductRegulation'),
          recallName?: string(name='RecallName'),
          splitParts?: {
            setValues?: [ long ](name='SetValues'),
            timePoints?: [ long ](name='TimePoints'),
          }(name='SplitParts'),
          startTime?: string(name='StartTime'),
          statisPeriod?: string(name='StatisPeriod'),
          status?: string(name='Status'),
          toleranceValue?: long(name='ToleranceValue'),
          trafficControlTargetId?: string(name='TrafficControlTargetId'),
          value?: float(name='Value'),
        }
      ](name='TrafficControlTargets'),
      trafficControlTaskId?: string(name='TrafficControlTaskId'),
      userConditionArray?: string(name='UserConditionArray'),
      userConditionExpress?: string(name='UserConditionExpress'),
      userConditionType?: string(name='UserConditionType'),
      userTableMetaId?: string(name='UserTableMetaId'),
    }
  ](name='TrafficControlTasks'),
}

model ListTrafficControlTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTrafficControlTasksResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTrafficControlTasks  ListTrafficControlTasksRequest
  * @return ListTrafficControlTasksResponse
 */
async function listTrafficControlTasks(request: ListTrafficControlTasksRequest): ListTrafficControlTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTrafficControlTasks', 'GET', '/api/v1/trafficcontroltasks', 'json', false, 'json', request);
}

model OfflineExperimentRequest {
  experimentId: string(name='ExperimentId', description='This parameter is required.', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-abcdefg1234', position='Body'),
}

model OfflineExperimentResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='872951C9-7755-5FA1-AACD-7F9375A6D27A'),
}

model OfflineExperimentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OfflineExperimentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of OfflineExperiment  OfflineExperimentRequest
  * @return OfflineExperimentResponse
 */
async function offlineExperiment(request: OfflineExperimentRequest): OfflineExperimentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'OfflineExperiment', 'POST', '/api/v1/experiments/{ExperimentId}/action/offline', 'json', false, 'json', request);
}

model OfflineExperimentGroupRequest {
  experimentGroupId: string(name='ExperimentGroupId', description='This parameter is required.', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-abcdefg1234', position='Body'),
}

model OfflineExperimentGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='518C64F6-DFF7-11ED-85B0-00163E14B3D1'),
}

model OfflineExperimentGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OfflineExperimentGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of OfflineExperimentGroup  OfflineExperimentGroupRequest
  * @return OfflineExperimentGroupResponse
 */
async function offlineExperimentGroup(request: OfflineExperimentGroupRequest): OfflineExperimentGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'OfflineExperimentGroup', 'POST', '/api/v1/experimentgroups/{ExperimentGroupId}/action/offline', 'json', false, 'json', request);
}

model OfflineLaboratoryRequest {
  laboratoryId: string(name='LaboratoryId', description='This parameter is required.', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-abcdefg1234', position='Body'),
}

model OfflineLaboratoryResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='59CE7EC6-F268-5D71-9215-32922CC50D72'),
}

model OfflineLaboratoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OfflineLaboratoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of OfflineLaboratory  OfflineLaboratoryRequest
  * @return OfflineLaboratoryResponse
 */
async function offlineLaboratory(request: OfflineLaboratoryRequest): OfflineLaboratoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'OfflineLaboratory', 'POST', '/api/v1/laboratories/{LaboratoryId}/action/offline', 'json', false, 'json', request);
}

model OnlineExperimentRequest {
  experimentId: string(name='ExperimentId', description='This parameter is required.', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234', position='Body'),
}

model OnlineExperimentResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='6CF1E160-3F36-5E73-A170-C75504F05BBC'),
}

model OnlineExperimentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OnlineExperimentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of OnlineExperiment  OnlineExperimentRequest
  * @return OnlineExperimentResponse
 */
async function onlineExperiment(request: OnlineExperimentRequest): OnlineExperimentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'OnlineExperiment', 'POST', '/api/v1/experiments/{ExperimentId}/action/online', 'json', false, 'json', request);
}

model OnlineExperimentGroupRequest {
  experimentGroupId: string(name='ExperimentGroupId', description='This parameter is required.', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-abcdefg1234', position='Body'),
}

model OnlineExperimentGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='47F761ED-BE4E-51A6-B678-78E1490DF313'),
}

model OnlineExperimentGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OnlineExperimentGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of OnlineExperimentGroup  OnlineExperimentGroupRequest
  * @return OnlineExperimentGroupResponse
 */
async function onlineExperimentGroup(request: OnlineExperimentGroupRequest): OnlineExperimentGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'OnlineExperimentGroup', 'POST', '/api/v1/experimentgroups/{ExperimentGroupId}/action/online', 'json', false, 'json', request);
}

model OnlineLaboratoryRequest {
  laboratoryId: string(name='LaboratoryId', description='This parameter is required.', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-test1', position='Body'),
}

model OnlineLaboratoryResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='8C27790E-CCA5-56BB-BA17-646295DEC0A2'),
}

model OnlineLaboratoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OnlineLaboratoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of OnlineLaboratory  OnlineLaboratoryRequest
  * @return OnlineLaboratoryResponse
 */
async function onlineLaboratory(request: OnlineLaboratoryRequest): OnlineLaboratoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'OnlineLaboratory', 'POST', '/api/v1/laboratories/{LaboratoryId}/action/online', 'json', false, 'json', request);
}

model PushAllExperimentRequest {
  experimentId: string(name='ExperimentId', description='This parameter is required.', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234', position='Body'),
}

model PushAllExperimentResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='74D958EF-3598-56FA-8296-FF1575CE43DF'),
}

model PushAllExperimentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PushAllExperimentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PushAllExperiment  PushAllExperimentRequest
  * @return PushAllExperimentResponse
 */
async function pushAllExperiment(request: PushAllExperimentRequest): PushAllExperimentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PushAllExperiment', 'POST', '/api/v1/experiments/{ExperimentId}/action/pushall', 'json', false, 'json', request);
}

model PushResourceRuleRequest {
  resourceRuleId: string(name='ResourceRuleId', description='This parameter is required.', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
  metricInfo: map[string]any(name='MetricInfo', description='This parameter is required.', shrink='json', position='Query'),
}

model PushResourceRuleResponseBody = {
  description?: string(name='Description'),
  metricOperationType?: string(name='MetricOperationType'),
  metricPullInfo?: string(name='MetricPullInfo'),
  metricPullPeriod?: string(name='MetricPullPeriod'),
  name?: string(name='Name'),
  requestId?: string(name='RequestId'),
  resourceRuleId?: string(name='ResourceRuleId'),
  ruleComputingDefinition?: string(name='RuleComputingDefinition'),
  ruleItems?: [ 
    {
      description?: string(name='Description'),
      maxValue?: string(name='MaxValue'),
      minValue?: string(name='MinValue'),
      name?: string(name='Name'),
      value?: string(name='Value'),
    }
  ](name='RuleItems'),
}

model PushResourceRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PushResourceRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PushResourceRule  PushResourceRuleRequest
  * @return PushResourceRuleResponse
 */
async function pushResourceRule(request: PushResourceRuleRequest): PushResourceRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PushResourceRule', 'POST', '/api/v1/resourcerules/{ResourceRuleId}/action/push', 'json', false, 'json', request);
}

model QueryTrafficControlTargetItemReportDetailRequest {
  trafficControlTargetId: string(name='TrafficControlTargetId', description='This parameter is required.', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  date?: string(name='Date', position='Query'),
  environment: string(name='Environment', description='This parameter is required.', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
}

model QueryTrafficControlTargetItemReportDetailResponseBody = {
  requestId?: string(name='RequestId'),
  trafficControlTargetItemReportDetail?: {
    itemControlTailReportDetails?: [ 
      {
        features?: map[string]any(name='Features'),
        itemId?: string(name='ItemId'),
        targetProgress?: string(name='TargetProgress'),
        targetTraffic?: long(name='TargetTraffic'),
      }
    ](name='ItemControlTailReportDetails'),
    itemControlTopReportDetails?: [ 
      {
        features?: map[string]any(name='Features'),
        itemId?: string(name='ItemId'),
        targetProgress?: string(name='TargetProgress'),
        targetTraffic?: long(name='TargetTraffic'),
      }
    ](name='ItemControlTopReportDetails'),
  }(name='TrafficControlTargetItemReportDetail'),
}

model QueryTrafficControlTargetItemReportDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryTrafficControlTargetItemReportDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryTrafficControlTargetItemReportDetail  QueryTrafficControlTargetItemReportDetailRequest
  * @return QueryTrafficControlTargetItemReportDetailResponse
 */
async function queryTrafficControlTargetItemReportDetail(request: QueryTrafficControlTargetItemReportDetailRequest): QueryTrafficControlTargetItemReportDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryTrafficControlTargetItemReportDetail', 'GET', '/api/v1/trafficcontroltargets/{TrafficControlTargetId}/itemcontrolreportdetail', 'json', false, 'json', request);
}

model ReleaseTrafficControlTaskRequest {
  trafficControlTaskId?: string(name='TrafficControlTaskId', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  environment?: string(name='Environment', position='Body'),
  instanceId?: string(name='InstanceId', position='Body'),
}

model ReleaseTrafficControlTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReleaseTrafficControlTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReleaseTrafficControlTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ReleaseTrafficControlTask  ReleaseTrafficControlTaskRequest
  * @return ReleaseTrafficControlTaskResponse
 */
async function releaseTrafficControlTask(request: ReleaseTrafficControlTaskRequest): ReleaseTrafficControlTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ReleaseTrafficControlTask', 'POST', '/api/v1/trafficcontroltasks/{TrafficControlTaskId}/action/release', 'json', false, 'json', request);
}

model ReportABMetricGroupRequest {
  ABMetricGroupId: string(name='ABMetricGroupId', description='This parameter is required.', example='1', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  baseExperimentId: string(name='BaseExperimentId', description='This parameter is required.', example='3', position='Body'),
  dimensionFields?: string(name='DimensionFields', example='{"gender":"man"}', position='Body'),
  endDate?: string(name='EndDate', example='2021-07-01', position='Body'),
  experimentGroupId?: string(name='ExperimentGroupId', example='3', position='Body'),
  experimentIds: string(name='ExperimentIds', description='This parameter is required.', example='3,4,5', position='Body'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-test1', position='Body'),
  reportType: string(name='ReportType', description='This parameter is required.', example='Offline', position='Body'),
  sceneId?: string(name='SceneId', example='1', position='Body'),
  startDate?: string(name='StartDate', example='2021-07-01', position='Body'),
  timeStatisticsMethod?: string(name='TimeStatisticsMethod', example='Hour', position='Body'),
}

model ReportABMetricGroupResponseBody = {
  experimentReport?: map[string]ExperimentReportValue(name='ExperimentReport'),
  groupDimension?: [ string ](name='GroupDimension'),
  requestId?: string(name='RequestId', example='59CE7EC6-F268-5D71-9215-32922CC50D72'),
}

model ReportABMetricGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReportABMetricGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ReportABMetricGroup  ReportABMetricGroupRequest
  * @return ReportABMetricGroupResponse
 */
async function reportABMetricGroup(request: ReportABMetricGroupRequest): ReportABMetricGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ReportABMetricGroup', 'POST', '/api/v1/abmetricgroups/{ABMetricGroupId}/action/report', 'json', false, 'json', request);
}

model SplitTrafficControlTargetRequest {
  trafficControlTargetId?: string(name='TrafficControlTargetId', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  environment?: string(name='Environment', position='Body'),
  instanceId?: string(name='InstanceId', position='Body'),
  setPoints?: [ long ](name='SetPoints', position='Body'),
  setValues?: [ long ](name='SetValues', position='Body'),
  timePoints?: [ long ](name='TimePoints', position='Body'),
}

model SplitTrafficControlTargetResponseBody = {
  requestId?: string(name='RequestId'),
}

model SplitTrafficControlTargetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SplitTrafficControlTargetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SplitTrafficControlTarget  SplitTrafficControlTargetRequest
  * @return SplitTrafficControlTargetResponse
 */
async function splitTrafficControlTarget(request: SplitTrafficControlTargetRequest): SplitTrafficControlTargetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SplitTrafficControlTarget', 'POST', '/api/v1/trafficcontroltargets/{TrafficControlTargetId}/action/split', 'json', false, 'json', request);
}

model StartTrafficControlTargetRequest {
  trafficControlTargetId?: string(name='TrafficControlTargetId', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId?: string(name='InstanceId', position='Body'),
}

model StartTrafficControlTargetResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartTrafficControlTargetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartTrafficControlTargetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartTrafficControlTarget  StartTrafficControlTargetRequest
  * @return StartTrafficControlTargetResponse
 */
async function startTrafficControlTarget(request: StartTrafficControlTargetRequest): StartTrafficControlTargetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartTrafficControlTarget', 'POST', '/api/v1/trafficcontroltargets/{TrafficControlTargetId}/action/start', 'json', false, 'json', request);
}

model StartTrafficControlTaskRequest {
  trafficControlTaskId: string(name='TrafficControlTaskId', description='This parameter is required.', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  environment?: string(name='Environment', position='Body'),
  instanceId?: string(name='InstanceId', position='Body'),
}

model StartTrafficControlTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartTrafficControlTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartTrafficControlTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartTrafficControlTask  StartTrafficControlTaskRequest
  * @return StartTrafficControlTaskResponse
 */
async function startTrafficControlTask(request: StartTrafficControlTaskRequest): StartTrafficControlTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartTrafficControlTask', 'POST', '/api/v1/trafficcontroltasks/{TrafficControlTaskId}/action/start', 'json', false, 'json', request);
}

model StopTrafficControlTargetRequest {
  trafficControlTargetId?: string(name='TrafficControlTargetId', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId?: string(name='InstanceId', position='Body'),
}

model StopTrafficControlTargetResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopTrafficControlTargetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopTrafficControlTargetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopTrafficControlTarget  StopTrafficControlTargetRequest
  * @return StopTrafficControlTargetResponse
 */
async function stopTrafficControlTarget(request: StopTrafficControlTargetRequest): StopTrafficControlTargetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopTrafficControlTarget', 'POST', '/api/v1/trafficcontroltargets/{TrafficControlTargetId}/action/stop', 'json', false, 'json', request);
}

model StopTrafficControlTaskRequest {
  trafficControlTaskId?: string(name='TrafficControlTaskId', position='Path'),
  regionId?: string(name='RegionId', position='Query'),
  environment?: string(name='Environment', position='Body'),
  instanceId?: string(name='InstanceId', position='Body'),
}

model StopTrafficControlTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopTrafficControlTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopTrafficControlTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopTrafficControlTask  StopTrafficControlTaskRequest
  * @return StopTrafficControlTaskResponse
 */
async function stopTrafficControlTask(request: StopTrafficControlTaskRequest): StopTrafficControlTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopTrafficControlTask', 'POST', '/api/v1/trafficcontroltasks/{TrafficControlTaskId}/action/stop', 'json', false, 'json', request);
}

model SyncFeatureConsistencyCheckJobReplayLogRequest {
  regionId?: string(name='RegionId', position='Host'),
  contextFeatures: string(name='ContextFeatures', description='This parameter is required.', example='[{\\"Value\\":{\\"FloatFeature\\":0.1}}]', position='Body'),
  featureConsistencyCheckJobConfigId: string(name='FeatureConsistencyCheckJobConfigId', description='This parameter is required.', example='3', position='Body'),
  generatedFeatures: string(name='GeneratedFeatures', description='This parameter is required.', example='week_day:1 | userid:3 | itemid:9001 | cate:cat1 | click_5_seq__cate:cat1', position='Body'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-********', position='Body'),
  logItemId: string(name='LogItemId', description='This parameter is required.', example='9010', position='Body'),
  logRequestId: string(name='LogRequestId', description='This parameter is required.', example='728C5E01-ABF6-5AA8-B9FC-B3BA05DECC77', position='Body'),
  logRequestTime: long(name='LogRequestTime', description='This parameter is required.', example='1693900981465', position='Body'),
  logUserId: string(name='LogUserId', description='This parameter is required.', example='1010', position='Body'),
  rawFeatures: string(name='RawFeatures', description='This parameter is required.', position='Body'),
  sceneName: string(name='SceneName', description='This parameter is required.', example='video-feed', position='Body'),
}

model SyncFeatureConsistencyCheckJobReplayLogResponseBody = {
  requestId?: string(name='RequestId', example='C7D0B48F-0105-52B9-B60A-FA7606E2234D'),
}

model SyncFeatureConsistencyCheckJobReplayLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SyncFeatureConsistencyCheckJobReplayLogResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SyncFeatureConsistencyCheckJobReplayLog  SyncFeatureConsistencyCheckJobReplayLogRequest
  * @return SyncFeatureConsistencyCheckJobReplayLogResponse
 */
async function syncFeatureConsistencyCheckJobReplayLog(request: SyncFeatureConsistencyCheckJobReplayLogRequest): SyncFeatureConsistencyCheckJobReplayLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SyncFeatureConsistencyCheckJobReplayLog', 'POST', '/api/v1/featureconsistencycheck/jobs/action/syncreplaylog', 'json', false, 'json', request);
}

model TerminateFeatureConsistencyCheckJobRequest {
  featureConsistencyCheckJobId: string(name='FeatureConsistencyCheckJobId', description='This parameter is required.', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-********', position='Body'),
}

model TerminateFeatureConsistencyCheckJobResponseBody = {
  requestId?: string(name='RequestId', example='A6C01890-54CA-5C49-BC91-AD85A98E4A98'),
}

model TerminateFeatureConsistencyCheckJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TerminateFeatureConsistencyCheckJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of TerminateFeatureConsistencyCheckJob  TerminateFeatureConsistencyCheckJobRequest
  * @return TerminateFeatureConsistencyCheckJobResponse
 */
async function terminateFeatureConsistencyCheckJob(request: TerminateFeatureConsistencyCheckJobRequest): TerminateFeatureConsistencyCheckJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'TerminateFeatureConsistencyCheckJob', 'POST', '/api/v1/featureconsistencycheck/jobs/{FeatureConsistencyCheckJobId}/action/terminate', 'json', false, 'json', request);
}

model UpdateABMetricRequest {
  ABMetricId: string(name='ABMetricId', description='This parameter is required.', example='1', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  definition: string(name='Definition', description='This parameter is required.', example='sum(click_cnt)', position='Body'),
  description: string(name='Description', description='This parameter is required.', position='Body'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-test123', position='Body'),
  leftMetricId?: string(name='LeftMetricId', example='2', position='Body'),
  name: string(name='Name', description='This parameter is required.', example='pv', position='Body'),
  operator?: string(name='Operator', example='Division', position='Body'),
  realtime: boolean(name='Realtime', description='This parameter is required.', example='false', position='Body'),
  resultResourceId?: string(name='ResultResourceId', example='3', position='Body'),
  rightMetricId?: string(name='RightMetricId', example='3', position='Body'),
  sceneId: string(name='SceneId', description='This parameter is required.', example='1', position='Body'),
  statisticsCycle?: int32(name='StatisticsCycle', example='1', position='Body'),
  tableMetaId: string(name='TableMetaId', description='This parameter is required.', example='2', position='Body'),
  type: string(name='Type', description='This parameter is required.', example='Single', position='Body'),
}

model UpdateABMetricResponseBody = {
  requestId?: string(name='RequestId', example='6CF1E160-3F36-5E73-A170-C75504F05BBC'),
}

model UpdateABMetricResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateABMetricResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateABMetric  UpdateABMetricRequest
  * @return UpdateABMetricResponse
 */
async function updateABMetric(request: UpdateABMetricRequest): UpdateABMetricResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateABMetric', 'PUT', '/api/v1/abmetrics/{ABMetricId}', 'json', false, 'json', request);
}

model UpdateABMetricGroupRequest {
  ABMetricGroupId: string(name='ABMetricGroupId', description='This parameter is required.', example='1', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  ABMetricIds: string(name='ABMetricIds', description='This parameter is required.', example='1,2', position='Body'),
  description: string(name='Description', description='This parameter is required.', position='Body'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-test1', position='Body'),
  name: string(name='Name', description='This parameter is required.', example='visits', position='Body'),
  realtime: boolean(name='Realtime', description='This parameter is required.', example='false', position='Body'),
  sceneId: string(name='SceneId', description='This parameter is required.', example='1', position='Body'),
}

model UpdateABMetricGroupResponseBody = {
  requestId?: string(name='RequestId', example='74D958EF-3598-56FA-8296-FF1575CE43DF'),
}

model UpdateABMetricGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateABMetricGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateABMetricGroup  UpdateABMetricGroupRequest
  * @return UpdateABMetricGroupResponse
 */
async function updateABMetricGroup(request: UpdateABMetricGroupRequest): UpdateABMetricGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateABMetricGroup', 'PUT', '/api/v1/abmetricgroups/{ABMetricGroupId}', 'json', false, 'json', request);
}

model UpdateCrowdRequest {
  crowdId: string(name='CrowdId', description='This parameter is required.', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  description: string(name='Description', description='This parameter is required.', example='This is a test.', position='Body'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-test1', position='Body'),
  name: string(name='Name', description='This parameter is required.', example='xx人群', position='Body'),
}

model UpdateCrowdResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='8C27790E-CCA5-56BB-BA17-646295DEC0A2'),
}

model UpdateCrowdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateCrowdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateCrowd  UpdateCrowdRequest
  * @return UpdateCrowdResponse
 */
async function updateCrowd(request: UpdateCrowdRequest): UpdateCrowdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateCrowd', 'PUT', '/api/v1/crowds/{CrowdId}', 'json', false, 'json', request);
}

model UpdateEngineConfigRequest {
  engineConfigId?: string(name='EngineConfigId', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  configValue?: string(name='ConfigValue', example='{
	"ListenConf": {
		"HttpAddr": "",
		"HttpPort": 8000
	}
}', position='Body'),
  description?: string(name='Description', position='Body'),
  environment?: string(name='Environment', example='Pre', position='Body'),
  instanceId?: string(name='InstanceId', example='pairec-cn-***test', position='Body'),
  name?: string(name='Name', example='engine_config_v1', position='Body'),
}

model UpdateEngineConfigResponseBody = {
  requestId?: string(name='RequestId', example='F8F613A9-DF1C-551A-88E1-397A3981A785'),
}

model UpdateEngineConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateEngineConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateEngineConfig  UpdateEngineConfigRequest
  * @return UpdateEngineConfigResponse
 */
async function updateEngineConfig(request: UpdateEngineConfigRequest): UpdateEngineConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateEngineConfig', 'PUT', '/api/v1/engineconfigs/{EngineConfigId}', 'json', false, 'json', request);
}

model UpdateExperimentRequest {
  experimentId: string(name='ExperimentId', description='This parameter is required.', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  config?: string(name='Config', example='{"RankBy": "Score"}', position='Body'),
  debugCrowdId?: string(name='DebugCrowdId', example='3', position='Body'),
  debugUsers?: string(name='DebugUsers', example='1124512470******,1124512471******,1124512472******', position='Body'),
  description: string(name='Description', description='This parameter is required.', example='This is a test.', position='Body'),
  flowPercent?: int32(name='FlowPercent', example='100', position='Body'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-abcdefg1234', position='Body'),
  name: string(name='Name', description='This parameter is required.', example='experiment_test', position='Body'),
  type: string(name='Type', description='This parameter is required.', example='Baseline', position='Body'),
}

model UpdateExperimentResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='A760D972-1475-58C0-BBB3-92B5FB08904F'),
}

model UpdateExperimentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateExperimentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateExperiment  UpdateExperimentRequest
  * @return UpdateExperimentResponse
 */
async function updateExperiment(request: UpdateExperimentRequest): UpdateExperimentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateExperiment', 'PUT', '/api/v1/experiments/{ExperimentId}', 'json', false, 'json', request);
}

model UpdateExperimentGroupRequest {
  experimentGroupId: string(name='ExperimentGroupId', description='This parameter is required.', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  config?: string(name='Config', example='{"RankBy": "Score"}', position='Body'),
  crowdId?: string(name='CrowdId', example='3', position='Body'),
  crowdTargetType?: string(name='CrowdTargetType', position='Body'),
  debugCrowdId?: string(name='DebugCrowdId', example='3', position='Body'),
  debugUsers?: string(name='DebugUsers', example='user1,user2,user3', position='Body'),
  description: string(name='Description', description='This parameter is required.', example='This is a test.', position='Body'),
  distributionTimeDuration?: int32(name='DistributionTimeDuration', example='3', position='Body'),
  distributionType?: string(name='DistributionType', example='UserId', position='Body'),
  filter?: string(name='Filter', example='gender=male', position='Body'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-abcdefg1234', position='Body'),
  layerId: string(name='LayerId', description='This parameter is required.', example='3', position='Body'),
  name: string(name='Name', description='This parameter is required.', example='experiment_group1', position='Body'),
  needAA?: boolean(name='NeedAA', example='true', position='Body'),
  randomFlow?: long(name='RandomFlow', position='Body'),
  reservcedBuckets?: string(name='ReservcedBuckets', example='1,2,3', position='Body'),
}

model UpdateExperimentGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='F7AC05FF-EDE7-5C2B-B9AE-33D6DF4178BA'),
}

model UpdateExperimentGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateExperimentGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateExperimentGroup  UpdateExperimentGroupRequest
  * @return UpdateExperimentGroupResponse
 */
async function updateExperimentGroup(request: UpdateExperimentGroupRequest): UpdateExperimentGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateExperimentGroup', 'PUT', '/api/v1/experimentgroups/{ExperimentGroupId}', 'json', false, 'json', request);
}

model UpdateFeatureConsistencyCheckJobConfigRequest {
  featureConsistencyCheckJobConfigId: string(name='FeatureConsistencyCheckJobConfigId', description='This parameter is required.', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  compareFeature: boolean(name='CompareFeature', description='This parameter is required.', example='true', position='Body'),
  datasetId?: string(name='DatasetId', position='Body'),
  datasetMountPath?: string(name='DatasetMountPath', position='Body'),
  datasetName?: string(name='DatasetName', position='Body'),
  datasetType?: string(name='DatasetType', position='Body'),
  datasetUri?: string(name='DatasetUri', position='Body'),
  defaultRoute?: string(name='DefaultRoute', position='Body'),
  easServiceName: string(name='EasServiceName', description='This parameter is required.', example='service_123', position='Body'),
  easyRecPackagePath?: string(name='EasyRecPackagePath', example='oss://********', position='Body'),
  easyRecVersion?: string(name='EasyRecVersion', example='1.3.60', position='Body'),
  featureDisplayExclude?: string(name='FeatureDisplayExclude', example='feature1,feature2', position='Body'),
  featureLandingResourceId: string(name='FeatureLandingResourceId', description='This parameter is required.', example='reso-********', position='Body'),
  featurePriority?: string(name='FeaturePriority', example='feature1,feature2,feature3', position='Body'),
  featureStoreItemId?: string(name='FeatureStoreItemId', position='Body'),
  featureStoreModelId?: string(name='FeatureStoreModelId', position='Body'),
  featureStoreProjectId?: string(name='FeatureStoreProjectId', position='Body'),
  featureStoreProjectName?: string(name='FeatureStoreProjectName', position='Body'),
  featureStoreSeqFeatureView?: string(name='FeatureStoreSeqFeatureView', position='Body'),
  featureStoreUserId?: string(name='FeatureStoreUserId', position='Body'),
  fgJarVersion?: string(name='FgJarVersion', example='1.0.0', position='Body'),
  fgJsonFileName: string(name='FgJsonFileName', description='This parameter is required.', example='file.json', position='Body'),
  generateZip: boolean(name='GenerateZip', description='This parameter is required.', example='true', position='Body'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-********', position='Body'),
  isUseFeatureStore?: boolean(name='IsUseFeatureStore', position='Body'),
  itemIdField: string(name='ItemIdField', description='This parameter is required.', example='item_id', position='Body'),
  itemTable: string(name='ItemTable', description='This parameter is required.', example='item_table', position='Body'),
  itemTablePartitionField: string(name='ItemTablePartitionField', description='This parameter is required.', example='ds', position='Body'),
  itemTablePartitionFieldFormat: string(name='ItemTablePartitionFieldFormat', description='This parameter is required.', example='yyyymmdd', position='Body'),
  name: string(name='Name', description='This parameter is required.', example='feature_consistency_check1', position='Body'),
  ossResourceId?: string(name='OssResourceId', example='reso-********', position='Body'),
  predictWorkerCount?: int32(name='PredictWorkerCount', position='Body'),
  predictWorkerCpu?: int32(name='PredictWorkerCpu', position='Body'),
  predictWorkerMemory?: int32(name='PredictWorkerMemory', position='Body'),
  sampleRate: double(name='SampleRate', description='This parameter is required.', example='0.89', position='Body'),
  sceneId: string(name='SceneId', description='This parameter is required.', example='3', position='Body'),
  securityGroupId?: string(name='SecurityGroupId', position='Body'),
  serviceId?: string(name='ServiceId', example='4', position='Body'),
  switchId?: string(name='SwitchId', position='Body'),
  userIdField: string(name='UserIdField', description='This parameter is required.', example='user_id', position='Body'),
  userTable: string(name='UserTable', description='This parameter is required.', example='user_table', position='Body'),
  userTablePartitionField: string(name='UserTablePartitionField', description='This parameter is required.', example='ds', position='Body'),
  userTablePartitionFieldFormat: string(name='UserTablePartitionFieldFormat', description='This parameter is required.', example='yyyymmdd', position='Body'),
  vpcId?: string(name='VpcId', position='Body'),
  workflowName?: string(name='WorkflowName', example='work_flow_1', position='Body'),
  workspaceId?: string(name='WorkspaceId', position='Body'),
}

model UpdateFeatureConsistencyCheckJobConfigResponseBody = {
  requestId?: string(name='RequestId', example='A04CB8C0-E74A-5E83-BC61-64D153574EC7'),
}

model UpdateFeatureConsistencyCheckJobConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateFeatureConsistencyCheckJobConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateFeatureConsistencyCheckJobConfig  UpdateFeatureConsistencyCheckJobConfigRequest
  * @return UpdateFeatureConsistencyCheckJobConfigResponse
 */
async function updateFeatureConsistencyCheckJobConfig(request: UpdateFeatureConsistencyCheckJobConfigRequest): UpdateFeatureConsistencyCheckJobConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateFeatureConsistencyCheckJobConfig', 'PUT', '/api/v1/featureconsistencycheck/jobconfigs/{FeatureConsistencyCheckJobConfigId}', 'json', false, 'json', request);
}

model UpdateInstanceResourceRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-test1', position='Path'),
  resourceId: string(name='ResourceId', description='This parameter is required.', example='reso-2s416t***', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  config?: string(name='Config', example='{}', position='Body'),
  uri?: string(name='Uri', example='bucket-test-123', position='Body'),
}

model UpdateInstanceResourceResponseBody = {
  requestId?: string(name='RequestId', example='3AAA45F6-0798-5461-9360-81D133823CE7'),
}

model UpdateInstanceResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateInstanceResourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateInstanceResource  UpdateInstanceResourceRequest
  * @return UpdateInstanceResourceResponse
 */
async function updateInstanceResource(request: UpdateInstanceResourceRequest): UpdateInstanceResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateInstanceResource', 'PUT', '/api/v1/instances/{InstanceId}/resources/{ResourceId}', 'json', false, 'json', request);
}

model UpdateLaboratoryRequest {
  laboratoryId: string(name='LaboratoryId', description='This parameter is required.', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  bucketCount?: int32(name='BucketCount', example='24', position='Body'),
  bucketType: string(name='BucketType', description='This parameter is required.', example='Filter', position='Body'),
  buckets?: string(name='Buckets', example='1,2,3,10-20', position='Body'),
  debugCrowdId?: string(name='DebugCrowdId', example='3', position='Body'),
  debugUsers?: string(name='DebugUsers', example='1124512470******,1124512471******,1124512472******', position='Body'),
  description?: string(name='Description', example='This is a test.', position='Body'),
  environment?: string(name='Environment', example='Daily', position='Body'),
  filter?: string(name='Filter', example='filter=xxx', position='Body'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-test1', position='Body'),
  name: string(name='Name', description='This parameter is required.', example='laboratory1', position='Body'),
  type: string(name='Type', description='This parameter is required.', example='Base', position='Body'),
}

model UpdateLaboratoryResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='A04CB8C0-E74A-5E83-BC61-64D153574EC7'),
}

model UpdateLaboratoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateLaboratoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateLaboratory  UpdateLaboratoryRequest
  * @return UpdateLaboratoryResponse
 */
async function updateLaboratory(request: UpdateLaboratoryRequest): UpdateLaboratoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateLaboratory', 'PUT', '/api/v1/laboratories/{LaboratoryId}', 'json', false, 'json', request);
}

model UpdateLayerRequest {
  layerId: string(name='LayerId', description='This parameter is required.', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  description: string(name='Description', description='This parameter is required.', example='This is a test.', position='Body'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-test1', position='Body'),
  name: string(name='Name', description='This parameter is required.', example='layer1', position='Body'),
}

model UpdateLayerResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='0EA9215E-EC21-53AB-B8D9-D3DEA90D040A'),
}

model UpdateLayerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateLayerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateLayer  UpdateLayerRequest
  * @return UpdateLayerResponse
 */
async function updateLayer(request: UpdateLayerRequest): UpdateLayerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateLayer', 'PUT', '/api/v1/layers/{LayerId}', 'json', false, 'json', request);
}

model UpdateParamRequest {
  paramId?: string(name='ParamId', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234', position='Body'),
  value?: string(name='Value', example='house', position='Body'),
}

model UpdateParamResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='BBD41FBF-E75C-551A-92FA-CAD654AA006F'),
}

model UpdateParamResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateParamResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateParam  UpdateParamRequest
  * @return UpdateParamResponse
 */
async function updateParam(request: UpdateParamRequest): UpdateParamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateParam', 'PUT', '/api/v1/params/{ParamId}', 'json', false, 'json', request);
}

model UpdateResourceRuleRequest {
  resourceRuleId: string(name='ResourceRuleId', description='This parameter is required.', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  description?: string(name='Description', position='Body'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Body'),
  metricOperationType: string(name='MetricOperationType', description='This parameter is required.', position='Body'),
  metricPullInfo?: string(name='MetricPullInfo', position='Body'),
  metricPullPeriod?: string(name='MetricPullPeriod', position='Body'),
  name: string(name='Name', description='This parameter is required.', position='Body'),
  ruleComputingDefinition: string(name='RuleComputingDefinition', description='This parameter is required.', position='Body'),
}

model UpdateResourceRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateResourceRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateResourceRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateResourceRule  UpdateResourceRuleRequest
  * @return UpdateResourceRuleResponse
 */
async function updateResourceRule(request: UpdateResourceRuleRequest): UpdateResourceRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateResourceRule', 'PUT', '/api/v1/resourcerules/{ResourceRuleId}', 'json', false, 'json', request);
}

model UpdateResourceRuleItemRequest {
  resourceRuleId: string(name='ResourceRuleId', description='This parameter is required.', position='Path'),
  resourceRuleItemId: string(name='ResourceRuleItemId', description='This parameter is required.', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  description?: string(name='Description', position='Body'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Body'),
  maxValue?: double(name='MaxValue', position='Body'),
  minValue?: double(name='MinValue', position='Body'),
  name: string(name='Name', description='This parameter is required.', position='Body'),
  value?: double(name='Value', position='Body'),
}

model UpdateResourceRuleItemResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateResourceRuleItemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateResourceRuleItemResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateResourceRuleItem  UpdateResourceRuleItemRequest
  * @return UpdateResourceRuleItemResponse
 */
async function updateResourceRuleItem(request: UpdateResourceRuleItemRequest): UpdateResourceRuleItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateResourceRuleItem', 'POST', '/api/v1/resourcerules/{ResourceRuleId}/items/{ResourceRuleItemId}', 'json', false, 'json', request);
}

model UpdateSceneRequest {
  sceneId?: string(name='SceneId', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  description?: string(name='Description', example='This is a test.', position='Body'),
  flows?: [ 
    {
      flowCode?: string(name='FlowCode', example='liuliang1'),
      flowName?: string(name='FlowName', example='流量1'),
    }
  ](name='Flows', position='Body'),
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234', position='Body'),
  name?: string(name='Name', example='scene1', position='Body'),
}

model UpdateSceneResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='FC17887E-3C82-5096-8AA6-F4C2E7417245'),
}

model UpdateSceneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSceneResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateScene  UpdateSceneRequest
  * @return UpdateSceneResponse
 */
async function updateScene(request: UpdateSceneRequest): UpdateSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateScene', 'PUT', '/api/v1/scenes/{SceneId}', 'json', false, 'json', request);
}

model UpdateTableMetaRequest {
  tableMetaId: string(name='TableMetaId', description='This parameter is required.', example='1', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  description?: string(name='Description', example='this is a test table', position='Body'),
  fields: [ 
    {
      dataType?: string(name='DataType'),
      isDimensionField: boolean(name='IsDimensionField', description='This parameter is required.', example='false'),
      isPartitionField: string(name='IsPartitionField', description='This parameter is required.'),
      meaning: string(name='Meaning', description='This parameter is required.'),
      name: string(name='Name', description='This parameter is required.', example='name'),
      type: string(name='Type', description='This parameter is required.', example='BIGINT'),
    }
  ](name='Fields', description='This parameter is required.', position='Body'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='pairec-cn-test1', position='Body'),
  module: string(name='Module', description='This parameter is required.', example='ABTest', position='Body'),
  name: string(name='Name', description='This parameter is required.', example='table_test', position='Body'),
  resourceId: string(name='ResourceId', description='This parameter is required.', example='reso-2s416t***', position='Body'),
  tableName: string(name='TableName', description='This parameter is required.', example='table_mysql', position='Body'),
}

model UpdateTableMetaResponseBody = {
  requestId?: string(name='RequestId', example='728C5E01-ABF6-5AA8-B9FC-B3BA05DECC77'),
}

model UpdateTableMetaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTableMetaResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateTableMeta  UpdateTableMetaRequest
  * @return UpdateTableMetaResponse
 */
async function updateTableMeta(request: UpdateTableMetaRequest): UpdateTableMetaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateTableMeta', 'PUT', '/api/v1/tablemetas/{TableMetaId}', 'json', false, 'json', request);
}

model UpdateTrafficControlTargetRequest {
  trafficControlTargetId?: string(name='TrafficControlTargetId', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  endTime?: string(name='EndTime', position='Body'),
  event?: string(name='Event', position='Body'),
  itemConditionArray?: string(name='ItemConditionArray', position='Body'),
  itemConditionExpress?: string(name='ItemConditionExpress', position='Body'),
  itemConditionType?: string(name='ItemConditionType', position='Body'),
  name?: string(name='Name', position='Body'),
  newProductRegulation?: boolean(name='NewProductRegulation', position='Body'),
  recallName?: string(name='RecallName', position='Body'),
  startTime?: string(name='StartTime', position='Body'),
  statisPeriod?: string(name='StatisPeriod', position='Body'),
  status?: string(name='Status', position='Body'),
  toleranceValue?: long(name='ToleranceValue', position='Body'),
  value?: float(name='Value', position='Body'),
  newParam3?: string(name='new-param-3', position='Query'),
}

model UpdateTrafficControlTargetResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateTrafficControlTargetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTrafficControlTargetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateTrafficControlTarget  UpdateTrafficControlTargetRequest
  * @return UpdateTrafficControlTargetResponse
 */
async function updateTrafficControlTarget(request: UpdateTrafficControlTargetRequest): UpdateTrafficControlTargetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateTrafficControlTarget', 'PUT', '/api/v1/trafficcontroltargets/{TrafficControlTargetId}', 'json', false, 'json', request);
}

model UpdateTrafficControlTaskRequest {
  trafficControlTaskId?: string(name='TrafficControlTaskId', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  behaviorTableMetaId?: string(name='BehaviorTableMetaId', position='Body'),
  controlGranularity?: string(name='ControlGranularity', position='Body'),
  controlLogic?: string(name='ControlLogic', position='Body'),
  controlType?: string(name='ControlType', position='Body'),
  description?: string(name='Description', position='Body'),
  endTime?: string(name='EndTime', position='Body'),
  executionTime?: string(name='ExecutionTime', position='Body'),
  instanceId?: string(name='InstanceId', position='Body'),
  itemConditionArray?: string(name='ItemConditionArray', position='Body'),
  itemConditionExpress?: string(name='ItemConditionExpress', position='Body'),
  itemConditionType?: string(name='ItemConditionType', position='Body'),
  itemTableMetaId?: string(name='ItemTableMetaId', position='Body'),
  name?: string(name='Name', position='Body'),
  preExperimentIds?: string(name='PreExperimentIds', position='Body'),
  prodExperimentIds?: string(name='ProdExperimentIds', position='Body'),
  sceneId?: string(name='SceneId', position='Body'),
  serviceId?: string(name='ServiceId', position='Body'),
  startTime?: string(name='StartTime', position='Body'),
  statisBaeaviorConditionArray?: string(name='StatisBaeaviorConditionArray', position='Body'),
  statisBehaviorConditionExpress?: string(name='StatisBehaviorConditionExpress', position='Body'),
  statisBehaviorConditionType?: string(name='StatisBehaviorConditionType', position='Body'),
  trafficControlTargets?: [ 
    {
      endTime?: string(name='EndTime'),
      event?: string(name='Event'),
      itemConditionArray?: string(name='ItemConditionArray'),
      itemConditionExpress?: string(name='ItemConditionExpress'),
      itemConditionType?: string(name='ItemConditionType'),
      name?: string(name='Name'),
      newProductRegulation?: boolean(name='NewProductRegulation'),
      recallName?: string(name='RecallName'),
      startTime?: string(name='StartTime'),
      statisPeriod?: string(name='StatisPeriod'),
      status?: string(name='Status'),
      toleranceValue?: long(name='ToleranceValue'),
      value?: float(name='Value'),
    }
  ](name='TrafficControlTargets', position='Body'),
  userConditionArray?: string(name='UserConditionArray', position='Body'),
  userConditionExpress?: string(name='UserConditionExpress', position='Body'),
  userConditionType?: string(name='UserConditionType', position='Body'),
  userTableMetaId?: string(name='UserTableMetaId', position='Body'),
}

model UpdateTrafficControlTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateTrafficControlTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTrafficControlTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateTrafficControlTask  UpdateTrafficControlTaskRequest
  * @return UpdateTrafficControlTaskResponse
 */
async function updateTrafficControlTask(request: UpdateTrafficControlTaskRequest): UpdateTrafficControlTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateTrafficControlTask', 'PUT', '/api/v1/trafficcontroltasks/{TrafficControlTaskId}', 'json', false, 'json', request);
}

model UpdateTrafficControlTaskTrafficRequest {
  trafficControlTaskId?: string(name='TrafficControlTaskId', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  environment?: string(name='Environment', position='Body'),
  instanceId?: string(name='InstanceId', position='Body'),
  traffics?: [ 
    {
      itemOrExperimentId?: string(name='ItemOrExperimentId'),
      recordTime?: string(name='RecordTime'),
      trafficControlTargetAimTraffic?: double(name='TrafficControlTargetAimTraffic'),
      trafficControlTargetId?: string(name='TrafficControlTargetId'),
      trafficControlTargetTraffic?: long(name='TrafficControlTargetTraffic'),
      trafficControlTaskTraffic?: long(name='TrafficControlTaskTraffic'),
    }
  ](name='Traffics', position='Body'),
  newParam3?: string(name='new-param-3', position='Query'),
}

model UpdateTrafficControlTaskTrafficResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateTrafficControlTaskTrafficResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTrafficControlTaskTrafficResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateTrafficControlTaskTraffic  UpdateTrafficControlTaskTrafficRequest
  * @return UpdateTrafficControlTaskTrafficResponse
 */
async function updateTrafficControlTaskTraffic(request: UpdateTrafficControlTaskTrafficRequest): UpdateTrafficControlTaskTrafficResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateTrafficControlTaskTraffic', 'POST', '/api/v1/trafficcontroltasks/{TrafficControlTaskId}/action/traffic', 'json', false, 'json', request);
}

model UploadRecommendationDataRequest {
  regionId?: string(name='RegionId', position='Query'),
  content?: [ 
    {
      fields?: string(name='Fields'),
      operationType?: string(name='OperationType'),
    }
  ](name='Content', position='Body'),
  dataType?: string(name='DataType', position='Body'),
}

model UploadRecommendationDataResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model UploadRecommendationDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UploadRecommendationDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UploadRecommendationData  UploadRecommendationDataRequest
  * @return UploadRecommendationDataResponse
 */
async function uploadRecommendationData(request: UploadRecommendationDataRequest): UploadRecommendationDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UploadRecommendationData', 'POST', '/api/v1/recommendationdata/action/upload', 'json', false, 'json', request);
}

model TrafficControlTaskTrafficInfoTargetTrafficsDataValue = {
  traffic?: double(name='Traffic'),
  recordTime?: long(name='RecordTime'),
}

model TrafficControlTaskTrafficInfoTaskTrafficsValue = {
  traffic?: double(name='Traffic'),
}

model ExperimentReportValue = {
  baseline?: boolean(name='Baseline', example='true'),
  metricResults?: map[string]map[string]any(name='MetricResults'),
}

