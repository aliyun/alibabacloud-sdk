/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'PaiRecService';
  @version = '2022-12-13';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model BackflowFeatureConsistencyCheckJobDataRequest {
  regionId?: string(name='RegionId', position='Host'),
  featureConsistencyCheckJobConfigId: string(name='FeatureConsistencyCheckJobConfigId', example='4', position='Body'),
  instanceId: string(name='InstanceId', example='pairec-cn-********', position='Body'),
  itemFeatures: string(name='ItemFeatures', example='[\\"{\\\\\\"itemid\\\\\\":{\\\\\\"value\\\\\\":1010,\\\\\\"type\\\\\\":\\\\\\"string\\\\\\"}}\\"]', position='Body'),
  logItemId: string(name='LogItemId', example='9010', position='Body'),
  logRequestId: string(name='LogRequestId', example='728C5E01-ABF6-5AA8-B9FC-B3BA05DECC77', position='Body'),
  logRequestTime: long(name='LogRequestTime', example='1693900981465', position='Body'),
  logUserId: string(name='LogUserId', example='1010', position='Body'),
  sceneName: string(name='SceneName', example='video-feed', position='Body'),
  scores: string(name='Scores', example='[\\"{\\\\\\"dbmtl_probs_is_valid_play\\\\\\":0.00032182207107543945,\\\\\\"dbmtl_y_play_time\\\\\\":0.0043269748210906982}\\"]', position='Body'),
  userFeatures: string(name='UserFeatures', example='{\\"userid\\":{\\"value\\":1010,\\"type\\":\\"string\\"},\\"click_5_seq\\":{\\"value\\":\\"9001;9002;9003;9004;9005\\",\\"type\\":\\"string\\"}}', position='Body'),
}

model BackflowFeatureConsistencyCheckJobDataResponseBody = {
  requestId?: string(name='RequestId', example='BDB621CB-A81E-5D39-8793-39A365CBCC74'),
}

model BackflowFeatureConsistencyCheckJobDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BackflowFeatureConsistencyCheckJobDataResponseBody(name='body'),
}

async function backflowFeatureConsistencyCheckJobData(request: BackflowFeatureConsistencyCheckJobDataRequest): BackflowFeatureConsistencyCheckJobDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BackflowFeatureConsistencyCheckJobData', 'POST', '/api/v1/featureconsistencycheck/jobs/action/backflowdata', 'json', false, 'json', request);
}

model CloneExperimentRequest {
  experimentId: string(name='ExperimentId', example='experiment_test', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', example='pairec-cn-abcdefg1234', position='Body'),
}

model CloneExperimentResponseBody = {
  experimentId?: string(name='ExperimentId', example='3'),
  requestId?: string(name='RequestId', description='Id of the request', example='F8F613A9-DF1C-551A-88E1-397A3981A785'),
}

model CloneExperimentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CloneExperimentResponseBody(name='body'),
}

async function cloneExperiment(request: CloneExperimentRequest): CloneExperimentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CloneExperiment', 'POST', '/api/v1/experiments/{ExperimentId}/action/clone', 'json', false, 'json', request);
}

model CloneExperimentGroupRequest {
  experimentGroupId: string(name='ExperimentGroupId', example='3', position='Path'),
  environment: string(name='Environment', example='Daily', position='Body'),
  instanceId: string(name='InstanceId', example='pairec-cn-abcdefg1234', position='Body'),
  layerId: string(name='LayerId', example='3', position='Body'),
}

model CloneExperimentGroupResponseBody = {
  experimentGroupId?: string(name='ExperimentGroupId', example='3'),
  requestId?: string(name='RequestId', description='Id of the request', example='12A65C6C-AFA1-59B2-9A66-A9E0BB73F0E5'),
}

model CloneExperimentGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CloneExperimentGroupResponseBody(name='body'),
}

async function cloneExperimentGroup(request: CloneExperimentGroupRequest): CloneExperimentGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CloneExperimentGroup', 'POST', '/api/v1/experimentgroups/{ExperimentGroupId}/action/clone', 'json', false, 'json', request);
}

model CloneFeatureConsistencyCheckJobConfigRequest {
  sourceFeatureConsistencyCheckJobConfigId: string(name='SourceFeatureConsistencyCheckJobConfigId', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', example='pairec-cn-********', position='Body'),
}

model CloneFeatureConsistencyCheckJobConfigResponseBody = {
  featureConsistencyCheckId?: string(name='FeatureConsistencyCheckId', example='4'),
  requestId?: string(name='RequestId', example='74D958EF-3598-56FA-8296-FF1575CE43DF'),
}

model CloneFeatureConsistencyCheckJobConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CloneFeatureConsistencyCheckJobConfigResponseBody(name='body'),
}

async function cloneFeatureConsistencyCheckJobConfig(request: CloneFeatureConsistencyCheckJobConfigRequest): CloneFeatureConsistencyCheckJobConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CloneFeatureConsistencyCheckJobConfig', 'POST', '/api/v1/featureconsistencycheck/jobconfigs/{SourceFeatureConsistencyCheckJobConfigId}/action/clone', 'json', false, 'json', request);
}

model CloneLaboratoryRequest {
  laboratoryId: string(name='LaboratoryId', example='3', position='Path'),
  cloneExperimentGroup: boolean(name='CloneExperimentGroup', example='true', position='Body'),
  environment: string(name='Environment', example='Daily', position='Body'),
  instanceId: string(name='InstanceId', example='pairec-cn-abcdefg1234', position='Body'),
}

model CloneLaboratoryResponseBody = {
  laboratoryId?: string(name='LaboratoryId', example='3'),
  requestId?: string(name='RequestId', description='Id of the request', example='01D22D08-BA20-5F35-8302-99115F288220'),
}

model CloneLaboratoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CloneLaboratoryResponseBody(name='body'),
}

async function cloneLaboratory(request: CloneLaboratoryRequest): CloneLaboratoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CloneLaboratory', 'POST', '/api/v1/laboratories/{LaboratoryId}/action/clone', 'json', false, 'json', request);
}

model CreateCrowdRequest {
  description: string(name='Description', example='This is a test.', position='Body'),
  instanceId: string(name='InstanceId', example='pairec-cn-abcdefg1234', position='Body'),
  label?: string(name='Label', example='os=android', position='Body'),
  name: string(name='Name', example='xx人群', position='Body'),
  source?: string(name='Source', example='ManualInput', position='Body'),
  users?: string(name='Users', example='user1,user2,user3', position='Body'),
}

model CreateCrowdResponseBody = {
  crowdId?: string(name='CrowdId', example='3'),
  requestId?: string(name='RequestId', description='Id of the request', example='59CE7EC6-F268-5D71-9215-32922CC50D72'),
}

model CreateCrowdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCrowdResponseBody(name='body'),
}

async function createCrowd(request: CreateCrowdRequest): CreateCrowdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateCrowd', 'POST', '/api/v1/crowds', 'json', false, 'json', request);
}

model CreateExperimentRequest {
  config?: string(name='Config', example='{"RankBy": "Score"}', position='Body'),
  debugCrowdId?: string(name='DebugCrowdId', example='3', position='Body'),
  debugUsers?: string(name='DebugUsers', example='1124512470******,1124512471******,1124512472******', position='Body'),
  description: string(name='Description', example='This is a test.', position='Body'),
  experimentGroupId: string(name='ExperimentGroupId', example='3', position='Body'),
  flowPercent?: int32(name='FlowPercent', example='100', position='Body'),
  instanceId: string(name='InstanceId', example='pairec-test1', position='Body'),
  name: string(name='Name', example='experiment_test', position='Body'),
  type: string(name='Type', example='Baseline', position='Body'),
}

model CreateExperimentResponseBody = {
  experimentId?: string(name='ExperimentId', example='3'),
  requestId?: string(name='RequestId', description='Id of the request', example='3AAA45F6-0798-5461-9360-81D133823CE7'),
}

model CreateExperimentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateExperimentResponseBody(name='body'),
}

async function createExperiment(request: CreateExperimentRequest): CreateExperimentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateExperiment', 'POST', '/api/v1/experiments', 'json', false, 'json', request);
}

model CreateExperimentGroupRequest {
  config?: string(name='Config', example='{"RankBy": "Score"}', position='Body'),
  crowdId?: string(name='CrowdId', example='1', position='Body'),
  debugCrowdId?: string(name='DebugCrowdId', example='3', position='Body'),
  debugUsers?: string(name='DebugUsers', example='1124512470******,1124512471******,1124512472******', position='Body'),
  description?: string(name='Description', example='This is a test.', position='Body'),
  distributionTimeDuration?: int32(name='DistributionTimeDuration', example='3', position='Body'),
  distributionType?: string(name='DistributionType', example='UserId', position='Body'),
  filter?: string(name='Filter', example='gender=male', position='Body'),
  instanceId: string(name='InstanceId', example='pairec-test1', position='Body'),
  layerId: string(name='LayerId', example='3', position='Body'),
  name: string(name='Name', example='experiment_group_test', position='Body'),
  needAA: boolean(name='NeedAA', example='true', position='Body'),
  reservedBuckets?: string(name='ReservedBuckets', example='1,2,3', position='Body'),
}

model CreateExperimentGroupResponseBody = {
  experimentGroupId?: string(name='ExperimentGroupId', example='3'),
  requestId?: string(name='RequestId', description='Id of the request', example='A04CB8C0-E74A-5E83-BC61-64D153574EC7'),
}

model CreateExperimentGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateExperimentGroupResponseBody(name='body'),
}

async function createExperimentGroup(request: CreateExperimentGroupRequest): CreateExperimentGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateExperimentGroup', 'POST', '/api/v1/experimentgroups', 'json', false, 'json', request);
}

model CreateFeatureConsistencyCheckJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  environment: string(name='Environment', example='Pre', position='Body'),
  featureConsistencyCheckJobConfigId: string(name='FeatureConsistencyCheckJobConfigId', example='3', position='Body'),
  instanceId: string(name='InstanceId', example='pairec-cn-********', position='Body'),
  samplingDuration?: int32(name='SamplingDuration', example='10', position='Body'),
}

model CreateFeatureConsistencyCheckJobResponseBody = {
  featureConsistencyCheckJobId?: string(name='FeatureConsistencyCheckJobId', example='4'),
  requestId?: string(name='RequestId', example='7D59453C-48AA-5FC5-8848-2D373BD1A17F'),
}

model CreateFeatureConsistencyCheckJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFeatureConsistencyCheckJobResponseBody(name='body'),
}

async function createFeatureConsistencyCheckJob(request: CreateFeatureConsistencyCheckJobRequest): CreateFeatureConsistencyCheckJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateFeatureConsistencyCheckJob', 'POST', '/api/v1/featureconsistencycheck/jobs', 'json', false, 'json', request);
}

model CreateFeatureConsistencyCheckJobConfigRequest {
  regionId?: string(name='RegionId', example='feature1,feature2', position='Host'),
  compareFeature: boolean(name='CompareFeature', example='true', position='Body'),
  easServiceName: string(name='EasServiceName', example='service_123', position='Body'),
  easyRecPackagePath?: string(name='EasyRecPackagePath', example='oss://*******', position='Body'),
  easyRecVersion?: string(name='EasyRecVersion', example='1.3.60', position='Body'),
  featureDisplayExclude?: string(name='FeatureDisplayExclude', example='feature1,feature2', position='Body'),
  featureLandingResourceId: string(name='FeatureLandingResourceId', example='reso-********', position='Body'),
  featurePriority?: string(name='FeaturePriority', example='feature1,feature2,feature3', position='Body'),
  fgJarVersion?: string(name='FgJarVersion', example='1.0.0', position='Body'),
  fgJsonFileName: string(name='FgJsonFileName', example='file.json', position='Body'),
  generateZip: boolean(name='GenerateZip', example='true', position='Body'),
  instanceId: string(name='InstanceId', example='pairec-cn-********', position='Body'),
  itemIdField: string(name='ItemIdField', example='item_id', position='Body'),
  itemTable: string(name='ItemTable', example='item_table', position='Body'),
  itemTablePartitionField: string(name='ItemTablePartitionField', example='ds', position='Body'),
  itemTablePartitionFieldFormat: string(name='ItemTablePartitionFieldFormat', example='yyyymmdd', position='Body'),
  name: string(name='Name', example='feature_consistency_check1', position='Body'),
  ossResourceId?: string(name='OssResourceId', example='reso-********', position='Body'),
  sampleRate: double(name='SampleRate', example='0.89', position='Body'),
  sceneId: string(name='SceneId', example='3', position='Body'),
  serviceId?: string(name='ServiceId', example='4', position='Body'),
  userIdField: string(name='UserIdField', example='user_id', position='Body'),
  userTable: string(name='UserTable', example='user_table', position='Body'),
  userTablePartitionField: string(name='UserTablePartitionField', example='ds', position='Body'),
  userTablePartitionFieldFormat: string(name='UserTablePartitionFieldFormat', example='yyyymmdd', position='Body'),
  workflowName?: string(name='WorkflowName', example='work_flow_1', position='Body'),
}

model CreateFeatureConsistencyCheckJobConfigResponseBody = {
  featureConsistencyCheckJobConfigId?: string(name='FeatureConsistencyCheckJobConfigId', example='4'),
  requestId?: string(name='RequestId', example='E15A1443-7917-5BE0-AE70-25538ECF398D'),
}

model CreateFeatureConsistencyCheckJobConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFeatureConsistencyCheckJobConfigResponseBody(name='body'),
}

async function createFeatureConsistencyCheckJobConfig(request: CreateFeatureConsistencyCheckJobConfigRequest): CreateFeatureConsistencyCheckJobConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateFeatureConsistencyCheckJobConfig', 'POST', '/api/v1/featureconsistencycheck/jobconfigs', 'json', false, 'json', request);
}

model CreateLaboratoryRequest {
  bucketCount?: int32(name='BucketCount', example='24', position='Body'),
  bucketType: string(name='BucketType', example='UidHash', position='Body'),
  buckets?: string(name='Buckets', example='1,2,3,10-20', position='Body'),
  debugCrowdId?: string(name='DebugCrowdId', example='3', position='Body'),
  debugUsers?: string(name='DebugUsers', example='1124512470******,1124512471******,1124512472******', position='Body'),
  description?: string(name='Description', example='This is a test.', position='Body'),
  environment: string(name='Environment', example='Daily', position='Body'),
  filter?: string(name='Filter', example='filter=xxx', position='Body'),
  instanceId: string(name='InstanceId', example='pairec-cn-abcdefg1234', position='Body'),
  name: string(name='Name', example='laboratory1', position='Body'),
  sceneId: string(name='SceneId', example='3', position='Body'),
  type: string(name='Type', example='Base', position='Body'),
}

model CreateLaboratoryResponseBody = {
  laboratoryId?: string(name='LaboratoryId', example='3'),
  requestId?: string(name='RequestId', description='Id of the request', example='42391E6D-822C-58F8-9F7E-D991BB86D6AD'),
}

model CreateLaboratoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateLaboratoryResponseBody(name='body'),
}

async function createLaboratory(request: CreateLaboratoryRequest): CreateLaboratoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateLaboratory', 'POST', '/api/v1/laboratories', 'json', false, 'json', request);
}

model CreateLayerRequest {
  description: string(name='Description', example='This is a test.', position='Body'),
  instanceId: string(name='InstanceId', example='pairec-cn-abcdefg1234', position='Body'),
  laboratoryId: string(name='LaboratoryId', example='3', position='Body'),
  name: string(name='Name', example='layer1', position='Body'),
}

model CreateLayerResponseBody = {
  layerId?: string(name='LayerId', example='3'),
  requestId?: string(name='RequestId', description='Id of the request', example='59CE7EC6-F268-5D71-9215-32922CC50D72'),
}

model CreateLayerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateLayerResponseBody(name='body'),
}

async function createLayer(request: CreateLayerRequest): CreateLayerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateLayer', 'POST', '/api/v1/layers', 'json', false, 'json', request);
}

model CreateParamRequest {
  environment?: string(name='Environment', example='Daily', position='Body'),
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234', position='Body'),
  name?: string(name='Name', example='home', position='Body'),
  sceneId?: string(name='SceneId', example='4', position='Body'),
  value?: string(name='Value', example='house', position='Body'),
}

model CreateParamResponseBody = {
  paramId?: long(name='ParamId', example='4'),
  requestId?: string(name='RequestId', description='Id of the request', example='F8F613A9-DF1C-551A-88E1-397A3981A785'),
}

model CreateParamResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateParamResponseBody(name='body'),
}

async function createParam(request: CreateParamRequest): CreateParamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateParam', 'POST', '/api/v1/params', 'json', false, 'json', request);
}

model CreateSceneRequest {
  description?: string(name='Description', example='This is a test.', position='Body'),
  flows?: [ 
    {
      flowCode?: string(name='FlowCode', example='liuliang1'),
      flowName?: string(name='FlowName', example='流量1'),
    }
  ](name='Flows', position='Body'),
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234', position='Body'),
  name?: string(name='Name', example='scene1', position='Body'),
}

model CreateSceneResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='FCF741D8-9C30-578E-807F-B935487DB34A'),
  sceneId?: string(name='SceneId', example='3'),
}

model CreateSceneResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSceneResponseBody(name='body'),
}

async function createScene(request: CreateSceneRequest): CreateSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateScene', 'POST', '/api/v1/scenes', 'json', false, 'json', request);
}

model CreateSubCrowdRequest {
  crowdId: string(name='CrowdId', example='3', position='Path'),
  instanceId: string(name='InstanceId', example='pairec-test1', position='Body'),
  source: string(name='Source', example='ManualInput', position='Body'),
  users: string(name='Users', example='user1,user2,user3', position='Body'),
}

model CreateSubCrowdResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='9763624B-5FBB-5E3A-9193-B1ADB554CEAE'),
  subCrowdId?: string(name='SubCrowdId', example='3'),
}

model CreateSubCrowdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSubCrowdResponseBody(name='body'),
}

async function createSubCrowd(request: CreateSubCrowdRequest): CreateSubCrowdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateSubCrowd', 'POST', '/api/v1/crowds/{CrowdId}/subcrowds', 'json', false, 'json', request);
}

model DeleteCrowdRequest {
  crowdId: string(name='CrowdId', example='3', position='Path'),
  instanceId: string(name='InstanceId', example='pairec-cn-abcdefg1234', position='Query'),
}

model DeleteCrowdResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='A04CB8C0-E74A-5E83-BC61-64D153574EC7'),
}

model DeleteCrowdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCrowdResponseBody(name='body'),
}

async function deleteCrowd(request: DeleteCrowdRequest): DeleteCrowdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteCrowd', 'DELETE', '/api/v1/crowds/{CrowdId}', 'json', false, 'json', request);
}

model DeleteExperimentRequest {
  experimentId: string(name='ExperimentId', example='3', position='Path'),
  instanceId: string(name='InstanceId', example='pairec-cn-abcdefg1234', position='Query'),
}

model DeleteExperimentResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='2A734D87-2212-5C84-B63A-1AC87CA843D4'),
}

model DeleteExperimentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteExperimentResponseBody(name='body'),
}

async function deleteExperiment(request: DeleteExperimentRequest): DeleteExperimentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteExperiment', 'DELETE', '/api/v1/experiments/{ExperimentId}', 'json', false, 'json', request);
}

model DeleteExperimentGroupRequest {
  experimentGroupId: string(name='ExperimentGroupId', example='3', position='Path'),
  instanceId: string(name='InstanceId', example='pairec-cn-abcdefg1234', position='Query'),
}

model DeleteExperimentGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='A009D9BE-C85E-57B2-AE05-BD78BB6EBF50'),
}

model DeleteExperimentGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteExperimentGroupResponseBody(name='body'),
}

async function deleteExperimentGroup(request: DeleteExperimentGroupRequest): DeleteExperimentGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteExperimentGroup', 'DELETE', '/api/v1/experimentgroups/{ExperimentGroupId}', 'json', false, 'json', request);
}

model DeleteLaboratoryRequest {
  laboratoryId: string(name='LaboratoryId', example='3', position='Path'),
  instanceId: string(name='InstanceId', example='pairec-cn-abcdefg1234', position='Query'),
}

model DeleteLaboratoryResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='1C0898E5-9220-5443-B2D9-445FF0688215'),
}

model DeleteLaboratoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteLaboratoryResponseBody(name='body'),
}

async function deleteLaboratory(request: DeleteLaboratoryRequest): DeleteLaboratoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteLaboratory', 'DELETE', '/api/v1/laboratories/{LaboratoryId}', 'json', false, 'json', request);
}

model DeleteLayerRequest {
  layerId?: string(name='LayerId', example='3', position='Path'),
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234', position='Query'),
}

model DeleteLayerResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='8F457D79-C4A2-5E8C-83E4-0D089456E2AC'),
}

model DeleteLayerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteLayerResponseBody(name='body'),
}

async function deleteLayer(request: DeleteLayerRequest): DeleteLayerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteLayer', 'DELETE', '/api/v1/layers/{LayerId}', 'json', false, 'json', request);
}

model DeleteParamRequest {
  paramId?: string(name='ParamId', example='3', position='Path'),
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234', position='Query'),
}

model DeleteParamResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='F0AB6527-093F-5C44-B3BD-42C8C210C619'),
}

model DeleteParamResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteParamResponseBody(name='body'),
}

async function deleteParam(request: DeleteParamRequest): DeleteParamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteParam', 'DELETE', '/api/v1/params/{ParamId}', 'json', false, 'json', request);
}

model DeleteSceneRequest {
  sceneId?: string(name='SceneId', example='3', position='Path'),
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234', position='Query'),
}

model DeleteSceneResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='D75C43DC-3D3A-5CC8-9AAC-8C77306C433B'),
}

model DeleteSceneResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSceneResponseBody(name='body'),
}

async function deleteScene(request: DeleteSceneRequest): DeleteSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteScene', 'DELETE', '/api/v1/scenes/{SceneId}', 'json', false, 'json', request);
}

model DeleteSubCrowdRequest {
  crowdId: string(name='CrowdId', example='3', position='Path'),
  subCrowdId: string(name='SubCrowdId', example='3', position='Path'),
  instanceId: string(name='InstanceId', example='pairec-cn-abcdefg1234', position='Query'),
}

model DeleteSubCrowdResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='EE97D06A-2AA0-5AD9-B6CF-8A267924D691'),
}

model DeleteSubCrowdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSubCrowdResponseBody(name='body'),
}

async function deleteSubCrowd(request: DeleteSubCrowdRequest): DeleteSubCrowdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteSubCrowd', 'DELETE', '/api/v1/crowds/{CrowdId}/subcrowds/{SubCrowdId}', 'json', false, 'json', request);
}

model GetExperimentRequest {
  experimentId: string(name='ExperimentId', example='3', position='Path'),
  instanceId: string(name='InstanceId', example='pairec-test1', position='Query'),
}

model GetExperimentResponseBody = {
  aliasExperimentId?: string(name='AliasExperimentId', example='L1#EG1#E1'),
  buckets?: string(name='Buckets', example='1,2,3'),
  config?: string(name='Config', example='{}'),
  debugCrowdId?: string(name='DebugCrowdId', example='3'),
  debugUsers?: string(name='DebugUsers', example='uid1,uid2,uid3'),
  description?: string(name='Description', example='This is a test.'),
  experimentGroupId?: string(name='ExperimentGroupId', example='3'),
  flowPercent?: int32(name='FlowPercent', example='100'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-12-15T23:24:33.132+08:00'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-12-15T23:24:33.132+08:00'),
  laboratoryId?: string(name='LaboratoryId', example='3'),
  layerId?: string(name='LayerId', example='3'),
  name?: string(name='Name', example='experiment_test1'),
  requestId?: string(name='RequestId', description='Id of the request', example='74D958EF-3598-56FA-8296-FF1575CE43DF'),
  sceneId?: string(name='SceneId', example='3'),
  status?: string(name='Status', example='Offline'),
  type?: string(name='Type', example='Baseline'),
}

model GetExperimentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetExperimentResponseBody(name='body'),
}

async function getExperiment(request: GetExperimentRequest): GetExperimentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetExperiment', 'GET', '/api/v1/experiments/{ExperimentId}', 'json', false, 'json', request);
}

model GetExperimentGroupRequest {
  experimentGroupId: string(name='ExperimentGroupId', example='3', position='Path'),
  instanceId: string(name='InstanceId', example='pairec-cn-abcdefg1234', position='Query'),
}

model GetExperimentGroupResponseBody = {
  config?: string(name='Config', example='{"RankBy": "Score"}'),
  crowdId?: string(name='CrowdId', example='3'),
  debugCrowdId?: string(name='DebugCrowdId', example='4'),
  debugUsers?: string(name='DebugUsers', example='1124512470******,1124512471******,1124512472******'),
  description?: string(name='Description', example='This is a test.'),
  distributionTimeDuration?: int32(name='DistributionTimeDuration', example='5'),
  distributionType?: string(name='DistributionType', example='UserId'),
  filter?: string(name='Filter', example='gender=female'),
  laboratoryId?: string(name='LaboratoryId', example='4'),
  layerId?: string(name='LayerId', example='3'),
  name?: string(name='Name', example='experiment_group1'),
  needAA?: boolean(name='NeedAA', example='true'),
  owner?: string(name='Owner', example='1124512470******'),
  requestId?: string(name='RequestId', description='Id of the request', example='BDB621CB-A81E-5D39-8793-39A365CBCC74'),
  reservedBuckets?: string(name='ReservedBuckets', example='1,2,3,4'),
  sceneId?: string(name='SceneId', example='1'),
  status?: string(name='Status', example='Offline'),
}

model GetExperimentGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetExperimentGroupResponseBody(name='body'),
}

async function getExperimentGroup(request: GetExperimentGroupRequest): GetExperimentGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetExperimentGroup', 'GET', '/api/v1/experimentgroups/{ExperimentGroupId}', 'json', false, 'json', request);
}

model GetFeatureConsistencyCheckJobRequest {
  featureConsistencyCheckJobId?: string(name='FeatureConsistencyCheckJobId', example='4', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId?: string(name='InstanceId', example='pairec-cn-********', position='Query'),
}

model GetFeatureConsistencyCheckJobResponseBody = {
  config?: string(name='Config', example='{}'),
  featureConsistencyCheckJobConfigId?: string(name='FeatureConsistencyCheckJobConfigId', example='5'),
  featureConsistencyCheckJobConfigName?: string(name='FeatureConsistencyCheckJobConfigName', example='feature_consistency_check_1'),
  gmtEndTime?: string(name='GmtEndTime', example='2021-12-15T23:24:33.132+08:00'),
  gmtStartTime?: string(name='GmtStartTime', example='2021-12-15T23:24:33.132+08:00'),
  logs?: [ string ](name='Logs'),
  requestId?: string(name='RequestId', example='A04CB8C0-E74A-5E83-BC61-64D153574EC7'),
  status?: string(name='Status', example='Running'),
}

model GetFeatureConsistencyCheckJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFeatureConsistencyCheckJobResponseBody(name='body'),
}

async function getFeatureConsistencyCheckJob(request: GetFeatureConsistencyCheckJobRequest): GetFeatureConsistencyCheckJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetFeatureConsistencyCheckJob', 'GET', '/api/v1/featureconsistencycheck/jobs/{FeatureConsistencyCheckJobId}', 'json', false, 'json', request);
}

model GetFeatureConsistencyCheckJobConfigRequest {
  featureConsistencyCheckJobConfigId: string(name='FeatureConsistencyCheckJobConfigId', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', example='pairec-cn-********', position='Query'),
}

model GetFeatureConsistencyCheckJobConfigResponseBody = {
  compareFeature?: boolean(name='CompareFeature', example='true'),
  easServiceName?: string(name='EasServiceName', example='eas_service_1'),
  easyRecPackagePath?: string(name='EasyRecPackagePath', example='oss://*******'),
  easyRecVersion?: string(name='EasyRecVersion', example='1.3.60'),
  featureDisplayExclude?: string(name='FeatureDisplayExclude', example='feature1,feature2'),
  featureLandingResourceId?: string(name='FeatureLandingResourceId', example='reso-********'),
  featureLandingResourceUri?: string(name='FeatureLandingResourceUri', example='mc_project_1'),
  featurePriority?: string(name='FeaturePriority', example='feature1,feature2,feature3'),
  fgJarVersion?: string(name='FgJarVersion', example='1.0.0'),
  fgJsonFileName?: string(name='FgJsonFileName', example='file.json'),
  generateZip?: boolean(name='GenerateZip', example='true'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-12-15T23:24:33.132+08:00'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-12-15T23:24:33.132+08:00'),
  itemIdField?: string(name='ItemIdField', example='item_id'),
  itemTable?: string(name='ItemTable', example='item_table'),
  itemTablePartitionField?: string(name='ItemTablePartitionField', example='ds'),
  itemTablePartitionFieldFormat?: string(name='ItemTablePartitionFieldFormat', example='yyyymmdd'),
  latestJobGmtSamplingEndTime?: string(name='LatestJobGmtSamplingEndTime', example='2021-12-15T23:24:33.132+08:00'),
  latestJobGmtSamplingStartTime?: string(name='LatestJobGmtSamplingStartTime', example='2021-12-15T23:24:33.132+08:00'),
  latestJobId?: string(name='LatestJobId', example='3'),
  name?: string(name='Name', example='feature_consistency_check1'),
  ossBucket?: string(name='OssBucket', example='oss_bucket_1'),
  ossResourceId?: string(name='OssResourceId', example='reso-********'),
  requestId?: string(name='RequestId', example='728C5E01-ABF6-5AA8-B9FC-B3BA05DECC77'),
  sampleRate?: string(name='SampleRate', example='0.89'),
  sceneId?: string(name='SceneId', example='3'),
  sceneName?: string(name='SceneName', example='scene1'),
  serviceId?: string(name='ServiceId', example='4'),
  serviceName?: string(name='ServiceName', example='service1'),
  status?: string(name='Status', example='Editable'),
  userIdField?: string(name='UserIdField', example='user_id'),
  userTable?: string(name='UserTable', example='user_table'),
  userTablePartitionField?: string(name='UserTablePartitionField', example='ds'),
  userTablePartitionFieldFormat?: string(name='UserTablePartitionFieldFormat', example='yyyymmdd'),
  workflowName?: string(name='WorkflowName', example='work_flow_1'),
}

model GetFeatureConsistencyCheckJobConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFeatureConsistencyCheckJobConfigResponseBody(name='body'),
}

async function getFeatureConsistencyCheckJobConfig(request: GetFeatureConsistencyCheckJobConfigRequest): GetFeatureConsistencyCheckJobConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetFeatureConsistencyCheckJobConfig', 'GET', '/api/v1/featureconsistencycheck/jobconfigs/{FeatureConsistencyCheckJobConfigId}', 'json', false, 'json', request);
}

model GetInstanceRequest {
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234', position='Path'),
}

model GetInstanceResponseBody = {
  chargeType?: string(name='ChargeType', example='Subscription'),
  commodityCode?: string(name='CommodityCode', example='airec_developers_public_cn'),
  config?: {
    dataManagements?: [ 
      {
        componentCode?: string(name='ComponentCode', example='storage'),
        meta?: map[string]any(name='Meta'),
        type?: string(name='Type', example='OSS'),
      }
    ](name='DataManagements'),
    engines?: [ 
      {
        componentCode?: string(name='ComponentCode', example='feature'),
        meta?: map[string]any(name='Meta'),
        type?: string(name='Type', example='Hologres'),
      }
    ](name='Engines'),
    monitors?: [ 
      {
        componentCode?: string(name='ComponentCode', example='featuresets'),
        meta?: map[string]any(name='Meta'),
        type?: string(name='Type', example='Platform'),
      }
    ](name='Monitors'),
  }(name='Config'),
  expiredTime?: string(name='ExpiredTime', example='2022-12-14 00:00:00.0'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2022-10-13 17:34:52.0'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2022-11-05 09:02:30.0'),
  instanceId?: string(name='InstanceId', example='pairec-test1'),
  regionId?: string(name='RegionId', example='cn-shenzhen'),
  requestId?: string(name='RequestId', example='728C5E01-ABF6-5AA8-B9FC-B3BA05DECC77'),
  status?: string(name='Status', example='Initializing'),
  type?: string(name='Type', example='basic'),
}

model GetInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInstanceResponseBody(name='body'),
}

async function getInstance(request: GetInstanceRequest): GetInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetInstance', 'GET', '/api/v1/instances/{InstanceId}', 'json', false, 'json', request);
}

model GetLaboratoryRequest {
  laboratoryId: string(name='LaboratoryId', example='3', position='Path'),
  instanceId: string(name='InstanceId', example='pairec-test1', position='Query'),
}

model GetLaboratoryResponseBody = {
  bucketCount?: int32(name='BucketCount', example='100'),
  bucketType?: string(name='BucketType', example='Filter'),
  buckets?: string(name='Buckets', example='1,2,3,10-20'),
  crowdId?: string(name='CrowdId', example='3'),
  debugCrowdId?: string(name='DebugCrowdId', example='3'),
  debugUsers?: string(name='DebugUsers', example='user1,user2,user3'),
  description?: string(name='Description', example='This is a test.'),
  environment?: string(name='Environment', example='Daily'),
  filter?: string(name='Filter', example='filter=xxx'),
  name?: string(name='Name', example='laboratory1'),
  requestId?: string(name='RequestId', description='Id of the request', example='1C0898E5-9220-5443-B2D9-445FF0688215'),
  sceneId?: string(name='SceneId', example='3'),
  status?: string(name='Status', example='Offline'),
  type?: string(name='Type', example='Base'),
}

model GetLaboratoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetLaboratoryResponseBody(name='body'),
}

async function getLaboratory(request: GetLaboratoryRequest): GetLaboratoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetLaboratory', 'GET', '/api/v1/laboratories/{LaboratoryId}', 'json', false, 'json', request);
}

model GetLayerRequest {
  layerId: string(name='LayerId', example='3', position='Path'),
  instanceId: string(name='InstanceId', example='pairec-cn-abcdefg1234', position='Query'),
}

model GetLayerResponseBody = {
  description?: string(name='Description', example='This is a test.'),
  laboratoryId?: string(name='LaboratoryId', example='3'),
  name?: string(name='Name', example='layer1'),
  requestId?: string(name='RequestId', description='Id of the request', example='EE97D06A-2AA0-5AD9-B6CF-8A267924D691'),
  sceneId?: string(name='SceneId', example='4'),
}

model GetLayerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetLayerResponseBody(name='body'),
}

async function getLayer(request: GetLayerRequest): GetLayerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetLayer', 'GET', '/api/v1/layers/{LayerId}', 'json', false, 'json', request);
}

model GetSceneRequest {
  sceneId?: string(name='SceneId', example='3', position='Path'),
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234', position='Query'),
}

model GetSceneResponseBody = {
  description?: string(name='Description', example='This is a test.'),
  flows?: [ 
    {
      flowCode?: string(name='FlowCode', example='liuliang1'),
      flowName?: string(name='FlowName', example='流量1'),
    }
  ](name='Flows'),
  name?: string(name='Name', example='scene1'),
  requestId?: string(name='RequestId', description='Id of the request', example='B8987BF7-6028-5B17-80E0-251B7BD67BBA'),
}

model GetSceneResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSceneResponseBody(name='body'),
}

async function getScene(request: GetSceneRequest): GetSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetScene', 'GET', '/api/v1/scenes/{SceneId}', 'json', false, 'json', request);
}

model GetSubCrowdRequest {
  crowdId: string(name='CrowdId', example='3', position='Path'),
  subCrowdId: string(name='SubCrowdId', example='4', position='Path'),
  instanceId: string(name='InstanceId', example='pairec-cn-abcdefg1234', position='Query'),
}

model GetSubCrowdResponseBody = {
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-12-15T23:24:33.132+08:00'),
  quantity?: string(name='Quantity', example='3'),
  requestId?: string(name='RequestId', description='Id of the request', example='01D22D08-BA20-5F35-8302-99115F288220'),
  source?: string(name='Source', example='ManualInput'),
  users?: string(name='Users', example='user1,user2'),
}

model GetSubCrowdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSubCrowdResponseBody(name='body'),
}

async function getSubCrowd(request: GetSubCrowdRequest): GetSubCrowdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetSubCrowd', 'GET', '/api/v1/crowds/{CrowdId}/subcrowds/{SubCrowdId}', 'json', false, 'json', request);
}

model ListCrowdUsersRequest {
  crowdId: string(name='CrowdId', example='1', position='Path'),
  instanceId: string(name='InstanceId', example='pairec-cn-abcdefg1234', position='Query'),
}

model ListCrowdUsersResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='F0AB6527-093F-5C44-B3BD-42C8C210C619'),
  totalCount?: long(name='TotalCount', example='3'),
  users?: [ string ](name='Users'),
}

model ListCrowdUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCrowdUsersResponseBody(name='body'),
}

async function listCrowdUsers(request: ListCrowdUsersRequest): ListCrowdUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListCrowdUsers', 'GET', '/api/v1/crowds/{CrowdId}/users', 'json', false, 'json', request);
}

model ListCrowdsRequest {
  instanceId: string(name='InstanceId', example='pairec-cn-abcdefg1234', position='Query'),
}

model ListCrowdsResponseBody = {
  crowds?: [ 
    {
      crowdId?: string(name='CrowdId', example='3'),
      description?: string(name='Description', example='This is a test.'),
      gmtCreateTime?: string(name='GmtCreateTime', example='2021-12-15T23:24:33.132+08:00'),
      label?: string(name='Label', example='os=android'),
      name?: string(name='Name', example='crowd1'),
      quantity?: string(name='Quantity', example='10'),
      source?: string(name='Source', example='ManualInput'),
      users?: string(name='Users', example='user1,user2'),
    }
  ](name='Crowds'),
  requestId?: string(name='RequestId', description='Id of the request', example='9763624B-5FBB-5E3A-9193-B1ADB554CEAE'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListCrowdsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCrowdsResponseBody(name='body'),
}

async function listCrowds(request: ListCrowdsRequest): ListCrowdsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListCrowds', 'GET', '/api/v1/crowds', 'json', false, 'json', request);
}

model ListExperimentGroupsRequest {
  instanceId: string(name='InstanceId', example='pairec-cn-abcdefg1234', position='Query'),
  layerId?: string(name='LayerId', example='3', position='Query'),
  status?: string(name='Status', example='Online', position='Query'),
}

model ListExperimentGroupsResponseBody = {
  experimentGroups?: [ 
    {
      config?: string(name='Config', example='{}'),
      crowdId?: string(name='CrowdId', example='3'),
      debugCrowdId?: string(name='DebugCrowdId', example='4'),
      debugUsers?: string(name='DebugUsers', example='1124512470******,1124512471******,1124512472******'),
      description?: string(name='Description', example='This is a test.'),
      distributionTimeDuration?: int32(name='DistributionTimeDuration', example='5'),
      distributionType?: string(name='DistributionType', example='UserId'),
      experimentGroupId?: string(name='ExperimentGroupId', example='3'),
      filter?: string(name='Filter', example='gender=female'),
      laboratoryId?: string(name='LaboratoryId', example='4'),
      layerId?: string(name='LayerId', example='3'),
      name?: string(name='Name', example='experiment_group1'),
      needAA?: boolean(name='NeedAA', example='true'),
      owner?: string(name='Owner', example='1124512470******'),
      reservedBuckets?: string(name='ReservedBuckets', example='1,2,3,4'),
      sceneId?: string(name='SceneId', example='1'),
      status?: string(name='Status', example='Offline'),
    }
  ](name='ExperimentGroups'),
  requestId?: string(name='RequestId', description='Id of the request', example='59CE7EC6-F268-5D71-9215-32922CC50D72'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListExperimentGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListExperimentGroupsResponseBody(name='body'),
}

async function listExperimentGroups(request: ListExperimentGroupsRequest): ListExperimentGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListExperimentGroups', 'GET', '/api/v1/experimentgroups', 'json', false, 'json', request);
}

model ListExperimentsRequest {
  experimentGroupId?: string(name='ExperimentGroupId', example='3', position='Query'),
  instanceId: string(name='InstanceId', example='pairec-test1', position='Query'),
  query?: string(name='Query', example='experiment_test1', position='Query'),
  status?: string(name='Status', example='Offline', position='Query'),
}

model ListExperimentsResponseBody = {
  experiments?: [ 
    {
      aliasExperimentId?: string(name='AliasExperimentId', example='L1#EG1#E1'),
      buckets?: string(name='Buckets', example='1,2,3'),
      config?: string(name='Config', example='{}'),
      debugCrowdId?: string(name='DebugCrowdId', example='3'),
      debugUsers?: string(name='DebugUsers', example='uid1,uid2,uid3'),
      description?: string(name='Description', example='This is a test.'),
      experimentGroupId?: string(name='ExperimentGroupId', example='3'),
      experimentId?: string(name='ExperimentId', example='3'),
      flowPercent?: int32(name='FlowPercent', example='100'),
      gmtCreateTime?: string(name='GmtCreateTime', example='2021-12-15T23:24:33.132+08:00'),
      gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-12-15T23:24:33.132+08:00'),
      laboratoryId?: string(name='LaboratoryId', example='3'),
      layerId?: string(name='LayerId', example='3'),
      name?: string(name='Name', example='experiment_test1'),
      sceneId?: string(name='SceneId', example='3'),
      status?: string(name='Status', example='Offline'),
      type?: string(name='Type', example='Baseline'),
    }
  ](name='Experiments'),
  requestId?: string(name='RequestId', description='Id of the request', example='68075085-1A7D-55C2-B51D-7AD9B02A6DD6'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListExperimentsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListExperimentsResponseBody(name='body'),
}

async function listExperiments(request: ListExperimentsRequest): ListExperimentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListExperiments', 'GET', '/api/v1/experiments', 'json', false, 'json', request);
}

model ListFeatureConsistencyCheckJobConfigsRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', example='pairec-cn-********', position='Query'),
  order?: string(name='Order', example='ASC', position='Query'),
  pageNumber?: string(name='PageNumber', example='1', position='Query'),
  pageSize?: string(name='PageSize', example='10', position='Query'),
  sortBy?: string(name='SortBy', example='GmtCreateTime', position='Query'),
}

model ListFeatureConsistencyCheckJobConfigsResponseBody = {
  featureConsistencyCheckConfigs?: [ 
    {
      compareFeature?: boolean(name='CompareFeature', example='true'),
      easServiceName?: string(name='EasServiceName', example='eas_service_1'),
      easyRecPackagePath?: string(name='EasyRecPackagePath', example='oss://*******'),
      easyRecVersion?: string(name='EasyRecVersion', example='1.3.60'),
      featureConsistencyCheckJobConfigId?: string(name='FeatureConsistencyCheckJobConfigId', example='3'),
      featureDisplayExclude?: string(name='FeatureDisplayExclude', example='feature1,feature2'),
      featureLandingResourceId?: string(name='FeatureLandingResourceId', example='reso-********'),
      featureLandingResourceUri?: string(name='FeatureLandingResourceUri', example='mc_project_1'),
      featurePriority?: string(name='FeaturePriority', example='feature1,feature2,feature3'),
      fgJarVersion?: string(name='FgJarVersion', example='1.0.0'),
      fgJsonFileName?: string(name='FgJsonFileName', example='file.json'),
      generateZip?: boolean(name='GenerateZip', example='true'),
      gmtCreateTime?: string(name='GmtCreateTime', example='2021-12-15T23:24:33.132+08:00'),
      gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-12-15T23:24:33.132+08:00'),
      itemIdField?: string(name='ItemIdField', example='item_id'),
      itemTable?: string(name='ItemTable', example='item_table'),
      itemTablePartitionField?: string(name='ItemTablePartitionField', example='ds'),
      itemTablePartitionFieldFormat?: string(name='ItemTablePartitionFieldFormat', example='yyyymmdd'),
      latestJobGmtSamplingEndTime?: string(name='LatestJobGmtSamplingEndTime', example='2021-12-15T23:24:33.132+08:00'),
      latestJobGmtSamplingStartTime?: string(name='LatestJobGmtSamplingStartTime', example='2021-12-15T23:24:33.132+08:00'),
      latestJobId?: string(name='LatestJobId', example='3'),
      name?: string(name='Name', example='feature_consistency_check1'),
      ossBucket?: string(name='OssBucket', example='oss_bucket_1'),
      ossResourceId?: string(name='OssResourceId', example='reso-********'),
      sampleRate?: string(name='SampleRate', example='0.89'),
      sceneId?: string(name='SceneId', example='3'),
      sceneName?: string(name='SceneName', example='scene1'),
      serviceId?: string(name='ServiceId', example='4'),
      serviceName?: string(name='ServiceName', example='service1'),
      status?: string(name='Status', example='Editable'),
      userIdField?: string(name='UserIdField', example='user_id'),
      userTable?: string(name='UserTable', example='user_table'),
      userTablePartitionField?: string(name='UserTablePartitionField', example='ds'),
      userTablePartitionFieldFormat?: string(name='UserTablePartitionFieldFormat', example='yyyymmdd'),
      workflowName?: string(name='WorkflowName', example='work_flow_1'),
    }
  ](name='FeatureConsistencyCheckConfigs'),
  requestId?: string(name='RequestId', example='FCF741D8-9C30-578E-807F-B935487DB34A'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListFeatureConsistencyCheckJobConfigsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFeatureConsistencyCheckJobConfigsResponseBody(name='body'),
}

async function listFeatureConsistencyCheckJobConfigs(request: ListFeatureConsistencyCheckJobConfigsRequest): ListFeatureConsistencyCheckJobConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListFeatureConsistencyCheckJobConfigs', 'GET', '/api/v1/featureconsistencycheck/jobconfigs', 'json', false, 'json', request);
}

model ListFeatureConsistencyCheckJobFeatureReportsRequest {
  featureConsistencyCheckJobId: string(name='FeatureConsistencyCheckJobId', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', example='pairec-cn-********', position='Query'),
  logItemId: string(name='LogItemId', example='9010', position='Query'),
  logRequestId: string(name='LogRequestId', example='F7AC05FF-EDE7-5C2B-B9AE-33D6DF4178BA', position='Query'),
  logUserId: string(name='LogUserId', example='1010', position='Query'),
}

model ListFeatureConsistencyCheckJobFeatureReportsResponseBody = {
  dataPath?: string(name='DataPath', example='https://********'),
  ossPath?: string(name='OssPath', example='oss://********'),
  reportsOfFeatureDiff?: [ 
    {
      featureName?: string(name='FeatureName', example='gender'),
      logItemId?: string(name='LogItemId', example='9010'),
      logRequestId?: string(name='LogRequestId', example='F7AC05FF-EDE7-5C2B-B9AE-33D6DF4178BA'),
      logUserId?: string(name='LogUserId', example='1010'),
      offlineValue?: string(name='OfflineValue', example='male'),
      onlineValue?: string(name='OnlineValue', example='male'),
    }
  ](name='ReportsOfFeatureDiff'),
  requestId?: string(name='RequestId', example='BBD41FBF-E75C-551A-92FA-CAD654AA006F'),
}

model ListFeatureConsistencyCheckJobFeatureReportsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFeatureConsistencyCheckJobFeatureReportsResponseBody(name='body'),
}

async function listFeatureConsistencyCheckJobFeatureReports(request: ListFeatureConsistencyCheckJobFeatureReportsRequest): ListFeatureConsistencyCheckJobFeatureReportsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListFeatureConsistencyCheckJobFeatureReports', 'GET', '/api/v1/featureconsistencycheck/jobs/{FeatureConsistencyCheckJobId}/featurereports', 'json', false, 'json', request);
}

model ListFeatureConsistencyCheckJobScoreReportsRequest {
  featureConsistencyCheckJobId: string(name='FeatureConsistencyCheckJobId', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  excludeRequestIds?: [ string ](name='ExcludeRequestIds', shrink='json', position='Query'),
  instanceId?: string(name='InstanceId', example='pairec-cn-********', position='Query'),
}

model ListFeatureConsistencyCheckJobScoreReportsResponseBody = {
  dataPath?: string(name='DataPath', example='http://*******'),
  ossPath?: string(name='OssPath', example='oss://********'),
  reportsOfScoreDiff?: [ 
    {
      logItemId?: string(name='LogItemId', example='4'),
      logRequestId?: string(name='LogRequestId', example='323'),
      logUserId?: string(name='LogUserId', example='3'),
      scoreDiff?: string(name='ScoreDiff', example='0.00000234'),
      scoreDiffDetail?: string(name='ScoreDiffDetail', example='{}'),
    }
  ](name='ReportsOfScoreDiff'),
  requestId?: string(name='RequestId', example='F0AB6527-093F-5C44-B3BD-42C8C210C619'),
}

model ListFeatureConsistencyCheckJobScoreReportsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFeatureConsistencyCheckJobScoreReportsResponseBody(name='body'),
}

async function listFeatureConsistencyCheckJobScoreReports(request: ListFeatureConsistencyCheckJobScoreReportsRequest): ListFeatureConsistencyCheckJobScoreReportsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListFeatureConsistencyCheckJobScoreReports', 'GET', '/api/v1/featureconsistencycheck/jobs/{FeatureConsistencyCheckJobId}/scorereports', 'json', false, 'json', request);
}

model ListFeatureConsistencyCheckJobsRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', example='pairec-cn-********', position='Query'),
  order?: string(name='Order', example='ASC', position='Query'),
  pageNumber?: string(name='PageNumber', example='1', position='Query'),
  pageSize?: string(name='PageSize', example='10', position='Query'),
  sortBy?: string(name='SortBy', example='GmtCreateTime', position='Query'),
  status?: string(name='Status', example='Running', position='Query'),
}

model ListFeatureConsistencyCheckJobsResponseBody = {
  featureConsistencyCheckJobs?: [ 
    {
      config?: string(name='Config', example='{}'),
      featureConsistencyCheckJobConfigId?: string(name='FeatureConsistencyCheckJobConfigId', example='5'),
      featureConsistencyCheckJobConfigName?: string(name='FeatureConsistencyCheckJobConfigName', example='feature_consistency_check_1'),
      featureConsistencyCheckJobId?: string(name='FeatureConsistencyCheckJobId', example='4'),
      gmtEndTime?: string(name='GmtEndTime', example='2021-12-15T23:24:33.132+08:00'),
      gmtStartTime?: string(name='GmtStartTime', example='2021-12-15T23:24:33.132+08:00'),
      logs?: [ string ](name='Logs'),
      status?: string(name='Status', example='Running'),
    }
  ](name='FeatureConsistencyCheckJobs'),
  requestId?: string(name='RequestId', example='A04CB8C0-E74A-5E83-BC61-64D153574EC7'),
  totalCount?: string(name='TotalCount', example='10'),
}

model ListFeatureConsistencyCheckJobsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFeatureConsistencyCheckJobsResponseBody(name='body'),
}

async function listFeatureConsistencyCheckJobs(request: ListFeatureConsistencyCheckJobsRequest): ListFeatureConsistencyCheckJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListFeatureConsistencyCheckJobs', 'GET', '/api/v1/featureconsistencycheck/jobs', 'json', false, 'json', request);
}

model ListInstancesRequest {
  instanceId?: string(name='InstanceId', example='pairec-test1', position='Query'),
  order?: string(name='Order', example='Desc', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='50', position='Query'),
  sortBy?: string(name='SortBy', example='Type', position='Query'),
  type?: string(name='Type', example='basic', position='Query'),
}

model ListInstancesResponseBody = {
  instances?: [ 
    {
      chargeType?: string(name='ChargeType', example='Subscription'),
      commodityCode?: string(name='CommodityCode', example='airec_developers_public_cn'),
      config?: {
        dataManagements?: [ 
          {
            componentCode?: string(name='ComponentCode', example='storage'),
            meta?: map[string]any(name='Meta'),
            type?: string(name='Type', example='OSS'),
          }
        ](name='DataManagements'),
        engines?: [ 
          {
            componentCode?: string(name='ComponentCode', example='feature'),
            meta?: map[string]any(name='Meta'),
            type?: string(name='Type', example='Hologres'),
          }
        ](name='Engines'),
        monitors?: [ 
          {
            componentCode?: string(name='ComponentCode', example='featuresets'),
            meta?: map[string]any(name='Meta'),
            type?: string(name='Type', example='Platform'),
          }
        ](name='Monitors'),
      }(name='Config'),
      expiredTime?: string(name='ExpiredTime', example='2022-12-14 00:00:00.0'),
      gmtCreateTime?: string(name='GmtCreateTime', example='2022-10-13 17:34:52.0'),
      gmtModifiedTime?: string(name='GmtModifiedTime', example='2022-11-05 09:02:30.0'),
      instanceId?: string(name='InstanceId', example='pairec-test1'),
      regionId?: string(name='RegionId', example='cn-shenzhen'),
      status?: string(name='Status', example='Initializing'),
      type?: string(name='Type', example='basic'),
    }
  ](name='Instances'),
  requestId?: string(name='RequestId', example='BDB621CB-A81E-5D39-8793-39A365CBCC74'),
  totalCount?: int32(name='TotalCount', example='7'),
}

model ListInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstancesResponseBody(name='body'),
}

async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInstances', 'GET', '/api/v1/instances', 'json', false, 'json', request);
}

model ListLaboratoriesRequest {
  environment?: string(name='Environment', example='Daily', position='Query'),
  instanceId: string(name='InstanceId', example='pairec-test1', position='Query'),
  sceneId: string(name='SceneId', example='3', position='Query'),
  status?: string(name='Status', example='Offline', position='Query'),
}

model ListLaboratoriesResponseBody = {
  laboratories?: [ 
    {
      bucketCount?: int32(name='BucketCount', example='100'),
      bucketType?: string(name='BucketType', example='Filter'),
      buckets?: string(name='Buckets', example='1,2,3,10-20'),
      crowdId?: string(name='CrowdId', example='3'),
      debugCrowdId?: string(name='DebugCrowdId', example='3'),
      debugUsers?: string(name='DebugUsers', example='user1,user2,user3'),
      description?: string(name='Description', example='This is a test.'),
      environment?: string(name='Environment', example='Daily'),
      filter?: string(name='Filter', example='filter=xxx'),
      laboratoryId?: string(name='LaboratoryId', example='3'),
      name?: string(name='Name', example='laboratory1'),
      sceneId?: string(name='SceneId', example='3'),
      status?: string(name='Status', example='Offline'),
      type?: string(name='Type', example='Base'),
    }
  ](name='Laboratories'),
  requestId?: string(name='RequestId', description='Id of the request', example='1C0898E5-9220-5443-B2D9-445FF0688215'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListLaboratoriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListLaboratoriesResponseBody(name='body'),
}

async function listLaboratories(request: ListLaboratoriesRequest): ListLaboratoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListLaboratories', 'GET', '/api/v1/laboratories', 'json', false, 'json', request);
}

model ListLayersRequest {
  instanceId: string(name='InstanceId', example='pairec-cn-abcdefg1234', position='Query'),
  laboratoryId: string(name='LaboratoryId', example='3', position='Query'),
}

model ListLayersResponseBody = {
  layers?: [ 
    {
      description?: string(name='Description', example='This is a test.'),
      laboratoryId?: string(name='LaboratoryId', example='3'),
      layerId?: string(name='LayerId', example='3'),
      name?: string(name='Name', example='layer1'),
      sceneId?: string(name='SceneId', example='3'),
    }
  ](name='Layers'),
  requestId?: string(name='RequestId', description='Id of the request', example='518C64F6-DFF7-11ED-85B0-00163E14B3D1'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListLayersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListLayersResponseBody(name='body'),
}

async function listLayers(request: ListLayersRequest): ListLayersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListLayers', 'GET', '/api/v1/layers', 'json', false, 'json', request);
}

model ListParamsRequest {
  environment?: string(name='Environment', example='Daily', position='Query'),
  instanceId: string(name='InstanceId', example='pairec-cn-abcdefg1234', position='Query'),
  name?: string(name='Name', example='home', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='50', position='Query'),
  sceneId: string(name='SceneId', example='3', position='Query'),
}

model ListParamsResponseBody = {
  params?: [ 
    {
      environment?: string(name='Environment', example='Daily'),
      gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-12-15T23:24:33.132+08:00'),
      name?: string(name='Name', example='home'),
      paramId?: string(name='ParamId', example='4'),
      value?: string(name='Value', example='house'),
    }
  ](name='Params'),
  requestId?: string(name='RequestId', description='Id of the request', example='A2D07551-38DA-531E-9B22-877D1D86A579'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListParamsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListParamsResponseBody(name='body'),
}

async function listParams(request: ListParamsRequest): ListParamsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListParams', 'GET', '/api/v1/params', 'json', false, 'json', request);
}

model ListScenesRequest {
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234', position='Query'),
  name?: string(name='Name', example='scene1', position='Query'),
}

model ListScenesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='B8987BF7-6028-5B17-80E0-251B7BD67BBA'),
  scenes?: [ 
    {
      description?: string(name='Description', example='This is a test.'),
      flows?: [ 
        {
          flowCode?: string(name='FlowCode', example='liuliang1'),
          flowName?: string(name='FlowName', example='流量1'),
        }
      ](name='Flows'),
      name?: string(name='Name', example='scene1'),
      sceneId?: string(name='SceneId', example='3'),
    }
  ](name='Scenes'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListScenesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListScenesResponseBody(name='body'),
}

async function listScenes(request: ListScenesRequest): ListScenesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListScenes', 'GET', '/api/v1/scenes', 'json', false, 'json', request);
}

model ListSubCrowdsRequest {
  crowdId: string(name='CrowdId', example='3', position='Path'),
  instanceId: string(name='InstanceId', example='pairec-cn-abcdefg1234', position='Query'),
}

model ListSubCrowdsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='C5AEB79E-FAA4-5DCE-8CD7-1CAF549ECC3E'),
  subCrowds?: [ 
    {
      gmtCreateTime?: string(name='GmtCreateTime', example='2021-12-15T23:24:33.132+08:00'),
      quantity?: int32(name='Quantity', example='2'),
      source?: string(name='Source', example='ManualInput'),
      subCrowdId?: string(name='SubCrowdId', example='3'),
      users?: string(name='Users', example='user1,user2'),
    }
  ](name='SubCrowds'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListSubCrowdsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSubCrowdsResponseBody(name='body'),
}

async function listSubCrowds(request: ListSubCrowdsRequest): ListSubCrowdsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSubCrowds', 'GET', '/api/v1/crowds/{CrowdId}/subcrowds', 'json', false, 'json', request);
}

model OfflineExperimentRequest {
  experimentId: string(name='ExperimentId', example='3', position='Path'),
  instanceId: string(name='InstanceId', example='pairec-cn-abcdefg1234', position='Body'),
}

model OfflineExperimentResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='872951C9-7755-5FA1-AACD-7F9375A6D27A'),
}

model OfflineExperimentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OfflineExperimentResponseBody(name='body'),
}

async function offlineExperiment(request: OfflineExperimentRequest): OfflineExperimentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'OfflineExperiment', 'POST', '/api/v1/experiments/{ExperimentId}/action/offline', 'json', false, 'json', request);
}

model OfflineExperimentGroupRequest {
  experimentGroupId: string(name='ExperimentGroupId', example='3', position='Path'),
  instanceId: string(name='InstanceId', example='pairec-cn-abcdefg1234', position='Body'),
}

model OfflineExperimentGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='518C64F6-DFF7-11ED-85B0-00163E14B3D1'),
}

model OfflineExperimentGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OfflineExperimentGroupResponseBody(name='body'),
}

async function offlineExperimentGroup(request: OfflineExperimentGroupRequest): OfflineExperimentGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'OfflineExperimentGroup', 'POST', '/api/v1/experimentgroups/{ExperimentGroupId}/action/offline', 'json', false, 'json', request);
}

model OfflineLaboratoryRequest {
  laboratoryId: string(name='LaboratoryId', example='3', position='Path'),
  instanceId: string(name='InstanceId', example='pairec-cn-abcdefg1234', position='Body'),
}

model OfflineLaboratoryResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='59CE7EC6-F268-5D71-9215-32922CC50D72'),
}

model OfflineLaboratoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OfflineLaboratoryResponseBody(name='body'),
}

async function offlineLaboratory(request: OfflineLaboratoryRequest): OfflineLaboratoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'OfflineLaboratory', 'POST', '/api/v1/laboratories/{LaboratoryId}/action/offline', 'json', false, 'json', request);
}

model OnlineExperimentRequest {
  experimentId: string(name='ExperimentId', example='3', position='Path'),
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234', position='Body'),
}

model OnlineExperimentResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='6CF1E160-3F36-5E73-A170-C75504F05BBC'),
}

model OnlineExperimentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OnlineExperimentResponseBody(name='body'),
}

async function onlineExperiment(request: OnlineExperimentRequest): OnlineExperimentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'OnlineExperiment', 'POST', '/api/v1/experiments/{ExperimentId}/action/online', 'json', false, 'json', request);
}

model OnlineExperimentGroupRequest {
  experimentGroupId: string(name='ExperimentGroupId', example='3', position='Path'),
  instanceId: string(name='InstanceId', example='pairec-cn-abcdefg1234', position='Body'),
}

model OnlineExperimentGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='47F761ED-BE4E-51A6-B678-78E1490DF313'),
}

model OnlineExperimentGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OnlineExperimentGroupResponseBody(name='body'),
}

async function onlineExperimentGroup(request: OnlineExperimentGroupRequest): OnlineExperimentGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'OnlineExperimentGroup', 'POST', '/api/v1/experimentgroups/{ExperimentGroupId}/action/online', 'json', false, 'json', request);
}

model OnlineLaboratoryRequest {
  laboratoryId: string(name='LaboratoryId', example='3', position='Path'),
  instanceId: string(name='InstanceId', example='pairec-test1', position='Body'),
}

model OnlineLaboratoryResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='8C27790E-CCA5-56BB-BA17-646295DEC0A2'),
}

model OnlineLaboratoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OnlineLaboratoryResponseBody(name='body'),
}

async function onlineLaboratory(request: OnlineLaboratoryRequest): OnlineLaboratoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'OnlineLaboratory', 'POST', '/api/v1/laboratories/{LaboratoryId}/action/online', 'json', false, 'json', request);
}

model PushAllExperimentRequest {
  experimentId: string(name='ExperimentId', example='3', position='Path'),
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234', position='Body'),
}

model PushAllExperimentResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='74D958EF-3598-56FA-8296-FF1575CE43DF'),
}

model PushAllExperimentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PushAllExperimentResponseBody(name='body'),
}

async function pushAllExperiment(request: PushAllExperimentRequest): PushAllExperimentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PushAllExperiment', 'POST', '/api/v1/experiments/{ExperimentId}/action/pushall', 'json', false, 'json', request);
}

model SyncFeatureConsistencyCheckJobReplayLogRequest {
  regionId?: string(name='RegionId', position='Host'),
  contextFeatures: string(name='ContextFeatures', example='[{\\"Value\\":{\\"FloatFeature\\":0.1}}]', position='Body'),
  featureConsistencyCheckJobConfigId: string(name='FeatureConsistencyCheckJobConfigId', example='3', position='Body'),
  generatedFeatures: string(name='GeneratedFeatures', example='week_day:1 | userid:3 | itemid:9001 | cate:cat1 | click_5_seq__cate:cat1', position='Body'),
  instanceId: string(name='InstanceId', example='pairec-cn-********', position='Body'),
  logItemId: string(name='LogItemId', example='9010', position='Body'),
  logRequestId: string(name='LogRequestId', example='728C5E01-ABF6-5AA8-B9FC-B3BA05DECC77', position='Body'),
  logRequestTime: long(name='LogRequestTime', example='1693900981465', position='Body'),
  logUserId: string(name='LogUserId', example='1010', position='Body'),
  rawFeatures: string(name='RawFeatures', position='Body'),
  sceneName: string(name='SceneName', example='video-feed', position='Body'),
}

model SyncFeatureConsistencyCheckJobReplayLogResponseBody = {
  requestId?: string(name='RequestId', example='C7D0B48F-0105-52B9-B60A-FA7606E2234D'),
}

model SyncFeatureConsistencyCheckJobReplayLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SyncFeatureConsistencyCheckJobReplayLogResponseBody(name='body'),
}

async function syncFeatureConsistencyCheckJobReplayLog(request: SyncFeatureConsistencyCheckJobReplayLogRequest): SyncFeatureConsistencyCheckJobReplayLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SyncFeatureConsistencyCheckJobReplayLog', 'POST', '/api/v1/featureconsistencycheck/jobs/action/syncreplaylog', 'json', false, 'json', request);
}

model TerminateFeatureConsistencyCheckJobRequest {
  featureConsistencyCheckJobId: string(name='FeatureConsistencyCheckJobId', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', example='pairec-cn-********', position='Body'),
}

model TerminateFeatureConsistencyCheckJobResponseBody = {
  requestId?: string(name='RequestId', example='A6C01890-54CA-5C49-BC91-AD85A98E4A98'),
}

model TerminateFeatureConsistencyCheckJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TerminateFeatureConsistencyCheckJobResponseBody(name='body'),
}

async function terminateFeatureConsistencyCheckJob(request: TerminateFeatureConsistencyCheckJobRequest): TerminateFeatureConsistencyCheckJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'TerminateFeatureConsistencyCheckJob', 'POST', '/api/v1/featureconsistencycheck/jobs/{FeatureConsistencyCheckJobId}/action/terminate', 'json', false, 'json', request);
}

model UpdateCrowdRequest {
  crowdId: string(name='CrowdId', example='3', position='Path'),
  description: string(name='Description', example='This is a test.', position='Body'),
  instanceId: string(name='InstanceId', example='pairec-test1', position='Body'),
  name: string(name='Name', example='xx人群', position='Body'),
}

model UpdateCrowdResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='8C27790E-CCA5-56BB-BA17-646295DEC0A2'),
}

model UpdateCrowdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateCrowdResponseBody(name='body'),
}

async function updateCrowd(request: UpdateCrowdRequest): UpdateCrowdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateCrowd', 'PUT', '/api/v1/crowds/{CrowdId}', 'json', false, 'json', request);
}

model UpdateExperimentRequest {
  experimentId: string(name='ExperimentId', example='3', position='Path'),
  config?: string(name='Config', example='{"RankBy": "Score"}', position='Body'),
  debugCrowdId?: string(name='DebugCrowdId', example='3', position='Body'),
  debugUsers?: string(name='DebugUsers', example='1124512470******,1124512471******,1124512472******', position='Body'),
  description: string(name='Description', example='This is a test.', position='Body'),
  flowPercent?: int32(name='FlowPercent', example='100', position='Body'),
  instanceId: string(name='InstanceId', example='pairec-cn-abcdefg1234', position='Body'),
  name: string(name='Name', example='experiment_test', position='Body'),
  type: string(name='Type', example='Baseline', position='Body'),
}

model UpdateExperimentResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='A760D972-1475-58C0-BBB3-92B5FB08904F'),
}

model UpdateExperimentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateExperimentResponseBody(name='body'),
}

async function updateExperiment(request: UpdateExperimentRequest): UpdateExperimentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateExperiment', 'PUT', '/api/v1/experiments/{ExperimentId}', 'json', false, 'json', request);
}

model UpdateExperimentGroupRequest {
  experimentGroupId: string(name='ExperimentGroupId', example='3', position='Path'),
  config?: string(name='Config', example='{"RankBy": "Score"}', position='Body'),
  crowdId?: string(name='CrowdId', example='3', position='Body'),
  debugCrowdId?: string(name='DebugCrowdId', example='3', position='Body'),
  debugUsers?: string(name='DebugUsers', example='user1,user2,user3', position='Body'),
  description: string(name='Description', example='This is a test.', position='Body'),
  distributionTimeDuration?: int32(name='DistributionTimeDuration', example='3', position='Body'),
  distributionType?: string(name='DistributionType', example='UserId', position='Body'),
  filter?: string(name='Filter', example='gender=male', position='Body'),
  instanceId: string(name='InstanceId', example='pairec-cn-abcdefg1234', position='Body'),
  layerId: string(name='LayerId', example='3', position='Body'),
  name: string(name='Name', example='experiment_group1', position='Body'),
  needAA?: boolean(name='NeedAA', example='true', position='Body'),
  reservcedBuckets?: string(name='ReservcedBuckets', example='1,2,3', position='Body'),
}

model UpdateExperimentGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='F7AC05FF-EDE7-5C2B-B9AE-33D6DF4178BA'),
}

model UpdateExperimentGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateExperimentGroupResponseBody(name='body'),
}

async function updateExperimentGroup(request: UpdateExperimentGroupRequest): UpdateExperimentGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateExperimentGroup', 'PUT', '/api/v1/experimentgroups/{ExperimentGroupId}', 'json', false, 'json', request);
}

model UpdateFeatureConsistencyCheckJobConfigRequest {
  featureConsistencyCheckJobConfigId: string(name='FeatureConsistencyCheckJobConfigId', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  compareFeature: boolean(name='CompareFeature', example='true', position='Body'),
  easServiceName: string(name='EasServiceName', example='service_123', position='Body'),
  easyRecPackagePath?: string(name='EasyRecPackagePath', example='oss://********', position='Body'),
  easyRecVersion?: string(name='EasyRecVersion', example='1.3.60', position='Body'),
  featureDisplayExclude?: string(name='FeatureDisplayExclude', example='feature1,feature2', position='Body'),
  featureLandingResourceId: string(name='FeatureLandingResourceId', example='reso-********', position='Body'),
  featurePriority?: string(name='FeaturePriority', example='feature1,feature2,feature3', position='Body'),
  fgJarVersion?: string(name='FgJarVersion', example='1.0.0', position='Body'),
  fgJsonFileName: string(name='FgJsonFileName', example='file.json', position='Body'),
  generateZip: boolean(name='GenerateZip', example='true', position='Body'),
  instanceId: string(name='InstanceId', example='pairec-cn-********', position='Body'),
  itemIdField: string(name='ItemIdField', example='item_id', position='Body'),
  itemTable: string(name='ItemTable', example='item_table', position='Body'),
  itemTablePartitionField: string(name='ItemTablePartitionField', example='ds', position='Body'),
  itemTablePartitionFieldFormat: string(name='ItemTablePartitionFieldFormat', example='yyyymmdd', position='Body'),
  name: string(name='Name', example='feature_consistency_check1', position='Body'),
  ossResourceId?: string(name='OssResourceId', example='reso-********', position='Body'),
  sampleRate: double(name='SampleRate', example='0.89', position='Body'),
  sceneId: string(name='SceneId', example='3', position='Body'),
  serviceId?: string(name='ServiceId', example='4', position='Body'),
  userIdField: string(name='UserIdField', example='user_id', position='Body'),
  userTable: string(name='UserTable', example='user_table', position='Body'),
  userTablePartitionField: string(name='UserTablePartitionField', example='ds', position='Body'),
  userTablePartitionFieldFormat: string(name='UserTablePartitionFieldFormat', example='yyyymmdd', position='Body'),
  workflowName?: string(name='WorkflowName', example='work_flow_1', position='Body'),
}

model UpdateFeatureConsistencyCheckJobConfigResponseBody = {
  requestId?: string(name='RequestId', example='A04CB8C0-E74A-5E83-BC61-64D153574EC7'),
}

model UpdateFeatureConsistencyCheckJobConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateFeatureConsistencyCheckJobConfigResponseBody(name='body'),
}

async function updateFeatureConsistencyCheckJobConfig(request: UpdateFeatureConsistencyCheckJobConfigRequest): UpdateFeatureConsistencyCheckJobConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateFeatureConsistencyCheckJobConfig', 'PUT', '/api/v1/featureconsistencycheck/jobconfigs/{FeatureConsistencyCheckJobConfigId}', 'json', false, 'json', request);
}

model UpdateLaboratoryRequest {
  laboratoryId: string(name='LaboratoryId', example='3', position='Path'),
  bucketCount?: int32(name='BucketCount', example='24', position='Body'),
  bucketType: string(name='BucketType', example='Filter', position='Body'),
  buckets?: string(name='Buckets', example='1,2,3,10-20', position='Body'),
  debugCrowdId?: string(name='DebugCrowdId', example='3', position='Body'),
  debugUsers?: string(name='DebugUsers', example='1124512470******,1124512471******,1124512472******', position='Body'),
  description?: string(name='Description', example='This is a test.', position='Body'),
  environment?: string(name='Environment', example='Daily', position='Body'),
  filter?: string(name='Filter', example='filter=xxx', position='Body'),
  instanceId: string(name='InstanceId', example='pairec-test1', position='Body'),
  name: string(name='Name', example='laboratory1', position='Body'),
  type: string(name='Type', example='Base', position='Body'),
}

model UpdateLaboratoryResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='A04CB8C0-E74A-5E83-BC61-64D153574EC7'),
}

model UpdateLaboratoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateLaboratoryResponseBody(name='body'),
}

async function updateLaboratory(request: UpdateLaboratoryRequest): UpdateLaboratoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateLaboratory', 'PUT', '/api/v1/laboratories/{LaboratoryId}', 'json', false, 'json', request);
}

model UpdateLayerRequest {
  layerId: string(name='LayerId', example='3', position='Path'),
  description: string(name='Description', example='This is a test.', position='Body'),
  instanceId: string(name='InstanceId', example='pairec-test1', position='Body'),
  name: string(name='Name', example='layer1', position='Body'),
}

model UpdateLayerResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='0EA9215E-EC21-53AB-B8D9-D3DEA90D040A'),
}

model UpdateLayerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateLayerResponseBody(name='body'),
}

async function updateLayer(request: UpdateLayerRequest): UpdateLayerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateLayer', 'PUT', '/api/v1/layers/{LayerId}', 'json', false, 'json', request);
}

model UpdateParamRequest {
  paramId?: string(name='ParamId', example='3', position='Path'),
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234', position='Body'),
  value?: string(name='Value', example='house', position='Body'),
}

model UpdateParamResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='BBD41FBF-E75C-551A-92FA-CAD654AA006F'),
}

model UpdateParamResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateParamResponseBody(name='body'),
}

async function updateParam(request: UpdateParamRequest): UpdateParamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateParam', 'PUT', '/api/v1/params/{ParamId}', 'json', false, 'json', request);
}

model UpdateSceneRequest {
  sceneId?: string(name='SceneId', example='3', position='Path'),
  description?: string(name='Description', example='This is a test.', position='Body'),
  flows?: [ 
    {
      flowCode?: string(name='FlowCode', example='liuliang1'),
      flowName?: string(name='FlowName', example='流量1'),
    }
  ](name='Flows', position='Body'),
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234', position='Body'),
  name?: string(name='Name', example='scene1', position='Body'),
}

model UpdateSceneResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='FC17887E-3C82-5096-8AA6-F4C2E7417245'),
}

model UpdateSceneResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSceneResponseBody(name='body'),
}

async function updateScene(request: UpdateSceneRequest): UpdateSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateScene', 'PUT', '/api/v1/scenes/{SceneId}', 'json', false, 'json', request);
}

