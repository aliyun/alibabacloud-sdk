/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('pairecservice', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model BackflowFeatureConsistencyCheckJobDataRequest {
  featureConsistencyCheckJobConfigId?: string(name='FeatureConsistencyCheckJobConfigId', example='4'),
  instanceId?: string(name='InstanceId', example='pairec-cn-********'),
  itemFeatures?: string(name='ItemFeatures', example='[\\"{\\\\\\"itemid\\\\\\":{\\\\\\"value\\\\\\":1010,\\\\\\"type\\\\\\":\\\\\\"string\\\\\\"}}\\"]'),
  logItemId?: string(name='LogItemId', example='9010'),
  logRequestId?: string(name='LogRequestId', example='728C5E01-ABF6-5AA8-B9FC-B3BA05DECC77'),
  logRequestTime?: long(name='LogRequestTime', example='1693900981465'),
  logUserId?: string(name='LogUserId', example='1010'),
  sceneName?: string(name='SceneName', example='video-feed'),
  scores?: string(name='Scores', example='[\\"{\\\\\\"dbmtl_probs_is_valid_play\\\\\\":0.00032182207107543945,\\\\\\"dbmtl_y_play_time\\\\\\":0.0043269748210906982}\\"]'),
  userFeatures?: string(name='UserFeatures', example='{\\"userid\\":{\\"value\\":1010,\\"type\\":\\"string\\"},\\"click_5_seq\\":{\\"value\\":\\"9001;9002;9003;9004;9005\\",\\"type\\":\\"string\\"}}'),
}

model BackflowFeatureConsistencyCheckJobDataResponseBody = {
  requestId?: string(name='RequestId', example='BDB621CB-A81E-5D39-8793-39A365CBCC74'),
}

model BackflowFeatureConsistencyCheckJobDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BackflowFeatureConsistencyCheckJobDataResponseBody(name='body'),
}

async function backflowFeatureConsistencyCheckJobDataWithOptions(request: BackflowFeatureConsistencyCheckJobDataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BackflowFeatureConsistencyCheckJobDataResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.featureConsistencyCheckJobConfigId)) {
    body['FeatureConsistencyCheckJobConfigId'] = request.featureConsistencyCheckJobConfigId;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.itemFeatures)) {
    body['ItemFeatures'] = request.itemFeatures;
  }
  if (!Util.isUnset(request.logItemId)) {
    body['LogItemId'] = request.logItemId;
  }
  if (!Util.isUnset(request.logRequestId)) {
    body['LogRequestId'] = request.logRequestId;
  }
  if (!Util.isUnset(request.logRequestTime)) {
    body['LogRequestTime'] = request.logRequestTime;
  }
  if (!Util.isUnset(request.logUserId)) {
    body['LogUserId'] = request.logUserId;
  }
  if (!Util.isUnset(request.sceneName)) {
    body['SceneName'] = request.sceneName;
  }
  if (!Util.isUnset(request.scores)) {
    body['Scores'] = request.scores;
  }
  if (!Util.isUnset(request.userFeatures)) {
    body['UserFeatures'] = request.userFeatures;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BackflowFeatureConsistencyCheckJobData',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/featureconsistencycheck/jobs/action/backflowdata`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function backflowFeatureConsistencyCheckJobData(request: BackflowFeatureConsistencyCheckJobDataRequest): BackflowFeatureConsistencyCheckJobDataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return backflowFeatureConsistencyCheckJobDataWithOptions(request, headers, runtime);
}

model CloneExperimentRequest {
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234'),
}

model CloneExperimentResponseBody = {
  experimentId?: string(name='ExperimentId', example='3'),
  requestId?: string(name='RequestId', description='Id of the request', example='F8F613A9-DF1C-551A-88E1-397A3981A785'),
}

model CloneExperimentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CloneExperimentResponseBody(name='body'),
}

async function cloneExperimentWithOptions(ExperimentId: string, request: CloneExperimentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CloneExperimentResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CloneExperiment',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/experiments/${OpenApiUtil.getEncodeParam(ExperimentId)}/action/clone`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cloneExperiment(ExperimentId: string, request: CloneExperimentRequest): CloneExperimentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return cloneExperimentWithOptions(ExperimentId, request, headers, runtime);
}

model CloneExperimentGroupRequest {
  environment?: string(name='Environment', example='Daily'),
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234'),
  layerId?: string(name='LayerId', example='3'),
}

model CloneExperimentGroupResponseBody = {
  experimentGroupId?: string(name='ExperimentGroupId', example='3'),
  requestId?: string(name='RequestId', description='Id of the request', example='12A65C6C-AFA1-59B2-9A66-A9E0BB73F0E5'),
}

model CloneExperimentGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CloneExperimentGroupResponseBody(name='body'),
}

async function cloneExperimentGroupWithOptions(ExperimentGroupId: string, request: CloneExperimentGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CloneExperimentGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.environment)) {
    body['Environment'] = request.environment;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.layerId)) {
    body['LayerId'] = request.layerId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CloneExperimentGroup',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/experimentgroups/${OpenApiUtil.getEncodeParam(ExperimentGroupId)}/action/clone`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cloneExperimentGroup(ExperimentGroupId: string, request: CloneExperimentGroupRequest): CloneExperimentGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return cloneExperimentGroupWithOptions(ExperimentGroupId, request, headers, runtime);
}

model CloneFeatureConsistencyCheckJobConfigRequest {
  instanceId?: string(name='InstanceId', example='pairec-cn-********'),
}

model CloneFeatureConsistencyCheckJobConfigResponseBody = {
  featureConsistencyCheckId?: string(name='FeatureConsistencyCheckId', example='4'),
  requestId?: string(name='RequestId', example='74D958EF-3598-56FA-8296-FF1575CE43DF'),
}

model CloneFeatureConsistencyCheckJobConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CloneFeatureConsistencyCheckJobConfigResponseBody(name='body'),
}

async function cloneFeatureConsistencyCheckJobConfigWithOptions(SourceFeatureConsistencyCheckJobConfigId: string, request: CloneFeatureConsistencyCheckJobConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CloneFeatureConsistencyCheckJobConfigResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CloneFeatureConsistencyCheckJobConfig',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/featureconsistencycheck/jobconfigs/${OpenApiUtil.getEncodeParam(SourceFeatureConsistencyCheckJobConfigId)}/action/clone`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cloneFeatureConsistencyCheckJobConfig(SourceFeatureConsistencyCheckJobConfigId: string, request: CloneFeatureConsistencyCheckJobConfigRequest): CloneFeatureConsistencyCheckJobConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return cloneFeatureConsistencyCheckJobConfigWithOptions(SourceFeatureConsistencyCheckJobConfigId, request, headers, runtime);
}

model CloneLaboratoryRequest {
  cloneExperimentGroup?: boolean(name='CloneExperimentGroup', example='true'),
  environment?: string(name='Environment', example='Daily'),
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234'),
}

model CloneLaboratoryResponseBody = {
  laboratoryId?: string(name='LaboratoryId', example='3'),
  requestId?: string(name='RequestId', description='Id of the request', example='01D22D08-BA20-5F35-8302-99115F288220'),
}

model CloneLaboratoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CloneLaboratoryResponseBody(name='body'),
}

async function cloneLaboratoryWithOptions(LaboratoryId: string, request: CloneLaboratoryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CloneLaboratoryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.cloneExperimentGroup)) {
    body['CloneExperimentGroup'] = request.cloneExperimentGroup;
  }
  if (!Util.isUnset(request.environment)) {
    body['Environment'] = request.environment;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CloneLaboratory',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/laboratories/${OpenApiUtil.getEncodeParam(LaboratoryId)}/action/clone`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cloneLaboratory(LaboratoryId: string, request: CloneLaboratoryRequest): CloneLaboratoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return cloneLaboratoryWithOptions(LaboratoryId, request, headers, runtime);
}

model CreateCrowdRequest {
  description?: string(name='Description', example='This is a test.'),
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234'),
  label?: string(name='Label', example='os=android'),
  name?: string(name='Name', example='xx人群'),
  source?: string(name='Source', example='ManualInput'),
  users?: string(name='Users', example='user1,user2,user3'),
}

model CreateCrowdResponseBody = {
  crowdId?: string(name='CrowdId', example='3'),
  requestId?: string(name='RequestId', description='Id of the request', example='59CE7EC6-F268-5D71-9215-32922CC50D72'),
}

model CreateCrowdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCrowdResponseBody(name='body'),
}

async function createCrowdWithOptions(request: CreateCrowdRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateCrowdResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.label)) {
    body['Label'] = request.label;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.source)) {
    body['Source'] = request.source;
  }
  if (!Util.isUnset(request.users)) {
    body['Users'] = request.users;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateCrowd',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/crowds`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCrowd(request: CreateCrowdRequest): CreateCrowdResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createCrowdWithOptions(request, headers, runtime);
}

model CreateExperimentRequest {
  config?: string(name='Config', example='{"RankBy": "Score"}'),
  debugCrowdId?: string(name='DebugCrowdId', example='3'),
  debugUsers?: string(name='DebugUsers', example='1124512470******,1124512471******,1124512472******'),
  description?: string(name='Description', example='This is a test.'),
  experimentGroupId?: string(name='ExperimentGroupId', example='3'),
  flowPercent?: int32(name='FlowPercent', example='100'),
  instanceId?: string(name='InstanceId', example='pairec-test1'),
  name?: string(name='Name', example='experiment_test'),
  type?: string(name='Type', example='Baseline'),
}

model CreateExperimentResponseBody = {
  experimentId?: string(name='ExperimentId', example='3'),
  requestId?: string(name='RequestId', description='Id of the request', example='3AAA45F6-0798-5461-9360-81D133823CE7'),
}

model CreateExperimentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateExperimentResponseBody(name='body'),
}

async function createExperimentWithOptions(request: CreateExperimentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateExperimentResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.config)) {
    body['Config'] = request.config;
  }
  if (!Util.isUnset(request.debugCrowdId)) {
    body['DebugCrowdId'] = request.debugCrowdId;
  }
  if (!Util.isUnset(request.debugUsers)) {
    body['DebugUsers'] = request.debugUsers;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.experimentGroupId)) {
    body['ExperimentGroupId'] = request.experimentGroupId;
  }
  if (!Util.isUnset(request.flowPercent)) {
    body['FlowPercent'] = request.flowPercent;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateExperiment',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/experiments`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createExperiment(request: CreateExperimentRequest): CreateExperimentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createExperimentWithOptions(request, headers, runtime);
}

model CreateExperimentGroupRequest {
  config?: string(name='Config', example='{"RankBy": "Score"}'),
  crowdId?: string(name='CrowdId', example='1'),
  debugCrowdId?: string(name='DebugCrowdId', example='3'),
  debugUsers?: string(name='DebugUsers', example='1124512470******,1124512471******,1124512472******'),
  description?: string(name='Description', example='This is a test.'),
  distributionTimeDuration?: int32(name='DistributionTimeDuration', example='3'),
  distributionType?: string(name='DistributionType', example='UserId'),
  filter?: string(name='Filter', example='gender=male'),
  instanceId?: string(name='InstanceId', example='pairec-test1'),
  layerId?: string(name='LayerId', example='3'),
  name?: string(name='Name', example='experiment_group_test'),
  needAA?: boolean(name='NeedAA', example='true'),
  reservedBuckets?: string(name='ReservedBuckets', example='1,2,3'),
}

model CreateExperimentGroupResponseBody = {
  experimentGroupId?: string(name='ExperimentGroupId', example='3'),
  requestId?: string(name='RequestId', description='Id of the request', example='A04CB8C0-E74A-5E83-BC61-64D153574EC7'),
}

model CreateExperimentGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateExperimentGroupResponseBody(name='body'),
}

async function createExperimentGroupWithOptions(request: CreateExperimentGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateExperimentGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.config)) {
    body['Config'] = request.config;
  }
  if (!Util.isUnset(request.crowdId)) {
    body['CrowdId'] = request.crowdId;
  }
  if (!Util.isUnset(request.debugCrowdId)) {
    body['DebugCrowdId'] = request.debugCrowdId;
  }
  if (!Util.isUnset(request.debugUsers)) {
    body['DebugUsers'] = request.debugUsers;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.distributionTimeDuration)) {
    body['DistributionTimeDuration'] = request.distributionTimeDuration;
  }
  if (!Util.isUnset(request.distributionType)) {
    body['DistributionType'] = request.distributionType;
  }
  if (!Util.isUnset(request.filter)) {
    body['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.layerId)) {
    body['LayerId'] = request.layerId;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.needAA)) {
    body['NeedAA'] = request.needAA;
  }
  if (!Util.isUnset(request.reservedBuckets)) {
    body['ReservedBuckets'] = request.reservedBuckets;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateExperimentGroup',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/experimentgroups`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createExperimentGroup(request: CreateExperimentGroupRequest): CreateExperimentGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createExperimentGroupWithOptions(request, headers, runtime);
}

model CreateFeatureConsistencyCheckJobRequest {
  environment?: string(name='Environment', example='Pre'),
  featureConsistencyCheckJobConfigId?: string(name='FeatureConsistencyCheckJobConfigId', example='3'),
  instanceId?: string(name='InstanceId', example='pairec-cn-********'),
  samplingDuration?: int32(name='SamplingDuration', example='10'),
}

model CreateFeatureConsistencyCheckJobResponseBody = {
  featureConsistencyCheckJobId?: string(name='FeatureConsistencyCheckJobId', example='4'),
  requestId?: string(name='RequestId', example='7D59453C-48AA-5FC5-8848-2D373BD1A17F'),
}

model CreateFeatureConsistencyCheckJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFeatureConsistencyCheckJobResponseBody(name='body'),
}

async function createFeatureConsistencyCheckJobWithOptions(request: CreateFeatureConsistencyCheckJobRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateFeatureConsistencyCheckJobResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.environment)) {
    body['Environment'] = request.environment;
  }
  if (!Util.isUnset(request.featureConsistencyCheckJobConfigId)) {
    body['FeatureConsistencyCheckJobConfigId'] = request.featureConsistencyCheckJobConfigId;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.samplingDuration)) {
    body['SamplingDuration'] = request.samplingDuration;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateFeatureConsistencyCheckJob',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/featureconsistencycheck/jobs`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createFeatureConsistencyCheckJob(request: CreateFeatureConsistencyCheckJobRequest): CreateFeatureConsistencyCheckJobResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createFeatureConsistencyCheckJobWithOptions(request, headers, runtime);
}

model CreateFeatureConsistencyCheckJobConfigRequest {
  compareFeature?: boolean(name='CompareFeature', example='true'),
  easServiceName?: string(name='EasServiceName', example='service_123'),
  easyRecPackagePath?: string(name='EasyRecPackagePath', example='oss://*******'),
  easyRecVersion?: string(name='EasyRecVersion', example='1.3.60'),
  featureDisplayExclude?: string(name='FeatureDisplayExclude', example='feature1,feature2'),
  featureLandingResourceId?: string(name='FeatureLandingResourceId', example='reso-********'),
  featurePriority?: string(name='FeaturePriority', example='feature1,feature2,feature3'),
  fgJarVersion?: string(name='FgJarVersion', example='1.0.0'),
  fgJsonFileName?: string(name='FgJsonFileName', example='file.json'),
  generateZip?: boolean(name='GenerateZip', example='true'),
  instanceId?: string(name='InstanceId', example='pairec-cn-********'),
  itemIdField?: string(name='ItemIdField', example='item_id'),
  itemTable?: string(name='ItemTable', example='item_table'),
  itemTablePartitionField?: string(name='ItemTablePartitionField', example='ds'),
  itemTablePartitionFieldFormat?: string(name='ItemTablePartitionFieldFormat', example='yyyymmdd'),
  name?: string(name='Name', example='feature_consistency_check1'),
  ossResourceId?: string(name='OssResourceId', example='reso-********'),
  sampleRate?: double(name='SampleRate', example='0.89'),
  sceneId?: string(name='SceneId', example='3'),
  serviceId?: string(name='ServiceId', example='4'),
  userIdField?: string(name='UserIdField', example='user_id'),
  userTable?: string(name='UserTable', example='user_table'),
  userTablePartitionField?: string(name='UserTablePartitionField', example='ds'),
  userTablePartitionFieldFormat?: string(name='UserTablePartitionFieldFormat', example='yyyymmdd'),
  workflowName?: string(name='WorkflowName', example='work_flow_1'),
}

model CreateFeatureConsistencyCheckJobConfigResponseBody = {
  featureConsistencyCheckJobConfigId?: string(name='FeatureConsistencyCheckJobConfigId', example='4'),
  requestId?: string(name='RequestId', example='E15A1443-7917-5BE0-AE70-25538ECF398D'),
}

model CreateFeatureConsistencyCheckJobConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFeatureConsistencyCheckJobConfigResponseBody(name='body'),
}

async function createFeatureConsistencyCheckJobConfigWithOptions(request: CreateFeatureConsistencyCheckJobConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateFeatureConsistencyCheckJobConfigResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.compareFeature)) {
    body['CompareFeature'] = request.compareFeature;
  }
  if (!Util.isUnset(request.easServiceName)) {
    body['EasServiceName'] = request.easServiceName;
  }
  if (!Util.isUnset(request.easyRecPackagePath)) {
    body['EasyRecPackagePath'] = request.easyRecPackagePath;
  }
  if (!Util.isUnset(request.easyRecVersion)) {
    body['EasyRecVersion'] = request.easyRecVersion;
  }
  if (!Util.isUnset(request.featureDisplayExclude)) {
    body['FeatureDisplayExclude'] = request.featureDisplayExclude;
  }
  if (!Util.isUnset(request.featureLandingResourceId)) {
    body['FeatureLandingResourceId'] = request.featureLandingResourceId;
  }
  if (!Util.isUnset(request.featurePriority)) {
    body['FeaturePriority'] = request.featurePriority;
  }
  if (!Util.isUnset(request.fgJarVersion)) {
    body['FgJarVersion'] = request.fgJarVersion;
  }
  if (!Util.isUnset(request.fgJsonFileName)) {
    body['FgJsonFileName'] = request.fgJsonFileName;
  }
  if (!Util.isUnset(request.generateZip)) {
    body['GenerateZip'] = request.generateZip;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.itemIdField)) {
    body['ItemIdField'] = request.itemIdField;
  }
  if (!Util.isUnset(request.itemTable)) {
    body['ItemTable'] = request.itemTable;
  }
  if (!Util.isUnset(request.itemTablePartitionField)) {
    body['ItemTablePartitionField'] = request.itemTablePartitionField;
  }
  if (!Util.isUnset(request.itemTablePartitionFieldFormat)) {
    body['ItemTablePartitionFieldFormat'] = request.itemTablePartitionFieldFormat;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.ossResourceId)) {
    body['OssResourceId'] = request.ossResourceId;
  }
  if (!Util.isUnset(request.sampleRate)) {
    body['SampleRate'] = request.sampleRate;
  }
  if (!Util.isUnset(request.sceneId)) {
    body['SceneId'] = request.sceneId;
  }
  if (!Util.isUnset(request.serviceId)) {
    body['ServiceId'] = request.serviceId;
  }
  if (!Util.isUnset(request.userIdField)) {
    body['UserIdField'] = request.userIdField;
  }
  if (!Util.isUnset(request.userTable)) {
    body['UserTable'] = request.userTable;
  }
  if (!Util.isUnset(request.userTablePartitionField)) {
    body['UserTablePartitionField'] = request.userTablePartitionField;
  }
  if (!Util.isUnset(request.userTablePartitionFieldFormat)) {
    body['UserTablePartitionFieldFormat'] = request.userTablePartitionFieldFormat;
  }
  if (!Util.isUnset(request.workflowName)) {
    body['WorkflowName'] = request.workflowName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateFeatureConsistencyCheckJobConfig',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/featureconsistencycheck/jobconfigs`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createFeatureConsistencyCheckJobConfig(request: CreateFeatureConsistencyCheckJobConfigRequest): CreateFeatureConsistencyCheckJobConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createFeatureConsistencyCheckJobConfigWithOptions(request, headers, runtime);
}

model CreateLaboratoryRequest {
  bucketCount?: int32(name='BucketCount', example='24'),
  bucketType?: string(name='BucketType', example='UidHash'),
  buckets?: string(name='Buckets', example='1,2,3,10-20'),
  debugCrowdId?: string(name='DebugCrowdId', example='3'),
  debugUsers?: string(name='DebugUsers', example='1124512470******,1124512471******,1124512472******'),
  description?: string(name='Description', example='This is a test.'),
  environment?: string(name='Environment', example='Daily'),
  filter?: string(name='Filter', example='filter=xxx'),
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234'),
  name?: string(name='Name', example='laboratory1'),
  sceneId?: string(name='SceneId', example='3'),
  type?: string(name='Type', example='Base'),
}

model CreateLaboratoryResponseBody = {
  laboratoryId?: string(name='LaboratoryId', example='3'),
  requestId?: string(name='RequestId', description='Id of the request', example='42391E6D-822C-58F8-9F7E-D991BB86D6AD'),
}

model CreateLaboratoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateLaboratoryResponseBody(name='body'),
}

async function createLaboratoryWithOptions(request: CreateLaboratoryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateLaboratoryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.bucketCount)) {
    body['BucketCount'] = request.bucketCount;
  }
  if (!Util.isUnset(request.bucketType)) {
    body['BucketType'] = request.bucketType;
  }
  if (!Util.isUnset(request.buckets)) {
    body['Buckets'] = request.buckets;
  }
  if (!Util.isUnset(request.debugCrowdId)) {
    body['DebugCrowdId'] = request.debugCrowdId;
  }
  if (!Util.isUnset(request.debugUsers)) {
    body['DebugUsers'] = request.debugUsers;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.environment)) {
    body['Environment'] = request.environment;
  }
  if (!Util.isUnset(request.filter)) {
    body['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.sceneId)) {
    body['SceneId'] = request.sceneId;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateLaboratory',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/laboratories`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createLaboratory(request: CreateLaboratoryRequest): CreateLaboratoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createLaboratoryWithOptions(request, headers, runtime);
}

model CreateLayerRequest {
  description?: string(name='Description', example='This is a test.'),
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234'),
  laboratoryId?: string(name='LaboratoryId', example='3'),
  name?: string(name='Name', example='layer1'),
}

model CreateLayerResponseBody = {
  layerId?: string(name='LayerId', example='3'),
  requestId?: string(name='RequestId', description='Id of the request', example='59CE7EC6-F268-5D71-9215-32922CC50D72'),
}

model CreateLayerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateLayerResponseBody(name='body'),
}

async function createLayerWithOptions(request: CreateLayerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateLayerResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.laboratoryId)) {
    body['LaboratoryId'] = request.laboratoryId;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateLayer',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/layers`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createLayer(request: CreateLayerRequest): CreateLayerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createLayerWithOptions(request, headers, runtime);
}

model CreateParamRequest {
  environment?: string(name='Environment', example='Daily'),
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234'),
  name?: string(name='Name', example='home'),
  sceneId?: string(name='SceneId', example='4'),
  value?: string(name='Value', example='house'),
}

model CreateParamResponseBody = {
  paramId?: long(name='ParamId', example='4'),
  requestId?: string(name='RequestId', description='Id of the request', example='F8F613A9-DF1C-551A-88E1-397A3981A785'),
}

model CreateParamResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateParamResponseBody(name='body'),
}

async function createParamWithOptions(request: CreateParamRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateParamResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.environment)) {
    body['Environment'] = request.environment;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.sceneId)) {
    body['SceneId'] = request.sceneId;
  }
  if (!Util.isUnset(request.value)) {
    body['Value'] = request.value;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateParam',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/params`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createParam(request: CreateParamRequest): CreateParamResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createParamWithOptions(request, headers, runtime);
}

model CreateSceneRequest {
  description?: string(name='Description', example='This is a test.'),
  flows?: [ 
    {
      flowCode?: string(name='FlowCode', example='liuliang1'),
      flowName?: string(name='FlowName', example='流量1'),
    }
  ](name='Flows'),
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234'),
  name?: string(name='Name', example='scene1'),
}

model CreateSceneResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='FCF741D8-9C30-578E-807F-B935487DB34A'),
  sceneId?: string(name='SceneId', example='3'),
}

model CreateSceneResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSceneResponseBody(name='body'),
}

async function createSceneWithOptions(request: CreateSceneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSceneResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.flows)) {
    body['Flows'] = request.flows;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateScene',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/scenes`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createScene(request: CreateSceneRequest): CreateSceneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createSceneWithOptions(request, headers, runtime);
}

model CreateSubCrowdRequest {
  instanceId?: string(name='InstanceId', example='pairec-test1'),
  source?: string(name='Source', example='ManualInput'),
  users?: string(name='Users', example='user1,user2,user3'),
}

model CreateSubCrowdResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='9763624B-5FBB-5E3A-9193-B1ADB554CEAE'),
  subCrowdId?: string(name='SubCrowdId', example='3'),
}

model CreateSubCrowdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSubCrowdResponseBody(name='body'),
}

async function createSubCrowdWithOptions(CrowdId: string, request: CreateSubCrowdRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSubCrowdResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.source)) {
    body['Source'] = request.source;
  }
  if (!Util.isUnset(request.users)) {
    body['Users'] = request.users;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateSubCrowd',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/crowds/${OpenApiUtil.getEncodeParam(CrowdId)}/subcrowds`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSubCrowd(CrowdId: string, request: CreateSubCrowdRequest): CreateSubCrowdResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createSubCrowdWithOptions(CrowdId, request, headers, runtime);
}

model DeleteCrowdRequest {
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234'),
}

model DeleteCrowdResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='A04CB8C0-E74A-5E83-BC61-64D153574EC7'),
}

model DeleteCrowdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCrowdResponseBody(name='body'),
}

async function deleteCrowdWithOptions(CrowdId: string, request: DeleteCrowdRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteCrowdResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCrowd',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/crowds/${OpenApiUtil.getEncodeParam(CrowdId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteCrowd(CrowdId: string, request: DeleteCrowdRequest): DeleteCrowdResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteCrowdWithOptions(CrowdId, request, headers, runtime);
}

model DeleteExperimentRequest {
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234'),
}

model DeleteExperimentResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='2A734D87-2212-5C84-B63A-1AC87CA843D4'),
}

model DeleteExperimentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteExperimentResponseBody(name='body'),
}

async function deleteExperimentWithOptions(ExperimentId: string, request: DeleteExperimentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteExperimentResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteExperiment',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/experiments/${OpenApiUtil.getEncodeParam(ExperimentId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteExperiment(ExperimentId: string, request: DeleteExperimentRequest): DeleteExperimentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteExperimentWithOptions(ExperimentId, request, headers, runtime);
}

model DeleteExperimentGroupRequest {
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234'),
}

model DeleteExperimentGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='A009D9BE-C85E-57B2-AE05-BD78BB6EBF50'),
}

model DeleteExperimentGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteExperimentGroupResponseBody(name='body'),
}

async function deleteExperimentGroupWithOptions(ExperimentGroupId: string, request: DeleteExperimentGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteExperimentGroupResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteExperimentGroup',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/experimentgroups/${OpenApiUtil.getEncodeParam(ExperimentGroupId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteExperimentGroup(ExperimentGroupId: string, request: DeleteExperimentGroupRequest): DeleteExperimentGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteExperimentGroupWithOptions(ExperimentGroupId, request, headers, runtime);
}

model DeleteLaboratoryRequest {
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234'),
}

model DeleteLaboratoryResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='1C0898E5-9220-5443-B2D9-445FF0688215'),
}

model DeleteLaboratoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteLaboratoryResponseBody(name='body'),
}

async function deleteLaboratoryWithOptions(LaboratoryId: string, request: DeleteLaboratoryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteLaboratoryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteLaboratory',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/laboratories/${OpenApiUtil.getEncodeParam(LaboratoryId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteLaboratory(LaboratoryId: string, request: DeleteLaboratoryRequest): DeleteLaboratoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteLaboratoryWithOptions(LaboratoryId, request, headers, runtime);
}

model DeleteLayerRequest {
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234'),
}

model DeleteLayerResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='8F457D79-C4A2-5E8C-83E4-0D089456E2AC'),
}

model DeleteLayerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteLayerResponseBody(name='body'),
}

async function deleteLayerWithOptions(LayerId: string, request: DeleteLayerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteLayerResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteLayer',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/layers/${OpenApiUtil.getEncodeParam(LayerId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteLayer(LayerId: string, request: DeleteLayerRequest): DeleteLayerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteLayerWithOptions(LayerId, request, headers, runtime);
}

model DeleteParamRequest {
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234'),
}

model DeleteParamResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='F0AB6527-093F-5C44-B3BD-42C8C210C619'),
}

model DeleteParamResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteParamResponseBody(name='body'),
}

async function deleteParamWithOptions(ParamId: string, request: DeleteParamRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteParamResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteParam',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/params/${OpenApiUtil.getEncodeParam(ParamId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteParam(ParamId: string, request: DeleteParamRequest): DeleteParamResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteParamWithOptions(ParamId, request, headers, runtime);
}

model DeleteSceneRequest {
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234'),
}

model DeleteSceneResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='D75C43DC-3D3A-5CC8-9AAC-8C77306C433B'),
}

model DeleteSceneResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSceneResponseBody(name='body'),
}

async function deleteSceneWithOptions(SceneId: string, request: DeleteSceneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSceneResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteScene',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/scenes/${OpenApiUtil.getEncodeParam(SceneId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteScene(SceneId: string, request: DeleteSceneRequest): DeleteSceneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteSceneWithOptions(SceneId, request, headers, runtime);
}

model DeleteSubCrowdRequest {
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234'),
}

model DeleteSubCrowdResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='EE97D06A-2AA0-5AD9-B6CF-8A267924D691'),
}

model DeleteSubCrowdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSubCrowdResponseBody(name='body'),
}

async function deleteSubCrowdWithOptions(CrowdId: string, SubCrowdId: string, request: DeleteSubCrowdRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSubCrowdResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSubCrowd',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/crowds/${OpenApiUtil.getEncodeParam(CrowdId)}/subcrowds/${OpenApiUtil.getEncodeParam(SubCrowdId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSubCrowd(CrowdId: string, SubCrowdId: string, request: DeleteSubCrowdRequest): DeleteSubCrowdResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteSubCrowdWithOptions(CrowdId, SubCrowdId, request, headers, runtime);
}

model GetExperimentRequest {
  instanceId?: string(name='InstanceId', example='pairec-test1'),
}

model GetExperimentResponseBody = {
  aliasExperimentId?: string(name='AliasExperimentId', example='L1#EG1#E1'),
  buckets?: string(name='Buckets', example='1,2,3'),
  config?: string(name='Config', example='{}'),
  debugCrowdId?: string(name='DebugCrowdId', example='3'),
  debugUsers?: string(name='DebugUsers', example='uid1,uid2,uid3'),
  description?: string(name='Description', example='This is a test.'),
  experimentGroupId?: string(name='ExperimentGroupId', example='3'),
  flowPercent?: int32(name='FlowPercent', example='100'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-12-15T23:24:33.132+08:00'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-12-15T23:24:33.132+08:00'),
  laboratoryId?: string(name='LaboratoryId', example='3'),
  layerId?: string(name='LayerId', example='3'),
  name?: string(name='Name', example='experiment_test1'),
  requestId?: string(name='RequestId', description='Id of the request', example='74D958EF-3598-56FA-8296-FF1575CE43DF'),
  sceneId?: string(name='SceneId', example='3'),
  status?: string(name='Status', example='Offline'),
  type?: string(name='Type', example='Baseline'),
}

model GetExperimentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetExperimentResponseBody(name='body'),
}

async function getExperimentWithOptions(ExperimentId: string, request: GetExperimentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetExperimentResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetExperiment',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/experiments/${OpenApiUtil.getEncodeParam(ExperimentId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getExperiment(ExperimentId: string, request: GetExperimentRequest): GetExperimentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getExperimentWithOptions(ExperimentId, request, headers, runtime);
}

model GetExperimentGroupRequest {
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234'),
}

model GetExperimentGroupResponseBody = {
  config?: string(name='Config', example='{"RankBy": "Score"}'),
  crowdId?: string(name='CrowdId', example='3'),
  debugCrowdId?: string(name='DebugCrowdId', example='4'),
  debugUsers?: string(name='DebugUsers', example='1124512470******,1124512471******,1124512472******'),
  description?: string(name='Description', example='This is a test.'),
  distributionTimeDuration?: int32(name='DistributionTimeDuration', example='5'),
  distributionType?: string(name='DistributionType', example='UserId'),
  filter?: string(name='Filter', example='gender=female'),
  laboratoryId?: string(name='LaboratoryId', example='4'),
  layerId?: string(name='LayerId', example='3'),
  name?: string(name='Name', example='experiment_group1'),
  needAA?: boolean(name='NeedAA', example='true'),
  owner?: string(name='Owner', example='1124512470******'),
  requestId?: string(name='RequestId', description='Id of the request', example='BDB621CB-A81E-5D39-8793-39A365CBCC74'),
  reservedBuckets?: string(name='ReservedBuckets', example='1,2,3,4'),
  sceneId?: string(name='SceneId', example='1'),
  status?: string(name='Status', example='Offline'),
}

model GetExperimentGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetExperimentGroupResponseBody(name='body'),
}

async function getExperimentGroupWithOptions(ExperimentGroupId: string, request: GetExperimentGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetExperimentGroupResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetExperimentGroup',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/experimentgroups/${OpenApiUtil.getEncodeParam(ExperimentGroupId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getExperimentGroup(ExperimentGroupId: string, request: GetExperimentGroupRequest): GetExperimentGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getExperimentGroupWithOptions(ExperimentGroupId, request, headers, runtime);
}

model GetFeatureConsistencyCheckJobRequest {
  instanceId?: string(name='InstanceId', example='pairec-cn-********'),
}

model GetFeatureConsistencyCheckJobResponseBody = {
  config?: string(name='Config', example='{}'),
  featureConsistencyCheckJobConfigId?: string(name='FeatureConsistencyCheckJobConfigId', example='5'),
  featureConsistencyCheckJobConfigName?: string(name='FeatureConsistencyCheckJobConfigName', example='feature_consistency_check_1'),
  gmtEndTime?: string(name='GmtEndTime', example='2021-12-15T23:24:33.132+08:00'),
  gmtStartTime?: string(name='GmtStartTime', example='2021-12-15T23:24:33.132+08:00'),
  logs?: [ string ](name='Logs'),
  requestId?: string(name='RequestId', example='A04CB8C0-E74A-5E83-BC61-64D153574EC7'),
  status?: string(name='Status', example='Running'),
}

model GetFeatureConsistencyCheckJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFeatureConsistencyCheckJobResponseBody(name='body'),
}

async function getFeatureConsistencyCheckJobWithOptions(FeatureConsistencyCheckJobId: string, request: GetFeatureConsistencyCheckJobRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetFeatureConsistencyCheckJobResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetFeatureConsistencyCheckJob',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/featureconsistencycheck/jobs/${OpenApiUtil.getEncodeParam(FeatureConsistencyCheckJobId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getFeatureConsistencyCheckJob(FeatureConsistencyCheckJobId: string, request: GetFeatureConsistencyCheckJobRequest): GetFeatureConsistencyCheckJobResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getFeatureConsistencyCheckJobWithOptions(FeatureConsistencyCheckJobId, request, headers, runtime);
}

model GetFeatureConsistencyCheckJobConfigRequest {
  instanceId?: string(name='InstanceId', example='pairec-cn-********'),
}

model GetFeatureConsistencyCheckJobConfigResponseBody = {
  compareFeature?: boolean(name='CompareFeature', example='true'),
  easServiceName?: string(name='EasServiceName', example='eas_service_1'),
  easyRecPackagePath?: string(name='EasyRecPackagePath', example='oss://*******'),
  easyRecVersion?: string(name='EasyRecVersion', example='1.3.60'),
  featureDisplayExclude?: string(name='FeatureDisplayExclude', example='feature1,feature2'),
  featureLandingResourceId?: string(name='FeatureLandingResourceId', example='reso-********'),
  featureLandingResourceUri?: string(name='FeatureLandingResourceUri', example='mc_project_1'),
  featurePriority?: string(name='FeaturePriority', example='feature1,feature2,feature3'),
  fgJarVersion?: string(name='FgJarVersion', example='1.0.0'),
  fgJsonFileName?: string(name='FgJsonFileName', example='file.json'),
  generateZip?: boolean(name='GenerateZip', example='true'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-12-15T23:24:33.132+08:00'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-12-15T23:24:33.132+08:00'),
  itemIdField?: string(name='ItemIdField', example='item_id'),
  itemTable?: string(name='ItemTable', example='item_table'),
  itemTablePartitionField?: string(name='ItemTablePartitionField', example='ds'),
  itemTablePartitionFieldFormat?: string(name='ItemTablePartitionFieldFormat', example='yyyymmdd'),
  latestJobGmtSamplingEndTime?: string(name='LatestJobGmtSamplingEndTime', example='2021-12-15T23:24:33.132+08:00'),
  latestJobGmtSamplingStartTime?: string(name='LatestJobGmtSamplingStartTime', example='2021-12-15T23:24:33.132+08:00'),
  latestJobId?: string(name='LatestJobId', example='3'),
  name?: string(name='Name', example='feature_consistency_check1'),
  ossBucket?: string(name='OssBucket', example='oss_bucket_1'),
  ossResourceId?: string(name='OssResourceId', example='reso-********'),
  requestId?: string(name='RequestId', example='728C5E01-ABF6-5AA8-B9FC-B3BA05DECC77'),
  sampleRate?: string(name='SampleRate', example='0.89'),
  sceneId?: string(name='SceneId', example='3'),
  sceneName?: string(name='SceneName', example='scene1'),
  serviceId?: string(name='ServiceId', example='4'),
  serviceName?: string(name='ServiceName', example='service1'),
  status?: string(name='Status', example='Editable'),
  userIdField?: string(name='UserIdField', example='user_id'),
  userTable?: string(name='UserTable', example='user_table'),
  userTablePartitionField?: string(name='UserTablePartitionField', example='ds'),
  userTablePartitionFieldFormat?: string(name='UserTablePartitionFieldFormat', example='yyyymmdd'),
  workflowName?: string(name='WorkflowName', example='work_flow_1'),
}

model GetFeatureConsistencyCheckJobConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFeatureConsistencyCheckJobConfigResponseBody(name='body'),
}

async function getFeatureConsistencyCheckJobConfigWithOptions(FeatureConsistencyCheckJobConfigId: string, request: GetFeatureConsistencyCheckJobConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetFeatureConsistencyCheckJobConfigResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetFeatureConsistencyCheckJobConfig',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/featureconsistencycheck/jobconfigs/${OpenApiUtil.getEncodeParam(FeatureConsistencyCheckJobConfigId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getFeatureConsistencyCheckJobConfig(FeatureConsistencyCheckJobConfigId: string, request: GetFeatureConsistencyCheckJobConfigRequest): GetFeatureConsistencyCheckJobConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getFeatureConsistencyCheckJobConfigWithOptions(FeatureConsistencyCheckJobConfigId, request, headers, runtime);
}

model GetInstanceResponseBody = {
  chargeType?: string(name='ChargeType', example='Subscription'),
  commodityCode?: string(name='CommodityCode', example='airec_developers_public_cn'),
  config?: {
    dataManagements?: [ 
      {
        componentCode?: string(name='ComponentCode', example='storage'),
        meta?: map[string]any(name='Meta'),
        type?: string(name='Type', example='OSS'),
      }
    ](name='DataManagements'),
    engines?: [ 
      {
        componentCode?: string(name='ComponentCode', example='feature'),
        meta?: map[string]any(name='Meta'),
        type?: string(name='Type', example='Hologres'),
      }
    ](name='Engines'),
    monitors?: [ 
      {
        componentCode?: string(name='ComponentCode', example='featuresets'),
        meta?: map[string]any(name='Meta'),
        type?: string(name='Type', example='Platform'),
      }
    ](name='Monitors'),
  }(name='Config'),
  expiredTime?: string(name='ExpiredTime', example='2022-12-14 00:00:00.0'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2022-10-13 17:34:52.0'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2022-11-05 09:02:30.0'),
  instanceId?: string(name='InstanceId', example='pairec-test1'),
  regionId?: string(name='RegionId', example='cn-shenzhen'),
  requestId?: string(name='RequestId', example='728C5E01-ABF6-5AA8-B9FC-B3BA05DECC77'),
  status?: string(name='Status', example='Initializing'),
  type?: string(name='Type', example='basic'),
}

model GetInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInstanceResponseBody(name='body'),
}

async function getInstanceWithOptions(InstanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetInstanceResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetInstance',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${OpenApiUtil.getEncodeParam(InstanceId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getInstance(InstanceId: string): GetInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getInstanceWithOptions(InstanceId, headers, runtime);
}

model GetLaboratoryRequest {
  instanceId?: string(name='InstanceId', example='pairec-test1'),
}

model GetLaboratoryResponseBody = {
  bucketCount?: int32(name='BucketCount', example='100'),
  bucketType?: string(name='BucketType', example='Filter'),
  buckets?: string(name='Buckets', example='1,2,3,10-20'),
  crowdId?: string(name='CrowdId', example='3'),
  debugCrowdId?: string(name='DebugCrowdId', example='3'),
  debugUsers?: string(name='DebugUsers', example='user1,user2,user3'),
  description?: string(name='Description', example='This is a test.'),
  environment?: string(name='Environment', example='Daily'),
  filter?: string(name='Filter', example='filter=xxx'),
  name?: string(name='Name', example='laboratory1'),
  requestId?: string(name='RequestId', description='Id of the request', example='1C0898E5-9220-5443-B2D9-445FF0688215'),
  sceneId?: string(name='SceneId', example='3'),
  status?: string(name='Status', example='Offline'),
  type?: string(name='Type', example='Base'),
}

model GetLaboratoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetLaboratoryResponseBody(name='body'),
}

async function getLaboratoryWithOptions(LaboratoryId: string, request: GetLaboratoryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetLaboratoryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetLaboratory',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/laboratories/${OpenApiUtil.getEncodeParam(LaboratoryId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getLaboratory(LaboratoryId: string, request: GetLaboratoryRequest): GetLaboratoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getLaboratoryWithOptions(LaboratoryId, request, headers, runtime);
}

model GetLayerRequest {
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234'),
}

model GetLayerResponseBody = {
  description?: string(name='Description', example='This is a test.'),
  laboratoryId?: string(name='LaboratoryId', example='3'),
  name?: string(name='Name', example='layer1'),
  requestId?: string(name='RequestId', description='Id of the request', example='EE97D06A-2AA0-5AD9-B6CF-8A267924D691'),
  sceneId?: string(name='SceneId', example='4'),
}

model GetLayerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetLayerResponseBody(name='body'),
}

async function getLayerWithOptions(LayerId: string, request: GetLayerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetLayerResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetLayer',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/layers/${OpenApiUtil.getEncodeParam(LayerId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getLayer(LayerId: string, request: GetLayerRequest): GetLayerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getLayerWithOptions(LayerId, request, headers, runtime);
}

model GetSceneRequest {
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234'),
}

model GetSceneResponseBody = {
  description?: string(name='Description', example='This is a test.'),
  flows?: [ 
    {
      flowCode?: string(name='FlowCode', example='liuliang1'),
      flowName?: string(name='FlowName', example='流量1'),
    }
  ](name='Flows'),
  name?: string(name='Name', example='scene1'),
  requestId?: string(name='RequestId', description='Id of the request', example='B8987BF7-6028-5B17-80E0-251B7BD67BBA'),
}

model GetSceneResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSceneResponseBody(name='body'),
}

async function getSceneWithOptions(SceneId: string, request: GetSceneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetSceneResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetScene',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/scenes/${OpenApiUtil.getEncodeParam(SceneId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getScene(SceneId: string, request: GetSceneRequest): GetSceneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getSceneWithOptions(SceneId, request, headers, runtime);
}

model GetSubCrowdRequest {
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234'),
}

model GetSubCrowdResponseBody = {
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-12-15T23:24:33.132+08:00'),
  quantity?: string(name='Quantity', example='3'),
  requestId?: string(name='RequestId', description='Id of the request', example='01D22D08-BA20-5F35-8302-99115F288220'),
  source?: string(name='Source', example='ManualInput'),
  users?: string(name='Users', example='user1,user2'),
}

model GetSubCrowdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSubCrowdResponseBody(name='body'),
}

async function getSubCrowdWithOptions(CrowdId: string, SubCrowdId: string, request: GetSubCrowdRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetSubCrowdResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSubCrowd',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/crowds/${OpenApiUtil.getEncodeParam(CrowdId)}/subcrowds/${OpenApiUtil.getEncodeParam(SubCrowdId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSubCrowd(CrowdId: string, SubCrowdId: string, request: GetSubCrowdRequest): GetSubCrowdResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getSubCrowdWithOptions(CrowdId, SubCrowdId, request, headers, runtime);
}

model ListCrowdUsersRequest {
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234'),
}

model ListCrowdUsersResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='F0AB6527-093F-5C44-B3BD-42C8C210C619'),
  totalCount?: long(name='TotalCount', example='3'),
  users?: [ string ](name='Users'),
}

model ListCrowdUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCrowdUsersResponseBody(name='body'),
}

async function listCrowdUsersWithOptions(CrowdId: string, request: ListCrowdUsersRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListCrowdUsersResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCrowdUsers',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/crowds/${OpenApiUtil.getEncodeParam(CrowdId)}/users`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listCrowdUsers(CrowdId: string, request: ListCrowdUsersRequest): ListCrowdUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listCrowdUsersWithOptions(CrowdId, request, headers, runtime);
}

model ListCrowdsRequest {
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234'),
}

model ListCrowdsResponseBody = {
  crowds?: [ 
    {
      crowdId?: string(name='CrowdId', example='3'),
      description?: string(name='Description', example='This is a test.'),
      gmtCreateTime?: string(name='GmtCreateTime', example='2021-12-15T23:24:33.132+08:00'),
      label?: string(name='Label', example='os=android'),
      name?: string(name='Name', example='crowd1'),
      quantity?: string(name='Quantity', example='10'),
      source?: string(name='Source', example='ManualInput'),
      users?: string(name='Users', example='user1,user2'),
    }
  ](name='Crowds'),
  requestId?: string(name='RequestId', description='Id of the request', example='9763624B-5FBB-5E3A-9193-B1ADB554CEAE'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListCrowdsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCrowdsResponseBody(name='body'),
}

async function listCrowdsWithOptions(request: ListCrowdsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListCrowdsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCrowds',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/crowds`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listCrowds(request: ListCrowdsRequest): ListCrowdsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listCrowdsWithOptions(request, headers, runtime);
}

model ListExperimentGroupsRequest {
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234'),
  layerId?: string(name='LayerId', example='3'),
  status?: string(name='Status', example='Online'),
}

model ListExperimentGroupsResponseBody = {
  experimentGroups?: [ 
    {
      config?: string(name='Config', example='{}'),
      crowdId?: string(name='CrowdId', example='3'),
      debugCrowdId?: string(name='DebugCrowdId', example='4'),
      debugUsers?: string(name='DebugUsers', example='1124512470******,1124512471******,1124512472******'),
      description?: string(name='Description', example='This is a test.'),
      distributionTimeDuration?: int32(name='DistributionTimeDuration', example='5'),
      distributionType?: string(name='DistributionType', example='UserId'),
      experimentGroupId?: string(name='ExperimentGroupId', example='3'),
      filter?: string(name='Filter', example='gender=female'),
      laboratoryId?: string(name='LaboratoryId', example='4'),
      layerId?: string(name='LayerId', example='3'),
      name?: string(name='Name', example='experiment_group1'),
      needAA?: boolean(name='NeedAA', example='true'),
      owner?: string(name='Owner', example='1124512470******'),
      reservedBuckets?: string(name='ReservedBuckets', example='1,2,3,4'),
      sceneId?: string(name='SceneId', example='1'),
      status?: string(name='Status', example='Offline'),
    }
  ](name='ExperimentGroups'),
  requestId?: string(name='RequestId', description='Id of the request', example='59CE7EC6-F268-5D71-9215-32922CC50D72'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListExperimentGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListExperimentGroupsResponseBody(name='body'),
}

async function listExperimentGroupsWithOptions(request: ListExperimentGroupsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListExperimentGroupsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.layerId)) {
    query['LayerId'] = request.layerId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListExperimentGroups',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/experimentgroups`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listExperimentGroups(request: ListExperimentGroupsRequest): ListExperimentGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listExperimentGroupsWithOptions(request, headers, runtime);
}

model ListExperimentsRequest {
  experimentGroupId?: string(name='ExperimentGroupId', example='3'),
  instanceId?: string(name='InstanceId', example='pairec-test1'),
  query?: string(name='Query', example='experiment_test1'),
  status?: string(name='Status', example='Offline'),
}

model ListExperimentsResponseBody = {
  experiments?: [ 
    {
      aliasExperimentId?: string(name='AliasExperimentId', example='L1#EG1#E1'),
      buckets?: string(name='Buckets', example='1,2,3'),
      config?: string(name='Config', example='{}'),
      debugCrowdId?: string(name='DebugCrowdId', example='3'),
      debugUsers?: string(name='DebugUsers', example='uid1,uid2,uid3'),
      description?: string(name='Description', example='This is a test.'),
      experimentGroupId?: string(name='ExperimentGroupId', example='3'),
      experimentId?: string(name='ExperimentId', example='3'),
      flowPercent?: int32(name='FlowPercent', example='100'),
      gmtCreateTime?: string(name='GmtCreateTime', example='2021-12-15T23:24:33.132+08:00'),
      gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-12-15T23:24:33.132+08:00'),
      laboratoryId?: string(name='LaboratoryId', example='3'),
      layerId?: string(name='LayerId', example='3'),
      name?: string(name='Name', example='experiment_test1'),
      sceneId?: string(name='SceneId', example='3'),
      status?: string(name='Status', example='Offline'),
      type?: string(name='Type', example='Baseline'),
    }
  ](name='Experiments'),
  requestId?: string(name='RequestId', description='Id of the request', example='68075085-1A7D-55C2-B51D-7AD9B02A6DD6'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListExperimentsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListExperimentsResponseBody(name='body'),
}

async function listExperimentsWithOptions(request: ListExperimentsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListExperimentsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.experimentGroupId)) {
    query['ExperimentGroupId'] = request.experimentGroupId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.query)) {
    query['Query'] = request.query;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListExperiments',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/experiments`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listExperiments(request: ListExperimentsRequest): ListExperimentsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listExperimentsWithOptions(request, headers, runtime);
}

model ListFeatureConsistencyCheckJobConfigsRequest {
  instanceId?: string(name='InstanceId', example='pairec-cn-********'),
  order?: string(name='Order', example='ASC'),
  pageNumber?: string(name='PageNumber', example='1'),
  pageSize?: string(name='PageSize', example='10'),
  sortBy?: string(name='SortBy', example='GmtCreateTime'),
}

model ListFeatureConsistencyCheckJobConfigsResponseBody = {
  featureConsistencyCheckConfigs?: [ 
    {
      compareFeature?: boolean(name='CompareFeature', example='true'),
      easServiceName?: string(name='EasServiceName', example='eas_service_1'),
      easyRecPackagePath?: string(name='EasyRecPackagePath', example='oss://*******'),
      easyRecVersion?: string(name='EasyRecVersion', example='1.3.60'),
      featureConsistencyCheckJobConfigId?: string(name='FeatureConsistencyCheckJobConfigId', example='3'),
      featureDisplayExclude?: string(name='FeatureDisplayExclude', example='feature1,feature2'),
      featureLandingResourceId?: string(name='FeatureLandingResourceId', example='reso-********'),
      featureLandingResourceUri?: string(name='FeatureLandingResourceUri', example='mc_project_1'),
      featurePriority?: string(name='FeaturePriority', example='feature1,feature2,feature3'),
      fgJarVersion?: string(name='FgJarVersion', example='1.0.0'),
      fgJsonFileName?: string(name='FgJsonFileName', example='file.json'),
      generateZip?: boolean(name='GenerateZip', example='true'),
      gmtCreateTime?: string(name='GmtCreateTime', example='2021-12-15T23:24:33.132+08:00'),
      gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-12-15T23:24:33.132+08:00'),
      itemIdField?: string(name='ItemIdField', example='item_id'),
      itemTable?: string(name='ItemTable', example='item_table'),
      itemTablePartitionField?: string(name='ItemTablePartitionField', example='ds'),
      itemTablePartitionFieldFormat?: string(name='ItemTablePartitionFieldFormat', example='yyyymmdd'),
      latestJobGmtSamplingEndTime?: string(name='LatestJobGmtSamplingEndTime', example='2021-12-15T23:24:33.132+08:00'),
      latestJobGmtSamplingStartTime?: string(name='LatestJobGmtSamplingStartTime', example='2021-12-15T23:24:33.132+08:00'),
      latestJobId?: string(name='LatestJobId', example='3'),
      name?: string(name='Name', example='feature_consistency_check1'),
      ossBucket?: string(name='OssBucket', example='oss_bucket_1'),
      ossResourceId?: string(name='OssResourceId', example='reso-********'),
      sampleRate?: string(name='SampleRate', example='0.89'),
      sceneId?: string(name='SceneId', example='3'),
      sceneName?: string(name='SceneName', example='scene1'),
      serviceId?: string(name='ServiceId', example='4'),
      serviceName?: string(name='ServiceName', example='service1'),
      status?: string(name='Status', example='Editable'),
      userIdField?: string(name='UserIdField', example='user_id'),
      userTable?: string(name='UserTable', example='user_table'),
      userTablePartitionField?: string(name='UserTablePartitionField', example='ds'),
      userTablePartitionFieldFormat?: string(name='UserTablePartitionFieldFormat', example='yyyymmdd'),
      workflowName?: string(name='WorkflowName', example='work_flow_1'),
    }
  ](name='FeatureConsistencyCheckConfigs'),
  requestId?: string(name='RequestId', example='FCF741D8-9C30-578E-807F-B935487DB34A'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListFeatureConsistencyCheckJobConfigsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFeatureConsistencyCheckJobConfigsResponseBody(name='body'),
}

async function listFeatureConsistencyCheckJobConfigsWithOptions(request: ListFeatureConsistencyCheckJobConfigsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListFeatureConsistencyCheckJobConfigsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListFeatureConsistencyCheckJobConfigs',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/featureconsistencycheck/jobconfigs`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listFeatureConsistencyCheckJobConfigs(request: ListFeatureConsistencyCheckJobConfigsRequest): ListFeatureConsistencyCheckJobConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listFeatureConsistencyCheckJobConfigsWithOptions(request, headers, runtime);
}

model ListFeatureConsistencyCheckJobFeatureReportsRequest {
  instanceId?: string(name='InstanceId', example='pairec-cn-********'),
  logItemId?: string(name='LogItemId', example='9010'),
  logRequestId?: string(name='LogRequestId', example='F7AC05FF-EDE7-5C2B-B9AE-33D6DF4178BA'),
  logUserId?: string(name='LogUserId', example='1010'),
}

model ListFeatureConsistencyCheckJobFeatureReportsResponseBody = {
  dataPath?: string(name='DataPath', example='https://********'),
  ossPath?: string(name='OssPath', example='oss://********'),
  reportsOfFeatureDiff?: [ 
    {
      featureName?: string(name='FeatureName', example='gender'),
      logItemId?: string(name='LogItemId', example='9010'),
      logRequestId?: string(name='LogRequestId', example='F7AC05FF-EDE7-5C2B-B9AE-33D6DF4178BA'),
      logUserId?: string(name='LogUserId', example='1010'),
      offlineValue?: string(name='OfflineValue', example='male'),
      onlineValue?: string(name='OnlineValue', example='male'),
    }
  ](name='ReportsOfFeatureDiff'),
  requestId?: string(name='RequestId', example='BBD41FBF-E75C-551A-92FA-CAD654AA006F'),
}

model ListFeatureConsistencyCheckJobFeatureReportsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFeatureConsistencyCheckJobFeatureReportsResponseBody(name='body'),
}

async function listFeatureConsistencyCheckJobFeatureReportsWithOptions(FeatureConsistencyCheckJobId: string, request: ListFeatureConsistencyCheckJobFeatureReportsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListFeatureConsistencyCheckJobFeatureReportsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.logItemId)) {
    query['LogItemId'] = request.logItemId;
  }
  if (!Util.isUnset(request.logRequestId)) {
    query['LogRequestId'] = request.logRequestId;
  }
  if (!Util.isUnset(request.logUserId)) {
    query['LogUserId'] = request.logUserId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListFeatureConsistencyCheckJobFeatureReports',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/featureconsistencycheck/jobs/${OpenApiUtil.getEncodeParam(FeatureConsistencyCheckJobId)}/featurereports`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listFeatureConsistencyCheckJobFeatureReports(FeatureConsistencyCheckJobId: string, request: ListFeatureConsistencyCheckJobFeatureReportsRequest): ListFeatureConsistencyCheckJobFeatureReportsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listFeatureConsistencyCheckJobFeatureReportsWithOptions(FeatureConsistencyCheckJobId, request, headers, runtime);
}

model ListFeatureConsistencyCheckJobScoreReportsRequest {
  excludeRequestIds?: [ string ](name='ExcludeRequestIds'),
  instanceId?: string(name='InstanceId', example='pairec-cn-********'),
}

model ListFeatureConsistencyCheckJobScoreReportsShrinkRequest {
  excludeRequestIdsShrink?: string(name='ExcludeRequestIds'),
  instanceId?: string(name='InstanceId', example='pairec-cn-********'),
}

model ListFeatureConsistencyCheckJobScoreReportsResponseBody = {
  dataPath?: string(name='DataPath', example='http://*******'),
  ossPath?: string(name='OssPath', example='oss://********'),
  reportsOfScoreDiff?: [ 
    {
      logItemId?: string(name='LogItemId', example='4'),
      logRequestId?: string(name='LogRequestId', example='323'),
      logUserId?: string(name='LogUserId', example='3'),
      scoreDiff?: string(name='ScoreDiff', example='0.00000234'),
      scoreDiffDetail?: string(name='ScoreDiffDetail', example='{}'),
    }
  ](name='ReportsOfScoreDiff'),
  requestId?: string(name='RequestId', example='F0AB6527-093F-5C44-B3BD-42C8C210C619'),
}

model ListFeatureConsistencyCheckJobScoreReportsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFeatureConsistencyCheckJobScoreReportsResponseBody(name='body'),
}

async function listFeatureConsistencyCheckJobScoreReportsWithOptions(FeatureConsistencyCheckJobId: string, tmpReq: ListFeatureConsistencyCheckJobScoreReportsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListFeatureConsistencyCheckJobScoreReportsResponse {
  Util.validateModel(tmpReq);
  var request = new ListFeatureConsistencyCheckJobScoreReportsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.excludeRequestIds)) {
    request.excludeRequestIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.excludeRequestIds, 'ExcludeRequestIds', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.excludeRequestIdsShrink)) {
    query['ExcludeRequestIds'] = request.excludeRequestIdsShrink;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListFeatureConsistencyCheckJobScoreReports',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/featureconsistencycheck/jobs/${OpenApiUtil.getEncodeParam(FeatureConsistencyCheckJobId)}/scorereports`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listFeatureConsistencyCheckJobScoreReports(FeatureConsistencyCheckJobId: string, request: ListFeatureConsistencyCheckJobScoreReportsRequest): ListFeatureConsistencyCheckJobScoreReportsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listFeatureConsistencyCheckJobScoreReportsWithOptions(FeatureConsistencyCheckJobId, request, headers, runtime);
}

model ListFeatureConsistencyCheckJobsRequest {
  instanceId?: string(name='InstanceId', example='pairec-cn-********'),
  order?: string(name='Order', example='ASC'),
  pageNumber?: string(name='PageNumber', example='1'),
  pageSize?: string(name='PageSize', example='10'),
  sortBy?: string(name='SortBy', example='GmtCreateTime'),
  status?: string(name='Status', example='Running'),
}

model ListFeatureConsistencyCheckJobsResponseBody = {
  featureConsistencyCheckJobs?: [ 
    {
      config?: string(name='Config', example='{}'),
      featureConsistencyCheckJobConfigId?: string(name='FeatureConsistencyCheckJobConfigId', example='5'),
      featureConsistencyCheckJobConfigName?: string(name='FeatureConsistencyCheckJobConfigName', example='feature_consistency_check_1'),
      featureConsistencyCheckJobId?: string(name='FeatureConsistencyCheckJobId', example='4'),
      gmtEndTime?: string(name='GmtEndTime', example='2021-12-15T23:24:33.132+08:00'),
      gmtStartTime?: string(name='GmtStartTime', example='2021-12-15T23:24:33.132+08:00'),
      logs?: [ string ](name='Logs'),
      status?: string(name='Status', example='Running'),
    }
  ](name='FeatureConsistencyCheckJobs'),
  requestId?: string(name='RequestId', example='A04CB8C0-E74A-5E83-BC61-64D153574EC7'),
  totalCount?: string(name='TotalCount', example='10'),
}

model ListFeatureConsistencyCheckJobsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFeatureConsistencyCheckJobsResponseBody(name='body'),
}

async function listFeatureConsistencyCheckJobsWithOptions(request: ListFeatureConsistencyCheckJobsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListFeatureConsistencyCheckJobsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListFeatureConsistencyCheckJobs',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/featureconsistencycheck/jobs`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listFeatureConsistencyCheckJobs(request: ListFeatureConsistencyCheckJobsRequest): ListFeatureConsistencyCheckJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listFeatureConsistencyCheckJobsWithOptions(request, headers, runtime);
}

model ListInstancesRequest {
  instanceId?: string(name='InstanceId', example='pairec-test1'),
  order?: string(name='Order', example='Desc'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='50'),
  sortBy?: string(name='SortBy', example='Type'),
  type?: string(name='Type', example='basic'),
}

model ListInstancesResponseBody = {
  instances?: [ 
    {
      chargeType?: string(name='ChargeType', example='Subscription'),
      commodityCode?: string(name='CommodityCode', example='airec_developers_public_cn'),
      config?: {
        dataManagements?: [ 
          {
            componentCode?: string(name='ComponentCode', example='storage'),
            meta?: map[string]any(name='Meta'),
            type?: string(name='Type', example='OSS'),
          }
        ](name='DataManagements'),
        engines?: [ 
          {
            componentCode?: string(name='ComponentCode', example='feature'),
            meta?: map[string]any(name='Meta'),
            type?: string(name='Type', example='Hologres'),
          }
        ](name='Engines'),
        monitors?: [ 
          {
            componentCode?: string(name='ComponentCode', example='featuresets'),
            meta?: map[string]any(name='Meta'),
            type?: string(name='Type', example='Platform'),
          }
        ](name='Monitors'),
      }(name='Config'),
      expiredTime?: string(name='ExpiredTime', example='2022-12-14 00:00:00.0'),
      gmtCreateTime?: string(name='GmtCreateTime', example='2022-10-13 17:34:52.0'),
      gmtModifiedTime?: string(name='GmtModifiedTime', example='2022-11-05 09:02:30.0'),
      instanceId?: string(name='InstanceId', example='pairec-test1'),
      regionId?: string(name='RegionId', example='cn-shenzhen'),
      status?: string(name='Status', example='Initializing'),
      type?: string(name='Type', example='basic'),
    }
  ](name='Instances'),
  requestId?: string(name='RequestId', example='BDB621CB-A81E-5D39-8793-39A365CBCC74'),
  totalCount?: int32(name='TotalCount', example='7'),
}

model ListInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstancesResponseBody(name='body'),
}

async function listInstancesWithOptions(request: ListInstancesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListInstancesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListInstances',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listInstancesWithOptions(request, headers, runtime);
}

model ListLaboratoriesRequest {
  environment?: string(name='Environment', example='Daily'),
  instanceId?: string(name='InstanceId', example='pairec-test1'),
  sceneId?: string(name='SceneId', example='3'),
  status?: string(name='Status', example='Offline'),
}

model ListLaboratoriesResponseBody = {
  laboratories?: [ 
    {
      bucketCount?: int32(name='BucketCount', example='100'),
      bucketType?: string(name='BucketType', example='Filter'),
      buckets?: string(name='Buckets', example='1,2,3,10-20'),
      crowdId?: string(name='CrowdId', example='3'),
      debugCrowdId?: string(name='DebugCrowdId', example='3'),
      debugUsers?: string(name='DebugUsers', example='user1,user2,user3'),
      description?: string(name='Description', example='This is a test.'),
      environment?: string(name='Environment', example='Daily'),
      filter?: string(name='Filter', example='filter=xxx'),
      laboratoryId?: string(name='LaboratoryId', example='3'),
      name?: string(name='Name', example='laboratory1'),
      sceneId?: string(name='SceneId', example='3'),
      status?: string(name='Status', example='Offline'),
      type?: string(name='Type', example='Base'),
    }
  ](name='Laboratories'),
  requestId?: string(name='RequestId', description='Id of the request', example='1C0898E5-9220-5443-B2D9-445FF0688215'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListLaboratoriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListLaboratoriesResponseBody(name='body'),
}

async function listLaboratoriesWithOptions(request: ListLaboratoriesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListLaboratoriesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.environment)) {
    query['Environment'] = request.environment;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.sceneId)) {
    query['SceneId'] = request.sceneId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListLaboratories',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/laboratories`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listLaboratories(request: ListLaboratoriesRequest): ListLaboratoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listLaboratoriesWithOptions(request, headers, runtime);
}

model ListLayersRequest {
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234'),
  laboratoryId?: string(name='LaboratoryId', example='3'),
}

model ListLayersResponseBody = {
  layers?: [ 
    {
      description?: string(name='Description', example='This is a test.'),
      laboratoryId?: string(name='LaboratoryId', example='3'),
      layerId?: string(name='LayerId', example='3'),
      name?: string(name='Name', example='layer1'),
      sceneId?: string(name='SceneId', example='3'),
    }
  ](name='Layers'),
  requestId?: string(name='RequestId', description='Id of the request', example='518C64F6-DFF7-11ED-85B0-00163E14B3D1'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListLayersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListLayersResponseBody(name='body'),
}

async function listLayersWithOptions(request: ListLayersRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListLayersResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.laboratoryId)) {
    query['LaboratoryId'] = request.laboratoryId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListLayers',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/layers`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listLayers(request: ListLayersRequest): ListLayersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listLayersWithOptions(request, headers, runtime);
}

model ListParamsRequest {
  environment?: string(name='Environment', example='Daily'),
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234'),
  name?: string(name='Name', example='home'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='50'),
  sceneId?: string(name='SceneId', example='3'),
}

model ListParamsResponseBody = {
  params?: [ 
    {
      environment?: string(name='Environment', example='Daily'),
      gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-12-15T23:24:33.132+08:00'),
      name?: string(name='Name', example='home'),
      paramId?: string(name='ParamId', example='4'),
      value?: string(name='Value', example='house'),
    }
  ](name='Params'),
  requestId?: string(name='RequestId', description='Id of the request', example='A2D07551-38DA-531E-9B22-877D1D86A579'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListParamsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListParamsResponseBody(name='body'),
}

async function listParamsWithOptions(request: ListParamsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListParamsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.environment)) {
    query['Environment'] = request.environment;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sceneId)) {
    query['SceneId'] = request.sceneId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListParams',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/params`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listParams(request: ListParamsRequest): ListParamsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listParamsWithOptions(request, headers, runtime);
}

model ListScenesRequest {
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234'),
  name?: string(name='Name', example='scene1'),
}

model ListScenesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='B8987BF7-6028-5B17-80E0-251B7BD67BBA'),
  scenes?: [ 
    {
      description?: string(name='Description', example='This is a test.'),
      flows?: [ 
        {
          flowCode?: string(name='FlowCode', example='liuliang1'),
          flowName?: string(name='FlowName', example='流量1'),
        }
      ](name='Flows'),
      name?: string(name='Name', example='scene1'),
      sceneId?: string(name='SceneId', example='3'),
    }
  ](name='Scenes'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListScenesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListScenesResponseBody(name='body'),
}

async function listScenesWithOptions(request: ListScenesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListScenesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListScenes',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/scenes`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listScenes(request: ListScenesRequest): ListScenesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listScenesWithOptions(request, headers, runtime);
}

model ListSubCrowdsRequest {
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234'),
}

model ListSubCrowdsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='C5AEB79E-FAA4-5DCE-8CD7-1CAF549ECC3E'),
  subCrowds?: [ 
    {
      gmtCreateTime?: string(name='GmtCreateTime', example='2021-12-15T23:24:33.132+08:00'),
      quantity?: int32(name='Quantity', example='2'),
      source?: string(name='Source', example='ManualInput'),
      subCrowdId?: string(name='SubCrowdId', example='3'),
      users?: string(name='Users', example='user1,user2'),
    }
  ](name='SubCrowds'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListSubCrowdsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSubCrowdsResponseBody(name='body'),
}

async function listSubCrowdsWithOptions(CrowdId: string, request: ListSubCrowdsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSubCrowdsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSubCrowds',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/crowds/${OpenApiUtil.getEncodeParam(CrowdId)}/subcrowds`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSubCrowds(CrowdId: string, request: ListSubCrowdsRequest): ListSubCrowdsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listSubCrowdsWithOptions(CrowdId, request, headers, runtime);
}

model OfflineExperimentRequest {
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234'),
}

model OfflineExperimentResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='872951C9-7755-5FA1-AACD-7F9375A6D27A'),
}

model OfflineExperimentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OfflineExperimentResponseBody(name='body'),
}

async function offlineExperimentWithOptions(ExperimentId: string, request: OfflineExperimentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OfflineExperimentResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'OfflineExperiment',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/experiments/${OpenApiUtil.getEncodeParam(ExperimentId)}/action/offline`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function offlineExperiment(ExperimentId: string, request: OfflineExperimentRequest): OfflineExperimentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return offlineExperimentWithOptions(ExperimentId, request, headers, runtime);
}

model OfflineExperimentGroupRequest {
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234'),
}

model OfflineExperimentGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='518C64F6-DFF7-11ED-85B0-00163E14B3D1'),
}

model OfflineExperimentGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OfflineExperimentGroupResponseBody(name='body'),
}

async function offlineExperimentGroupWithOptions(ExperimentGroupId: string, request: OfflineExperimentGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OfflineExperimentGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'OfflineExperimentGroup',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/experimentgroups/${OpenApiUtil.getEncodeParam(ExperimentGroupId)}/action/offline`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function offlineExperimentGroup(ExperimentGroupId: string, request: OfflineExperimentGroupRequest): OfflineExperimentGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return offlineExperimentGroupWithOptions(ExperimentGroupId, request, headers, runtime);
}

model OfflineLaboratoryRequest {
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234'),
}

model OfflineLaboratoryResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='59CE7EC6-F268-5D71-9215-32922CC50D72'),
}

model OfflineLaboratoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OfflineLaboratoryResponseBody(name='body'),
}

async function offlineLaboratoryWithOptions(LaboratoryId: string, request: OfflineLaboratoryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OfflineLaboratoryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'OfflineLaboratory',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/laboratories/${OpenApiUtil.getEncodeParam(LaboratoryId)}/action/offline`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function offlineLaboratory(LaboratoryId: string, request: OfflineLaboratoryRequest): OfflineLaboratoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return offlineLaboratoryWithOptions(LaboratoryId, request, headers, runtime);
}

model OnlineExperimentRequest {
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234'),
}

model OnlineExperimentResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='6CF1E160-3F36-5E73-A170-C75504F05BBC'),
}

model OnlineExperimentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OnlineExperimentResponseBody(name='body'),
}

async function onlineExperimentWithOptions(ExperimentId: string, request: OnlineExperimentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OnlineExperimentResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'OnlineExperiment',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/experiments/${OpenApiUtil.getEncodeParam(ExperimentId)}/action/online`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function onlineExperiment(ExperimentId: string, request: OnlineExperimentRequest): OnlineExperimentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return onlineExperimentWithOptions(ExperimentId, request, headers, runtime);
}

model OnlineExperimentGroupRequest {
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234'),
}

model OnlineExperimentGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='47F761ED-BE4E-51A6-B678-78E1490DF313'),
}

model OnlineExperimentGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OnlineExperimentGroupResponseBody(name='body'),
}

async function onlineExperimentGroupWithOptions(ExperimentGroupId: string, request: OnlineExperimentGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OnlineExperimentGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'OnlineExperimentGroup',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/experimentgroups/${OpenApiUtil.getEncodeParam(ExperimentGroupId)}/action/online`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function onlineExperimentGroup(ExperimentGroupId: string, request: OnlineExperimentGroupRequest): OnlineExperimentGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return onlineExperimentGroupWithOptions(ExperimentGroupId, request, headers, runtime);
}

model OnlineLaboratoryRequest {
  instanceId?: string(name='InstanceId', example='pairec-test1'),
}

model OnlineLaboratoryResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='8C27790E-CCA5-56BB-BA17-646295DEC0A2'),
}

model OnlineLaboratoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OnlineLaboratoryResponseBody(name='body'),
}

async function onlineLaboratoryWithOptions(LaboratoryId: string, request: OnlineLaboratoryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OnlineLaboratoryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'OnlineLaboratory',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/laboratories/${OpenApiUtil.getEncodeParam(LaboratoryId)}/action/online`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function onlineLaboratory(LaboratoryId: string, request: OnlineLaboratoryRequest): OnlineLaboratoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return onlineLaboratoryWithOptions(LaboratoryId, request, headers, runtime);
}

model PushAllExperimentRequest {
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234'),
}

model PushAllExperimentResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='74D958EF-3598-56FA-8296-FF1575CE43DF'),
}

model PushAllExperimentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PushAllExperimentResponseBody(name='body'),
}

async function pushAllExperimentWithOptions(ExperimentId: string, request: PushAllExperimentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PushAllExperimentResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PushAllExperiment',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/experiments/${OpenApiUtil.getEncodeParam(ExperimentId)}/action/pushall`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pushAllExperiment(ExperimentId: string, request: PushAllExperimentRequest): PushAllExperimentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return pushAllExperimentWithOptions(ExperimentId, request, headers, runtime);
}

model SyncFeatureConsistencyCheckJobReplayLogRequest {
  contextFeatures?: string(name='ContextFeatures', example='[{\\"Value\\":{\\"FloatFeature\\":0.1}}]'),
  featureConsistencyCheckJobConfigId?: string(name='FeatureConsistencyCheckJobConfigId', example='3'),
  generatedFeatures?: string(name='GeneratedFeatures', example='week_day:1 | userid:3 | itemid:9001 | cate:cat1 | click_5_seq__cate:cat1'),
  instanceId?: string(name='InstanceId', example='pairec-cn-********'),
  logItemId?: string(name='LogItemId', example='9010'),
  logRequestId?: string(name='LogRequestId', example='728C5E01-ABF6-5AA8-B9FC-B3BA05DECC77'),
  logRequestTime?: long(name='LogRequestTime', example='1693900981465'),
  logUserId?: string(name='LogUserId', example='1010'),
  rawFeatures?: string(name='RawFeatures'),
  sceneName?: string(name='SceneName', example='video-feed'),
}

model SyncFeatureConsistencyCheckJobReplayLogResponseBody = {
  requestId?: string(name='RequestId', example='C7D0B48F-0105-52B9-B60A-FA7606E2234D'),
}

model SyncFeatureConsistencyCheckJobReplayLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SyncFeatureConsistencyCheckJobReplayLogResponseBody(name='body'),
}

async function syncFeatureConsistencyCheckJobReplayLogWithOptions(request: SyncFeatureConsistencyCheckJobReplayLogRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SyncFeatureConsistencyCheckJobReplayLogResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.contextFeatures)) {
    body['ContextFeatures'] = request.contextFeatures;
  }
  if (!Util.isUnset(request.featureConsistencyCheckJobConfigId)) {
    body['FeatureConsistencyCheckJobConfigId'] = request.featureConsistencyCheckJobConfigId;
  }
  if (!Util.isUnset(request.generatedFeatures)) {
    body['GeneratedFeatures'] = request.generatedFeatures;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.logItemId)) {
    body['LogItemId'] = request.logItemId;
  }
  if (!Util.isUnset(request.logRequestId)) {
    body['LogRequestId'] = request.logRequestId;
  }
  if (!Util.isUnset(request.logRequestTime)) {
    body['LogRequestTime'] = request.logRequestTime;
  }
  if (!Util.isUnset(request.logUserId)) {
    body['LogUserId'] = request.logUserId;
  }
  if (!Util.isUnset(request.rawFeatures)) {
    body['RawFeatures'] = request.rawFeatures;
  }
  if (!Util.isUnset(request.sceneName)) {
    body['SceneName'] = request.sceneName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SyncFeatureConsistencyCheckJobReplayLog',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/featureconsistencycheck/jobs/action/syncreplaylog`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function syncFeatureConsistencyCheckJobReplayLog(request: SyncFeatureConsistencyCheckJobReplayLogRequest): SyncFeatureConsistencyCheckJobReplayLogResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return syncFeatureConsistencyCheckJobReplayLogWithOptions(request, headers, runtime);
}

model TerminateFeatureConsistencyCheckJobRequest {
  instanceId?: string(name='InstanceId', example='pairec-cn-********'),
}

model TerminateFeatureConsistencyCheckJobResponseBody = {
  requestId?: string(name='RequestId', example='A6C01890-54CA-5C49-BC91-AD85A98E4A98'),
}

model TerminateFeatureConsistencyCheckJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TerminateFeatureConsistencyCheckJobResponseBody(name='body'),
}

async function terminateFeatureConsistencyCheckJobWithOptions(FeatureConsistencyCheckJobId: string, request: TerminateFeatureConsistencyCheckJobRequest, headers: map[string]string, runtime: Util.RuntimeOptions): TerminateFeatureConsistencyCheckJobResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TerminateFeatureConsistencyCheckJob',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/featureconsistencycheck/jobs/${OpenApiUtil.getEncodeParam(FeatureConsistencyCheckJobId)}/action/terminate`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function terminateFeatureConsistencyCheckJob(FeatureConsistencyCheckJobId: string, request: TerminateFeatureConsistencyCheckJobRequest): TerminateFeatureConsistencyCheckJobResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return terminateFeatureConsistencyCheckJobWithOptions(FeatureConsistencyCheckJobId, request, headers, runtime);
}

model UpdateCrowdRequest {
  description?: string(name='Description', example='This is a test.'),
  instanceId?: string(name='InstanceId', example='pairec-test1'),
  name?: string(name='Name', example='xx人群'),
}

model UpdateCrowdResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='8C27790E-CCA5-56BB-BA17-646295DEC0A2'),
}

model UpdateCrowdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateCrowdResponseBody(name='body'),
}

async function updateCrowdWithOptions(CrowdId: string, request: UpdateCrowdRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateCrowdResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateCrowd',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/crowds/${OpenApiUtil.getEncodeParam(CrowdId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateCrowd(CrowdId: string, request: UpdateCrowdRequest): UpdateCrowdResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateCrowdWithOptions(CrowdId, request, headers, runtime);
}

model UpdateExperimentRequest {
  config?: string(name='Config', example='{"RankBy": "Score"}'),
  debugCrowdId?: string(name='DebugCrowdId', example='3'),
  debugUsers?: string(name='DebugUsers', example='1124512470******,1124512471******,1124512472******'),
  description?: string(name='Description', example='This is a test.'),
  flowPercent?: int32(name='FlowPercent', example='100'),
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234'),
  name?: string(name='Name', example='experiment_test'),
  type?: string(name='Type', example='Baseline'),
}

model UpdateExperimentResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='A760D972-1475-58C0-BBB3-92B5FB08904F'),
}

model UpdateExperimentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateExperimentResponseBody(name='body'),
}

async function updateExperimentWithOptions(ExperimentId: string, request: UpdateExperimentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateExperimentResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.config)) {
    body['Config'] = request.config;
  }
  if (!Util.isUnset(request.debugCrowdId)) {
    body['DebugCrowdId'] = request.debugCrowdId;
  }
  if (!Util.isUnset(request.debugUsers)) {
    body['DebugUsers'] = request.debugUsers;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.flowPercent)) {
    body['FlowPercent'] = request.flowPercent;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateExperiment',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/experiments/${OpenApiUtil.getEncodeParam(ExperimentId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateExperiment(ExperimentId: string, request: UpdateExperimentRequest): UpdateExperimentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateExperimentWithOptions(ExperimentId, request, headers, runtime);
}

model UpdateExperimentGroupRequest {
  config?: string(name='Config', example='{"RankBy": "Score"}'),
  crowdId?: string(name='CrowdId', example='3'),
  debugCrowdId?: string(name='DebugCrowdId', example='3'),
  debugUsers?: string(name='DebugUsers', example='user1,user2,user3'),
  description?: string(name='Description', example='This is a test.'),
  distributionTimeDuration?: int32(name='DistributionTimeDuration', example='3'),
  distributionType?: string(name='DistributionType', example='UserId'),
  filter?: string(name='Filter', example='gender=male'),
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234'),
  layerId?: string(name='LayerId', example='3'),
  name?: string(name='Name', example='experiment_group1'),
  needAA?: boolean(name='NeedAA', example='true'),
  reservcedBuckets?: string(name='ReservcedBuckets', example='1,2,3'),
}

model UpdateExperimentGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='F7AC05FF-EDE7-5C2B-B9AE-33D6DF4178BA'),
}

model UpdateExperimentGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateExperimentGroupResponseBody(name='body'),
}

async function updateExperimentGroupWithOptions(ExperimentGroupId: string, request: UpdateExperimentGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateExperimentGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.config)) {
    body['Config'] = request.config;
  }
  if (!Util.isUnset(request.crowdId)) {
    body['CrowdId'] = request.crowdId;
  }
  if (!Util.isUnset(request.debugCrowdId)) {
    body['DebugCrowdId'] = request.debugCrowdId;
  }
  if (!Util.isUnset(request.debugUsers)) {
    body['DebugUsers'] = request.debugUsers;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.distributionTimeDuration)) {
    body['DistributionTimeDuration'] = request.distributionTimeDuration;
  }
  if (!Util.isUnset(request.distributionType)) {
    body['DistributionType'] = request.distributionType;
  }
  if (!Util.isUnset(request.filter)) {
    body['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.layerId)) {
    body['LayerId'] = request.layerId;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.needAA)) {
    body['NeedAA'] = request.needAA;
  }
  if (!Util.isUnset(request.reservcedBuckets)) {
    body['ReservcedBuckets'] = request.reservcedBuckets;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateExperimentGroup',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/experimentgroups/${OpenApiUtil.getEncodeParam(ExperimentGroupId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateExperimentGroup(ExperimentGroupId: string, request: UpdateExperimentGroupRequest): UpdateExperimentGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateExperimentGroupWithOptions(ExperimentGroupId, request, headers, runtime);
}

model UpdateFeatureConsistencyCheckJobConfigRequest {
  compareFeature?: boolean(name='CompareFeature', example='true'),
  easServiceName?: string(name='EasServiceName', example='service_123'),
  easyRecPackagePath?: string(name='EasyRecPackagePath', example='oss://********'),
  easyRecVersion?: string(name='EasyRecVersion', example='1.3.60'),
  featureDisplayExclude?: string(name='FeatureDisplayExclude', example='feature1,feature2'),
  featureLandingResourceId?: string(name='FeatureLandingResourceId', example='reso-********'),
  featurePriority?: string(name='FeaturePriority', example='feature1,feature2,feature3'),
  fgJarVersion?: string(name='FgJarVersion', example='1.0.0'),
  fgJsonFileName?: string(name='FgJsonFileName', example='file.json'),
  generateZip?: boolean(name='GenerateZip', example='true'),
  instanceId?: string(name='InstanceId', example='pairec-cn-********'),
  itemIdField?: string(name='ItemIdField', example='item_id'),
  itemTable?: string(name='ItemTable', example='item_table'),
  itemTablePartitionField?: string(name='ItemTablePartitionField', example='ds'),
  itemTablePartitionFieldFormat?: string(name='ItemTablePartitionFieldFormat', example='yyyymmdd'),
  name?: string(name='Name', example='feature_consistency_check1'),
  ossResourceId?: string(name='OssResourceId', example='reso-********'),
  sampleRate?: double(name='SampleRate', example='0.89'),
  sceneId?: string(name='SceneId', example='3'),
  serviceId?: string(name='ServiceId', example='4'),
  userIdField?: string(name='UserIdField', example='user_id'),
  userTable?: string(name='UserTable', example='user_table'),
  userTablePartitionField?: string(name='UserTablePartitionField', example='ds'),
  userTablePartitionFieldFormat?: string(name='UserTablePartitionFieldFormat', example='yyyymmdd'),
  workflowName?: string(name='WorkflowName', example='work_flow_1'),
}

model UpdateFeatureConsistencyCheckJobConfigResponseBody = {
  requestId?: string(name='RequestId', example='A04CB8C0-E74A-5E83-BC61-64D153574EC7'),
}

model UpdateFeatureConsistencyCheckJobConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateFeatureConsistencyCheckJobConfigResponseBody(name='body'),
}

async function updateFeatureConsistencyCheckJobConfigWithOptions(FeatureConsistencyCheckJobConfigId: string, request: UpdateFeatureConsistencyCheckJobConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateFeatureConsistencyCheckJobConfigResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.compareFeature)) {
    body['CompareFeature'] = request.compareFeature;
  }
  if (!Util.isUnset(request.easServiceName)) {
    body['EasServiceName'] = request.easServiceName;
  }
  if (!Util.isUnset(request.easyRecPackagePath)) {
    body['EasyRecPackagePath'] = request.easyRecPackagePath;
  }
  if (!Util.isUnset(request.easyRecVersion)) {
    body['EasyRecVersion'] = request.easyRecVersion;
  }
  if (!Util.isUnset(request.featureDisplayExclude)) {
    body['FeatureDisplayExclude'] = request.featureDisplayExclude;
  }
  if (!Util.isUnset(request.featureLandingResourceId)) {
    body['FeatureLandingResourceId'] = request.featureLandingResourceId;
  }
  if (!Util.isUnset(request.featurePriority)) {
    body['FeaturePriority'] = request.featurePriority;
  }
  if (!Util.isUnset(request.fgJarVersion)) {
    body['FgJarVersion'] = request.fgJarVersion;
  }
  if (!Util.isUnset(request.fgJsonFileName)) {
    body['FgJsonFileName'] = request.fgJsonFileName;
  }
  if (!Util.isUnset(request.generateZip)) {
    body['GenerateZip'] = request.generateZip;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.itemIdField)) {
    body['ItemIdField'] = request.itemIdField;
  }
  if (!Util.isUnset(request.itemTable)) {
    body['ItemTable'] = request.itemTable;
  }
  if (!Util.isUnset(request.itemTablePartitionField)) {
    body['ItemTablePartitionField'] = request.itemTablePartitionField;
  }
  if (!Util.isUnset(request.itemTablePartitionFieldFormat)) {
    body['ItemTablePartitionFieldFormat'] = request.itemTablePartitionFieldFormat;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.ossResourceId)) {
    body['OssResourceId'] = request.ossResourceId;
  }
  if (!Util.isUnset(request.sampleRate)) {
    body['SampleRate'] = request.sampleRate;
  }
  if (!Util.isUnset(request.sceneId)) {
    body['SceneId'] = request.sceneId;
  }
  if (!Util.isUnset(request.serviceId)) {
    body['ServiceId'] = request.serviceId;
  }
  if (!Util.isUnset(request.userIdField)) {
    body['UserIdField'] = request.userIdField;
  }
  if (!Util.isUnset(request.userTable)) {
    body['UserTable'] = request.userTable;
  }
  if (!Util.isUnset(request.userTablePartitionField)) {
    body['UserTablePartitionField'] = request.userTablePartitionField;
  }
  if (!Util.isUnset(request.userTablePartitionFieldFormat)) {
    body['UserTablePartitionFieldFormat'] = request.userTablePartitionFieldFormat;
  }
  if (!Util.isUnset(request.workflowName)) {
    body['WorkflowName'] = request.workflowName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateFeatureConsistencyCheckJobConfig',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/featureconsistencycheck/jobconfigs/${OpenApiUtil.getEncodeParam(FeatureConsistencyCheckJobConfigId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateFeatureConsistencyCheckJobConfig(FeatureConsistencyCheckJobConfigId: string, request: UpdateFeatureConsistencyCheckJobConfigRequest): UpdateFeatureConsistencyCheckJobConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateFeatureConsistencyCheckJobConfigWithOptions(FeatureConsistencyCheckJobConfigId, request, headers, runtime);
}

model UpdateLaboratoryRequest {
  bucketCount?: int32(name='BucketCount', example='24'),
  bucketType?: string(name='BucketType', example='Filter'),
  buckets?: string(name='Buckets', example='1,2,3,10-20'),
  debugCrowdId?: string(name='DebugCrowdId', example='3'),
  debugUsers?: string(name='DebugUsers', example='1124512470******,1124512471******,1124512472******'),
  description?: string(name='Description', example='This is a test.'),
  environment?: string(name='Environment', example='Daily'),
  filter?: string(name='Filter', example='filter=xxx'),
  instanceId?: string(name='InstanceId', example='pairec-test1'),
  name?: string(name='Name', example='laboratory1'),
  type?: string(name='Type', example='Base'),
}

model UpdateLaboratoryResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='A04CB8C0-E74A-5E83-BC61-64D153574EC7'),
}

model UpdateLaboratoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateLaboratoryResponseBody(name='body'),
}

async function updateLaboratoryWithOptions(LaboratoryId: string, request: UpdateLaboratoryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateLaboratoryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.bucketCount)) {
    body['BucketCount'] = request.bucketCount;
  }
  if (!Util.isUnset(request.bucketType)) {
    body['BucketType'] = request.bucketType;
  }
  if (!Util.isUnset(request.buckets)) {
    body['Buckets'] = request.buckets;
  }
  if (!Util.isUnset(request.debugCrowdId)) {
    body['DebugCrowdId'] = request.debugCrowdId;
  }
  if (!Util.isUnset(request.debugUsers)) {
    body['DebugUsers'] = request.debugUsers;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.environment)) {
    body['Environment'] = request.environment;
  }
  if (!Util.isUnset(request.filter)) {
    body['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateLaboratory',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/laboratories/${OpenApiUtil.getEncodeParam(LaboratoryId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateLaboratory(LaboratoryId: string, request: UpdateLaboratoryRequest): UpdateLaboratoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateLaboratoryWithOptions(LaboratoryId, request, headers, runtime);
}

model UpdateLayerRequest {
  description?: string(name='Description', example='This is a test.'),
  instanceId?: string(name='InstanceId', example='pairec-test1'),
  name?: string(name='Name', example='layer1'),
}

model UpdateLayerResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='0EA9215E-EC21-53AB-B8D9-D3DEA90D040A'),
}

model UpdateLayerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateLayerResponseBody(name='body'),
}

async function updateLayerWithOptions(LayerId: string, request: UpdateLayerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateLayerResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateLayer',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/layers/${OpenApiUtil.getEncodeParam(LayerId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateLayer(LayerId: string, request: UpdateLayerRequest): UpdateLayerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateLayerWithOptions(LayerId, request, headers, runtime);
}

model UpdateParamRequest {
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234'),
  value?: string(name='Value', example='house'),
}

model UpdateParamResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='BBD41FBF-E75C-551A-92FA-CAD654AA006F'),
}

model UpdateParamResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateParamResponseBody(name='body'),
}

async function updateParamWithOptions(ParamId: string, request: UpdateParamRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateParamResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.value)) {
    body['Value'] = request.value;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateParam',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/params/${OpenApiUtil.getEncodeParam(ParamId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateParam(ParamId: string, request: UpdateParamRequest): UpdateParamResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateParamWithOptions(ParamId, request, headers, runtime);
}

model UpdateSceneRequest {
  description?: string(name='Description', example='This is a test.'),
  flows?: [ 
    {
      flowCode?: string(name='FlowCode', example='liuliang1'),
      flowName?: string(name='FlowName', example='流量1'),
    }
  ](name='Flows'),
  instanceId?: string(name='InstanceId', example='pairec-cn-abcdefg1234'),
  name?: string(name='Name', example='scene1'),
}

model UpdateSceneResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='FC17887E-3C82-5096-8AA6-F4C2E7417245'),
}

model UpdateSceneResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSceneResponseBody(name='body'),
}

async function updateSceneWithOptions(SceneId: string, request: UpdateSceneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSceneResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.flows)) {
    body['Flows'] = request.flows;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateScene',
    version = '2022-12-13',
    protocol = 'HTTPS',
    pathname = `/api/v1/scenes/${OpenApiUtil.getEncodeParam(SceneId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateScene(SceneId: string, request: UpdateSceneRequest): UpdateSceneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateSceneWithOptions(SceneId, request, headers, runtime);
}

