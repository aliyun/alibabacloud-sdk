/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'support-plan';
  @version = '2021-07-06';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model EnterpriseDingtalkGroupMember {
  isAdmin?: boolean(name='IsAdmin', description='代表资源名称的资源属性字段'),
  mobile?: string(name='Mobile', description='代表资源组的资源属性字段'),
  name?: string(name='Name', description='代表创建时间的资源属性字段'),
}

model CloseTaskOrderRequest {
  orderId: string(name='OrderId', description='任务单id', position='Query'),
  userName?: string(name='UserName', description='操作人姓名', position='Query'),
}

model CloseTaskOrderResponseBody = {
  code?: string(name='Code', description='code'),
  data?: string(name='Data', description='data'),
  message?: string(name='Message', description='msg'),
  requestId?: string(name='RequestId', description='requestId'),
  success?: boolean(name='Success', description='success'),
}

model CloseTaskOrderResponse = {
  headers: map[string]string(name='headers'),
  body: CloseTaskOrderResponseBody(name='body'),
}

async function closeTaskOrder(request: CloseTaskOrderRequest): CloseTaskOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CloseTaskOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreateTaskOrderRequest {
  customerRealName?: string(name='CustomerRealName', description='建单人姓名：快手客户', position='Query'),
  customerUserId?: string(name='CustomerUserId', description='建单人：固定值', position='Query'),
  importantDescription?: string(name='ImportantDescription', description='重要性描述', position='Query'),
  isImportant: string(name='IsImportant', description='是否紧急', position='Query'),
  openGroupId: string(name='OpenGroupId', description='主群关联Id', position='Query'),
  productType: string(name='ProductType', description='productType', position='Query'),
  productTypeName?: string(name='ProductTypeName', description='问题分类名称', position='Query'),
  taskTitle: string(name='TaskTitle', description='任务单标题', position='Query'),
}

model CreateTaskOrderResponseBody = {
  code?: string(name='Code', description='code'),
  data?: string(name='Data', description='返回任务单号：OrderId'),
  message?: string(name='Message', description='msg'),
  requestId?: string(name='RequestId', description='requestId'),
  success?: boolean(name='Success', description='success'),
}

model CreateTaskOrderResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTaskOrderResponseBody(name='body'),
}

async function createTaskOrder(request: CreateTaskOrderRequest): CreateTaskOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTaskOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreateTaskOrderByEventReportRequest {
  business?: string(name='Business', description='告警所属业务', position='Query'),
  createRealName: string(name='CreateRealName', description='提交人姓名', position='Query'),
  createUserId: string(name='CreateUserId', description='提交人userId', position='Query'),
  eventBody?: {
    eventDesc: string(name='EventDesc', description='当前告警描述信息'),
    eventId?: string(name='EventId', description='事件id'),
    eventLevel?: string(name='EventLevel', description='事件级别'),
    eventLocation?: {
      domain?: string(name='Domain', description='domian域名'),
    }(name='EventLocation', description='事件源标识，自定义和TAM在云企配置的Location指标一致'),
    eventTime?: string(name='EventTime', description='事件上报时间'),
  }(name='EventBody', description='告警描述', position='Query'),
  extinfo?: [ 
    {
      name?: string(name='Name', description='扩展信息名称'),
      value?: string(name='Value', description='扩展信息value值'),
    }
  ](name='Extinfo', description='扩展信息', position='Query'),
  importantDesc?: string(name='ImportantDesc', description='当eventLevel为warn时，必传', position='Query'),
  joinChildGroupUserIds?: string(name='JoinChildGroupUserIds', description='建单入群人员', position='Query'),
  monitorCongregation?: string(name='MonitorCongregation', description='监控集如：视频业务的质量监控', position='Query'),
  openGroupId: string(name='OpenGroupId', description='告警关联主群id', position='Query'),
  productType: string(name='ProductType', description='问题分类', position='Query'),
}

model CreateTaskOrderByEventReportResponseBody = {
  code?: string(name='Code', description='code'),
  data?: string(name='Data', description='返回信息'),
  message?: string(name='Message', description='msg'),
  requestId?: string(name='RequestId', description='requestId'),
  success?: boolean(name='Success', description='success'),
}

model CreateTaskOrderByEventReportResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTaskOrderByEventReportResponseBody(name='body'),
}

async function createTaskOrderByEventReport(request: CreateTaskOrderByEventReportRequest): CreateTaskOrderByEventReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTaskOrderByEventReport', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEnterpriseDingtalkGroupCustomerMemberRequest {
  mobiles: [ string ](name='Mobiles', position='Body'),
  openGroupId: string(name='OpenGroupId', position='Body'),
}

model DeleteEnterpriseDingtalkGroupCustomerMemberResponseBody = {
  code?: string(name='Code', description='接口请求结果返回码'),
  message?: string(name='Message', description='错误信息, 当success=false的时候, 可以取到message'),
  requestId?: string(name='RequestId', description='接口请求的唯一ID, 每次调用requestID唯一'),
  success?: boolean(name='Success', description='调用接口返回是否成功, true代表调用正常'),
}

model DeleteEnterpriseDingtalkGroupCustomerMemberResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteEnterpriseDingtalkGroupCustomerMemberResponseBody(name='body'),
}

async function deleteEnterpriseDingtalkGroupCustomerMember(request: DeleteEnterpriseDingtalkGroupCustomerMemberRequest): DeleteEnterpriseDingtalkGroupCustomerMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEnterpriseDingtalkGroupCustomerMember', 'POST', '/', 'json', true, 'form', request);
}

model GetEnterpriseDingtalkGroupRequest {
  openGroupId: string(name='OpenGroupId', position='Body'),
}

model GetEnterpriseDingtalkGroupResponseBody = {
  code?: string(name='Code', description='接口请求结果返回码'),
  data?: {
    groupName?: string(name='GroupName', description='企业服务群的群名'),
    openGroupId?: string(name='OpenGroupId', description='企业服务群的ID'),
  }(name='Data'),
  message?: string(name='Message', description='错误信息, 当success=false的时候, 可以取到message'),
  requestId?: string(name='RequestId', description='接口请求的唯一ID, 每次调用requestID唯一'),
  success?: boolean(name='Success', description='调用接口返回是否成功, true代表调用正常'),
}

model GetEnterpriseDingtalkGroupResponse = {
  headers: map[string]string(name='headers'),
  body: GetEnterpriseDingtalkGroupResponseBody(name='body'),
}

async function getEnterpriseDingtalkGroup(request: GetEnterpriseDingtalkGroupRequest): GetEnterpriseDingtalkGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEnterpriseDingtalkGroup', 'POST', '/', 'json', true, 'form', request);
}

model GetEnterpriseDingtalkGroupCustomerMemberRequest {
  mobile: string(name='Mobile', position='Body'),
  openGroupId: string(name='OpenGroupId', position='Body'),
}

model GetEnterpriseDingtalkGroupCustomerMemberResponseBody = {
  code?: string(name='Code', description='接口请求结果返回码'),
  data?: EnterpriseDingtalkGroupMember(name='Data', description='成员信息列表'),
  message?: string(name='Message', description='错误信息, 当success=false的时候, 可以取到message'),
  requestId?: string(name='RequestId', description='接口请求的唯一ID, 每次调用requestID唯一'),
  success?: boolean(name='Success', description='调用接口返回是否成功, true代表调用正常'),
}

model GetEnterpriseDingtalkGroupCustomerMemberResponse = {
  headers: map[string]string(name='headers'),
  body: GetEnterpriseDingtalkGroupCustomerMemberResponseBody(name='body'),
}

async function getEnterpriseDingtalkGroupCustomerMember(request: GetEnterpriseDingtalkGroupCustomerMemberRequest): GetEnterpriseDingtalkGroupCustomerMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEnterpriseDingtalkGroupCustomerMember', 'POST', '/', 'json', true, 'form', request);
}

model ListDdTaskOrderRequest {
  callerParentId?: long(name='CallerParentId', description='callerParentId', position='Query'),
  callerType?: string(name='CallerType', description='callerType', position='Query'),
  callerUid?: long(name='CallerUid', description='callerUid', position='Query'),
  openGroupId?: string(name='OpenGroupId', description='openGroupId', position='Query'),
  orderId?: string(name='OrderId', description='orderId', position='Query'),
  requestId?: string(name='RequestId', description='requestId', position='Query'),
  taskStatus?: string(name='TaskStatus', description='taskStatus', position='Query'),
}

model ListDdTaskOrderResponseBody = {
  code?: string(name='Code', description='code'),
  data?: string(name='Data', description='data'),
  message?: string(name='Message', description='msg'),
  requestId?: string(name='RequestId', description='requestId'),
  success?: boolean(name='Success', description='success'),
}

model ListDdTaskOrderResponse = {
  headers: map[string]string(name='headers'),
  body: ListDdTaskOrderResponseBody(name='body'),
}

async function listDdTaskOrder(request: ListDdTaskOrderRequest): ListDdTaskOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDdTaskOrder', 'POST', '/', 'json', false, 'json', request);
}

model ListEnterpriseDingtalkGroupCustomerMembersRequest {
  openGroupId: string(name='OpenGroupId', description='企业服务群ID', position='Body'),
}

model ListEnterpriseDingtalkGroupCustomerMembersResponseBody = {
  code?: string(name='Code', description='接口请求结果返回码'),
  data?: [
    EnterpriseDingtalkGroupMember
  ](name='Data', description='企业服务群成员列表'),
  message?: string(name='Message', description='错误信息, 当success=false的时候, 可以取到message'),
  requestId?: string(name='RequestId', description='接口请求的唯一ID, 每次调用requestID唯一'),
  success?: boolean(name='Success', description='调用接口返回是否成功, true代表调用正常'),
}

model ListEnterpriseDingtalkGroupCustomerMembersResponse = {
  headers: map[string]string(name='headers'),
  body: ListEnterpriseDingtalkGroupCustomerMembersResponseBody(name='body'),
}

async function listEnterpriseDingtalkGroupCustomerMembers(request: ListEnterpriseDingtalkGroupCustomerMembersRequest): ListEnterpriseDingtalkGroupCustomerMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEnterpriseDingtalkGroupCustomerMembers', 'POST', '/', 'json', true, 'form', request);
}

model ListEnterpriseDingtalkGroupsRequest {
}

model ListEnterpriseDingtalkGroupsResponseBody = {
  code?: string(name='Code', description='接口请求结果返回码'),
  data?: [ 
    {
      groupName?: string(name='GroupName', description='钉群名'),
      openGroupId?: string(name='OpenGroupId', description='钉群ID'),
    }
  ](name='Data', description='服务钉群数组'),
  message?: string(name='Message', description='错误信息, 当success=false的时候, 可以取到message'),
  requestId?: string(name='RequestId', description='接口请求的唯一ID, 每次调用requestID唯一'),
  success?: boolean(name='Success', description='调用接口返回是否成功, true代表调用正常'),
}

model ListEnterpriseDingtalkGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListEnterpriseDingtalkGroupsResponseBody(name='body'),
}

async function listEnterpriseDingtalkGroups(request: ListEnterpriseDingtalkGroupsRequest): ListEnterpriseDingtalkGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEnterpriseDingtalkGroups', 'POST', '/', 'json', false, 'json', request);
}

model ListProductByGroupRequest {
  openGroupId: string(name='OpenGroupId', description='主群关联Id', position='Query'),
}

model ListProductByGroupResponseBody = {
  code?: string(name='Code', description='code'),
  data?: string(name='Data', description='data'),
  message?: string(name='Message', description='msg'),
  requestId?: string(name='RequestId', description='接口交互动态值'),
  success?: boolean(name='Success', description='success'),
}

model ListProductByGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ListProductByGroupResponseBody(name='body'),
}

async function listProductByGroup(request: ListProductByGroupRequest): ListProductByGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListProductByGroup', 'POST', '/', 'json', false, 'json', request);
}

model QueryTaskInfoRequest {
  orderId: string(name='OrderId', description='任务单ID', position='Query'),
}

model QueryTaskInfoResponseBody = {
  code?: string(name='Code', description='code'),
  data?: string(name='Data', description='data'),
  message?: string(name='Message', description='msg'),
  requestId?: string(name='RequestId', description='requestId'),
  success?: boolean(name='Success', description='success'),
}

model QueryTaskInfoResponse = {
  headers: map[string]string(name='headers'),
  body: QueryTaskInfoResponseBody(name='body'),
}

async function queryTaskInfo(request: QueryTaskInfoRequest): QueryTaskInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTaskInfo', 'POST', '/', 'json', false, 'json', request);
}

model ReplyMessageApiRequest {
  msgContent: string(name='MsgContent', description='消息内容', position='Query'),
  msgType?: string(name='MsgType', description='消息类型', position='Query'),
  openGroupId?: string(name='OpenGroupId', description='群Id', position='Query'),
  orderId: string(name='OrderId', description='任务单Id', position='Query'),
  userId?: string(name='UserId', description='消息发送人Id', position='Query'),
  userName: string(name='UserName', description='消息发送人', position='Query'),
}

model ReplyMessageApiResponseBody = {
  code?: string(name='Code', description='code'),
  data?: string(name='Data', description='data'),
  message?: string(name='Message', description='msg'),
  requestId?: string(name='RequestId', description='requestId'),
  success?: boolean(name='Success', description='success'),
}

model ReplyMessageApiResponse = {
  headers: map[string]string(name='headers'),
  body: ReplyMessageApiResponseBody(name='body'),
}

async function replyMessageApi(request: ReplyMessageApiRequest): ReplyMessageApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReplyMessageApi', 'POST', '/', 'json', false, 'json', request);
}

model RestOpenTaskOrderRequest {
  openGroupId?: string(name='OpenGroupId', description='主群关联Id', position='Query'),
  orderId: string(name='OrderId', description='任务单ID', position='Query'),
  resetContent?: string(name='ResetContent', description='重开说明', position='Query'),
  resetType?: string(name='ResetType', description='重开类型', position='Query'),
  userName?: string(name='UserName', description='操作人姓名', position='Query'),
}

model RestOpenTaskOrderResponseBody = {
  code?: string(name='Code', description='code'),
  data?: string(name='Data', description='data'),
  message?: string(name='Message', description='msg'),
  requestId?: string(name='RequestId', description='requestId'),
  success?: boolean(name='Success', description='success'),
}

model RestOpenTaskOrderResponse = {
  headers: map[string]string(name='headers'),
  body: RestOpenTaskOrderResponseBody(name='body'),
}

async function restOpenTaskOrder(request: RestOpenTaskOrderRequest): RestOpenTaskOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RestOpenTaskOrder', 'POST', '/', 'json', false, 'json', request);
}

