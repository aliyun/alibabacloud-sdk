/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'support-plan';
  @version = '2021-07-06';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model EnterpriseDingtalkGroupMember {
  isAdmin?: boolean(name='IsAdmin', description='代表资源名称的资源属性字段', example='true'),
  mobile?: string(name='Mobile', description='代表资源组的资源属性字段', example='130xxxxxxxx'),
  name?: string(name='Name', description='代表创建时间的资源属性字段', example='张三'),
}

model AddEnterpriseGroupMemberToTaskGroupRequest {
  taskOrderId: string(name='TaskOrderId', description='This parameter is required.', example='E240815B72K5D3', position='Query'),
  userId: string(name='UserId', description='This parameter is required.', example='PtWoW82DJI1zcTwsT98kLIgAj7kfASzfC6StcpV7hKs=', position='Query'),
}

model AddEnterpriseGroupMemberToTaskGroupResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='true'),
  message?: string(name='Message', example='ok'),
  requestId?: string(name='RequestId', example='43135C31-E47A-5AD7-A693-6DC635201CE4'),
  success?: boolean(name='Success', example='true'),
}

model AddEnterpriseGroupMemberToTaskGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddEnterpriseGroupMemberToTaskGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddEnterpriseGroupMemberToTaskGroup  AddEnterpriseGroupMemberToTaskGroupRequest
  * @return AddEnterpriseGroupMemberToTaskGroupResponse
 */
async function addEnterpriseGroupMemberToTaskGroup(request: AddEnterpriseGroupMemberToTaskGroupRequest): AddEnterpriseGroupMemberToTaskGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddEnterpriseGroupMemberToTaskGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateTaskOrderRequest {
  createUserId: string(name='CreateUserId', description='This parameter is required.', example='123', position='Query'),
  isUrgent?: boolean(name='IsUrgent', position='Query'),
  openGroupId: string(name='OpenGroupId', description='This parameter is required.', example='cid+lUpHxTIXt7DYqJDcpVxlA==', position='Query'),
  overview: string(name='Overview', description='This parameter is required.', example='任务单标题：必填', position='Query'),
  productCode: string(name='ProductCode', description='This parameter is required.', example='ecs', position='Query'),
  urgentDescription?: string(name='UrgentDescription', example='重要性描述', position='Query'),
}

model CreateTaskOrderResponseBody = {
  code?: string(name='Code', description='code', example='200'),
  data?: string(name='Data', example='E21111796147LE'),
  message?: string(name='Message', description='msg', example='ok'),
  requestId?: string(name='RequestId', description='requestId', example='123'),
  success?: boolean(name='Success', description='success', example='true'),
}

model CreateTaskOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTaskOrderResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateTaskOrder  CreateTaskOrderRequest
  * @return CreateTaskOrderResponse
 */
async function createTaskOrder(request: CreateTaskOrderRequest): CreateTaskOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTaskOrder', 'POST', '/', 'json', false, 'json', request);
}

model ListDdTaskOrderRequest {
  createRealName?: string(name='CreateRealName', description='createRealName', example='Tom', position='Query'),
  endTime?: string(name='EndTime', description='endTime', example='2024-08-20 14:09:16', position='Query'),
  isUrgent?: boolean(name='IsUrgent', position='Query'),
  openGroupId: string(name='OpenGroupId', description='openGroupId

This parameter is required.', example='DAWNN14N', position='Query'),
  pageNo?: long(name='PageNo', description='pageNo', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='pageSize', example='10', position='Query'),
  startTime?: string(name='StartTime', description='startTime', example='2024-08-01 14:09:11', position='Query'),
  taskStatus?: string(name='TaskStatus', description='taskStatus', example='dealingNode', position='Query'),
}

model ListDdTaskOrderResponseBody = {
  code?: string(name='Code', description='code', example='200'),
  data?: string(name='Data', description='data', example='{   "msg": "请求成功",   "code": "200",   "data": [     {       "wfNodeId": "dealingNode",//任务单状态       "createEmpId": null,//创建人工号，可以忽略       "createTime": 1637571435000,//任务单创建时间       "orderId": "E2111221H1UKCZ",//任务单号       "isImportant": "normal",//是否紧急       "closeTime": null,//任务单关单时间       "taskTitle": "测试单16点44",//标题       "productType": "3270"//问题分类     },     {       "wfNodeId": "dealingNode",       "createEmpId": null,       "createTime": 1637820497000,       "orderId": "E211125CG111EM",       "isImportant": "normal",       "closeTime": null,       "taskTitle": "测试单14",       "class": "com.aliyun.dingtalklanding.dto.OpenTaskOrderDTO",       "productType": "3270"     }   ],   "success": true,   "requestId": "123",   "class": "com.aliyun.dingtalklanding.pop.dto.PopResultDTO" }'),
  message?: string(name='Message', description='msg', example='请求成功'),
  requestId?: string(name='RequestId', description='requestId', example='2F8557E4-742B-1CF7-8E83-28CD0C1F7B48'),
  success?: boolean(name='Success', description='success', example='true'),
}

model ListDdTaskOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDdTaskOrderResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDdTaskOrder  ListDdTaskOrderRequest
  * @return ListDdTaskOrderResponse
 */
async function listDdTaskOrder(request: ListDdTaskOrderRequest): ListDdTaskOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDdTaskOrder', 'POST', '/', 'json', false, 'json', request);
}

model ListEnterpriseDingtalkGroupCustomerMembersRequest {
  openGroupId: string(name='OpenGroupId', description='This parameter is required.', example='DAWNN14N', position='Query'),
}

model ListEnterpriseDingtalkGroupCustomerMembersResponseBody = {
  code?: string(name='Code', example='200'),
  data?: [ 
    {
      isAdmin?: boolean(name='IsAdmin'),
      name?: string(name='Name'),
      userId?: string(name='UserId'),
    }
  ](name='Data'),
  message?: string(name='Message', example='Invalid data'),
  requestId?: string(name='RequestId', example='123'),
  success?: boolean(name='Success', example='true'),
}

model ListEnterpriseDingtalkGroupCustomerMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEnterpriseDingtalkGroupCustomerMembersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListEnterpriseDingtalkGroupCustomerMembers  ListEnterpriseDingtalkGroupCustomerMembersRequest
  * @return ListEnterpriseDingtalkGroupCustomerMembersResponse
 */
async function listEnterpriseDingtalkGroupCustomerMembers(request: ListEnterpriseDingtalkGroupCustomerMembersRequest): ListEnterpriseDingtalkGroupCustomerMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEnterpriseDingtalkGroupCustomerMembers', 'POST', '/', 'json', false, 'json', request);
}

model ListEnterpriseDingtalkGroupsRequest {
}

model ListEnterpriseDingtalkGroupsResponseBody = {
  code?: string(name='Code', example='true'),
  data?: [ 
    {
      groupName?: string(name='GroupName', example='A公司服务群'),
      openGroupId?: string(name='OpenGroupId', example='123'),
    }
  ](name='Data'),
  message?: string(name='Message', example='Data Invalid'),
  requestId?: string(name='RequestId', example='12xxxxx'),
  success?: boolean(name='Success', example='true'),
}

model ListEnterpriseDingtalkGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEnterpriseDingtalkGroupsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListEnterpriseDingtalkGroups  ListEnterpriseDingtalkGroupsRequest
  * @return ListEnterpriseDingtalkGroupsResponse
 */
async function listEnterpriseDingtalkGroups(request: ListEnterpriseDingtalkGroupsRequest): ListEnterpriseDingtalkGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEnterpriseDingtalkGroups', 'POST', '/', 'json', false, 'json', request);
}

model ListProductByGroupRequest {
  openGroupId: string(name='OpenGroupId', description='This parameter is required.', example='cidXcezGVQJjiWy2PzXylGwvg==', position='Query'),
}

model ListProductByGroupResponseBody = {
  code?: string(name='Code', description='code', example='200'),
  data?: string(name='Data', description='data', example='[     {       "wfNodeId": "dealingNode",//任务单状态       "createEmpId": null,//创建人工号，可以忽略       "createTime": 1637571435000,//任务单创建时间       "orderId": "E2111221H1UKCZ",//任务单号       "isImportant": "normal",//是否紧急       "closeTime": null,//任务单关单时间       "taskTitle": "测试单16点44",//标题       "productType": "3270"//问题分类     },     {       "wfNodeId": "dealingNode",       "createEmpId": null,       "createTime": 1637820497000,       "orderId": "E211125CG111EM",       "isImportant": "normal",       "closeTime": null,       "taskTitle": "测试单14",       "class": "com.aliyun.dingtalklanding.dto.OpenTaskOrderDTO",       "productType": "3270"     }   ]'),
  message?: string(name='Message', description='msg', example='请求成功'),
  requestId?: string(name='RequestId', description='requestId', example='123'),
  success?: boolean(name='Success', description='success', example='true'),
}

model ListProductByGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProductByGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListProductByGroup  ListProductByGroupRequest
  * @return ListProductByGroupResponse
 */
async function listProductByGroup(request: ListProductByGroupRequest): ListProductByGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListProductByGroup', 'POST', '/', 'json', false, 'json', request);
}

