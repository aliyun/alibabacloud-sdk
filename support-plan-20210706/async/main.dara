/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'support-plan';
  @version = '2021-07-06';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model EnterpriseDingtalkGroupMember {
  isAdmin?: boolean(name='IsAdmin', description='代表资源名称的资源属性字段', example='true'),
  mobile?: string(name='Mobile', description='代表资源组的资源属性字段', example='130xxxxxxxx'),
  name?: string(name='Name', description='代表创建时间的资源属性字段', example='张三'),
}

model CloseTaskOrderRequest {
  orderId: string(name='OrderId', example='E211129AE190Y3', position='Query'),
  userName?: string(name='UserName', example='操作人姓名', position='Query'),
}

model CloseTaskOrderResponseBody = {
  code?: string(name='Code', description='code', example='200'),
  data?: string(name='Data', description='data', example='null'),
  message?: string(name='Message', description='msg', example='请求成功'),
  requestId?: string(name='RequestId', description='requestId', example='AQWFE#$#ASD'),
  success?: boolean(name='Success', description='success', example='true'),
}

model CloseTaskOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CloseTaskOrderResponseBody(name='body'),
}

async function closeTaskOrder(request: CloseTaskOrderRequest): CloseTaskOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CloseTaskOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreateTaskOrderRequest {
  customerRealName?: string(name='CustomerRealName', example='建单人姓名：快手客户', position='Query'),
  customerUserId?: string(name='CustomerUserId', example='123', position='Query'),
  importantDescription?: string(name='ImportantDescription', example='重要性描述', position='Query'),
  isImportant: string(name='IsImportant', example='如:normal或者hurry', position='Query'),
  openGroupId: string(name='OpenGroupId', example='cid+lUpHxTIXt7DYqJDcpVxlA==', position='Query'),
  productType: string(name='ProductType', description='productType', example='3270', position='Query'),
  productTypeName?: string(name='ProductTypeName', example='lc-云享咨询', position='Query'),
  taskTitle: string(name='TaskTitle', description='taskTitle', example='任务单标题：必填', position='Query'),
}

model CreateTaskOrderResponseBody = {
  code?: string(name='Code', description='code', example='200'),
  data?: string(name='Data', example='E21111796147LE'),
  message?: string(name='Message', description='msg', example='ok'),
  requestId?: string(name='RequestId', description='requestId', example='123'),
  success?: boolean(name='Success', description='success', example='true'),
}

model CreateTaskOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTaskOrderResponseBody(name='body'),
}

async function createTaskOrder(request: CreateTaskOrderRequest): CreateTaskOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTaskOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreateTaskOrderByEventReportRequest {
  business?: string(name='Business', example='123', position='Query'),
  createRealName: string(name='CreateRealName', example='小二', position='Query'),
  createUserId: string(name='CreateUserId', example='1830426056957812', position='Query'),
  eventBody?: {
    eventDesc: string(name='EventDesc', example='告警内容'),
    eventId?: string(name='EventId', example='j9uwe-34328987'),
    eventLevel?: string(name='EventLevel', example='info,warn,alarm,critical'),
    eventLocation?: {
      domain?: string(name='Domain', example='flv13.bn.netease.com'),
    }(name='EventLocation'),
    eventTime?: string(name='EventTime', example='123456'),
  }(name='EventBody', shrink='json', position='Query'),
  extinfo?: [ 
    {
      name?: string(name='Name', example='扩展信息名称'),
      value?: string(name='Value', example='扩展信息value值'),
    }
  ](name='Extinfo', shrink='json', position='Query'),
  importantDesc?: string(name='ImportantDesc', example='紧急性原因描述', position='Query'),
  joinChildGroupUserIds?: string(name='JoinChildGroupUserIds', example='123,456', position='Query'),
  monitorCongregation?: string(name='MonitorCongregation', example='监控集如：视频业务的质量监控 123', position='Query'),
  openGroupId: string(name='OpenGroupId', example='cid+lUpHxTIXt7DYqJDcpVxlA==', position='Query'),
  productType: string(name='ProductType', example='3270', position='Query'),
}

model CreateTaskOrderByEventReportResponseBody = {
  code?: string(name='Code', description='code', example='200'),
  data?: string(name='Data', example='{  "eid": "E211129DT18M06",     "status": "dealingNode"   }'),
  message?: string(name='Message', description='msg', example='请求成功'),
  requestId?: string(name='RequestId', description='requestId', example='02A300AC-367E-1716-A37B-F2FB46082610'),
  success?: boolean(name='Success', description='success', example='true'),
}

model CreateTaskOrderByEventReportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTaskOrderByEventReportResponseBody(name='body'),
}

async function createTaskOrderByEventReport(request: CreateTaskOrderByEventReportRequest): CreateTaskOrderByEventReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTaskOrderByEventReport', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEnterpriseDingtalkGroupCustomerMemberRequest {
  mobiles: [ string ](name='Mobiles', shrink='json', position='Body'),
  openGroupId: string(name='OpenGroupId', example='12345', position='Body'),
}

model DeleteEnterpriseDingtalkGroupCustomerMemberResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='Invalid data'),
  requestId?: string(name='RequestId', example='123'),
  success?: boolean(name='Success', example='true'),
}

model DeleteEnterpriseDingtalkGroupCustomerMemberResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteEnterpriseDingtalkGroupCustomerMemberResponseBody(name='body'),
}

async function deleteEnterpriseDingtalkGroupCustomerMember(request: DeleteEnterpriseDingtalkGroupCustomerMemberRequest): DeleteEnterpriseDingtalkGroupCustomerMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEnterpriseDingtalkGroupCustomerMember', 'POST', '/', 'json', true, 'form', request);
}

model GetEnterpriseDingtalkGroupRequest {
  openGroupId: string(name='OpenGroupId', example='1234', position='Body'),
}

model GetEnterpriseDingtalkGroupResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    groupName?: string(name='GroupName', example='A企业服务群'),
    openGroupId?: string(name='OpenGroupId', example='123'),
  }(name='Data'),
  message?: string(name='Message', example='Invalid data'),
  requestId?: string(name='RequestId', example='123'),
  success?: boolean(name='Success', example='true'),
}

model GetEnterpriseDingtalkGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetEnterpriseDingtalkGroupResponseBody(name='body'),
}

async function getEnterpriseDingtalkGroup(request: GetEnterpriseDingtalkGroupRequest): GetEnterpriseDingtalkGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEnterpriseDingtalkGroup', 'POST', '/', 'json', true, 'form', request);
}

model GetEnterpriseDingtalkGroupCustomerMemberRequest {
  mobile: string(name='Mobile', example='13900001111', position='Body'),
  openGroupId: string(name='OpenGroupId', example='123', position='Body'),
}

model GetEnterpriseDingtalkGroupCustomerMemberResponseBody = {
  code?: string(name='Code', example='200'),
  data?: EnterpriseDingtalkGroupMember(name='Data'),
  message?: string(name='Message', example='Invalid data'),
  requestId?: string(name='RequestId', example='12'),
  success?: boolean(name='Success', example='true'),
}

model GetEnterpriseDingtalkGroupCustomerMemberResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetEnterpriseDingtalkGroupCustomerMemberResponseBody(name='body'),
}

async function getEnterpriseDingtalkGroupCustomerMember(request: GetEnterpriseDingtalkGroupCustomerMemberRequest): GetEnterpriseDingtalkGroupCustomerMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEnterpriseDingtalkGroupCustomerMember', 'POST', '/', 'json', true, 'form', request);
}

model ListDdTaskOrderRequest {
  callerParentId?: long(name='CallerParentId', description='callerParentId', example='123', position='Query'),
  callerType?: string(name='CallerType', description='callerType', example='123', position='Query'),
  callerUid?: long(name='CallerUid', description='callerUid', example='123', position='Query'),
  openGroupId?: string(name='OpenGroupId', description='openGroupId', example='cid+lUpHxTIXt7DYqJDcpVxlA==', position='Query'),
  orderId?: string(name='OrderId', description='orderId', example='E2112019N14PBY', position='Query'),
  requestId?: string(name='RequestId', description='requestId', example='2F8557E4-742B-1CF7-8E83-28CD0C1F7B48', position='Query'),
  taskStatus?: string(name='TaskStatus', description='taskStatus', example='dealingNode', position='Query'),
}

model ListDdTaskOrderResponseBody = {
  code?: string(name='Code', description='code', example='200'),
  data?: string(name='Data', description='data', example='{   "msg": "请求成功",   "code": "200",   "data": [     {       "wfNodeId": "dealingNode",//任务单状态       "createEmpId": null,//创建人工号，可以忽略       "createTime": 1637571435000,//任务单创建时间       "orderId": "E2111221H1UKCZ",//任务单号       "isImportant": "normal",//是否紧急       "closeTime": null,//任务单关单时间       "taskTitle": "测试单16点44",//标题       "productType": "3270"//问题分类     },     {       "wfNodeId": "dealingNode",       "createEmpId": null,       "createTime": 1637820497000,       "orderId": "E211125CG111EM",       "isImportant": "normal",       "closeTime": null,       "taskTitle": "测试单14",       "class": "com.aliyun.dingtalklanding.dto.OpenTaskOrderDTO",       "productType": "3270"     }   ],   "success": true,   "requestId": "123",   "class": "com.aliyun.dingtalklanding.pop.dto.PopResultDTO" }'),
  message?: string(name='Message', description='msg', example='请求成功'),
  requestId?: string(name='RequestId', description='requestId', example='2F8557E4-742B-1CF7-8E83-28CD0C1F7B48'),
  success?: boolean(name='Success', description='success', example='true'),
}

model ListDdTaskOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDdTaskOrderResponseBody(name='body'),
}

async function listDdTaskOrder(request: ListDdTaskOrderRequest): ListDdTaskOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDdTaskOrder', 'POST', '/', 'json', false, 'json', request);
}

model ListEnterpriseDingtalkGroupCustomerMembersRequest {
  openGroupId: string(name='OpenGroupId', example='123', position='Body'),
}

model ListEnterpriseDingtalkGroupCustomerMembersResponseBody = {
  code?: string(name='Code', example='200'),
  data?: [
    EnterpriseDingtalkGroupMember
  ](name='Data'),
  message?: string(name='Message', example='Invalid data'),
  requestId?: string(name='RequestId', example='123'),
  success?: boolean(name='Success', example='true'),
}

model ListEnterpriseDingtalkGroupCustomerMembersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListEnterpriseDingtalkGroupCustomerMembersResponseBody(name='body'),
}

async function listEnterpriseDingtalkGroupCustomerMembers(request: ListEnterpriseDingtalkGroupCustomerMembersRequest): ListEnterpriseDingtalkGroupCustomerMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEnterpriseDingtalkGroupCustomerMembers', 'POST', '/', 'json', true, 'form', request);
}

model ListEnterpriseDingtalkGroupsRequest {
}

model ListEnterpriseDingtalkGroupsResponseBody = {
  code?: string(name='Code', example='true'),
  data?: [ 
    {
      groupName?: string(name='GroupName', example='A公司服务群'),
      openGroupId?: string(name='OpenGroupId', example='123'),
    }
  ](name='Data'),
  message?: string(name='Message', example='Data Invalid'),
  requestId?: string(name='RequestId', example='12xxxxx'),
  success?: boolean(name='Success', example='true'),
}

model ListEnterpriseDingtalkGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListEnterpriseDingtalkGroupsResponseBody(name='body'),
}

async function listEnterpriseDingtalkGroups(request: ListEnterpriseDingtalkGroupsRequest): ListEnterpriseDingtalkGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEnterpriseDingtalkGroups', 'POST', '/', 'json', false, 'json', request);
}

model ListProductByGroupRequest {
  openGroupId: string(name='OpenGroupId', example='cidXcezGVQJjiWy2PzXylGwvg==', position='Query'),
}

model ListProductByGroupResponseBody = {
  code?: string(name='Code', description='code', example='200'),
  data?: string(name='Data', description='data', example='[     {       "wfNodeId": "dealingNode",//任务单状态       "createEmpId": null,//创建人工号，可以忽略       "createTime": 1637571435000,//任务单创建时间       "orderId": "E2111221H1UKCZ",//任务单号       "isImportant": "normal",//是否紧急       "closeTime": null,//任务单关单时间       "taskTitle": "测试单16点44",//标题       "productType": "3270"//问题分类     },     {       "wfNodeId": "dealingNode",       "createEmpId": null,       "createTime": 1637820497000,       "orderId": "E211125CG111EM",       "isImportant": "normal",       "closeTime": null,       "taskTitle": "测试单14",       "class": "com.aliyun.dingtalklanding.dto.OpenTaskOrderDTO",       "productType": "3270"     }   ]'),
  message?: string(name='Message', description='msg', example='请求成功'),
  requestId?: string(name='RequestId', description='requestId', example='123'),
  success?: boolean(name='Success', description='success', example='true'),
}

model ListProductByGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProductByGroupResponseBody(name='body'),
}

async function listProductByGroup(request: ListProductByGroupRequest): ListProductByGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListProductByGroup', 'POST', '/', 'json', false, 'json', request);
}

model QueryTaskInfoRequest {
  orderId: string(name='OrderId', example='E220303AE1BYY3', position='Query'),
}

model QueryTaskInfoResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='null'),
  message?: string(name='Message', example='ok'),
  requestId?: string(name='RequestId', example='43135C31-E47A-5AD7-A693-6DC635201CE4'),
  success?: boolean(name='Success', example='true'),
}

model QueryTaskInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTaskInfoResponseBody(name='body'),
}

async function queryTaskInfo(request: QueryTaskInfoRequest): QueryTaskInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTaskInfo', 'POST', '/', 'json', false, 'json', request);
}

model ReplyMessageApiRequest {
  msgContent: string(name='MsgContent', example='消息内容', position='Query'),
  msgType?: string(name='MsgType', example='text', position='Query'),
  openGroupId?: string(name='OpenGroupId', example='cid+lUpHxTIXt7DYqJDcpVxlA==', position='Query'),
  orderId: string(name='OrderId', example='E2012312421', position='Query'),
  userId?: string(name='UserId', example='123', position='Query'),
  userName: string(name='UserName', example='用户名', position='Query'),
}

model ReplyMessageApiResponseBody = {
  code?: string(name='Code', description='code', example='200'),
  data?: string(name='Data', description='data', example='null'),
  message?: string(name='Message', description='msg', example='请求成功'),
  requestId?: string(name='RequestId', description='requestId', example='123'),
  success?: boolean(name='Success', description='success', example='true'),
}

model ReplyMessageApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReplyMessageApiResponseBody(name='body'),
}

async function replyMessageApi(request: ReplyMessageApiRequest): ReplyMessageApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReplyMessageApi', 'POST', '/', 'json', false, 'json', request);
}

model RestOpenTaskOrderRequest {
  openGroupId?: string(name='OpenGroupId', example='cidXcezGVQJjiWy2PzXylGwvg==', position='Query'),
  orderId: string(name='OrderId', example='E21111796147LE', position='Query'),
  resetContent?: string(name='ResetContent', example='重开补充说明', position='Query'),
  resetType?: string(name='ResetType', example='枚举值：6:解决方案无效；7:当前问题仍有疑问需要咨询；8:问题重复出现', position='Query'),
  userName?: string(name='UserName', example='操作人姓名', position='Query'),
}

model RestOpenTaskOrderResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='null'),
  message?: string(name='Message', example='请求成功'),
  requestId?: string(name='RequestId', example='123'),
  success?: boolean(name='Success', example='true'),
}

model RestOpenTaskOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RestOpenTaskOrderResponseBody(name='body'),
}

async function restOpenTaskOrder(request: RestOpenTaskOrderRequest): RestOpenTaskOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RestOpenTaskOrder', 'POST', '/', 'json', false, 'json', request);
}

