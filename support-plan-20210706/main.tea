/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('support-plan', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model EnterpriseDingtalkGroupMember {
  isAdmin?: boolean(name='IsAdmin', description='代表资源名称的资源属性字段', example='true'),
  mobile?: string(name='Mobile', description='代表资源组的资源属性字段', example='130xxxxxxxx'),
  name?: string(name='Name', description='代表创建时间的资源属性字段', example='张三'),
}

model CloseTaskOrderRequest {
  orderId?: string(name='OrderId', description='This parameter is required.', example='E211129AE190Y3'),
  userName?: string(name='UserName', example='操作人姓名'),
}

model CloseTaskOrderResponseBody = {
  code?: string(name='Code', description='code', example='200'),
  data?: string(name='Data', description='data', example='null'),
  message?: string(name='Message', description='msg', example='请求成功'),
  requestId?: string(name='RequestId', description='requestId', example='AQWFE#$#ASD'),
  success?: boolean(name='Success', description='success', example='true'),
}

model CloseTaskOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CloseTaskOrderResponseBody(name='body'),
}

/**
 * @summary 关闭任务单
 *
 * @param request CloseTaskOrderRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CloseTaskOrderResponse
 */
async function closeTaskOrderWithOptions(request: CloseTaskOrderRequest, runtime: Util.RuntimeOptions): CloseTaskOrderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.userName)) {
    query['UserName'] = request.userName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CloseTaskOrder',
    version = '2021-07-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 关闭任务单
 *
 * @param request CloseTaskOrderRequest
 * @return CloseTaskOrderResponse
 */
async function closeTaskOrder(request: CloseTaskOrderRequest): CloseTaskOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return closeTaskOrderWithOptions(request, runtime);
}

model CreateTaskOrderRequest {
  customerRealName?: string(name='CustomerRealName', example='建单人姓名：快手客户'),
  customerUserId?: string(name='CustomerUserId', example='123'),
  importantDescription?: string(name='ImportantDescription', example='重要性描述'),
  isImportant?: string(name='IsImportant', description='This parameter is required.', example='如:normal或者hurry'),
  openGroupId?: string(name='OpenGroupId', description='This parameter is required.', example='cid+lUpHxTIXt7DYqJDcpVxlA=='),
  productType?: string(name='ProductType', description='productType

This parameter is required.', example='3270'),
  productTypeName?: string(name='ProductTypeName', example='lc-云享咨询'),
  taskTitle?: string(name='TaskTitle', description='taskTitle

This parameter is required.', example='任务单标题：必填'),
}

model CreateTaskOrderResponseBody = {
  code?: string(name='Code', description='code', example='200'),
  data?: string(name='Data', example='E21111796147LE'),
  message?: string(name='Message', description='msg', example='ok'),
  requestId?: string(name='RequestId', description='requestId', example='123'),
  success?: boolean(name='Success', description='success', example='true'),
}

model CreateTaskOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTaskOrderResponseBody(name='body'),
}

/**
 * @summary 创建工单
 *
 * @param request CreateTaskOrderRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateTaskOrderResponse
 */
async function createTaskOrderWithOptions(request: CreateTaskOrderRequest, runtime: Util.RuntimeOptions): CreateTaskOrderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.customerRealName)) {
    query['CustomerRealName'] = request.customerRealName;
  }
  if (!Util.isUnset(request.customerUserId)) {
    query['CustomerUserId'] = request.customerUserId;
  }
  if (!Util.isUnset(request.importantDescription)) {
    query['ImportantDescription'] = request.importantDescription;
  }
  if (!Util.isUnset(request.isImportant)) {
    query['IsImportant'] = request.isImportant;
  }
  if (!Util.isUnset(request.openGroupId)) {
    query['OpenGroupId'] = request.openGroupId;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.productTypeName)) {
    query['ProductTypeName'] = request.productTypeName;
  }
  if (!Util.isUnset(request.taskTitle)) {
    query['TaskTitle'] = request.taskTitle;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateTaskOrder',
    version = '2021-07-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建工单
 *
 * @param request CreateTaskOrderRequest
 * @return CreateTaskOrderResponse
 */
async function createTaskOrder(request: CreateTaskOrderRequest): CreateTaskOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTaskOrderWithOptions(request, runtime);
}

model CreateTaskOrderByEventReportRequest {
  business?: string(name='Business', example='123'),
  createRealName?: string(name='CreateRealName', description='This parameter is required.', example='小二'),
  createUserId?: string(name='CreateUserId', description='This parameter is required.', example='1830426056957812'),
  eventBody?: {
    eventDesc?: string(name='EventDesc', description='This parameter is required.', example='告警内容'),
    eventId?: string(name='EventId', example='j9uwe-34328987'),
    eventLevel?: string(name='EventLevel', example='info,warn,alarm,critical'),
    eventLocation?: {
      domain?: string(name='Domain', example='flv13.bn.netease.com'),
    }(name='EventLocation'),
    eventTime?: string(name='EventTime', example='123456'),
  }(name='EventBody'),
  extinfo?: [ 
    {
      name?: string(name='Name', example='扩展信息名称'),
      value?: string(name='Value', example='扩展信息value值'),
    }
  ](name='Extinfo'),
  importantDesc?: string(name='ImportantDesc', example='紧急性原因描述'),
  joinChildGroupUserIds?: string(name='JoinChildGroupUserIds', example='123,456'),
  monitorCongregation?: string(name='MonitorCongregation', example='监控集如：视频业务的质量监控 123'),
  openGroupId?: string(name='OpenGroupId', description='This parameter is required.', example='cid+lUpHxTIXt7DYqJDcpVxlA=='),
  productType?: string(name='ProductType', description='This parameter is required.', example='3270'),
}

model CreateTaskOrderByEventReportShrinkRequest {
  business?: string(name='Business', example='123'),
  createRealName?: string(name='CreateRealName', description='This parameter is required.', example='小二'),
  createUserId?: string(name='CreateUserId', description='This parameter is required.', example='1830426056957812'),
  eventBodyShrink?: string(name='EventBody'),
  extinfoShrink?: string(name='Extinfo'),
  importantDesc?: string(name='ImportantDesc', example='紧急性原因描述'),
  joinChildGroupUserIds?: string(name='JoinChildGroupUserIds', example='123,456'),
  monitorCongregation?: string(name='MonitorCongregation', example='监控集如：视频业务的质量监控 123'),
  openGroupId?: string(name='OpenGroupId', description='This parameter is required.', example='cid+lUpHxTIXt7DYqJDcpVxlA=='),
  productType?: string(name='ProductType', description='This parameter is required.', example='3270'),
}

model CreateTaskOrderByEventReportResponseBody = {
  code?: string(name='Code', description='code', example='200'),
  data?: string(name='Data', example='{  "eid": "E211129DT18M06",     "status": "dealingNode"   }'),
  message?: string(name='Message', description='msg', example='请求成功'),
  requestId?: string(name='RequestId', description='requestId', example='02A300AC-367E-1716-A37B-F2FB46082610'),
  success?: boolean(name='Success', description='success', example='true'),
}

model CreateTaskOrderByEventReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTaskOrderByEventReportResponseBody(name='body'),
}

/**
 * @summary 告警建单
 *
 * @param tmpReq CreateTaskOrderByEventReportRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateTaskOrderByEventReportResponse
 */
async function createTaskOrderByEventReportWithOptions(tmpReq: CreateTaskOrderByEventReportRequest, runtime: Util.RuntimeOptions): CreateTaskOrderByEventReportResponse {
  Util.validateModel(tmpReq);
  var request = new CreateTaskOrderByEventReportShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.eventBody)) {
    request.eventBodyShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.eventBody, 'EventBody', 'json');
  }
  if (!Util.isUnset(tmpReq.extinfo)) {
    request.extinfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.extinfo, 'Extinfo', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.business)) {
    query['Business'] = request.business;
  }
  if (!Util.isUnset(request.createRealName)) {
    query['CreateRealName'] = request.createRealName;
  }
  if (!Util.isUnset(request.createUserId)) {
    query['CreateUserId'] = request.createUserId;
  }
  if (!Util.isUnset(request.eventBodyShrink)) {
    query['EventBody'] = request.eventBodyShrink;
  }
  if (!Util.isUnset(request.extinfoShrink)) {
    query['Extinfo'] = request.extinfoShrink;
  }
  if (!Util.isUnset(request.importantDesc)) {
    query['ImportantDesc'] = request.importantDesc;
  }
  if (!Util.isUnset(request.joinChildGroupUserIds)) {
    query['JoinChildGroupUserIds'] = request.joinChildGroupUserIds;
  }
  if (!Util.isUnset(request.monitorCongregation)) {
    query['MonitorCongregation'] = request.monitorCongregation;
  }
  if (!Util.isUnset(request.openGroupId)) {
    query['OpenGroupId'] = request.openGroupId;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateTaskOrderByEventReport',
    version = '2021-07-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 告警建单
 *
 * @param request CreateTaskOrderByEventReportRequest
 * @return CreateTaskOrderByEventReportResponse
 */
async function createTaskOrderByEventReport(request: CreateTaskOrderByEventReportRequest): CreateTaskOrderByEventReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTaskOrderByEventReportWithOptions(request, runtime);
}

model DeleteEnterpriseDingtalkGroupCustomerMemberRequest {
  mobiles?: [ string ](name='Mobiles', description='This parameter is required.'),
  openGroupId?: string(name='OpenGroupId', description='This parameter is required.', example='12345'),
}

model DeleteEnterpriseDingtalkGroupCustomerMemberShrinkRequest {
  mobilesShrink?: string(name='Mobiles', description='This parameter is required.'),
  openGroupId?: string(name='OpenGroupId', description='This parameter is required.', example='12345'),
}

model DeleteEnterpriseDingtalkGroupCustomerMemberResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='Invalid data'),
  requestId?: string(name='RequestId', example='123'),
  success?: boolean(name='Success', example='true'),
}

model DeleteEnterpriseDingtalkGroupCustomerMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEnterpriseDingtalkGroupCustomerMemberResponseBody(name='body'),
}

/**
 * @summary 删除企业钉群客户侧成员
 *
 * @param tmpReq DeleteEnterpriseDingtalkGroupCustomerMemberRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteEnterpriseDingtalkGroupCustomerMemberResponse
 */
async function deleteEnterpriseDingtalkGroupCustomerMemberWithOptions(tmpReq: DeleteEnterpriseDingtalkGroupCustomerMemberRequest, runtime: Util.RuntimeOptions): DeleteEnterpriseDingtalkGroupCustomerMemberResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteEnterpriseDingtalkGroupCustomerMemberShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.mobiles)) {
    request.mobilesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.mobiles, 'Mobiles', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.mobilesShrink)) {
    body['Mobiles'] = request.mobilesShrink;
  }
  if (!Util.isUnset(request.openGroupId)) {
    body['OpenGroupId'] = request.openGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEnterpriseDingtalkGroupCustomerMember',
    version = '2021-07-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除企业钉群客户侧成员
 *
 * @param request DeleteEnterpriseDingtalkGroupCustomerMemberRequest
 * @return DeleteEnterpriseDingtalkGroupCustomerMemberResponse
 */
async function deleteEnterpriseDingtalkGroupCustomerMember(request: DeleteEnterpriseDingtalkGroupCustomerMemberRequest): DeleteEnterpriseDingtalkGroupCustomerMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEnterpriseDingtalkGroupCustomerMemberWithOptions(request, runtime);
}

model GetEnterpriseDingtalkGroupRequest {
  openGroupId?: string(name='OpenGroupId', description='This parameter is required.', example='1234'),
}

model GetEnterpriseDingtalkGroupResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    groupName?: string(name='GroupName', example='A企业服务群'),
    openGroupId?: string(name='OpenGroupId', example='123'),
  }(name='Data'),
  message?: string(name='Message', example='Invalid data'),
  requestId?: string(name='RequestId', example='123'),
  success?: boolean(name='Success', example='true'),
}

model GetEnterpriseDingtalkGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEnterpriseDingtalkGroupResponseBody(name='body'),
}

/**
 * @summary 查询企业钉群
 *
 * @param request GetEnterpriseDingtalkGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetEnterpriseDingtalkGroupResponse
 */
async function getEnterpriseDingtalkGroupWithOptions(request: GetEnterpriseDingtalkGroupRequest, runtime: Util.RuntimeOptions): GetEnterpriseDingtalkGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.openGroupId)) {
    body['OpenGroupId'] = request.openGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetEnterpriseDingtalkGroup',
    version = '2021-07-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询企业钉群
 *
 * @param request GetEnterpriseDingtalkGroupRequest
 * @return GetEnterpriseDingtalkGroupResponse
 */
async function getEnterpriseDingtalkGroup(request: GetEnterpriseDingtalkGroupRequest): GetEnterpriseDingtalkGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEnterpriseDingtalkGroupWithOptions(request, runtime);
}

model GetEnterpriseDingtalkGroupCustomerMemberRequest {
  mobile?: string(name='Mobile', description='This parameter is required.', example='13900001111'),
  openGroupId?: string(name='OpenGroupId', description='This parameter is required.', example='123'),
}

model GetEnterpriseDingtalkGroupCustomerMemberResponseBody = {
  code?: string(name='Code', example='200'),
  data?: EnterpriseDingtalkGroupMember(name='Data'),
  message?: string(name='Message', example='Invalid data'),
  requestId?: string(name='RequestId', example='12'),
  success?: boolean(name='Success', example='true'),
}

model GetEnterpriseDingtalkGroupCustomerMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEnterpriseDingtalkGroupCustomerMemberResponseBody(name='body'),
}

/**
 * @summary 获取企业钉群客户侧成员
 *
 * @param request GetEnterpriseDingtalkGroupCustomerMemberRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetEnterpriseDingtalkGroupCustomerMemberResponse
 */
async function getEnterpriseDingtalkGroupCustomerMemberWithOptions(request: GetEnterpriseDingtalkGroupCustomerMemberRequest, runtime: Util.RuntimeOptions): GetEnterpriseDingtalkGroupCustomerMemberResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.mobile)) {
    body['Mobile'] = request.mobile;
  }
  if (!Util.isUnset(request.openGroupId)) {
    body['OpenGroupId'] = request.openGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetEnterpriseDingtalkGroupCustomerMember',
    version = '2021-07-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取企业钉群客户侧成员
 *
 * @param request GetEnterpriseDingtalkGroupCustomerMemberRequest
 * @return GetEnterpriseDingtalkGroupCustomerMemberResponse
 */
async function getEnterpriseDingtalkGroupCustomerMember(request: GetEnterpriseDingtalkGroupCustomerMemberRequest): GetEnterpriseDingtalkGroupCustomerMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEnterpriseDingtalkGroupCustomerMemberWithOptions(request, runtime);
}

model ListDdTaskOrderRequest {
  callerParentId?: long(name='CallerParentId', description='callerParentId', example='123'),
  callerType?: string(name='CallerType', description='callerType', example='123'),
  callerUid?: long(name='CallerUid', description='callerUid', example='123'),
  createRealName?: string(name='CreateRealName', description='createRealName', example='Tom'),
  endTime?: string(name='EndTime', description='endTime', example='2024-08-20 14:09:16'),
  openGroupId?: string(name='OpenGroupId', description='openGroupId', example='DAWNN14N'),
  orderId?: string(name='OrderId', description='orderId', example='E2112019N14PBY'),
  pageNo?: string(name='PageNo', description='pageNo', example='1'),
  pageSize?: string(name='PageSize', description='pageSize', example='10'),
  requestId?: string(name='RequestId', description='requestId', example='2F8557E4-742B-1CF7-8E83-28CD0C1F7B48'),
  startTime?: string(name='StartTime', description='startTime', example='2024-08-01 14:09:11'),
  taskStatus?: string(name='TaskStatus', description='taskStatus', example='dealingNode'),
}

model ListDdTaskOrderResponseBody = {
  code?: string(name='Code', description='code', example='200'),
  data?: string(name='Data', description='data', example='{   "msg": "请求成功",   "code": "200",   "data": [     {       "wfNodeId": "dealingNode",//任务单状态       "createEmpId": null,//创建人工号，可以忽略       "createTime": 1637571435000,//任务单创建时间       "orderId": "E2111221H1UKCZ",//任务单号       "isImportant": "normal",//是否紧急       "closeTime": null,//任务单关单时间       "taskTitle": "测试单16点44",//标题       "productType": "3270"//问题分类     },     {       "wfNodeId": "dealingNode",       "createEmpId": null,       "createTime": 1637820497000,       "orderId": "E211125CG111EM",       "isImportant": "normal",       "closeTime": null,       "taskTitle": "测试单14",       "class": "com.aliyun.dingtalklanding.dto.OpenTaskOrderDTO",       "productType": "3270"     }   ],   "success": true,   "requestId": "123",   "class": "com.aliyun.dingtalklanding.pop.dto.PopResultDTO" }'),
  message?: string(name='Message', description='msg', example='请求成功'),
  requestId?: string(name='RequestId', description='requestId', example='2F8557E4-742B-1CF7-8E83-28CD0C1F7B48'),
  success?: boolean(name='Success', description='success', example='true'),
}

model ListDdTaskOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDdTaskOrderResponseBody(name='body'),
}

/**
 * @summary ListDdTaskOrder
 *
 * @param request ListDdTaskOrderRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDdTaskOrderResponse
 */
async function listDdTaskOrderWithOptions(request: ListDdTaskOrderRequest, runtime: Util.RuntimeOptions): ListDdTaskOrderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.callerParentId)) {
    query['CallerParentId'] = request.callerParentId;
  }
  if (!Util.isUnset(request.callerType)) {
    query['CallerType'] = request.callerType;
  }
  if (!Util.isUnset(request.callerUid)) {
    query['CallerUid'] = request.callerUid;
  }
  if (!Util.isUnset(request.createRealName)) {
    query['CreateRealName'] = request.createRealName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.openGroupId)) {
    query['OpenGroupId'] = request.openGroupId;
  }
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.requestId)) {
    query['RequestId'] = request.requestId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.taskStatus)) {
    query['TaskStatus'] = request.taskStatus;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDdTaskOrder',
    version = '2021-07-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary ListDdTaskOrder
 *
 * @param request ListDdTaskOrderRequest
 * @return ListDdTaskOrderResponse
 */
async function listDdTaskOrder(request: ListDdTaskOrderRequest): ListDdTaskOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDdTaskOrderWithOptions(request, runtime);
}

model ListEnterpriseDingtalkGroupCustomerMembersRequest {
  openGroupId?: string(name='OpenGroupId', description='This parameter is required.', example='123'),
}

model ListEnterpriseDingtalkGroupCustomerMembersResponseBody = {
  code?: string(name='Code', example='200'),
  data?: [
    EnterpriseDingtalkGroupMember
  ](name='Data'),
  message?: string(name='Message', example='Invalid data'),
  requestId?: string(name='RequestId', example='123'),
  success?: boolean(name='Success', example='true'),
}

model ListEnterpriseDingtalkGroupCustomerMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEnterpriseDingtalkGroupCustomerMembersResponseBody(name='body'),
}

/**
 * @summary 获取钉群中所有客户侧人员信息
 *
 * @param request ListEnterpriseDingtalkGroupCustomerMembersRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListEnterpriseDingtalkGroupCustomerMembersResponse
 */
async function listEnterpriseDingtalkGroupCustomerMembersWithOptions(request: ListEnterpriseDingtalkGroupCustomerMembersRequest, runtime: Util.RuntimeOptions): ListEnterpriseDingtalkGroupCustomerMembersResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.openGroupId)) {
    body['OpenGroupId'] = request.openGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListEnterpriseDingtalkGroupCustomerMembers',
    version = '2021-07-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取钉群中所有客户侧人员信息
 *
 * @param request ListEnterpriseDingtalkGroupCustomerMembersRequest
 * @return ListEnterpriseDingtalkGroupCustomerMembersResponse
 */
async function listEnterpriseDingtalkGroupCustomerMembers(request: ListEnterpriseDingtalkGroupCustomerMembersRequest): ListEnterpriseDingtalkGroupCustomerMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEnterpriseDingtalkGroupCustomerMembersWithOptions(request, runtime);
}

model ListEnterpriseDingtalkGroupsResponseBody = {
  code?: string(name='Code', example='true'),
  data?: [ 
    {
      groupName?: string(name='GroupName', example='A公司服务群'),
      openGroupId?: string(name='OpenGroupId', example='123'),
    }
  ](name='Data'),
  message?: string(name='Message', example='Data Invalid'),
  requestId?: string(name='RequestId', example='12xxxxx'),
  success?: boolean(name='Success', example='true'),
}

model ListEnterpriseDingtalkGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEnterpriseDingtalkGroupsResponseBody(name='body'),
}

/**
 * @summary 查询所有企业钉群成员
 *
 * @param request ListEnterpriseDingtalkGroupsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListEnterpriseDingtalkGroupsResponse
 */
async function listEnterpriseDingtalkGroupsWithOptions(runtime: Util.RuntimeOptions): ListEnterpriseDingtalkGroupsResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'ListEnterpriseDingtalkGroups',
    version = '2021-07-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询所有企业钉群成员
 *
 * @return ListEnterpriseDingtalkGroupsResponse
 */
async function listEnterpriseDingtalkGroups(): ListEnterpriseDingtalkGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEnterpriseDingtalkGroupsWithOptions(runtime);
}

model ListProductByGroupRequest {
  openGroupId?: string(name='OpenGroupId', description='This parameter is required.', example='cidXcezGVQJjiWy2PzXylGwvg=='),
}

model ListProductByGroupResponseBody = {
  code?: string(name='Code', description='code', example='200'),
  data?: string(name='Data', description='data', example='[     {       "wfNodeId": "dealingNode",//任务单状态       "createEmpId": null,//创建人工号，可以忽略       "createTime": 1637571435000,//任务单创建时间       "orderId": "E2111221H1UKCZ",//任务单号       "isImportant": "normal",//是否紧急       "closeTime": null,//任务单关单时间       "taskTitle": "测试单16点44",//标题       "productType": "3270"//问题分类     },     {       "wfNodeId": "dealingNode",       "createEmpId": null,       "createTime": 1637820497000,       "orderId": "E211125CG111EM",       "isImportant": "normal",       "closeTime": null,       "taskTitle": "测试单14",       "class": "com.aliyun.dingtalklanding.dto.OpenTaskOrderDTO",       "productType": "3270"     }   ]'),
  message?: string(name='Message', description='msg', example='请求成功'),
  requestId?: string(name='RequestId', description='requestId', example='123'),
  success?: boolean(name='Success', description='success', example='true'),
}

model ListProductByGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProductByGroupResponseBody(name='body'),
}

/**
 * @summary 获取问题分类
 *
 * @param request ListProductByGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListProductByGroupResponse
 */
async function listProductByGroupWithOptions(request: ListProductByGroupRequest, runtime: Util.RuntimeOptions): ListProductByGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.openGroupId)) {
    query['OpenGroupId'] = request.openGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProductByGroup',
    version = '2021-07-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取问题分类
 *
 * @param request ListProductByGroupRequest
 * @return ListProductByGroupResponse
 */
async function listProductByGroup(request: ListProductByGroupRequest): ListProductByGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProductByGroupWithOptions(request, runtime);
}

model QueryTaskInfoRequest {
  orderId?: string(name='OrderId', description='The ID of the order.

This parameter is required.', example='E220303AE1BYY3'),
}

model QueryTaskInfoResponseBody = {
  code?: string(name='Code', description='The status code or error code.', example='200'),
  data?: {
    orderId?: string(name='OrderId'),
    taskStatus?: string(name='TaskStatus'),
  }(name='Data', description='The data returned.', example='{"taskStatus": "dealingNode","orderId": "E21111796147LE"}'),
  message?: string(name='Message', description='The returned message.', example='ok'),
  requestId?: string(name='RequestId', description='The request ID.', example='43135C31-E47A-5AD7-A693-6DC635201CE4'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model QueryTaskInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryTaskInfoResponseBody(name='body'),
}

/**
 * @summary 获取工单状态
 *
 * @param request QueryTaskInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryTaskInfoResponse
 */
async function queryTaskInfoWithOptions(request: QueryTaskInfoRequest, runtime: Util.RuntimeOptions): QueryTaskInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryTaskInfo',
    version = '2021-07-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取工单状态
 *
 * @param request QueryTaskInfoRequest
 * @return QueryTaskInfoResponse
 */
async function queryTaskInfo(request: QueryTaskInfoRequest): QueryTaskInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTaskInfoWithOptions(request, runtime);
}

model ReplyMessageApiRequest {
  msgContent?: string(name='MsgContent', description='This parameter is required.', example='消息内容'),
  msgType?: string(name='MsgType', example='text'),
  openGroupId?: string(name='OpenGroupId', example='cid+lUpHxTIXt7DYqJDcpVxlA=='),
  orderId?: string(name='OrderId', description='This parameter is required.', example='E2012312421'),
  userId?: string(name='UserId', example='123'),
  userName?: string(name='UserName', description='This parameter is required.', example='用户名'),
}

model ReplyMessageApiResponseBody = {
  code?: string(name='Code', description='code', example='200'),
  data?: string(name='Data', description='data', example='null'),
  message?: string(name='Message', description='msg', example='请求成功'),
  requestId?: string(name='RequestId', description='requestId', example='123'),
  success?: boolean(name='Success', description='success', example='true'),
}

model ReplyMessageApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReplyMessageApiResponseBody(name='body'),
}

/**
 * @summary 客户回复消息
 *
 * @param request ReplyMessageApiRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ReplyMessageApiResponse
 */
async function replyMessageApiWithOptions(request: ReplyMessageApiRequest, runtime: Util.RuntimeOptions): ReplyMessageApiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.msgContent)) {
    query['MsgContent'] = request.msgContent;
  }
  if (!Util.isUnset(request.msgType)) {
    query['MsgType'] = request.msgType;
  }
  if (!Util.isUnset(request.openGroupId)) {
    query['OpenGroupId'] = request.openGroupId;
  }
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  if (!Util.isUnset(request.userName)) {
    query['UserName'] = request.userName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReplyMessageApi',
    version = '2021-07-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 客户回复消息
 *
 * @param request ReplyMessageApiRequest
 * @return ReplyMessageApiResponse
 */
async function replyMessageApi(request: ReplyMessageApiRequest): ReplyMessageApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return replyMessageApiWithOptions(request, runtime);
}

model RestOpenTaskOrderRequest {
  openGroupId?: string(name='OpenGroupId', example='cidXcezGVQJjiWy2PzXylGwvg=='),
  orderId?: string(name='OrderId', description='This parameter is required.', example='E21111796147LE'),
  resetContent?: string(name='ResetContent', example='重开补充说明'),
  resetType?: string(name='ResetType', example='枚举值：6:解决方案无效；7:当前问题仍有疑问需要咨询；8:问题重复出现'),
  userName?: string(name='UserName', example='操作人姓名'),
}

model RestOpenTaskOrderResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='null'),
  message?: string(name='Message', example='请求成功'),
  requestId?: string(name='RequestId', example='123'),
  success?: boolean(name='Success', example='true'),
}

model RestOpenTaskOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RestOpenTaskOrderResponseBody(name='body'),
}

/**
 * @summary 重开任务单(待客户确认状态)
 *
 * @param request RestOpenTaskOrderRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RestOpenTaskOrderResponse
 */
async function restOpenTaskOrderWithOptions(request: RestOpenTaskOrderRequest, runtime: Util.RuntimeOptions): RestOpenTaskOrderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.openGroupId)) {
    query['OpenGroupId'] = request.openGroupId;
  }
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.resetContent)) {
    query['ResetContent'] = request.resetContent;
  }
  if (!Util.isUnset(request.resetType)) {
    query['ResetType'] = request.resetType;
  }
  if (!Util.isUnset(request.userName)) {
    query['UserName'] = request.userName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RestOpenTaskOrder',
    version = '2021-07-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 重开任务单(待客户确认状态)
 *
 * @param request RestOpenTaskOrderRequest
 * @return RestOpenTaskOrderResponse
 */
async function restOpenTaskOrder(request: RestOpenTaskOrderRequest): RestOpenTaskOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return restOpenTaskOrderWithOptions(request, runtime);
}

