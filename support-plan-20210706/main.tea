/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  

  checkConfig(config);
  @endpoint = getEndpoint('support-plan', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model EnterpriseDingtalkGroupMember {
  isAdmin?: boolean(name='IsAdmin', description='是否企业钉群管理员'),
  mobile?: string(name='Mobile', description='成员手机号'),
  name?: string(name='Name', description='成员姓名'),
}

model CloseTaskOrderRequest {
  orderId?: string(name='OrderId', description='任务单id'),
  userName?: string(name='UserName', description='操作人姓名'),
}

model CloseTaskOrderResponseBody = {
  code?: string(name='Code', description='code'),
  data?: string(name='Data', description='data'),
  message?: string(name='Message', description='msg'),
  requestId?: string(name='RequestId', description='requestId'),
  success?: boolean(name='Success', description='success'),
}

model CloseTaskOrderResponse = {
  headers: map[string]string(name='headers'),
  body: CloseTaskOrderResponseBody(name='body'),
}

async function closeTaskOrderWithOptions(request: CloseTaskOrderRequest, runtime: Util.RuntimeOptions): CloseTaskOrderResponse {
  Util.validateModel(request);
  var query = {};
  query["OrderId"] = request.orderId;
  query["UserName"] = request.userName;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CloseTaskOrder',
    version = '2021-07-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function closeTaskOrder(request: CloseTaskOrderRequest): CloseTaskOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return closeTaskOrderWithOptions(request, runtime);
}

model CreateTaskOrderRequest {
  customerRealName?: string(name='CustomerRealName', description='建单人姓名：快手客户'),
  customerUserId?: string(name='CustomerUserId', description='建单人：固定值'),
  importantDescription?: string(name='ImportantDescription', description='重要性描述'),
  isImportant?: string(name='IsImportant', description='是否紧急'),
  openGroupId?: string(name='OpenGroupId', description='主群关联Id'),
  productType?: string(name='ProductType', description='productType'),
  productTypeName?: string(name='ProductTypeName', description='问题分类名称'),
  taskTitle?: string(name='TaskTitle', description='任务单标题'),
}

model CreateTaskOrderResponseBody = {
  code?: string(name='Code', description='code'),
  data?: string(name='Data', description='返回任务单号：OrderId'),
  message?: string(name='Message', description='msg'),
  requestId?: string(name='RequestId', description='requestId'),
  success?: boolean(name='Success', description='success'),
}

model CreateTaskOrderResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTaskOrderResponseBody(name='body'),
}

async function createTaskOrderWithOptions(request: CreateTaskOrderRequest, runtime: Util.RuntimeOptions): CreateTaskOrderResponse {
  Util.validateModel(request);
  var query = {};
  query["CustomerRealName"] = request.customerRealName;
  query["CustomerUserId"] = request.customerUserId;
  query["ImportantDescription"] = request.importantDescription;
  query["IsImportant"] = request.isImportant;
  query["OpenGroupId"] = request.openGroupId;
  query["ProductType"] = request.productType;
  query["ProductTypeName"] = request.productTypeName;
  query["TaskTitle"] = request.taskTitle;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateTaskOrder',
    version = '2021-07-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTaskOrder(request: CreateTaskOrderRequest): CreateTaskOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTaskOrderWithOptions(request, runtime);
}

model CreateTaskOrderByEventReportRequest {
  business?: string(name='Business', description='告警所属业务'),
  createRealName?: string(name='CreateRealName', description='提交人姓名'),
  createUserId?: string(name='CreateUserId', description='提交人userId'),
  eventBody?: {
    eventDesc?: string(name='EventDesc', description='当前告警描述信息'),
    eventId?: string(name='EventId', description='事件id'),
    eventLevel?: string(name='EventLevel', description='事件级别'),
    eventLocation?: {
      domain?: string(name='Domain', description='domian域名'),
    }(name='EventLocation', description='事件源标识，自定义和TAM在云企配置的Location指标一致'),
    eventTime?: string(name='EventTime', description='事件上报时间'),
  }(name='EventBody', description='告警描述'),
  extinfo?: [ 
    {
      name?: string(name='Name', description='扩展信息名称'),
      value?: string(name='Value', description='扩展信息value值'),
    }
  ](name='Extinfo', description='扩展信息'),
  importantDesc?: string(name='ImportantDesc', description='当eventLevel为warn时，必传'),
  joinChildGroupUserIds?: string(name='JoinChildGroupUserIds', description='建单入群人员'),
  monitorCongregation?: string(name='MonitorCongregation', description='监控集如：视频业务的质量监控'),
  openGroupId?: string(name='OpenGroupId', description='告警关联主群id'),
  productType?: string(name='ProductType', description='问题分类'),
}

model CreateTaskOrderByEventReportShrinkRequest {
  business?: string(name='Business', description='告警所属业务'),
  createRealName?: string(name='CreateRealName', description='提交人姓名'),
  createUserId?: string(name='CreateUserId', description='提交人userId'),
  eventBodyShrink?: string(name='EventBody', description='告警描述'),
  extinfoShrink?: string(name='Extinfo', description='扩展信息'),
  importantDesc?: string(name='ImportantDesc', description='当eventLevel为warn时，必传'),
  joinChildGroupUserIds?: string(name='JoinChildGroupUserIds', description='建单入群人员'),
  monitorCongregation?: string(name='MonitorCongregation', description='监控集如：视频业务的质量监控'),
  openGroupId?: string(name='OpenGroupId', description='告警关联主群id'),
  productType?: string(name='ProductType', description='问题分类'),
}

model CreateTaskOrderByEventReportResponseBody = {
  code?: string(name='Code', description='code'),
  data?: string(name='Data', description='返回信息'),
  message?: string(name='Message', description='msg'),
  requestId?: string(name='RequestId', description='requestId'),
  success?: boolean(name='Success', description='success'),
}

model CreateTaskOrderByEventReportResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTaskOrderByEventReportResponseBody(name='body'),
}

async function createTaskOrderByEventReportWithOptions(tmpReq: CreateTaskOrderByEventReportRequest, runtime: Util.RuntimeOptions): CreateTaskOrderByEventReportResponse {
  Util.validateModel(tmpReq);
  var request = new CreateTaskOrderByEventReportShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.eventBody)) {
    request.eventBodyShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.eventBody, 'EventBody', 'json');
  }
  if (!Util.isUnset(tmpReq.extinfo)) {
    request.extinfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.extinfo, 'Extinfo', 'json');
  }
  var query = {};
  query["Business"] = request.business;
  query["CreateRealName"] = request.createRealName;
  query["CreateUserId"] = request.createUserId;
  query["EventBody"] = request.eventBodyShrink;
  query["Extinfo"] = request.extinfoShrink;
  query["ImportantDesc"] = request.importantDesc;
  query["JoinChildGroupUserIds"] = request.joinChildGroupUserIds;
  query["MonitorCongregation"] = request.monitorCongregation;
  query["OpenGroupId"] = request.openGroupId;
  query["ProductType"] = request.productType;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateTaskOrderByEventReport',
    version = '2021-07-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTaskOrderByEventReport(request: CreateTaskOrderByEventReportRequest): CreateTaskOrderByEventReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTaskOrderByEventReportWithOptions(request, runtime);
}

model DeleteEnterpriseDingtalkGroupCustomerMemberRequest {
  mobiles?: [ string ](name='Mobiles'),
  openGroupId?: string(name='OpenGroupId'),
}

model DeleteEnterpriseDingtalkGroupCustomerMemberShrinkRequest {
  mobilesShrink?: string(name='Mobiles'),
  openGroupId?: string(name='OpenGroupId'),
}

model DeleteEnterpriseDingtalkGroupCustomerMemberResponseBody = {
  code?: string(name='Code', description='接口请求结果返回码'),
  message?: string(name='Message', description='错误信息, 当success=false的时候, 可以取到message'),
  requestId?: string(name='RequestId', description='接口请求的唯一ID, 每次调用requestID唯一'),
  success?: boolean(name='Success', description='调用接口返回是否成功, true代表调用正常'),
}

model DeleteEnterpriseDingtalkGroupCustomerMemberResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteEnterpriseDingtalkGroupCustomerMemberResponseBody(name='body'),
}

async function deleteEnterpriseDingtalkGroupCustomerMemberWithOptions(tmpReq: DeleteEnterpriseDingtalkGroupCustomerMemberRequest, runtime: Util.RuntimeOptions): DeleteEnterpriseDingtalkGroupCustomerMemberResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteEnterpriseDingtalkGroupCustomerMemberShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.mobiles)) {
    request.mobilesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.mobiles, 'Mobiles', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEnterpriseDingtalkGroupCustomerMember',
    version = '2021-07-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteEnterpriseDingtalkGroupCustomerMember(request: DeleteEnterpriseDingtalkGroupCustomerMemberRequest): DeleteEnterpriseDingtalkGroupCustomerMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEnterpriseDingtalkGroupCustomerMemberWithOptions(request, runtime);
}

model GetEnterpriseDingtalkGroupRequest {
  openGroupId?: string(name='OpenGroupId'),
}

model GetEnterpriseDingtalkGroupResponseBody = {
  code?: string(name='Code', description='接口请求结果返回码'),
  data?: {
    groupName?: string(name='GroupName', description='企业服务群的群名'),
    openGroupId?: string(name='OpenGroupId', description='企业服务群的ID'),
  }(name='Data'),
  message?: string(name='Message', description='错误信息, 当success=false的时候, 可以取到message'),
  requestId?: string(name='RequestId', description='接口请求的唯一ID, 每次调用requestID唯一'),
  success?: boolean(name='Success', description='调用接口返回是否成功, true代表调用正常'),
}

model GetEnterpriseDingtalkGroupResponse = {
  headers: map[string]string(name='headers'),
  body: GetEnterpriseDingtalkGroupResponseBody(name='body'),
}

async function getEnterpriseDingtalkGroupWithOptions(request: GetEnterpriseDingtalkGroupRequest, runtime: Util.RuntimeOptions): GetEnterpriseDingtalkGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetEnterpriseDingtalkGroup',
    version = '2021-07-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getEnterpriseDingtalkGroup(request: GetEnterpriseDingtalkGroupRequest): GetEnterpriseDingtalkGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEnterpriseDingtalkGroupWithOptions(request, runtime);
}

model GetEnterpriseDingtalkGroupCustomerMemberRequest {
  mobile?: string(name='Mobile'),
  openGroupId?: string(name='OpenGroupId'),
}

model GetEnterpriseDingtalkGroupCustomerMemberResponseBody = {
  code?: string(name='Code', description='接口请求结果返回码'),
  data?: EnterpriseDingtalkGroupMember(name='Data', description='成员信息列表'),
  message?: string(name='Message', description='错误信息, 当success=false的时候, 可以取到message'),
  requestId?: string(name='RequestId', description='接口请求的唯一ID, 每次调用requestID唯一'),
  success?: boolean(name='Success', description='调用接口返回是否成功, true代表调用正常'),
}

model GetEnterpriseDingtalkGroupCustomerMemberResponse = {
  headers: map[string]string(name='headers'),
  body: GetEnterpriseDingtalkGroupCustomerMemberResponseBody(name='body'),
}

async function getEnterpriseDingtalkGroupCustomerMemberWithOptions(request: GetEnterpriseDingtalkGroupCustomerMemberRequest, runtime: Util.RuntimeOptions): GetEnterpriseDingtalkGroupCustomerMemberResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetEnterpriseDingtalkGroupCustomerMember',
    version = '2021-07-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getEnterpriseDingtalkGroupCustomerMember(request: GetEnterpriseDingtalkGroupCustomerMemberRequest): GetEnterpriseDingtalkGroupCustomerMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEnterpriseDingtalkGroupCustomerMemberWithOptions(request, runtime);
}

model ListDdTaskOrderRequest {
  callerParentId?: long(name='CallerParentId', description='callerParentId'),
  callerType?: string(name='CallerType', description='callerType'),
  callerUid?: long(name='CallerUid', description='callerUid'),
  openGroupId?: string(name='OpenGroupId', description='openGroupId'),
  orderId?: string(name='OrderId', description='orderId'),
  requestId?: string(name='RequestId', description='requestId'),
  taskStatus?: string(name='TaskStatus', description='taskStatus'),
}

model ListDdTaskOrderResponseBody = {
  code?: string(name='Code', description='code'),
  data?: string(name='Data', description='data'),
  message?: string(name='Message', description='msg'),
  requestId?: string(name='RequestId', description='requestId'),
  success?: boolean(name='Success', description='success'),
}

model ListDdTaskOrderResponse = {
  headers: map[string]string(name='headers'),
  body: ListDdTaskOrderResponseBody(name='body'),
}

async function listDdTaskOrderWithOptions(request: ListDdTaskOrderRequest, runtime: Util.RuntimeOptions): ListDdTaskOrderResponse {
  Util.validateModel(request);
  var query = {};
  query["CallerParentId"] = request.callerParentId;
  query["CallerType"] = request.callerType;
  query["CallerUid"] = request.callerUid;
  query["OpenGroupId"] = request.openGroupId;
  query["OrderId"] = request.orderId;
  query["RequestId"] = request.requestId;
  query["TaskStatus"] = request.taskStatus;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListDdTaskOrder',
    version = '2021-07-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDdTaskOrder(request: ListDdTaskOrderRequest): ListDdTaskOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDdTaskOrderWithOptions(request, runtime);
}

model ListEnterpriseDingtalkGroupCustomerMembersRequest {
  openGroupId?: string(name='OpenGroupId', description='企业服务群ID'),
}

model ListEnterpriseDingtalkGroupCustomerMembersResponseBody = {
  code?: string(name='Code', description='接口请求结果返回码'),
  data?: [
    EnterpriseDingtalkGroupMember
  ](name='Data', description='企业服务群成员列表'),
  message?: string(name='Message', description='错误信息, 当success=false的时候, 可以取到message'),
  requestId?: string(name='RequestId', description='接口请求的唯一ID, 每次调用requestID唯一'),
  success?: boolean(name='Success', description='调用接口返回是否成功, true代表调用正常'),
}

model ListEnterpriseDingtalkGroupCustomerMembersResponse = {
  headers: map[string]string(name='headers'),
  body: ListEnterpriseDingtalkGroupCustomerMembersResponseBody(name='body'),
}

async function listEnterpriseDingtalkGroupCustomerMembersWithOptions(request: ListEnterpriseDingtalkGroupCustomerMembersRequest, runtime: Util.RuntimeOptions): ListEnterpriseDingtalkGroupCustomerMembersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListEnterpriseDingtalkGroupCustomerMembers',
    version = '2021-07-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listEnterpriseDingtalkGroupCustomerMembers(request: ListEnterpriseDingtalkGroupCustomerMembersRequest): ListEnterpriseDingtalkGroupCustomerMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEnterpriseDingtalkGroupCustomerMembersWithOptions(request, runtime);
}

model ListEnterpriseDingtalkGroupsResponseBody = {
  code?: string(name='Code', description='接口请求结果返回码'),
  data?: [ 
    {
      groupName?: string(name='GroupName', description='钉群名'),
      openGroupId?: string(name='OpenGroupId', description='钉群ID'),
    }
  ](name='Data', description='服务钉群数组'),
  message?: string(name='Message', description='错误信息, 当success=false的时候, 可以取到message'),
  requestId?: string(name='RequestId', description='接口请求的唯一ID, 每次调用requestID唯一'),
  success?: boolean(name='Success', description='调用接口返回是否成功, true代表调用正常'),
}

model ListEnterpriseDingtalkGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListEnterpriseDingtalkGroupsResponseBody(name='body'),
}

async function listEnterpriseDingtalkGroupsWithOptions(runtime: Util.RuntimeOptions): ListEnterpriseDingtalkGroupsResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'ListEnterpriseDingtalkGroups',
    version = '2021-07-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listEnterpriseDingtalkGroups(): ListEnterpriseDingtalkGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEnterpriseDingtalkGroupsWithOptions(runtime);
}

model ListProductByGroupRequest {
  openGroupId?: string(name='OpenGroupId', description='主群关联Id'),
}

model ListProductByGroupResponseBody = {
  code?: string(name='Code', description='code'),
  data?: string(name='Data', description='data'),
  message?: string(name='Message', description='msg'),
  requestId?: string(name='RequestId', description='接口交互动态值'),
  success?: boolean(name='Success', description='success'),
}

model ListProductByGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ListProductByGroupResponseBody(name='body'),
}

async function listProductByGroupWithOptions(request: ListProductByGroupRequest, runtime: Util.RuntimeOptions): ListProductByGroupResponse {
  Util.validateModel(request);
  var query = {};
  query["OpenGroupId"] = request.openGroupId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListProductByGroup',
    version = '2021-07-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listProductByGroup(request: ListProductByGroupRequest): ListProductByGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProductByGroupWithOptions(request, runtime);
}

model QueryTaskInfoRequest {
  orderId?: string(name='OrderId', description='任务单ID'),
}

model QueryTaskInfoResponseBody = {
  code?: string(name='Code', description='code'),
  data?: string(name='Data', description='data'),
  message?: string(name='Message', description='msg'),
  requestId?: string(name='RequestId', description='requestId'),
  success?: boolean(name='Success', description='success'),
}

model QueryTaskInfoResponse = {
  headers: map[string]string(name='headers'),
  body: QueryTaskInfoResponseBody(name='body'),
}

async function queryTaskInfoWithOptions(request: QueryTaskInfoRequest, runtime: Util.RuntimeOptions): QueryTaskInfoResponse {
  Util.validateModel(request);
  var query = {};
  query["OrderId"] = request.orderId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryTaskInfo',
    version = '2021-07-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryTaskInfo(request: QueryTaskInfoRequest): QueryTaskInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTaskInfoWithOptions(request, runtime);
}

model ReplyMessageApiRequest {
  msgContent?: string(name='MsgContent', description='消息内容'),
  msgType?: string(name='MsgType', description='消息类型'),
  openGroupId?: string(name='OpenGroupId', description='群Id'),
  orderId?: string(name='OrderId', description='任务单Id'),
  userId?: string(name='UserId', description='消息发送人Id'),
  userName?: string(name='UserName', description='消息发送人'),
}

model ReplyMessageApiResponseBody = {
  code?: string(name='Code', description='code'),
  data?: string(name='Data', description='data'),
  message?: string(name='Message', description='msg'),
  requestId?: string(name='RequestId', description='requestId'),
  success?: boolean(name='Success', description='success'),
}

model ReplyMessageApiResponse = {
  headers: map[string]string(name='headers'),
  body: ReplyMessageApiResponseBody(name='body'),
}

async function replyMessageApiWithOptions(request: ReplyMessageApiRequest, runtime: Util.RuntimeOptions): ReplyMessageApiResponse {
  Util.validateModel(request);
  var query = {};
  query["MsgContent"] = request.msgContent;
  query["MsgType"] = request.msgType;
  query["OpenGroupId"] = request.openGroupId;
  query["OrderId"] = request.orderId;
  query["UserId"] = request.userId;
  query["UserName"] = request.userName;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ReplyMessageApi',
    version = '2021-07-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function replyMessageApi(request: ReplyMessageApiRequest): ReplyMessageApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return replyMessageApiWithOptions(request, runtime);
}

model RestOpenTaskOrderRequest {
  openGroupId?: string(name='OpenGroupId', description='主群关联Id'),
  orderId?: string(name='OrderId', description='任务单ID'),
  resetContent?: string(name='ResetContent', description='重开说明'),
  resetType?: string(name='ResetType', description='重开类型'),
  userName?: string(name='UserName', description='操作人姓名'),
}

model RestOpenTaskOrderResponseBody = {
  code?: string(name='Code', description='code'),
  data?: string(name='Data', description='data'),
  message?: string(name='Message', description='msg'),
  requestId?: string(name='RequestId', description='requestId'),
  success?: boolean(name='Success', description='success'),
}

model RestOpenTaskOrderResponse = {
  headers: map[string]string(name='headers'),
  body: RestOpenTaskOrderResponseBody(name='body'),
}

async function restOpenTaskOrderWithOptions(request: RestOpenTaskOrderRequest, runtime: Util.RuntimeOptions): RestOpenTaskOrderResponse {
  Util.validateModel(request);
  var query = {};
  query["OpenGroupId"] = request.openGroupId;
  query["OrderId"] = request.orderId;
  query["ResetContent"] = request.resetContent;
  query["ResetType"] = request.resetType;
  query["UserName"] = request.userName;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'RestOpenTaskOrder',
    version = '2021-07-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function restOpenTaskOrder(request: RestOpenTaskOrderRequest): RestOpenTaskOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return restOpenTaskOrderWithOptions(request, runtime);
}

