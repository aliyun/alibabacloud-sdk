/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('support-plan', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model EnterpriseDingtalkGroupMember {
  isAdmin?: boolean(name='IsAdmin', description='是否企业钉群管理员'),
  mobile?: string(name='Mobile', description='成员手机号'),
  name?: string(name='Name', description='成员姓名'),
}

model ListEnterpriseDingtalkGroupCustomerMembersRequest {
  openGroupId?: string(name='OpenGroupId', description='企业服务群ID'),
}

model ListEnterpriseDingtalkGroupCustomerMembersResponseBody = {
  requestId?: string(name='RequestId', description='接口请求的唯一ID, 每次调用requestID唯一'),
  success?: boolean(name='Success', description='调用接口返回是否成功, true代表调用正常'),
  message?: string(name='Message', description='错误信息, 当success=false的时候, 可以取到message'),
  code?: string(name='Code', description='接口请求结果返回码'),
  data?: [
    EnterpriseDingtalkGroupMember
  ](name='Data', description='企业服务群成员列表'),
}

model ListEnterpriseDingtalkGroupCustomerMembersResponse = {
  headers: map[string]string(name='headers'),
  body: ListEnterpriseDingtalkGroupCustomerMembersResponseBody(name='body'),
}

async function listEnterpriseDingtalkGroupCustomerMembersWithOptions(request: ListEnterpriseDingtalkGroupCustomerMembersRequest, runtime: Util.RuntimeOptions): ListEnterpriseDingtalkGroupCustomerMembersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListEnterpriseDingtalkGroupCustomerMembers', '2021-07-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listEnterpriseDingtalkGroupCustomerMembers(request: ListEnterpriseDingtalkGroupCustomerMembersRequest): ListEnterpriseDingtalkGroupCustomerMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEnterpriseDingtalkGroupCustomerMembersWithOptions(request, runtime);
}

model ListEnterpriseDingtalkGroupsResponseBody = {
  requestId?: string(name='RequestId', description='接口请求的唯一ID, 每次调用requestID唯一'),
  success?: boolean(name='Success', description='调用接口返回是否成功, true代表调用正常'),
  message?: string(name='Message', description='错误信息, 当success=false的时候, 可以取到message'),
  code?: string(name='Code', description='接口请求结果返回码'),
  data?: [ 
    {
      openGroupId?: string(name='OpenGroupId', description='钉群ID'),
      groupName?: string(name='GroupName', description='钉群名'),
    }
  ](name='Data', description='服务钉群数组'),
}

model ListEnterpriseDingtalkGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListEnterpriseDingtalkGroupsResponseBody(name='body'),
}

async function listEnterpriseDingtalkGroupsWithOptions(runtime: Util.RuntimeOptions): ListEnterpriseDingtalkGroupsResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('ListEnterpriseDingtalkGroups', '2021-07-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listEnterpriseDingtalkGroups(): ListEnterpriseDingtalkGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEnterpriseDingtalkGroupsWithOptions(runtime);
}

model DeleteEnterpriseDingtalkGroupCustomerMemberRequest {
  openGroupId?: string(name='OpenGroupId'),
  mobiles?: [ string ](name='Mobiles'),
}

model DeleteEnterpriseDingtalkGroupCustomerMemberShrinkRequest {
  openGroupId?: string(name='OpenGroupId'),
  mobilesShrink?: string(name='Mobiles'),
}

model DeleteEnterpriseDingtalkGroupCustomerMemberResponseBody = {
  requestId?: string(name='RequestId', description='接口请求的唯一ID, 每次调用requestID唯一'),
  success?: boolean(name='Success', description='调用接口返回是否成功, true代表调用正常'),
  message?: string(name='Message', description='错误信息, 当success=false的时候, 可以取到message'),
  code?: string(name='Code', description='接口请求结果返回码'),
}

model DeleteEnterpriseDingtalkGroupCustomerMemberResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteEnterpriseDingtalkGroupCustomerMemberResponseBody(name='body'),
}

async function deleteEnterpriseDingtalkGroupCustomerMemberWithOptions(tmpReq: DeleteEnterpriseDingtalkGroupCustomerMemberRequest, runtime: Util.RuntimeOptions): DeleteEnterpriseDingtalkGroupCustomerMemberResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteEnterpriseDingtalkGroupCustomerMemberShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.mobiles)) {
    request.mobilesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.mobiles, 'Mobiles', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteEnterpriseDingtalkGroupCustomerMember', '2021-07-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteEnterpriseDingtalkGroupCustomerMember(request: DeleteEnterpriseDingtalkGroupCustomerMemberRequest): DeleteEnterpriseDingtalkGroupCustomerMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEnterpriseDingtalkGroupCustomerMemberWithOptions(request, runtime);
}

model GetEnterpriseDingtalkGroupCustomerMemberRequest {
  openGroupId?: string(name='OpenGroupId'),
  mobile?: string(name='Mobile'),
}

model GetEnterpriseDingtalkGroupCustomerMemberResponseBody = {
  requestId?: string(name='RequestId', description='接口请求的唯一ID, 每次调用requestID唯一'),
  success?: boolean(name='Success', description='调用接口返回是否成功, true代表调用正常'),
  message?: string(name='Message', description='错误信息, 当success=false的时候, 可以取到message'),
  code?: string(name='Code', description='接口请求结果返回码'),
  data?: EnterpriseDingtalkGroupMember(name='Data', description='成员信息列表'),
}

model GetEnterpriseDingtalkGroupCustomerMemberResponse = {
  headers: map[string]string(name='headers'),
  body: GetEnterpriseDingtalkGroupCustomerMemberResponseBody(name='body'),
}

async function getEnterpriseDingtalkGroupCustomerMemberWithOptions(request: GetEnterpriseDingtalkGroupCustomerMemberRequest, runtime: Util.RuntimeOptions): GetEnterpriseDingtalkGroupCustomerMemberResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetEnterpriseDingtalkGroupCustomerMember', '2021-07-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getEnterpriseDingtalkGroupCustomerMember(request: GetEnterpriseDingtalkGroupCustomerMemberRequest): GetEnterpriseDingtalkGroupCustomerMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEnterpriseDingtalkGroupCustomerMemberWithOptions(request, runtime);
}

model GetEnterpriseDingtalkGroupRequest {
  openGroupId?: string(name='OpenGroupId'),
}

model GetEnterpriseDingtalkGroupResponseBody = {
  requestId?: string(name='RequestId', description='接口请求的唯一ID, 每次调用requestID唯一'),
  success?: boolean(name='Success', description='调用接口返回是否成功, true代表调用正常'),
  message?: string(name='Message', description='错误信息, 当success=false的时候, 可以取到message'),
  data?: {
    openGroupId?: string(name='OpenGroupId', description='企业服务群的ID'),
    groupName?: string(name='GroupName', description='企业服务群的群名'),
  }(name='Data'),
  code?: string(name='Code', description='接口请求结果返回码'),
}

model GetEnterpriseDingtalkGroupResponse = {
  headers: map[string]string(name='headers'),
  body: GetEnterpriseDingtalkGroupResponseBody(name='body'),
}

async function getEnterpriseDingtalkGroupWithOptions(request: GetEnterpriseDingtalkGroupRequest, runtime: Util.RuntimeOptions): GetEnterpriseDingtalkGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetEnterpriseDingtalkGroup', '2021-07-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getEnterpriseDingtalkGroup(request: GetEnterpriseDingtalkGroupRequest): GetEnterpriseDingtalkGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEnterpriseDingtalkGroupWithOptions(request, runtime);
}

