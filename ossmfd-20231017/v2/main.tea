/**
 *
 */
import OpenApi;
import OpenApi.OpenApiUtil;

extends OpenApi;


init(config: OpenApiUtil.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('ossmfd', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!$isNull(endpoint)) {
    return endpoint;
  }
  
  if (!$isNull(endpointMap) && !$isNull(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return OpenApiUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CheckMfdServiceOpenResponseBody = {
  data?: boolean(name='Data', example='true'),
  requestId?: string(name='RequestId', example='AAC546A5-5EDC-5939-86A3-56DFAF******'),
}

model CheckMfdServiceOpenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckMfdServiceOpenResponseBody(name='body'),
}

/**
 * @summary 检查服务是否开通
 *
 * @param request CheckMfdServiceOpenRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CheckMfdServiceOpenResponse
 */
async function checkMfdServiceOpenWithOptions(runtime: $RuntimeOptions): CheckMfdServiceOpenResponse {
  var req = new OpenApiUtil.OpenApiRequest{};
  var params = new OpenApiUtil.Params{
    action = 'CheckMfdServiceOpen',
    version = '2023-10-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 检查服务是否开通
 *
 * @return CheckMfdServiceOpenResponse
 */
async function checkMfdServiceOpen(): CheckMfdServiceOpenResponse {
  var runtime = new $RuntimeOptions{};
  return checkMfdServiceOpenWithOptions(runtime);
}

model CreateOssBucketScanTaskRequest {
  allKeyPrefix?: string(name='AllKeyPrefix', example='true'),
  bucketNameList?: [ string ](name='BucketNameList', description='This parameter is required.'),
  decompressMaxFileCount?: int32(name='DecompressMaxFileCount', example='100'),
  decompressMaxLayer?: int32(name='DecompressMaxLayer', example='1'),
  decryptionList?: [ string ](name='DecryptionList'),
  excludeKeySuffixList?: [ string ](name='ExcludeKeySuffixList'),
  keyPrefixList?: [ string ](name='KeyPrefixList'),
  keySuffixList?: [ string ](name='KeySuffixList'),
  lastModifiedStartTime?: long(name='LastModifiedStartTime', example='1724301769834'),
  scanMode?: int32(name='ScanMode', description='This parameter is required.', example='1'),
}

model CreateOssBucketScanTaskResponseBody = {
  requestId?: string(name='RequestId', example='E99D386F-5546-5BCD-BADD-F4EF4B******'),
}

model CreateOssBucketScanTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOssBucketScanTaskResponseBody(name='body'),
}

/**
 * @summary 创建bucket扫描任务
 *
 * @param request CreateOssBucketScanTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateOssBucketScanTaskResponse
 */
@context("createOssBucketScanTaskWithContext")
async function createOssBucketScanTaskWithOptions(request: CreateOssBucketScanTaskRequest, runtime: $RuntimeOptions): CreateOssBucketScanTaskResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.allKeyPrefix)) {
    query['AllKeyPrefix'] = request.allKeyPrefix;
  }
  if (!$isNull(request.bucketNameList)) {
    query['BucketNameList'] = request.bucketNameList;
  }
  if (!$isNull(request.decompressMaxFileCount)) {
    query['DecompressMaxFileCount'] = request.decompressMaxFileCount;
  }
  if (!$isNull(request.decompressMaxLayer)) {
    query['DecompressMaxLayer'] = request.decompressMaxLayer;
  }
  if (!$isNull(request.decryptionList)) {
    query['DecryptionList'] = request.decryptionList;
  }
  if (!$isNull(request.excludeKeySuffixList)) {
    query['ExcludeKeySuffixList'] = request.excludeKeySuffixList;
  }
  if (!$isNull(request.keyPrefixList)) {
    query['KeyPrefixList'] = request.keyPrefixList;
  }
  if (!$isNull(request.keySuffixList)) {
    query['KeySuffixList'] = request.keySuffixList;
  }
  if (!$isNull(request.lastModifiedStartTime)) {
    query['LastModifiedStartTime'] = request.lastModifiedStartTime;
  }
  if (!$isNull(request.scanMode)) {
    query['ScanMode'] = request.scanMode;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateOssBucketScanTask',
    version = '2023-10-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建bucket扫描任务
 *
 * @param request CreateOssBucketScanTaskRequest
 * @return CreateOssBucketScanTaskResponse
 */
async function createOssBucketScanTask(request: CreateOssBucketScanTaskRequest): CreateOssBucketScanTaskResponse {
  var runtime = new $RuntimeOptions{};
  return createOssBucketScanTaskWithOptions(request, runtime);
}

model CreateOssScanConfigRequest {
  allKeyPrefix?: string(name='AllKeyPrefix', example='true'),
  bucketName?: string(name='BucketName', description='This parameter is required.', example='testBucketName****'),
  decompressMaxFileCount?: int32(name='DecompressMaxFileCount', example='100'),
  decompressMaxLayer?: int32(name='DecompressMaxLayer', example='1'),
  decryptionList?: [ string ](name='DecryptionList'),
  enable?: int32(name='Enable', description='This parameter is required.', example='1'),
  endTime?: string(name='EndTime', example='00:10:00'),
  keyPrefixList?: [ string ](name='KeyPrefixList'),
  keySuffixList?: [ string ](name='KeySuffixList'),
  lastModifiedStartTime?: long(name='LastModifiedStartTime', example='1724301769834'),
  name?: string(name='Name', example='testName******'),
  realTimeIncr?: boolean(name='RealTimeIncr'),
  scanDayList?: [ int32 ](name='ScanDayList'),
  startTime?: string(name='StartTime', example='00:00:00'),
}

model CreateOssScanConfigResponseBody = {
  id?: long(name='Id', example='1'),
  requestId?: string(name='RequestId', example='5DFD6277-CC36-57F7-ACE6-F5952123****'),
}

model CreateOssScanConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOssScanConfigResponseBody(name='body'),
}

/**
 * @summary 创建Bucket检测策略配置
 *
 * @param request CreateOssScanConfigRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateOssScanConfigResponse
 */
@context("createOssScanConfigWithContext")
async function createOssScanConfigWithOptions(request: CreateOssScanConfigRequest, runtime: $RuntimeOptions): CreateOssScanConfigResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.allKeyPrefix)) {
    query['AllKeyPrefix'] = request.allKeyPrefix;
  }
  if (!$isNull(request.bucketName)) {
    query['BucketName'] = request.bucketName;
  }
  if (!$isNull(request.decompressMaxFileCount)) {
    query['DecompressMaxFileCount'] = request.decompressMaxFileCount;
  }
  if (!$isNull(request.decompressMaxLayer)) {
    query['DecompressMaxLayer'] = request.decompressMaxLayer;
  }
  if (!$isNull(request.decryptionList)) {
    query['DecryptionList'] = request.decryptionList;
  }
  if (!$isNull(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!$isNull(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!$isNull(request.keyPrefixList)) {
    query['KeyPrefixList'] = request.keyPrefixList;
  }
  if (!$isNull(request.keySuffixList)) {
    query['KeySuffixList'] = request.keySuffixList;
  }
  if (!$isNull(request.lastModifiedStartTime)) {
    query['LastModifiedStartTime'] = request.lastModifiedStartTime;
  }
  if (!$isNull(request.name)) {
    query['Name'] = request.name;
  }
  if (!$isNull(request.realTimeIncr)) {
    query['RealTimeIncr'] = request.realTimeIncr;
  }
  if (!$isNull(request.scanDayList)) {
    query['ScanDayList'] = request.scanDayList;
  }
  if (!$isNull(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateOssScanConfig',
    version = '2023-10-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建Bucket检测策略配置
 *
 * @param request CreateOssScanConfigRequest
 * @return CreateOssScanConfigResponse
 */
async function createOssScanConfig(request: CreateOssScanConfigRequest): CreateOssScanConfigResponse {
  var runtime = new $RuntimeOptions{};
  return createOssScanConfigWithOptions(request, runtime);
}

model DescribeExportInfoRequest {
  exportId?: long(name='ExportId', description='This parameter is required.', example='121****'),
}

model DescribeExportInfoResponseBody = {
  currentCount?: int32(name='CurrentCount', example='13'),
  exportStatus?: string(name='ExportStatus', example='success'),
  fileName?: string(name='FileName', example='health_check_export_20******'),
  id?: long(name='Id', example='991012'),
  link?: string(name='Link', example='http://www.aliyun.com******'),
  message?: string(name='Message', example='success'),
  progress?: int32(name='Progress', example='61'),
  requestId?: string(name='RequestId', example='AAC546A5-5EDC-5939-86A3-56DFAF******'),
  totalCount?: int32(name='TotalCount', example='28'),
}

model DescribeExportInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeExportInfoResponseBody(name='body'),
}

/**
 * @summary 查询导出信息
 *
 * @param request DescribeExportInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeExportInfoResponse
 */
@context("describeExportInfoWithContext")
async function describeExportInfoWithOptions(request: DescribeExportInfoRequest, runtime: $RuntimeOptions): DescribeExportInfoResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.exportId)) {
    query['ExportId'] = request.exportId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeExportInfo',
    version = '2023-10-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询导出信息
 *
 * @param request DescribeExportInfoRequest
 * @return DescribeExportInfoResponse
 */
async function describeExportInfo(request: DescribeExportInfoRequest): DescribeExportInfoResponse {
  var runtime = new $RuntimeOptions{};
  return describeExportInfoWithOptions(request, runtime);
}

model DescribeServiceLinkedRoleStatusRequest {
  serviceLinkedRole?: string(name='ServiceLinkedRole', example='AliyunServiceRoleForOssMfd'),
}

model DescribeServiceLinkedRoleStatusResponseBody = {
  requestId?: string(name='RequestId', example='E99D386F-5546-5BCD-BADD-F4EF4B******'),
  roleStatus?: {
    status?: boolean(name='Status', example='true'),
  }(name='RoleStatus'),
}

model DescribeServiceLinkedRoleStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeServiceLinkedRoleStatusResponseBody(name='body'),
}

/**
 * @summary 查询您是否已创建云安全中心服务关联角色
 *
 * @param request DescribeServiceLinkedRoleStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeServiceLinkedRoleStatusResponse
 */
@context("describeServiceLinkedRoleStatusWithContext")
async function describeServiceLinkedRoleStatusWithOptions(request: DescribeServiceLinkedRoleStatusRequest, runtime: $RuntimeOptions): DescribeServiceLinkedRoleStatusResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.serviceLinkedRole)) {
    query['ServiceLinkedRole'] = request.serviceLinkedRole;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeServiceLinkedRoleStatus',
    version = '2023-10-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询您是否已创建云安全中心服务关联角色
 *
 * @param request DescribeServiceLinkedRoleStatusRequest
 * @return DescribeServiceLinkedRoleStatusResponse
 */
async function describeServiceLinkedRoleStatus(request: DescribeServiceLinkedRoleStatusRequest): DescribeServiceLinkedRoleStatusResponse {
  var runtime = new $RuntimeOptions{};
  return describeServiceLinkedRoleStatusWithOptions(request, runtime);
}

model ExportRecordRequest {
  exportType?: string(name='ExportType', description='This parameter is required.', example='exportObjectScanEvents'),
  lang?: string(name='Lang', example='zh'),
  params?: string(name='Params', example='{"currentPage":1,"pageSize":10}'),
}

model ExportRecordResponseBody = {
  fileName?: string(name='FileName', example='health_check_export_20******'),
  id?: long(name='Id', example='100******'),
  requestId?: string(name='RequestId', example='AAC546A5-5EDC-5939-86A3-56DFAF******'),
}

model ExportRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportRecordResponseBody(name='body'),
}

/**
 * @summary 导出恶意文件列表
 *
 * @param request ExportRecordRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ExportRecordResponse
 */
@context("exportRecordWithContext")
async function exportRecordWithOptions(request: ExportRecordRequest, runtime: $RuntimeOptions): ExportRecordResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.exportType)) {
    query['ExportType'] = request.exportType;
  }
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.params)) {
    query['Params'] = request.params;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ExportRecord',
    version = '2023-10-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 导出恶意文件列表
 *
 * @param request ExportRecordRequest
 * @return ExportRecordResponse
 */
async function exportRecord(request: ExportRecordRequest): ExportRecordResponse {
  var runtime = new $RuntimeOptions{};
  return exportRecordWithOptions(request, runtime);
}

model GetFileDetectReportRequest {
  eventId?: long(name='EventId', example='100******'),
  field?: string(name='Field', example='Basic,ThreatTypes,Intelligences,Sandbox'),
  fileHash?: string(name='FileHash', example='7ab4ee98d535623991bc178718******'),
  lang?: string(name='Lang', example='en'),
  sourceType?: string(name='SourceType', example='object_scan'),
}

model GetFileDetectReportResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    basic?: string(name='Basic', example='{
        "sha256": "",
        "sha512": "",
        "source": "aegis",
        "gmt_first_submit": "",
        "sha1": "",
        "virus_result": "",
        "webshell_result": "",
        "gmt_update": "",
        "sandbox_result": "2",
        "fileSize": "363752",
        "virus_name": "",
    }'),
    fileHash?: string(name='FileHash', example='4206dbcf1c2bc80ea95ad64043******'),
    filename?: string(name='Filename', example='testFile******'),
    hasData?: boolean(name='HasData', example='true'),
    intelligences?: string(name='Intelligences'),
    sandbox?: string(name='Sandbox', example='{\\\\"BehaviorData\\\\": {}, \\\\"ProcessData\\\\": {}, \\\\"SandboxData\\\\": {}, \\\\"AttackData\\\\": [], \\\\"NetworkData\\\\": {}, \\\\"SolutionData\\\\": {}, \\\\"FileData\\\\": {}}'),
    showTab?: boolean(name='ShowTab', example='true'),
    threatLevel?: long(name='ThreatLevel', example='2'),
    threatTypes?: string(name='ThreatTypes'),
  }(name='Data'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='AAC546A5-5EDC-5939-86A3-56DFAF******'),
  success?: boolean(name='Success', example='true'),
}

model GetFileDetectReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFileDetectReportResponseBody(name='body'),
}

/**
 * @summary 获取沙箱检测报告。
 *
 * @param request GetFileDetectReportRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetFileDetectReportResponse
 */
@context("getFileDetectReportWithContext")
async function getFileDetectReportWithOptions(request: GetFileDetectReportRequest, runtime: $RuntimeOptions): GetFileDetectReportResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.eventId)) {
    query['EventId'] = request.eventId;
  }
  if (!$isNull(request.field)) {
    query['Field'] = request.field;
  }
  if (!$isNull(request.fileHash)) {
    query['FileHash'] = request.fileHash;
  }
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetFileDetectReport',
    version = '2023-10-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取沙箱检测报告。
 *
 * @param request GetFileDetectReportRequest
 * @return GetFileDetectReportResponse
 */
async function getFileDetectReport(request: GetFileDetectReportRequest): GetFileDetectReportResponse {
  var runtime = new $RuntimeOptions{};
  return getFileDetectReportWithOptions(request, runtime);
}

model GetOssBucketScanStatisticRequest {
  bucketNameList?: [ string ](name='BucketNameList'),
}

model GetOssBucketScanStatisticResponseBody = {
  data?: {
    expireTime?: long(name='ExpireTime', example='1605905716750024'),
    highRisk?: long(name='HighRisk', example='1'),
    lowRisk?: long(name='LowRisk', example='1'),
    mediumRisk?: long(name='MediumRisk', example='1'),
    noScanBucket?: int32(name='NoScanBucket', example='1'),
    remainAuth?: int32(name='RemainAuth', example='1'),
    riskBucket?: int32(name='RiskBucket', example='1'),
    scanObject?: long(name='ScanObject', example='10'),
    totalBucket?: int32(name='TotalBucket', example='10'),
    totalObject?: long(name='TotalObject', example='111'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='E14CECBF-8CAC-520C-ACC3-9503D5******'),
}

model GetOssBucketScanStatisticResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOssBucketScanStatisticResponseBody(name='body'),
}

/**
 * @summary 获取bucket检测统计信息
 *
 * @param request GetOssBucketScanStatisticRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetOssBucketScanStatisticResponse
 */
@context("getOssBucketScanStatisticWithContext")
async function getOssBucketScanStatisticWithOptions(request: GetOssBucketScanStatisticRequest, runtime: $RuntimeOptions): GetOssBucketScanStatisticResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bucketNameList)) {
    query['BucketNameList'] = request.bucketNameList;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetOssBucketScanStatistic',
    version = '2023-10-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取bucket检测统计信息
 *
 * @param request GetOssBucketScanStatisticRequest
 * @return GetOssBucketScanStatisticResponse
 */
async function getOssBucketScanStatistic(request: GetOssBucketScanStatisticRequest): GetOssBucketScanStatisticResponse {
  var runtime = new $RuntimeOptions{};
  return getOssBucketScanStatisticWithOptions(request, runtime);
}

model GetOssScanConfigRequest {
  bucketName?: string(name='BucketName', description='This parameter is required.', example='testBucketName****'),
}

model GetOssScanConfigResponseBody = {
  data?: {
    allKeyPrefix?: boolean(name='AllKeyPrefix', example='true'),
    bucketCount?: int32(name='BucketCount', example='10'),
    bucketName?: string(name='BucketName', example='testBucket******'),
    decompressMaxFileCount?: int32(name='DecompressMaxFileCount', example='1'),
    decompressMaxLayer?: int32(name='DecompressMaxLayer', example='1'),
    decryptionList?: [ string ](name='DecryptionList'),
    enable?: int32(name='Enable', example='0'),
    endTime?: string(name='EndTime', example='01:00:00'),
    id?: string(name='Id', example='13******'),
    keyPrefixList?: [ string ](name='KeyPrefixList'),
    keySuffixList?: [ string ](name='KeySuffixList'),
    lastModifiedStartTime?: long(name='LastModifiedStartTime', example='1702025633079'),
    lastUpdateTime?: long(name='LastUpdateTime', example='1702025633079'),
    name?: string(name='Name', example='testPolicy******'),
    realTimeIncr?: boolean(name='RealTimeIncr'),
    scanDayList?: [ int32 ](name='ScanDayList'),
    startTime?: string(name='StartTime', example='00:00:00'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='E14CECBF-8CAC-520C-ACC3-9503D5******'),
}

model GetOssScanConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOssScanConfigResponseBody(name='body'),
}

/**
 * @summary 获取Bucket检测配置
 *
 * @param request GetOssScanConfigRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetOssScanConfigResponse
 */
@context("getOssScanConfigWithContext")
async function getOssScanConfigWithOptions(request: GetOssScanConfigRequest, runtime: $RuntimeOptions): GetOssScanConfigResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bucketName)) {
    query['BucketName'] = request.bucketName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetOssScanConfig',
    version = '2023-10-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取Bucket检测配置
 *
 * @param request GetOssScanConfigRequest
 * @return GetOssScanConfigResponse
 */
async function getOssScanConfig(request: GetOssScanConfigRequest): GetOssScanConfigResponse {
  var runtime = new $RuntimeOptions{};
  return getOssScanConfigWithOptions(request, runtime);
}

model ListObjectScanEventRequest {
  bucketName?: string(name='BucketName', example='testBucket******'),
  currentPage?: int32(name='CurrentPage', description='This parameter is required.', example='1'),
  eventName?: string(name='EventName'),
  lang?: string(name='Lang', example='zh'),
  md5?: string(name='Md5', example='e991e62f484bb6accd676e57a9******'),
  ossKey?: string(name='OssKey', example='1/2022/06/23/15/41/16559701077444693a0c6-33b2-4cc2-a99f-9f38b8b8****'),
  pageSize?: int32(name='PageSize', description='This parameter is required.', example='10'),
  parentEventId?: long(name='ParentEventId', example='1'),
  riskLevel?: string(name='RiskLevel', example='high'),
  source?: string(name='Source', example='OSS'),
  timeEnd?: long(name='TimeEnd', example='1683862286000'),
  timeStart?: long(name='TimeStart', example='1683603086000'),
}

model ListObjectScanEventResponseBody = {
  data?: [ 
    {
      bucketName?: string(name='BucketName', example='testBucket******'),
      details?: [ 
        {
          name?: string(name='Name', example='DownloadUrl'),
          nameDisplay?: string(name='NameDisplay', example='DownloadUrl'),
          type?: string(name='Type', example='html'),
          value?: string(name='Value', example='http://gcx.cn-hangzhou.aliyuncs.com/****'),
          valueDisplay?: string(name='ValueDisplay', example='http://gcx.cn-hangzhou.aliyuncs.com/****'),
        }
      ](name='Details'),
      displaySandboxResult?: string(name='DisplaySandboxResult', example='true'),
      eventId?: long(name='EventId', example='1'),
      eventName?: string(name='EventName'),
      filePath?: string(name='FilePath', example='/usr/local****'),
      firstTime?: long(name='FirstTime', example='1694576692000'),
      hasSubEvent?: boolean(name='HasSubEvent', example='true'),
      lastTime?: long(name='LastTime', example='1694576692000'),
      md5?: string(name='Md5', example='e991e62f484bb6accd676e57a9******'),
      ossKey?: string(name='OssKey', example='1/2022/06/23/15/41/16559701077444693a0c6-33b2-4cc2-a99f-9f38b8b8****'),
      riskLevel?: string(name='RiskLevel', example='high'),
      sha1?: string(name='Sha1', example='3c01bdbb26f358bab27f267924aa2c9a03fc****'),
      sha256?: string(name='Sha256', example='3a6fed5fc11392b3ee9f81caf017b48640d7458766a8eb0382899a605b41****'),
      source?: string(name='Source', example='OSS'),
    }
  ](name='Data'),
  pageInfo?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='187'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='E99D386F-5546-5BCD-BADD-F4EF4B******'),
}

model ListObjectScanEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListObjectScanEventResponseBody(name='body'),
}

/**
 * @summary 获取文件检测告警列表
 *
 * @param request ListObjectScanEventRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListObjectScanEventResponse
 */
@context("listObjectScanEventWithContext")
async function listObjectScanEventWithOptions(request: ListObjectScanEventRequest, runtime: $RuntimeOptions): ListObjectScanEventResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bucketName)) {
    query['BucketName'] = request.bucketName;
  }
  if (!$isNull(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!$isNull(request.eventName)) {
    query['EventName'] = request.eventName;
  }
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.md5)) {
    query['Md5'] = request.md5;
  }
  if (!$isNull(request.ossKey)) {
    query['OssKey'] = request.ossKey;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.parentEventId)) {
    query['ParentEventId'] = request.parentEventId;
  }
  if (!$isNull(request.riskLevel)) {
    query['RiskLevel'] = request.riskLevel;
  }
  if (!$isNull(request.source)) {
    query['Source'] = request.source;
  }
  if (!$isNull(request.timeEnd)) {
    query['TimeEnd'] = request.timeEnd;
  }
  if (!$isNull(request.timeStart)) {
    query['TimeStart'] = request.timeStart;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListObjectScanEvent',
    version = '2023-10-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取文件检测告警列表
 *
 * @param request ListObjectScanEventRequest
 * @return ListObjectScanEventResponse
 */
async function listObjectScanEvent(request: ListObjectScanEventRequest): ListObjectScanEventResponse {
  var runtime = new $RuntimeOptions{};
  return listObjectScanEventWithOptions(request, runtime);
}

model ListOssBucketRequest {
  bucketName?: string(name='BucketName', example='testBucketName****'),
  lang?: string(name='Lang', example='zh'),
}

model ListOssBucketResponseBody = {
  data?: [ 
    {
      bucketName?: string(name='BucketName', example='testBucket******'),
      message?: string(name='Message', example='Unsupported Region。'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      storageClass?: string(name='StorageClass', example='IA'),
      support?: boolean(name='Support', example='true'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='E14CECBF-8CAC-520C-ACC3-9503D5******'),
}

model ListOssBucketResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListOssBucketResponseBody(name='body'),
}

/**
 * @summary 列举用户所有的bucket
 *
 * @param request ListOssBucketRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListOssBucketResponse
 */
@context("listOssBucketWithContext")
async function listOssBucketWithOptions(request: ListOssBucketRequest, runtime: $RuntimeOptions): ListOssBucketResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bucketName)) {
    query['BucketName'] = request.bucketName;
  }
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListOssBucket',
    version = '2023-10-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 列举用户所有的bucket
 *
 * @param request ListOssBucketRequest
 * @return ListOssBucketResponse
 */
async function listOssBucket(request: ListOssBucketRequest): ListOssBucketResponse {
  var runtime = new $RuntimeOptions{};
  return listOssBucketWithOptions(request, runtime);
}

model ListOssBucketScanInfoRequest {
  bucketName?: string(name='BucketName', example='testBucket******'),
  currentPage?: int32(name='CurrentPage', description='This parameter is required.', example='1'),
  fuzzBucketName?: string(name='FuzzBucketName', example='test******'),
  hasRisk?: int32(name='HasRisk', example='1'),
  lang?: string(name='Lang', example='zh'),
  pageSize?: int32(name='PageSize', description='This parameter is required.', example='10'),
  status?: int32(name='Status', example='1'),
}

model ListOssBucketScanInfoResponseBody = {
  data?: [ 
    {
      bucketName?: string(name='BucketName', example='testBucket******'),
      configStatus?: int32(name='ConfigStatus', example='1'),
      decompressStatus?: int32(name='DecompressStatus', example='1'),
      highRisk?: long(name='HighRisk', example='0'),
      lastScanEndTime?: long(name='LastScanEndTime', example='1698388233884'),
      lastScanTime?: long(name='LastScanTime', example='1698388233883'),
      lowRisk?: long(name='LowRisk', example='1'),
      mediumRisk?: long(name='MediumRisk', example='0'),
      message?: string(name='Message', example='Unsupported Region。'),
      regionId?: string(name='RegionId', example='cn-beijing'),
      scanObject?: long(name='ScanObject', example='1'),
      scanned?: boolean(name='Scanned', example='true'),
      status?: int32(name='Status', example='1'),
      storageClass?: string(name='StorageClass', example='IA'),
      support?: boolean(name='Support', example='true'),
      totalObject?: long(name='TotalObject', example='2'),
    }
  ](name='Data'),
  pageInfo?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='55'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='2220FE66-76EF-5D9D-A0EE-3221CC******'),
}

model ListOssBucketScanInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListOssBucketScanInfoResponseBody(name='body'),
}

/**
 * @summary 获取bucket详情
 *
 * @param request ListOssBucketScanInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListOssBucketScanInfoResponse
 */
@context("listOssBucketScanInfoWithContext")
async function listOssBucketScanInfoWithOptions(request: ListOssBucketScanInfoRequest, runtime: $RuntimeOptions): ListOssBucketScanInfoResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bucketName)) {
    query['BucketName'] = request.bucketName;
  }
  if (!$isNull(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!$isNull(request.fuzzBucketName)) {
    query['FuzzBucketName'] = request.fuzzBucketName;
  }
  if (!$isNull(request.hasRisk)) {
    query['HasRisk'] = request.hasRisk;
  }
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListOssBucketScanInfo',
    version = '2023-10-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取bucket详情
 *
 * @param request ListOssBucketScanInfoRequest
 * @return ListOssBucketScanInfoResponse
 */
async function listOssBucketScanInfo(request: ListOssBucketScanInfoRequest): ListOssBucketScanInfoResponse {
  var runtime = new $RuntimeOptions{};
  return listOssBucketScanInfoWithOptions(request, runtime);
}

model ListSupportObjectSuffixResponseBody = {
  data?: [ string ](name='Data'),
  requestId?: string(name='RequestId', example='2220FE66-76EF-5D9D-A0EE-3221CC******'),
}

model ListSupportObjectSuffixResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSupportObjectSuffixResponseBody(name='body'),
}

/**
 * @summary 获取支持的文件后缀
 *
 * @param request ListSupportObjectSuffixRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListSupportObjectSuffixResponse
 */
async function listSupportObjectSuffixWithOptions(runtime: $RuntimeOptions): ListSupportObjectSuffixResponse {
  var req = new OpenApiUtil.OpenApiRequest{};
  var params = new OpenApiUtil.Params{
    action = 'ListSupportObjectSuffix',
    version = '2023-10-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取支持的文件后缀
 *
 * @return ListSupportObjectSuffixResponse
 */
async function listSupportObjectSuffix(): ListSupportObjectSuffixResponse {
  var runtime = new $RuntimeOptions{};
  return listSupportObjectSuffixWithOptions(runtime);
}

model OperateBucketScanTaskRequest {
  bucketName?: string(name='BucketName', example='testBucket******'),
  operateCode?: int32(name='OperateCode', example='1'),
}

model OperateBucketScanTaskResponseBody = {
  requestId?: string(name='RequestId', example='E99D386F-5546-5BCD-BADD-F4EF4B******'),
}

model OperateBucketScanTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OperateBucketScanTaskResponseBody(name='body'),
}

/**
 * @summary 操作oss检测任务
 *
 * @param request OperateBucketScanTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return OperateBucketScanTaskResponse
 */
@context("operateBucketScanTaskWithContext")
async function operateBucketScanTaskWithOptions(request: OperateBucketScanTaskRequest, runtime: $RuntimeOptions): OperateBucketScanTaskResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bucketName)) {
    query['BucketName'] = request.bucketName;
  }
  if (!$isNull(request.operateCode)) {
    query['OperateCode'] = request.operateCode;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'OperateBucketScanTask',
    version = '2023-10-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 操作oss检测任务
 *
 * @param request OperateBucketScanTaskRequest
 * @return OperateBucketScanTaskResponse
 */
async function operateBucketScanTask(request: OperateBucketScanTaskRequest): OperateBucketScanTaskResponse {
  var runtime = new $RuntimeOptions{};
  return operateBucketScanTaskWithOptions(request, runtime);
}

model UpdateOssScanConfigRequest {
  allKeyPrefix?: string(name='AllKeyPrefix', example='true'),
  bucketName?: string(name='BucketName', example='testBucket******'),
  decompressMaxFileCount?: int32(name='DecompressMaxFileCount', example='1000'),
  decompressMaxLayer?: int32(name='DecompressMaxLayer', example='1'),
  decryptionList?: [ string ](name='DecryptionList'),
  enable?: int32(name='Enable', example='0'),
  endTime?: string(name='EndTime', example='00:10:00'),
  id?: string(name='Id', example='100******'),
  keyPrefixList?: [ string ](name='KeyPrefixList'),
  keySuffixList?: [ string ](name='KeySuffixList'),
  lastModifiedStartTime?: long(name='LastModifiedStartTime', example='1724301769834'),
  name?: string(name='Name', example='testPolicy******'),
  realTimeIncr?: boolean(name='RealTimeIncr'),
  scanDayList?: [ int32 ](name='ScanDayList'),
  startTime?: string(name='StartTime', example='00:00:00'),
}

model UpdateOssScanConfigResponseBody = {
  requestId?: string(name='RequestId', example='E99D386F-5546-5BCD-BADD-F4EF4B******'),
}

model UpdateOssScanConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateOssScanConfigResponseBody(name='body'),
}

/**
 * @summary 修改Bucket检测配置
 *
 * @param request UpdateOssScanConfigRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateOssScanConfigResponse
 */
@context("updateOssScanConfigWithContext")
async function updateOssScanConfigWithOptions(request: UpdateOssScanConfigRequest, runtime: $RuntimeOptions): UpdateOssScanConfigResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.allKeyPrefix)) {
    query['AllKeyPrefix'] = request.allKeyPrefix;
  }
  if (!$isNull(request.bucketName)) {
    query['BucketName'] = request.bucketName;
  }
  if (!$isNull(request.decompressMaxFileCount)) {
    query['DecompressMaxFileCount'] = request.decompressMaxFileCount;
  }
  if (!$isNull(request.decompressMaxLayer)) {
    query['DecompressMaxLayer'] = request.decompressMaxLayer;
  }
  if (!$isNull(request.decryptionList)) {
    query['DecryptionList'] = request.decryptionList;
  }
  if (!$isNull(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!$isNull(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!$isNull(request.id)) {
    query['Id'] = request.id;
  }
  if (!$isNull(request.keyPrefixList)) {
    query['KeyPrefixList'] = request.keyPrefixList;
  }
  if (!$isNull(request.keySuffixList)) {
    query['KeySuffixList'] = request.keySuffixList;
  }
  if (!$isNull(request.lastModifiedStartTime)) {
    query['LastModifiedStartTime'] = request.lastModifiedStartTime;
  }
  if (!$isNull(request.name)) {
    query['Name'] = request.name;
  }
  if (!$isNull(request.realTimeIncr)) {
    query['RealTimeIncr'] = request.realTimeIncr;
  }
  if (!$isNull(request.scanDayList)) {
    query['ScanDayList'] = request.scanDayList;
  }
  if (!$isNull(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateOssScanConfig',
    version = '2023-10-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改Bucket检测配置
 *
 * @param request UpdateOssScanConfigRequest
 * @return UpdateOssScanConfigResponse
 */
async function updateOssScanConfig(request: UpdateOssScanConfigRequest): UpdateOssScanConfigResponse {
  var runtime = new $RuntimeOptions{};
  return updateOssScanConfigWithOptions(request, runtime);
}

