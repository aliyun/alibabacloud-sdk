/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'OssMfd';
  @version = '2023-10-17';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CheckMfdServiceOpenRequest {
}

model CheckMfdServiceOpenResponseBody = {
  data?: boolean(name='Data', example='true'),
  requestId?: string(name='RequestId', example='AAC546A5-5EDC-5939-86A3-56DFAF******'),
}

model CheckMfdServiceOpenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckMfdServiceOpenResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckMfdServiceOpen  CheckMfdServiceOpenRequest
  * @return CheckMfdServiceOpenResponse
 */
async function checkMfdServiceOpen(request: CheckMfdServiceOpenRequest): CheckMfdServiceOpenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckMfdServiceOpen', 'POST', '/', 'json', false, 'json', request);
}

model CreateOssBucketScanTaskRequest {
  allKeyPrefix?: string(name='AllKeyPrefix', example='true', position='Query'),
  bucketNameList: [ string ](name='BucketNameList', description='This parameter is required.', position='Query'),
  decompressMaxFileCount?: int32(name='DecompressMaxFileCount', example='100', position='Query'),
  decompressMaxLayer?: int32(name='DecompressMaxLayer', example='1', position='Query'),
  decryptionList?: [ string ](name='DecryptionList', position='Query'),
  excludeKeySuffixList?: [ string ](name='ExcludeKeySuffixList', position='Query'),
  keyPrefixList?: [ string ](name='KeyPrefixList', position='Query'),
  keySuffixList?: [ string ](name='KeySuffixList', position='Query'),
  lastModifiedStartTime?: long(name='LastModifiedStartTime', example='1724301769834', position='Query'),
  scanMode: int32(name='ScanMode', description='This parameter is required.', example='1', position='Query'),
}

model CreateOssBucketScanTaskResponseBody = {
  requestId?: string(name='RequestId', example='E99D386F-5546-5BCD-BADD-F4EF4B******'),
}

model CreateOssBucketScanTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOssBucketScanTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateOssBucketScanTask  CreateOssBucketScanTaskRequest
  * @return CreateOssBucketScanTaskResponse
 */
async function createOssBucketScanTask(request: CreateOssBucketScanTaskRequest): CreateOssBucketScanTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOssBucketScanTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateOssScanConfigRequest {
  allKeyPrefix?: string(name='AllKeyPrefix', example='true', position='Query'),
  bucketName: string(name='BucketName', description='This parameter is required.', example='testBucketName****', position='Query'),
  decompressMaxFileCount?: int32(name='DecompressMaxFileCount', example='100', position='Query'),
  decompressMaxLayer?: int32(name='DecompressMaxLayer', example='1', position='Query'),
  decryptionList?: [ string ](name='DecryptionList', position='Query'),
  enable: int32(name='Enable', description='This parameter is required.', example='1', position='Query'),
  endTime?: string(name='EndTime', example='00:10:00', position='Query'),
  keyPrefixList?: [ string ](name='KeyPrefixList', position='Query'),
  keySuffixList?: [ string ](name='KeySuffixList', position='Query'),
  lastModifiedStartTime?: long(name='LastModifiedStartTime', example='1724301769834', position='Query'),
  name?: string(name='Name', example='testName******', position='Query'),
  realTimeIncr?: boolean(name='RealTimeIncr', position='Query'),
  scanDayList?: [ int32 ](name='ScanDayList', position='Query'),
  startTime?: string(name='StartTime', example='00:00:00', position='Query'),
}

model CreateOssScanConfigResponseBody = {
  id?: long(name='Id', example='1'),
  requestId?: string(name='RequestId', example='5DFD6277-CC36-57F7-ACE6-F5952123****'),
}

model CreateOssScanConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOssScanConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateOssScanConfig  CreateOssScanConfigRequest
  * @return CreateOssScanConfigResponse
 */
async function createOssScanConfig(request: CreateOssScanConfigRequest): CreateOssScanConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOssScanConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeExportInfoRequest {
  exportId: long(name='ExportId', description='This parameter is required.', example='121****', position='Query'),
}

model DescribeExportInfoResponseBody = {
  currentCount?: int32(name='CurrentCount', example='13'),
  exportStatus?: string(name='ExportStatus', example='success'),
  fileName?: string(name='FileName', example='health_check_export_20******'),
  id?: long(name='Id', example='991012'),
  link?: string(name='Link', example='http://www.aliyun.com******'),
  message?: string(name='Message', example='success'),
  progress?: int32(name='Progress', example='61'),
  requestId?: string(name='RequestId', example='AAC546A5-5EDC-5939-86A3-56DFAF******'),
  totalCount?: int32(name='TotalCount', example='28'),
}

model DescribeExportInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeExportInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeExportInfo  DescribeExportInfoRequest
  * @return DescribeExportInfoResponse
 */
async function describeExportInfo(request: DescribeExportInfoRequest): DescribeExportInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeExportInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeServiceLinkedRoleStatusRequest {
  serviceLinkedRole?: string(name='ServiceLinkedRole', example='AliyunServiceRoleForOssMfd', position='Query'),
}

model DescribeServiceLinkedRoleStatusResponseBody = {
  requestId?: string(name='RequestId', example='E99D386F-5546-5BCD-BADD-F4EF4B******'),
  roleStatus?: {
    status?: boolean(name='Status', example='true'),
  }(name='RoleStatus'),
}

model DescribeServiceLinkedRoleStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeServiceLinkedRoleStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeServiceLinkedRoleStatus  DescribeServiceLinkedRoleStatusRequest
  * @return DescribeServiceLinkedRoleStatusResponse
 */
async function describeServiceLinkedRoleStatus(request: DescribeServiceLinkedRoleStatusRequest): DescribeServiceLinkedRoleStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeServiceLinkedRoleStatus', 'POST', '/', 'json', false, 'json', request);
}

model ExportRecordRequest {
  exportType: string(name='ExportType', description='This parameter is required.', example='exportObjectScanEvents', position='Query'),
  lang?: string(name='Lang', example='zh', position='Query'),
  params?: string(name='Params', example='{"currentPage":1,"pageSize":10}', position='Query'),
}

model ExportRecordResponseBody = {
  fileName?: string(name='FileName', example='health_check_export_20******'),
  id?: long(name='Id', example='100******'),
  requestId?: string(name='RequestId', example='AAC546A5-5EDC-5939-86A3-56DFAF******'),
}

model ExportRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportRecordResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ExportRecord  ExportRecordRequest
  * @return ExportRecordResponse
 */
async function exportRecord(request: ExportRecordRequest): ExportRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportRecord', 'POST', '/', 'json', false, 'json', request);
}

model GetFileDetectReportRequest {
  eventId?: long(name='EventId', example='100******', position='Query'),
  field?: string(name='Field', example='Basic,ThreatTypes,Intelligences,Sandbox', position='Query'),
  fileHash?: string(name='FileHash', example='7ab4ee98d535623991bc178718******', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  sourceType?: string(name='SourceType', example='object_scan', position='Query'),
}

model GetFileDetectReportResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    basic?: string(name='Basic', example='{
        "sha256": "",
        "sha512": "",
        "source": "aegis",
        "gmt_first_submit": "",
        "sha1": "",
        "virus_result": "",
        "webshell_result": "",
        "gmt_update": "",
        "sandbox_result": "2",
        "fileSize": "363752",
        "virus_name": "",
    }'),
    fileHash?: string(name='FileHash', example='4206dbcf1c2bc80ea95ad64043******'),
    filename?: string(name='Filename', example='testFile******'),
    hasData?: boolean(name='HasData', example='true'),
    intelligences?: string(name='Intelligences'),
    sandbox?: string(name='Sandbox', example='{\\"BehaviorData\\": {}, \\"ProcessData\\": {}, \\"SandboxData\\": {}, \\"AttackData\\": [], \\"NetworkData\\": {}, \\"SolutionData\\": {}, \\"FileData\\": {}}'),
    showTab?: boolean(name='ShowTab', example='true'),
    threatLevel?: long(name='ThreatLevel', example='2'),
    threatTypes?: string(name='ThreatTypes'),
  }(name='Data'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='AAC546A5-5EDC-5939-86A3-56DFAF******'),
  success?: boolean(name='Success', example='true'),
}

model GetFileDetectReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFileDetectReportResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetFileDetectReport  GetFileDetectReportRequest
  * @return GetFileDetectReportResponse
 */
async function getFileDetectReport(request: GetFileDetectReportRequest): GetFileDetectReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFileDetectReport', 'POST', '/', 'json', false, 'json', request);
}

model GetOssBucketScanStatisticRequest {
  bucketNameList?: [ string ](name='BucketNameList', position='Query'),
}

model GetOssBucketScanStatisticResponseBody = {
  data?: {
    expireTime?: long(name='ExpireTime', example='1605905716750024'),
    highRisk?: long(name='HighRisk', example='1'),
    lowRisk?: long(name='LowRisk', example='1'),
    mediumRisk?: long(name='MediumRisk', example='1'),
    noScanBucket?: int32(name='NoScanBucket', example='1'),
    remainAuth?: int32(name='RemainAuth', example='1'),
    riskBucket?: int32(name='RiskBucket', example='1'),
    scanObject?: long(name='ScanObject', example='10'),
    totalBucket?: int32(name='TotalBucket', example='10'),
    totalObject?: long(name='TotalObject', example='111'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='E14CECBF-8CAC-520C-ACC3-9503D5******'),
}

model GetOssBucketScanStatisticResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOssBucketScanStatisticResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetOssBucketScanStatistic  GetOssBucketScanStatisticRequest
  * @return GetOssBucketScanStatisticResponse
 */
async function getOssBucketScanStatistic(request: GetOssBucketScanStatisticRequest): GetOssBucketScanStatisticResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOssBucketScanStatistic', 'POST', '/', 'json', false, 'json', request);
}

model GetOssScanConfigRequest {
  bucketName: string(name='BucketName', description='This parameter is required.', example='testBucketName****', position='Query'),
}

model GetOssScanConfigResponseBody = {
  data?: {
    allKeyPrefix?: boolean(name='AllKeyPrefix', example='true'),
    bucketCount?: int32(name='BucketCount', example='10'),
    bucketName?: string(name='BucketName', example='testBucket******'),
    decompressMaxFileCount?: int32(name='DecompressMaxFileCount', example='1'),
    decompressMaxLayer?: int32(name='DecompressMaxLayer', example='1'),
    decryptionList?: [ string ](name='DecryptionList'),
    enable?: int32(name='Enable', example='0'),
    endTime?: string(name='EndTime', example='01:00:00'),
    id?: string(name='Id', example='13******'),
    keyPrefixList?: [ string ](name='KeyPrefixList'),
    keySuffixList?: [ string ](name='KeySuffixList'),
    lastModifiedStartTime?: long(name='LastModifiedStartTime', example='1702025633079'),
    lastUpdateTime?: long(name='LastUpdateTime', example='1702025633079'),
    name?: string(name='Name', example='testPolicy******'),
    realTimeIncr?: boolean(name='RealTimeIncr'),
    scanDayList?: [ int32 ](name='ScanDayList'),
    startTime?: string(name='StartTime', example='00:00:00'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='E14CECBF-8CAC-520C-ACC3-9503D5******'),
}

model GetOssScanConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOssScanConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetOssScanConfig  GetOssScanConfigRequest
  * @return GetOssScanConfigResponse
 */
async function getOssScanConfig(request: GetOssScanConfigRequest): GetOssScanConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOssScanConfig', 'POST', '/', 'json', false, 'json', request);
}

model ListObjectScanEventRequest {
  bucketName?: string(name='BucketName', example='testBucket******', position='Query'),
  currentPage: int32(name='CurrentPage', description='This parameter is required.', example='1', position='Query'),
  eventName?: string(name='EventName', position='Query'),
  lang?: string(name='Lang', example='zh', position='Query'),
  md5?: string(name='Md5', example='e991e62f484bb6accd676e57a9******', position='Query'),
  ossKey?: string(name='OssKey', example='1/2022/06/23/15/41/16559701077444693a0c6-33b2-4cc2-a99f-9f38b8b8****', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='10', position='Query'),
  parentEventId?: long(name='ParentEventId', example='1', position='Query'),
  riskLevel?: string(name='RiskLevel', example='high', position='Query'),
  source?: string(name='Source', example='OSS', position='Query'),
  timeEnd?: long(name='TimeEnd', example='1683862286000', position='Query'),
  timeStart?: long(name='TimeStart', example='1683603086000', position='Query'),
}

model ListObjectScanEventResponseBody = {
  data?: [ 
    {
      bucketName?: string(name='BucketName', example='testBucket******'),
      details?: [ 
        {
          name?: string(name='Name', example='DownloadUrl'),
          nameDisplay?: string(name='NameDisplay', example='DownloadUrl'),
          type?: string(name='Type', example='html'),
          value?: string(name='Value', example='http://gcx.cn-hangzhou.aliyuncs.com/****'),
          valueDisplay?: string(name='ValueDisplay', example='http://gcx.cn-hangzhou.aliyuncs.com/****'),
        }
      ](name='Details'),
      displaySandboxResult?: string(name='DisplaySandboxResult', example='true'),
      eventId?: long(name='EventId', example='1'),
      eventName?: string(name='EventName'),
      filePath?: string(name='FilePath', example='/usr/local****'),
      firstTime?: long(name='FirstTime', example='1694576692000'),
      hasSubEvent?: boolean(name='HasSubEvent', example='true'),
      lastTime?: long(name='LastTime', example='1694576692000'),
      md5?: string(name='Md5', example='e991e62f484bb6accd676e57a9******'),
      ossKey?: string(name='OssKey', example='1/2022/06/23/15/41/16559701077444693a0c6-33b2-4cc2-a99f-9f38b8b8****'),
      riskLevel?: string(name='RiskLevel', example='high'),
      sha1?: string(name='Sha1', example='3c01bdbb26f358bab27f267924aa2c9a03fc****'),
      sha256?: string(name='Sha256', example='3a6fed5fc11392b3ee9f81caf017b48640d7458766a8eb0382899a605b41****'),
      source?: string(name='Source', example='OSS'),
    }
  ](name='Data'),
  pageInfo?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='187'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='E99D386F-5546-5BCD-BADD-F4EF4B******'),
}

model ListObjectScanEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListObjectScanEventResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListObjectScanEvent  ListObjectScanEventRequest
  * @return ListObjectScanEventResponse
 */
async function listObjectScanEvent(request: ListObjectScanEventRequest): ListObjectScanEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListObjectScanEvent', 'POST', '/', 'json', false, 'json', request);
}

model ListOssBucketRequest {
  bucketName?: string(name='BucketName', example='testBucketName****', position='Query'),
  lang?: string(name='Lang', example='zh', position='Query'),
}

model ListOssBucketResponseBody = {
  data?: [ 
    {
      bucketName?: string(name='BucketName', example='testBucket******'),
      message?: string(name='Message', example='Unsupported Region。'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      storageClass?: string(name='StorageClass', example='IA'),
      support?: boolean(name='Support', example='true'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='E14CECBF-8CAC-520C-ACC3-9503D5******'),
}

model ListOssBucketResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListOssBucketResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListOssBucket  ListOssBucketRequest
  * @return ListOssBucketResponse
 */
async function listOssBucket(request: ListOssBucketRequest): ListOssBucketResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOssBucket', 'POST', '/', 'json', false, 'json', request);
}

model ListOssBucketScanInfoRequest {
  bucketName?: string(name='BucketName', example='testBucket******', position='Query'),
  currentPage: int32(name='CurrentPage', description='This parameter is required.', example='1', position='Query'),
  fuzzBucketName?: string(name='FuzzBucketName', example='test******', position='Query'),
  hasRisk?: int32(name='HasRisk', example='1', position='Query'),
  lang?: string(name='Lang', example='zh', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='10', position='Query'),
  status?: int32(name='Status', example='1', position='Query'),
}

model ListOssBucketScanInfoResponseBody = {
  data?: [ 
    {
      bucketName?: string(name='BucketName', example='testBucket******'),
      configStatus?: int32(name='ConfigStatus', example='1'),
      decompressStatus?: int32(name='DecompressStatus', example='1'),
      highRisk?: long(name='HighRisk', example='0'),
      lastScanEndTime?: long(name='LastScanEndTime', example='1698388233884'),
      lastScanTime?: long(name='LastScanTime', example='1698388233883'),
      lowRisk?: long(name='LowRisk', example='1'),
      mediumRisk?: long(name='MediumRisk', example='0'),
      message?: string(name='Message', example='Unsupported Region。'),
      regionId?: string(name='RegionId', example='cn-beijing'),
      scanObject?: long(name='ScanObject', example='1'),
      scanned?: boolean(name='Scanned', example='true'),
      status?: int32(name='Status', example='1'),
      storageClass?: string(name='StorageClass', example='IA'),
      support?: boolean(name='Support', example='true'),
      totalObject?: long(name='TotalObject', example='2'),
    }
  ](name='Data'),
  pageInfo?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='55'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='2220FE66-76EF-5D9D-A0EE-3221CC******'),
}

model ListOssBucketScanInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListOssBucketScanInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListOssBucketScanInfo  ListOssBucketScanInfoRequest
  * @return ListOssBucketScanInfoResponse
 */
async function listOssBucketScanInfo(request: ListOssBucketScanInfoRequest): ListOssBucketScanInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOssBucketScanInfo', 'POST', '/', 'json', false, 'json', request);
}

model ListSupportObjectSuffixRequest {
}

model ListSupportObjectSuffixResponseBody = {
  data?: [ string ](name='Data'),
  requestId?: string(name='RequestId', example='2220FE66-76EF-5D9D-A0EE-3221CC******'),
}

model ListSupportObjectSuffixResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSupportObjectSuffixResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSupportObjectSuffix  ListSupportObjectSuffixRequest
  * @return ListSupportObjectSuffixResponse
 */
async function listSupportObjectSuffix(request: ListSupportObjectSuffixRequest): ListSupportObjectSuffixResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSupportObjectSuffix', 'POST', '/', 'json', false, 'json', request);
}

model OperateBucketScanTaskRequest {
  bucketName?: string(name='BucketName', example='testBucket******', position='Query'),
  operateCode?: int32(name='OperateCode', example='1', position='Query'),
}

model OperateBucketScanTaskResponseBody = {
  requestId?: string(name='RequestId', example='E99D386F-5546-5BCD-BADD-F4EF4B******'),
}

model OperateBucketScanTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OperateBucketScanTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of OperateBucketScanTask  OperateBucketScanTaskRequest
  * @return OperateBucketScanTaskResponse
 */
async function operateBucketScanTask(request: OperateBucketScanTaskRequest): OperateBucketScanTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OperateBucketScanTask', 'POST', '/', 'json', false, 'json', request);
}

model UpdateOssScanConfigRequest {
  allKeyPrefix?: string(name='AllKeyPrefix', example='true', position='Query'),
  bucketName?: string(name='BucketName', example='testBucket******', position='Query'),
  decompressMaxFileCount?: int32(name='DecompressMaxFileCount', example='1000', position='Query'),
  decompressMaxLayer?: int32(name='DecompressMaxLayer', example='1', position='Query'),
  decryptionList?: [ string ](name='DecryptionList', position='Query'),
  enable?: int32(name='Enable', example='0', position='Query'),
  endTime?: string(name='EndTime', example='00:10:00', position='Query'),
  id?: string(name='Id', example='100******', position='Query'),
  keyPrefixList?: [ string ](name='KeyPrefixList', position='Query'),
  keySuffixList?: [ string ](name='KeySuffixList', position='Query'),
  lastModifiedStartTime?: long(name='LastModifiedStartTime', example='1724301769834', position='Query'),
  name?: string(name='Name', example='testPolicy******', position='Query'),
  realTimeIncr?: boolean(name='RealTimeIncr', position='Query'),
  scanDayList?: [ int32 ](name='ScanDayList', position='Query'),
  startTime?: string(name='StartTime', example='00:00:00', position='Query'),
}

model UpdateOssScanConfigResponseBody = {
  requestId?: string(name='RequestId', example='E99D386F-5546-5BCD-BADD-F4EF4B******'),
}

model UpdateOssScanConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateOssScanConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateOssScanConfig  UpdateOssScanConfigRequest
  * @return UpdateOssScanConfigResponse
 */
async function updateOssScanConfig(request: UpdateOssScanConfigRequest): UpdateOssScanConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateOssScanConfig', 'POST', '/', 'json', false, 'json', request);
}

